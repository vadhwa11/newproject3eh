
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.jkt.kmclindentservice;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

import jkt.hms.masters.business.StoreInternalIndentM;
import jkt.hms.masters.business.StoreInternalIndentT;
import jkt.hms.util.HMSUtil;

import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.jkt.entities.indentkmcl.IndentList;
import com.jkt.entities.indentkmcl.IndentListRequestType;
import com.jkt.entities.indentkmcl.IndentListResponseType;
import com.jkt.entities.indentkmcl.IndentType;
import com.jkt.entities.indentkmcl.ItemType;
import com.jkt.entities.indentkmcl.BusinessFaultType;
import com.jkt.entities.indentkmcl.ItemListType;

/**
 * This class was generated by Apache CXF 3.0.2
 * 2015-11-17T13:04:09.552+05:30
 * Generated source version: 3.0.2
 * 
 */

@javax.jws.WebService(
                      serviceName = "KmclIndentService",
                      portName = "KmclIndentServiceSOAP",
                      targetNamespace = "http://www.jkt.com/KmclIndentService/",
                      wsdlLocation = "./././hms/jkt/service/KmclIndentService.wsdl",
                      endpointInterface = "com.jkt.kmclindentservice.IKmclIndentService")
                      
public class KmclIndentServiceSOAPImpl implements IKmclIndentService {

    private static final Logger LOG = Logger.getLogger(KmclIndentServiceSOAPImpl.class.getName());
    @Autowired
    private SessionFactory sessionFactory;
  
                 public SessionFactory getSessionFactory() {
	              return sessionFactory;
                  }
               public void setSessionFactory(SessionFactory sessionFactory) {
	          this.sessionFactory = sessionFactory;
                  }
               
     @Transactional(value="transactionManager")
    public com.jkt.entities.indentkmcl.IndentListResponseType getAllIndent(com.jkt.entities.indentkmcl.IndentListRequestType parameters) throws BusinessException    { 
        LOG.info("Executing operation getAllIndent");
        
        List<StoreInternalIndentM> indentM=null;
        IndentListRequestType indentListRequestType=null;
        IndentListResponseType indentListResponseType=null;
        ItemType itemType=null;
        ItemListType itemListType=null;
        IndentList list=null;
        IndentType indentType=null;
       
        try {
        	if(parameters.getFromDate()!=null  &&  parameters.getToDate()!=null){
        		
        		indentM = sessionFactory.getCurrentSession().createCriteria(StoreInternalIndentM.class,"ind")/*.createAlias("ind.Internal","internal")*/
     				   .add(Restrictions.between("ind.DemandDate",HMSUtil.convertStringTypeDateToDateType(parameters.getFromDate()), HMSUtil.convertStringTypeDateToDateType(parameters.getToDate())))
     			       .add(Restrictions.eq("ind.Status", "p").ignoreCase())
     				   .list();
        	//	System.out.println("ioootemlist"+indentTs.size());
        	}
        	//System.out.println("itemlist"+indentTs.size());
        	indentListResponseType=new IndentListResponseType();
        	itemListType=new ItemListType();
        	list=new IndentList();
        	indentType=new IndentType();
        	for(StoreInternalIndentM indentm:indentM)
    		{        	
        	indentType.setHospitalName(indentm.getHospital()!=null ? indentm.getHospital().getHospitalName():"");
        	indentType.setIndentNo(indentm.getDemandNo()!=null ? indentm.getDemandNo():"");
        	
        	List<StoreInternalIndentT>	indentTs1=new ArrayList<StoreInternalIndentT>();
        	indentTs1=(ArrayList<StoreInternalIndentT>)sessionFactory.getCurrentSession().createCriteria(StoreInternalIndentT.class,"t")
        			.createAlias("t.Internal", "m").add(Restrictions.eq("m.Id", indentm.getId())).list();
        	System.out.println(indentm.getId()+"===Size---"+indentTs1.size());
        		for(StoreInternalIndentT indentT1:indentTs1)
        		{
    			itemType=new ItemType();
    			itemType.setKmclCode(indentT1.getItem()!=null ? indentT1.getItem().getKmsclItemCode():"");
    			itemType.setUnit(indentT1.getItem()!=null ? indentT1.getItem().getItemConversion().getItemUnitName():"");
    			itemType.setQuantityRecommendedByDME(indentT1.getRequiredQty()!=null ?indentT1.getRequiredQty().toString():"");
    			itemType.setQuantityApprovedByDHS(indentT1.getQtyIssued()!=null ? indentT1.getQtyIssued().toString():"");
    			itemType.setQuantity(indentT1.getQtyRequest()!=null ? indentT1.getQtyRequest().toString():"");
    			itemType.setAnnualIndentId(indentT1.getInternal().getHospital()!=null ? indentT1.getInternal().getHospital().getHospitalCode().toString():"");
    			itemListType.getItemType().add(itemType);
        		}  
    			indentType.getItemListType().add(itemListType);
    			list.getIndentType().add(indentType);
    			 indentListResponseType.setIndentList(list);
    		}
        	
        }
        catch(Exception ex){
            // dummy setting for business exception, we can set more meaningful error depending on the business requirements
        	  BusinessFaultType  businessFaultType = new BusinessFaultType();
            businessFaultType.setErrorCode(16359);
            businessFaultType.setErrorMessage("Error in invoking Indent Service " + ex.getMessage());
            businessFaultType.setErrorDescription(ex.getStackTrace().toString());
        }
        finally{
        }
     //  System.out.println("ooo"+indentListResponseType.hashCode());
        return indentListResponseType;
    }

}
