/*
 * Copyright 2008 JK Technosoft Ltd. All rights reserved.
 * Use is subject to license terms.
 * StoresController.java
 * Purpose of the claas -  This is the Controller for Stores Module
 * @authors  Abha,Deepti,Mansi,Vivek
 * Create Date: 4th Jan,2008
 * Revision Date:
 * Revision By:
 * @version 2.0
 */
package jkt.hms.stores.controller;

import static jkt.hms.util.RequestConstants.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.sql.SQLException;
import java.sql.Blob;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadException;
import javazoom.upload.UploadFile;
import jkt.hms.billing.controller.BillingController;
import jkt.hms.billing.dataservice.BillingDataService;
import jkt.hms.billing.handler.BillingHandlerService;
import jkt.hms.masters.business.MasDepartment;
import jkt.hms.masters.business.MasEmployee;
import jkt.hms.masters.business.MasHospital;
import jkt.hms.masters.business.MasLsg;
import jkt.hms.masters.business.MasManufacturer;
import jkt.hms.masters.business.MasRank;
import jkt.hms.masters.business.MasSetupParameterMaintaince;
import jkt.hms.masters.business.MasStoreAirForceDepot;
import jkt.hms.masters.business.MasStoreBrand;
import jkt.hms.masters.business.MasStoreItem;
import jkt.hms.masters.business.MasStoreSection;
import jkt.hms.masters.business.MasStoreSupplier;
import jkt.hms.masters.business.Patient;
import jkt.hms.masters.business.StoreAdjustmentM;
import jkt.hms.masters.business.StoreAdjustmentT;
import jkt.hms.masters.business.StoreBalanceM;
import jkt.hms.masters.business.StoreBalanceT;
import jkt.hms.masters.business.StoreBoo;
import jkt.hms.masters.business.StoreBooMember;
import jkt.hms.masters.business.StoreDefectiveDrugM;
import jkt.hms.masters.business.StoreDefectiveDrugT;
import jkt.hms.masters.business.StoreDeptReorderLevel;
import jkt.hms.masters.business.StoreGrnM;
import jkt.hms.masters.business.StoreGrnT;
import jkt.hms.masters.business.StoreIndentM;
import jkt.hms.masters.business.StoreIndentSocTracker;
import jkt.hms.masters.business.StoreIndentT;
import jkt.hms.masters.business.StoreInternalIndentM;
import jkt.hms.masters.business.StoreInternalIndentT;
import jkt.hms.masters.business.StoreIssueM;
import jkt.hms.masters.business.StoreIssueT;
import jkt.hms.masters.business.StoreItemBatchStock;
import jkt.hms.masters.business.StoreItemLogTransaction;
import jkt.hms.masters.business.StoreLoaninM;
import jkt.hms.masters.business.StoreLoaninT;
import jkt.hms.masters.business.StoreMmfDepartmentM;
import jkt.hms.masters.business.StorePoDetail;
import jkt.hms.masters.business.StorePoHeader;
import jkt.hms.masters.business.StoreSetup;
import jkt.hms.masters.business.StoreSupplyOrderEntry;
import jkt.hms.masters.business.Users;
import jkt.hms.masters.business.Visit;
import jkt.hms.masters.handler.CommonMasterHandlerService;
import jkt.hms.masters.handler.HospitalDetailsMasterHandlerService;
import jkt.hms.stores.handler.StoresHandlerService;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.JKTRequestUtils;
import jkt.hms.util.PagedArray;
import jkt.hms.util.PojoForMasStoreItem;
import jkt.hms.util.RequestConstants;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import jxl.Cell;
import jxl.CellView;
import jxl.DateCell;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.UnderlineStyle;
import jxl.write.Label;
import jxl.write.NumberFormats;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import net.sf.jmimemagic.Magic;
import net.sf.jmimemagic.MagicException;
import net.sf.jmimemagic.MagicMatch;
import net.sf.jmimemagic.MagicMatchNotFoundException;
import net.sf.jmimemagic.MagicParseException;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.xerces.parsers.IntegratedParserConfiguration;
//commented for maven
/*import org.exolab.jms.authentication.User;*/
import org.hibernate.Session;
import org.springframework.web.bind.ServletRequestBindingException;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

import ca.uhn.hl7v2.model.v26.segment.ITM;
import jkt.hms.masters.business.UploadDocuments;
public class StoresController extends MultiActionController {

	/*
	 * Instance variables
	 */
	StoresHandlerService storesHandlerService = null;
	CommonMasterHandlerService commonMasterHandlerService = null;
	HospitalDetailsMasterHandlerService hospitalDetailsMasterHandlerService = null;
	BillingHandlerService billingHandlerService = null;
	HttpSession session = null;
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	String pojoPropertyName = "";
	String pojoPropertyCode = "";
	String pojoName = "";
	String userName = "";
	String currentDate = "";
	String currentTime = "";
	String message = "";
	String url = "";

	// ================================================================================================

	// ================================================================================================
	// ========================== GRN,LOAN IN , BOO ,DEFECTIVE DRUGS By
	// ABHA=====================
	public ModelAndView showGrnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		if (session.getAttribute("deptId") != null)
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		Box box = HMSUtil.getBox(request);

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.showGrnJsp(box, dataMap);
		// jsp = "grnTemporary";
		jsp = "grn";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);

		return new ModelAndView("index", "map", map);
	}

	// More Parameters of a PVMS/NIV Item that are Non-Mandatory Fields.
	public ModelAndView showInfoOfGrnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnT> storeGrnTMoreInfoList = new ArrayList<StoreGrnT>();
		map = storesHandlerService.getDetailsForMoreInfoGrn();
		int rowNo = 0;
		int storeGrnTId = 0;

		if (request.getParameter("rowNo") != null) {
			rowNo = Integer.parseInt(request.getParameter("rowNo"));
		}
		if (request.getParameter("detailId") != null) {
			storeGrnTId = Integer.parseInt(request.getParameter("detailId"));
			storeGrnTMoreInfoList = storesHandlerService
					.getStoreGrnTListForMoreInfo(storeGrnTId);
			map.put("storeGrnTMoreInfoList", storeGrnTMoreInfoList);
		}
		jsp = GRN1_JSP;
		title = "GRN";
		map.put("title", title);
		map.put("rowNo", rowNo);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseForIndentWithinInstitue(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		if (session.getAttribute("hospitalId") != null){
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null){
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		String choice = "";
		if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
			choice = request.getParameter(SOURCE_OF_SUPPLY);
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("choice", choice);
		map = storesHandlerService.responseForIndentWithinInstitue(box);
		jsp = "responseForIndentFromInstitute";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseForIndentGrid(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int indentId = 0;
		if (request.getParameter("indentId") != null) {
			indentId = Integer.parseInt(request.getParameter("indentId"));
		}
		box.put("indentId", indentId);
		map = storesHandlerService.responseForIndentGrid(box);
		jsp = "responseForIndentData";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseForLocalPurchase(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String choice = "";
		if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
			choice = request.getParameter(SOURCE_OF_SUPPLY);
		}
		box.put("choice", choice);
		map = storesHandlerService.responseForLocalPurchase(box);
		jsp = "responseForLocalPurchase";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseForPoNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int vendorId = 0;
		if (request.getParameter("vendorId") != null) {
			vendorId = Integer.parseInt(request.getParameter("vendorId"));
		}
		box.put("vendorId", vendorId);
		map = storesHandlerService.responseForPoNo(box);
		jsp = "responseForPoNo";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseForPoGrid(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int poId = 0;
		if (request.getParameter("poId") != null) {
			poId = Integer.parseInt(request.getParameter("poId"));
		}
		box.put("poId", poId);
		map = storesHandlerService.responseForPoGrid(box);
		jsp = "responseForPoGrid";
		return new ModelAndView(jsp, "map", map);
	}

	// Method For indent and po list

	public ModelAndView responseForList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";

		if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
			choice = request.getParameter(SOURCE_OF_SUPPLY);
		}
		map = (Map<String, Object>) storesHandlerService.getIndentList(choice);
		jsp = RESPONSE_FOR_LIST;
		return new ModelAndView(jsp, "map", map);
	}

	// method for supplier list
	public ModelAndView responseForVendor(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String vendor = "";

		if (request.getParameter(INDENT_ID) != null) {
			vendor = request.getParameter(INDENT_ID);
		}
		map = (Map<String, Object>) storesHandlerService.getVendorList(vendor);
		return new ModelAndView(jsp, "map", map);
	}

	// For adding Grn
	/*
	 * public ModelAndView submitGrn(HttpServletRequest request,
	 * HttpServletResponse response) { Box box = HMSUtil.getBox(request);
	 * session = request.getSession();
	 * 
	 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
	 * Object> infoMap = new HashMap<String, Object>(); Map<String, Object>
	 * dataMap = new HashMap<String, Object>(); StoreGrnM storeGrnM=new
	 * StoreGrnM(); StoreItemBatchStock storeItemBatchStock= new
	 * StoreItemBatchStock(); StoreIndentM storeIndentM2 = new StoreIndentM();
	 * StorePoHeader storePoHeader2= new StorePoHeader();
	 * 
	 * int deptId =0;
	 * 
	 * if(session.getAttribute("deptId") !=null)
	 * deptId=Integer.parseInt(""+session.getAttribute("deptId"));
	 * 
	 * int hospitalId = 0; if(session.getAttribute("hospitalId") !=null)
	 * hospitalId=Integer.parseInt(""+session.getAttribute("hospitalId"));
	 * 
	 * //List addOrUpdate = new ArrayList(); String grnNo=""; int rows=0; String
	 * sourceOfSupply=""; Date grnDate =new Date(); int grnId=0; //int unitId=0;
	 * int indentId=0; int poId=0; String howReceived=""; Date
	 * dateReceivedSurplus=new Date(); String rrNo=""; String
	 * modeOfConveyance=""; int employeeId=0; String invoiceNo=""; Date
	 * invoiceDate=new Date(); BigDecimal invoiceAmount =null; BigDecimal
	 * freightDuty=null; BigDecimal exciseDuty=null; BigDecimal octroi=null;
	 * BigDecimal customDuty=null; BigDecimal insuranceCharge=null; BigDecimal
	 * otherCharges=null; BigDecimal grnValue=null; BigDecimal
	 * roundOffValue=null; BigDecimal grnAmount=null; BigDecimal totalAmount=
	 * null; int supplierId=0; String encodedBy=""; Date encodedDate = null;
	 * String lastChgBy="A"; Date lastChgDate = null; String lastChgTime="";
	 * String atSoNo=""; //int departmentId=0; String remarks=""; String date =
	 * ""; String time = ""; String choice=""; int noOfRows=0; int pageNo=1;
	 * String buttonFlag=""; try { if (request.getParameter("pageNo") != null)
	 * pageNo= Integer.parseInt(request.getParameter("pageNo")); if
	 * (request.getParameter("noOfRows") != null) noOfRows =
	 * Integer.parseInt(request.getParameter("noOfRows")); if
	 * (request.getParameter(GRN_ID) != null) grnId=
	 * Integer.parseInt(request.getParameter(GRN_ID));
	 * 
	 * if (request.getParameter(SUPPLIER_ID) != null &&
	 * !request.getParameter(SUPPLIER_ID).equals("0")) supplierId =
	 * Integer.parseInt(request.getParameter(SUPPLIER_ID));
	 * 
	 * if (request.getParameter(EMPLOYEE_ID) != null &&
	 * !request.getParameter(EMPLOYEE_ID).equals("0")) { employeeId =
	 * Integer.parseInt(request.getParameter(EMPLOYEE_ID)); }
	 * if(request.getParameter("buttonFlag") != null){ buttonFlag =
	 * request.getParameter("buttonFlag"); }
	 * 
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("p")) { if
	 * (request.getParameter(INDENT_ID) != null) {
	 * indentId=Integer.parseInt((request.getParameter(INDENT_ID))); } if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * else if(request.getParameter(SOURCE_OF_SUPPLY).equals("l")) { if
	 * (request.getParameter(INDENT_ID) != null) { indentId=Integer.parseInt(
	 * (request.getParameter(INDENT_ID))); }
	 * 
	 * if (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt( (request.getParameter(SUPPLIER_ID))); } }
	 * else if(request.getParameter(SOURCE_OF_SUPPLY).equals("a")) { if
	 * (request.getParameter(INDENT_ID) != null) {
	 * indentId=Integer.parseInt((request.getParameter(INDENT_ID))); } if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * else if (request.getParameter(SOURCE_OF_SUPPLY).equals("o")) { if
	 * (request.getParameter(SUPPLIER_ID) != null) {
	 * supplierId=Integer.parseInt((request.getParameter(SUPPLIER_ID))); } }
	 * 
	 * if (request.getParameter(GRN_NO) != null) { grnNo=
	 * (request.getParameter(GRN_NO)); } if (request.getParameter(INVOICE_NO) !=
	 * null) { invoiceNo= (request.getParameter(INVOICE_NO)); } if
	 * (request.getParameter(REMARKS) != null) { remarks=
	 * request.getParameter(REMARKS); } if (request.getParameter(RR_NO) != null)
	 * { rrNo= request.getParameter(RR_NO); } if
	 * (request.getParameter(MODE_OF_CONVEYANCE) != null) { modeOfConveyance=
	 * request.getParameter(MODE_OF_CONVEYANCE); } if
	 * (request.getParameter(SUPPLY_ORDER_NO) != null) { atSoNo=
	 * request.getParameter(SUPPLY_ORDER_NO); } if
	 * (request.getParameter(HOW_RECEIVED) != null) { howReceived=
	 * request.getParameter(HOW_RECEIVED); } if
	 * (request.getParameter(SOURCE_OF_SUPPLY) != null) { sourceOfSupply=
	 * request.getParameter(SOURCE_OF_SUPPLY); } }catch (Exception e) {
	 * e.printStackTrace(); }
	 * 
	 * try { String te=""; if (request.getParameter(GRN_DATE) != null) { te=
	 * (String)(request.getParameter(GRN_DATE));
	 * 
	 * SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
	 * String
	 * date4MySQL=formatterOut.format(formatterIn.parse(request.getParameter
	 * (GRN_DATE))); grnDate = java.sql.Date.valueOf(date4MySQL); } } catch
	 * (Exception e) { e.printStackTrace(); }
	 * 
	 * try { String teinvoice=""; if (request.getParameter(INVOICE_DATE) !=
	 * null) { teinvoice= (String)(request.getParameter(INVOICE_DATE));
	 * SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
	 * SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
	 * String
	 * date4MySQL=formatterOut.format(formatterIn.parse(request.getParameter
	 * (INVOICE_DATE))); invoiceDate = java.sql.Date.valueOf(date4MySQL); } }
	 * catch (Exception e) { e.printStackTrace(); }
	 * 
	 * 
	 * Map<String, Object> utilMap = new HashMap<String, Object>(); utilMap =
	 * (Map<String, Object>)HMSUtil.getCurrentDateAndTime(); date =
	 * (String)utilMap.get("currentDate"); time =
	 * (String)utilMap.get("currentTime");
	 * 
	 * 
	 * if (request.getParameter(INVOICE_AMOUNT) != null &&
	 * !request.getParameter(INVOICE_AMOUNT).equals("")) { invoiceAmount =new
	 * BigDecimal(request.getParameter(INVOICE_AMOUNT));
	 * storeGrnM.setInvoiceAmount(invoiceAmount); }
	 * 
	 * if (request.getParameter(FREIGHT_DUTY) != null &&
	 * !request.getParameter(FREIGHT_DUTY).equals("")) { freightDuty= new
	 * BigDecimal(request.getParameter(FREIGHT_DUTY)); } if
	 * (request.getParameter(EXCISE_DUTY) != null &&
	 * !request.getParameter(EXCISE_DUTY).equals("")) { exciseDuty=new
	 * BigDecimal(request.getParameter(EXCISE_DUTY)); }
	 * 
	 * if (request.getParameter(OCTROI) != null &&
	 * !request.getParameter(OCTROI).equals("")) { octroi=new
	 * BigDecimal(request.getParameter(OCTROI)); } if
	 * (request.getParameter(CUSTOM_DUTY) != null &&
	 * !request.getParameter(CUSTOM_DUTY).equals("")) { customDuty= new
	 * BigDecimal(request.getParameter(CUSTOM_DUTY));
	 * storeGrnM.setCustomDuty(customDuty); } if
	 * (request.getParameter(INSURANCE_CHARGES) != null &&
	 * !request.getParameter(INSURANCE_CHARGES).equals("")) {
	 * insuranceCharge=new BigDecimal(request.getParameter(INSURANCE_CHARGES));
	 * }
	 * 
	 * if (request.getParameter(OTHER_CHARGES) != null &&
	 * !request.getParameter(OTHER_CHARGES).equals("")) { otherCharges=new
	 * BigDecimal(request.getParameter(OTHER_CHARGES)); }
	 * 
	 * if (request.getParameter(GRN_VALUE) != null &&
	 * !request.getParameter(GRN_VALUE).equals("")) { grnValue= new
	 * BigDecimal(request.getParameter(GRN_VALUE));
	 * storeGrnM.setGrnValue(grnValue); } else{ storeGrnM.setGrnValue(null); }
	 * 
	 * if (request.getParameter(TOTAL_AMOUNT) != null &&
	 * !request.getParameter(TOTAL_AMOUNT).equals("")) { totalAmount=new
	 * BigDecimal(request.getParameter(TOTAL_AMOUNT));
	 * storeGrnM.setGrnAmount(totalAmount); }
	 * 
	 * 
	 * String headerStored = "no";
	 * 
	 * if(pageNo==1) { storeGrnM.setGrnNo(grnNo);
	 * storeGrnM.setDateReceivedSurplus(dateReceivedSurplus);
	 * 
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("p")) { StoreIndentM
	 * storeIndentM= new StoreIndentM(); storeIndentM.setId(indentId);
	 * storeGrnM.setIndent(storeIndentM);
	 * 
	 * MasStoreSupplier masStoreSupplier2 = new MasStoreSupplier();
	 * masStoreSupplier2.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier2); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("l")) { StorePoHeader
	 * storePoHeader= new StorePoHeader(); storePoHeader.setId(indentId);
	 * storeGrnM.setPo(storePoHeader);
	 * 
	 * MasStoreSupplier masStoreSupplier2 = new MasStoreSupplier();
	 * masStoreSupplier2.setId(supplierId);
	 * storeGrnM.setSupplier(masStoreSupplier2); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("a")) { StoreIndentM
	 * storeIndentM= new StoreIndentM(); storeIndentM.setId(indentId);
	 * storeGrnM.setIndent(storeIndentM); MasStoreAirForceDepot
	 * masStoreAirForceDepot = new MasStoreAirForceDepot();
	 * masStoreAirForceDepot.setId(supplierId);
	 * storeGrnM.setUnit(masStoreAirForceDepot); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("o")) {
	 * MasStoreAirForceDepot masStoreAirForceDepot = new
	 * MasStoreAirForceDepot(); masStoreAirForceDepot.setId(supplierId);
	 * storeGrnM.setUnit(masStoreAirForceDepot); storeGrnM.setIndent(null);
	 * storeGrnM.setPo(null); } else
	 * if(request.getParameter(SOURCE_OF_SUPPLY).equals("w")) {
	 * storeGrnM.setIndent(null); storeGrnM.setPo(null); }
	 * 
	 * MasEmployee masEmployee = new MasEmployee();
	 * masEmployee.setId(employeeId); storeGrnM.setEmployee(masEmployee);
	 * 
	 * MasDepartment masDepartment = new MasDepartment();
	 * masDepartment.setId(deptId); storeGrnM.setDepartment(masDepartment);
	 * 
	 * if(remarks !=""){ storeGrnM.setRemarks(remarks); }else{
	 * storeGrnM.setRemarks(null); } if(exciseDuty !=null){
	 * storeGrnM.setExciseDuty(exciseDuty); }else{
	 * storeGrnM.setExciseDuty(null); } storeGrnM.setFreightDuty(freightDuty);
	 * storeGrnM.setGrnDate(grnDate);
	 * 
	 * storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
	 * storeGrnM.setLastChgTime(time);
	 * 
	 * if(atSoNo !=""){ storeGrnM.setAtSoNo(atSoNo); }else{
	 * storeGrnM.setAtSoNo(null); }
	 * 
	 * storeGrnM.setHowReceived(howReceived);
	 * storeGrnM.setInsuranceCharge(insuranceCharge);
	 * storeGrnM.setInvoiceDate(invoiceDate); if(invoiceNo !=""){
	 * storeGrnM.setInvoiceNo(invoiceNo); }else{ storeGrnM.setInvoiceNo(null); }
	 * storeGrnM.setModeOfConveyance(modeOfConveyance);
	 * storeGrnM.setOctroi(octroi); storeGrnM.setOtherCharges(otherCharges);
	 * storeGrnM.setReceiveType(sourceOfSupply);
	 * //storeGrnM.setRoundOffValue(roundOffValue); storeGrnM.setRrNo(rrNo);
	 * storeGrnM.setStatus("o");
	 * 
	 * MasHospital masHospital= new MasHospital();
	 * masHospital.setId(hospitalId); storeGrnM.setHospital(masHospital);
	 * 
	 * storeGrnM.setLastChgBy("admin"); } else { headerStored="yes";
	 * infoMap.put("headerStored", headerStored); } int length = 0;
	 * List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();
	 * 
	 * try { int srNo[] =
	 * JKTRequestUtils.getRequiredIntParameters(request,SR_NO); int
	 * itemIdArray[] =
	 * JKTRequestUtils.getRequiredIntParameters(request,ITEM_ID);
	 * 
	 * String
	 * lotNoArr[]=JKTRequestUtils.getRequiredStringParameters(request,LOT_NO);
	 * String batchNoArr[] =
	 * JKTRequestUtils.getRequiredStringParameters(request,BATCH_NO);
	 * 
	 * 
	 * Vector manufacturerIdArray = box.getVector(MANUFACTURER_ID); Vector
	 * brandIdArray = box.getVector(BRAND_ID); Vector freeQtyTemp =
	 * box.getVector(FREE_QTY); Vector freeItemArr = box.getVector(FREE_ITEM);
	 * Vector manuDate = box.getVector(MANUFACTURING_DATE); Vector expdate =
	 * box.getVector(EXPIRY_DATE); Vector mdq = box.getVector("mdq"); Vector
	 * dispenseType = box.getVector("dipenseType"); Vector ratePerMdq =
	 * box.getVector("ratePerMdq");
	 * 
	 * 
	 * BigDecimal[] quantityReceivedArray = new BigDecimal[100]; BigDecimal[]
	 * taxArr = new BigDecimal[100]; BigDecimal[] unitRateArr = new
	 * BigDecimal[100]; BigDecimal[] discountArr = new BigDecimal[100];
	 * BigDecimal[] amountArr = new BigDecimal[100]; BigDecimal[] costPrice =
	 * new BigDecimal[100];
	 * 
	 * String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * TAX_PERCENT); int yyLen = yy.length; for( int i = 0 ;i < yyLen ; i++){
	 * if(yy[i]!= null || yy[i]!=""){ BigDecimal val = new BigDecimal(yy[i]);
	 * taxArr[i] = val; } }
	 * 
	 * String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * UNIT_RATE); int ttLen = tt.length; for( int i = 0 ;i < ttLen ; i++) {
	 * BigDecimal val = new BigDecimal(tt[i]); unitRateArr[i] = val; } String
	 * zz[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * DISCOUNT_PERCENTAGE); int zzLen = zz.length; for( int i = 0 ;i < zzLen ;
	 * i++){ if(zz[i]!= null || zz[i] !=""){ BigDecimal val = new
	 * BigDecimal(zz[i]); discountArr[i] = val; } } String qq[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, AMOUNT); int qqLen =
	 * qq.length; for( int i = 0 ;i < qqLen ; i++){ BigDecimal val = new
	 * BigDecimal(qq[i]); amountArr[i] = val; } String mm[] =
	 * JKTRequestUtils.getRequiredStringParameters(request, QUANTITY_RECEIVED);
	 * int mmLen = mm.length; for( int i = 0 ;i < mmLen ; i++){ BigDecimal val =
	 * new BigDecimal(mm[i]); quantityReceivedArray[i] = val; }
	 * 
	 * String gg[] = JKTRequestUtils.getRequiredStringParameters(request,
	 * COST_PRICE); int ggLen = gg.length;
	 * 
	 * for( int i = 0 ;i < ggLen ; i++){ BigDecimal val = new BigDecimal(gg[i]);
	 * costPrice[i] = val; }
	 * 
	 * int mdq_value = 0; int free_qty = 0; Vector freeQty = new Vector(25);
	 * for( int i = 0 ;i < mdq.size(); i++) { if
	 * (!mdq.get(i).toString().equalsIgnoreCase("")) { int item_id =
	 * itemIdArray[i]; BigDecimal qty = new BigDecimal(mm[i]); BigDecimal amount
	 * = new BigDecimal(qq[i]); mdq_value =
	 * Integer.parseInt(mdq.get(i).toString()); if
	 * (freeQtyTemp.get(i).toString().equalsIgnoreCase("")) free_qty = 0; else
	 * free_qty = Integer.parseInt(freeQtyTemp.get(i).toString());
	 * Map<String,Object> paramMap = new HashMap<String,Object>();
	 * paramMap.put("itemId", item_id); paramMap.put("qty", qty);
	 * paramMap.put("mdq", mdq_value); paramMap.put("amount", amount);
	 * paramMap.put("freeQty", free_qty); map =
	 * storesHandlerService.getActualQtyAsPerAU(paramMap);
	 * quantityReceivedArray[i] = new
	 * BigDecimal(map.get("actualQuantity").toString()); costPrice[i] = new
	 * BigDecimal(map.get("costPrice").toString()); freeQty.add(i,
	 * map.get("freeQty").toString()); } else { quantityReceivedArray[i] = new
	 * BigDecimal(0); costPrice[i] = new BigDecimal(0); freeQty.add(i, 0); } }
	 * 
	 * if(buttonFlag.equals("next")){ length = 10; }else{ length = noOfRows; }
	 * 
	 * 
	 * for(int i = 0 ; i<length ; i++) { if(itemIdArray[i]!=0) { StoreGrnT
	 * storeGrnTObj=new StoreGrnT(); storeGrnTObj.setSerialNo(srNo[i]);
	 * 
	 * try { storeGrnTObj.setFreeQty(new Integer(freeQty.get(i).toString())); }
	 * catch(Exception e) { storeGrnTObj.setFreeQty(new Integer(0)); }
	 * 
	 * 
	 * storeGrnTObj.setFreeItem(freeItemArr.get(i).toString()); MasStoreItem
	 * masItem = new MasStoreItem(); masItem.setId(itemIdArray[i]);
	 * storeGrnTObj.setItem(masItem);
	 * 
	 * if(manufacturerIdArray.get(i).toString() != "") { MasManufacturer
	 * masManufacturer= new MasManufacturer();
	 * masManufacturer.setId(Integer.parseInt
	 * (manufacturerIdArray.get(i).toString()));
	 * storeGrnTObj.setManufacturer(masManufacturer); } else {
	 * storeGrnTObj.setManufacturer(null); }
	 * 
	 * if(brandIdArray.get(i).toString() != "" ) { MasStoreBrand masStoreBrand =
	 * new MasStoreBrand();
	 * masStoreBrand.setId(Integer.parseInt(brandIdArray.get(i).toString()));
	 * storeGrnTObj.setBrand(masStoreBrand); } else {
	 * storeGrnTObj.setBrand(null); }
	 * 
	 * storeGrnTObj.setReceivedQty(quantityReceivedArray[i]);
	 * storeGrnTObj.setFinalCostPrice(costPrice[i]);
	 * storeGrnTObj.setTax(taxArr[i]); storeGrnTObj.setDiscount(discountArr[i]);
	 * storeGrnTObj.setAmountValue(amountArr[i]);
	 * 
	 * storeGrnTObj.setUnitRate(unitRateArr[i]);
	 * 
	 * if(batchNoArr[i].equals("emptyString")) storeGrnTObj.setBatchNo(""); else
	 * storeGrnTObj.setBatchNo(batchNoArr[i]);
	 * 
	 * 
	 * if(lotNoArr[i].equals("emptyString1"))
	 * storeGrnTObj.setLotNo(brandIdArray.get(i).toString()+","+
	 * batchNoArr[i]+","+itemIdArray[i]); else
	 * storeGrnTObj.setLotNo(lotNoArr[i]);
	 * 
	 * if(!manuDate.get(i).toString().equals("")){
	 * storeGrnTObj.setManufacturerDate(manuDate.get(i).toString()); } else{
	 * storeGrnTObj.setManufacturerDate(null); }
	 * 
	 * 
	 * if(!expdate.get(i).toString().equals("")) {
	 * storeGrnTObj.setExpiryDate(HMSUtil
	 * .convertStringTypeDateToDateType(expdate.get(i).toString())); } else {
	 * storeGrnTObj.setExpiryDate(null); }
	 * 
	 * // add mdq, dispense type, rate per mdq
	 * storeGrnTObj.setDispType(dispenseType.get(i).toString()); try {
	 * storeGrnTObj.setMdqValue(new Integer(mdq.get(i).toString())); }
	 * catch(Exception e) { storeGrnTObj.setMdqValue(new Integer(0)); } try {
	 * storeGrnTObj.setRatePerMdq(new BigDecimal(ratePerMdq.get(i).toString()));
	 * } catch(Exception e) { storeGrnTObj.setRatePerMdq(new BigDecimal(0)); }
	 * storeGrnTlist.add(storeGrnTObj); }//end if } //end for loop } catch
	 * (Exception e) { e.printStackTrace(); }
	 * 
	 * infoMap.put("pageNo",pageNo); infoMap.put("grnNo",grnNo);
	 * infoMap.put("grnId", grnId); //infoMap.put("addOrUpdate",addOrUpdate);
	 * infoMap.put("storeGrnM", storeGrnM); infoMap.put("storeIndentM2",
	 * storeIndentM2); infoMap.put("storePoHeader2", storePoHeader2);
	 * infoMap.put("storeItemBatchStock", storeItemBatchStock);
	 * infoMap.put("storeGrnTlist", storeGrnTlist); infoMap.put("indentId",
	 * indentId); infoMap.put("sourceOfSupply", sourceOfSupply);
	 * dataMap.put("deptId", deptId); dataMap.put("numberOfRecordsInLoanIn",
	 * box.getInt("numberOfRecordsInLoanIn")); boolean flag=false; try{
	 * flag=storesHandlerService.addGrns(infoMap, dataMap);
	 * 
	 * }catch (Exception e) { e.printStackTrace(); } if(map.get("flag") !=
	 * null){ flag = (Boolean)map.get("flag"); }
	 * 
	 * String messageTOBeVisibleToTheUser="";
	 * 
	 * 
	 * 
	 * if(flag){ if(buttonFlag.equals("next")){ jsp = GRN_JSP; pageNo++;
	 * messageTOBeVisibleToTheUser = "CRV created Successfully"; map =
	 * storesHandlerService.showGrnJsp(box, dataMap); if(map.get("grnId") !=
	 * null){ grnId = (Integer)map.get("grnId"); } List<StoreGrnM> grnMList =
	 * storesHandlerService.getGrn(grnId); map.put("grnMList", grnMList);
	 * 
	 * }else{ jsp = STORES_MESSAGE_JSP; pageNo++;
	 * messageTOBeVisibleToTheUser="CRV created Successfully";
	 * url="/hms/hms/stores?method=showGrnJsp"; } }else {
	 * messageTOBeVisibleToTheUser = "CRV not created"; }
	 * 
	 * if (flag) { messageTOBeVisibleToTheUser = "CRV created Successfully"; map
	 * = storesHandlerService.showGrnJsp(box, dataMap); } else {
	 * messageTOBeVisibleToTheUser = "CRV not created"; map =
	 * storesHandlerService.showGrnJsp(box, dataMap); }
	 * 
	 * jsp=GRN_JSP; jsp += ".jsp"; //url="/hms/hms/stores?method=showGrnJsp";
	 * //map.put("grnNo",grnNo); map.put("pageNo",pageNo);
	 * map.put("contentJsp",jsp); //map.put("url", url); //map.put("max",
	 * grnNo);
	 * map.put("messageTOBeVisibleToTheUser",messageTOBeVisibleToTheUser);
	 * return new ModelAndView("index", "map", map); }
	 */
	// For searching Grn on basis of GRN No
	public ModelAndView submitGrn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();

		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			int employeeId = users.getEmployee().getId();
			box.put("employeeId", employeeId);
		}
		box.put("deptId", session.getAttribute("deptId"));
		box.put("hospitalId", session.getAttribute("hospitalId"));
		box.put("userId", session.getAttribute("userId"));
		box.put("userName", session.getAttribute("userName"));

		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		dataMap.put("userName", session.getAttribute("userName"));
		map = storesHandlerService.submitGrn(box);
		String msg = map.get("messageTOBeVisibleToTheUser").toString();
		map = storesHandlerService.showGrnJsp(box, dataMap);
		map.put("messageTOBeVisibleToTheUser", msg);
		jsp = GRN_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getGrnNoListForAutoComplete(HttpServletRequest request,
			HttpServletResponse response) {
		String itemNameField = "";
		Box box = HMSUtil.getBox(request);

		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		box.put("autoHint", autoHint);

		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getGrnNoListForAutoComplete(box);
		jsp = "grnNoList";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView searchGrn(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String grnNo = "";
		int deptId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = request.getParameter(GRN_NO);

			}

			/*
			 * Author Ujjwal Kashyap Dated 23oct 2012 For department Wise Grnno
			 */
			if (session.getAttribute("deptId") != null) {
				deptId = Integer.parseInt(session.getAttribute("deptId")
						.toString());
			}
			// end By Ujjwal in controller
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("grnNo", grnNo);
		searchFieldMap.put("deptId", deptId);
		/*
		 * try { // tempMap = storesHandlerService.showGrnJsp(box, dataMap); if
		 * (tempMap.get("searchGrnList") != null)
		 * 
		 * searchGrnList = (List) tempMap.get("searchGrnList");
		 * 
		 * } catch (Exception e) { e.printStackTrace(); }
		 */
		map = storesHandlerService.searchGrn(searchFieldMap);
		map.put("searchGrnList", searchGrnList);
		jsp = SEARCH_GRN_JSP;
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	// For modifying GRN
	/*
	 * public ModelAndView modifyGrn(HttpServletRequest request,
	 * HttpServletResponse response){ Map<String, Object> dataMap = new
	 * HashMap<String, Object>(); Box box = HMSUtil.getBox(request); Map<String,
	 * Object> map = new HashMap<String, Object>(); Map<String, Object> map2 =
	 * new HashMap<String, Object>(); jsp = MODIFY_GRN_JSP; jsp += ".jsp"; int
	 * radio_str=0; if (request.getParameter("parent") != null) { radio_str
	 * =Integer.parseInt( request.getParameter("parent"));
	 * map=(Map)storesHandlerService.getGrnModifyMap(radio_str); }
	 * List<StoreGrnM> searchGrnList= new ArrayList<StoreGrnM>();
	 * 
	 * map2=storesHandlerService.showGrnJsp(box, dataMap); searchGrnList=(List)
	 * map2.get("searchGrnList"); map.put("searchGrnList", searchGrnList);
	 * map.put("contentJsp",jsp); map.put("title", title);
	 * map.put("radio_str",radio_str); return new ModelAndView("index","map",
	 * map); }
	 */
	public ModelAndView modifyGrn(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		int radio_str = 0;
		int searchPoId = 0;
		String items = "";
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (request.getParameter("searchPoId") != null) {
			searchPoId = Integer.parseInt(""
					+ request.getParameter("searchPoId"));
		}

		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyGrn(
					radio_str, 0, searchPoId, items);
		}
		purchaseMap = storesHandlerService.showGrnJsp(box, dataMap);
		// List<StoreGrnM> grnList = storesHandlerService.getGrnList();
		jsp = MODIFY_GRN_JSP;
		jsp += ".jsp";
		map.put("purchaseMap", purchaseMap);
		// map.put("grnList", grnList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);
	}

	// For updating GRN
	public ModelAndView updateGrn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreGrnM storeGrnM = new StoreGrnM();
		StoreGrnT storeGrnT = new StoreGrnT();
		StoreItemLogTransaction storeItemLogTransaction = new StoreItemLogTransaction();

		String grnNo = "";

		String receiveType = "";
		Date grnDate = new Date();
		int grnId = 0;
		int unitId = 0;
		int poId = 0;
		String howReceived = "";
		String challanNo = "";
		Date challanDate = new Date();
		Date dateReceivedSurplus = new Date();
		String rrNo = "";
		String modeOfConveyance = "";
		int employeeId = 0;
		String invoiceNo = "";
		Date invoiceDate = new Date();
		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal customDuty = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal grnValue = null;
		BigDecimal roundOffValue = null;
		BigDecimal grnAmount = null;
		int supplierId = 0;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		String atSoNo = "";
		int departmentId = 0;
		int totalRecords = 0;
		String buttonFlag = "";
		int noOfRows = 0;
		int pageNo = 1;
		String noDetailRecords = "";
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));

			}
			if (request.getParameter(NO_DETAIL_RECORDS) != null) {
				noDetailRecords = (request.getParameter(NO_DETAIL_RECORDS));

			}
			if (request.getParameter(GRN_ID) != null) {
				grnId = Integer.parseInt(request.getParameter(GRN_ID));

			}
			if (!request.getParameter(SUPPLIER_ID).equals("0")) {
				supplierId = Integer
						.parseInt(request.getParameter(SUPPLIER_ID));

			}
			if (request.getParameter("buttonFlag") != null) {
				buttonFlag = request.getParameter("buttonFlag");
			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = (request.getParameter(GRN_NO));
			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));
			}
			if (pageNo != 1) {
				// grnId=storesHandlerService.getGrn(Integer.parseInt(grnNo));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(GRN_DATE) != null) {
				te = (String) (request.getParameter(GRN_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(GRN_DATE)));
				grnDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String techallan = "";
			if (request.getParameter(CHALLAN_DATE) != null) {
				techallan = (String) (request.getParameter(CHALLAN_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHALLAN_DATE)));
				challanDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			String teinvoice = "";
			if (request.getParameter(INVOICE_DATE) != null) {
				teinvoice = (String) (request.getParameter(INVOICE_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INVOICE_DATE)));
				invoiceDate = java.sql.Date.valueOf(date4MySQL);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		String headerStored = "no";

		if (pageNo == 1) {
			storeGrnM.setId(grnId);
			storeGrnM.setGrnNo(grnNo);
			storeGrnM.setChallanDate(challanDate);
			storeGrnM.setChallanNo(challanNo);
			storeGrnM.setCustomDuty(customDuty);
			storeGrnM.setDateReceivedSurplus(dateReceivedSurplus);

			MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
			masStoreSupplier.setId(supplierId);
			storeGrnM.setSupplier(masStoreSupplier);
			storeItemLogTransaction.setSupplier(masStoreSupplier);

			storeGrnM.setExciseDuty(exciseDuty);
			storeGrnM.setFreightDuty(freightDuty);
			storeGrnM.setGrnAmount(grnAmount);
			storeGrnM.setGrnDate(grnDate);
			storeGrnM.setAtSoNo(atSoNo);
			storeGrnM.setGrnValue(grnValue);
			storeGrnM.setHowReceived(howReceived);
			storeGrnM.setInsuranceCharge(insuranceCharge);
			storeGrnM.setInvoiceAmount(invoiceAmount);
			storeGrnM.setInvoiceDate(invoiceDate);
			storeGrnM.setInvoiceNo(invoiceNo);
			storeGrnM.setModeOfConveyance(modeOfConveyance);
			storeGrnM.setOctroi(octroi);
			storeGrnM.setOtherCharges(otherCharges);
			storeGrnM.setReceiveType(receiveType);
			storeGrnM.setRoundOffValue(roundOffValue);
			storeGrnM.setRrNo(rrNo);
			storeGrnM.setStatus("y");

		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();
		List<StoreGrnT> storeGrnTlistAdd = new ArrayList<StoreGrnT>();
		try {

			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int quantityReceivedArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, QUANTITY_RECEIVED);
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_NO);
			// int brandIdArr[] =
			// JKTRequestUtils.getRequiredIntParameters(request,BRAND_ID);
			String freeItemArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, FREE_ITEM);
			int freeQtyArr[] = JKTRequestUtils.getRequiredIntParameters(
					request, FREE_QTY);
			String expDateArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, EXPIRY_DATE);
			BigDecimal[] taxArr = new BigDecimal[10];
			BigDecimal[] unitRateArr = new BigDecimal[10];
			BigDecimal[] discountArr = new BigDecimal[10];
			BigDecimal[] amountArr = new BigDecimal[10];
			length = srNo.length;

			String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
					TAX_PERCENT);
			int yyLen = yy.length;
			for (int i = 0; i < yyLen; i++) {
				BigDecimal val = new BigDecimal(yy[i]);
				taxArr[i] = val;
			}
			String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
					UNIT_RATE);
			int ttLen = tt.length;
			for (int i = 0; i < ttLen; i++) {
				BigDecimal val = new BigDecimal(tt[i]);
				unitRateArr[i] = val;
			}
			String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
					DISCOUNT_PERCENTAGE);
			int zzLen = zz.length;
			for (int i = 0; i < zzLen; i++) {
				BigDecimal val = new BigDecimal(zz[i]);
				discountArr[i] = val;
			}
			String qq[] = JKTRequestUtils.getRequiredStringParameters(request,
					AMOUNT);
			int qqLen = qq.length;
			for (int i = 0; i < qqLen; i++) {
				BigDecimal val = new BigDecimal(qq[i]);
				amountArr[i] = val;
			}
			if (noDetailRecords.equals("no")) {
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);

				int idArrayLength = idArray.length;
				for (int i = 0; i < length; i++) {

					if (idArrayLength > 0) {

						StoreGrnT storeGrnTObj = new StoreGrnT();

						storeGrnTObj.setId(idArray[i]);
						storeGrnTObj.setSerialNo(srNo[i]);
						storeGrnTObj.setBatchNo(batchNoArr[i]);

						storeGrnTObj.setDiscount(discountArr[i]);
						storeGrnTObj
								.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expDateArr[i]));
						storeGrnTObj.setFreeItem(freeItemArr[i]);
						storeGrnTObj.setFreeQty(freeQtyArr[i]);
						storeGrnTObj.setTax(taxArr[i]);
						storeGrnTObj.setUnitRate(unitRateArr[i]);
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId(itemIdArray[i]);
						storeGrnTObj.setItem(masStoreItem);

						StoreGrnM storeGrnM2 = new StoreGrnM();
						storeGrnM2.setId(grnId);
						storeGrnTObj.setGrnMaster(storeGrnM2);

						storeGrnTlist.add(storeGrnTObj);
					} else {
						if (idArray[i] != 0) {
							StoreGrnT storeGrnTAdd = new StoreGrnT();
							storeGrnTAdd.setSerialNo(srNo[i]);
							storeGrnTAdd.setBatchNo(batchNoArr[i]);
							// storeGrnTAdd.setBrand(brand);
							storeGrnTAdd.setDiscount(discountArr[i]);
							storeGrnTAdd
									.setExpiryDate(HMSUtil
											.convertStringTypeDateToDateType(expDateArr[i]));
							storeGrnTAdd.setFreeItem(freeItemArr[i]);
							storeGrnTAdd.setFreeQty(freeQtyArr[i]);
							StoreGrnM storeGrnM2 = new StoreGrnM();
							storeGrnM2.setId(grnId);
							storeGrnTAdd.setGrnMaster(storeGrnM2);

							MasStoreItem masStoreItem = new MasStoreItem();
							masStoreItem.setId(itemIdArray[i]);
							storeGrnTAdd.setItem(masStoreItem);
							storeGrnTAdd.setUnitRate(unitRateArr[i]);
							storeGrnTlistAdd.add(storeGrnTAdd);
						}
					}
					idArrayLength--;

				}

			} else {
				length = srNo.length;
				for (int i = 0; i < length; i++) {
					StoreGrnT storeGrnTAdd = new StoreGrnT();
					storeGrnTAdd.setSerialNo(srNo[i]);
					storeGrnTAdd.setBatchNo(batchNoArr[i]);
					// storeGrnTAdd.setBrand(brand);
					storeGrnTAdd.setDiscount(discountArr[i]);
					storeGrnTAdd.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expDateArr[i]));
					storeGrnTAdd.setFreeItem(freeItemArr[i]);
					storeGrnTAdd.setFreeQty(freeQtyArr[i]);
					StoreGrnM storeGrnM2 = new StoreGrnM();
					storeGrnM2.setId(grnId);
					storeGrnTAdd.setGrnMaster(storeGrnM2);

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemIdArray[i]);
					storeGrnTAdd.setItem(masStoreItem);
					storeGrnTAdd.setUnitRate(unitRateArr[i]);
					storeGrnTlistAdd.add(storeGrnTAdd);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("grnNo", grnNo);
		infoMap.put("grnId", grnId);

		infoMap.put("storeGrnM", storeGrnM);
		infoMap.put("storeGrnTlist", storeGrnTlist);
		infoMap.put("storeGrnTlistAdd", storeGrnTlistAdd);
		boolean flag = storesHandlerService.updateGrn(storeGrnM, storeGrnTlist);
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			if (infoMap.get("grnId") != null) {
				grnId = (Integer) infoMap.get("grnId");
				// map = (Map<String,
				// Object>)storesHandlerService.grnModifyMap(grnId, pageNo);
				map.put("grnId", grnId);
			}
			storeGrnTlist = (List<StoreGrnT>) map.get("storeGrnTlist");
			if (storeGrnTlist.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((storeGrnTlist.size() != 0) || (buttonFlag.equals("next"))) {
				jsp = MODIFY_GRN_JSP;
			}
			if (!(buttonFlag.equals("next"))) {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "CRV has been updated Successfully";
				url = "/hms/hms/stores?method=showGrnJsp";
			}
			pageNo++;
		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "CRV has not been updated Successfully";
			String url = "/hms/hms/stores?method=showGrnJsp";
		}
		jsp += ".jsp";
		Map<String, Object> purchaseMap = storesHandlerService.showGrnJsp(box,
				dataMap);

		map.put("grnId", grnId);
		map.put("purchaseMap", purchaseMap);
		map.put("pageNo", pageNo);
		map.put("grnNo", grnNo);
		map.put("noDetailRecords", noDetailRecords);
		map.put("url", url);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updateCrv(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		box.put("deptId", session.getAttribute("deptId"));
		box.put("hospitalId", session.getAttribute("hospitalId"));
		box.put("userName", session.getAttribute("userName"));
		box.put("userId", session.getAttribute("userId"));
		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		dataMap.put("userName", session.getAttribute("userName"));
		map = storesHandlerService.updateCrv(box);
		// String msg = map.get("messageTOBeVisibleToTheUser").toString();
		boolean flag = (Boolean) map.get("conFlag");
		// dataMap = storesHandlerService.showGrnJsp(box, dataMap);
		// map.put("messageTOBeVisibleToTheUser", msg);

		// boolean flag = false;
		Map<String, Object> purchaseMap = new HashMap<String, Object>();

		int radio_str = 0;
		int deptId = 0;
		int searchPoId = 0;
		String items = "";
		String validate = "";

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (request.getParameter("searchPoId") != null) {
			searchPoId = Integer.parseInt(""
					+ request.getParameter("searchPoId"));
		}
		if (request.getParameter("validate") != null) {
			validate = request.getParameter("validate");
		}
		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyGrn(
					radio_str, 0, searchPoId, items);
		}
		purchaseMap = storesHandlerService.showGrnJsp(box, dataMap);
		// List<StoreGrnM> grnList = storesHandlerService.getGrnList();

		map.put("purchaseMap", purchaseMap);
		// map.put("grnList", grnList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);
		int grn_id = 0;
		if (map.get("map") != null) {
			map = (Map) map.get("map");
		}
		if (map.get("grn_id") != null) {
			grn_id = (Integer) map.get("grn_id");
		}
		List<StoreGrnM> gridGrnHeaderList = new ArrayList<StoreGrnM>();
		if (map.get("gridGrnHeaderList") != null) {
			gridGrnHeaderList = (List<StoreGrnM>) map.get("gridGrnHeaderList");
		}

		String messageTOBeVisibleToTheUser = "";

		if (!validate.equalsIgnoreCase("t")) {
			map.put("gridGrnHeaderList", gridGrnHeaderList);
			jsp = SEARCH_GRN_JSP;
			jsp += ".jsp";
			if (flag) {

				messageTOBeVisibleToTheUser = "GRN has been updated Successfully";

				map.put("messageType", "success");
			} else {

				messageTOBeVisibleToTheUser = "GRN has not been updated Successfully";

				map.put("messageType", "failure");
			}
		} else {
			jsp = "validateNewGrnJsp";
			jsp += ".jsp";
			if (flag) {

				messageTOBeVisibleToTheUser = "GRN has been validated Successfully";

				map.put("messageType", "success");
			} else {

				messageTOBeVisibleToTheUser = "GRN has not been validated Successfully";

				map.put("messageType", "failure");
			}
		}
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		// jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("dataMap", dataMap);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView validateGrnScreen(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		jsp = VALIDATE_GRN_JSP;
		jsp = jsp + ".jsp";

		int radio_str = 0;
		int deptId = 0;
		int searchPoId = 0;
		String items = "";

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (request.getParameter("searchPoId") != null) {
			searchPoId = Integer.parseInt(""
					+ request.getParameter("searchPoId"));
		}

		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyGrn(
					radio_str, 0, searchPoId, items);
		}
		purchaseMap = storesHandlerService.showGrnJsp(box, dataMap);
		// List<StoreGrnM> grnList = storesHandlerService.getGrnList();

		map.put("purchaseMap", purchaseMap);
		// map.put("grnList", grnList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);
		map.put("Validate", "validate");

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getSoItemDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String pageType = "";
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("pageType") != null) {
			pageType = request.getParameter("pageType");
			box.put("pageType", pageType);
		}

		if (request.getParameter("po_id") != null) {
			radio_str = Integer.parseInt("" + request.getParameter("po_id"));
		}
		if (request.getParameter("addedItems") != null) {
			box.put("addedItems", request.getParameter("addedItems"));
		}

		if (choice.equalsIgnoreCase("l")) {
			box.put("po_id", radio_str);
			map = (Map) storesHandlerService.getSOItemDetails(box);
		}

		jsp = "soItemDetails";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseSOGridList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String items = "";
		int pageNo = 1;
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}
		if (choice.equalsIgnoreCase("l") && !items.equals("")) {
			radio_str = Integer.parseInt(request.getParameter("po_id"));
			map = (Map) storesHandlerService.getAdjustmentList(radio_str,
					pageNo, items);
		}

		jsp = "grid";
		return new ModelAndView(jsp, "map", map);
		// return null;
	}

	// ///////////////////// LOAN IN///////////////////////////////
	// for loanin jsp
	public ModelAndView showLoanInJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.showLoanInJsp(dataMap);
		jsp = LOANIN_JSP;
		jsp = jsp + ".jsp";
		title = "LoanIn";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("index", "map", map);
	}

	// for adding loanin
	public ModelAndView LoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		box.put("deptId", session.getAttribute("deptId"));
		box.put("hospitalId", session.getAttribute("hospitalId"));
		box.put("userName", session.getAttribute("userName"));

		dataMap.put("deptId", session.getAttribute("deptId"));
		dataMap.put("hospitalId", session.getAttribute("hospitalId"));
		dataMap.put("userName", session.getAttribute("userName"));

		map = storesHandlerService.submitLoanIn(box);
		String msg = map.get("messageTOBeVisibleToTheUser").toString();
		map = storesHandlerService.showGrnJsp(box, dataMap);
		map.put("messageTOBeVisibleToTheUser", msg);
		jsp = LOANIN_JSP;
		jsp = jsp + ".jsp";
		title = "LoanIn";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("index", "map", map);
	}

	// for Searching loanin on basis of loanin no
	public ModelAndView searchLoanin(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String fromDate = "";
		String toDate = "";
		String loanInNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreLoaninM> searchLoanInList = new ArrayList<StoreLoaninM>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(LOANIN_NO) != null) {
				loanInNo = request.getParameter(LOANIN_NO);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("loanInNo", loanInNo);
		try {
			tempMap = storesHandlerService.showLoanInJsp(dataMap);
			if (tempMap.get("searchLoanInList") != null)
				searchLoanInList = (List) tempMap.get("searchLoanInList");
			map = storesHandlerService.searchLoanin(searchFieldMap);
			map.put("searchLoanInList", searchLoanInList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_LOANIN;
		jsp = jsp + ".jsp";
		title = "LOANIN";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	// for modifying loanin

	/*
	 * 
	 * Map<String, Object> map = new HashMap<String, Object>(); Map<String,
	 * Object> purchaseMap = new HashMap<String, Object>(); jsp =
	 * MODIFY_LOANIN_JSP; jsp += ".jsp"; int radio_str = 0; if
	 * (request.getParameter("parent") != null) { radio_str =
	 * Integer.parseInt(request.getParameter("parent")); map = (Map<String,
	 * Object>)storesHandlerService.modifyLoanin(radio_str, 0); }
	 * 
	 * purchaseMap = storesHandlerService.showLoanInJsp(); List<StoreLoaninM>
	 * loaninList = storesHandlerService.getloanList(); map.put("purchaseMap",
	 * purchaseMap); map.put("loaninList", loaninList);
	 * map.put("contentJsp",jsp); map.put("title", title);
	 * map.put("radio_str",radio_str);
	 * 
	 * return new ModelAndView("index","map", map); }
	 */
	// public ModelAndView modifyLoanin(HttpServletRequest request,
	// HttpServletResponse response){
	/*
	 * HMSUtil.getBox(request); Map<String, Object> map = new HashMap<String,
	 * Object>(); Map<String, Object> map2 = new HashMap<String, Object>();
	 * Map<String, Object> dataMap = new HashMap<String, Object>(); jsp =
	 * MODIFY_LOANIN_JSP; jsp += ".jsp"; int radio_str=0; if
	 * (request.getParameter("parent") != null) { radio_str =Integer.parseInt(
	 * request.getParameter("parent"));
	 * map=(Map)storesHandlerService.getLoanInModifyMap(radio_str); }
	 * List<StoreLoaninM> searchLoanInList= new ArrayList<StoreLoaninM>();
	 * 
	 * map2=storesHandlerService.showLoanInJsp(dataMap); searchLoanInList=(List)
	 * map2.get("searchLoanInList"); map.put("searchLoanInList",
	 * searchLoanInList); map.put("contentJsp",jsp); map.put("title", title);
	 * map.put("radio_str",radio_str); return new ModelAndView("index","map",
	 * map); }
	 */

	public ModelAndView modifyLoanin(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		jsp = MODIFY_LOANIN_JSP;
		jsp += ".jsp";
		int radio_str = 0;
		int deptId = 0;

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService.modifyLoanin(
					radio_str, 0);
		}

		purchaseMap = storesHandlerService.showLoanInJsp(dataMap);
		List<StoreLoaninM> loaninList = storesHandlerService.getloanList();

		map.put("poId", radio_str);
		map.put("purchaseMap", purchaseMap);
		map.put("loaninList", loaninList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);
	}

	// More Parameters of a PVMS/NIV Item that are Non-Mandatory Fields.

	public ModelAndView showMoreInfoLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninT> loanInMoreInfoList = new ArrayList<StoreLoaninT>();
		map = storesHandlerService.getDetailsForLoanIn();
		int rowNo = 0;
		int loaninDetailId = 0;

		if (request.getParameter("rowNo") != null) {
			rowNo = Integer.parseInt(request.getParameter("rowNo"));
		}
		if (request.getParameter("detailId") != null) {
			loaninDetailId = Integer.parseInt(request.getParameter("detailId"));
			loanInMoreInfoList = storesHandlerService
					.getLoanInListForMoreInfo(loaninDetailId);
			map.put("loanInMoreInfoList", loanInMoreInfoList);
		}
		jsp = MORE_INFO_LOANIN_JSP;
		title = "Loan In";
		map.put("title", title);
		map.put("rowNo", rowNo);
		return new ModelAndView(jsp, "map", map);
	}

	// updating Loan In
	public ModelAndView updateLoanIn(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int supplierId = 0;
		String remarks = "";
		Date loanInDate = new Date();
		Date challanDate = new Date();
		int pageNo = 1;
		int noOfRows = 0;
		int poId = 0;
		String date = "";
		String time = "";
		String buttonFlag = "";
		int totalRecords = 0;
		int departmentId = 1;
		int employeeId = 0;
		int loanInId = 0;
		String loanInNo = "";
		String challanNo = "";
		String noDetailRecords = "";

		StoreLoaninM storeLoaninM = new StoreLoaninM();

		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
		}
		if (request.getParameter("loanInNo") != null) {
			loanInNo = request.getParameter("loanInNo");
		}
		if (request.getParameter("challanNo") != null) {
			challanNo = request.getParameter("challanNo");
		}
		if (request.getParameter("totalRecords") != null) {
			totalRecords = Integer.parseInt(request
					.getParameter("totalRecords"));
		}
		if (request.getParameter("NO_DETAIL_RECORDS") != null) {
			noDetailRecords = (request.getParameter("NO_DETAIL_RECORDS"));
		}
		if (request.getParameter(PO_ID) != null) {
			poId = Integer.parseInt(request.getParameter(PO_ID));

		}
		if (request.getParameter(LOANIN_ID) != null) {
			loanInId = Integer.parseInt(request.getParameter(LOANIN_ID));
		}
		if (request.getParameter(NO_OF_ROWS) != null) {
			noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}

		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		if (request.getParameter(LOANIN_DATE) != null) {
			loanInDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(LOANIN_DATE));
		}
		if (request.getParameter(CHALLAN_DATE) != null) {
			challanDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(CHALLAN_DATE));
		}
		if (!request.getParameter(SUPPLIER_ID).equals("0")) {
			supplierId = Integer.parseInt(request.getParameter(SUPPLIER_ID));
		}
		if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
			employeeId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
		}

		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String headerStored = "no";
		if (pageNo == 1) {
			storeLoaninM.setId(loanInId);
			storeLoaninM.setLoaninNo(loanInNo);
			storeLoaninM.setLoaninDate(loanInDate);

			MasStoreSupplier supplier = new MasStoreSupplier();
			supplier.setId(supplierId);
			storeLoaninM.setSupplier(supplier);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			storeLoaninM.setEmployee(masEmployee);

			StorePoHeader storePoHeader = new StorePoHeader();
			storePoHeader.setId(poId);
			storeLoaninM.setPo(storePoHeader);

			storeLoaninM.setChallanDate(challanDate);
			storeLoaninM.setChallanNo(challanNo);
			// storeLoaninM.setRemarks(remarks);
			storeLoaninM.setStatus("y");

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(1);
			storePoHeader.setDepartment(masDepartment);

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;

		BigDecimal[] taxArr = new BigDecimal[10];
		BigDecimal[] unitRateArr = new BigDecimal[10];
		BigDecimal[] discountArr = new BigDecimal[10];
		BigDecimal[] quantityArr = new BigDecimal[10];

		BigDecimal[] amountArr = new BigDecimal[10];

		List<StoreLoaninT> storeLoaninTlist = new ArrayList<StoreLoaninT>();
		List<StoreLoaninT> storeLoaninTlistAdd = new ArrayList<StoreLoaninT>();

		int idArray[] = JKTRequestUtils.getRequiredIntParameters(request,
				DETAIL_ID);
		int srNo[] = JKTRequestUtils.getRequiredIntParameters(request, SR_NO);
		int itemIdArr[] = JKTRequestUtils.getRequiredIntParameters(request,
				ITEM_ID);
		int manufacturerIdArr[] = JKTRequestUtils.getRequiredIntParameters(
				request, MANUFACTURER_ID);
		int brandIdArr[] = JKTRequestUtils.getRequiredIntParameters(request,
				BRAND_ID);

		int freeQtyArr[] = JKTRequestUtils.getRequiredIntParameters(request,
				FREE_QTY);
		String freeItemArr[] = JKTRequestUtils.getRequiredStringParameters(
				request, FREE_ITEM);
		length = srNo.length;

		String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
				TAX_PERCENT);
		int yyLen = yy.length;
		for (int i = 0; i < yyLen; i++) {
			BigDecimal val = new BigDecimal(yy[i]);
			taxArr[i] = val;
		}
		String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
				UNIT_RATE);
		int ttLen = tt.length;
		for (int i = 0; i < ttLen; i++) {
			BigDecimal val = new BigDecimal(tt[i]);
			unitRateArr[i] = val;
		}
		String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
				DISCOUNT_PERCENTAGE);
		int zzLen = zz.length;
		for (int i = 0; i < zzLen; i++) {
			BigDecimal val = new BigDecimal(zz[i]);
			discountArr[i] = val;
		}

		String qq[] = JKTRequestUtils.getRequiredStringParameters(request,
				AMOUNT);
		int qqLen = qq.length;
		for (int i = 0; i < qqLen; i++) {
			BigDecimal val = new BigDecimal(qq[i]);
			amountArr[i] = val;
		}
		String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
				QUANTITY_RECEIVED);
		int mmLen = yy.length;
		for (int i = 0; i < mmLen; i++) {
			BigDecimal val = new BigDecimal(mm[i]);
			quantityArr[i] = val;
		}

		int idArrayLength = idArray.length;
		for (int i = 0; i < length; i++) {

			if (idArrayLength > 0) {
				StoreLoaninT storeLoaninT = new StoreLoaninT();
				storeLoaninT.setId(idArray[i]);
				storeLoaninT.setSerialNo(srNo[i]);

				MasStoreItem masItem = new MasStoreItem();
				masItem.setId(itemIdArr[i]);
				storeLoaninT.setItem(masItem);

				storeLoaninT.setReceivedQty(quantityArr[i]);
				// storeLoaninT.setFreeQty(freeQtyArr[i]);
				storeLoaninT.setTax(taxArr[i]);

				storeLoaninT.setAmountValue(amountArr[i]);
				storeLoaninT.setUnitRate(unitRateArr[i]);
				storeLoaninT.setDiscount(discountArr[i]);
				// storeLoaninT.setFreeItem(freeItemArr[i]);

				StoreLoaninM sl = new StoreLoaninM();
				sl.setId(loanInId);
				storeLoaninT.setLoaninMaster(sl);

				if (manufacturerIdArr[i] != 0) {
					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(manufacturerIdArr[i]);
					storeLoaninT.setManufacturer(masManufacturer);
				}

				storeLoaninTlist.add(storeLoaninT);
			} else {
				if (itemIdArr[i] != 0) {
					StoreLoaninT storeLoaninTAdd = new StoreLoaninT();
					storeLoaninTAdd.setId(idArray[i]);
					storeLoaninTAdd.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArr[i]);
					storeLoaninTAdd.setItem(masItem);

					storeLoaninTAdd.setReceivedQty(quantityArr[i]);
					// storeLoaninTAdd.setFreeQty(freeQtyArr[i]);
					storeLoaninTAdd.setTax(taxArr[i]);

					storeLoaninTAdd.setAmountValue(amountArr[i]);
					storeLoaninTAdd.setUnitRate(unitRateArr[i]);
					storeLoaninTAdd.setDiscount(discountArr[i]);
					// storeLoaninTAdd.setFreeItem(freeItemArr[i]);

					StoreLoaninM storeLoaninM1 = new StoreLoaninM();
					storeLoaninM1.setId(loanInId);
					storeLoaninTAdd.setLoaninMaster(storeLoaninM1);

					if (manufacturerIdArr[i] != 0) {
						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(manufacturerIdArr[i]);
						storeLoaninTAdd.setManufacturer(masManufacturer);
					}

					storeLoaninTAdd.setReceivedQty(null);
					storeLoaninTAdd.setTax(null);

					storeLoaninTlistAdd.add(storeLoaninTAdd);
				}
			}
			idArrayLength--;

		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("loanInNo", loanInNo);
		infoMap.put("loanInId", loanInId);

		infoMap.put("storeLoaninM", storeLoaninM);
		infoMap.put("storeLoaninTlist", storeLoaninTlist);
		infoMap.put("storeLoaninTlistAdd", storeLoaninTlistAdd);

		boolean flag = storesHandlerService.updateLoanIn(infoMap);

		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			if (infoMap.get("loanInId") != null) {
				loanInId = (Integer) infoMap.get("loanInId");
				// map = (Map<String,
				// Object>)storesHandlerService.modifyLoanin(loanInId, pageNo);
				map.put("loanInId", loanInId);
			}
			storeLoaninTlist = (List<StoreLoaninT>) map.get("storeLoaninTlist");
			if (storeLoaninTlist.size() != 0) {
				jsp = MODIFY_LOANIN_JSP;
			} else {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "DATA has been updated Successfully";
				url = "/hms/hms/stores?method=showLoanInJsp";
			}
			pageNo++;
		} else {
			messageTOBeVisibleToTheUser = "DATA has not been updated Successfully";
			url = "/hms/hms/stores?method=showLoanInJsp";
		}

		jsp += ".jsp";
		Map<String, Object> purchaseMap = storesHandlerService
				.showLoanInJsp(dataMap);

		map.put("loanInId", loanInId);
		map.put("purchaseMap", purchaseMap);
		map.put("pageNo", pageNo);
		map.put("loanInNo", loanInNo);
		map.put("url", url);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	// -------------------------------------BOO
	// ENTRY----------------------------------------------------------

	// For Board Of officers Entry jsp
	public ModelAndView showBooJsp(HttpServletRequest request,
			HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Map<String, Object> infoMap = new HashMap<String, Object>();
		infoMap.put("deptId", deptId);
		infoMap.put("hospitalId", hospitalId);
		infoMap.put("userName", userName);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showBooJsp(infoMap);
		jsp = BOO_JSP;
		jsp = jsp + ".jsp";
		title = "BOO ENTRY";
		map.put("contentJsp", jsp);
		map.put("title", title);
		String previousPage = "no";
		map.put("previousPage", previousPage);
		return new ModelAndView("index", "map", map);
	}

	// adding BOO
	public ModelAndView submitBoo(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		StoreBoo storeBoo = new StoreBoo();
		StoreBooMember storeBooMember = new StoreBooMember();

		String grnNo = "";
		int rows = 0;
		Date booDate = new Date();
		int booId = 0;
		int rankId = 0;
		int grnId = 0;
		int employeeId = 0;
		String hroNo = "";
		String booNo = "";
		Date hroDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		Date lastChgDate = null;
		String lastChgTime = "";
		String remarks = "";
		String attendantName = "";
		int presidingOfficerNameId = 0;
		int presidingOfficerRank1Id = 0;
		int officerIcNameId = 0;
		int officerIcRank1Id = 0;
		String officerIcNo = "";
		String date = "";
		String time = "";

		int noOfRows = 0;
		int pageNo = 1;
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = request.getParameter(GRN_NO);

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));

			}
			if (request.getParameter(BOO_ID) != null) {
				booId = Integer.parseInt(request.getParameter(BOO_ID));

			}
			if (!request.getParameter(RANK_ID).equals("0")) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));

			}
			if (!request.getParameter(PRESIDING_OFFICER_RANK_ID).equals("0")) {
				presidingOfficerRank1Id = Integer.parseInt(request
						.getParameter(PRESIDING_OFFICER_RANK_ID));

			}
			if (!request.getParameter(OFFICER_IC_RANK_ID).equals("0")) {
				officerIcRank1Id = Integer.parseInt(request
						.getParameter(OFFICER_IC_RANK_ID));

			}

			if (request.getParameter(HRO_SL_NO) != null) {
				hroNo = request.getParameter(HRO_SL_NO);

			}
			if (request.getParameter(OFFICER_IC_NO) != null) {
				officerIcNo = request.getParameter(OFFICER_IC_NO);

			}
			if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
				employeeId = Integer
						.parseInt(request.getParameter(EMPLOYEE_ID));

			}
			if (!request.getParameter(PRESIDING_OFFICER_NAME_ID).equals("0")) {
				presidingOfficerNameId = Integer.parseInt(request
						.getParameter(PRESIDING_OFFICER_NAME_ID));

			}

			if (!request.getParameter(OFFICER_IC_NAME_ID).equals("0")) {
				officerIcNameId = Integer.parseInt(request
						.getParameter(OFFICER_IC_NAME_ID));

			}

			if (request.getParameter(ATTENDANT_NAME) != null) {
				attendantName = request.getParameter(ATTENDANT_NAME);

			}
			if (request.getParameter(REMARKS) != null) {
				remarks = request.getParameter(REMARKS);

			}

			if (request.getParameter(BOO_NO) != null) {
				booNo = (request.getParameter(BOO_NO));
			}

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(BOO_DATE) != null) {
				te = (String) (request.getParameter(BOO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(BOO_DATE)));
				booDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String techallan = "";
			if (request.getParameter(HRO_DATE) != null) {
				techallan = (String) (request.getParameter(HRO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(HRO_DATE)));
				hroDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		String headerStored = "no";

		if (pageNo == 1) {
			storeBoo.setAttendentName(attendantName);
			storeBoo.setBooDate(booDate);
			storeBoo.setBooNo(booNo);
			storeBoo.setGrnNo(grnNo);
			storeBoo.setHroDate(hroDate);
			storeBoo.setHroSlNo(hroNo);
			storeBoo.setRemarks(remarks);
			storeBoo.setStatus("o");

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			storeBoo.setCommand(masEmployee);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(1);
			storeBoo.setHospital(masHospital);

			MasEmployee masEmployee1 = new MasEmployee();
			masEmployee1.setId(presidingOfficerNameId);
			storeBoo.setPresidingOff(masEmployee1);

			MasEmployee masEmployee2 = new MasEmployee();
			masEmployee2.setId(officerIcNameId);
			storeBoo.setOfficerIc(masEmployee2);

			MasRank masRank = new MasRank();
			masRank.setId(rankId);
			storeBoo.setCommandRank(masRank);

			MasRank masRank1 = new MasRank();
			masRank1.setId(presidingOfficerRank1Id);
			storeBoo.setPresidingOffRank(masRank1);

			MasRank masRank2 = new MasRank();
			masRank2.setId(officerIcRank1Id);
			storeBoo.setOfficerIcRank(masRank2);
			storeBoo.setLastChgBy("admin");
			storeBoo.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeBoo.setLastChgTime(time);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeBoo.setDepartment(masDepartment);

		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreBooMember> storeBooMlist = new ArrayList<StoreBooMember>();

		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int memNameArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, EMPLOYEE_ID);
			int memRankArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, RANK_ID);

			length = noOfRows;
			for (int i = 0; i < length; i++) {
				if (memNameArray[i] != 0) {

					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj.setSrNo(srNo[i]);

					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(memNameArray[i]);
					storeBooMObj.setMember(masEmployee);

					MasRank masRank = new MasRank();
					masRank.setId(memRankArray[i]);
					storeBooMObj.setMemberRank(masRank);

					storeBooMlist.add(storeBooMObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);

		infoMap.put("booNo", booNo);
		infoMap.put("booId", booId);
		infoMap.put("storeBoo", storeBoo);
		infoMap.put("storeBooMlist", storeBooMlist);
		infoMap.put("deptId", deptId);
		boolean flag = false;
		try {
			flag = storesHandlerService.addBoo(infoMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";

		if (flag) {

			pageNo++;
			messageTOBeVisibleToTheUser = "BOO Entry Completed Successfully";
		} else {
			messageTOBeVisibleToTheUser = "BOO Entry not done successfully";
		}
		jsp = "storesMessage";
		jsp += ".jsp";
		url = "/hms/hms/stores?method=showBooJsp";
		map.put("maxBooNo", booNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	// searching BOO on basis of Boo No
	public ModelAndView searchBoo(HttpServletRequest request,
			HttpServletResponse response) {
		String fromDate = "";
		String toDate = "";
		String booNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<StoreBoo> searchBooList = new ArrayList<StoreBoo>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(BOO_NO) != null) {
				booNo = request.getParameter(BOO_NO);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("booNo", booNo);
		try {
			tempMap = storesHandlerService.showBooJsp(dataMap);
			if (tempMap.get("searchBooList") != null)
				searchBooList = (List) tempMap.get("searchBooList");
			map = storesHandlerService.searchBoo(searchFieldMap);
			map.put("searchBooList", searchBooList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_BOO_JSP;
		jsp = jsp + ".jsp";
		title = "Boo";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	// modifying BOO
	public ModelAndView modifyBoo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		jsp = BOO_MODIFY;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map) storesHandlerService.getBooModifyMap(radio_str);
		}
		List<StoreBoo> searchBooList = new ArrayList<StoreBoo>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		map2 = storesHandlerService.showBooJsp(dataMap);
		searchBooList = (List) map2.get("searchBooList");
		employeeList = (List) map2.get("employeeList");
		rankList = (List) map2.get("rankList");

		map.put("searchBooList", searchBooList);
		map.put("employeeList", employeeList);
		map.put("rankList", rankList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);

	}

	// updating BOO
	public ModelAndView updateBoo(HttpServletRequest request,
			HttpServletResponse response) {

		StoreBoo storeBoo = new StoreBoo();
		StoreBooMember storeBooMember = new StoreBooMember();
		Map infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		String grnNo = "";
		int rows = 0;
		Date booDate = new Date();
		int booId = 0;
		int rankId = 0;
		int grnId = 0;
		int employeeId = 0;
		String hroNo = "";
		String booNo = "";
		Date hroDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		String remarks = "";
		String attendantName = "";
		int pageNo = 0;
		int totalRecords = 0;
		int noOfRows = 0;
		String date = "";
		String time = "";
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));
			}
			if (request.getParameter(BOO_ID) != null) {
				booId = Integer.parseInt(request.getParameter(BOO_ID));
			}

			if (request.getParameter(GRN_NO) != null) {
				grnNo = request.getParameter(GRN_NO);

			}

			if (request.getParameter(BOO_NO) != null) {
				booNo = (request.getParameter(BOO_NO));
			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));

			}
			if (request.getParameter(EMPLOYEE_ID) != null) {
				employeeId = Integer
						.parseInt(request.getParameter(EMPLOYEE_ID));
			}
			if (request.getParameter(RANK_ID) != null) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));
			}
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(BOO_DATE) != null) {
				te = (String) (request.getParameter(BOO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(BOO_DATE)));
				booDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String techallan = "";
			if (request.getParameter(HRO_DATE) != null) {
				techallan = (String) (request.getParameter(HRO_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(HRO_DATE)));
				hroDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (request.getParameter(NO_OF_ROWS) != null) {

			rows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}

		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeBoo.setId(booId);

				storeBoo.setAttendentName(attendantName);
				storeBoo.setBooDate(booDate);
				storeBoo.setBooNo(booNo);
				storeBoo.setGrnNo(grnNo);
				storeBoo.setHroDate(hroDate);
				storeBoo.setHroSlNo(hroNo);
				storeBoo.setRemarks(remarks);
				storeBoo.setStatus("o");

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(employeeId);
				storeBoo.setCommand(masEmployee);

				MasRank masRank = new MasRank();
				masRank.setId(rankId);
				storeBoo.setCommandRank(masRank);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(1);
				storeBoo.setHospital(masHospital);

				storeBoo.setLastChgBy("admin");
				storeBoo.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeBoo.setLastChgTime(time);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreBooMember> storeBooMlist = new ArrayList<StoreBooMember>();

		try {
			int idArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					DETAIL_ID);
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int memNameArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, EMPLOYEE_ID);

			length = srNo.length;
			for (int i = 0; i < length; i++) {
				if (idArray[i] != 0) {
					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj.setSrNo(srNo[i]);
					storeBooMObj.setId(idArray[i]);
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(memNameArray[i]);
					storeBooMObj.setMember(masEmployee);
					storeBooMlist.add(storeBooMObj);

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		boolean flag = storesHandlerService.updateBoo(storeBoo, storeBooMlist);

		infoMap.put("pageNo", pageNo);
		infoMap.put("maxBooNo", booNo);
		infoMap.put("booId", booId);
		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if ((totalRecords > pageNo * 10)) {
				jsp = "modifyBoo";
			} else {
				jsp = "message";
				url = "/hms/hms/stores?method=showBooJsp";
				messageTOBeVisibleToTheUser = "Updated Successfully";
			}

			pageNo++;

		} else {
			messageTOBeVisibleToTheUser = "Not Updated";
			url = "/hms/hms/stores?method=showBooJsp";
		}

		jsp += ".jsp";

		Map map2 = new HashMap();
		map2 = (Map) storesHandlerService.showBooJsp(dataMap);
		map.put("searchBooList", (List) map2.get("searchBooList"));
		map.put("url", url);
		map.put("maxBooNo", booNo);
		map.put("booId", booId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	// barcode----
	public ModelAndView showBarcodeJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int grnId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		grnId = Integer.parseInt(request.getParameter(GRN_ID));
		map = (Map) storesHandlerService.getBarcodeList(grnId);
		jsp = BARCODE_JSP;
		jsp = jsp + ".jsp";
		title = "Barcode Label Generation";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// report grn
	public ModelAndView showGrnReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "GRN REPORT";
		List<StoreGrnM> crvNumberList = storesHandlerService.getCrvNumberList();
		jsp = GRN_REPORT + ".jsp";
		map.put("crvNumberList", crvNumberList);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateGrnReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int grnId = 0;
		if (request.getParameter(GRN_ID) != null
				&& !(request.getParameter(GRN_ID).equals(""))) {
			grnId = Integer.parseInt(request.getParameter(GRN_ID));
		}

		requestParameters = storesHandlerService.getGrnPrintMap(grnId);

		requestParameters.put("grnId", grnId);
		byte[] bytes = null;

		try {

			bytes = JasperRunManager.runReportToPdf(getCompiledReport(CRV),
					requestParameters,
					(Connection) requestParameters.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename=" + CRV
				+ ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			((Connection) requestParameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	// contingent bill report
	public ModelAndView generateContingentBillReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int grnId = 0;

		if (request.getParameter(GRN_ID) != null
				&& !(request.getParameter(GRN_ID).equals(""))) {
			grnId = Integer.parseInt(request.getParameter(GRN_ID));
		}

		requestParameters = storesHandlerService
				.getContingentBillPrintMap(grnId);
		requestParameters.put("grnId", grnId);

		byte[] bytes = null;

		try {

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(CONTINGENT_BILL), requestParameters,
					(Connection) requestParameters.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}
		response.setHeader("Content-Disposition", "attachment; filename="
				+ CONTINGENT_BILL + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			((Connection) requestParameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// performa report

	public ModelAndView generateProformaReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int grnId = 0;

		if (request.getParameter(GRN_ID) != null
				&& !(request.getParameter(GRN_ID).equals(""))) {
			grnId = Integer.parseInt(request.getParameter(GRN_ID));
		}

		requestParameters = storesHandlerService.getProformaPrintMap(grnId);
		requestParameters.put("grnId", grnId);

		byte[] bytes = null;

		try {

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(PROFORMA), requestParameters,
					(Connection) requestParameters.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}
		response.setHeader("Content-Disposition", "attachment; filename="
				+ PROFORMA + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			((Connection) requestParameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// adjust loan in for adjusting loanin
	public ModelAndView adjustLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		int poId = 0;
		if (request.getParameter(INDENT_ID) != null)
			poId = Integer.parseInt(request.getParameter(INDENT_ID));

		map = storesHandlerService.getLoanInList(poId);

		title = "adjust LoanIn";
		jsp = ADJUST_LOANIN_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("poId", poId);
		return new ModelAndView("index", "map", map);
	}

	// =========== showing loaninin in grid=======
	/*
	 * public ModelAndView showLoanIn(HttpServletRequest
	 * request,HttpServletResponse response) throws
	 * ServletRequestBindingException { String userName = ""; int deptId = 0;
	 * int hospitalId = 0;
	 * 
	 * session = request.getSession(); if (session.getAttribute("userName") !=
	 * null) userName = (String) session.getAttribute("userName"); if
	 * (session.getAttribute("hospitalId") != null) hospitalId =
	 * Integer.parseInt("" + session.getAttribute("hospitalId")); if
	 * (session.getAttribute("deptId") != null) deptId = Integer.parseInt("" +
	 * session.getAttribute("deptId")); //
	 * --------------------------------------
	 * ------------------------------------------ Map<String, Object> map = new
	 * HashMap<String, Object>(); Map<String, Object> map2 = new HashMap<String,
	 * Object>(); List<StoreWorkOrderM> searchWorkOrderList = new
	 * ArrayList<StoreWorkOrderM>(); //List<MasStoreSection> sectionList = new
	 * ArrayList<MasStoreSection>(); int pageNo = 1;
	 * 
	 * 
	 * int radio_str = 0; if (request.getParameter(INDENT_ID) != null) {
	 * radio_str = Integer.parseInt(request .getParameter(INDENT_ID)); map =
	 * (Map) storesHandlerService.getAdjustmentList(radio_str, pageNo); }
	 * 
	 * jsp="grid"; map.put("contentJsp", jsp); map.put("title", title);
	 * map.put("radio_str", radio_str);
	 * 
	 * return new ModelAndView(jsp, "map", map); }
	 */

	public ModelAndView showLoanIn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		// map=storesHandlerService.showGridJsp(box);
		jsp = "grid1";
		return new ModelAndView(jsp, "map", map);
	}

	// adjusting loanin in grn
	public ModelAndView submitAdjustLoan(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreGrnM storeGrnM = new StoreGrnM();
		StoreGrnT storeGrnT = new StoreGrnT();
		StoreLoaninM storeLoaninM = new StoreLoaninM();
		StoreLoaninT storeLoaninT = new StoreLoaninT();
		StorePoHeader storePoHeader = new StorePoHeader();

		String grnNo = "";
		int rows = 0;
		String sourceOfSupply = "";
		Date loaninDate = new Date();
		int loaninId = 0;
		int unitId = 0;
		int indentId = 0;
		int poId = 0;
		String howReceived = "";
		Date dateReceivedSurplus = new Date();
		String rrNo = "";
		String modeOfConveyance = "";
		int employeeId = 0;
		String loaninNo = "";
		Date challanDate = new Date();
		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal customDuty = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal loaninValue = null;
		BigDecimal roundOffValue = null;
		BigDecimal grnAmount = null;
		BigDecimal totalAmount = null;
		int supplierId = 0;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		String atSoNo = "";
		int departmentId = 0;
		String remarks = "";
		String date = "";
		String time = "";
		String choice = "";
		int noOfRows = 0;
		int pageNo = 1;
		String buttonFlag = "";
		String challanNo = "";
		int deptId = 0;
		int userId = 0;
		String max = "";
		if (session.getAttribute("max") != null) {
			max = (String) (session.getAttribute("max"));
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			/*
			 * if (request.getParameter("noOfRows") != null) { noOfRows =
			 * Integer.parseInt(request.getParameter("noOfRows"));
			 */
			if (request.getParameter(LOANIN_ID) != null) {
				loaninId = Integer.parseInt(request.getParameter(LOANIN_ID));

			}
			if (!request.getParameter(SUPPLIER_ID).equals("0")) {
				supplierId = Integer
						.parseInt(request.getParameter(SUPPLIER_ID));
			}

			if (!request.getParameter(EMPLOYEE_ID).equals("0")) {
				employeeId = Integer
						.parseInt(request.getParameter(EMPLOYEE_ID));
			}

			if (request.getParameter("buttonFlag") != null) {
				buttonFlag = request.getParameter("buttonFlag");
			}

			if (request.getParameter(INDENT_ID) != null) {
				poId = Integer.parseInt((request.getParameter(INDENT_ID)));
			}

			if (request.getParameter(LOANIN_NO) != null) {
				loaninNo = (request.getParameter(LOANIN_NO));
			}
			if (request.getParameter(GRN_NO) != null) {
				grnNo = (request.getParameter(GRN_NO));
			}

			if (request.getParameter(REMARKS) != null) {
				remarks = (request.getParameter(REMARKS));
			}
			if (request.getParameter(CHALLAN_NO) != null) {
				challanNo = request.getParameter(CHALLAN_NO);
			}

		} catch (Exception e) {
			e.printStackTrace();

		}
		try {
			String te = "";

			if (request.getParameter(LOANIN_DATE) != null) {
				te = (String) (request.getParameter(LOANIN_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(LOANIN_DATE)));
				loaninDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String techallan = "";
			if (request.getParameter(CHALLAN_DATE) != null) {
				techallan = (String) (request.getParameter(CHALLAN_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHALLAN_DATE)));
				challanDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		if (request.getParameter(FREIGHT_DUTY) != null
				&& !request.getParameter(FREIGHT_DUTY).equals("")) {
			freightDuty = new BigDecimal(request.getParameter(FREIGHT_DUTY));
		}
		if (request.getParameter(EXCISE_DUTY) != null
				&& !request.getParameter(EXCISE_DUTY).equals("")) {
			exciseDuty = new BigDecimal(request.getParameter(EXCISE_DUTY));
		}

		if (request.getParameter(OCTROI) != null
				&& !request.getParameter(OCTROI).equals("")) {
			octroi = new BigDecimal(request.getParameter(OCTROI));
		}
		if (request.getParameter(CUSTOM_DUTY) != null
				&& !request.getParameter(CUSTOM_DUTY).equals("")) {
			customDuty = new BigDecimal(request.getParameter(CUSTOM_DUTY));
		}
		if (request.getParameter(INSURANCE_CHARGES) != null
				&& !request.getParameter(INSURANCE_CHARGES).equals("")) {
			insuranceCharge = new BigDecimal(
					request.getParameter(INSURANCE_CHARGES));
		}

		if (request.getParameter(OTHER_CHARGES) != null
				&& !request.getParameter(OTHER_CHARGES).equals("")) {
			otherCharges = new BigDecimal(request.getParameter(OTHER_CHARGES));
		}

		if (request.getParameter(LOANIN_VALUE) != null
				&& !request.getParameter(LOANIN_VALUE).equals("")) {
			loaninValue = new BigDecimal(request.getParameter(LOANIN_VALUE));
		}
		if (request.getParameter(TOTAL_AMOUNT) != null
				&& !request.getParameter(TOTAL_AMOUNT).equals("")) {
			totalAmount = new BigDecimal(request.getParameter(TOTAL_AMOUNT));
		}

		String headerStored = "no";

		if (pageNo == 1) {
			storeGrnM.setGrnNo(grnNo);
			storeGrnM.setGrnDate(loaninDate);
			storeGrnM.setChallanNo(challanNo);
			storeGrnM.setOctroi(octroi);
			storeGrnM.setInsuranceCharge(insuranceCharge);
			storeGrnM.setFreightDuty(freightDuty);
			storeGrnM.setExciseDuty(exciseDuty);
			storeGrnM.setOtherCharges(otherCharges);
			storeGrnM.setCustomDuty(customDuty);
			storeGrnM.setRemarks(remarks);
			storeGrnM.setChallanDate(null);
			storeGrnM.setChallanNo(null);
			storeGrnM.setInvoiceNo(null);
			storeGrnM.setChallanDate(challanDate);
			storeGrnM.setGrnValue(loaninValue);
			storeGrnM.setStatus("o");
			storeGrnM.setReceiveType("l");
			Users users = new Users();
			users.setId(userId);
			storeGrnM.setLastChgBy(users);
			storeGrnM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeGrnM.setLastChgTime(time);
			storeGrnM.setHowReceived("jkt");

			// StoreIndentM storeIndentM = new StoreIndentM();
			// storeIndentM.setId(new Integer(1));
			storeGrnM.setIndent(null);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(1);
			storeGrnM.setHospital(masHospital);

			StorePoHeader storePoHeader1 = new StorePoHeader();
			storePoHeader1.setId(poId);
			storeGrnM.setPo(storePoHeader1);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeGrnM.setDepartment(masDepartment);

			MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
			masStoreSupplier.setId(supplierId);
			storeGrnM.setSupplier(masStoreSupplier);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			storeGrnM.setEmployee(masEmployee);

			// storePoHeader.setStatus("c");

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreGrnT> storeGrnTlist = new ArrayList<StoreGrnT>();

		try {

			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int freeQty[] = JKTRequestUtils.getRequiredIntParameters(request,
					FREE_QTY);
			// int
			// manufacturerIdArray[]=JKTRequestUtils.getRequiredIntParameters(request,MANUFACTURER_ID);
			// int
			// brandIdArray[]=JKTRequestUtils.getRequiredIntParameters(request,BRAND_ID);
			String lotNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, LOT_NO);
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_NO);
			String freeItemArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, FREE_ITEM);
			String manuDate[] = JKTRequestUtils.getRequiredStringParameters(
					request, MANUFACTURING_DATE);
			String expdate[] = JKTRequestUtils.getRequiredStringParameters(
					request, EXPIRY_DATE);

			BigDecimal[] quantityReceivedArray = new BigDecimal[10];
			BigDecimal[] taxArr = new BigDecimal[10];
			BigDecimal[] unitRateArr = new BigDecimal[10];
			BigDecimal[] discountArr = new BigDecimal[10];
			BigDecimal[] amountArr = new BigDecimal[10];

			String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
					TAX_PERCENT);
			int yyLen = yy.length;
			for (int i = 0; i < yyLen; i++) {
				BigDecimal val = new BigDecimal(yy[i]);
				taxArr[i] = val;
			}
			String tt[] = JKTRequestUtils.getRequiredStringParameters(request,
					UNIT_RATE);
			int ttLen = tt.length;
			for (int i = 0; i < ttLen; i++) {
				BigDecimal val = new BigDecimal(tt[i]);
				unitRateArr[i] = val;
			}
			String zz[] = JKTRequestUtils.getRequiredStringParameters(request,
					DISCOUNT_PERCENTAGE);
			int zzLen = zz.length;
			for (int i = 0; i < zzLen; i++) {
				BigDecimal val = new BigDecimal(zz[i]);
				discountArr[i] = val;
			}
			String qq[] = JKTRequestUtils.getRequiredStringParameters(request,
					AMOUNT);
			int qqLen = qq.length;
			for (int i = 0; i < qqLen; i++) {
				BigDecimal val = new BigDecimal(qq[i]);
				amountArr[i] = val;
			}
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);
				quantityReceivedArray[i] = val;
			}

			length = srNo.length;

			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj.setSerialNo(srNo[i]);
					storeGrnTObj.setFreeQty(freeQty[i]);
					storeGrnTObj.setFreeItem(freeItemArr[i]);
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeGrnTObj.setItem(masItem);

					// if(manufacturerIdArray[i] != 0){
					// MasManufacturer masManufacturer= new MasManufacturer();
					// masManufacturer.setId(1);
					// storeGrnTObj.setManufacturer(masManufacturer);
					// }
					// if(brandIdArray[i] != 0){
					// MasStoreBrand masStoreBrand= new MasStoreBrand();
					// masStoreBrand.setId(brandIdArray[i]);
					// storeGrnTObj.setBrand(masStoreBrand);
					// }

					storeGrnTObj.setReceivedQty(quantityReceivedArray[i]);
					storeGrnTObj.setTax(taxArr[i]);
					storeGrnTObj.setDiscount(null);
					storeGrnTObj.setAmountValue(amountArr[i]);
					storeGrnTObj.setUnitRate(unitRateArr[i]);
					storeGrnTObj.setBatchNo(batchNoArr[i]);
					storeGrnTObj.setLotNo(lotNoArr[i]);
					storeGrnTObj.setDiscount(discountArr[i]);
					storeGrnTObj.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expdate[i]));
					storeGrnTObj.setManufacturerDate(HMSUtil
							.convertStringTypeDateToDateType(manuDate[i]));

					storeGrnTlist.add(storeGrnTObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("loaninNo", loaninNo);
		infoMap.put("loaninId", loaninId);
		boolean flag = false;
		try {
			flag = storesHandlerService.submitAdjustLoanIn(loaninId, storeGrnM,
					poId, storeGrnTlist, infoMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = ADJUST_LOAN_IN;
				pageNo++;
				messageTOBeVisibleToTheUser = "adjust has been done Successfully";
				map = storesHandlerService.showGrnJsp(box, dataMap);
				if (map.get("loaninId") != null) {
					loaninId = (Integer) map.get("loaninId");
				}
				// List<StoreGrnM> grnMList =
				// storesHandlerService.getGrn(grnId);
				// map.put("grnMList", grnMList);

			} else {
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "adjust has been done Successfully";
			}
		} else {
			messageTOBeVisibleToTheUser = "adjust has not been done Successfully";
		}

		jsp = "message";
		jsp += ".jsp";
		map.put("max", max);
		map.put("grnNo", grnNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView responseGridList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		String items = "";
		int pageNo = 1;
		if (request.getParameter("sos") != null) {
			choice = request.getParameter("sos");
		}
		if (request.getParameter("items") != null) {
			items = request.getParameter("items");
		}
		// if (choice.equalsIgnoreCase("l") && !items.equals("")) {
		// radio_str = Integer.parseInt(request.getParameter("po_id"));
		map = (Map) storesHandlerService.getAdjustmentList(radio_str, pageNo,
				items);
		// }
		jsp = "grid";
		return new ModelAndView(jsp, "map", map);
		// return null;
	}

	public ModelAndView responseATSODate(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int radio_str = 0;
		int pageNo = 1;
		if (request.getParameter(SOURCE_OF_SUPPLY) != null) {
			choice = request.getParameter(SOURCE_OF_SUPPLY);
		}
		if (choice.equalsIgnoreCase("l")) {
			radio_str = Integer.parseInt(request.getParameter(INDENT_ID));
			map = (Map) storesHandlerService.getATSODate(radio_str);
		}

		jsp = "responseATSODate";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseIndentList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String choice = "";
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.getResponseIndentList(box);
		jsp = "responseForIndentList";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responsePoList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getResponsePoList(box);
		jsp = "responseForPoList";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView responseGridForLoanInList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		// map=storesHandlerService.showGridLoanInJsp(box);
		jsp = "gridForLoanIn";
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------------------------- new grid
	// method---------------------------

	public ModelAndView getItemListForGrnByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		String sos = box.getString("sourceOfSupply").trim();
		String itemNameField = "";
		String autoHint = "";
		int indentId = 0;
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (sos.equalsIgnoreCase("p") || (sos.equalsIgnoreCase("l"))
				|| (sos.equalsIgnoreCase("a"))) {
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt((request.getParameter("indentId")));
			}
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("indentId", indentId);
		dataMap.put("box", box);
		map = storesHandlerService.getItemListForGrnByAutocomplete(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForGrn(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		int deptId = 0;
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Box box = HMSUtil.getBox(request);
		int poId = box.getInt("poId");
		String itemNameField = "";
		String nomenclature = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			nomenclature = (request.getParameter("requiredField"));
		}
		String nom = "";
		if (request.getParameter("nom") != null) {
			nom = (request.getParameter("nom"));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		dataMap.put("nomenclature", nomenclature);
		dataMap.put("deptId", deptId);
		dataMap.put("poId", poId);
		map = storesHandlerService.fillItemsForGrn(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("poDetailList") != null) {
			poList = (List) map.get("poDetailList");
		}
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		if (map.get("manufacturerList") != null) {
			manufacturerList = (List<MasManufacturer>) map
					.get("manufacturerList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {

				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				try {
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				} catch (Exception e) {
					sb.append("<au>" + "-" + "</au>");
				}
				try {
					sb.append("<formula>"
							+ masStoreItem.getItemConversion().getFormula()
							+ "</formula>");
				} catch (Exception e) {
					sb.append("<formula>" + "-" + "</formula>");
				}
				try {
					sb.append("<conversionFactor>"
							+ masStoreItem.getItemConversion()
									.getConversionFactor1()
							+ "</conversionFactor>");
				} catch (Exception e) {
					sb.append("<conversionFactor>" + "-"
							+ "</conversionFactor>");
				}
				try {
					sb.append("<dispType>"
							+ masStoreItem.getItemConversion()
									.getIntermediateUnit().getUnitName()
							+ "</dispType>");
				} catch (Exception e) {
					sb.append("<dispType>" + "-" + "</dispType>");
				}
				sb.append("<expiry>" + masStoreItem.getExpiry() + "</expiry>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");
					sb.append("<manufacturerId>"
							+ brand.getManufacturer().getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ brand.getManufacturer().getManufacturerName()
							+ "</manufacturerName>");
					sb.append("</brand>");
				}
				sb.append("</brands>");
				sb.append("<manufacturers>");
				for (MasManufacturer masManufacturer : manufacturerList) {
					sb.append("<manufacturer>");
					sb.append("<manufacturerId>" + masManufacturer.getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ masManufacturer.getManufacturerName()
							+ "</manufacturerName>");

					sb.append("</manufacturer>");
				}
				sb.append("</manufacturers>");

				sb.append("<pos>");
				for (StorePoDetail po : poList) {
					sb.append("<po>");
					sb.append("<poId>" + po.getId() + "</poId>");
					sb.append("<poDispType>" + po.getDispType()
							+ "</poDispType>");
					sb.append("<poMdqValue>" + po.getMdqValue()
							+ "</poMdqValue>");
					sb.append("<poRatePerMdq>" + po.getRatePerMdq()
							+ "</poRatePerMdq>");
					sb.append("<poFreeItem>" + po.getFreeItem()
							+ "</poFreeItem>");

					if (po.getUnitRate() != null)
						sb.append("<poRate>" + po.getUnitRate() + "</poRate>");
					else
						sb.append("<poRate>" + "</poRate>");

					if (po.getDiscountPercent() != null)
						sb.append("<poDiscount>" + po.getDiscountPercent()
								+ "</poDiscount>");
					else
						sb.append("<poDiscount>" + "0" + "</poDiscount>");

					if (po.getTaxPercent() != null)
						sb.append("<poTax>" + po.getTaxPercent() + "</poTax>");
					else
						sb.append("<poTax>" + "0" + "</poTax>");

					if (po.getFreeQuantity() != null)
						sb.append("<poFreeQty>" + po.getFreeQuantity()
								+ "</poFreeQty>");
					else
						sb.append("<poFreeQty>" + "0" + "</poFreeQty>");

					/*
					 * try { sb.append("<poBrandId>" + po.getBrand().getId() +
					 * "</poBrandId>"); } catch (Exception e) {
					 * sb.append("<poBrandId>" + "" + "</poBrandId>"); }
					 */

					try {
						sb.append("<poManufacturerId>"
								+ po.getManufacturer().getId()
								+ "</poManufacturerId>");
					} catch (Exception e) {
						sb.append("<poManufacturerId>" + ""
								+ "</poManufacturerId>");
					}
					sb.append("</po>");
				}
				sb.append("</pos>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForGrnForGrnWithoutPo(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		int deptId = 0;
		int hospitalId = 0;
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		Box box = HMSUtil.getBox(request);
		int poId = box.getInt("poId");
		String itemNameField = "";
		String nomenclature = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			nomenclature = (request.getParameter("requiredField"));
		}
		String nom = "";
		if (request.getParameter("nom") != null) {
			nom = (request.getParameter("nom"));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		dataMap.put("nomenclature", nomenclature);
		dataMap.put("deptId", deptId);
		dataMap.put("poId", poId);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForGrnForGrnWithoutPo(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("poDetailList") != null) {
			poList = (List) map.get("poDetailList");
		}
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		if (map.get("manufacturerList") != null) {
			manufacturerList = (List<MasManufacturer>) map
					.get("manufacturerList");
		}

		String newLotNo = "";
		if (map.get("newLotNo") != null) {
			newLotNo = (String) map.get("newLotNo");
		}
		List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
		if (map.get("storeGrnTList") != null) {
			storeGrnTList = (List) map.get("storeGrnTList");
		}
		BigDecimal unitRate = new BigDecimal(0);

		if (storeGrnTList.size() > 0) {
			StoreGrnT storeGrnT = new StoreGrnT();
			storeGrnT = (StoreGrnT) storeGrnTList.get(0);
			unitRate = storeGrnT.getUnitRate();
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
				sb.append("<formula>"
						+ masStoreItem.getItemConversion().getFormula()
						+ "</formula>");
				sb.append("<conversionFactor>"
						+ masStoreItem.getItemConversion()
								.getConversionFactor1() + "</conversionFactor>");
				sb.append("<dispType>"
						+ masStoreItem.getItemConversion()
								.getIntermediateUnit().getUnitName()
						+ "</dispType>");
				sb.append("<expiry>" + masStoreItem.getExpiry() + "</expiry>");
				sb.append("<storeDept>" + masStoreItem.getDepartment().getId()
						+ "</storeDept>");
				sb.append("<lotNo>" + newLotNo + "</lotNo>");
				/*
				 * sb.append("<manufacturers>"); for(MasManufacturer manu :
				 * manufacturerList) { sb.append("<manufacturerId>"+
				 * manu.getId()+ "</manufacturerId>");
				 * sb.append("<manufacturerName>"+ manu.getManufacturerName()+
				 * "</manufacturerName>"); } sb.append("</manufacturers>");
				 */
				sb.append("<manufacturers>");
				for (MasManufacturer masManufacturer : manufacturerList) {
					sb.append("<manufacturer>");
					sb.append("<manufacturerId>" + masManufacturer.getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ masManufacturer.getManufacturerName()
							+ "</manufacturerName>");

					sb.append("</manufacturer>");
				}
				sb.append("</manufacturers>");
				/*
				 * sb.append("<brands>"); for (MasStoreBrand brand : brandList)
				 * { sb.append("<brand>"); sb.append("<brandId>" + brand.getId()
				 * + "</brandId>"); sb.append("<brandName>" +
				 * brand.getBrandName() + "</brandName>");
				 * sb.append("<manufacturerId>" +
				 * brand.getManufacturer().getId() + "</manufacturerId>");
				 * sb.append("<manufacturerName>" +
				 * brand.getManufacturer().getManufacturerName() +
				 * "</manufacturerName>"); sb.append("</brand>"); }
				 * sb.append("</brands>"); sb.append("<manufacturers>"); for
				 * (MasManufacturer masManufacturer : manufacturerList) {
				 * sb.append("<manufacturer>"); sb.append("<manufacturerId>" +
				 * masManufacturer.getId() + "</manufacturerId>");
				 * sb.append("<manufacturerName>" +
				 * masManufacturer.getManufacturerName() +
				 * "</manufacturerName>");
				 * 
				 * sb.append("</manufacturer>"); }
				 * sb.append("</manufacturers>");
				 */
				sb.append("<pos>");
				/**
				 * This code is commented By Mukesh Narayan SIngh after discus
				 * with Dharmendra and Narayan Sir unitRate will come from from
				 * last grn item Date 15 Dec 2010
				 */
				sb.append("<po>");
				if (poList.size() > 0 && poList != null) {
					for (StorePoDetail po : poList) {
						sb.append("<poId>" + po.getId() + "</poId>");
						sb.append("<poDispType>" + po.getDispType()
								+ "</poDispType>");
						sb.append("<poMdqValue>" + po.getMdqValue()
								+ "</poMdqValue>");
						sb.append("<poRatePerMdq>" + po.getRatePerMdq()
								+ "</poRatePerMdq>");
						sb.append("<poFreeItem>" + po.getFreeItem()
								+ "</poFreeItem>");

						if (po.getUnitRate() != null)
							sb.append("<poRate>" + po.getUnitRate()
									+ "</poRate>");
						else
							sb.append("<poRate>" + "</poRate>");

						sb.append("<unitRate>" + unitRate + "</unitRate>");

						if (po.getDiscountPercent() != null)
							sb.append("<poDiscount>" + po.getDiscountPercent()
									+ "</poDiscount>");
						else
							sb.append("<poDiscount>" + "0" + "</poDiscount>");

						if (po.getTaxPercent() != null)
							sb.append("<poTax>" + po.getTaxPercent()
									+ "</poTax>");
						else
							sb.append("<poTax>" + "0" + "</poTax>");

						if (po.getFreeQuantity() != null)
							sb.append("<poFreeQty>" + po.getFreeQuantity()
									+ "</poFreeQty>");
						else
							sb.append("<poFreeQty>" + "0" + "</poFreeQty>");

						/*
						 * try { sb.append("<poBrandId>" + po.getBrand().getId()
						 * + "</poBrandId>"); } catch (Exception e) {
						 * sb.append("<poBrandId>" + "" + "</poBrandId>"); }
						 */

						try {
							sb.append("<poManufacturerId>"
									+ po.getManufacturer().getId()
									+ "</poManufacturerId>");
						} catch (Exception e) {
							sb.append("<poManufacturerId>" + ""
									+ "</poManufacturerId>");
						}
					}
				} else {
					sb.append("<poRate>" + unitRate + "</poRate>");
				}

				sb.append("</po>");
				sb.append("</pos>");
				sb.append("<ratePerMdq>" + unitRate + "</ratePerMdq>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForLoanInByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String autoHint = "";
		int poId = 0;
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("poId") != null) {
			poId = Integer.parseInt((request.getParameter("poId")));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("poId", poId);
		dataMap.put("box", box);
		map = storesHandlerService.getItemListForLoanInByAutocomplete(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForLoanIn(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();
		int deptId = 0;
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		Box box = HMSUtil.getBox(request);
		int poId = 0;
		String itemNameField = "";
		String nomenclature = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			nomenclature = (request.getParameter("requiredField"));
		}
		poId = box.getInt("poId");
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		dataMap.put("nomenclature", nomenclature);
		dataMap.put("deptId", deptId);
		dataMap.put("poId", poId);

		map = storesHandlerService.fillItemsForLoanIn(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("poList") != null) {
			poList = (List) map.get("poList");
		}

		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {

				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				try {
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				} catch (Exception e) {
					sb.append("<au>" + "-" + "</au>");
				}
				try {
					sb.append("<formula>"
							+ masStoreItem.getItemConversion().getFormula()
							+ "</formula>");
				} catch (Exception e) {
					sb.append("<formula>" + "-" + "</formula>");
				}
				try {
					sb.append("<conversionFactor>"
							+ masStoreItem.getItemConversion()
									.getConversionFactor1()
							+ "</conversionFactor>");
				} catch (Exception e) {
					sb.append("<conversionFactor>" + "-"
							+ "</conversionFactor>");
				}
				sb.append("<expiry>" + masStoreItem.getExpiry() + "</expiry>");
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");
					sb.append("<manufacturerId>"
							+ brand.getManufacturer().getId()
							+ "</manufacturerId>");
					sb.append("<manufacturerName>"
							+ brand.getManufacturer().getManufacturerName()
							+ "</manufacturerName>");
					sb.append("</brand>");
				}
				sb.append("</brands>");
				sb.append("<pos>");
				for (StorePoDetail po : poList) {
					sb.append("<po>");
					sb.append("<poId>" + po.getId() + "</poId>");
					sb.append("<poDispType>" + po.getDispType()
							+ "</poDispType>");
					sb.append("<poMdqValue>" + po.getMdqValue()
							+ "</poMdqValue>");
					sb.append("<poRatePerMdq>" + po.getRatePerMdq()
							+ "</poRatePerMdq>");
					sb.append("<poRate>" + po.getUnitRate() + "</poRate>");

					if (po.getDiscountPercent() == null)
						sb.append("<poDiscount>" + "0" + "</poDiscount>");
					else
						sb.append("<poDiscount>" + po.getDiscountPercent()
								+ "</poDiscount>");

					if (po.getTaxPercent() == null)
						sb.append("<poTax>" + "0" + "</poTax>");
					else
						sb.append("<poTax>" + po.getTaxPercent() + "</poTax>");

					if (po.getFreeQuantity() == null)
						sb.append("<poFreeQty>" + "0" + "</poFreeQty>");
					else
						sb.append("<poFreeQty>" + po.getFreeQuantity()
								+ "</poFreeQty>");

					sb.append("<poFreeItem>" + po.getFreeItem()
							+ "</poFreeItem>");

					/*
					 * try { sb.append("<poBrandId>" + po.getBrand().getId() +
					 * "</poBrandId>"); } catch (Exception e) {
					 * sb.append("<poBrandId>" + "" + "</poBrandId>"); }
					 */

					try {
						sb.append("<poManufacturerId>"
								+ po.getManufacturer().getId()
								+ "</poManufacturerId>");
					} catch (Exception e) {
						sb.append("<poManufacturerId>" + ""
								+ "</poManufacturerId>");
					}
					sb.append("</po>");
				}
				sb.append("</pos>");

				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	// ------ new grid method--------------------------------------------------

	// ------------------ DEFECTIVE DRUGS
	// ENTRY------------------------------------------------------------
	public ModelAndView showDefectiveDrugJsp(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		map = storesHandlerService.showDefectiveDrugJsp(dataMap);
		jsp = DEFECTIVE_DRUGS_JSP;
		// jsp = "defectiveDrugTemp";
		jsp = jsp + ".jsp";
		title = "Defective Drugs Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public void getExpiryDateInAjax(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {

		HttpSession session = request.getSession();
		int deptId = 0;
		int batchId = 0;
		String batchNo = "";
		int itemId = 0;
		String manufactureDate = "";
		int manufactureId = 0;
		String manufactureName = "";
		String batchNoString = "";
		StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
String batchName = "";
		Date expirydate = new Date();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (request.getParameter(BATCH_ID) != null) {
			batchNo = ("" + (request.getParameter(BATCH_ID)));
			dataMap.put("batchNo", batchNo);
		}
		else if (request.getParameter("batchName") != null) {
			batchName = ("" + (request.getParameter("batchName")));
			dataMap.put("batchName", batchName);
			
		}
		dataMap.put("hospitalId", (Integer)session.getAttribute("hospitalId"));
		if (request.getParameter("itemId") != null) {
			itemId = Integer.parseInt("" + (request.getParameter("itemId")));
		}
		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		
		String date4MySQL1 = "";
		try {
			map = storesHandlerService.getExpiryDateInAjax(dataMap);
			SimpleDateFormat formatterIn = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat formatterOut = new SimpleDateFormat("dd/MM/yyyy");
			if (map.get("expiryDate") != null) {
				date4MySQL1 = formatterOut.format(formatterIn.parse(""
						+ map.get("expiryDate")));
			}
			storeItemBatchStock = (StoreItemBatchStock) map
					.get("storeItemBatchStock");
			if (map.get("manufactureDate") != null) {
				manufactureDate = formatterOut.format(formatterIn.parse(""
						+ map.get("manufactureDate")));
			}
			if (map.get("manufactureId") != null) {
				manufactureId = (Integer) map.get("manufactureId");
			}
			if (map.get("manufactureName") != null) {
				manufactureName = (String) map.get("manufactureName");
			}
			if (map.get("batchNoString") != null) {
				batchNoString = (String) map.get("batchNoString");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}
		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<expiryDate>" + date4MySQL1 + "</expiryDate>");
			sb.append("<manufactureDate>" + manufactureDate
					+ "</manufactureDate>");
			sb.append("<manufacturerId>" + manufactureId + "</manufacturerId>");
			sb.append("<manufacturerName>" + manufactureName
					+ "</manufacturerName>");
			sb.append("<mId>" + mId + "</mId>");
			sb.append("<costPrice>" + storeItemBatchStock.getCostPrice()
					+ "</costPrice>");
			sb.append("<stockId>" + storeItemBatchStock.getId() + "</stockId>");
			sb.append("<stockAvailable>"
					+ storeItemBatchStock.getClosingStock().intValue()
					+ "</stockAvailable>");
			sb.append("<batchNo>" + batchNoString + "</batchNo>");

			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView getItemListForDefectiveDrugsByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String autoHint = "";
		String itemNameField = "";
		int hospitalId = 0;
		int deptId = 0;
		String fromDepartmentReturn = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("itemGroupId") != null
				&& !request.getParameter("itemGroupId").equals("")) {
			int groupId = Integer.parseInt(request.getParameter("itemGroupId"));
			dataMap.put("groupId", groupId);
		}
		if (request.getParameter("itemTypeId") != null
				&& !request.getParameter("itemTypeId").equals("")) {
			int itemTypeId = Integer.parseInt(request
					.getParameter("itemTypeId"));
			dataMap.put("itemTypeId", itemTypeId);
		}
		if (request.getParameter("sectionId") != null
				&& !request.getParameter("sectionId").equals("")) {
			int sectionId = Integer.parseInt(request.getParameter("sectionId"));
			dataMap.put("sectionId", sectionId);
		}
		if (request.getParameter("categoryId") != null
				&& !request.getParameter("categoryId").equals("")) {
			int categoryId = Integer.parseInt(request
					.getParameter("categoryId"));
			dataMap.put("categoryId", categoryId);
		}
		if (request.getParameter("classId") != null
				&& !request.getParameter("classId").equals("")) {
			int classId = Integer.parseInt(request.getParameter("classId"));
			dataMap.put("classId", classId);
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		// dataMap.put("box", box);
		map = storesHandlerService
				.getItemListForDefectiveDrugsByAutocomplete(dataMap);
		jsp = "resultNew";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForDefectiveDrugs(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session------
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<Object[]> batchList = new ArrayList<Object[]>();

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		String blockFlag = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			int userType = users.getUserType();
			dataMap.put("userType", userType);
		}
		
		if (request.getParameter("blockFlag") != null) {
			blockFlag = (request.getParameter("blockFlag"));
		}
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("blockFlag", blockFlag);
		map = storesHandlerService.fillItemsForDefectiveDrugs(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		/*
		 * if (map.get("brandList") != null) { brandList = (List)
		 * map.get("brandList"); }
		 */
		if (map.get("batchList") != null) {
			batchList = (List) map.get("batchList");
		}

		StringBuffer sb = new StringBuffer();
		try {
			
			sb.append("<item>");
		
			for (MasStoreItem masStoreItem : itemList) {
				
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");

				// sb.append("<manufacturerId>"+
				// masStoreItem.getManufacturer().getId() +"</manufacturerId>");
				// sb.append("<manufacturerName>" +
				// masStoreItem.getManufacturer().getManufacturerName()+
				// "</manufacturerName>");
			if(batchList.size()>0){
				sb.append("<batchs>");
				for (Object[] batch : batchList) {
					sb.append("<batch>");
					sb.append("<batchId>" + batch[2] + "</batchId>");
					sb.append("<batchName>" + batch[1]
							+ "</batchName>");
					sb.append("</batch>");
				}
				sb.append("</batchs>");

			}else{
				
				sb.append("<msg>" + "Item Batch Not Available" + "</msg>");
			}

		}
				sb.append("</item>");

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView submitDefectiveDrug(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreDefectiveDrugM storeDefectiveDrugM = new StoreDefectiveDrugM();
		StoreDefectiveDrugT storeDefectiveDrugT = new StoreDefectiveDrugT();
		String grnNo = "";
		new Date();

		Date entryDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		int departmentId = 0;
		String date = "";
		String time = "";
		int noOfRows = 0;
		int pageNo = 1;
		String buttonFlag = "";
		String toPlace = "";
		String desc1 = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		int entryId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}

			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}
			if (request.getParameter(TO_PLACE) != null) {
				toPlace = (request.getParameter(TO_PLACE));
			}
			if (request.getParameter(DESC1) != null) {
				desc1 = (request.getParameter(DESC1));
			}
			if (request.getParameter(DESC2) != null) {
				desc2 = (request.getParameter(DESC2));
			}
			if (request.getParameter(DESC3) != null) {
				desc3 = (request.getParameter(DESC3));
			}

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";

			if (request.getParameter(ENTRY_DATE) != null) {
				te = (String) (request.getParameter(ENTRY_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(ENTRY_DATE)));
				entryDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String[] copyIds = request.getParameterValues(RequestConstants.COPY_TO);
		String allCopyIds = "";
		if (request.getParameterValues(RequestConstants.COPY_TO) != null)
			for (int i = 0; i < copyIds.length; i++) {
				if (i != copyIds.length - 1)
					allCopyIds += copyIds[i] + ",";
				else
					allCopyIds += copyIds[i];

			}

		String headerStored = "no";

		if (pageNo == 1) {

			storeDefectiveDrugM.setDesc1(desc1);
			storeDefectiveDrugM.setDesc2(desc2);
			storeDefectiveDrugM.setDesc3(desc3);
			storeDefectiveDrugM.setEntryDate(entryDate);
			storeDefectiveDrugM.setEntryNo(entryNo);
			storeDefectiveDrugM.setCopyTo(allCopyIds);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeDefectiveDrugM.setDepartment(masDepartment);

			storeDefectiveDrugM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeDefectiveDrugM.setLastChgTime(time);
			storeDefectiveDrugM.setStatus("y");

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeDefectiveDrugM.setHospital(masHospital);

			Users users = new Users();
			users.setId(userId);
			storeDefectiveDrugM.setLastChgBy(users);
			storeDefectiveDrugM.setToPlace(toPlace);

		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}
		int length = 0;
		List<StoreDefectiveDrugT> storeDefectiveDrugTlist = new ArrayList<StoreDefectiveDrugT>();
		List<Integer> storeInternalTIdList = new ArrayList<Integer>();
		try {
			// int srNo[] =
			// JKTRequestUtils.getRequiredIntParameters(request,SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			// int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
			// request, BRAND_ID);
			String remarks[] = JKTRequestUtils.getStringParameters(request, REMARKS);
			String expriyDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, EXPIRY_DATE);
			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);
			int storeInternalReturnTId[] = JKTRequestUtils
					.getIntParameters(request, "storeInternalReturnTId");

			/*
			 * String disposal[] = JKTRequestUtils.getRequiredStringParameters(
			 * request, DISPOSAL); String authyDeclared[] = JKTRequestUtils
			 * .getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);
			 */
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_ID);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);
				quantityReceivedArray[i] = val;
			}
			for (int j = 0; j < storeInternalReturnTId.length; j++) {
				int internalRerurnTId = storeInternalReturnTId[j];
				storeInternalTIdList.add(internalRerurnTId);
			}

			if (buttonFlag.equals("next")) {
				// if(buttonFlag != null){
				length = 30;
			} else {
				length = noOfRows;
			}
			int count = 0;
			if (request.getParameter("count") != null) {
				count = Integer.parseInt(request.getParameter("count"));
			}
			for (int i = 0; i < count; i++) {
				if (itemIdArray[i] != 0) {
					StoreDefectiveDrugT storeDefectiveDrugTObj = new StoreDefectiveDrugT();

					// storeDefectiveDrugTObj.setSrNo(srNo[i]);
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeDefectiveDrugTObj.setItem(masItem);

					if (remarks[i] != null) {
						storeDefectiveDrugTObj.setRemarks(remarks[i]);
					}

					/*
					 * storeDefectiveDrugTObj
					 * .setAuthyUnderDeclared(authyDeclared[i]);
					 * 
					 * if (disposal[i].equals("emptyString1"))
					 * storeDefectiveDrugTObj.setDisposal(""); else
					 * storeDefectiveDrugTObj.setDisposal(disposal[i]);
					 */
					if (expriyDateArray[i] != null) {
						storeDefectiveDrugTObj
								.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expriyDateArray[i]));
					}

					storeDefectiveDrugTObj.setBatchNo(batchNoArr[i]);
					storeDefectiveDrugTObj
							.setDefectQty(quantityReceivedArray[i]);

					// MasStoreBrand masStoreBrand = new MasStoreBrand();
					// masStoreBrand.setId(brandIdArray[i]);
					// if (brandIdArray[i] != 0) {
					// storeDefectiveDrugTObj.setBrand(masStoreBrand);
					// } else {
					// storeDefectiveDrugTObj.setBrand(null);
					// }

					/*
					 * MasManufacturer masManufacturer = new MasManufacturer();
					 * masManufacturer.setId(manuArray[i]); if (manuArray[i] !=
					 * 0) { storeDefectiveDrugTObj
					 * .setManufacturedBy(masManufacturer); } else {
					 * storeDefectiveDrugTObj.setManufacturedBy(null); }
					 */

					storeDefectiveDrugTlist.add(storeDefectiveDrugTObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		infoMap.put("pageNo", pageNo);
		infoMap.put("entryNo", entryNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeDefectiveDrugM", storeDefectiveDrugM);
		infoMap.put("storeDefectiveDrugTlist", storeDefectiveDrugTlist);
		dataMap.put("deptId", deptId);
		dataMap.put("userId", userId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("storeInternalTIdList", storeInternalTIdList);

		Map<String, Object> contentMap = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();

		boolean flag = false;
		try {
			contentMap = storesHandlerService.addDefectiveDrugs(infoMap,
					dataMap);
			flag = (Boolean) contentMap.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {

			pageNo++;
			messageTOBeVisibleToTheUser = "Defect Drug Entry has  been done Successfully";
			map = storesHandlerService.showDefectiveDrugJsp(dataMap);
			if (map.get("entryId") != null) {
				entryId = (Integer) map.get("entryId");
			}
			List<StoreDefectiveDrugM> defectMList = storesHandlerService
					.getDefectDrug(entryId);
			map.put("defectMList", defectMList);

		} else {
			messageTOBeVisibleToTheUser = "Defect Drug Entry has not been done Successfully";
		}
		jsp = "annualIndentMessage";
		jsp += ".jsp";
		// jsp = MODIFY_DEFECTIVE_DRUG;
		// jsp += ".jsp";

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");

		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");

		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		int radio_str = 0;
		if (contentMap.get("parent") != null) {
			radio_str = (Integer) (contentMap.get("parent"));
			map = (Map<String, Object>) storesHandlerService
					.getDefectiveDrugModifyMap(radio_str, 0);
		}
		purchaseMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
		List<StoreDefectiveDrugM> defectiveList = storesHandlerService
				.getDefectiveList();

		map.put("purchaseMap", purchaseMap);
		map.put("defectiveList", defectiveList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateDefectiveDrug(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreDefectiveDrugM storeDefectiveDrugM = new StoreDefectiveDrugM();
		StoreDefectiveDrugT storeDefectiveDrugT = new StoreDefectiveDrugT();
		String grnNo = "";

		String messageTOBeVisibleToTheUser = "";
		Date entryDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		int departmentId = 0;
		String date = "";
		String time = "";
		int noOfRows = 0;
		int pageNo = 1;
		String buttonFlag = "";
		String toPlace = "";
		String desc1 = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		int entryId = 0;
		int deptId = 0;
		int storeDefectiveDrugMId = 0;
		int userId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter("storeDefectiveDrugMId") != null) {
				storeDefectiveDrugMId = Integer.parseInt(request
						.getParameter("storeDefectiveDrugMId"));
			}
			// boolean
			// flag=storesHandlerService.deleteDefectiveItems(storeDefectiveDrugMId);

			Vector itemIdsList = box.getVector(ITEM_ID);
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}

			if (request.getParameter(TO_PLACE) != null) {
				toPlace = (request.getParameter(TO_PLACE));
			}
			if (request.getParameter(DESC1) != null) {
				desc1 = (request.getParameter(DESC1));
			}
			if (request.getParameter(DESC2) != null) {
				desc2 = (request.getParameter(DESC2));
			}
			if (request.getParameter(DESC3) != null) {
				desc3 = (request.getParameter(DESC3));
			}

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));

			}

			String te = "";

			// if (request.getParameter(ENTRY_DATE) != null) {
			// te = (String) (request.getParameter(ENTRY_DATE));
			//
			// SimpleDateFormat formatterIn = new SimpleDateFormat(
			// "dd/MM/yyyy");
			// SimpleDateFormat formatterOut = new SimpleDateFormat(
			// "yyyy-MM-dd");
			// String date4MySQL = formatterOut.format(formatterIn
			// .parse(request.getParameter(ENTRY_DATE)));
			// entryDate = java.sql.Date.valueOf(date4MySQL);
			// }

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");

			String[] copyIds = request
					.getParameterValues(RequestConstants.COPY_TO);
			String allCopyIds = "";
			if (request.getParameterValues(RequestConstants.COPY_TO) != null)
				for (int i = 0; i < copyIds.length; i++) {
					if (i != copyIds.length - 1)
						allCopyIds += copyIds[i] + ",";
					else
						allCopyIds += copyIds[i];

				}

			String headerStored = "no";

			storeDefectiveDrugM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeDefectiveDrugM.setLastChgTime(time);
			storeDefectiveDrugM.setStatus("y");

			// MasHospital masHospital = new MasHospital();
			// masHospital.setId(1);
			// storeDefectiveDrugM.setHospital(masHospital);
			Users users = new Users();
			users.setId(userId);
			storeDefectiveDrugM.setLastChgBy(users);
			if (!toPlace.equals(""))
				storeDefectiveDrugM.setToPlace(toPlace);

			int length = 0;
			List<StoreDefectiveDrugT> storeDefectiveDrugTlist = new ArrayList<StoreDefectiveDrugT>();

			try {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				// int brandIdArray[] =
				// JKTRequestUtils.getRequiredIntParameters(
				// request, BRAND_ID);
				String remarks[] = JKTRequestUtils.getRequiredStringParameters(
						request, REMARKS);
				String expriyDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, EXPIRY_DATE);
				int manuArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, MANUFACTURER_ID);

				/*
				 * String disposal[] = JKTRequestUtils
				 * .getRequiredStringParameters(request, DISPOSAL); String
				 * authyDeclared[] = JKTRequestUtils
				 * .getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);
				 */
				String batchNoArr[] = JKTRequestUtils
						.getRequiredStringParameters(request, BATCH_ID);

				BigDecimal[] quantityReceivedArray = new BigDecimal[100];

				Vector qty = box.getVector("qty");

				for (int i = 0; i < qty.size(); i++) {
					if (!qty.get(i).equals("")) {
						try {

							BigDecimal val = new BigDecimal((String) qty.get(i));
							quantityReceivedArray[i] = val;
						} catch (Exception e) {
							quantityReceivedArray[i] = new BigDecimal(0);
						}
					}

				}

				if (buttonFlag.equals("next")) {
					// if(buttonFlag != null){
					length = 30;
				} else {
					length = 30;
				}

				for (int i = 0; i < itemIdsList.size(); i++) {
					if (itemIdArray[i] != 0) {

						StoreDefectiveDrugT storeDefectiveDrugTObj = new StoreDefectiveDrugT();

						storeDefectiveDrugTObj.setSrNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeDefectiveDrugTObj.setItem(masItem);

						if (remarks[i].equals("emptyString2"))
							storeDefectiveDrugTObj.setRemarks("");
						else
							storeDefectiveDrugTObj.setRemarks(remarks[i]);

						/*
						 * storeDefectiveDrugTObj
						 * .setAuthyUnderDeclared(authyDeclared[i]);
						 * 
						 * if (disposal[i].equals("emptyString1"))
						 * storeDefectiveDrugTObj.setDisposal(""); else
						 * storeDefectiveDrugTObj.setDisposal(disposal[i]);
						 */

						if (expriyDateArray[i].equals("abc")) {
							storeDefectiveDrugTObj.setExpiryDate(null);
						} else {
							storeDefectiveDrugTObj
									.setExpiryDate(HMSUtil
											.convertStringTypeDateToDateType(expriyDateArray[i]));
						}

						storeDefectiveDrugTObj.setBatchNo(batchNoArr[i]);
						storeDefectiveDrugTObj
								.setDefectQty(quantityReceivedArray[i]);

						// MasStoreBrand masStoreBrand = new MasStoreBrand();
						// masStoreBrand.setId(brandIdArray[i]);
						// if (brandIdArray[i] != 0) {
						// storeDefectiveDrugTObj.setBrand(masStoreBrand);
						// } else {
						// storeDefectiveDrugTObj.setBrand(null);
						// }

						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(manuArray[i]);
						if (manuArray[i] != 0) {
							storeDefectiveDrugTObj
									.setManufacturedBy(masManufacturer);
						} else {
							storeDefectiveDrugTObj.setManufacturedBy(null);
						}

						storeDefectiveDrugTlist.add(storeDefectiveDrugTObj);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			infoMap.put("pageNo", pageNo);
			infoMap.put("entryNo", entryNo);
			infoMap.put("entryId", entryId);
			infoMap.put("storeDefectiveDrugM", storeDefectiveDrugM);
			infoMap.put("storeDefectiveDrugTlist", storeDefectiveDrugTlist);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);

			boolean flag = false;
			try {
				flag = storesHandlerService.updateDefectiveDrugs(infoMap,
						dataMap);

			} catch (Exception e) {
				e.printStackTrace();
			}
			if (map.get("flag") != null) {
				flag = (Boolean) map.get("flag");
			}

			if (flag) {
				if (buttonFlag.equals("next")) {
					jsp = DEFECTIVE_DRUGS_JSP;
					pageNo++;
					messageTOBeVisibleToTheUser = "Defect Drug Entry has  been done Successfully";
					map = storesHandlerService.showDefectiveDrugJsp(dataMap);
					if (map.get("entryId") != null) {
						entryId = (Integer) map.get("entryId");
					}
					List<StoreDefectiveDrugM> defectMList = storesHandlerService
							.getDefectDrug(entryId);
					map.put("defectMList", defectMList);

				} else {
					jsp = STORES_MESSAGE_JSP;
					pageNo++;
					messageTOBeVisibleToTheUser = "Defect Drug Entry has been done Successfully";
				}
			} else {
				messageTOBeVisibleToTheUser = "Defect Drug Entry has not been done Successfully";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showDefectiveDrugJsp";
		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	// For searching defective drug on basis of entry No
	public ModelAndView searchDefectiveDrug(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String entryNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> searchDrugList = new ArrayList<StoreDefectiveDrugM>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);

			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);

			}
			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = request.getParameter(ENTRY_NO);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("entryNo", entryNo);
		try {
			tempMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
			if (tempMap.get("searchDrugList") != null)
				searchDrugList = (List) tempMap.get("searchDrugList");
			map = storesHandlerService.searchDefectiveDrug(searchFieldMap);
			map.put("searchDrugList", searchDrugList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_DEFECTIVE_DRUG;
		jsp = jsp + ".jsp";
		title = "DEFECTIVE DRUGS";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	// Modification of a defective drugs on the basis of a particular search
	public ModelAndView modifyDefectiveDrug(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		jsp = MODIFY_DEFECTIVE_DRUG;
		jsp += ".jsp";
		int radio_str = 0;
		int deptId = 0;
		int hospitalId = 0;

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");

		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");

		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);

		if (request.getParameter("parent") != null) {
			radio_str = Integer.parseInt(request.getParameter("parent"));
			map = (Map<String, Object>) storesHandlerService
					.getDefectiveDrugModifyMap(radio_str, 0);
		}
		purchaseMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
		List<StoreDefectiveDrugM> defectiveList = storesHandlerService
				.getDefectiveList();

		map.put("purchaseMap", purchaseMap);
		map.put("defectiveList", defectiveList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView deleteDefectiveDrug(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		int pageNo = 0;
		int entryId = 0;
		int deptId = 0;
		jsp = MODIFY_DEFECTIVE_DRUG;
		jsp += ".jsp";
		String userName = "";
		int hospitalId = 0;
		int radio_str = 0;
		// session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();

		try {

			boolean flag = storesHandlerService.deleteDefectiveDrug(box);
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");

			}
			if (session.getAttribute("userName") != null) {
				userName = (String) session.getAttribute("userName");

			}
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("deptId", deptId);
			if (box.get("pageNo") != null) {
				pageNo = Integer.parseInt(box.get("pageNo"));

			}
			if (box.get(ENTRY_ID) != null) {
				entryId = Integer.parseInt(box.get(ENTRY_ID));

			}

			map = (Map<String, Object>) storesHandlerService
					.getDefectiveDrugModifyMap(entryId, 0);

			purchaseMap = storesHandlerService.showDefectiveDrugJsp(dataMap);
			List<StoreDefectiveDrugM> defectiveList = storesHandlerService
					.getDefectiveList();

			map.put("purchaseMap", purchaseMap);
			map.put("defectiveList", defectiveList);
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("radio_str", radio_str);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView createAdjustment(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		String grnNo = "";
		new Date();

		Date entryDate = new Date();
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		Date lastChgDate = null;
		String lastChgTime = "";
		int departmentId = 0;
		String date = "";
		String time = "";
		int noOfRows = 0;
		int pageNo = 1;
		String buttonFlag = "";
		String toPlace = "";
		String desc1 = "";
		String desc2 = "";
		String desc3 = "";
		String entryNo = "";
		String reason = "";
		int entryId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		String userName = "";
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(ENTRY_ID) != null) {
				entryId = Integer.parseInt(request.getParameter(ENTRY_ID));

			}
			if (request.getParameter(TO_PLACE) != null) {
				toPlace = (request.getParameter(TO_PLACE));
			}
			// if (request.getParameter(DESC1) != null) {
			// desc1 = (request.getParameter(DESC1));
			// }
			// if (request.getParameter(DESC2) != null) {
			// desc2 = (request.getParameter(DESC2));
			// }
			// if (request.getParameter(DESC3) != null) {
			// desc3 = (request.getParameter(DESC3));
			// }

			if (request.getParameter(ENTRY_NO) != null) {
				entryNo = (request.getParameter(ENTRY_NO));

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			String te = "";

			if (request.getParameter(ENTRY_DATE) != null) {
				te = (String) (request.getParameter(ENTRY_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(ENTRY_DATE)));
				entryDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");

		String[] copyIds = request.getParameterValues(RequestConstants.COPY_TO);
		String allCopyIds = "";
		// if(request.getParameter("reason")!=null&&!request.getParameter("reason").equals("")){
		// reason=request.getParameter("reason");
		// }
		// if (request.getParameterValues(RequestConstants.COPY_TO) != null)
		// for (int i = 0; i < copyIds.length; i++) {
		// if (i != copyIds.length - 1)
		// allCopyIds += copyIds[i] + ",";
		// else
		// allCopyIds += copyIds[i];
		//
		// }

		String headerStored = "no";

		MasDepartment masDepartment = new MasDepartment();
		masDepartment.setId(deptId);
		storeAdjustmentM.setDepartment(masDepartment);

		storeAdjustmentM.setLastChangedDate(HMSUtil
				.convertStringTypeDateToDateType(date));
		storeAdjustmentM.setLastChangedTime(time);
		storeAdjustmentM.setStatus("y");

		// MasHospital masHospital= new MasHospital();
		// masHospital.setId(1);
		// storeAdjustmentM.setHospital(masHospital);
		storeAdjustmentM.setHospital(new MasHospital((Integer) session
				.getAttribute("hospitalId")));
		storeAdjustmentM.setAdjustmentNo(entryNo);
		storeAdjustmentM.setAdjustmentDate(entryDate);
		Users users = new Users();
		users.setId(userId);
		storeAdjustmentM.setLastChangedBy(users);

		storeAdjustmentM.setReason("Defective Drugs");

		int length = 0;
		List<StoreAdjustmentT> storeAdjustmentTlist = new ArrayList<StoreAdjustmentT>();

		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			// int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
			// request, BRAND_ID);
			String remarks[] = JKTRequestUtils.getRequiredStringParameters(
					request, REMARKS);
			String expriyDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, EXPIRY_DATE);
			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);
			// Vector disposal=box.getVector(DISPOSAL);
			// String disposal[] = JKTRequestUtils.getRequiredStringParameters(
			// request, DISPOSAL);

			/*
			 * String authyDeclared[] = JKTRequestUtils
			 * .getRequiredStringParameters(request, AUTHY_UNDER_DECLARED);
			 */
			String batchNoArr[] = JKTRequestUtils.getRequiredStringParameters(
					request, BATCH_ID);

			BigDecimal[] quantityReceivedArray = new BigDecimal[100];
			String mm[] = JKTRequestUtils.getRequiredStringParameters(request,
					QUANTITY_RECEIVED);
			int mmLen = mm.length;
			for (int i = 0; i < mmLen; i++) {
				BigDecimal val = new BigDecimal(mm[i]);
				quantityReceivedArray[i] = val;
			}

			if (buttonFlag.equals("next")) {
				// if(buttonFlag != null){
				length = 30;
			} else {
				length = noOfRows;
			}

			for (int i = 0; i < length; i++) {
				if (itemIdArray[i] != 0) {

					StoreAdjustmentT storeAdjustmentTObj = new StoreAdjustmentT();

					storeAdjustmentTObj.setSlNo(srNo[i]);
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeAdjustmentTObj.setItem(masItem);

					storeAdjustmentTObj
							.setExpiryDate(HMSUtil
									.convertStringTypeDateToDateType(expriyDateArray[i]));

					storeAdjustmentTObj.setBatchNo(batchNoArr[i]);
					storeAdjustmentTObj.setAdjustQty(quantityReceivedArray[i]);

					storeAdjustmentTlist.add(storeAdjustmentTObj);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("entryNo", entryNo);
		infoMap.put("entryId", entryId);
		infoMap.put("storeAdjustmentM", storeAdjustmentM);
		infoMap.put("storeAdjustmentTlist", storeAdjustmentTlist);
		infoMap.put("deptId", deptId);
		infoMap.put("userName", userName);
		infoMap.put("hospitalId", hospitalId);

		boolean flag = false;
		try {
			flag = storesHandlerService.createAdjustment(infoMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}

		String messageTOBeVisibleToTheUser = "";

		if (flag) {
			if (buttonFlag.equals("next")) {
				jsp = DEFECTIVE_DRUGS_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Defect Drug Entry has  been done Successfully";
				map = storesHandlerService.showDefectiveDrugJsp(dataMap);
				if (map.get("entryId") != null) {
					entryId = (Integer) map.get("entryId");
				}
				List<StoreDefectiveDrugM> defectMList = storesHandlerService
						.getDefectDrug(entryId);
				map.put("defectMList", defectMList);

			} else {
				jsp = STORES_MESSAGE_JSP;
				pageNo++;
				messageTOBeVisibleToTheUser = "Defect Drug Entry adjustment has been done Successfully";
			}
		} else {
			messageTOBeVisibleToTheUser = "Defect Drug Entry  adjustment has not been done Successfully";
		}

		jsp = "message";
		jsp += ".jsp";

		url = "/hms/hms/stores?method=showDefectiveDrugJsp";
		map.put("entryNo", entryNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	// defective drug report

	public ModelAndView showDefectiveDrugReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "DEFECTIVE DRUG REPORT";
		List<StoreDefectiveDrugM> defectiveDrugsList = storesHandlerService
				.getDefectiveDrugsList();
		jsp = DEFECTIVE_DRUG_REPORT + ".jsp";
		map.put("defectiveDrugsList", defectiveDrugsList);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showBooReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "BOO REPORT";
		List<StoreBoo> booList = storesHandlerService.getBooList();
		jsp = BOO_REPORT;
		map.put("booList", booList);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView printBooReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		byte[] bytes = null;

		String booNo = null;
		session = request.getSession();
		requestParameters.put("Dept_ID", session.getAttribute("deptId"));
		try {
			if (request.getParameter(BOO_NO) != null
					&& !(request.getParameter(BOO_NO).equals(""))) {

				booNo = request.getParameter(BOO_NO);
				requestParameters.put("booNo", booNo);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("BOO_EntryPrint"), requestParameters,
					(Connection) connectionMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printDefectiveDrugJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		byte[] bytes = null;

		String entryNo = null;
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
		try {
			if (request.getParameter(ENTRY_NO) != null
					&& !(request.getParameter(ENTRY_NO).equals(""))) {

				entryNo = request.getParameter(ENTRY_NO);
				requestParameters.put("entryNo", entryNo);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("submission_defective_drugs"),
					requestParameters, (Connection) connectionMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	// ================== END OF ABHA METHOD================

	// ================== END OF ABHA METHOD================

	// ================== end of functi
	private JasperReport getCompiledReport(String fileName) throws JRException {

		File reportFile = new File(getServletContext().getRealPath(
				"/Reports/" + fileName + ".jasper"));
		JasperReport jasperReport = (JasperReport) JRLoader
				.loadObject(reportFile);

		return jasperReport;
	}

	// =================================================================================
	// =================================================================================

	// *********************************************************************************************************************
	// ------------------------------------Start of Methods Written By
	// Vivek------------------------------------------
	// ****************************************************************************************************************

	public ModelAndView getSectionWiseList(HttpServletRequest request,
			HttpServletResponse response) {
		int sectionId = 0;
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		Box box = HMSUtil.getBox(request);
		if (request.getParameter("sectionId") != null) {
			sectionId = Integer.parseInt(""
					+ (request.getParameter("sectionId")));
		}
		map = storesHandlerService.showIndentJspDepot(dataMap);

		jsp = INDENT_TO_DEPOT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("sectionId", sectionId);
		return new ModelAndView("index", "map", map);
	}

	public void fillItemsForIndentToSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session------
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();

		BigDecimal stockIn = null;

		Box box = HMSUtil.getBox(request);
		String itemNameField = "";
		String pvmsNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = (request.getParameter("pvmsNo"));
		}
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToSOC(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("manufacturerList") != null) {
			manufacturerList = (List) map.get("manufacturerList");
		}

		if (map.get("stockIn") != null) {
			stockIn = new BigDecimal("" + map.get("stockIn"));
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");

				if (masStoreItem.getCostPrice() != null) {
					sb.append("<costPrice>" + masStoreItem.getCostPrice().intValue()
							+ "</costPrice>");
				} else {
					sb.append("<costPrice>" + 0 + "</costPrice>");
				}
				System.out.println("masStoreItem.getExpiry()----"+masStoreItem.getExpiry());
				sb.append("<expiry>" + (masStoreItem.getExpiry()!=null?masStoreItem.getExpiry():"" )+ "</expiry>");

				/*
				 * if(masStoreItem.getManufacturer()!=null){
				 * sb.append("<manufacturerId>" +
				 * masStoreItem.getManufacturer().getId() +
				 * "</manufacturerId>");
				 * 
				 * }else{ sb.append("<manufacturerId>"+" "+"</manufacturerId>");
				 * 
				 * } if(masStoreItem.getManufacturer()!=null){
				 * sb.append("<manufacturerName>" +
				 * masStoreItem.getManufacturer().getManufacturerName() +
				 * "</manufacturerName>"); }else{ sb.append("<manufacturerName>"
				 * + " " + "</manufacturerName>"); }
				 */
				/*for (MasManufacturer manu : manufacturerList) {
					if (manu.getId() != null) {
						sb.append("<manufacturerId>" + manu.getId()
								+ "</manufacturerId>");

					} else {
						sb.append("<manufacturerId>" + " "
								+ "</manufacturerId>");

					}
					if (manu.getManufacturerName() != null) {
						sb.append("<manufacturerName>"
								+ manu.getManufacturerName()
								+ "</manufacturerName>");
					} else {
						sb.append("<manufacturerName>" + " "
								+ "</manufacturerName>");
					}
				}*/
				sb.append("<brands>");
				for (MasStoreBrand brand : brandList) {
					sb.append("<brand>");
					sb.append("<brandId>" + brand.getId() + "</brandId>");
					sb.append("<brandName>" + brand.getBrandName()
							+ "</brandName>");
					sb.append("</brand>");
				}
				sb.append("</brands>");
				sb.append("<stockIn>" + stockIn + "</stockIn>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void getManufacturerNameInAjax(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int brandId = 0;
		String manufacturerName = "";
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter(BRAND_ID) != null) {
			brandId = Integer.parseInt("" + (request.getParameter(BRAND_ID)));
		}
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("brandId", brandId);
		map = storesHandlerService.getManufacturerNameInAjax(dataMap);
		if (map.get("manufacturerName") != null) {
			manufacturerName = ("" + map.get("manufacturerName"));
		}
		int mId = 1;
		if (map.get("mId") != null) {
			mId = Integer.parseInt(("" + map.get("mId")));
		}
		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<manufacturerName>" + manufacturerName
					+ "</manufacturerName>");
			sb.append("<mId>" + mId + "</mId>");
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIssueToDepot(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("requiredField") != null) {
				pvmsNo = URLDecoder.decode(
						request.getParameter("requiredField"), "UTF-8");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIssueToDepot(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}

		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	// ----------------------------------------Final MMF For Projection To
	// DGAFMS--------------------------------------------------
	public ModelAndView printMmfIndent(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		int indentId = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(INDENT_ID) != null
					&& !(request.getParameter(INDENT_ID).equals(""))) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			parameters = storesHandlerService.printMmfIndent(indentId);
			parameters.put("indentId", indentId);
			byte[] bytes = null;
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_INDET_PRINT), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ MMF_INDET_PRINT + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			((Connection) parameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public void fillItemsCommon(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsCommon(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}

		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}

		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

			sb.append("<brands>");
			for (MasStoreBrand masStoreBrand : brandList) {
				sb.append("<brand>");
				sb.append("<brandId>" + masStoreBrand.getId() + "</brandId>");
				sb.append("<brandName>" + masStoreBrand.getBrandName()
						+ "</brandName>");
				sb.append("<manufacturerId>"
						+ masStoreBrand.getManufacturer().getId()
						+ "</manufacturerId>");
				sb.append("<manufacturerName>"
						+ masStoreBrand.getManufacturer().getManufacturerName()
						+ "</manufacturerName>");
				sb.append("</brand>");
			}
			sb.append("</brands>");

			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsforPurchase(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		if (session.getAttribute("deptId") != null)
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("type", "purchase");
		BigDecimal mrp = new BigDecimal(0);
		map = storesHandlerService.fillItemsCommon(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}

		if (map.get("brandList") != null) {
			brandList = (List) map.get("brandList");
		}
		if (map.get("mrp") != null) {
			mrp = (BigDecimal) map.get("mrp");
		}
		if (map.get("manufacturerList") != null) {
			manufacturerList = (List) map.get("manufacturerList");
		}
		List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
		if (map.get("storeGrnTList") != null) {
			storeGrnTList = (List) map.get("storeGrnTList");
		}
		BigDecimal costPrice = new BigDecimal(0);

		if (storeGrnTList.size() > 0) {
			StoreGrnT storeGrnT = new StoreGrnT();
			storeGrnT = (StoreGrnT) storeGrnTList.get(0);
			costPrice = storeGrnT.getUnitRate();
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
			/**
			 * This code is commented By Mukesh Narayan SIngh after discus with
			 * Dharmendra and Narayan Sir Cost price will come from from last
			 * grn item Date 15 Dec 2010
			 */
			/*
			 * try { if (masStoreItem.getCostPrice() != null) {
			 * sb.append("<costPrice>" + masStoreItem.getCostPrice() +
			 * "</costPrice>"); } else { sb.append("<costPrice>" + 0 +
			 * "</costPrice>"); } } catch (Exception e) {
			 * sb.append("<costPrice>" + 0 + "</costPrice>"); }
			 */
			sb.append("<costPrice>" + costPrice + "</costPrice>");
			try {
				sb.append("<dipenseType>"
						+ masStoreItem.getItemConversion()
								.getIntermediateUnit().getUnitName()
						+ "</dipenseType>");
			} catch (Exception e) {
				sb.append("<dipenseType>" + "-" + "</dipenseType>");
			}
			try {
				sb.append("<mrp>" + mrp + "</mrp>");
			} catch (Exception e) {
				sb.append("<mrp>" + "0" + "</mrp>");
			}

			BigDecimal stock = new BigDecimal(map.get("quantityInHand")
					.toString());

			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

			for (MasManufacturer manu : manufacturerList) {
				if (manu.getId() != null) {
					sb.append("<manufacturerId>" + manu.getId()
							+ "</manufacturerId>");

				} else {
					sb.append("<manufacturerId>" + " " + "</manufacturerId>");

				}
				if (manu.getManufacturerName() != null) {
					sb.append("<manufacturerName>" + manu.getManufacturerName()
							+ "</manufacturerName>");
				} else {
					sb.append("<manufacturerName>" + " "
							+ "</manufacturerName>");
				}
			}

			/*
			 * if(masStoreItem.getManufacturer()!=null){
			 * 
			 * if(masStoreItem.getManufacturer().getId()!=0){
			 * sb.append("<manufacturerId>" +
			 * masStoreItem.getManufacturer().getId() + "</manufacturerId>");
			 * }else { sb.append("<manufacturerId> </manufacturerId>"); }
			 * if(masStoreItem.getManufacturer().getManufacturerName()!=null){
			 * sb.append("<manufacturerName>" +
			 * masStoreItem.getManufacturer().getManufacturerName() +
			 * "</manufacturerName>"); }else {
			 * sb.append("<manufacturerName></manufacturerName>"); } }
			 */
			sb.append("<quantityInHand>" + stock + "</quantityInHand>");

			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForMMFIndentModify(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int mmfForTheYear = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("mmfForTheYear") != null) {
				mmfForTheYear = Integer.parseInt(""
						+ (request.getParameter("mmfForTheYear")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("mmfForTheYear", mmfForTheYear);

			map = storesHandlerService.getItemListForMMFIndentModify(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int mmfForTheYear = 2008;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("mmfForTheYear") != null) {
				mmfForTheYear = Integer.parseInt(""
						+ (request.getParameter("mmfForTheYear")));
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("mmfForTheYear", mmfForTheYear);

			map = storesHandlerService.getItemListForMMFIndent(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView checkYearExists(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int mmfForTheYear = 0;

		try {

			if (request.getParameter(RequestConstants.MMF_FOR_THE_YEAR) != null) {
				mmfForTheYear = Integer.parseInt(request
						.getParameter(RequestConstants.MMF_FOR_THE_YEAR));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (mmfForTheYear != 0) {
			dataMap.put("mmfForTheYear", mmfForTheYear);
			dataMap.put("deptId", deptId);
			map = storesHandlerService.checkYearExists(dataMap);
		}
		jsp = INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPrintIndentSocJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showPrintIndentDepotJsp();
		jsp = PRINT_INDENT_SOC_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView lockMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int year = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		String messageTOBeVisibleToTheUser = "Record Not Locked";
		if (request.getParameter(RequestConstants.MMF_FOR_THE_YEAR) != null) {
			year = Integer.parseInt(request
					.getParameter(RequestConstants.MMF_FOR_THE_YEAR));
		}
		map = storesHandlerService.lockMMFIndent(year);
		if (map.get("messageTOBeVisibleToTheUser") != null) {
			messageTOBeVisibleToTheUser = ""
					+ map.get("messageTOBeVisibleToTheUser");
		}
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		jsp = INDENT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showLockMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showLockMMFIndent();
		jsp = LOCK_MMF_INDENT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showPrintIndentDepotJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		try {
			map = storesHandlerService.showPrintIndentDepotJsp(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = PRINT_INDENT_DEOPT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView importMMFIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int year = 0;
		String flag = "n";
		int indentId = 0;
		String messageTOBeVisibleToTheUser = "";
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		try {
			if (request.getParameter(RequestConstants.MMF_FOR_THE_YEAR) != null) {
				year = Integer.parseInt(request
						.getParameter(RequestConstants.MMF_FOR_THE_YEAR));
			}
			dataMap.put("deptId", deptId);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("userId", userId);
			dataMap.put("userName", userName);
			dataMap.put("year", year);
			map = storesHandlerService.importMMFIndent(dataMap);
			if (map.get("flag") != null) {
				flag = ("" + map.get("flag"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (map.get("messageTOBeVisibleToTheUser") != null) {
			messageTOBeVisibleToTheUser = ""
					+ map.get("messageTOBeVisibleToTheUser");

		}
		jsp = INDENT_JSP;
		jsp = jsp + ".jsp";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showImportMMFIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();

		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.showImportMMFIndentJsp(dataMap);
		jsp = IMPORT_MMF_INDENT;
		jsp = jsp + ".jsp";
		title = "Import MMF Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView printIndentSoc(HttpServletRequest request,
			HttpServletResponse response) {
		int indentId = 0;
		if (request.getParameter(INDENT_NO) != null
				&& !(request.getParameter(INDENT_NO).equals(""))) {
			indentId = Integer.parseInt(request.getParameter(INDENT_NO));
		}
		Map parameters = new HashMap();
		parameters = storesHandlerService.getIndentSocPrintMap(indentId);

		parameters.put("indentId", indentId);
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(INDENT_TO_SOC_JASPER), parameters,
					(Connection) parameters.get("conn"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ INDENT_TO_SOC_JASPER + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			((Connection) parameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView printIndentDepotJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int indentId = 0;
		if ((request.getParameter(INDENT_ID) != null)
				&& !(request.getParameter(INDENT_ID).equals(""))) {
			indentId = Integer.parseInt(request.getParameter(INDENT_ID));
		}
		Map parameters = new HashMap();
		parameters = storesHandlerService.getIndentDepotPrintMap(indentId);
		try {
			parameters.put("indentId", indentId);
			byte[] bytes = null;

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(INDENT_TO_DEPOT_JASPER), parameters,
					(Connection) parameters.get("conn"));
			response.setHeader("Content-Disposition", "attachment; filename="
					+ INDENT_TO_DEPOT_JASPER + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			((Connection) parameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/*
	 * This method is used for displaying MMF Indent Screen. In this we are
	 * making a call to data Service current year as Parameter. We get a list
	 * based on that. Here we are checking existence of current year MMF Indent.
	 * If MMF Indent is exists for Current Year ,we are displaying a message
	 * Otherwise are we will send the Data to Jsp with Current Year
	 */
	@SuppressWarnings("unused")
	public ModelAndView showIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// Local Variable Declaration
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> indentMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		String messageTOBeVisibleToTheUser = "";

		int masterRecordExist = 0;
		int noOfRecordsAlreadyStored = 0;
		int indentId = 0;
		boolean flag = false;
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		// Method Body
		List<StoreIndentM> searchPanelIndentList = new ArrayList<StoreIndentM>();
		try {

			indentMap = storesHandlerService
					.checkExistenceOfCuurentYearIndent(year);
			if (indentMap.get("noOfRecordsAlreadyStored") != null)
				noOfRecordsAlreadyStored = Integer.parseInt(""
						+ indentMap.get("noOfRecordsAlreadyStored"));
			if (indentMap.get("indentId") != null)
				indentId = Integer.parseInt("" + indentMap.get("indentId"));
			if (indentMap.get("searchPanelIndentList") != null)
				searchPanelIndentList = (List) (indentMap
						.get("searchPanelIndentList"));

			if (flag) {
				jsp = INDENT_JSP;
				messageTOBeVisibleToTheUser = "For this Year	MMF Indent is Already there.If you want to change it,go to Search";
			} else {
				jsp = INDENT_JSP;
			}

			if ((session.getAttribute("itemList") == null)
					|| (session.getAttribute("sectionList") == null)) {
				/*
				 * method commented by vikas to pass the department value which
				 * is hard coded in Ds method
				 */
				// map = storesHandlerService.showIndent();
				map = storesHandlerService.showIndent(deptId);
				if (map.get("sectionList") != null) {
					sectionList = (List) map.get("sectionList");
					session.setAttribute("sectionList", sectionList);

				}
			}
			jsp = jsp + ".jsp";
			title = "Indent";

			map.put("searchPanelIndentList", searchPanelIndentList);
			map.put("noOfRecordsAlreadyStored", noOfRecordsAlreadyStored);
			map.put("indentId", indentId);
			map.put("contentJsp", jsp);
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
			map.put("title", title);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItems(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getItemListThroughAjax(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showIndentJspAF(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		/*
		 * method commented by vikas to pass the department value which is hard
		 * coded in Ds method
		 */
		// map = storesHandlerService.showIndent();
		map = storesHandlerService.showIndent(deptId);
		jsp = "indentOAFU";
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showIndentJspDepot(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showIndentJspDepot(dataMap);
		jsp = INDENT_TO_DEPOT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showIndentJspSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		String jsp = "";
		try {
			map = storesHandlerService.showIndentJspSOC(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = INDENT_TO_SOC;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView modifyIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		jsp = INDENT_MODIFY;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter(INDENT_IF_YEAR_EXISTS) != null) {
			radio_str = Integer.parseInt(request
					.getParameter(INDENT_IF_YEAR_EXISTS));
		}
		map = (Map) storesHandlerService.getIndentModifyMap(radio_str, pageNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		itemList = storesHandlerService.getItemList();
		map.put("itemList", itemList);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView getHeader1(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String jsp = "";
		int radioVal = 1;

		if (request.getParameter(RADIO_PVMS) != null) {

			radioVal = Integer.parseInt(request.getParameter(RADIO_PVMS));

		}

		if (radioVal == 1) {
			jsp = "indent";
		} else if (radioVal == 2) {
			jsp = "indentOAF";
		} else if (radioVal == 3) {
			jsp = "indentBD";
		} else {
			jsp = "socIndent";
		}
		/*
		 * method commented by vikas to pass the department value which is hard
		 * coded in Ds method
		 */
		// map = storesHandlerService.showIndent();
		map = storesHandlerService.showIndent(deptId);
		jsp += ".jsp";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHeader(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String jsp = "";
		int radioVal = 1;

		if (request.getParameter(RADIO_PVMS) != null) {

			radioVal = Integer.parseInt(request.getParameter(RADIO_PVMS));

		}

		if (radioVal == 1) {
			jsp = "pvmsByDgrc";
		} else if (radioVal == 2) {
			jsp = "indentByAf";
		} else if (radioVal == 3) {
			jsp = "indentByDepot";
		} else {
			jsp = "socIndent";
		}
		/*
		 * method commented by vikas to pass the department value which is hard
		 * coded in Ds method
		 */
		// map = storesHandlerService.showIndent();
		map = storesHandlerService.showIndent(deptId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String fromDate = "";
		String toDate = "";
		String indentNo = "";
		int mmfYear = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		try {
			if (request.getParameter(MMF_FOR_THE_YEAR) != null) {
				mmfYear = Integer.parseInt(request
						.getParameter(MMF_FOR_THE_YEAR));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		searchFieldMap.put("mmfYear", mmfYear);
		try {
			/*
			 * method commented by vikas to pass the value for department id
			 * which is hard coded in DS method
			 */
			// tempMap = storesHandlerService.showIndent();
			tempMap = storesHandlerService.showIndent(deptId);
			if (tempMap.get("searchIndentList") != null)
				searchIndentList = (List) tempMap.get("searchIndentList");
			map = storesHandlerService.searchIndent(searchFieldMap);
			map.put("searchIndentList", searchIndentList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = SEARCH_INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchIndentSOC(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		jsp = MODIFY_INDENT_TO_SOC;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter(INDENT_NO_FOR_SEARCH) != null) {
			radio_str = Integer.parseInt(request
					.getParameter(INDENT_NO_FOR_SEARCH));
			map = (Map) storesHandlerService.getIndentModifyMapForSOC(
					radio_str, pageNo);
		}
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView searchIndentDepot(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		int pageNo = 1;
		jsp = MODIFY_INDENT_TO_DEPOT;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter(INDENT_NO_FOR_SEARCH) != null) {
			radio_str = Integer.parseInt(request
					.getParameter(INDENT_NO_FOR_SEARCH));
			map = (Map) storesHandlerService.getIndentModifyMapForDepot(
					radio_str, pageNo);
		}
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView previousIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int indentId = 0;
		int indentNo = 0;
		Map infoMap = new HashMap();
		String previousPage = "yes";
		int pageNo = 1;
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter(INDENT_NO) != null) {
				indentNo = Integer.parseInt(request.getParameter(INDENT_NO));
			}

		} catch (Exception e) {
			e.printStackTrace();
			// TODO: handle exception
		}
		map = (Map) storesHandlerService.getIndentMAndT(indentId);
		jsp = "indent";
		jsp += ".jsp";

		map.put("indentId", indentId);
		map.put("maxIndentNo", indentNo);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("previousPage", previousPage);
		return new ModelAndView("index", "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent. It is
	 * used for two operations(Next,Submit) based on the flag ie. buttonFlag
	 */
	public ModelAndView addNextOrSubmitIndent(HttpServletRequest request,
			HttpServletResponse response) {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		String indentTo = "";
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "p";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		boolean flag = false;
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";

		if (request.getParameter(MMF_FOR_THE_YEAR) != null) {
			mmfForTheYear = Integer.parseInt(request
					.getParameter(MMF_FOR_THE_YEAR));
		}
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(RADIO_PVMS) != null) {

				radioVal = Integer.parseInt(request.getParameter(RADIO_PVMS));

			}
			if (radioVal == 1)
				indentType = "p";
			if (radioVal == 2)
				indentType = "a";
			if (radioVal == 3)
				indentType = "d";
			if (radioVal == 4) {
				indentType = "s";
				try {
					if (request.getParameter(DETAIL_OF_PATIENT) != null) {
						patientDetails = (request
								.getParameter(DETAIL_OF_PATIENT));
					}
					if (request.getParameter(AUTHORITY) != null) {
						authority = (request.getParameter(AUTHORITY));
					}
					if (request.getParameter(JUSTIFICATION) != null) {
						justificationNiv = (request.getParameter(JUSTIFICATION));
					}
					if (request.getParameter(GENERAL_DETAILS) != null) {
						pacJustification = (request
								.getParameter(GENERAL_DETAILS));
					}
					if (request.getParameter(ADDRESS_OF) != null) {
						pacForeignAdd = (request.getParameter(ADDRESS_OF));
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
				if (Integer.parseInt(request.getParameter(TYPE_OF_INDENT)) == 1) {
					indentOption = "Monthly";
				} else {
					indentOption = "Yearly";
				}
			}

			if (pageNo != 1) {
				indentId = storesHandlerService.getIndentId((mmfForTheYear));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(INDENT_TO) != null) {
				indentTo = (request.getParameter(INDENT_TO));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			String te = "";

			if (request.getParameter(INDENT_DATE) != null) {
				te = (String) (request.getParameter(INDENT_DATE));

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (request.getParameter(NO_OF_ROWS) != null) {

			rows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
		}

		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo("01/" + mmfForTheYear);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);

				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setStatus("o");
				storeIndentM.setIndentOption(indentOption);
				storeIndentM.setSuppliedBy(null);
				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int qtyInMmyArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, QTY_IN_MMF);

			if (buttonName.equals("next")) {
				// if(buttonFlag != null){
				length = 8;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < length; i++) {

				if (itemIdArray[i] != 0) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);

					storeIndentTObj.setStockIn(null);

					BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
					storeIndentTObj.setQtyInMmf(bigDecimal);
					storeIndentTObj.setQtyInDemand(null);
					storeIndentTObj.setQtyReceived(null);

					storeIndentTObj.setSection(null);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(deptId);

					storeIndentTObj.setUnitRate(unitRate);
					storeIndentTObj.setBrand(null);

					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);
					storeIndentTObj.setMarketedBy(marketedBy);
					storeIndentTObj.setTotalCost(totalCost);
					storeIndentTObj.setLastReceiptDate(lastReceiptDate);
					storeIndentTObj.setLastReceiptQty(lastReceiptQty);

					// storeIndentTObj.setIndent();

					storeIndentTlist.add(storeIndentTObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		infoMap.put("pageNo", pageNo);
		infoMap.put("indentId", indentId);
		infoMap.put("deptId", deptId);
		infoMap.put("userName", userName);
		infoMap.put("hospitalId", hospitalId);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			flag = storesHandlerService.addNextOrSubmitIndentToMMF(
					storeIndentM, storeIndentTlist, infoMap);
			indentId = storesHandlerService.getIndentId(mmfForTheYear);

		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "MMf Indent  Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = "MMf Indent  Records Not Added Successfully";
		}
		if (buttonName.equals("next")) {
			jsp = INDENT_JSP;
		} else {
			jsp = STORES_MESSAGE_JSP;
			url = "/hms/hms/stores?method=showIndentJsp";
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("indentOption", indentOption);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("mmfForTheYear", mmfForTheYear);
		map.put("url", url);
		itemList = storesHandlerService.getItemList();
		map.put("itemList", itemList);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent To Indent.
	 * It is used for two operations(Next,Submit) based on the flag ie.
	 * buttonFlag
	 */
	public ModelAndView updateNextOrSubmitIndentToDepot(
			HttpServletRequest request, HttpServletResponse response)
			throws java.text.ParseException {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		/***********************************************************************
		 * Local Variable Declaration*
		 **********************************************************************/
		StoreIndentM storeIndentM = new StoreIndentM();
		StoreIndentT storeIndentT = new StoreIndentT();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		StoreIndentM storeIndentMObj = new StoreIndentM();
		Map map2 = new HashMap();
		String indentNo = "";
		String indentFrom = "";
		Date indentDate = null;
		String indentTo = "";
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		String indentType = "d";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int totalRecords = 0;
		int mmfForTheYear = 0;
		int idArrayLength = 0;
		int length = 0;
		String messageTOBeVisibleToTheUser = "";
		// Grid related Variables
		int pageNo = 1;
		/** Represents Page No */
		String buttonName = "";
		/** Represents which button user clicked in JSP(Next/Submit) */
		String noDetailRecords = "no";
		/** Represents */
		String headerStored = "no";
		String url = "";
		Date lastChgDate = new Date();
		int noOfRows = 0;
		int supplyDepot = 0;
		String address = "";
		// Method Body

		try {
			/*******************************************************************
			 * Getting Header Information From JSP*
			 ******************************************************************/

			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter("noDetailRecords") != null) {
				noDetailRecords = (request.getParameter("noDetailRecords"));
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt((request
						.getParameter(SUPPLY_DEPOT)));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (request.getParameter(AUTHORITY));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (pageNo == 1) {
			/*******************************************************************
			 * Storing the form(JSP) data in Header object * This operation
			 * performed only when page no is 1 *
			 ******************************************************************/
			try {
				storeIndentM.setId(indentId);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setStatus("o");
				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {

			if (noDetailRecords.equals("no")) {
				/***************************************************************
				 * Storing the form(JSP) data in Detail object *
				 **************************************************************/

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				idArrayLength = idArray.length;

				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInHandStringArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_HAND);
				String qtyInMmfArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				String qtyDemandArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_DEMAND_TEMP);
				BigDecimal[] qtyInHandArray = new BigDecimal[10];
				int xxLegnt = qtyInHandStringArray.length;

				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
					qtyInHandArray[i] = val;
				}

				length = srNo.length;
				for (int i = 0; i < length; i++) {
					if (idArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setId(idArray[i]);
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);
						storeIndentTObj.setStockIn(qtyInHandArray[i]);

						BigDecimal bigDecimal = new BigDecimal(qtyInMmfArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						BigDecimal bigDecimal2 = new BigDecimal(
								qtyDemandArray[i]);
						storeIndentTObj.setQtyInDemand(bigDecimal2);
						storeIndentTObj.setQtyReceived(null);

						storeIndentTObj.setSection(null);
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);

						storeIndentTListForUpdate.add(storeIndentTObj);
					} else {
						if (itemIdArray[i] != 0) {
							StoreIndentT storeIndentTObj = new StoreIndentT();

							storeIndentTObj.setSerialNo(srNo[i]);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeIndentTObj.setItem(masItem);

							storeIndentTObj.setStockIn(null);

							BigDecimal bigDecimal = new BigDecimal(
									qtyInMmfArray[i]);
							storeIndentTObj.setQtyInMmf(bigDecimal);
							storeIndentTObj.setQtyReceived(null);
							storeIndentTObj.setQtyInDemand(new BigDecimal(
									qtyDemandArray[i]));

							storeIndentTObj.setSection(null);

							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(deptId);
							StoreIndentM storeIndentM2 = new StoreIndentM();
							storeIndentM2.setId(indentId);
							storeIndentTObj.setIndent(storeIndentM2);
							BigDecimal unitRate = null;
							String brandName = "";
							int manufactureId = 1;
							String marketedBy = "";
							BigDecimal totalCost = null;
							Date lastReceiptDate = null;
							BigDecimal lastReceiptQty = null;
							storeIndentTObj.setUnitRate(unitRate);
							storeIndentTObj.setBrand(null);

							storeIndentTObj.setManufacture(null);
							storeIndentTObj.setMarketedBy(marketedBy);
							storeIndentTObj.setTotalCost(totalCost);
							storeIndentTObj.setLastReceiptDate(lastReceiptDate);
							storeIndentTObj.setLastReceiptQty(lastReceiptQty);
							storeIndentTListForAdd.add(storeIndentTObj);
						}
					}
					idArrayLength--;
				}

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				String qtyDemandArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_DEMAND_TEMP);
				length = srNo.length;
				for (int i = 0; i < length; i++) {
					if (itemIdArray[i] != 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(null);

						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setQtyInDemand(new BigDecimal(
								qtyDemandArray[i]));

						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(deptId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 1;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		masterAndDetailMap.put("storeIndentTListForUpdate",
				storeIndentTListForUpdate);
		masterAndDetailMap
				.put("storeIndentTListForAdd", storeIndentTListForAdd);
		masterAndDetailMap.put("storeIndentM", storeIndentM);
		masterAndDetailMap.put("indentId", indentId);
		masterAndDetailMap.put("pageNo", pageNo);
		boolean flag = storesHandlerService
				.updateNextIndentToDepot(masterAndDetailMap);

		pageNo++;
		if (flag) {
			if (indentId != 0) {
				map = (Map) storesHandlerService.getIndentModifyMapForDepot(
						indentId, pageNo);
			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreIndentT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				jsp = MODIFY_INDENT_TO_DEPOT;
			}
			if ((buttonName.equals("submit"))) {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "Indent To Depot Records Updated Successfully";
				url = "/hms/hms/stores?method=showIndentJspDepot";
			}

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Indent To Depot Records Not Updated ";
			map.put("messageType", "failure");
			url = "/hms/hms/stores?method=showIndentJspDepot";
		}

		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("authority", authority);
		map.put("address", address);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemListForIndentToSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int sectionId = 0;
		int indentId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("section") != null) {
				sectionId = Integer.parseInt(""
						+ (request.getParameter("section")));
			}
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt(""
						+ (request.getParameter("indentId")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("sectionId", sectionId);
			dataMap.put("indentId", indentId);

			map = storesHandlerService.getItemListForIndentToSOC(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateNextOrSubmitIndentToSOC(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "s";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String pacSpecific = "";
		String clinicalTrailReq = "";
		String dateOfLastReciept = "";
		String justification = "";
		BigDecimal qty = null;
		BigDecimal cost = null;
		int duration = 0;
		String durationType = "";
		int days = 0;
		int dose = 0;
		String course = "";
		String clinicalTrail = "";
		String noDetailRecords = "no";
		// New fields
		String PvmsAlreadyPrescribed = "";
		int itemReqForDept = 0;
		String pvmsAlreadyPrescribed = "";
		int itemReqDept = 0;
		String pacEqpt = "";

		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		String messageTOBeVisibleToTheUser = "";
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}

			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				itemReqDept = Integer.parseInt((request
						.getParameter(DEPARTMENT_ID_TEMP)));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

			if (request.getParameter(CLINICAL_TRAIL_REQ) != null) {
				clinicalTrailReq = ((request.getParameter(CLINICAL_TRAIL_REQ)));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				PvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}

			if (request.getParameter(JUSTIFICATION) != null) {
				justification = (request.getParameter(JUSTIFICATION));
			}
			if (request.getParameter(QTY) != null) {
				qty = new BigDecimal(request.getParameter(QTY));
			}
			if (request.getParameter(COST) != null) {
				cost = new BigDecimal(request.getParameter(COST));
			}
			if (request.getParameter(DURATION) != null) {
				duration = Integer.parseInt((request.getParameter(DURATION)));
			}
			if (request.getParameter(DURATION_TYPE) != null) {
				durationType = (request.getParameter(DURATION_TYPE));
			}
			if (request.getParameter(DAYS) != null) {
				days = Integer.parseInt((request.getParameter(DAYS)));
			}
			if (request.getParameter(COURSE) != null) {
				course = (request.getParameter(COURSE));
			}
			if (request.getParameter(DOSE) != null) {
				dose = Integer.parseInt((request.getParameter(DOSE)));
			}
			if (request.getParameter(PAC_SPECIFIC) != null) {
				pacSpecific = (request.getParameter(PAC_SPECIFIC));
			}
			if (request.getParameter(DETAIL_OF_PATIENT) != null) {
				patientDetails = (request.getParameter(DETAIL_OF_PATIENT));
			}
			if (request.getParameter(JUSTIFICATION_NIV) != null) {
				justificationNiv = (request.getParameter(JUSTIFICATION_NIV));
			}
			if (request.getParameter(PAC_JUSTIFICATION) != null) {
				pacJustification = (request.getParameter(PAC_JUSTIFICATION));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				pvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}
			if (request.getParameter(PAC) != null) {
				pacEqpt = (request.getParameter(PAC));
			}
			if (request.getParameter("noDetailRecords") != null) {
				noDetailRecords = (request.getParameter("noDetailRecords"));
			}

		} catch (Exception e) {
			e.printStackTrace();
			e.printStackTrace();
		}
		if (pageNo == 1) {
			try {
				storeIndentM.setId(indentId);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				storeIndentM.setNrs(nrs);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setStatus("o");
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setIndentOption(indentOption);
				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(null);
				storeIndentM.setAuthority(null);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);

				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setImported("n");

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);

				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(1);
				storeIndentM.setSection(masStoreSection);

				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(1);
				storeIndentM.setSuppliedBy(masStoreSupplier);

				storeIndentM.setClinicalTrail(clinicalTrailReq);
				storeIndentM.setPvmsAlreadyPrescribed(pvmsAlreadyPrescribed);
				storeIndentM.setCost(cost);
				storeIndentM.setQty(qty);
				storeIndentM.setDose(dose);
				storeIndentM.setCourse(course);
				storeIndentM.setDuration(duration);
				storeIndentM.setDurationType(durationType);
				storeIndentM.setJustification(justification);
				storeIndentM.setPacSpecific(pacSpecific);
				storeIndentM.setPacEqpt(pacEqpt);

				MasDepartment masDepartment2 = new MasDepartment();
				masDepartment2.setId(itemReqDept);
				storeIndentM.setItemReqDept(masDepartment2);

			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		try {
			if (noDetailRecords.equals("no")) {

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BRAND_ID);
				int detailIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				String marketedByArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, MARKETED_BY);

				String qtyInHandStringArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_HAND);
				String StringUnitRateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, UNIT_RATE);

				String StringTotalCostArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, TOTAL_COST);
				String StringQtyRecpArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_QTY);
				String StringQtyRecpDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_DATE);

				BigDecimal[] qtyInHandArray = new BigDecimal[10];
				BigDecimal[] unitRateArray = new BigDecimal[10];
				BigDecimal[] CostArray = new BigDecimal[10];
				BigDecimal[] QtyRecpArray = new BigDecimal[10];
				Date[] QtyRecpDateArray = new Date[10];

				int xxLegnt = itemIdArray.length;

				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
					qtyInHandArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringTotalCostArray[i]);
					CostArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					if (!StringQtyRecpDateArray[i].equals("0")) {
						SimpleDateFormat formatterIn = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat formatterOut = new SimpleDateFormat(
								"yyyy-MM-dd");
						String date4MySQL = formatterOut.format(formatterIn
								.parse(StringQtyRecpDateArray[i]));
						indentDate = java.sql.Date.valueOf(date4MySQL);

						QtyRecpDateArray[i] = indentDate;
					}
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringQtyRecpArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					unitRateArray[i] = val;
				}
				int length = srNo.length;
				int idArrayLength = itemIdArray.length;
				int detailIdArrayLength = detailIdArray.length;
				for (int i = 0; i < length; i++) {
					if (detailIdArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						try {
							storeIndentTObj.setId(detailIdArray[i]);
						} catch (Exception e) {

							e.printStackTrace();
						}
						storeIndentTObj.setSerialNo(srNo[i]);
						storeIndentTObj.setStockIn(qtyInHandArray[i]);
						storeIndentTObj.setQtyInMmf(null);
						storeIndentTObj.setQtyInDemand(null);
						storeIndentTObj.setQtyReceived(null);

						StoreIndentM indent = new StoreIndentM();
						indent.setId(indentId);
						storeIndentTObj.setIndent(indent);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setSection(null);
						storeIndentTObj.setUnitRate(unitRateArray[i]);
						storeIndentTObj.setMarketedBy(marketedByArray[i]);
						storeIndentTObj.setTotalCost(CostArray[i]);
						storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
						storeIndentTObj.setLastReceiptDate(QtyRecpDateArray[i]);

						if ((brandIdArray[i] != 0)) {
							MasStoreBrand brand = new MasStoreBrand();
							brand.setId(brandIdArray[i]);
							storeIndentTObj.setBrand(brand);
						} else {
							storeIndentTObj.setBrand(null);
						}

						MasManufacturer manufacturer = new MasManufacturer();
						manufacturer.setId(manufactureId);
						storeIndentTObj.setManufacture(manufacturer);

						storeIndentTObj.setQtyReceived(null);

						storeIndentTListForUpdate.add(storeIndentTObj);

					} else {
						if (itemIdArray[i] != 0) {
							StoreIndentT storeIndentTObj = new StoreIndentT();

							storeIndentTObj.setSerialNo(srNo[i]);
							storeIndentTObj.setStockIn(qtyInHandArray[i]);
							storeIndentTObj.setQtyInMmf(null);
							storeIndentTObj.setQtyInDemand(null);
							storeIndentTObj.setQtyReceived(null);

							StoreIndentM indent = new StoreIndentM();
							indent.setId(indentId);
							storeIndentTObj.setIndent(indent);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeIndentTObj.setItem(masItem);

							storeIndentTObj.setSection(null);
							storeIndentTObj.setUnitRate(unitRateArray[i]);
							storeIndentTObj.setMarketedBy(marketedByArray[i]);
							storeIndentTObj.setTotalCost(CostArray[i]);
							storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
							storeIndentTObj
									.setLastReceiptDate(QtyRecpDateArray[i]);

							if ((brandIdArray[i] != 0)) {
								MasStoreBrand brand = new MasStoreBrand();
								brand.setId(brandIdArray[i]);
								storeIndentTObj.setBrand(brand);
							} else {
								storeIndentTObj.setBrand(null);
							}

							MasManufacturer manufacturer = new MasManufacturer();
							manufacturer.setId(manufactureId);
							storeIndentTObj.setManufacture(manufacturer);

							storeIndentTObj.setQtyReceived(null);

							storeIndentTListForAdd.add(storeIndentTObj);
						}

					}
					detailIdArrayLength--;
				}// End of detail for

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BRAND_ID);
				String marketedByArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, MARKETED_BY);

				String qtyInHandStringArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_HAND);
				String StringUnitRateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, UNIT_RATE);

				String StringTotalCostArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, TOTAL_COST);
				String StringQtyRecpArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_QTY);
				String StringQtyRecpDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, LAST_RECP_DATE);

				BigDecimal[] qtyInHandArray = new BigDecimal[10];
				BigDecimal[] unitRateArray = new BigDecimal[10];
				BigDecimal[] CostArray = new BigDecimal[10];
				BigDecimal[] QtyRecpArray = new BigDecimal[10];
				Date[] QtyRecpDateArray = new Date[10];

				int xxLegnt = itemIdArray.length;

				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
					qtyInHandArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringTotalCostArray[i]);
					CostArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					if (!StringQtyRecpDateArray[i].equals("0")) {
						SimpleDateFormat formatterIn = new SimpleDateFormat(
								"dd/MM/yyyy");
						SimpleDateFormat formatterOut = new SimpleDateFormat(
								"yyyy-MM-dd");
						String date4MySQL = formatterOut.format(formatterIn
								.parse(StringQtyRecpDateArray[i]));
						indentDate = java.sql.Date.valueOf(date4MySQL);

						QtyRecpDateArray[i] = indentDate;
					}
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringQtyRecpArray[i]);
					QtyRecpArray[i] = val;
				}
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
					unitRateArray[i] = val;
				}
				int length = srNo.length;
				int idArrayLength = itemIdArray.length;
				for (int i = 0; i < length; i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();

					storeIndentTObj.setSerialNo(srNo[i]);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setQtyInMmf(null);
					storeIndentTObj.setQtyInDemand(null);
					storeIndentTObj.setQtyReceived(null);

					StoreIndentM indent = new StoreIndentM();
					indent.setId(indentId);
					storeIndentTObj.setIndent(indent);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setUnitRate(unitRateArray[i]);
					storeIndentTObj.setMarketedBy(marketedByArray[i]);
					storeIndentTObj.setTotalCost(CostArray[i]);
					storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
					storeIndentTObj.setLastReceiptDate(QtyRecpDateArray[i]);

					if ((brandIdArray[i] != 0)) {
						MasStoreBrand brand = new MasStoreBrand();
						brand.setId(brandIdArray[i]);
						storeIndentTObj.setBrand(brand);
					} else {
						storeIndentTObj.setBrand(null);
					}

					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);

					storeIndentTObj.setQtyReceived(null);

					storeIndentTListForAdd.add(storeIndentTObj);
				}
			}

			masterAndDetailMap.put("storeIndentTListForUpdate",
					storeIndentTListForUpdate);
			masterAndDetailMap.put("storeIndentTListForAdd",
					storeIndentTListForAdd);
			masterAndDetailMap.put("storeIndentM", storeIndentM);
			masterAndDetailMap.put("indentId", indentId);
			masterAndDetailMap.put("pageNo", pageNo);
			boolean flag = storesHandlerService
					.updateNextIndentToSOC(masterAndDetailMap);

			pageNo++;
			if (flag) {
				if (indentId != 0) {
					map = (Map) storesHandlerService.getIndentModifyMapForSOC(
							indentId, pageNo);
				}
				if (map.get("gridIndentTList") != null)
					gridIndentTList = (List<StoreIndentT>) map
							.get("gridIndentTList");

				if (gridIndentTList.size() == 0) {
					noDetailRecords = "yes";
				}
				if ((gridIndentTList.size() != 0)
						|| (buttonName.equals("next"))) {
					jsp = MODIFY_INDENT_TO_SOC;
				}
				if ((buttonName.equals("submit"))) {
					jsp = STORES_MESSAGE_JSP;
					messageTOBeVisibleToTheUser = "Indent To soc Records Updated Successfully";
					url = "/hms/hms/stores?method=showIndentJspSOC";
				}

			} else {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "Indent To soc Records Not Updated ";
				map.put("messageType", "failure");
				url = "/hms/hms/stores?method=showIndentSOC";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("authority", authority);
		map.put("address", address);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updateNextOrSubmitIndent(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------

		// Local Variable Declaration
		StoreIndentM storeIndentM = new StoreIndentM();
		StoreIndentT storeIndentT = new StoreIndentT();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		Map map2 = new HashMap();
		String indentNo = "";
		String indentFrom = "";
		Date indentDate = null;
		String indentTo = "";
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		String indentType = "p";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "A";
		String lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int masDepartmentId = 1;
		Map infoMap = new HashMap();
		int totalRecords = 0;
		int mmfForTheYear = 0;
		int idArrayLength = 0;
		int length = 0;
		String messageTOBeVisibleToTheUser = "";
		// Grid related Variables
		int pageNo = 1;
		/** Represents Page No */
		String buttonName = "";
		/** Represents which button user clicked in JSP(Next/Submit) */
		String noDetailRecords = "no";
		/** Represents */
		String headerStored = "no";
		String url = "";
		// Method Body
		try {
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}
			if (request.getParameter(NO_DETAIL_RECORDS) != null) {
				noDetailRecords = (request.getParameter(NO_DETAIL_RECORDS));

			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));

			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(CHANGED_DATE) != null) {
				lastChgDate = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}
			masterAndDetailMap.put("pageNo", pageNo);
			masterAndDetailMap.put("lastChgDate", lastChgDate);
			masterAndDetailMap.put("userId", userId);
			masterAndDetailMap.put("lastChgTime", lastChgTime);
			masterAndDetailMap.put("indentId", indentId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (pageNo == 1) {

		} else {

			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		try {
			if (noDetailRecords.equals("no")) {
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, DETAIL_ID);
				idArrayLength = idArray.length;
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);

				length = srNo.length;
				for (int i = 0; i < length; i++) {
					if (idArrayLength > 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setId(idArray[i]);
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);
						storeIndentTObj.setStockIn(null);

						// StringBuffer output_str = new StringBuffer();
						// StringTokenizer s = new
						// StringTokenizer(qtyInMmyArray[i].toString(),".");
						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyInDemand(null);
						storeIndentTObj.setQtyReceived(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(masDepartmentId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);

						storeIndentTListForUpdate.add(storeIndentTObj);
					} else {
						if (itemIdArray[i] != 0) {
							StoreIndentT storeIndentTObj = new StoreIndentT();

							storeIndentTObj.setSerialNo(srNo[i]);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeIndentTObj.setItem(masItem);
							BigDecimal bigDecimal = new BigDecimal(
									qtyInMmyArray[i]);
							storeIndentTObj.setQtyInMmf(bigDecimal);
							storeIndentTObj.setQtyInDemand(null);
							storeIndentTObj.setQtyReceived(null);
							storeIndentTObj.setSection(null);

							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(masDepartmentId);
							StoreIndentM storeIndentM2 = new StoreIndentM();
							storeIndentM2.setId(indentId);
							storeIndentTObj.setIndent(storeIndentM2);
							BigDecimal unitRate = null;
							String brandName = "";
							int manufactureId = 0;
							String marketedBy = "";
							BigDecimal totalCost = null;
							Date lastReceiptDate = null;
							BigDecimal lastReceiptQty = null;
							storeIndentTObj.setUnitRate(unitRate);
							storeIndentTObj.setBrand(null);

							storeIndentTObj.setManufacture(null);
							storeIndentTObj.setMarketedBy(marketedBy);
							storeIndentTObj.setTotalCost(totalCost);
							storeIndentTObj.setLastReceiptDate(lastReceiptDate);
							storeIndentTObj.setLastReceiptQty(lastReceiptQty);
							storeIndentTListForAdd.add(storeIndentTObj);
						}
					}
					idArrayLength--;
				}

			} else {
				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				String qtyInMmyArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, QTY_IN_MMF);
				length = srNo.length;
				for (int i = 0; i < length; i++) {
					if (itemIdArray[i] != 0) {
						StoreIndentT storeIndentTObj = new StoreIndentT();
						storeIndentTObj.setSerialNo(srNo[i]);
						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeIndentTObj.setItem(masItem);

						storeIndentTObj.setStockIn(null);
						BigDecimal bigDecimal = new BigDecimal(qtyInMmyArray[i]);
						storeIndentTObj.setQtyInMmf(bigDecimal);
						storeIndentTObj.setQtyInDemand(null);
						storeIndentTObj.setQtyReceived(null);
						storeIndentTObj.setSection(null);

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(masDepartmentId);
						StoreIndentM storeIndentM2 = new StoreIndentM();
						storeIndentM2.setId(indentId);
						storeIndentTObj.setIndent(storeIndentM2);
						BigDecimal unitRate = null;
						String brandName = "";
						int manufactureId = 0;
						String marketedBy = "";
						BigDecimal totalCost = null;
						Date lastReceiptDate = null;
						BigDecimal lastReceiptQty = null;

						storeIndentTObj.setUnitRate(unitRate);
						storeIndentTObj.setBrand(null);

						storeIndentTObj.setManufacture(null);
						storeIndentTObj.setMarketedBy(marketedBy);
						storeIndentTObj.setTotalCost(totalCost);
						storeIndentTObj.setLastReceiptDate(lastReceiptDate);
						storeIndentTObj.setLastReceiptQty(lastReceiptQty);
						storeIndentTListForAdd.add(storeIndentTObj);
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
			e.printStackTrace();
		}
		masterAndDetailMap.put("storeIndentTListForUpdate",
				storeIndentTListForUpdate);
		masterAndDetailMap
				.put("storeIndentTListForAdd", storeIndentTListForAdd);
		boolean flag = storesHandlerService
				.updateNextIndent(masterAndDetailMap);

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		if (session.getAttribute("itemList") != null) {
			itemList = (List<MasStoreItem>) session.getAttribute("itemList");
		}

		infoMap.put("pageNo", pageNo);
		infoMap.put("maxIndentNo", indentNo);
		infoMap.put("indentId", indentId);

		pageNo++;
		if (flag) {
			if (indentId != 0) {
				map = (Map) storesHandlerService.getIndentModifyMap(indentId,
						pageNo);

			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreIndentT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				jsp = INDENT_MODIFY;
			}
			if ((buttonName.equals("submit"))) {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "MMf Indent  Records Updated Successfully";
				url = "/hms/hms/stores?method=showIndentJsp";
			}

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "MMf Indent  Records Not Updated Successfully";
			url = "/hms/hms/stores?method=showIndentJsp";
		}
		itemList = storesHandlerService.getItemList();
		map.put("itemList", itemList);
		jsp += ".jsp";
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("indentId", indentId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		return new ModelAndView("index", "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent To Depot.
	 * It is used for two operations(Next,Submit) based on the flag ie.
	 * buttonFlag
	 */
	public ModelAndView addNextOrSubmitIndentToDepot(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "d";
		int departmentId = 1;
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String pacForeignAdd = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}
			if (request.getParameter(AUTHORITY) != null) {
				authority = (request.getParameter(AUTHORITY));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

		} catch (Exception e) {
			e.printStackTrace();
			e.printStackTrace();
		}
		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(supplyDepot);
				storeIndentM.setSuppliedBy(masStoreSupplier);
				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(sectionId);
				storeIndentM.setSection(masStoreSection);
				storeIndentM.setNrs(nrs);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setStatus("o");
				storeIndentM.setIndentOption(indentOption);

				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(pacForeignAdd);
				storeIndentM.setAuthority(authority);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);
				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setImported("n");
				storeIndentM.setPatientDetails(address);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int departmentArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, DEPARTMENT_ID_TEMP);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			String qtyInHandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_HAND);
			String qtyInMmfStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_MMF);
			String qtyDemandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_DEMAND_TEMP);
			BigDecimal[] qtyInHandArray = new BigDecimal[10];
			BigDecimal[] qtyDemandArray = new BigDecimal[10];
			BigDecimal[] qtyInMmfArray = new BigDecimal[10];
			int xxLegnt = qtyInHandStringArray.length;

			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInMmfStringArray[i]);
				qtyInMmfArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyDemandStringArray[i]);
				qtyDemandArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
				qtyInHandArray[i] = val;
			}

			if (buttonName.equals("next")) {
				length = 8;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < length; i++) {

				if (itemIdArray[i] != 0) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);

					storeIndentTObj.setQtyInMmf(qtyInMmfArray[i]);
					storeIndentTObj.setQtyInDemand(qtyDemandArray[i]);
					storeIndentTObj.setQtyReceived(null);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setUnitRate(unitRate);
					storeIndentTObj.setBrand(null);
					MasManufacturer manufacturer = new MasManufacturer();
					manufacturer.setId(manufactureId);
					storeIndentTObj.setManufacture(manufacturer);
					storeIndentTObj.setMarketedBy(marketedBy);
					storeIndentTObj.setTotalCost(totalCost);
					storeIndentTObj.setLastReceiptDate(lastReceiptDate);
					storeIndentTObj.setLastReceiptQty(lastReceiptQty);
					storeIndentTlist.add(storeIndentTObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			dataMap.put("storeIndentM", storeIndentM);
			dataMap.put("storeIndentTlist", storeIndentTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("indentId", indentId);
			dataMap.put("indentNo", indentNo);
			dataMap.put("deptId", deptId);
			map = (Map) storesHandlerService
					.addNextOrSubmitIndentToDepot(dataMap);
			if (map.get("indentId") != null)
				indentId = Integer.parseInt("" + map.get("indentId"));

			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = "Indent To Depot Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Indent To Depot Records are Not Added";
			map.put("messageType", "failure");
		}
		if (buttonName.equals("next")) {
			jsp = INDENT_TO_DEPOT_JSP;
		} else {
			jsp = STORES_MESSAGE_JSP;
			url = "/hms/hms/stores?method=showIndentJspDepot";
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("indentNo", indentNo);
		map.put(" indentFrom", indentFrom);
		map.put("indentDate", indentDate);
		map.put("supplyDepot", supplyDepot);
		map.put("sectionId", sectionId);
		map.put("indentOption", indentOption);
		map.put("nrs", nrs);
		map.put("authority", authority);
		map.put("address", address);
		map.put("indentOption", indentOption);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getBrandListForSOCModify(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int itemId = 0;
		int brandId = 0;
		int manuId = 0;
		int detailId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt(request.getParameter("itemId"));
			}
			if (request.getParameter("brandId") != null) {
				brandId = Integer.parseInt(request.getParameter("brandId"));
			}
			if (request.getParameter("manuId") != null) {
				manuId = Integer.parseInt(request.getParameter("manuId"));
			}
			if (request.getParameter("detailId") != null) {
				detailId = Integer.parseInt(request.getParameter("detailId"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map = (Map) storesHandlerService.getBrandListForSOC(itemId, detailId);
		jsp = "modifyWindow";
		map.put("contentJsp", jsp);
		map.put("brandId", brandId);
		map.put("manuId", manuId);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * This method is used adding Header and Detail records to Indent To SOC. It
	 * is used for two operations(Next,Submit) based on the flag ie. buttonFlag
	 */

	public ModelAndView getBrandListForSOC(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int itemId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		if (request.getParameter("itemId") != null) {
			itemId = Integer.parseInt(request.getParameter("itemId"));
		}
		map = (Map) storesHandlerService.getBrandListForSOC(itemId);
		jsp = "window";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIndentToSOC(HttpServletRequest request,
			HttpServletResponse response) {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		StoreIndentT storeIndentT = new StoreIndentT();
		String indentFrom = "";
		@SuppressWarnings("unused")
		Date indentDate = null;
		int supplyDepot = 0;
		@SuppressWarnings("unused")
		int sectionId = 12;
		String nrs = "";
		int rows = 0;
		@SuppressWarnings("unused")
		String indentType = "s";
		String encodedBy = "";
		Date encodedDate = null;
		String lastChgBy = "";
		@SuppressWarnings("unused")
		Date lastChgDate = null;
		String lastChgTime = "";
		String indentOption = "";
		String patientDetails = "";
		String justificationNiv = "";
		String pacJustification = "";
		String authority = "";
		String buttonName = "";
		int indentId = 0;
		int serialNo = 0;
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;
		BigDecimal unitRate = null;
		String brandName = "";
		int manufactureId = 1;
		String marketedBy = "";
		BigDecimal totalCost = null;
		Date lastReceiptDate = null;
		BigDecimal lastReceiptQty = null;
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		int pageNo = 1;
		String url = "";
		int mmfForTheYear = 0;
		String indentNo = "";
		String address = "";
		String pacSpecific = "";
		String clinicalTrailReq = "";
		String dateOfLastReciept = "";
		String justification = "";
		BigDecimal qty = null;
		BigDecimal cost = null;
		int duration = 0;
		String durationType = "";
		int days = 0;
		int dose = 0;
		String course = "";
		String clinicalTrail = "";
		// New fields
		String PvmsAlreadyPrescribed = "";
		int itemReqForDept = 0;
		String pvmsAlreadyPrescribed = "";
		int itemReqDept = 0;
		String pacEqpt = "";

		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}

			if (request.getParameter(CHANGED_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(CHANGED_DATE)));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(CHANGED_BY) != null) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(INDENT_NO) != null) {
				indentNo = (request.getParameter(INDENT_NO));
			}
			if (request.getParameter(TYPE_OF_INDENT) != null) {
				indentOption = (request.getParameter(TYPE_OF_INDENT));
			}
			if (request.getParameter(INDENT_FROM) != null) {
				indentFrom = (request.getParameter(INDENT_FROM));
			}
			if (request.getParameter(SUPPLY_DEPOT) != null) {
				supplyDepot = Integer.parseInt(request
						.getParameter(SUPPLY_DEPOT));
			}
			if (request.getParameter(INDENT_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(request.getParameter(INDENT_DATE)));
				indentDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (request.getParameter(NRS) != null) {
				nrs = (request.getParameter(NRS));
			}
			if (request.getParameter(SECTION_ID) != null) {
				sectionId = Integer.parseInt(""
						+ request.getParameter(SECTION_ID));
			}

			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				itemReqDept = Integer.parseInt((request
						.getParameter(DEPARTMENT_ID_TEMP)));
			}
			if (request.getParameter(ADDRESS) != null) {
				address = (request.getParameter(ADDRESS));
			}

			if (request.getParameter(CLINICAL_TRAIL_REQ) != null) {
				clinicalTrailReq = ((request.getParameter(CLINICAL_TRAIL_REQ)));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				PvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}

			if (request.getParameter(JUSTIFICATION) != null) {
				justification = (request.getParameter(JUSTIFICATION));
			}
			if (request.getParameter(QTY) != null) {
				qty = new BigDecimal(request.getParameter(QTY));
			}
			if (request.getParameter(COST) != null) {
				cost = new BigDecimal(request.getParameter(COST));
			}
			if (request.getParameter(DURATION) != null) {
				duration = Integer.parseInt((request.getParameter(DURATION)));
			}
			if (request.getParameter(DURATION_TYPE) != null) {
				durationType = (request.getParameter(DURATION_TYPE));
			}
			if (request.getParameter(DAYS) != null) {
				days = Integer.parseInt((request.getParameter(DAYS)));
			}
			if (request.getParameter(COURSE) != null) {
				course = (request.getParameter(COURSE));
			}
			if (request.getParameter(DOSE) != null) {
				dose = Integer.parseInt((request.getParameter(DOSE)));
			}
			if (request.getParameter(PAC_SPECIFIC) != null) {
				pacSpecific = (request.getParameter(PAC_SPECIFIC));
			}
			if (request.getParameter(DETAIL_OF_PATIENT) != null) {
				patientDetails = (request.getParameter(DETAIL_OF_PATIENT));
			}
			if (request.getParameter(JUSTIFICATION_NIV) != null) {
				justificationNiv = (request.getParameter(JUSTIFICATION_NIV));
			}
			if (request.getParameter(PAC_JUSTIFICATION) != null) {
				pacJustification = (request.getParameter(PAC_JUSTIFICATION));
			}
			if (request.getParameter(PVMS_ALREADY_PRESCRIBED) != null) {
				pvmsAlreadyPrescribed = (request
						.getParameter(PVMS_ALREADY_PRESCRIBED));
			}
			if (request.getParameter(PAC) != null) {
				pacEqpt = (request.getParameter(PAC));
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		String headerStored = "no";

		if (pageNo == 1) {
			try {
				storeIndentM.setIndentNo(indentNo);
				storeIndentM.setIndentDate(indentDate);
				storeIndentM.setRequiredForm(indentFrom);
				storeIndentM.setNrs(nrs);
				storeIndentM.setIndentType(indentType);
				storeIndentM.setStatus("o");
				storeIndentM.setEncodedBy(encodedBy);
				storeIndentM.setEncodedDate(indentDate);
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM.setLastChgDate(indentDate);
				storeIndentM.setLastChgTime(lastChgTime);
				storeIndentM.setIndentOption(indentOption);
				storeIndentM.setPatientDetails(patientDetails);
				storeIndentM.setJustificationNiv(justificationNiv);
				storeIndentM.setPacJustification(pacJustification);
				storeIndentM.setPacForeignAdd(null);
				storeIndentM.setAuthority(null);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM.setHospital(masHospital);

				storeIndentM.setMmfForTheYear(mmfForTheYear);
				storeIndentM.setImported("n");

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIndentM.setDepartment(masDepartment);

				MasStoreSection masStoreSection = new MasStoreSection();
				masStoreSection.setId(deptId);
				storeIndentM.setSection(masStoreSection);

				MasStoreAirForceDepot masStoreSupplier = new MasStoreAirForceDepot();
				masStoreSupplier.setId(1);
				storeIndentM.setSuppliedBy(masStoreSupplier);

				storeIndentM.setClinicalTrail(clinicalTrailReq);
				storeIndentM.setPvmsAlreadyPrescribed(pvmsAlreadyPrescribed);
				storeIndentM.setCost(cost);
				storeIndentM.setQty(qty);
				storeIndentM.setDose(dose);
				storeIndentM.setDay(days);
				storeIndentM.setCourse(course);
				storeIndentM.setDuration(duration);
				storeIndentM.setDurationType(durationType);
				storeIndentM.setJustification(justification);
				storeIndentM.setPacSpecific(pacSpecific);
				storeIndentM.setPacEqpt(pacEqpt);
				MasDepartment masDepartment2 = new MasDepartment();
				masDepartment2.setId(itemReqDept);
				storeIndentM.setItemReqDept(masDepartment2);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>(10);
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID);
			int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, BRAND_ID);
			String marketedByArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, MARKETED_BY);
			int manuArray[] = JKTRequestUtils.getRequiredIntParameters(request,
					MANUFACTURER_ID);
			String qtyInHandStringArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, QTY_IN_HAND);
			String StringUnitRateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, UNIT_RATE);

			String StringTotalCostArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, TOTAL_COST);
			String StringQtyRecpArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, LAST_RECP_QTY);
			String StringQtyRecpDateArray[] = JKTRequestUtils
					.getRequiredStringParameters(request, LAST_RECP_DATE);

			BigDecimal[] qtyInHandArray = new BigDecimal[10];
			BigDecimal[] unitRateArray = new BigDecimal[10];
			BigDecimal[] CostArray = new BigDecimal[10];
			BigDecimal[] QtyRecpArray = new BigDecimal[10];
			Date[] QtyRecpDateArray = new Date[10];

			int xxLegnt = itemIdArray.length;

			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(qtyInHandStringArray[i]);
				qtyInHandArray[i] = val;
			}

			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
				QtyRecpArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringTotalCostArray[i]);
				CostArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				if (!StringQtyRecpDateArray[i].equals("0")) {
					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(StringQtyRecpDateArray[i]));
					indentDate = java.sql.Date.valueOf(date4MySQL);

					QtyRecpDateArray[i] = indentDate;
				}
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringQtyRecpArray[i]);
				QtyRecpArray[i] = val;
			}
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(StringUnitRateArray[i]);
				unitRateArray[i] = val;
			}

			if (buttonName.equals("next")) {
				length = 8;
			} else {
				length = noOfRows;
			}
			for (int i = 0; i < 8; i++) {

				if ((itemIdArray[i] != 0)) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj.setSerialNo(srNo[i]);
					storeIndentTObj.setStockIn(qtyInHandArray[i]);
					storeIndentTObj.setQtyInMmf(null);
					storeIndentTObj.setQtyInDemand(null);
					storeIndentTObj.setQtyReceived(null);

					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(itemIdArray[i]);
					storeIndentTObj.setItem(masItem);

					storeIndentTObj.setSection(null);
					storeIndentTObj.setUnitRate(unitRateArray[i]);
					storeIndentTObj.setMarketedBy(marketedByArray[i]);
					storeIndentTObj.setTotalCost(CostArray[i]);
					storeIndentTObj.setLastReceiptQty(QtyRecpArray[i]);
					storeIndentTObj.setLastReceiptDate(QtyRecpDateArray[i]);

					if ((brandIdArray[i] != 0)) {
						MasStoreBrand brand = new MasStoreBrand();
						brand.setId(brandIdArray[i]);
						storeIndentTObj.setBrand(brand);
					} else {
						storeIndentTObj.setBrand(null);
					}

					MasManufacturer manufacturer = new MasManufacturer();
					if (manuArray[i] != 0) {
						manufacturer.setId(manufactureId);
						storeIndentTObj.setManufacture(manufacturer);
					} else {
						storeIndentTObj.setManufacture(null);
					}
					storeIndentTObj.setQtyReceived(null);

					storeIndentTlist.add(storeIndentTObj);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			dataMap.put("storeIndentM", storeIndentM);
			dataMap.put("storeIndentTlist", storeIndentTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("indentId", indentId);
			dataMap.put("indentNo", indentNo);
			dataMap.put("deptId", deptId);
			map = (Map) storesHandlerService
					.addNextOrSubmitIndentToSOC(dataMap);
			if (map.get("indentId") != null)
				indentId = Integer.parseInt("" + map.get("indentId"));
			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = " Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = " Records Not Added ";
			map.put("messageType", "failure");
		}
		if (buttonName.equals("next")) {
			jsp = INDENT_TO_SOC;
		} else {
			jsp = STORES_MESSAGE_JSP;
			url = "/hms/hms/stores?method=showIndentJspSOC";
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		itemList = storesHandlerService.getItemList();
		map.put("url", url);
		map.put("maxIndentNo", indentNo);
		map.put("patientDetails", patientDetails);
		map.put("itemReqDept", itemReqDept);
		map.put("pacEqpt", pacEqpt);
		map.put("pacJustification", pacJustification);
		map.put("dose", dose);
		map.put("days", days);
		map.put("course", course);
		map.put("duration", duration);
		map.put("durationType", durationType);
		map.put("PvmsAlreadyPrescribed", PvmsAlreadyPrescribed);
		map.put("justificationNiv", justificationNiv);
		map.put("clinicalTrailReq", clinicalTrailReq);

		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("itemList", itemList);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public void fillItemsForIndentToDepot(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToDepot(dataMap);
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();

				sb.append("<item>");
				sb.append("<id>" + object[0] + "</id>");
				sb.append("<pvms>" + object[1] + "</pvms>");
				if ((object[6] == null) || (object[6].equals("")))
					sb.append("<oldPvms>" + 0 + "</oldPvms>");
				else
					sb.append("<oldPvms>" + object[6] + "</oldPvms>");
				sb.append("<au>" + object[8] + "</au>");
				if (object[4] == null)
					sb.append("<stock>" + 0 + "</stock>");
				else
					sb.append("<stock>" + new BigDecimal("" + object[4])
							+ "</stock>");
				if (object[5] == null)
					sb.append("<qtyInMMF>" + 0 + "</qtyInMMF>");
				else
					sb.append("<qtyInMMF>" + new BigDecimal("" + object[5])
							+ "</qtyInMMF>");

				if (object[9] == null)
					sb.append("<section>" + 0 + "</section>");
				else
					sb.append("<section>" + object[9] + "</section>");
				sb.append("</item>");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIndentToDepot(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int sectionId = 0;
		int indentId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("section") != null) {
				sectionId = Integer.parseInt(""
						+ (request.getParameter("section")));
			}
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt(""
						+ (request.getParameter("indentId")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("sectionId", sectionId);
			dataMap.put("indentId", indentId);

			map = storesHandlerService.getItemListForIndentToDepot(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	// ----------------- End of Indent-------------------------

	// -------------------------------Start of Issue To Dispensary
	// (CIV)-------------------------

	public ModelAndView adjustLoanOut(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		String deptType = "";
		if (session.getAttribute("deptType") != null)
			deptType = (String) session.getAttribute("deptType");

		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		String messageTOBeVisibleToTheUser = "";
		int issueMId = 0;
		int toStoreId = 0;
		int requestBy = 0;
		int approvedBy = 0;
		int issuedBy = 0;
		String issueNo = "";
		String successfullyAdded = "n";
		String url = "";
		String messageType = "";

		if (request.getParameter(ISSUE_ID) != null) {
			issueMId = Integer.parseInt(request.getParameter(ISSUE_ID));
		}
		if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
			toStoreId = Integer.parseInt(request
					.getParameter(DEPARTMENT_ID_TEMP));
		}
		if (request.getParameter(REQUEST_BY) != null) {
			requestBy = Integer.parseInt(request.getParameter(REQUEST_BY));
		}
		if (request.getParameter(APPROVED_BY) != null) {
			approvedBy = Integer.parseInt(request.getParameter(APPROVED_BY));
		}
		if (request.getParameter(ISSUED_BY) != null) {
			issuedBy = Integer.parseInt(request.getParameter(ISSUED_BY));
		}
		if (request.getParameter(ISSUE_NO) != null) {
			issueNo = request.getParameter(ISSUE_NO);
		}
		jsp = "storesMessageForLoanOut";
		dataMap.put("requestBy", requestBy);
		dataMap.put("approvedBy", approvedBy);
		dataMap.put("issuedBy", issuedBy);
		dataMap.put("issueMId", issueMId);
		dataMap.put("toStoreId", toStoreId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptType", deptType);
		dataMap.put("demandNo", box.get(RequestConstants.REQUEST_NO));
		map = storesHandlerService.adjustLoanOut(dataMap);
		if (map.get("successfullyAdded") != null) {
			successfullyAdded = ("" + map.get("successfullyAdded"));
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Adjusted Successfully";
			messageType = "success";
			url = "stores?method=searchInternalIndentDetails";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Adjusted ";
			messageType = "failure";
			url = "stores?method=searchInternalIndentDetails";
		}
		url = "stores?method=searchInternalIndentDetails";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("url", url);
		map.put("box", box);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView deleteIssueCivItems(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		box.put("deptId", deptId);
		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE;
		map = storesHandlerService.deleteIssueCivItems(box);
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showDeleteIsuueCiv(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		box.put("deptId", deptId);
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE;
		map = storesHandlerService.showDeleteIsuueCiv(box);
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView openDeletePopupForIssueciv(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.openDeletePopupForIssueciv(dataMap);
		jsp = SHOW_DELETE_POPUP_FOR_ISSUE;

		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * Methods starting for CIV Issue changes by vikas
	 */
	public ModelAndView showIssueDispensaryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// - Retriving User Name,Hospital Id,Department Id from Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		String deptType = "";
		if (session.getAttribute("deptType") != null) {
			deptType = (String) session.getAttribute("deptType");
		}
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("deptType", deptType);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		map = storesHandlerService.showIssueDispensaryJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		// jsp = "departmentIssueTemp";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	// -----------------Code ADDed on 20/04/09 by vikas----------------------

	public ModelAndView getIssueList(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> dataMap = new HashMap<String, Object>();
		int toDeptId = 0;
		if ((request.getParameter("toDeptId") != null)
				&& (request.getParameter("toDeptId") != "")) {
			toDeptId = Integer.parseInt(request.getParameter("toDeptId"));
		}
		jsp = RequestConstants.ISSUE_LIST_IN_AJAX_RESPONSE;
		dataMap.put("toDeptId", toDeptId);

		map = storesHandlerService.getIssueList(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	// -----------------Code ADDed on 20/04/09 by vikas----------------------
	@SuppressWarnings("unchecked")
	public ModelAndView getDemandList(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)
				&& (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != "")) {
			dispenceryId = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.DEMAND_LIST_AJAX_JSP;
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.getDemandList(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchIssueCiv(HttpServletRequest request,
			HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		if (request.getParameter(RequestConstants.ISSUE_UNIT_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_UNIT_ID));
		}

		jsp = RequestConstants.MODIFY_ISSUE_CIV;
		dataMap.put("issueId", issueId);
		box.put("deptId", deptId);
		map = storesHandlerService.searchIssueCiv(box);
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchInternalIndentDetails(HttpServletRequest request,
			HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		String deptType = "";
		if (session.getAttribute("deptType") != null) {
			deptType = (String) session.getAttribute("deptType");
		}
		int userId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
		}

		// --------------------------------------------------------------------------------
		int internalIndentId = 0;
		Box box = HMSUtil.getBox(request);
		String issueNo = "";

		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> pageMap = new HashMap<String, Object>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		// Header Information
		int approvedBy = 0;
		int requestedBy = 0;
		int issuedBy = 0;
		int issueId = 0;
		String refNo = "";
		int despenceryName = 0;
		String date = "";
		String time = "";
		String adjustLoanButtonToShow = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		String messageTOBeVisibleToTheUser = "";
		String messageType = "failure";
		try {

			if (request.getParameter(REQUEST_NO) != null) {
				internalIndentId = Integer.parseInt(request
						.getParameter(REQUEST_NO));

			}
			if (request.getParameter(ISSUE_NO) != null) {
				issueNo = request.getParameter(ISSUE_NO);
			}

			if (request.getParameter(APPROVED_BY) != null) {
				approvedBy = Integer.parseInt(""
						+ (request.getParameter(APPROVED_BY)));
			}
			if (request.getParameter(REQUEST_BY) != null) {
				requestedBy = Integer.parseInt(""
						+ request.getParameter(REQUEST_BY));
			}
			if (request.getParameter(ISSUED_BY) != null) {
				issuedBy = Integer.parseInt(""
						+ request.getParameter(ISSUED_BY));
			}
			if (request.getParameter(REFERENCE) != null) {
				refNo = (request.getParameter(REFERENCE));
			}
			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				despenceryName = Integer.parseInt(""
						+ request.getParameter(DEPARTMENT_ID_TEMP));
			}

			if (request.getParameter("issueId") != null) {
				issueId = Integer
						.parseInt("" + request.getParameter("issueId"));
			}
			dataMap.put("issueId", issueId);
			dataMap.put("internalIndentId", internalIndentId);
			dataMap.put("issueNo", issueNo);
			dataMap.put("approvedBy", approvedBy);
			dataMap.put("requestedBy", requestedBy);
			dataMap.put("issuedBy", issuedBy);
			dataMap.put("refNo", refNo);
			dataMap.put("despenceryName", despenceryName);
			dataMap.put("date", date);
			dataMap.put("time", time);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("deptType", deptType);
			dataMap.put("userId", userId);
			tempMap = storesHandlerService.searchInternalIndentDetails(dataMap);
			if (tempMap.get("issueId") != null) {
				issueId = Integer.parseInt("" + tempMap.get("issueId"));
			}
			if (tempMap.get("storeInternalIndentMList") != null) {
				storeInternalIndentMList = (List<StoreInternalIndentM>) tempMap
						.get("storeInternalIndentMList");
			}
			if (tempMap.get("adjustLoanButtonToShow") != null) {
				adjustLoanButtonToShow = (String) tempMap
						.get("adjustLoanButtonToShow");
			}
			int pageNo = 1;
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo);
			pageMap.put("deptId", deptId);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			if (tempMap.get("messageTOBeVisibleToTheUser") != null)
				map.put("messageTOBeVisibleToTheUser",
						"" + tempMap.get("messageTOBeVisibleToTheUser"));
			if (tempMap.get("messageType") != null)
				map.put("messageType", "" + tempMap.get("messageType"));
			// +tempMap.get("messageTOBeVisibleToTheUser"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		jsp = jsp + ".jsp";
		map.put("adjustLoanButtonToShow", adjustLoanButtonToShow);
		map.put("contentJsp", jsp);
		map.put("internalIndentId", internalIndentId);
		map.put("max", issueNo);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView addNextOrSubmitIssue(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		// Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "";
		String messageTOBeVisibleToTheUser = "";
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_ID));
		}

		if (request.getParameter("buttonName") != null) {
			buttonName = (request.getParameter("buttonName"));
		}
		if (buttonName.equals("next")) {
			if (request.getParameter(RequestConstants.PAGE_NO) != null) {
				pageNo = Integer.parseInt(request
						.getParameter(RequestConstants.PAGE_NO));

			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo + 1);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			pageMap.put("flag", "addNext");

			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
			map.put("pageNo", pageNo + 1);

			if (map.get("issueTList") != null) {
				if (((List) map.get("issueTList")).size() == 0) {
					jsp = STORES_MESSAGE_JSP;
					messageTOBeVisibleToTheUser = "Issued Successfully";
					map.put("url", "stores?method=searchIssueCiv&issueUnit="
							+ issueId);
					map.put("messageTOBeVisibleToTheUser",
							messageTOBeVisibleToTheUser);

				}
			}
		} else if (buttonName.equals("goToPage")) {

			if (request.getParameter("ValueOfPage") != null) {
				pageNo = Integer.parseInt(request.getParameter("ValueOfPage"));
			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
			map.put("pageNo", pageNo);
			if (map.get("issueTList") != null) {
				if (((List) map.get("issueTList")).size() == 0) {
					jsp = STORES_MESSAGE_JSP;
					messageTOBeVisibleToTheUser = "Issued Successfully";
					map.put("url", "stores?method=searchIssueCiv&issueUnit="
							+ issueId);
					map.put("messageTOBeVisibleToTheUser",
							messageTOBeVisibleToTheUser);

				}
			}
		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Issued Successfully";
			// map.put("url", "stores?method=searchIssueCiv&issueUnit=" +
			// issueId);
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		}
		jsp = jsp + ".jsp";
		map.put("issueId", issueId);
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView openItemBrandWindowJsp(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int itemId = 0;
		String qtyRequested = "";
		int rowVal = 0;
		int issuedItemId = 0;
		int issueId = 0;
		int detailId = 0;
		String issueNo = "";
		String nomenclature = "";
		String pvms = "";
		BigDecimal loanOutQty = null;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}

		if (request.getParameter(RequestConstants.QTY_IN_REQUEST) != null) {
			qtyRequested = (request
					.getParameter(RequestConstants.QTY_IN_REQUEST));
		}
		if (request.getParameter("issueNo") != null) {
			issueNo = (request.getParameter("issueNo"));
		}

		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		if (request.getParameter("issuedItemId") != null
				&& !(request.getParameter("issuedItemId")).equals("")) {
			issuedItemId = Integer.parseInt(request
					.getParameter("issuedItemId"));
		}
		if (request.getParameter("issueId") != null
				&& !(request.getParameter("issueId")).equals("")) {
			issueId = Integer.parseInt(request.getParameter("issueId"));
		}
		if (request.getParameter("detailId") != null
				&& !(request.getParameter("detailId")).equals("")) {
			detailId = Integer.parseInt(request.getParameter("detailId"));
		}
		if (request.getParameter("nomenclature") != null) {
			nomenclature = request.getParameter("nomenclature");

		}
		if (request.getParameter("pvms") != null) {
			pvms = request.getParameter("pvms");
		}
		if (request.getParameter("loanOutQty") != null
				&& request.getParameter("loanOutQty") != "") {
			loanOutQty = new BigDecimal(request.getParameter("loanOutQty"));

		}
		String qtyIssued = "";
		if (request.getParameter("qtyIssued") != null
				&& request.getParameter("qtyIssued") != "") {
			qtyIssued = (request.getParameter("qtyIssued"));

		}
		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		dataMap.put("issueNo", issueNo);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("qtyRequested", qtyRequested);
		map.put("qtyIssued", qtyIssued);
		map.put("itemId", itemId);
		map.put("issuedItemId", issuedItemId);
		map.put("rowVal", rowVal);
		map.put("issueId", issueId);
		map.put("detailId", detailId);
		map.put("issueNo", issueNo);
		map.put("nomenclature", nomenclature);
		map.put("pvms", pvms);
		map.put("loanOutQty", loanOutQty);
		map.put("flag", request.getParameter("flag"));
		map.put("srNo", request.getParameter("srNo"));
		if (request.getParameter("indentId") != null
				&& request.getParameter("indentId") != ""
				&& !request.getParameter("indentId").equals("undefined")) {
			map.put("indentId",
					Integer.parseInt(request.getParameter("indentId")));
		}
		map.put("indentDtId", request.getParameter("indentDtId"));
		map.put("reqDate", request.getParameter("reqDate"));
		if (request.getParameter("flag").equals("withIndent")) {
			jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP;
		} else {
			// jsp = "itemIssuePopup";
			jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP;
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addBrandDetails(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List costPriceList = new ArrayList();
		List batchNoList = new ArrayList();
		BigDecimal[] qtyIssuedArray = new BigDecimal[100];
		BigDecimal[] qtyRequestedArray = new BigDecimal[100];
		BigDecimal[] costPriceArray = new BigDecimal[100];
		Date[] expDateArray = new Date[100];
		Date expDate = new Date();
		StoreIssueM storeIssueM = new StoreIssueM();

		String requestType = "";
		String issueType = "";
		String docType = "";
		String issueNo = "";
		Date issueDate = new Date();
		int toStore = 0;
		int toDepot = 0;
		String requestNo = "";
		Date requestDate = new Date();
		int requestedBy = 0;
		int issuedBy = 0;
		int approvedBy = 0;
		StoreIssueM issueM = new StoreIssueM();
		int issueId = 0;
		int itemId = 0;
		int issuedItemId = 0;
		String docNo = "";
		int rowVal = 0;
		Map dataMap = new HashMap();
		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		String qtyInRequest = "";
		int detailId = 0;
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt((request
					.getParameter(RequestConstants.ISSUE_ID)));
		}
		if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
			issueNo = ((request.getParameter(RequestConstants.ISSUE_NO)));
		}
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt((request
					.getParameter(RequestConstants.ITEM_ID)));
		}
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issuedItemId = Integer.parseInt((request
					.getParameter(RequestConstants.ISSUE_ID)));
		}
		if (request.getParameter(RequestConstants.QTY_IN_REQUEST) != null) {
			qtyInRequest = ((request
					.getParameter(RequestConstants.QTY_IN_REQUEST)));
		}
		if (request.getParameter(RequestConstants.DETAIL_ID) != null) {
			detailId = Integer.parseInt((request
					.getParameter(RequestConstants.DETAIL_ID)));
		}
		if (request.getParameter("rowVal") != null
				&& !request.getParameter("rowVal").equals("")) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		// issueId = (int) storesHandlerService.getIssueId(issueNo);
		if (issueId == 0) {
			try {
				if (request.getParameter(RequestConstants.REQUEST_TYPE) != null) {
					requestType = (request
							.getParameter(RequestConstants.REQUEST_TYPE));
				}
				if (request.getParameter(RequestConstants.ISSUE_TYPE) != null) {
					issueType = (request
							.getParameter(RequestConstants.ISSUE_TYPE));
				}

				if (request.getParameter(RequestConstants.DOC_TYPE) != null) {
					docType = (request.getParameter(RequestConstants.DOC_TYPE));
				}
				if (request.getParameter(RequestConstants.DOC_NO) != null) {
					docNo = (request.getParameter(RequestConstants.DOC_NO));
				}
				if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
					issueNo = (request.getParameter(RequestConstants.ISSUE_NO));
				}
				if (request.getParameter(RequestConstants.ISSUE_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut
							.format(formatterIn.parse(request
									.getParameter(RequestConstants.ISSUE_DATE)));
					issueDate = java.sql.Date.valueOf(date4MySQL);
				}
				if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
					toStore = Integer.parseInt(request
							.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
				}
				if (request.getParameter(RequestConstants.DEPARTMENT_INDENT_ID) != null) {
					toDepot = Integer
							.parseInt(request
									.getParameter(RequestConstants.DEPARTMENT_INDENT_ID));
				}
				if (request.getParameter(RequestConstants.REQUEST_NO) != null) {
					requestNo = (request
							.getParameter(RequestConstants.REQUEST_NO));
				}
				if (request.getParameter(RequestConstants.REQUEST_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut
							.format(formatterIn.parse(request
									.getParameter(RequestConstants.REQUEST_DATE)));
					requestDate = java.sql.Date.valueOf(date4MySQL);
				}
				if (request.getParameter(RequestConstants.REQUEST_BY) != null) {
					requestedBy = Integer.parseInt(request
							.getParameter(RequestConstants.REQUEST_BY));
				}
				if (request.getParameter(RequestConstants.ISSUED_BY) != null) {
					issuedBy = Integer.parseInt(request
							.getParameter(RequestConstants.ISSUED_BY));
				}
				if (request.getParameter(RequestConstants.APPROVED_BY) != null) {
					approvedBy = Integer.parseInt(request
							.getParameter(RequestConstants.APPROVED_BY));
				}

				issueM.setIssueType(issueType);
				issueM.setIssueNo(issueNo);
				issueM.setIssueDate(issueDate);

				MasDepartment department = new MasDepartment();
				department.setId(deptId);
				issueM.setDepartment(department);

				StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
				storeInternalIndentM.setId(toDepot);
				issueM.setToDepot(storeInternalIndentM);

				MasDepartment department2 = new MasDepartment();
				department2.setId(toStore);
				issueM.setToStore(department2);

				MasStoreAirForceDepot airForceDepot = new MasStoreAirForceDepot();
				airForceDepot.setId(toDepot);
				issueM.setToUnit(airForceDepot);

				issueM.setRequestDate(requestDate);

				MasEmployee employee = new MasEmployee();
				employee.setId(requestedBy);
				issueM.setRequestBy(employee);

				MasEmployee employee2 = new MasEmployee();
				employee2.setId(approvedBy);
				issueM.setApprovedBy(employee2);

				MasEmployee employee3 = new MasEmployee();
				employee3.setId(issuedBy);
				issueM.setIssuedBy(employee3);
				issueM.setStatus("o");
				issueM.setDocNo(docNo);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		try {

			// int itemIssuedIdArray[] =
			// JKTRequestUtils.getRequiredIntParameters(request,
			// RequestConstants.BRAND_ID);

			String remarksArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.REMARKS);

			String batchNoArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.BATCH_NO);

			String qtyIssuedTempArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.QTY_ISSUED);

			String expDateTempArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.EXPIRY_DATE);

			String costpriceArray[] = JKTRequestUtils
					.getRequiredStringParameters(request,
							RequestConstants.COST_PRICE);

			int qtyIssuedTempArrayLength = qtyIssuedTempArray.length;
			for (int i = 0; i < qtyIssuedTempArrayLength; i++) {
				BigDecimal val = new BigDecimal(qtyIssuedTempArray[i]);
				qtyIssuedArray[i] = val;
			}

			int costPriceTempArrayLength = costpriceArray.length;

			for (int i = 0; i < costPriceTempArrayLength; i++) {
				if (!costpriceArray[i].equals("null")) {
					BigDecimal val = new BigDecimal("" + costpriceArray[i]);
					costPriceArray[i] = val;
				} else {
					BigDecimal val = new BigDecimal("0");
					costPriceArray[i] = val;
				}
			}

			int expDateTempArrayLength = expDateTempArray.length;
			for (int i = 0; i < expDateTempArrayLength; i++) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn
						.parse(expDateTempArray[i]));
				expDate = java.sql.Date.valueOf(date4MySQL);
				expDateArray[i] = expDate;
			}

			for (int i = 0; i < batchNoArray.length; i++) {

				if (!qtyIssuedArray[i].equals(new BigDecimal("0"))) {
					StoreIssueT storeIssueT = new StoreIssueT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(itemId);
					storeIssueT.setItem(masStoreItem);

					BigDecimal bigDecimal = null;
					if (qtyInRequest.equals("New")) {
						bigDecimal = new BigDecimal("0");
					} else {
						bigDecimal = new BigDecimal(qtyInRequest);
					}
					storeIssueT.setQtyRequest(bigDecimal);

					storeIssueT.setCostPrice(costPriceArray[i]);

					MasStoreItem masStoreItem2 = new MasStoreItem();
					masStoreItem2.setId(itemId);
					// storeIssueT.setItemIssued(masStoreItem2);

					storeIssueT.setBatchNo(batchNoArray[i]);
					storeIssueT.setQtyIssued(qtyIssuedArray[i]);
					if (remarksArray[i].equals("emptyString"))
						storeIssueT.setRemarks("");
					else
						storeIssueT.setRemarks(remarksArray[i]);
					storeIssueT.setExpiryDate(expDateArray[i]);

					StoreIssueM issueM2 = new StoreIssueM();
					issueM2.setId(issueId);
					storeIssueT.setIssueM(issueM2);

					/*
					 * MasStoreBrand storeBrand = new MasStoreBrand();
					 * storeBrand.setId(itemIssuedIdArray[i]);
					 * storeIssueT.setBrand(storeBrand);
					 */
					storeIssueT.setSrNo(rowVal);
					storeIssueT.setItemOrder("3");

					storeIssueTList.add(storeIssueT);

				}
				costPriceList.add(costPriceArray[i]);
				batchNoList.add(batchNoArray[i]);
			}
			dataMap.put("batchNoList", batchNoList);
			dataMap.put("costPriceList", costPriceList);
			dataMap.put("storeIssueTList", storeIssueTList);
			dataMap.put("issueId", issueId);
			dataMap.put("itemId", itemId);
			dataMap.put("detailId", detailId);
			// dataMap.put("itemIssuedIdArray", itemIssuedIdArray);
			dataMap.put("batchNoArray", batchNoArray);
			dataMap.put("rowVal", rowVal);
			dataMap.put("qtyIssuedTempArray", qtyIssuedTempArray);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issueNo", issueNo);
			dataMap.put("qtyIssuedArray", qtyIssuedArray);
			flag = storesHandlerService.addBrandDetails(dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (flag) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added Succesfully";
		}
		jsp = RequestConstants.EXIT_WINDOW;
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	public void addBrandDetailsForBarcode(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int userId = 0;
		int hospitalId = 0;
		int issueIdForBarcode = 0;

		String messageTOBeVisibleToTheUser = "";
		String qtyInRequest = "";
		int detailId = 0;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");

		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		box.put("userId", userId);
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		box.put("userName", userName);
		map = storesHandlerService.addBrandDetailsForBarcode(box);
		if (map.get("messageTOBeVisibleToTheUser") != null) {
			messageTOBeVisibleToTheUser = (String) map
					.get("messageTOBeVisibleToTheUser");
		}
		if (map.get("issueIdForBarcode") != null) {
			issueIdForBarcode = (Integer) map.get("issueIdForBarcode");
		}
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("<information>");
			sb.append("<issueIdForBarcode>" + issueIdForBarcode
					+ "</issueIdForBarcode>");
			sb.append("<message>" + messageTOBeVisibleToTheUser + "</message>");
			sb.append("</information>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ModelAndView updateNextOrSubmitIssueToCiv(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt(request
					.getParameter(RequestConstants.ISSUE_ID));
		}

		if (request.getParameter("buttonName") != null) {
			buttonName = (request.getParameter("buttonName"));

		}

		if (buttonName.equals("next")) {
			if (request.getParameter(RequestConstants.PAGE_NO) != null) {
				pageNo = Integer.parseInt(request
						.getParameter(RequestConstants.PAGE_NO));
			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo + 1);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);

			pageMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			map.put("stockList", map.get("stockList"));
			jsp = RequestConstants.MODIFY_ISSUE_CIV;
			map.put("pageNo", pageNo + 1);
			/*
			 * if (map.get("issueTList") != null) { if (((List)
			 * map.get("issueTList")).size() < 8) { List<MasStoreItem> itemList
			 * = new ArrayList<MasStoreItem>(); itemList = (List<MasStoreItem>)
			 * storesHandlerService.getItemList(); map.put("itemList",
			 * itemList); } }
			 */
		} else if (buttonName.equals("goToPage")) {
			if (request.getParameter("ValueOfPage") != null) {
				if (!request.getParameter("ValueOfPage").equals("")) {
					pageNo = Integer.parseInt(request
							.getParameter("ValueOfPage"));
				} else {
					pageNo = 1;
				}
				if (!request.getParameter("pvmsNo1").equals(""))
					pageMap.put("pvmsSearch", request.getParameter("pvmsNo1"));
			}
			pageMap.put("issueId", issueId);
			pageMap.put("pageNo", pageNo);
			pageMap.put("deptId", deptId);
			pageMap.put("userName", userName);
			pageMap.put("hospitalId", hospitalId);
			if (!box.getString("pvmsSearch").equals("")
					&& box.getString("pvmsSearch") != null) {
				pageMap.put("pvmsSearch", box.get("pvmsSearch"));
			}
			map = storesHandlerService.getIssueDetailPageByPage(pageMap);
			map.put("stockList", map.get("stockList"));
			jsp = RequestConstants.MODIFY_ISSUE_CIV;
			map.put("pageNo", pageNo);
		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Issued Successfully";
			map.put("url", "stores?method=showIssueDispensaryJsp");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		}
		jsp = jsp + ".jsp";
		if (request.getParameter(RequestConstants.REQUEST_DATE) != null) {
			map.put(RequestConstants.REQUEST_DATE,
					request.getParameter(RequestConstants.REQUEST_DATE));

		}
		if (request.getParameter(RequestConstants.ISSUE_DATE) != null) {
			map.put(RequestConstants.ISSUE_DATE,
					request.getParameter(RequestConstants.ISSUE_DATE));
		}

		map.put("issueId", issueId);
		map.put("contentJsp", jsp);

		map.put("box", box);
		return new ModelAndView("index", "map", map);
	}

	/*
	 * Methods ending for CIV Issue changes by vikas
	 */

	public ModelAndView addNextOrSubmitIssueToCiv(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int internalIndentId = 0;
		String max = "";
		int pageNo = 0;
		int listSize = 0;
		Box box = HMSUtil.getBox(request);
		if (request.getParameter(RequestConstants.REQUEST_NO) != null) {
			internalIndentId = Integer.parseInt(request
					.getParameter(RequestConstants.REQUEST_NO));
		}
		if (request.getParameter(RequestConstants.PAGE_NO) != null) {
			pageNo = Integer.parseInt(request
					.getParameter(RequestConstants.PAGE_NO));
		}
		if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
			max = (request.getParameter(RequestConstants.ISSUE_NO));
		}
		try {
			// map =
			// storesHandlerService.searchInternalIndentDetails(internalIndentId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("internalIndentId", internalIndentId);
		map.put("max", max);
		map.put("pageNo", pageNo + 1);
		map.put("listSize", listSize);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAdjustLoanOut(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		jsp = ADJUST_LOAN_OUT;
		jsp += ".jsp";
		int toStoreId = 0;
		int issueMId = 0;
		int requestBy = 0;
		int approvedBy = 0;
		int issuedBy = 0;
		int internalIndentId = 0;
		String issueNo = "";
		try {
			if (request.getParameter(DEPARTMENT_ID_TEMP) != null) {
				toStoreId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID_TEMP));
			}
			if (request.getParameter(REQUEST_BY) != null) {
				requestBy = Integer.parseInt(request.getParameter(REQUEST_BY));
			}
			if (request.getParameter(APPROVED_BY) != null) {
				approvedBy = Integer
						.parseInt(request.getParameter(APPROVED_BY));
			}
			if (request.getParameter(ISSUED_BY) != null) {
				issuedBy = Integer.parseInt(request.getParameter(ISSUED_BY));
			}

			if (request.getParameter("internalIndentId") != null) {
				internalIndentId = Integer.parseInt(request
						.getParameter("internalIndentId"));
			}
			dataMap.put("requestBy", requestBy);
			dataMap.put("approvedBy", approvedBy);
			dataMap.put("issuedBy", issuedBy);
			dataMap.put("toStoreId", toStoreId);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);

			map = storesHandlerService.getAdjustLoanOutMap(dataMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("contentJsp", jsp);
		map.put("toStoreId", toStoreId);
		map.put("requestBy", requestBy);
		map.put("approvedBy", approvedBy);
		map.put("issuedBy", issuedBy);
		map.put("internalIndentId", internalIndentId);
		map.put("box", box);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPrintIssueToDispensary(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showPrintIssueToDispensary();
		jsp = PRINT_ISSUE_TO_DISPENSARY;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printIssueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		int issue_m_id = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
			}

			parameters = storesHandlerService
					.printIssueToOtherUnits(issue_m_id);
			parameters.put("issueId", issue_m_id);
			byte[] bytes = null;
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(ISSUE_OTHER_UNITS_REPORT), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ ISSUE_OTHER_UNITS_REPORT + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			((Connection) parameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printIssueToDispensary(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		int issue_m_id = 0;
		Map parameters = new HashMap();
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issue_m_id = Integer.parseInt(request.getParameter(ISSUE_ID));
			}

			parameters = storesHandlerService.getIssuePrintMap(issue_m_id);
			parameters.put("issueId", issue_m_id);

			byte[] bytes = null;
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(ISSUE_TO_DISPENSARY_JASSPER), parameters,
					(Connection) parameters.get("conn"));

			response.setHeader("Content-Disposition", "attachment; filename="
					+ ISSUE_TO_DISPENSARY_JASSPER + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			((Connection) parameters.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView printLoanOut(HttpServletRequest request,
			HttpServletResponse response) throws JRException {

		int internalIndentId = 0;
		Map map = new HashMap();
		Map dataMap = new HashMap();
		Map newMap = new HashMap();
		Map parameterMap = new HashMap();
		try {

			if (request.getParameter("internalIndentId") != null) {
				internalIndentId = Integer.parseInt(request
						.getParameter("internalIndentId"));
			}
			dataMap.put("internalIndentId", internalIndentId);
			map = storesHandlerService.getLoanOutPrintMap(dataMap);
			parameterMap = storesHandlerService.getConnectionForReport();
			newMap.put("internalIndentId", internalIndentId);
			newMap.put("toStore", map.get("toStore"));
			newMap.put("Hosp_Name", map.get("Hosp_Name"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		HMSUtil.generateReport("loanOutReport", newMap,
				(Connection) parameterMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView printDispensaryToStoreJsp(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		String newDemandNo = "";
		// Map parameters = new HashMap();
		Map map = new HashMap();
		Map parameterMap = new HashMap();
		try {
			if (request.getParameter("newDemandNo") != null
					&& !(request.getParameter("newDemandNo").equals(""))) {
				newDemandNo = request.getParameter("newDemandNo");
			}

			// parameters = storesHandlerService.getIssueIndentMap(newDemandNo);
			parameterMap = storesHandlerService.getConnectionForReport();
			map = storesHandlerService.getIssueIndentMap(newDemandNo);

			map.put("newDemandNo", newDemandNo);
			HMSUtil.generateReport("despensaryToStoreReport", map,
					(Connection) parameterMap.get("con"), response,
					getServletContext());
			/*
			 * parameters.put("newDemandNo", newDemandNo); byte[] bytes = null;
			 * bytes = JasperRunManager.runReportToPdf(getCompiledReport(
			 * "despensaryToStoreReport"), parameters, (Connection)
			 * parameters.get("conn"));
			 * 
			 * 
			 * response.setHeader("Content-Disposition", "attachment; filename="
			 * + "despensaryToStoreReport" + ".pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream;
			 * 
			 * ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close();
			 */
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView getItemListForIssueToDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		try {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if ((request.getParameter("issueId") != null)
					|| (request.getParameter("issueId") != "")) {
				issueId = Integer.parseInt(request.getParameter("issueId"));
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("issueId", issueId);
			map = storesHandlerService.getItemListForIssueToDispensary(dataMap);
			jsp = "result";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getHinNo(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		try {
			Map<String, Object> dataMap = new HashMap<String, Object>();

			if (request.getParameter(RequestConstants.PATIENT_NAME) != null) {
				autoHint = (request.getParameter(RequestConstants.PATIENT_NAME));
			}
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.getHinNo(dataMap);
			jsp = "resultForHin";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIssueToDispensary(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("pvmsNo", pvmsNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
			if (map.get("itemList") != null) {
				itemList = (List) map.get("itemList");
			}
			StringBuffer sb = new StringBuffer();
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				if (masStoreItem.getItemConversion() != null)
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				else
					sb.append("<au>" + "NA" + "</au>");
				sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void fillItemsForIssueToDispensaryByPvmsNo(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("pvmsNo", pvmsNo);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
			if (map.get("itemList") != null) {
				itemList = (List) map.get("itemList");
			}
			StringBuffer sb = new StringBuffer();
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<nomenclature>" + masStoreItem.getNomenclature()
						+ "</nomenclature>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				if (masStoreItem.getItemConversion() != null)
					sb.append("<au>"
							+ masStoreItem.getItemConversion()
									.getPurchaseUnit().getUnitName() + "</au>");
				else
					sb.append("<au>" + "NA" + "</au>");
				sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
				sb.append("</item>");
			}

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// -------------------------------End of Issue To Dispensary
	// (CIV)----------------------------------

	// ------------------Start of Issue To Dispensary In the form of
	// LOANOUT-----------------------
	public void checkHinExistence(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String hinNo = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("hinNo") != null) {
				hinNo = (request.getParameter("hinNo"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("hinNo", hinNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.checkHinExistence(dataMap);
		if (map.get("patientList") != null) {
			patientList = (List<Patient>) map.get("patientList");
		}
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		if (patientList.size() > 0) {
			sb.append("<hinNo>" + "Yes" + "</hinNo>");
		} else {
			sb.append("<hinNo>" + "No" + "</hinNo>");
		}
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIssueToLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIssueToDispensary(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView getItemListForLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("issueId") != null) {
			issueId = Integer.parseInt((request.getParameter("issueId")));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("issueId", issueId);
		map = storesHandlerService.getItemListForIssueToDispensary(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	// This method returnd a jsp which contails item list
	// based on the MmfIndent select Condition
	public ModelAndView getItemListForLoanoutByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getItemListForLoanoutByAutocomplete(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteIssueLoanoutItems(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();

		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_LOAN_OUT;
		box.put("deptId", deptId);
		map = storesHandlerService.deleteIssueLoanoutItems(box);
		// jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDeleteIsuueLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		int departmentIdTemp = 0;
		if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
			departmentIdTemp = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_LOAN_OUT;
		box.put("deptId", deptId);
		map = storesHandlerService.showDeleteIsuueLoanout(box);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openDeletePopupForIssueLoanOut(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int departmentIdTemp = 0;
		Map dataMap = new HashMap();

		jsp = SHOW_DELETE_POPUP_FOR_ISSUE_LOAN_OUT;
		dataMap.put("deptId", deptId);
		map = storesHandlerService.openDeletePopupForIssueLoanOut(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIssueForLoanOut(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		buttonName = "" + box.get("buttonName");
		if (buttonName.equals("next")) {
			pageNo = Integer.parseInt("" + box.getInt("pageNo"));
			// map = storesHandlerService.showIssueDispensaryJsp();
			jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Issued Successfully";
			map.put("url", "stores?method=showIssueDispensaryManualJsp");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		}
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("pageNo", pageNo + 1);
		map.put("box", box);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchIssueLoanout(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int issueId = 0;
		if (request.getParameter(RequestConstants.ISSUE_UNIT_ID) != null) {
			issueId = Integer.parseInt(request.getParameter(ISSUE_UNIT_ID));
		}
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		box.put("issueId", issueId);
		box.put("deptId", deptId);
		map = storesHandlerService.searchIssueLoanout(box);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	/*
	 * ----------------------starting of methods for loan out----------------
	 */
	public ModelAndView showIssueDispensaryManualJsp(
			HttpServletRequest request, HttpServletResponse response) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.showIssueDispensaryManualJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_DISPENSARY_MANUAL_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView openItemBrandWindowJspForLoanOut(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		int itemId = 0;
		int rowVal = 0;
		int departmentId = 1;

		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_FOR_LOAN_OUT;
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addBrandDetailsForLoanOut(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		String messageTOBeVisibleToTheUser = "";
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.addBrandDetailsForLoanOut(box);
		String successfullyAdded = "n";

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = "" + map.get("successfullyAdded");
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added";
		}
		jsp = RequestConstants.EXIT_WINDOW;
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * ----------------------end of methods for loan out----------------
	 */
	// ------------------End of Issue To Dispensary In the form of
	// LOANOUT-------------------------
	// ------------------Start of Issues To Other Units on
	// Surplus(CIV)-----------------------
	public ModelAndView deleteIssueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();

		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_TO_OTHER_UNITS;
		box.put("deptId", deptId);
		map = storesHandlerService.deleteIssueToOtherUnitsItems(box);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDeleteIsuueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		int departmentIdTemp = 1;
		if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
			departmentIdTemp = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_TO_OTHER_UNITS;
		box.put("deptId", deptId);
		map = storesHandlerService.showDeleteIsuueToOtherUnits(box);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openDeletePopupForIssueToOtherUnits(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		int departmentIdTemp = 1;
		Map dataMap = new HashMap();
		if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
			departmentIdTemp = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		jsp = SHOW_DELETE_POPUP_FOR_ISSUE_TO_OTHER_UNITS;
		dataMap.put("departmentIdTemp", departmentIdTemp);
		map = storesHandlerService.openDeletePopupForIssueToOtherUnits(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIssueToOtherUnits(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userName", userName);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		buttonName = "" + box.get("buttonName");
		if (buttonName.equals("next")) {
			pageNo = Integer.parseInt("" + box.getInt("pageNo"));
			map = storesHandlerService.showIssueToOtherUnitsJsp(dataMap);
			jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Issued Successfully";
			map.put("url", "stores?method=showIssueToOtherUnitsJsp");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		}
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("pageNo", pageNo + 1);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView addBrandDetailsToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		String messageTOBeVisibleToTheUser = "";
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.addBrandDetailsToOtherUnits(box);
		String successfullyAdded = "n";

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = "" + map.get("successfullyAdded");
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added";
		}

		jsp = RequestConstants.EXIT_WINDOW;
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchIssueToOtherUnits(HttpServletRequest request,
			HttpServletResponse response) {
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.searchIssueToOtherUnits(box);
		jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showIssueToOtherUnitsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userName", userName);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);

		map = storesHandlerService.showIssueToOtherUnitsJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_OTHER_UNITS_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView openItemBrandWindowJspToOtherUnits(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		int itemId = 0;
		int rowVal = 0;
		session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_TO_OTHER_UNITS;
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------End of Issues To Other Units on Surplus
	// (CIV)-------------------------

	// ------------------Start of Issues To Other than Airforce Units
	// -----------------------
	public void fillIssueToOTAFUBasedOnLotNo(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String lotNo = "";
		try {
			if (request.getParameter("lotNo") != null) {
				lotNo = request.getParameter("lotNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("lotNo", lotNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillIssueToOTAFUBasedOnLotNo(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void fillItemsForIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIssueToDepot(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			sb.append("<au>"
					+ masStoreItem.getItemConversion().getPurchaseUnit()
							.getUnitName() + "</au>");
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");
			sb.append("</item>");
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int issueId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (request.getParameter("issueId") != null) {
			issueId = Integer.parseInt((request.getParameter("issueId")));
		}
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("issueId", issueId);
		map = storesHandlerService.getItemListForIssueToOTAFU(dataMap);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		int issueId = 0;
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_OTAFU;
		box.put("deptId", deptId);
		map = storesHandlerService.deleteIssueToOTAFU(box);
		map.put("contentJsp", jsp);
		map.put("departmentIdTemp", deptId);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDeleteIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map dataMap = new HashMap();
		int issueId = 0;
		int departmentIdTemp = 0;
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		jsp = RequestConstants.SHOW_DELETE_POPUP_FOR_ISSUE_OTAFU;
		box.put("deptId", deptId);
		map = storesHandlerService.showDeleteIsuueToOTAFU(box);
		map.put("contentJsp", jsp);
		map.put("departmentIdTemp", departmentIdTemp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openDeletePopupForIssueToOTAFU(
			HttpServletRequest request, HttpServletResponse response) {
		int departmentIdTemp = 0;
		Map dataMap = new HashMap();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		jsp = SHOW_DELETE_POPUP_FOR_ISSUE_OTAFU;
		dataMap.put("deptId", deptId);
		map = storesHandlerService.openDeletePopupForIssueToOTAFU(dataMap);
		map.put("contentJsp", jsp);
		map.put("departmentIdTemp", departmentIdTemp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addNextOrSubmitIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userName", userName);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);

		Map map = new HashMap();
		Map pageMap = new HashMap();
		Box box = HMSUtil.getBox(request);
		int issueId = 0;
		int pageNo = 0;
		String buttonName = "next";
		String messageTOBeVisibleToTheUser = "";
		buttonName = "" + box.get("buttonName");
		if (buttonName.equals("next")) {
			pageNo = Integer.parseInt("" + box.getInt("pageNo"));
			map = storesHandlerService.showIssueToOtherUnitsJsp(dataMap);
			jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Issued Successfully";
			map.put("url", "stores?method=showIssueToOtherUnitsJsp");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		}
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("pageNo", pageNo + 1);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView addBrandDetailsIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		String messageTOBeVisibleToTheUser = "";
		session = request.getSession();

		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.addBrandDetailsToOTAFU(box);
		String successfullyAdded = "n";

		if (map.get("successfullyAdded") != null) {
			successfullyAdded = "" + map.get("successfullyAdded");
		}
		if (successfullyAdded.equals("y")) {
			messageTOBeVisibleToTheUser = "Records Added Succesfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added";
		}
		jsp = RequestConstants.EXIT_WINDOW;
		map.put("contentJsp", jsp);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchIssueToOTAFU(HttpServletRequest request,
			HttpServletResponse response) {
		Map map = new HashMap();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.searchIssueToOTAFU(box);
		jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	/*public ModelAndView showIssueToOTAFUJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		dataMap.put("deptId", deptId);
		map = storesHandlerService.showIssueToOTAFUJsp(dataMap);
		jsp = RequestConstants.ISSUED_TO_OTAFU_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}*/

	public ModelAndView openItemBrandWindowJspIssueToOTAFU(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		Box box = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int itemId = 0;
		int rowVal = 0;
		session = request.getSession();
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}

		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		map = storesHandlerService.getBrandMap(dataMap);
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_TO_OTAFU;
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------End of Issues To Other than Airforce
	// Units-------------------------

	// -----------------------------------------Start Of Indent Soc Tracker
	// methods---------------------------------

	/*
	 * This is the method used to show Indent Soc Tracker Page
	 */
	public ModelAndView getItemListForSocTracker(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int indentId = 0;
		try {
			if (request.getParameter(RequestConstants.INDENT_ID) != null) {
				indentId = Integer.parseInt(""
						+ request.getParameter(RequestConstants.INDENT_ID));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("indentId", indentId);
		try {
			map = storesHandlerService.getItemListForSocTracker(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = RequestConstants.AJAX_ITEM_LIST;
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * This is the method used to show Indent Soc Tracker Page
	 */
	public ModelAndView getIndentListForSocTracker(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int selectedDepartmentId = 1;
		try {
			if (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
				selectedDepartmentId = Integer
						.parseInt(""
								+ request
										.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("selectedDepartmentId", selectedDepartmentId);
		try {
			map = storesHandlerService.getIndentListForSocTracker(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = AJAX_INDENT_LIST;
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * This is the method used to show Indent Soc Tracker Page
	 */
	public ModelAndView showIndentSocTracker(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		

		//Added by Arbind on 20-11-2017
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = null;
		session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		dataMap.put("hospitalId", hospitalId);
		try {
			map = storesHandlerService.showIndentSocTracker(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = INDENT_SOC_TRACKER;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	/*
	 * This is the method to get the map from store_indent_soc_tracker table
	 * based on the indentId,departmentId,nomenclature
	 */
	public ModelAndView getIndentSocTrackerDetails(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> idsMap = new HashMap<String, Object>();
		int indentId = 0;
		int toDepartmentId = 0;
		int itemId = 0;
		String nomenclature = "";

		if (request.getParameter(INDENT_ID) != null) {
			indentId = Integer.parseInt(request.getParameter(INDENT_ID));
		}
		if (request.getParameter(DEPARTMENT_ID) != null) {
			toDepartmentId = Integer.parseInt(request
					.getParameter(DEPARTMENT_ID));
		}
		if (request.getParameter(ITEM_ID) != null) {
			itemId = Integer.parseInt("" + (request.getParameter(ITEM_ID)));
		}
		idsMap.put("indentId", indentId);
		idsMap.put("toDepartmentId", toDepartmentId);
		idsMap.put("itemId", itemId);

		map = storesHandlerService.getIndentSocTracker(idsMap);
		jsp = INDENT_SOC_TRACLER_DETAILS;
		// jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * This is the method used to add or update the Indent Soc Tracker details
	 */
	public ModelAndView addOrUpdateIndentSocTracker(HttpServletRequest request,
			HttpServletResponse response) {

		StoreIndentSocTracker storeIndentSocTracker = new StoreIndentSocTracker();
		int indentId = 0;
		int departmentId = 1;
		int itemId = 0;
		String presentStatus = "";
		String remarks = "";
		String forwardToTc = "";
		String srNoAtAirhq = "";
		String forwardTcToAirhq = "";
		String forwardAirhqToDgafms = "";
		Date dateOfSoc = null;
		int indentSocTrackerId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		String lastChgBy = "";
		String userName = "";
		session = request.getSession();
		int hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
		String messageTOBeVisibleToTheUser = "";
		String buttonType = "";

		try {
			if (request.getParameter(NOMENCLATURE) != null) {
				itemId = Integer.parseInt(""
						+ (request.getParameter(NOMENCLATURE)));
			}
			if (request.getParameter("INDENT_SOC_TRACKER_ID") != null) {
				indentSocTrackerId = Integer.parseInt(request
						.getParameter("INDENT_SOC_TRACKER_ID"));
			}
			if (request.getParameter(INDENT_ID) != null) {
				indentId = Integer.parseInt(request.getParameter(INDENT_ID));
			}
			if (request.getParameter(DEPARTMENT_ID) != null) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
			}
			if (request.getParameter(PRESENT_STATUS) != null) {
				presentStatus = (request.getParameter(PRESENT_STATUS));
			}
			if (request.getParameter(REMARKS) != null) {
				remarks = (request.getParameter(REMARKS));
			}
			if (request.getParameter(FORWARD_TO_TC) != null) {
				forwardToTc = (request.getParameter(FORWARD_TO_TC));
			}
			if (request.getParameter(SOC_SR_NO_AT_AIRHQ) != null) {
				srNoAtAirhq = (request.getParameter(SOC_SR_NO_AT_AIRHQ));
			}
			if (request.getParameter(FORWARD_TC_TO_AIRHQ) != null) {
				forwardTcToAirhq = (request.getParameter(FORWARD_TC_TO_AIRHQ));
			}
			if (request.getParameter(FORWARD_AIRHQ_TO_DGAFMS) != null) {
				forwardAirhqToDgafms = (request
						.getParameter(FORWARD_AIRHQ_TO_DGAFMS));
			}
			if ((request.getParameter(DATE_OF_SOC_FORWARD) != null)
					&& (!(request.getParameter(DATE_OF_SOC_FORWARD).equals("")))) {
				dateOfSoc = (HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(DATE_OF_SOC_FORWARD)));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (indentSocTrackerId != 0)
				storeIndentSocTracker.setId(indentSocTrackerId);
			MasDepartment department = new MasDepartment();
			department.setId(departmentId);
			storeIndentSocTracker.setDepartment(department);

			StoreIndentM storeIndentM = new StoreIndentM();
			storeIndentM.setId(indentId);
			storeIndentSocTracker.setIndent(storeIndentM);

			storeIndentSocTracker.setPresentStatus(presentStatus);
			storeIndentSocTracker.setRemarks(remarks);
			storeIndentSocTracker.setForwardToTc(forwardToTc);
			storeIndentSocTracker.setSrNoAtAirhq(srNoAtAirhq);
			storeIndentSocTracker.setForwardTcToAirhq(forwardTcToAirhq);
			storeIndentSocTracker.setForwardAirhqToDgafms(forwardAirhqToDgafms);
			storeIndentSocTracker.setDateOfSoc(dateOfSoc);

			MasStoreItem item = new MasStoreItem();
			item.setId(itemId);
			storeIndentSocTracker.setItem(item);
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeIndentSocTracker.setHospital(masHospital);
			storeIndentSocTracker.setLastChgBy(userName);
			storeIndentSocTracker.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(lastChgDate));
			storeIndentSocTracker.setLastChgTime(lastChgTime);

		} catch (Exception e) {
			e.printStackTrace();
		}

		boolean flag = storesHandlerService.addOrUpdateIndentSocTracker(
				storeIndentSocTracker, indentSocTrackerId);

		jsp = RequestConstants.STORES_MESSAGE_JSP;
		jsp += ".jsp";

		if (flag) {
			messageTOBeVisibleToTheUser = "Added Successfully ";
			map.put("messageType", "success");
			map.put("contentJsp", jsp);
			map.put("url", "/hms/hms/stores?method=showIndentSocTracker");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

			return new ModelAndView("index", "map", map);
		} else {
			messageTOBeVisibleToTheUser = "Not Added";
			map.put("contentJsp", jsp);
			map.put("messageType", "failure");
			map.put("url", "/hms/hms/stores?method=showIndentSocTracker");
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

			return new ModelAndView("index", "map", map);
		}

	}

	// -----------------------------------------End Of Indent Soc Tracker
	// methods---------------------------------

	// --------------------------------------------Vendor
	// Return-------------------------------------
	public ModelAndView getItemListForVendorReturn(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		int sectionId = 0;
		int indentId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("section") != null) {
				sectionId = Integer.parseInt(""
						+ (request.getParameter("section")));
			}
			if (request.getParameter("indentId") != null) {
				indentId = Integer.parseInt(""
						+ (request.getParameter("indentId")));
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("sectionId", sectionId);
			dataMap.put("indentId", indentId);

			map = storesHandlerService.getItemListForVendorReturn(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "resultForVendorReturn";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForIndentToVendorReturn(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String brandName = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("brandName") != null) {
				brandName = request.getParameter("brandName");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("brandName", brandName);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForIndentToVendorReturn(dataMap);
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();

				sb.append("<item>");
				sb.append("<id>" + object[0] + "</id>");
				sb.append("<pvms>" + object[1] + "</pvms>");
				sb.append("<name>" + object[2] + "</name>");
				sb.append("<brandId>" + object[3] + "</brandId>");
				sb.append("</item>");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showVendorReturnJsp(HttpServletRequest request,
			HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Box box = HMSUtil.getBox(request);
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		session = request.getSession();
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {

				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("buttonFlag", buttonFlag);

			}
		}
		map = storesHandlerService.showVendorReturnJsp(map);

		jsp = VENDOR_RETURN_JSP;
		jsp += ".jsp";
		title = "Return From Dispensary";
		if (request.getParameter("storeFyDocumentNoId") != null) {
			storeFyDocumentNoId = Integer.parseInt(request
					.getParameter("storeFyDocumentNoId"));
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		}
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	/*
	 * method to open the pop up screen after selecting the brand name and
	 * window will populate the grid with the data and user can issue the
	 * quantity there onn the screen.
	 */
	public ModelAndView showStockDetailsForVendorReturn(
			HttpServletRequest request, HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		session = request.getSession();
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		int brandId = 0;
		int rowVal = 0;
		try {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
			String fromDateToDate = request.getParameter("fromDateToDate");
			brandId = Integer.parseInt(request.getParameter("brandId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		map.put("brandId", brandId);
		map.put("rowVal", rowVal);
		map = storesHandlerService.showStockDetailsForVendorReturn(map);
		//
		jsp = STOCK_DETAILS_VENDOR_RETURN_JSP;
		// jsp += ".jsp";
		title = "Stock Details";
		map.put("deptId", deptId);
		map.put("date", date);
		map.put("time", time);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView submitVendorReturnDetails(HttpServletRequest request,
			HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		// List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();
		List srNolist = new ArrayList();
		int vendorId = 0;
		int approvedById = 0;
		int returnById = 0;
		String remarks = "";
		int pageNo = 0;
		String reason = "";
		String SONo = "";
		int itemId = 0;
		int storeGrnReturnMId = 0;
		String includedJsp = "";
		String returnNo = request.getParameter(RETURN_NO);
		try {
			// String itemId = request.getParameter("itemId");

			String returnDate = request.getParameter(RETURN_DATE);
			String referenceNo = request.getParameter(REFERENCE_NO);
			SONo = request.getParameter("SONo");
			if (request.getParameter(VENDOR_NAME) != null
					&& !request.getParameter(VENDOR_NAME).equals("0")) {
				vendorId = Integer.parseInt(request.getParameter(VENDOR_NAME));
			}
			if (request.getParameter("itemId") != null
					&& !request.getParameter("itemId").equals("0")) {
				itemId = Integer.parseInt(request.getParameter("itemId"));
			}

			if (request.getParameter(APPROVED_BY) != null
					&& !(request.getParameter(APPROVED_BY).equals("0"))) {
				approvedById = Integer.parseInt(request
						.getParameter(APPROVED_BY));
			}
			if (request.getParameter(RETURN_BY_ID) != null
					&& !(request.getParameter(RETURN_BY_ID).equals("0"))) {
				returnById = Integer.parseInt(request
						.getParameter(RETURN_BY_ID));
			}
			if (request.getParameter(REMARKS) != null) {
				remarks = request.getParameter(REMARKS);
			}
			if (request.getParameter(REASON) != null) {
				reason = request.getParameter(REASON);
			}
			if (request.getParameter("storeGrnReturnMId") != null) {
				storeGrnReturnMId = Integer.parseInt(""
						+ request.getParameter("storeGrnReturnMId"));
			}
			String date = "";
			String time = "";
			if (request.getParameter(CHANGED_DATE) != null) {
				date = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				time = request.getParameter(CHANGED_TIME);
			}
			Box box = HMSUtil.getBox(request);
			Vector expiryDateIds = box.getVector("expiryDate");
			Vector pvmsNos = box.getVector("pvmsNo");
			Vector itemIds = box.getVector("itemId");
			Vector storeItemBatchStockIds = box
					.getVector("storeItemBatchStockId");
			Vector costprices = box.getVector("costprice");
			Vector batchNos = box.getVector("batchNo");
			Vector issueQtys = box.getVector("issueQty");
			Vector srNos = box.getVector(SR_NO);
			Vector occupiedRows = new Vector();
			int counter = expiryDateIds.size();
			for (int cnt = 0; cnt < expiryDateIds.size(); cnt++) {
				if (expiryDateIds.get(cnt) != null
						&& !((String) expiryDateIds.get(cnt)).equals(""))
					occupiedRows.add(expiryDateIds.get(cnt));
			}
			for (int i = 0; i < occupiedRows.size(); i++) {
				String str = (String) issueQtys.get(i);
				issQtyList.add(str);

				pvmsList.add(itemIds.get(i).toString());
				batchNumberList.add(batchNos.get(i).toString());
				// brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(expiryDateIds.get(i).toString());
				costPriceList.add(costprices.get(i).toString());
				storeItemBatchStockIdList.add(storeItemBatchStockIds.get(i)
						.toString());
				amountList.add(new BigDecimal(costprices.get(i).toString())
						.multiply(new BigDecimal((String) issueQtys.get(i))));
				// amountList.add(request.getParameter("amount" + i));
				srNolist.add(srNos.get(i));

			}

			dataMap.put("hospitalId", hospitalId);
			dataMap.put("deptId", deptId);
			dataMap.put("userId", userId);
			dataMap.put("returnNo", returnNo);
			dataMap.put("returnDate", returnDate);
			dataMap.put("referenceNo", referenceNo);
			dataMap.put("approvedById", approvedById);
			dataMap.put("returnById", returnById);
			dataMap.put("remarks", remarks);
			dataMap.put("reason", reason);

			dataMap.put("userName", userName);
			dataMap.put("pvmsList", pvmsList);
			dataMap.put("batchNumberList", batchNumberList);
			// dataMap.put("brandNameList", brandNameList);
			dataMap.put("expiryDateList", expiryDateList);
			dataMap.put("issQtyList", issQtyList);
			dataMap.put("srNolist", srNolist);
			dataMap.put("costPriceList", costPriceList);
			dataMap.put("amountList", amountList);
			dataMap.put("SONo", SONo);
			dataMap.put("storeItemBatchStockIdList", storeItemBatchStockIdList);

			dataMap.put("vendorId", vendorId);
			dataMap.put("itemId", itemId);
			dataMap.put("userName", userName);
			dataMap.put("date", date);
			dataMap.put("time", time);
			dataMap.put("storeGrnReturnMId", storeGrnReturnMId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		String successfullyAdded = "";
		map = storesHandlerService.submitVendorReturnDetails(dataMap);
		successfullyAdded = "" + map.get("succesfullyAdded");
		storeGrnReturnMId = Integer.parseInt("" + map.get("storeGrnReturnMId"));
		if (successfullyAdded.equals("true")) {
			message = "Stock  has been Updated Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		if (map.get("returnNo") != null) {
			returnNo = (String) map.get("returnNo");
		}
		Map<String, Object> infoMap = new HashMap<String, Object>();
		/*
		 * infoMap = storesHandlerService.showVendorReturnJsp(dataMap); String
		 * jsp = SEARCH_VENDOR_RETURN_JSP + ".jsp"; Map<String, Object>
		 * searchFieldMap = new HashMap<String, Object>();
		 * 
		 * searchFieldMap.put("returnId", storeGrnReturnMId);
		 * searchFieldMap.put("pageNo", pageNo);
		 * 
		 * if (searchFieldMap.size() != 0) { map =
		 * storesHandlerService.searchVendorReturn(searchFieldMap); includedJsp
		 * = "done"; }
		 */
		jsp = "messageForVendorReturn.jsp";
		map.put("returnNo", returnNo);
		//
		map.put("infoMap", infoMap);
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("storeGrnReturnMId", storeGrnReturnMId);
		map.put("message", message);
		map.put("pageNo", 1);
		map.put("includedJsp", includedJsp);
		map.put("returnId", storeGrnReturnMId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateGridItemsInVendorReturn(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		// List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();
		List srNolist = new ArrayList();
		int vendorId = 0;
		int approvedById = 0;
		int returnById = 0;
		String remarks = "";
		String reason = "";
		String SONo = "";
		int itemId = 0;
		int storeGrnReturnMId = 0;
		try {
			// String itemId = request.getParameter("itemId");
			String returnNo = request.getParameter(RETURN_NO);
			String returnDate = request.getParameter(RETURN_DATE);
			String referenceNo = request.getParameter(REFERENCE_NO);
			SONo = request.getParameter("SONo");

			if (request.getParameter(VENDOR_NAME) != null
					&& !request.getParameter(VENDOR_NAME).equals("0")) {
				vendorId = Integer.parseInt(request.getParameter(VENDOR_NAME));
			}
			if (request.getParameter("itemId") != null
					&& !request.getParameter("itemId").equals("0")) {
				itemId = Integer.parseInt(request.getParameter("itemId"));
			}

			if (request.getParameter(APPROVED_BY) != null
					&& !(request.getParameter(APPROVED_BY).equals("0"))) {
				approvedById = Integer.parseInt(request
						.getParameter(APPROVED_BY));
			}
			if (request.getParameter(RETURN_BY_ID) != null
					&& !(request.getParameter(RETURN_BY_ID).equals("0"))) {
				returnById = Integer.parseInt(request
						.getParameter(RETURN_BY_ID));
			}
			if (request.getParameter(REMARKS) != null) {
				remarks = request.getParameter(REMARKS);
			}
			if (request.getParameter(REASON) != null) {
				reason = request.getParameter(REASON);
			}
			if (request.getParameter("storeGrnReturnMId") != null) {
				storeGrnReturnMId = Integer.parseInt(""
						+ request.getParameter("storeGrnReturnMId"));
			}
			String date = "";
			String time = "";
			if (request.getParameter(CHANGED_DATE) != null) {
				date = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_TIME) != null) {
				time = request.getParameter(CHANGED_TIME);
			}
			Box box = HMSUtil.getBox(request);
			Vector expiryDateIds = box.getVector("expiryDate");
			Vector pvmsNos = box.getVector("pvmsNo");
			Vector itemIds = box.getVector("itemId");
			Vector storeItemBatchStockIds = box
					.getVector("storeItemBatchStockId");
			Vector costprices = box.getVector("costprice");
			Vector batchNos = box.getVector("batchNo");
			Vector issueQtys = box.getVector("issueQty");
			Vector srNos = box.getVector(SR_NO);
			Vector occupiedRows = new Vector();
			int counter = expiryDateIds.size();
			for (int cnt = 0; cnt < expiryDateIds.size(); cnt++) {
				if (expiryDateIds.get(cnt) != null
						&& !((String) expiryDateIds.get(cnt)).equals(""))
					occupiedRows.add(expiryDateIds.get(cnt));
			}
			for (int i = 0; i < occupiedRows.size(); i++) {
				String str = (String) issueQtys.get(i);

				issQtyList.add(str);

				pvmsList.add(itemIds.get(i).toString());
				batchNumberList.add(batchNos.get(i).toString());
				// brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(expiryDateIds.get(i).toString());
				costPriceList.add(costprices.get(i).toString());
				storeItemBatchStockIdList.add(storeItemBatchStockIds.get(i)
						.toString());
				amountList.add(new BigDecimal(costprices.get(i).toString())
						.multiply(new BigDecimal((String) issueQtys.get(i))));
				// amountList.add(request.getParameter("amount" + i));
				srNolist.add(srNos.get(i));

			}
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("deptId", deptId);
			dataMap.put("userId", userId);
			dataMap.put("returnNo", returnNo);
			dataMap.put("returnDate", returnDate);
			dataMap.put("referenceNo", referenceNo);
			dataMap.put("approvedById", approvedById);
			dataMap.put("returnById", returnById);
			dataMap.put("remarks", remarks);
			dataMap.put("reason", reason);

			dataMap.put("userName", userName);
			dataMap.put("pvmsList", pvmsList);
			dataMap.put("batchNumberList", batchNumberList);
			// dataMap.put("brandNameList", brandNameList);
			dataMap.put("expiryDateList", expiryDateList);
			dataMap.put("issQtyList", issQtyList);
			dataMap.put("srNolist", srNolist);
			dataMap.put("costPriceList", costPriceList);
			dataMap.put("amountList", amountList);
			dataMap.put("SONo", SONo);
			dataMap.put("storeItemBatchStockIdList", storeItemBatchStockIdList);

			dataMap.put("vendorId", vendorId);
			dataMap.put("itemId", itemId);
			dataMap.put("userName", userName);
			dataMap.put("date", date);
			dataMap.put("time", time);
			dataMap.put("storeGrnReturnMId", storeGrnReturnMId);

			String successfullyAdded = "";
			map = storesHandlerService.updateGridItemsInVendorReturn(dataMap);
			successfullyAdded = "" + map.get("succesfullyAdded");
			storeGrnReturnMId = Integer.parseInt(""
					+ map.get("storeGrnReturnMId"));
			if (successfullyAdded.equals("true")) {
				message = "Stock  has been Updated Successfully !!";
			} else {
				message = "Error Ocurred Please Try Again!!";
			}

			int supplierId = 0;

			int returnId = 0;
			String jsp = SEARCH_VENDOR_RETURN_JSP;
			jsp += ".jsp";

			int pageNo = 1;
			int storeFyDocumentNoId = 0;
			session = request.getSession();
			String buttonFlag = "";

			Map<String, Object> infoMap = new HashMap<String, Object>();

			try {
				if (map.get("returnNo") != null)
					returnNo = (String) map.get("returnNo");
				map.put("pageNo", pageNo);
				map.put("deptId", deptId);

				infoMap = storesHandlerService.showVendorReturnJsp(dataMap);

				Map<String, Object> searchFieldMap = new HashMap<String, Object>();
				String fromDate = "";
				String toDate = "";

				searchFieldMap.put("fromDate", fromDate);
				searchFieldMap.put("toDate", toDate);
				searchFieldMap.put("returnId", storeGrnReturnMId);
				searchFieldMap.put("pageNo", pageNo);

				if (searchFieldMap.size() != 0) {

					map = storesHandlerService
							.searchVendorReturn(searchFieldMap);

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			map.put("infoMap", infoMap);
			map.put("returnNo", returnNo);
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("pageNo", pageNo);

			map.put("returnId", storeGrnReturnMId);

			map.put("title", title);

			map.put("returnId", returnId);

			map.put("storeGrnReturnMId", storeGrnReturnMId);
			map.put("message", message);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateGridItemsInDepartmentReturn(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List srNolist = new ArrayList();

		List storeItemBatchStockIdList = new ArrayList();
		String itemId = request.getParameter("itemId");
		String returnNo = request.getParameter(RETURN_NO);
		String returnDate = request.getParameter(RETURN_DATE);
		String referenceNo = request.getParameter(REFERENCE_NO);

		int fromDeptId = 0;
		int toDeptId = 0;
		int receivedById = 0;
		int returnById = 0;
		String remarks = "";
		String reason = "";
		if (request.getParameter(FROM_WARD) != null
				&& !request.getParameter(FROM_WARD).equals("0")) {
			fromDeptId = Integer.parseInt(request.getParameter(FROM_WARD));
		}
		if (request.getParameter(TO_WARD) != null
				&& !(request.getParameter(TO_WARD).equals("0"))) {
			toDeptId = Integer.parseInt(request.getParameter(TO_WARD));
		}
		if (request.getParameter(RECEIVED_BY_ID) != null
				&& !(request.getParameter(RECEIVED_BY_ID).equals("0"))) {
			receivedById = Integer.parseInt(request
					.getParameter(RECEIVED_BY_ID));
		}
		if (request.getParameter(RETURN_BY_ID) != null
				&& !(request.getParameter(RETURN_BY_ID).equals("0"))) {
			returnById = Integer.parseInt(request.getParameter(RETURN_BY_ID));
		}
		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		if (request.getParameter(REASON) != null) {
			reason = request.getParameter(REASON);
		}
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		// String fromDateToDate = request.getParameter("fromDateToDate");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int userId = (Integer) session.getAttribute("userId");

		int storeFyDocumentNoId = Integer.parseInt(request
				.getParameter("storeFyDocumentNoId"));

		// int wardIssueNo =
		// Integer.parseInt(request.getParameter("ipissueno"));
		// int counter = Integer.parseInt(request.getParameter("counter"));
		Box box = HMSUtil.getBox(request);
		Vector expiryDateIds = box.getVector("expiryDate");
		Vector pvmsNos = box.getVector("pvmsNo");
		Vector itemIds = box.getVector("itemId");
		Vector storeItemBatchStockIds = box.getVector("storeItemBatchStockId");
		Vector costprices = box.getVector("costprice");
		Vector batchNos = box.getVector("batchNo");
		Vector issueQtys = box.getVector("issueQty");
		Vector srNos = box.getVector(SR_NO);

		Vector occupiedRows = new Vector();
		int counter = expiryDateIds.size();
		for (int cnt = 0; cnt < expiryDateIds.size(); cnt++) {
			if (expiryDateIds.get(cnt) != null
					&& !((String) expiryDateIds.get(cnt)).equals(""))
				occupiedRows.add(expiryDateIds.get(cnt));
		}
		for (int i = 0; i < occupiedRows.size(); i++) {
			String str = (String) issueQtys.get(i);

			issQtyList.add(str);

			pvmsList.add(itemIds.get(i).toString());
			batchNumberList.add(batchNos.get(i).toString());
			// brandNameList.add(request.getParameter("brandId" + i));
			expiryDateList.add(expiryDateIds.get(i).toString());
			costPriceList.add(costprices.get(i).toString());
			storeItemBatchStockIdList.add(storeItemBatchStockIds.get(i)
					.toString());
			amountList.add(new BigDecimal(costprices.get(i).toString())
					.multiply(new BigDecimal((String) issueQtys.get(i))));
			// amountList.add(request.getParameter("amount" + i));
			srNolist.add(srNos.get(i));

		}

		map.put("fromDeptId", fromDeptId);
		map.put("toDeptId", toDeptId);
		map.put("hospitalId", hospitalId);
		map.put("userId", userId);
		map.put("date", date);
		map.put("time", time);
		map.put("returnNo", returnNo);
		map.put("returnDate", returnDate);
		map.put("referenceNo", referenceNo);
		map.put("receivedById", receivedById);
		map.put("returnById", returnById);
		map.put("remarks", remarks);
		map.put("reason", reason);
		map.put("srNolist", srNolist);
		map.put("userName", userName);
		map.put("pvmsList", pvmsList);
		map.put("batchNumberList", batchNumberList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		map.put("amountList", amountList);
		map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		// map.put("wardIssueNo", wardIssueNo);

		map = storesHandlerService.updateGridItemsInDepartmentReturn(map);
		boolean successfullyAdded = false;
		String message = "";
		if (map.get("successfullyAdded") != null) {
			successfullyAdded = (Boolean) map.get("successfullyAdded");
		}

		if (successfullyAdded) {
			message = "Stock  has been Updated Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}

		int returnId = 0;
		String jsp = SEARCH_RETURN_DISPENSARY_JSP;
		jsp += ".jsp";
		int deptId = 0;

		Map<String, Object> infoMap = new HashMap<String, Object>();
		int pageNo = 0;
		// pageNo = Integer.parseInt(request.getParameter("pageNo"));
		pageNo++;

		deptId = (Integer) session.getAttribute("deptId");
		if (map.get("returnNo") != null) {
			returnNo = (String) map.get("returnNo");
		}
		map.put("pageNo", pageNo);
		map.put("deptId", deptId);

		String fromDate = "";
		String toDate = "";
		infoMap = storesHandlerService.showReturnFromDispensaryJsp(map);

		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (map.get(ISSUE_RETURN_ID) != null) {
				returnId = (Integer) (map.get(ISSUE_RETURN_ID));

			}
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("returnId", returnId);
		searchFieldMap.put("pageNo", pageNo);
		searchFieldMap.put("deptId", deptId);

		if (searchFieldMap.size() != 0) {
			map = storesHandlerService.searchReturnToDispensary(searchFieldMap);

		}

		map.put("infoMap", infoMap);
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pageNo", pageNo);
		map.put("message", message);
		map.put("returnId", returnId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showDeleteVendorReturn(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();

		String returnNo = request.getParameter("returnNo");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("returnNo", returnNo);
		map = storesHandlerService.showDeleteVendorReturn(map);
		jsp = DELETE_VENDOR_RETURN_JSP;

		title = "Delete Return From Dispensary";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteStockDetailsVendorReturn(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int returnTId = Integer.parseInt(request.getParameter("parent"));
		map.put("returnTId", returnTId);
		boolean successfullyDeleted = storesHandlerService
				.deleteStockDetailsVendorReturn(map);

		if (successfullyDeleted) {
			message = "Stock  has been Deleted Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		jsp = STOCK_UPDATED_MESSAGE_JSP;
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchVendorReturn(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String fromDate = "";
		String toDate = "";
		int supplierId = 0;
		String includedJsp = "";
		int returnId = 0;
		int departmentId = 0;
		String jsp = SEARCH_VENDOR_RETURN_JSP;
		jsp += ".jsp";
		int deptId = 0;
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		session = request.getSession();
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		int pageNo = 0;
		pageNo = Integer.parseInt(request.getParameter("pageNo"));
		pageNo++;
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			if (buttonFlag.equals("next")) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				map.put("pageNo", pageNo);
				map.put("deptId", deptId);
				map.put("buttonFlag", buttonFlag);
			}

		}
		infoMap = storesHandlerService.showVendorReturnJsp(map);
		departmentId = (Integer) session.getAttribute("deptId");
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(VENDOR_RETURN_ID) != null) {
				returnId = Integer.parseInt(request
						.getParameter(VENDOR_RETURN_ID));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("returnId", returnId);
		searchFieldMap.put("pageNo", pageNo);
		searchFieldMap.put("departmentId", departmentId);

		if (searchFieldMap.size() != 0) {
			map = storesHandlerService.searchVendorReturn(searchFieldMap);
			includedJsp = "done";
		}

		map.put("infoMap", infoMap);
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pageNo", pageNo);
		map.put("includedJsp", includedJsp);
		map.put("returnId", returnId);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printVendorReturnJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int returnNo = 0;
		String period = null;
		BigDecimal[] amount = new BigDecimal[100];
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(ISSUE_RETURN_ID) != null
					&& !(request.getParameter(ISSUE_RETURN_ID).equals(""))) {
				returnNo = Integer.parseInt(request
						.getParameter(ISSUE_RETURN_ID));
				requestParameters.put("RETURN_ID", returnNo);
			}

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			byte[] bytes = null;

			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport(VENDOR_RETURN_DOC_PRINT),
						requestParameters,
						(Connection) connectionMap.get("con"));
			} catch (JRException e) {
				e.printStackTrace();
			}

			response.setHeader("Content-Disposition", "attachment; filename="
					+ VENDOR_RETURN_DOC_PRINT + ".pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;

			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showOPDPatientIssue(HttpServletRequest request,
			HttpServletResponse response) {

		int hinId = 0;
		session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		String hinNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		// map=storesHandlerService.showOPDPatientIssue();

		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");
			int pageNo = Integer.parseInt(request.getParameter("pageNo"));
			if (buttonFlag.equals("next")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				hinNo = request.getParameter("hinNo");
				issueNo = request.getParameter("issueNo");
				String prescription = request
						.getParameter(RequestConstants.PRESCRIPTION_NO);
				int consultantId = Integer.parseInt(request
						.getParameter(RequestConstants.CONSULTING_DOCTOR));
				pageNo++;
				map.put("pageNo", pageNo);
				map.put("hinId", hinId);
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);

			}
		}

		jsp = OPD_PATIENT_ISSUE_JSP;
		jsp += ".jsp";
		title = "Ward Consumption";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	/**
	 * Added by Priyanka
	 */
	public ModelAndView generateOpdPatientIssueReport(
			HttpServletRequest request, HttpServletResponse response) {

		int hinId = 0;
		session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		Date currDate = new Date();
		Map<String, Object> map = new HashMap<String, Object>();
		// map=storesHandlerService.showOPDPatientIssue();
		map = storesHandlerService.getDBConnection();
		if (request.getParameter(RequestConstants.HIN_ID) != null) {
			hinId = Integer.parseInt(request
					.getParameter(RequestConstants.HIN_ID));
			map.put("hinId", hinId);
		}

		map.put("deptId", session.getAttribute("deptId"));

		byte[] bytes = null;
		try {

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("patient_issueEntry"), map,
					(Connection) map.get("conn"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			((Connection) map.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView getHinForPatientIssue(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String serviceNo = "";
		// int hinId=0;
		if (request.getParameter(SERVICE_NO) != null
				&& !(request.getParameter(SERVICE_NO).equals(""))) {
			serviceNo = request.getParameter(SERVICE_NO);
			detailsMap.put("serviceNo", serviceNo);
		}
		int pageNo = 0;
		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		// if( request.getParameter("hinId")!= null)
		// {
		// hinId=Integer.parseInt(request.getParameter("hinId"));
		// }
		// hinId===="+hinId+"======and page no in getHinForPatientIssue
		// =="+pageNo);

		map = storesHandlerService.getHinNoList(serviceNo);
		// map.put("hinNoList", hinNoList);
		// map.put("pageNo", pageNo);
		// map.put("hinId", hinId);

		jsp = POPULATE_HIN_FOR_PATIENT_ISSUE;
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showOPDPatientIssueGrid(HttpServletRequest request,
			HttpServletResponse response) {
		/*
		 * Department id for dispensary store is hardcoded which in future will
		 * come from login
		 */
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = (Integer) session.getAttribute("deptId");
		session = request.getSession();
		String buttonFlag = "";
		String issueNo = "";
		int hinId = 0;
		String hinNo = "";
		String prescription = "";
		int consultantId = 0;
		int pageNo = Integer.parseInt(request.getParameter("pageNo"));
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		if (request.getParameter(RequestConstants.HIN_ID) != null
				&& !request.getParameter(RequestConstants.HIN_ID).equals("")) {
			hinId = Integer.parseInt(request
					.getParameter(RequestConstants.HIN_ID));
		}
		buttonFlag = request.getParameter("buttonFlag");
		if (!request.getParameter("buttonFlag").equals("")
				&& buttonFlag != null) {
			if (buttonFlag.equals("next")) {
				buttonFlag = request.getParameter("buttonFlag");
				issueNo = request.getParameter("issueNo");
				hinNo = request.getParameter(RequestConstants.HIN_NO);
				prescription = request.getParameter("prescription");
				consultantId = Integer.parseInt(request
						.getParameter("consultantId"));
				map.put("buttonFlag", buttonFlag);
				map.put("issueNo", issueNo);
				map.put("hinNo", hinNo);
				map.put("prescription", prescription);
				map.put("consultantId", consultantId);

			}
		}

		map.put("pageNo", pageNo);
		map.put("deptId", deptId);
		map.put("hinId", hinId);

		map = storesHandlerService.showOPDPatientIssueGrid(map);
		jsp = OPD_PATIENT_ISSUE_GRID;
		title = "Patient Issue";
		map.put("date", date);
		map.put("time", time);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showOPDStockDetailsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int deptId = Integer.parseInt(request.getParameter("deptId"));

		int rowVal = Integer.parseInt(request.getParameter("rowVal"));

		int itemId = Integer.parseInt(request.getParameter("itemId"));

		String serviceNo = box.getString("serviceNo");

		String buttonFlag = request.getParameter("buttonFlag");
		// int wardIssueNo=Integer.parseInt(request.getParameter("ipissueno"));
		// int
		// storeFyDocumentNoId=Integer.parseInt(request.getParameter("storeFyDocumentNoId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		map.put("itemId", itemId);
		map.put("rowVal", rowVal);
		map.put("buttonFlag", buttonFlag);
		map = storesHandlerService.showOPDStockDetailsJsp(map);
		map.put("serviceNo", serviceNo);
		jsp = OPD_PATIENT_STOCK_DETAILS;
		// jsp += ".jsp";
		title = "OPD Stock Details";
		// map.put("deptId", deptId);

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView submitOPDPatientStockDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List storeItemBatchStockIdList = new ArrayList();

		int deptId = Integer.parseInt(request.getParameter("deptId"));

		int itemId = Integer.parseInt(request.getParameter("itemId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		String serviceNo = request.getParameter("serviceNo");
		int empId = Integer.parseInt(request.getParameter("empId"));
		String prescription = request.getParameter("prescription");
		String buttonFlag = request.getParameter("buttonFlag");
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int storeFyDocumentNoId = Integer.parseInt(request
				.getParameter("storeFyDocumentNoId"));
		String opdIssueno = request.getParameter("opdIssueno");
		int counter = Integer.parseInt(request.getParameter("counter"));
		for (int i = 0; i < counter; i++) {
			String str = request.getParameter("issueQty" + i);
			if (str.length() > 0) {

				// int qty=Integer.parseInt(request.getParameter("issueQty"+i));
				issQtyList.add(request.getParameter("issueQty" + i));
				// pvmsList.add(itemId);
				batchNumberList.add(request.getParameter("batchNo" + i));
				brandNameList.add(request.getParameter("brandId" + i));
				expiryDateList.add(request.getParameter("expiryDate" + i));
				costPriceList.add(request.getParameter("costprice" + i));
				storeItemBatchStockIdList.add(request
						.getParameter("storeItemBatchStockId" + i));
				amountList.add(request.getParameter("amount" + i));
			}
		}
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("date", date);
		map.put("time", time);

		map.put("buttonFlag", buttonFlag);
		map.put("userName", userName);
		// map.put("pvmsList", pvmsList);
		map.put("itemId", itemId);
		map.put("batchNumberList", batchNumberList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		map.put("amountList", amountList);
		map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		map.put("opdIssueno", opdIssueno);
		map.put("hinId", hinId);
		map.put("empId", empId);
		map.put("prescription", prescription);
		map.put("serviceNo", serviceNo);
		boolean successfullyAdded = storesHandlerService
				.submitOPDPatientStockDetails(map);
		if (successfullyAdded) {
			message = "Stock  has been Updated Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}

		jsp = STOCK_UPDATED_MESSAGE_JSP;

		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return null;
	}

	public ModelAndView showModifyOPDPatientIssueJsp(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		String OPDIssueNo = request.getParameter("OPDIssueNo");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("OPDIssueNo", OPDIssueNo);
		map = storesHandlerService.showModifyOPDPatientIssueJsp(map);

		jsp = MODIFY_OPD_PATIENT_ISSUE_STOCK_DETAILS;
		title = "Modify OPD Patient Issue";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteStockDetails(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int opdIssueTId = Integer.parseInt(request.getParameter("parent"));
		map.put("opdIssueTId", opdIssueTId);
		boolean successfullyDeleted = storesHandlerService
				.deleteStockDetails(map);

		if (successfullyDeleted) {
			message = "Stock  has been Deleted Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		jsp = STOCK_UPDATED_MESSAGE_JSP;
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showRecordsForLotNo(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String lotNo = request.getParameter("lotNo");
		int rowVal = Integer.parseInt(request.getParameter("rowVal"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		map.put("lotNo", lotNo);
		map.put("rowVal", rowVal);
		map.put("deptId", deptId);
		map = storesHandlerService.showStockDetailsForLotNo(map);

		jsp = OPD_STOCK_DETAILS_FOR_LOT_NO;
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getItemListForOPD(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map.put("deptId", deptId);
			map.put("userName", userName);

			map = storesHandlerService.getItemListForOPD(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForOPD";
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsInGridForOPD(HttpServletRequest request,
			HttpServletResponse response) {

		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		int itemId = 0;

		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		// String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		try {
			if (request.getParameter("itemId") != null) {
				itemId = Integer.parseInt(request.getParameter("itemId"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("itemId", itemId);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsInGridForOPD(dataMap);
		if (map.get("itemList") != null) {
			objectList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		try {

			MasStoreItem masStoreItem = (MasStoreItem) objectList.get(0);
			String pvmsNo = masStoreItem.getPvmsNo();

			int id = masStoreItem.getId();

			sb.append("<item>");

			sb.append("<pvms>" + pvmsNo + "</pvms>");

			sb.append("<itemId>" + id + "</itemId>");

			sb.append("</item>");

		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsInGridForLotNo(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String lotNo = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("lotNo") != null) {
				lotNo = request.getParameter("lotNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("lotNo", lotNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsInGridForLotNo(dataMap);
		if (map.get("itemList") != null) {
			objectList = (List) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		try {

			StoreItemBatchStock stock = (StoreItemBatchStock) objectList.get(0);
			String pvmsNo = stock.getItem().getPvmsNo();

			String nomenclature = stock.getItem().getNomenclature();
			int itemId = stock.getItem().getId();

			sb.append("<item>");

			sb.append("<pvms>" + pvmsNo + "</pvms>");
			sb.append("<nomenclature>" + nomenclature + "</nomenclature>");
			sb.append("<itemId>" + itemId + "</itemId>");

			sb.append("</item>");

		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	//
	// *********************************************************************************************************************
	// ------------------------------------End of Methods Written By
	// Vikas------------------------------------------
	// ****************************************************************************************************************

	// ********************* Start Of Modules By Deepti Tevatia
	// ****************************

	// ------------------Return From Dispensary
	// Form----------------------------------

	public ModelAndView showReturnFromDispensaryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		session = request.getSession();
		String buttonFlag = "";
		int hospitalId = 0;
		Map<String, Object> map = new HashMap<String, Object>();

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			map.put("deptId", deptId);
		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		map.put("hospitalId", hospitalId);

		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
			map.put("userName", userName);
		}
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			int pageNo = Integer.parseInt(request.getParameter("pageNo"));

			if (buttonFlag.equals("next")) {

				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				pageNo++;
				// map.put("returnNo", returnNo);
				map.put("pageNo", pageNo);
				map.put("deptId", deptId);
				map.put("buttonFlag", buttonFlag);
				map.put("hospitalId", hospitalId);
			}
		}
		map = storesHandlerService.showReturnFromDispensaryJsp(map);

		jsp = RETURN_FROM_DISPENSARY_JSP;
		// jsp = "departmentReturnTemp";
		jsp += ".jsp";
		title = "Return From Dispensary";
		if (request.getParameter("storeFyDocumentNoId") != null) {
			storeFyDocumentNoId = Integer.parseInt(request
					.getParameter("storeFyDocumentNoId"));
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		}
		map.put("deptId", deptId);
		map.put("userName", userName);

		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	/*
	 * method to open the pop up screen after selecting the brand name and
	 * window will populate the grid with the data and user can issue the
	 * quantity there onn the screen.
	 */
	/*
	 * public ModelAndView showStockDetailsForReturnDispensary(
	 * HttpServletRequest request, HttpServletResponse response) { session =
	 * request.getSession(); int deptId =
	 * Integer.parseInt(request.getParameter("deptId")); String date =
	 * request.getParameter("date"); String time = request.getParameter("time");
	 * int rowVal = Integer.parseInt(request.getParameter("rowVal")); String
	 * fromDateToDate = request.getParameter("fromDateToDate"); int brandId =
	 * Integer.parseInt(request.getParameter("brandId"));
	 * 
	 * Map<String, Object> map = new HashMap<String, Object>();
	 * map.put("deptId", deptId); map.put("brandId", brandId); map.put("rowVal",
	 * rowVal); map =
	 * storesHandlerService.showStockDetailsForReturnDispensary(map); // jsp =
	 * STOCK_DETAILS_RETURN_DISPENSARY_JSP; // jsp += ".jsp"; title = "Stock
	 * Details"; map.put("deptId", deptId); map.put("date", date);
	 * map.put("time", time); map.put("fromDateToDate", fromDateToDate);
	 * map.put("contentJsp", jsp); map.put("title", title); return new
	 * ModelAndView(jsp, "map", map); }
	 */
	public ModelAndView showStockDetailsForReturnDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String date = request.getParameter("date");
		String time = request.getParameter("time");
		int brandId = 0;
		int rowVal = 0;
		try {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
			String fromDateToDate = request.getParameter("fromDateToDate");
			brandId = Integer.parseInt(request.getParameter("brandId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("deptId", deptId);
		map.put("brandId", brandId);
		map.put("rowVal", rowVal);
		map = storesHandlerService.showStockDetailsForReturnDispensary(map);
		//
		jsp = STOCK_DETAILS_RETURN_DISPENSARY_JSP;
		// jsp += ".jsp";
		title = "Stock Details";
		map.put("deptId", deptId);
		map.put("date", date);
		map.put("time", time);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView submitReturnDispensaryDetails(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List issQtyList = new ArrayList();
		List amountList = new ArrayList();
		List pvmsList = new ArrayList();
		List batchNumberList = new ArrayList();
		List brandNameList = new ArrayList();
		List expiryDateList = new ArrayList();
		List manufactureDateList = new ArrayList();
		List costPriceList = new ArrayList();
		List reasonList = new ArrayList();
		List srNolist = new ArrayList();

		List storeItemBatchStockIdList = new ArrayList();
		String itemId = request.getParameter("itemId");
		String returnNo = request.getParameter(RETURN_NO);
		String returnDate = request.getParameter(RETURN_DATE);
		String referenceNo = request.getParameter(REFERENCE_NO);

		int fromDeptId = 0;
		int toDeptId = 0;
		int receivedById = 0;
		int returnById = 0;
		String remarks = "";
		String flag = "";
		if (request.getParameter(FROM_WARD) != null
				&& !request.getParameter(FROM_WARD).equals("0")) {
			fromDeptId = Integer.parseInt(request.getParameter(FROM_WARD));
		}
		if (request.getParameter(TO_WARD) != null
				&& !(request.getParameter(TO_WARD).equals("0"))) {
			toDeptId = Integer.parseInt(request.getParameter(TO_WARD));
		}
		if (request.getParameter(RECEIVED_BY_ID) != null
				&& !(request.getParameter(RECEIVED_BY_ID).equals("0"))) {
			receivedById = Integer.parseInt(request
					.getParameter(RECEIVED_BY_ID));
		}
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			returnById = users.getEmployee().getId();
		}

		/*
		 * if (request.getParameter(RETURN_BY_ID) != null &&
		 * !(request.getParameter(RETURN_BY_ID).equals("0"))) { returnById =
		 * Integer.parseInt(request.getParameter(RETURN_BY_ID)); }
		 */
		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}
		/*
		 * if (request.getParameter(REASON) != null) { reason =
		 * request.getParameter(REASON); }
		 */

		String date = request.getParameter("date");
		String time = request.getParameter("time");
		// String fromDateToDate = request.getParameter("fromDateToDate");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		String userName = (String) session.getAttribute("userName");
		int userId = (Integer) session.getAttribute("userId");

		int storeFyDocumentNoId = Integer.parseInt(request
				.getParameter("storeFyDocumentNoId"));

		// int wardIssueNo =
		// Integer.parseInt(request.getParameter("ipissueno"));
		// int counter = Integer.parseInt(request.getParameter("counter"));
		Box box = HMSUtil.getBox(request);
		Vector expiryDateIds = box.getVector("expiryDate");
		Vector manufactureDateIds = box.getVector("manufactureDate");
		Vector pvmsNos = box.getVector("pvmsNo");
		Vector itemIds = box.getVector("itemId");
		Vector storeItemBatchStockIds = box.getVector("storeItemBatchStockId");
		Vector costprices = box.getVector("costprice");
		Vector batchNos = box.getVector("batchNo");
		Vector issueQtys = box.getVector("issueQty");
		Vector reason = box.getVector("reason");
		Vector srNos = box.getVector(SR_NO);

		Vector occupiedRows = new Vector();
		int counter = expiryDateIds.size();
		for (int cnt = 0; cnt < expiryDateIds.size(); cnt++) {
			if (expiryDateIds.get(cnt) != null
					&& !((String) expiryDateIds.get(cnt)).equals(""))
				occupiedRows.add(expiryDateIds.get(cnt));
		}

		for (int i = 0; i < occupiedRows.size(); i++) {
			String str = (String) issueQtys.get(i);

			issQtyList.add(str);

			pvmsList.add(itemIds.get(i).toString());
			batchNumberList.add(batchNos.get(i).toString());
			// brandNameList.add(request.getParameter("brandId" + i));
			expiryDateList.add(expiryDateIds.get(i).toString());
			costPriceList.add(costprices.get(i).toString());
			storeItemBatchStockIdList.add(storeItemBatchStockIds.get(i)
					.toString());
			amountList.add(new BigDecimal(costprices.get(i).toString())
					.multiply(new BigDecimal((String) issueQtys.get(i))));
			reasonList.add(reason.get(i).toString());
			// amountList.add(request.getParameter("amount" + i));
			srNolist.add(srNos.get(i));

		}

		map.put("fromDeptId", fromDeptId);
		map.put("toDeptId", toDeptId);
		map.put("hospitalId", hospitalId);
		map.put("userId", userId);
		map.put("date", date);
		map.put("time", time);
		map.put("returnNo", returnNo);
		map.put("returnDate", returnDate);
		map.put("referenceNo", referenceNo);
		map.put("receivedById", receivedById);
		map.put("returnById", returnById);
		map.put("remarks", remarks);
		map.put("flag", flag);
		map.put("reasonList", reasonList);
		map.put("srNolist", srNolist);
		map.put("userName", userName);
		map.put("pvmsList", pvmsList);
		map.put("batchNumberList", batchNumberList);
		map.put("brandNameList", brandNameList);
		map.put("expiryDateList", expiryDateList);
		map.put("issQtyList", issQtyList);
		map.put("costPriceList", costPriceList);
		map.put("amountList", amountList);
		map.put("storeItemBatchStockIdList", storeItemBatchStockIdList);
		map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		// map.put("wardIssueNo", wardIssueNo);

		map = storesHandlerService.submitReturnDispensaryDetails(map);
		// =storesHandlerService.submitReturnDispensaryDetailsForId(map);
		String message = "";
		/*
		 * if (successfullyAdded) { message =
		 * "Stock  has been Updated Successfully !!"; } else { message =
		 * "Error Ocurred Please Try Again!!"; }
		 */
		jsp = "messageForStock.jsp";
		url = "/hms/hms/stores?method=showReturnFromDispensaryJsp";
		map.put("url", url);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showDeleteReturnFromDispensary(
			HttpServletRequest request, HttpServletResponse response) {

		session = request.getSession();

		String returnNo = request.getParameter("returnNo");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("returnNo", returnNo);
		map = storesHandlerService.showDeleteReturnFromDispensary(map);
		//

		jsp = DELETE_RETURN_DISPENSARY_JSP;

		title = "Delete Return From Dispensary";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView deleteStockDetailsReturnToDispensary(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int returnTId = Integer.parseInt(request.getParameter("parent"));
		map.put("returnTId", returnTId);
		boolean successfullyDeleted = storesHandlerService
				.deleteStockDetailsReturnToDispensary(map);

		String messageTOBeVisibleToTheUser = "";
		if (successfullyDeleted) {
			messageTOBeVisibleToTheUser = "Stock  has been Deleted Successfully !!";
		} else {
			messageTOBeVisibleToTheUser = "Error Ocurred Please Try Again!!";
		}
		jsp = "message";

		url = "/hms/hms/stores?method=showReturnFromDispensaryJsp";
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchReturnToDispensary(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String fromDate = "";
		String toDate = "";
		int supplierId = 0;
		String includedJsp = "";
		int returnId = 0;
		String jsp = SEARCH_RETURN_DISPENSARY_JSP;
		jsp += ".jsp";
		int deptId = 0;
		String returnNo = "";
		int storeFyDocumentNoId = 0;
		session = request.getSession();
		String buttonFlag = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		int pageNo = 0;
		pageNo = Integer.parseInt(request.getParameter("pageNo"));
		pageNo++;
		if (request.getParameter("buttonFlag") != null) {
			buttonFlag = request.getParameter("buttonFlag");

			if (buttonFlag.equals("next")) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				if (request.getParameter("returnNo") != null) {
					returnNo = (String) request.getParameter("returnNo");
				}
				map.put("pageNo", pageNo);
				map.put("deptId", deptId);
				map.put("buttonFlag", buttonFlag);
			}

		}
		infoMap = storesHandlerService.showReturnFromDispensaryJsp(map);

		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(ISSUE_RETURN_ID) != null) {
				returnId = Integer.parseInt(request
						.getParameter(ISSUE_RETURN_ID));

			}
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("returnId", returnId);
		searchFieldMap.put("pageNo", pageNo);
		searchFieldMap.put("deptId", deptId);

		if (searchFieldMap.size() != 0) {
			map = storesHandlerService.searchReturnToDispensary(searchFieldMap);
			includedJsp = "done";
		}

		map.put("infoMap", infoMap);
		map.put("returnNo", returnNo);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pageNo", pageNo);
		map.put("includedJsp", includedJsp);
		map.put("returnId", returnId);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemListForDepartmentReturn(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";
		// int returnId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			/*
			 * if (request.getParameter("returnId") != null) { returnId =
			 * Integer.parseInt(""+ (request.getParameter("returnId"))); }
			 */
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);
			// dataMap.put("returnId",returnId);

			map = storesHandlerService.getItemListForDepartmentReturn(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "resultForDepartmentReturn";
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------New Grid for MMF Department
	// Form----------------------------------

	public ModelAndView showMmfDepartmentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		map = storesHandlerService.showMmfDepartment(deptId);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		String previousPage = "no";

		map.put("previousPage", previousPage);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView createAndImportMmfDepartmentData(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.createAndImportMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView resetMmfDepartmentData(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.resetMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getMmfDepartmentData(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		Map<String, Object> map = new HashMap<String, Object>();
		box.put("storeType", box.get("storeType"));
		map = storesHandlerService.getMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchMmfDepartmentData(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		box.put("storeType", box.get("storeType"));
		if (session.getAttribute("deptId") != null)
			box.put("deptId", session.getAttribute("deptId"));
		map = storesHandlerService.searchMmfDepartmentData(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAddMmfDepartmentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		box.put("docId", box.get("docId"));
		box.put("storeType", box.get("storeType"));
		map = storesHandlerService.getItemDetails(box);
		jsp = MMF_DEPARTMENT_ADDITION_JSP;
		title = "Add MMF";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("mmfMasterId", box.get(MMF_DEPARTMENT_M_ID));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showAddMmfDepartmentJspForNextRecord(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		int itemId = 0;
		if (request.getParameter("buttonName") != null) {
			Vector items = box.getVector("itemId");
			int max = items.size() - 1;
			itemId = Integer.valueOf(items.get(max).toString());
			box.put("itemId", itemId);
		} else {

			itemId = Integer.parseInt(box.getString("itemIdForNextRecord"));
			box.put("itemId", itemId);
		}

		map = storesHandlerService
				.getItemDetailsForMmfDepartmentJspForNextRecord(box);
		jsp = MMF_DEPARTMENT_ADDITION_JSP;

		title = "Add MMF";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("mmfMasterId", box.get(MMF_DEPARTMENT_M_ID));
		map.put("internalIndentId", box.get("internalIndentId"));
		map.put("hiddenFieldForRecords", "true");
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView doAddMmfItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		box.put(CHECKED_BY, box.get("checkedBy").toString());
		box.put(PREPARED_BY, box.get("preparedBy").toString());
		map = storesHandlerService.doAddMmfItems(box);
		jsp = MMF_DEPARTMENT_ADDITION_JSP;
		title = "Add MMF Items";
		map.put("hiddenFieldForRecords", box.get("hiddenFieldForRecords"));
		map.put("contentJsp", jsp);
		map.put("title", title);
		// map.put("mmfMasterId", box.get(MMF_DEPARTMENT_M_ID));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateGridItemsInMmf(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.updateGridItemsInMmf(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp += ".jsp";
		title = "Store MMF";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getCurrentYearMmf(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getCurrentYearMmf(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView deleteGridItemsForMmf(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.deleteGridItemsForMmf(box);
		jsp = STORE_MMF_DEPARTMENT_JSP;
		jsp += ".jsp";
		title = "MMF Deletion ";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printMmfEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int docId = 0;
		String docNo = "";

		String period = null;

		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			docNo = box.get("docId");
			requestParameters.put("DOC_NO", docNo);
			// }

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_ENTRYFORM), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRYFORM + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	/*
	 * Start of methods Methods for raising CIV
	 */
	// -----------------------New Grid for Department
	// Indent-------------------------------------------
	public ModelAndView showDepartmentIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		map = storesHandlerService.showDepartmentIndent(deptId, hospitalId);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent To Department";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getDepartmentIndentData(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		if (request.getParameter("pvmsNo") != null) {
			String pvmsNo = request.getParameter("pvmsNo");
			box.put("pvmsNo", pvmsNo);
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}

		map = storesHandlerService.getDepartmentIndentData(box);

		jsp = STORE_DEPARTMENT_INDENT_JSP;
		title = "Department Indent";

		jsp = jsp + ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView createAndImportDepartmentIndentData(
			HttpServletRequest request, HttpServletResponse response) {

		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int userId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
		}
		box.put("userId", userId);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.createAndImportDepartmentIndentData(box);
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		map.putAll(storesHandlerService
				.showDepartmentIndent(deptId, hospitalId));
		map.put("finalDemandNo", box.getString(DEMAND_NO));
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp = jsp + ".jsp";
		title = "Indent To Department";
		map.put("fromImport", "fromImport");
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAddDepartmentIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		synchronized (this) {
			Box box = HMSUtil.getBox(request);
			session = request.getSession();
			int deptId = Integer.valueOf(session.getAttribute("deptId")
					.toString());
			int storeDepartmentId = 0;
			int hospitalId = 0;
			if (request.getParameter("storeDepartmentId") != null
					&& !request.getParameter("storeDepartmentId").equals("")) {
				storeDepartmentId = Integer.parseInt(request
						.getParameter("storeDepartmentId"));
			}
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) Integer.valueOf(session.getAttribute(
						HOSPITAL_ID).toString());
			}
			// page---"+ box.get("numOfRows"));
			box.put("deptId", deptId);
			box.put("hospitalId", hospitalId);
			// map =
			// storesHandlerService.getItemDetailsForDepartmentIndent(box);
			map = storesHandlerService.showAddDepartmentIndentJsp(box);
			jsp = DEPARTMENT_INDENT_ADDITION_JSP;
			title = "Add Department Indent";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("internalIndentId", box.get("internalIndentId"));
			map.put("storeDepartmentId", storeDepartmentId);
		}
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showAddDepartmentIndentJspForNextRecord(
			HttpServletRequest request, HttpServletResponse response) {
		int itemId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		// page---"+ box.get("numOfRows"));
		box.put("deptId", deptId);

		if (request.getParameter("buttonName") != null) {
			Vector items = box.getVector("itemId");
			int max = items.size() - 1;
			itemId = Integer.valueOf(items.get(max).toString());
			box.put("itemId", itemId);
		} else {

			itemId = Integer.parseInt(box.getString("itemIdForNextRecord"));
			box.put("itemId", itemId);
		}

		map = storesHandlerService
				.getItemDetailsForDepartmentIndentForNextRecord(box);
		PagedArray pagedArray = (PagedArray) map.get("pagedArray");
		jsp = DEPARTMENT_INDENT_ADDITION_JSP;
		title = "Add Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("pagedArray", pagedArray);
		map.put("internalIndentId", box.get("internalIndentId"));
		map.put("hiddenFieldForRecords", "true");
		return new ModelAndView(jsp, "map", map);

	}

	/*
	 * End of methods Methods for raising CIV
	 */

	/*
	 * public ModelAndView doAddInternalIndentItems(HttpServletRequest request,
	 * HttpServletResponse response) { Map<String, Object> map = new
	 * HashMap<String, Object>();
	 * 
	 * int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
	 * box.get("hiddenFieldForRecords")); map =
	 * storesHandlerService.doAddInternalIndentItems(box); jsp =
	 * DEPARTMENT_INDENT_ADDITION_JSP; map.put("hiddenFieldForRecords",
	 * box.get("hiddenFieldForRecords")); title = "Add Department Indent";
	 * map.put("contentJsp", jsp); map.put("title", title); //
	 * map.put("internalIndentId", box.get("internalIndentId")); return new
	 * ModelAndView(jsp, "map", map); }
	 */
	public ModelAndView doAddInternalIndentItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		synchronized (this) {
			int deptId = 0;
			int hospitalId = 0;
			int userId = 0;
			if (session.getAttribute("deptId") != null) {
				deptId = Integer.valueOf(session.getAttribute("deptId")
						.toString());
			}
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = Integer.valueOf(session.getAttribute(HOSPITAL_ID)
						.toString());
			}
			if (session.getAttribute(USER_ID) != null) {
				userId = Integer.valueOf(session.getAttribute(USER_ID)
						.toString());
			}

			Box box = HMSUtil.getBox(request);
			box.put("deptId", deptId);
			box.put(HOSPITAL_ID, hospitalId);
			box.put(USER_ID, userId);
			int storeDepartmentId = 0;
			if (request.getParameter("storeDepartmentId") != null
					&& !request.getParameter("storeDepartmentId").equals("")) {
				storeDepartmentId = Integer.parseInt(request
						.getParameter("storeDepartmentId"));
			}
			map = storesHandlerService.doAddInternalIndentItems(box);
			map.putAll(storesHandlerService.showAddDepartmentIndentJsp(box));
			jsp = DEPARTMENT_INDENT_ADDITION_JSP;
			map.put("hiddenFieldForRecords", box.get("hiddenFieldForRecords"));
			title = "Add Department Indent";
			map.put("storeDepartmentId", storeDepartmentId);
			map.put("contentJsp", jsp);
			map.put("title", title);
		}
		// map.put("internalIndentId", box.get("internalIndentId"));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateGridItemsInDepartmentIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.valueOf(session.getAttribute("deptId").toString());

		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.valueOf(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put("deptId", deptId);
		box.put(HOSPITAL_ID, hospitalId);

		map = storesHandlerService.updateGridItemsInDepartmentIndent(box);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp += ".jsp";
		title = "Update Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView deleteGridItemsForDepartmentIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.valueOf(session.getAttribute("deptId").toString());

		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.valueOf(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put("deptId", deptId);
		box.put(HOSPITAL_ID, hospitalId);
		map = storesHandlerService.deleteGridItemsForDepartmentIndent(box);
		jsp = STORE_DEPARTMENT_INDENT_JSP;
		jsp += ".jsp";
		title = "Delete Department Indent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// ---------------------------------- Physical
	// Stock----------------------------------------

	@SuppressWarnings("unchecked")
	public ModelAndView searchPhysicalStock(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		Map<String, Object> map = new HashMap<String, Object>();

		int departmentId = 0;

		if (request.getParameter(DEPARTMENT_ID) != null) {
			departmentId = Integer
					.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		map = storesHandlerService.searchPhysicalStock(departmentId);

		jsp = "soDetailPhysicalStock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("departmentId", departmentId);
		return new ModelAndView(jsp, "map", map);
	}

	// New Grid For Physical Stock

	public ModelAndView showPhysicalStockJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		map = storesHandlerService.showPhysicalStock(deptId, hospitalId);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		// jsp = "certificateOfStockTakingTemp";
		jsp = jsp + ".jsp";
		title = "Physical Stock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showStockTakingAddJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int deptId = Integer.valueOf(session.getAttribute("deptId").toString());
		box.put("deptId", deptId);
		map = storesHandlerService.getItemDetailsForStockTakingAdd(box);
		jsp = STOCK_TAKING_ADDITION_JSP;
		title = "Stock Taking Items Addition";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView doAddStockTakingItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.doAddStockTakingItems(box);
		jsp = STOCK_TAKING_ADDITION_JSP;
		title = "Stock Taking Items Addition";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showPhysicalStockReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Date physicalStockDate = null;
		int deptId = 0;

		try {
			if (request.getParameter(PHYSICAL_STOCK_DATE) != null
					&& !(request.getParameter(PHYSICAL_STOCK_DATE).equals(""))) {
				physicalStockDate = HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter(PHYSICAL_STOCK_DATE));
			}
			if (request.getParameter(DEPARTMENT_ID) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				deptId = Integer.parseInt(request.getParameter(DEPARTMENT_ID));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> dataMap = getHospitalParameterDetails(request);
		map = storesHandlerService.getDBConnection();

		map.put("PHYSICAL_DATE", physicalStockDate);
		map.put("DEPART", deptId);
		String deptName = "";
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
			map.put("deptName", deptName);

		}
		map.put("hospitalName", (String) dataMap.get("hospitalName"));
		map.put("hospitalAddress", (String) dataMap.get("hospitalAddress"));

		byte[] bytes = null;
		try {

			HMSUtil.generateReport("Certificate_stock_taking", map,
					(Connection) map.get("conn"), response, getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		try {
			((Connection) map.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			((Connection) map.get("conn")).close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView createGridForPhysicalStockData(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		int userId = 0;
		int hospitalId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
			box.put("userId", userId);
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		map = storesHandlerService.createGridForPhysicalStockData(box);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp = jsp + ".jsp";
		title = "Certificate to Physical Stock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updateGridItemsInPhysicalStock(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.updateGridItemsInPhysicalStock(box);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp += ".jsp";
		title = "Certificate Physical Stock Taking Updation";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getGridDataForPhysicalStock(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		if (request.getParameter("flag") != null
				&& !request.getParameter("flag").equals("")) {
			box.put("pageno", "1");
		}
		map = storesHandlerService.getGridDataForPhysicalStock(box);
		jsp = STORE_PHYSICAL_STOCK_JSP;
		jsp = jsp + ".jsp";
		title = "Certificate to Physical Stock";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// ---------------------------------- Physical /
	// Stock----------------------------------------
	public ModelAndView showAdjustmentForSearchJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();

		map = storesHandlerService.showAdjustmentForSearchJsp(box);
		jsp = ADJUSTMENT_SEARCH_JSP;
		jsp = jsp + ".jsp";
		title = "Adjustment";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAdjustmentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		int departmentId = 0;
		String physicalStockMDate = "";
		if (request.getParameter(DEPARTMENT_ID) != null
				&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
			departmentId = Integer
					.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		if (!request.getParameter(PHYSICAL_STOCK_DATE).equals("0")
				&& !(request.getParameter(PHYSICAL_STOCK_DATE).equals(""))) {
			physicalStockMDate = request.getParameter(PHYSICAL_STOCK_DATE);
		}
		box.put("departmentId", departmentId);
		box.put("physicalStockMDate", physicalStockMDate);

		map = storesHandlerService.showAdjustment1(box);
		jsp = ADJUSTMENT_JSP;
		jsp = jsp + ".jsp";
		title = "Adjustment";
		map.put("departmentId", departmentId);
		map.put("physicalStockMDate", physicalStockMDate);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	/*
	 * public ModelAndView storeItemBatch(HttpServletRequest request,
	 * HttpServletResponse response) {
	 * 
	 * 
	 * session = request.getSession(); boolean successfully = false; Map<String,
	 * Object> map = new HashMap<String, Object>(); int adjustmentID =
	 * Integer.parseInt(request.getParameter("adjustmentID")); int brandId =
	 * Integer.parseInt(request.getParameter("brandId")); String batchNo =
	 * request.getParameter("batchNo"); BigDecimal costPrice = new
	 * BigDecimal(request.getParameter("costPrice")); BigDecimal surplusStock =
	 * new BigDecimal(request .getParameter("surplusStock")); BigDecimal
	 * deficient = new BigDecimal(request.getParameter("deficient"));
	 * 
	 * number for Transaction table====" + batchNo + "===rate of the brand
	 * selected==========" + costPrice + "surplus=====" + surplusStock);
	 * 
	 * map.put("adjustmentID", adjustmentID); map.put("brandId", brandId);
	 * map.put("batchNo", batchNo); map.put("costPrice", costPrice);
	 * map.put("surplusStock", surplusStock); map.put("deficient", deficient);
	 * 
	 * successfully = storesHandlerService.storeItemBatch(map);
	 * 
	 * if (successfully) {
	 * 
	 * jsp = STORE_PHYSICAL_STOCK_JSP; } else { jsp = STORE_PHYSICAL_STOCK_JSP;
	 * } jsp += ".jsp"; map.put("message", message); map.put("contentJsp", jsp);
	 * map.put("title", title); return new ModelAndView("index", "map", map); }
	 */

	public ModelAndView addAdjustment(HttpServletRequest request,
			HttpServletResponse response) {
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		int departmentId = 0;
		String adjustmentNo = "";
		Date[] expDateArray = new Date[100];
		Date expDate = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		Date adjustmentDate = null;
		int adjutsmentId = 0;
		int physicalStockMId = 0;
		String approvedBy = "";
		String remarks = "";
		String reason = "";
		Map<String, Object> infoMap = new HashMap<String, Object>();
		String lastChgBy = "";
		boolean successfully = false;
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		adjustmentNo = box.get("adjustmentNo");
		box.put("adjustmentNo", adjustmentNo);
		boolean flag = false;
		try {
			flag = storesHandlerService.addAdjustment(box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Adjustment Records Added & Stock Updated Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = STORES_MESSAGE_JSP;
		url = "/hms/hms/stores?method=showPhysicalStockJsp";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("adjustmentNo", adjustmentNo);
		return new ModelAndView("index", "map", map);
	}

	// ********************************END Of Modules By Deepti
	// Tevatia****************************

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// ---------------------------Store Balance ---------------------------

	public ModelAndView showBalanceJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService.showBalance(dataMap);
		jsp = "storeBalance";
		jsp = jsp + ".jsp";
		title = "Balance";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addNextOrSubmitBalance(HttpServletRequest request,
			HttpServletResponse response) {

		StoreBalanceM storeBalanceM = new StoreBalanceM();
		StoreBalanceT storeBalanceT = new StoreBalanceT();

		String balanceNo = "";
		int sectionId = 0;
		int pageNo = 1;
		int balanceId = 0;
		Date balanceDate = null;
		int approvedByEmployeeId = 0;
		String remarks = "";
		String buttonName = "";
		int itemId = 1;
		int stockIn = 0;
		int qtyInDemand = 0;
		int qtyInMmf = 0;
		int qtyReceived = 0;
		int radioVal = 0;
		int noOfRows = 0;

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		String lastChgBy = "";
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String successfullyAdded = "no";
		List expiryDateList = new ArrayList();
		Box box = HMSUtil.getBox(request);
		String url = "";
		int rows = 0;
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));

		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter(BALANCE_ID) != null) {
				balanceId = Integer.parseInt(request.getParameter(BALANCE_ID));
			}

			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				lastChgDate = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));
			}

			if (request.getParameter(BALANCE_NO) != null) {
				balanceNo = (request.getParameter(BALANCE_NO));
			}

			if (request.getParameter(BALANCE_DATE) != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = (request.getParameter(BALANCE_DATE));
				// balanceDate = java.sql.Date.valueOf(date4MySQL);
				balanceDate = HMSUtil
						.convertStringTypeDateToDateType(date4MySQL);
			}
			if (request.getParameter(REMARKS) != null
					&& !(request.getParameter(REMARKS).equals(""))) {
				remarks = request.getParameter(REMARKS);
			}

			if (session.getAttribute("users") != null) {
				Users users = (Users) session.getAttribute("users");
				approvedByEmployeeId = users.getEmployee().getId();
			}

			/*
			 * if (request.getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE) !=
			 * null) { approvedByEmployeeId = Integer.parseInt(request
			 * .getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE)); }
			 */

		} catch (Exception e) {

			e.printStackTrace();
		}
		String headerStored = "no";
		if (pageNo == 1) {
			try {

				// storeBalanceM.setBalanceNo(balanceNo);

				storeBalanceM.setBalanceDate(balanceDate);
				storeBalanceM.setBalanceNo(balanceNo);

				MasEmployee approvedBy = new MasEmployee();
				approvedBy.setId(approvedByEmployeeId);
				storeBalanceM.setApprovedBy(approvedBy);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeBalanceM.setDepartment(masDepartment);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeBalanceM.setHospital(masHospital);

				storeBalanceM.setRemarks(remarks);
				storeBalanceM.setStatus("P");
				Users users = new Users();
				users.setId(userId);
				storeBalanceM.setLastChgBy(users);

				storeBalanceM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(lastChgDate));

				storeBalanceM.setLastChgTime(lastChgTime);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			headerStored = "yes";
			infoMap.put("headerStored", headerStored);
		}

		int length = 0;
		List<StoreBalanceT> storeBalanceTlist = new ArrayList<StoreBalanceT>(10);
		BigDecimal[] qtyArray = new BigDecimal[10];
		BigDecimal[] unitRateAmountArray = new BigDecimal[10];
		try {

			Vector mrp = box.getVector("mrp");

			Vector dispensingPrice = box.getVector("dispensingPrice");
			Vector expiryDate = box.getVector("expiryDate");
			Vector manufactureDate = box.getVector("manufactureDate");
			Vector amount = box.getVector("amountBalanceTemp");
			//int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,SR_NO);
			//int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(request, ITEM_ID);
			Vector itemIds = box.getVector("itemId");
			Vector batchNo = box.getVector("batch");
			Vector manufactureId = box.getVector("manufacturerId");
			Vector qty = box.getVector("qtyBalanceTemp");
			Vector unitRate = box.getVector("unitRateBalanceTemp");
			
			// int brandIdArray[] = JKTRequestUtils.getRequiredIntParameters(
			// request, BRAND_ID);
			//String batchNoArray[] = JKTRequestUtils.getRequiredStringParameters(request, BATCH_NO);
			//String expriyDateArray[] = JKTRequestUtils.getRequiredStringParameters(request, EXPIRY_DATE);

			/*String xx[] = JKTRequestUtils.getRequiredStringParameters(request,
					QTY_BALANCE);
			int xxLegnt = xx.length;
			for (int i = 0; i < xxLegnt; i++) {
				BigDecimal val = new BigDecimal(xx[i]);
				qtyArray[i] = val;
			}*/
			/*String yy[] = JKTRequestUtils.getRequiredStringParameters(request,
					UNIT_RATE_BALANCE);
			int yyLegnt = yy.length;
			for (int i = 0; i < yyLegnt; i++) {
				BigDecimal val = new BigDecimal(yy[i]);
				unitRateAmountArray[i] = val;
			}*/

			/*if (buttonName.equals("next")) {
				length = 8;
			} else {
				length = noOfRows;
			}*/
			for (int i = 0; i < itemIds.size(); i++) {
				
				if (itemIds.get(i) != null && !itemIds.get(i).equals("")) {
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
				
					MasStoreItem masItem = new MasStoreItem();
					masItem.setId(Integer.parseInt(itemIds.get(i).toString()));
					storeBalanceTObj.setItem(masItem);

					/*if (!qtyArray[i].equals("0")) {
						storeBalanceTObj.setQty(qtyArray[i]);
					} else {
						storeBalanceTObj.setQty(null);
					}*/
					
					if (qty.get(i) != null && !qty.get(i).equals("")) {
						storeBalanceTObj.setQty(new BigDecimal(qty.get(i).toString()));
					} else {
						storeBalanceTObj.setQty(null);
					}
					
					if (unitRate.get(i) != null && !unitRate.get(i).equals("")) {
						storeBalanceTObj.setUnitRate(new BigDecimal(unitRate.get(i).toString()));
					} else {
						storeBalanceTObj.setUnitRate(null);
					}
					
					/*if (!unitRateAmountArray[i].equals("0")) {
						storeBalanceTObj.setUnitRate(unitRateAmountArray[i]);
					} else {
						storeBalanceTObj.setUnitRate(null);
					}*/
					if (expiryDate.get(i) != null && !expiryDate.get(i).equals("")) {
						storeBalanceTObj.setExpiryDate(HMSUtil
								.convertStringTypeDateToDateType(expiryDate
										.get(i).toString()));
					}else{
						storeBalanceTObj.setExpiryDate(null);
					}
					if (manufactureDate.get(i) != null
							&& !manufactureDate.get(i).equals("")) {
						storeBalanceTObj
								.setManufactureDate(HMSUtil
										.convertStringTypeDateToDateType(manufactureDate
												.get(i).toString()));
					}else{
						storeBalanceTObj.setManufactureDate(null);
					}
					if (amount.get(i) != null && !amount.get(i).equals("")) {
						storeBalanceTObj.setAmount(new BigDecimal(amount.get(i)
								.toString()));
					}
					if (batchNo.get(i) != null && !batchNo.get(i).equals("")) {
						storeBalanceTObj.setBatchNo(batchNo.get(i).toString());
					}
					if (manufactureId.get(i) != null && !manufactureId.get(i).equals("")) {
						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(Integer.parseInt(manufactureId.get(i).toString()));
						storeBalanceTObj.setManufacturer(masManufacturer);
					}
					/*
					 * if (mrp.get(i) != null && !mrp.get(i).equals("")) {
					 * storeBalanceTObj.setMrp(new BigDecimal(mrp.get(i)
					 * .toString())); } if (dispensingPrice.get(i) != null &&
					 * !dispensingPrice.get(i).equals("")) {
					 * storeBalanceTObj.setDispencingPrice(new BigDecimal(
					 * dispensingPrice.get(i).toString())); }/*
					 * 
					 * /* storeBalanceTObj.setQty(qtyArray[i]);
					 * storeBalanceTObj.setUnitRate(unitRateAmountArray[i]);
					 */

					/*if (!batchNoArray[i].equals("emptyString")) {
						storeBalanceTObj.setBatchNo(batchNoArray[i]);
					} else {
						storeBalanceTObj.setBatchNo(null);
					}*/
					/*if (!expriyDateArray[i].equals("emptyString")) {
						storeBalanceTObj
								.setExpiryDate(HMSUtil
										.convertStringTypeDateToDateType(expriyDateArray[i]));
					} else {
						storeBalanceTObj.setExpiryDate(null);
					}*/

					storeBalanceTlist.add(storeBalanceTObj);

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			dataMap.put("balanceDate", balanceDate);
			dataMap.put("deptId", deptId);
			dataMap.put("userId", userId);
			dataMap.put("hospitalId", hospitalId);
			dataMap.put("storeBalanceM", storeBalanceM);
			dataMap.put("storeBalanceTList", storeBalanceTlist);
			dataMap.put("pageNo", pageNo);
			dataMap.put("balanceId", balanceId);
			dataMap.put("balanceNo", balanceNo);
			synchronized (this) {
				map = (Map) storesHandlerService.addNextOrSubmitBalance(
						dataMap, box);
			}
			if (map.get("balanceId") != null)
				balanceId = Integer.parseInt("" + map.get("balanceId"));

			if (map.get("successfullyAdded") != null)
				successfullyAdded = "" + map.get("successfullyAdded");
		} catch (Exception e) {
			e.printStackTrace();
		}
		String messageTOBeVisibleToTheUser = "";
		if (successfullyAdded.equals("yes")) {
			messageTOBeVisibleToTheUser = "Balance Records Added Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Balance Records Not Added Successfully";
		}
		if (buttonName.equals("next")) {
			jsp = "storeBalance";
		} else {
			jsp = STORES_MESSAGE_JSP;
			url = "/hms/hms/stores?method=showBalanceJsp";
		}
		String balanceNoDisplay = "";
		if (map.get("balanceNoDisplay") != null) {
			balanceNoDisplay = (String) map.get("balanceNoDisplay");
		}
		pageNo = pageNo + 1;
		jsp += ".jsp";
		map.put("balanceNo", balanceNo);
		map.put("balanceDate", balanceDate);
		map.put("approvedByEmployeeId", approvedByEmployeeId);
		map.put("remarks", remarks);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchBalance(HttpServletRequest request,
			HttpServletResponse response) {
		String fromDate = "";
		String toDate = "";
		String balanceNo = "";
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		searchFieldMap.put("deptId", deptId);
		searchFieldMap.put("hospitalId", hospitalId);
		searchFieldMap.put("userName", userName);

		try {
			if (request.getParameter(FROM_DATE) != null) {
				fromDate = request.getParameter(FROM_DATE);
			}
			if (request.getParameter(TO_DATE) != null) {
				toDate = request.getParameter(TO_DATE);
			}
			if (request.getParameter(SEARCH_BALANCE_NO) != null) {
				balanceNo = request.getParameter(SEARCH_BALANCE_NO);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		searchFieldMap.put("fromDate", fromDate);
		searchFieldMap.put("toDate", toDate);
		searchFieldMap.put("max", balanceNo);
		try {
			tempMap = storesHandlerService.showBalance(searchFieldMap);
			if (tempMap.get("searchStoreBalanceMList") != null)
				searchStoreBalanceMList = (List) tempMap
						.get("searchStoreBalanceMList");
			map = storesHandlerService.searchBalance(searchFieldMap);
			map.put("searchStoreBalanceMList", searchStoreBalanceMList);

		} catch (Exception e) {

			e.printStackTrace();
		}
		jsp = SEARCH_BALANCE_JSP;
		jsp = jsp + ".jsp";
		title = "Search Balance";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView modifyBalance(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<MasEmployee> approvedByList = new ArrayList<MasEmployee>();
		List<StoreBalanceM> searchStoreBalanceList = new ArrayList<StoreBalanceM>();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		int pageNo = 1;
		jsp = BALANCE_MODIFY_JSP;
		jsp += ".jsp";
		int radio_str = 0;
		if (request.getParameter("tempRadioValue") != null) {
			radio_str = Integer
					.parseInt(request.getParameter("tempRadioValue"));
			map = (Map) storesHandlerService.getBalance1ModifyMap(radio_str,
					pageNo, dataMap);

		}

		map2 = storesHandlerService.showBalance(dataMap);
		searchStoreBalanceList = (List) map2.get("searchStoreBalanceList");
		approvedByList = (List) map2.get("approvedByList");

		map.put("searchStoreBalanceList", searchStoreBalanceList);
		map.put("approvedByList", approvedByList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("radio_str", radio_str);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateNextOrSubmitBalance(HttpServletRequest request,
			HttpServletResponse response) throws java.text.ParseException {
		// Local Variable Declaration
		StoreBalanceM storeBalanceM = new StoreBalanceM();
		StoreBalanceT storeBalanceT = new StoreBalanceT();
		List<StoreBalanceT> storeIndentTListForUpdate = new ArrayList<StoreBalanceT>();
		List<StoreBalanceT> storeIndentTListForAdd = new ArrayList<StoreBalanceT>();
		Map<String, Object> masterAndDetailMap = new HashMap<String, Object>();
		List<StoreBalanceT> gridIndentTList = new ArrayList<StoreBalanceT>();
		StoreBalanceM storeBalanceMObj = new StoreBalanceM();
		Map map2 = new HashMap();

		String balanceNo = "";
		int approvedByEmployeeId = 0;
		String remarks = "";
		Date balanceDate = null;
		String nrs = "";

		int rows = 0;
		int balanceId = 0;
		Map infoMap = new HashMap();
		int totalRecords = 0;
		int idArrayLength = 0;
		int length = 0;
		Date[] expDateArray = new Date[100];
		Date expDate = null;
		String messageTOBeVisibleToTheUser = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String lastChgDate = (String) utilMap.get("currentDate");
		String lastChgTime = (String) utilMap.get("currentTime");
		String lastChgBy = "";
		// Grid related Variables
		int pageNo = 1;
		/** Represents Page No */
		String buttonName = "";
		/** Represents which button user clicked in JSP(Next/Submit) */
		String noDetailRecords = "no";
		/** Represents */
		String headerStored = "no";
		String url = "";
		int noOfRows = 0;
		// Method Body
		session = request.getSession();
		int deptId = 0;
		int userId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		try {
			if (request.getParameter("buttonName") != null) {
				buttonName = request.getParameter("buttonName");
			}
			if (request.getParameter("totalRecords") != null) {
				totalRecords = Integer.parseInt(request
						.getParameter("totalRecords"));
			}
			if (request.getParameter("pageNo") != null) {
				pageNo = Integer.parseInt(request.getParameter("pageNo"));

			}

			if (request.getParameter(NO_DETAIL_RECORDS) != null) {
				noDetailRecords = (request.getParameter(NO_DETAIL_RECORDS));

			}
			if (request.getParameter(NO_OF_ROWS) != null) {
				noOfRows = Integer.parseInt(request.getParameter(NO_OF_ROWS));
			}
			if (request.getParameter(BALANCE_ID) != null) {
				balanceId = Integer.parseInt(request.getParameter(BALANCE_ID));
			}
			if (request.getParameter(BALANCE_NO) != null) {
				balanceNo = request.getParameter(BALANCE_NO);
			}
			if (request.getParameter(REMARKS) != null
					&& !(request.getParameter(REMARKS).equals(""))) {
				remarks = request.getParameter(REMARKS);
			}
			if (request.getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE) != null) {
				approvedByEmployeeId = Integer.parseInt(request
						.getParameter(APPROVED_BY_EMPLOYEE_ID_BALANCE));
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				lastChgBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				lastChgDate = request.getParameter(CHANGED_DATE);
			}
			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				lastChgTime = request.getParameter(CHANGED_TIME);
			}

			try {
				String te = "";

				if (request.getParameter(BALANCE_DATE) != null) {
					te = (String) (request.getParameter(BALANCE_DATE));
					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(request.getParameter(BALANCE_DATE)));
					balanceDate = java.sql.Date.valueOf(date4MySQL);

				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (pageNo == 1) {
			try {

				storeBalanceM.setId(balanceId);

				storeBalanceM.setBalanceNo(balanceNo);

				storeBalanceM.setBalanceDate(balanceDate);

				MasEmployee approvedBy = new MasEmployee();
				approvedBy.setId(approvedByEmployeeId);
				storeBalanceM.setApprovedBy(approvedBy);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeBalanceM.setDepartment(masDepartment);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeBalanceM.setHospital(masHospital);

				storeBalanceM.setRemarks(remarks);
				Users users = new Users();
				users.setId(userId);
				storeBalanceM.setLastChgBy(users);

				storeBalanceM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(lastChgDate));

				storeBalanceM.setLastChgTime(lastChgTime);

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		BigDecimal[] qtyArray = new BigDecimal[10];
		BigDecimal[] unitRateAmountArray = new BigDecimal[10];
		try {
			Box box = HMSUtil.getBox(request);

			Vector mrp = box.getVector("mrp");
			Vector dispensingPrice = box.getVector("dispensingPrice");

			if (noDetailRecords.equals("no")) {

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int idArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, BALANCE_T_ID);
				idArrayLength = idArray.length;
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);

				// int brandIdArray[] =
				// JKTRequestUtils.getRequiredIntParameters(
				// request, BRAND_ID);
				String batchNoArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, BATCH_NO);

				String expriyDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, EXPIRY_DATE);

				String xx[] = JKTRequestUtils.getRequiredStringParameters(
						request, QTY_BALANCE);
				int xxLegnt = xx.length;
				for (int i = 0; i < xxLegnt; i++) {
					BigDecimal val = new BigDecimal(xx[i]);
					qtyArray[i] = val;
				}
				String yy[] = JKTRequestUtils.getRequiredStringParameters(
						request, UNIT_RATE_BALANCE);
				int yyLegnt = yy.length;
				for (int i = 0; i < yyLegnt; i++) {
					BigDecimal val = new BigDecimal(yy[i]);
					unitRateAmountArray[i] = val;
				}

				length = srNo.length;

				for (int i = 0; i < length; i++) {
					if (idArrayLength > 0) {

						StoreBalanceT storeBalanceTObj = new StoreBalanceT();

						storeBalanceTObj.setId(idArray[i]);

						storeBalanceTObj.setSrNo(srNo[i]);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeBalanceTObj.setItem(masItem);

						// MasStoreBrand masStoreBrand = new MasStoreBrand();
						// masStoreBrand.setId(brandIdArray[i]);
						// if (brandIdArray[i] != 0) {
						// storeBalanceTObj.setBrand(masStoreBrand);
						// } else {
						// storeBalanceTObj.setBrand(null);
						// }

						if (!batchNoArray[i].equals("emptyString")) {
							storeBalanceTObj.setBatchNo(batchNoArray[i]);
						} else {
							storeBalanceTObj.setBatchNo(null);
						}

						if (!expriyDateArray[i].equals("emptyString")) {
							storeBalanceTObj
									.setExpiryDate(HMSUtil
											.convertStringTypeDateToDateType(expriyDateArray[i]));
						} else {
							storeBalanceTObj.setExpiryDate(null);
						}

						if (!qtyArray[i].equals("0")) {
							storeBalanceTObj.setQty(qtyArray[i]);
						}
						if (mrp.get(i) != null) {
							storeBalanceTObj.setMrp(new BigDecimal(mrp.get(i)
									.toString()));
						}
						if (dispensingPrice.get(i) != null) {
							storeBalanceTObj.setDispencingPrice(new BigDecimal(
									dispensingPrice.get(i).toString()));
						}
						if (!unitRateAmountArray[i].equals("0")) {
							storeBalanceTObj
									.setUnitRate(unitRateAmountArray[i]);
						}
						StoreBalanceM storeBalanceM2 = new StoreBalanceM();
						storeBalanceM2.setId(balanceId);
						storeBalanceTObj.setStoreBalanceM(storeBalanceM2);

						storeIndentTListForUpdate.add(storeBalanceTObj);
					} else {

						if (itemIdArray[i] != 0) {
							StoreBalanceT storeBalanceTObj = new StoreBalanceT();

							storeBalanceTObj.setSrNo(srNo[i]);

							MasStoreItem masItem = new MasStoreItem();
							masItem.setId(itemIdArray[i]);
							storeBalanceTObj.setItem(masItem);

							// MasStoreBrand masStoreBrand = new
							// MasStoreBrand();
							// masStoreBrand.setId(brandIdArray[i]);
							// if (brandIdArray[i] != 0) {
							// storeBalanceTObj.setBrand(masStoreBrand);
							// } else {
							// storeBalanceTObj.setBrand(null);
							// }
							if (!batchNoArray[i].equals("emptyString")) {
								storeBalanceTObj.setBatchNo(batchNoArray[i]);
							} else {
								storeBalanceTObj.setBatchNo(null);
							}
							if (!expriyDateArray[i].equals("emptyString")) {
								storeBalanceTObj
										.setExpiryDate(HMSUtil
												.convertStringTypeDateToDateType(expriyDateArray[i]));
							} else {
								storeBalanceTObj.setExpiryDate(null);
							}

							if (!qtyArray[i].equals("0")) {
								storeBalanceTObj.setQty(qtyArray[i]);
							}

							if (!unitRateAmountArray[i].equals("0")) {
								storeBalanceTObj
										.setUnitRate(unitRateAmountArray[i]);
							}
							if (mrp.get(i) != null
									&& !mrp.get(i).toString().equals("")) {
								storeBalanceTObj.setMrp(new BigDecimal(mrp.get(
										i).toString()));
							}
							if (dispensingPrice.get(i) != null
									&& !dispensingPrice.get(i).toString()
											.equals("")) {
								storeBalanceTObj
										.setDispencingPrice(new BigDecimal(
												dispensingPrice.get(i)
														.toString()));
							}
							StoreBalanceM storeBalanceM2 = new StoreBalanceM();
							storeBalanceM2.setId(balanceId);
							storeBalanceTObj.setStoreBalanceM(storeBalanceM2);

							storeIndentTListForAdd.add(storeBalanceTObj);
						}
					}
					idArrayLength--;
				}
			} else {

				int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
						SR_NO);
				int itemIdArray[] = JKTRequestUtils.getRequiredIntParameters(
						request, ITEM_ID);
				// int brandIdArray[] =
				// JKTRequestUtils.getRequiredIntParameters(
				// request, BRAND_ID);
				String batchNoArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, BATCH_NO);
				String expriyDateArray[] = JKTRequestUtils
						.getRequiredStringParameters(request, EXPIRY_DATE);
				length = srNo.length;
				for (int i = 0; i < length; i++) {

					if (itemIdArray[i] != 0) {
						StoreBalanceT storeBalanceTObj = new StoreBalanceT();
						storeBalanceTObj.setSrNo(srNo[i]);

						MasStoreItem masItem = new MasStoreItem();
						masItem.setId(itemIdArray[i]);
						storeBalanceTObj.setItem(masItem);

						// MasStoreBrand masStoreBrand = new MasStoreBrand();
						// masStoreBrand.setId(brandIdArray[i]);
						// if (brandIdArray[i] != 0) {
						// storeBalanceTObj.setBrand(masStoreBrand);
						// } else {
						// storeBalanceTObj.setBrand(null);
						// }
						if (!batchNoArray[i].equals("emptyString")) {
							storeBalanceTObj.setBatchNo(batchNoArray[i]);
						} else {
							storeBalanceTObj.setBatchNo(null);
						}
						if (!expriyDateArray[i].equals("emptyString")) {
							storeBalanceTObj
									.setExpiryDate(HMSUtil
											.convertStringTypeDateToDateType(expriyDateArray[i]));
						} else {
							storeBalanceTObj.setExpiryDate(null);
						}
						if (qtyArray[i] != null && !qtyArray[i].equals("0")) {
							storeBalanceTObj.setQty(qtyArray[i]);
						} else {
							storeBalanceTObj.setQty(new BigDecimal("0"));
						}
						if (unitRateAmountArray[i] != null
								&& !unitRateAmountArray[i].equals("0")) {
							storeBalanceTObj
									.setUnitRate(unitRateAmountArray[i]);
						} else {
							storeBalanceTObj.setUnitRate(new BigDecimal("0"));
						}
						if (mrp.get(i) != null) {
							storeBalanceTObj.setMrp(new BigDecimal(mrp.get(i)
									.toString()));
						} else {
							storeBalanceTObj.setMrp(new BigDecimal(0));
						}
						if (dispensingPrice.get(i) != null) {
							storeBalanceTObj.setDispencingPrice(new BigDecimal(
									dispensingPrice.get(i).toString()));
						} else {
							storeBalanceTObj.setDispencingPrice(new BigDecimal(
									0));
						}
						StoreBalanceM storeBalanceM2 = new StoreBalanceM();
						storeBalanceM2.setId(balanceId);
						storeBalanceTObj.setStoreBalanceM(storeBalanceM2);
						if (mrp.get(i) != null) {
							storeBalanceTObj.setMrp(new BigDecimal(mrp.get(i)
									.toString()));
						}
						if (dispensingPrice.get(i) != null) {
							storeBalanceTObj.setDispencingPrice(new BigDecimal(
									dispensingPrice.get(i).toString()));
						}
						storeIndentTListForAdd.add(storeBalanceTObj);
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		masterAndDetailMap.put("storeIndentTListForUpdate",
				storeIndentTListForUpdate);
		masterAndDetailMap
				.put("storeIndentTListForAdd", storeIndentTListForAdd);
		masterAndDetailMap.put("deptId", deptId);
		masterAndDetailMap.put("storeBalanceM", storeBalanceM);
		masterAndDetailMap.put("balanceId", balanceId);
		masterAndDetailMap.put("pageNo", pageNo);

		boolean flag = storesHandlerService
				.updateNextBalance1(masterAndDetailMap);

		pageNo++;
		if (request.getParameter("gopage") != null
				&& !request.getParameter("gopage").equals("")) {
			pageNo = Integer.parseInt(request.getParameter("gopage"));
		}
		if (flag) {
			if (balanceId != 0) {
				map = (Map) storesHandlerService.getBalance1ModifyMap(
						balanceId, pageNo, dataMap);
			}
			if (map.get("gridIndentTList") != null)
				gridIndentTList = (List<StoreBalanceT>) map
						.get("gridIndentTList");

			if (gridIndentTList.size() == 0) {
				noDetailRecords = "yes";
			}
			if ((gridIndentTList.size() != 0) || (buttonName.equals("next"))) {
				jsp = "nextModifyBalance";
			}
			if ((buttonName.equals("submit"))) {
				jsp = STORES_MESSAGE_JSP;
				messageTOBeVisibleToTheUser = "Balance Records Updated Successfully";
				url = "/hms/hms/stores?method=showBalanceJsp";
			}

		} else {
			jsp = STORES_MESSAGE_JSP;
			messageTOBeVisibleToTheUser = "Balance Records Not Updated Successfully";
			url = "/hms/hms/stores?method=showBalanceJsp";
		}

		jsp += ".jsp";
		map.put("url", url);
		map.put("max", balanceNo);
		map.put("balanceNo", balanceNo);
		map.put("approvedByEmployeeId", approvedByEmployeeId);
		map.put("balanceId", balanceId);
		map.put("pageNo", pageNo);
		map.put("contentJsp", jsp);
		map.put("noDetailRecords", noDetailRecords);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemListForLoanoutByAutocompleteBalance(
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String userName = "";
			int deptId = 0;
			int hospitalId = 0;

			session = request.getSession();
			if (session.getAttribute("userName") != null)
				userName = (String) session.getAttribute("userName");
			if (session.getAttribute("hospitalId") != null)
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			// --------------------------------------------------------------------------------
			String itemNameField = "";
			String autoHint = "";
			Map<String, Object> dataMap = new HashMap<String, Object>();
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			int balanceId = 0;
			if (request.getParameter("balanceId") != null) {
				balanceId = Integer.parseInt(request.getParameter("balanceId"));
			}
			if (request.getParameter("itemGroupId") != null
					&& !request.getParameter("itemGroupId").equals("")) {
				int groupId = Integer.parseInt(request.getParameter("itemGroupId"));
				dataMap.put("groupId", groupId);
			}
			if (request.getParameter("itemTypeId") != null
					&& !request.getParameter("itemTypeId").equals("")) {
				int itemTypeId = Integer.parseInt(request
						.getParameter("itemTypeId"));
				dataMap.put("itemTypeId", itemTypeId);
			}
			if (request.getParameter("sectionId") != null
					&& !request.getParameter("sectionId").equals("")) {
				int sectionId = Integer.parseInt(request.getParameter("sectionId"));
				dataMap.put("sectionId", sectionId);
			}
			if (request.getParameter("categoryId") != null
					&& !request.getParameter("categoryId").equals("")) {
				int categoryId = Integer.parseInt(request
						.getParameter("categoryId"));
				dataMap.put("categoryId", categoryId);
			}
			if (request.getParameter("classId") != null
					&& !request.getParameter("classId").equals("")) {
				int classId = Integer.parseInt(request.getParameter("classId"));
				dataMap.put("classId", classId);
			}
			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("balanceId", balanceId);
			dataMap.put("hospitalId", hospitalId);
			map = storesHandlerService
					.getItemListForLoanoutByAutocompleteBalance(dataMap);
			jsp = "result";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public void fillItemsForBalance(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String pvmsNo = "";
		List objectList = new ArrayList();
		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.fillItemsForBalance(dataMap);
		if (map.get("objectList") != null) {
			objectList = (List) map.get("objectList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();

				sb.append("<item>");
				sb.append("<id>" + object[0] + "</id>");
				sb.append("<pvms>" + object[1] + "</pvms>");
				sb.append("<au>" + object[3] + "</au>");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public ModelAndView lastDemandNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasEmployee> approvedByList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestedByList = new ArrayList<MasEmployee>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		int pageNo = 1;
		map = (Map) storesHandlerService.showLastDemandNo(pageNo);

		searchStoreInternalIndentMList = (List) map
				.get("searchStoreInternalIndentMList");
		departmentList = (List) map.get("departmentList");
		approvedByList = (List) map.get("approvedByList");
		requestedByList = (List) map.get("requestByList");
		sectionList = (List) map.get("sectionList");
		jsp = "lastDemandNo";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("sectionList", sectionList);
		map.put("approvedByList", approvedByList);
		map.put("requestByList", requestedByList);
		map.put("departmentList", departmentList);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView lastDocNo(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasEmployee> approvedByList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		int pageNo = 1;
		map = (Map) storesHandlerService.showLastDocNo(pageNo);

		searchStoreMmfDepartmentMList = (List) map
				.get("searchStoreMmfDepartmentMList");
		departmentList = (List) map.get("departmentList");
		approvedByList = (List) map.get("approvedByList");
		jsp = "lastDocNo";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("approvedByList", approvedByList);
		map.put("departmentList", departmentList);

		return new ModelAndView("index", "map", map);

	}

	// -----------------------New Grid for
	// Ack-------------------------------------------

	public ModelAndView showAckJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		map = storesHandlerService.showAckJsp(deptId, hospitalId);
		jsp = STORE_ACK_JSP;
		jsp = jsp + ".jsp";
		title = "Acknowledgment";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getAcknowledgementDetails(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		map = storesHandlerService
				.getAcknowledgementDetails(deptId, hospitalId);
		jsp = STORE_ACK_JSP;
		jsp = jsp + ".jsp";
		title = "Acknowledgment";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView createGridIssueData(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String issueNo = "";
		String issue_No = "";
		int deptId = 0;
		int currentDept = 0;
		int hospitalId = 0;
		int counter = 0;
		String issueDate = "";
		if (box.get("rowNum") != null && !"".equals(box.get("rowNum"))) {
			counter = box.getInt("rowNum");
		}
		if (request.getParameter(ISSUE_NO + counter) != null
				&& !(request.getParameter(ISSUE_NO + counter).equals(""))) {
			issueNo = request.getParameter(ISSUE_NO + counter);
			box.put("issueNo", issueNo);
		}
		if (request.getParameter(ISSUE_UNIT_ID + counter) != null
				&& !(request.getParameter(ISSUE_UNIT_ID + counter).equals(""))) {
			issue_No = request.getParameter(ISSUE_UNIT_ID + counter);
			box.put("issue_No", issue_No);
		}

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		if (session.getAttribute("deptId") != null) {
			currentDept = (Integer) session.getAttribute("deptId");
			box.put(RequestConstants.DEPARTMENT_ID, currentDept);
		}
		if (box.get(RequestConstants.DEPT_ID + counter) != null
				&& !"".equals(box.get(RequestConstants.DEPT_ID + counter))) {
			deptId = box.getInt(RequestConstants.DEPT_ID + counter);
		}
		if (box.get("issueDate" + counter) != null
				&& !"".equals(box.get("issueDate" + counter))) {
			issueDate = box.get("issueDate" + counter);
		}

		box.put("hospitalId", hospitalId);
		map = storesHandlerService.createGridIssueData(box);
		jsp = STORE_ACK_JSP;
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put(RequestConstants.DEPT_ID, deptId);
		map.put("indentIssueDate", issueDate);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView addAck(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		String message = "";
		int hospitalId = 0;
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.doAddAckItems(box);
		
		if (map.get("flag") != null && ((Boolean) map.get("flag")).equals(true)) {
			if(map.get("message") != null){
				message = (String)map.get("message");
			}
			//message = "Acknowledgement done successfully";

		} else {
			message = "Acknowledgement  not done successfully";
		}

		map = storesHandlerService.showAckJsp(deptId, hospitalId);
		map.put("message", message);
		jsp = STORE_ACK_JSP;
		jsp = jsp + ".jsp";
		title = "Add Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView closeAckJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		map = storesHandlerService.showAckJsp(deptId, hospitalId);
		jsp = "closeAck";
		jsp = jsp + ".jsp";
		title = "Acknowledgment";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// ------------------------------------------------ AT/Supply Order Entry
	// ----------------------
	@SuppressWarnings("unchecked")
	public ModelAndView searchSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) throws ServletRequestBindingException {
		Map<String, Object> map = new HashMap<String, Object>();

		int indentId = 0;

		if (request.getParameter(INDENT_ID) != null
				&& !(request.getParameter(INDENT_ID).equals(""))) {
			indentId = Integer.parseInt(request.getParameter(INDENT_ID));
		}
		map = storesHandlerService.searchSupplyOrderEntry(indentId);

		jsp = "soDetail";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indentId", indentId);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showSupplyOrderEntryJsp();
		jsp = STORE_SUPPLIER_ORDER_ENTRY_JSP;
		jsp = jsp + ".jsp";
		title = "Supply Order Entry ";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("deprecation")
	public ModelAndView addSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		String encodedBy = "";
		String changedBy = "";
		int indentId = 0;
		int length = 0;
		List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist = new ArrayList<StoreSupplyOrderEntry>();
		try {
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdPVMSArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_PVMS_NO);
			int itemIdNomenclatureArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, ITEM_ID_NOMENCLATURE);
			int uomIdAVArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_AV);

			int intendTIdmmf[] = JKTRequestUtils.getRequiredIntParameters(
					request, INDENT_T_ID_QTY_IN_MMF);
			int supplierIdVendorNameArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, SUPPLIER_ID_VENDOR_NAME);
			String suppluOrderNo[] = JKTRequestUtils
					.getRequiredStringParameters(request, SUPPLY_ORDER_NO);

			if (request.getParameter(INDENT_ID_SUPPLY) != null) {
				indentId = Integer.parseInt(request
						.getParameter(INDENT_ID_SUPPLY));
			}
			if (request.getParameter(ENCODED_BY) != null) {
				encodedBy = (request.getParameter(ENCODED_BY));
			}
			if (request.getParameter(ENCODED_TIME) != null
					&& !(request.getParameter(ENCODED_TIME).equals(""))) {
				time = request.getParameter(ENCODED_TIME);
			}
			if (request.getParameter(ENCODED_DATE) != null
					&& !(request.getParameter(ENCODED_DATE).equals(""))) {
				date = request.getParameter(ENCODED_DATE);
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				date = request.getParameter(CHANGED_DATE);
			}

			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				time = request.getParameter(CHANGED_TIME);
			}

			Date firstReceivedDate = new Date();

			if (request.getParameter(FIRST_REC_DATE) != null
					&& !(request.getParameter(FIRST_REC_DATE).equals(""))) {
				firstReceivedDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FIRST_REC_DATE));
			}

			BigDecimal[] rate = new BigDecimal[100];
			String xx[] = JKTRequestUtils.getRequiredStringParameters(request,
					RATE);
			int xxLegnt = xx.length;
			for (int i = 0; i < xxLegnt; i++) {

				BigDecimal val = new BigDecimal(xx[i]);
				rate[i] = val;
			}

			length = srNo.length;
			for (int i = 0; i < length; i++) {

				StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();

				StoreIndentM storeIndentM = new StoreIndentM();
				storeIndentM.setId(indentId);
				storeSupplyOrderEntryObj.setIndent(storeIndentM);

				storeSupplyOrderEntryObj.setSerialNo(srNo[i]);

				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(itemIdPVMSArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				masStoreItem.setId(itemIdNomenclatureArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
				masStoreSupplier.setId(supplierIdVendorNameArray[i]);
				storeSupplyOrderEntryObj.setSupplier(masStoreSupplier);

				storeSupplyOrderEntryObj.setIndentType("y");
				storeSupplyOrderEntryObj.setSupplyOrderNo(suppluOrderNo[i]);
				storeSupplyOrderEntryObj.setSupplyOrderDate(firstReceivedDate);
				storeSupplyOrderEntryObj.setRate(rate[i]);

				storeSupplyOrderEntryObj.setLastChgBy(changedBy);
				storeSupplyOrderEntryObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeSupplyOrderEntryObj.setLastChgTime(time);
				storeSupplyOrderEntrylist.add(storeSupplyOrderEntryObj);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		boolean flag = false;

		flag = storesHandlerService.addStoreSupplyOrderEntry(indentId,
				storeSupplyOrderEntrylist);

		String message = "";
		if (flag) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again!!!";
		}

		try {
			map = storesHandlerService.showSupplyOrderEntryJsp();

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = STORE_SUPPLIER_ORDER_ENTRY_JSP;
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	@SuppressWarnings("deprecation")
	public ModelAndView updateSupplyOrderEntry(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		String encodedBy = "";
		String changedBy = "";
		int indentId = 0;
		int length = 0;
		int supplyOrderId = 0;
		List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist = new ArrayList<StoreSupplyOrderEntry>();
		try {
			int supplyOrderIdArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, SUPPLY_ORDER_ID);
			int srNo[] = JKTRequestUtils.getRequiredIntParameters(request,
					SR_NO);
			int itemIdPVMSArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_PVMS_NO);
			int itemIdNomenclatureArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, ITEM_ID_NOMENCLATURE);
			int uomIdAVArray[] = JKTRequestUtils.getRequiredIntParameters(
					request, ITEM_ID_AV);

			int intendTIdmmf[] = JKTRequestUtils.getRequiredIntParameters(
					request, INDENT_T_ID_QTY_IN_MMF);
			int supplierIdVendorNameArray[] = JKTRequestUtils
					.getRequiredIntParameters(request, SUPPLIER_ID_VENDOR_NAME);
			String suppluOrderNo[] = JKTRequestUtils
					.getRequiredStringParameters(request, SUPPLY_ORDER_NO);

			if (request.getParameter(SUPPLY_ORDER_ID).equals("0")) {
				supplyOrderId = Integer.parseInt(request
						.getParameter(SUPPLY_ORDER_ID));
			}

			if (request.getParameter(INDENT_ID_SUPPLY) != null) {
				indentId = Integer.parseInt(request
						.getParameter(INDENT_ID_SUPPLY));
			}
			if (request.getParameter(ENCODED_BY) != null) {
				encodedBy = (request.getParameter(ENCODED_BY));
			}
			if (request.getParameter(ENCODED_TIME) != null
					&& !(request.getParameter(ENCODED_TIME).equals(""))) {
				time = request.getParameter(ENCODED_TIME);
			}
			if (request.getParameter(ENCODED_DATE) != null
					&& !(request.getParameter(ENCODED_DATE).equals(""))) {
				date = request.getParameter(ENCODED_DATE);
			}
			if (request.getParameter(CHANGED_BY) != null
					&& !(request.getParameter(CHANGED_BY).equals(""))) {
				changedBy = request.getParameter(CHANGED_BY);
			}
			if (request.getParameter(CHANGED_DATE) != null
					&& !(request.getParameter(CHANGED_DATE).equals(""))) {
				date = request.getParameter(CHANGED_DATE);
			}

			if (request.getParameter(CHANGED_TIME) != null
					&& !(request.getParameter(CHANGED_TIME).equals(""))) {
				time = request.getParameter(CHANGED_TIME);
			}

			Date firstReceivedDate = new Date();
			if (request.getParameter(FIRST_REC_DATE) != null
					&& !(request.getParameter(FIRST_REC_DATE).equals(""))) {
				firstReceivedDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FIRST_REC_DATE));
			}

			BigDecimal[] rate = new BigDecimal[100];
			String xx[] = JKTRequestUtils.getRequiredStringParameters(request,
					RATE);
			int xxLegnt = xx.length;
			for (int i = 0; i < xxLegnt; i++) {

				BigDecimal val = new BigDecimal(xx[i]);
				rate[i] = val;
			}

			length = srNo.length;
			for (int i = 0; i < length; i++) {
				StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();

				storeSupplyOrderEntryObj.setId(supplyOrderIdArray[i]);

				storeSupplyOrderEntryObj.setIndentType("y");

				storeSupplyOrderEntryObj.setSerialNo(srNo[i]);

				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(itemIdPVMSArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				masStoreItem.setId(itemIdNomenclatureArray[i]);
				storeSupplyOrderEntryObj.setItem(masStoreItem);

				MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
				masStoreSupplier.setId(supplierIdVendorNameArray[i]);
				storeSupplyOrderEntryObj.setSupplier(masStoreSupplier);

				storeSupplyOrderEntryObj.setSupplyOrderNo(suppluOrderNo[i]);
				storeSupplyOrderEntryObj.setSupplyOrderDate(firstReceivedDate);

				storeSupplyOrderEntryObj.setRate(rate[i]);

				storeSupplyOrderEntryObj.setLastChgBy(changedBy);
				storeSupplyOrderEntryObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				storeSupplyOrderEntryObj.setLastChgTime(time);
				storeSupplyOrderEntrylist.add(storeSupplyOrderEntryObj);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		boolean flag = false;

		flag = storesHandlerService.updateSupplyOrderEnter(indentId,
				storeSupplyOrderEntrylist);

		String message = "";
		if (flag) {
			message = "Record Updated Successfully !!";
		} else {
			message = "Try Again!!!";
		}

		try {
			map = storesHandlerService.showSupplyOrderEntryJsp();

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = STORE_SUPPLIER_ORDER_ENTRY_JSP;
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	// -------------------------------------- New grid Supply Order
	// Entry------------------------

	public ModelAndView showSupplyOrderJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showSupplyOrderEntry();
		jsp = "supplyOrder";
		jsp = jsp + ".jsp";
		title = "Supply Order Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView closeSupplyOrderJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		// map = storesHandlerService.showSupplyOrderEntry();
		jsp = "closeSupplyOrder";
		jsp = jsp + ".jsp";
		title = "Supply Order Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView createGridSupplyOrderEntryData(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		String indentNo = "";
		if (request.getParameter(INDENT_NO) != null
				&& !(request.getParameter(INDENT_NO).equals(""))) {
			indentNo = request.getParameter(INDENT_NO);
		}
		map = storesHandlerService.createGridSupplyOrderEntryData(box);
		jsp = "supplyOrder";
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getIndentNosForSupplyOrderEntry(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getIndentNosForSupplyOrderEntry(box);
		jsp = "supplyOrder";
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView addSupplyOrder(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getItemDetailsForSupplyOrderEntry(box);
		jsp = "closeSupplyOrder";
		jsp = jsp + ".jsp";
		title = "Add Supply Order";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updateSupplyOrder(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getItemDetailsForUpdateSupplyOrderEntry(box);
		jsp = "closeSupplyOrder";
		jsp = jsp + ".jsp";
		title = "Update Supply Order";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// --------------------------------- Prints Stores By
	// mansi--------------------------------

	public ModelAndView printIndentSJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		session = request.getSession();
		requestParameters.put("DEPT", session.getAttribute("deptId"));

		try {
			if (request.getParameter(INDENT_NO) != null
					&& !(request.getParameter(INDENT_NO).equals(""))) {
				intentNo = request.getParameter(INDENT_NO);
				requestParameters.put("INDENT_NO", intentNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(DOCUMENT_PRINT_OF_DGAFMS),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ DOCUMENT_PRINT_OF_DGAFMS + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printReturnFromDispensaryJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		HttpSession session = request.getSession();
		requestParameters.put("departmentId", session.getAttribute("deptId"));
		try {
			if (request.getParameter(RETURN_NO) != null
					&& !(request.getParameter(RETURN_NO).equals(""))) {
				intentNo = request.getParameter(RETURN_NO);
				requestParameters.put("return_no", intentNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(RETURN_FROM_DISPENSARY),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ RETURN_FROM_DISPENSARY + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printOpeningBalanceJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String intentNo = null;
		session = request.getSession();
		requestParameters.put("departmentId", session.getAttribute("deptId"));
		try {
			if (request.getParameter(BALANCE_NO) != null
					&& !(request.getParameter(BALANCE_NO).equals(""))) {
				intentNo = request.getParameter(BALANCE_NO);
				requestParameters.put("openingBalanceNo", intentNo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(OPENING_BALANCE_ENTRY),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ OPENING_BALANCE_ENTRY + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printLocalPurchareOrderJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String poNO = null;
		session = request.getSession();
		requestParameters.put("departmentId", session.getAttribute("deptId"));
		try {
			if (request.getParameter(INDENT_ID) != null
					&& !(request.getParameter(INDENT_ID).equals(""))) {
				poNO = request.getParameter(INDENT_ID);
				requestParameters.put("PO_No", poNO);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(LOCAL_PURCHASE_ORDER), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ LOCAL_PURCHASE_ORDER + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
	}

	// ------------ report LPO
	public ModelAndView generateCrvReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String grnNo = "";
		String flag = null;
		int deptId = 0;
		byte[] bytes = null;

		session = request.getSession();
		if (request.getParameter(GRN_NO) != null
				&& !(request.getParameter(GRN_NO).equals(""))) {
			grnNo = request.getParameter(GRN_NO);
		}
		if (request.getParameter("flag") != null
				&& !(request.getParameter("flag").equals(""))) {
			flag = request.getParameter("flag");
		}
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
		box.put(GRN_NO, grnNo);
		// requestParameters=storesHandlerService.getLPOList(grnNo);
		requestParameters = storesHandlerService.getDBConnection();
		requestParameters.put("dept_id", deptId);
		requestParameters.put("grn_no", grnNo);
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getBudgetDetails(box);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			dataMap = getHospitalParameterDetails(request);
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();

			String hospitalName = (String) dataMap.get("hospitalName");
			String hospitalAddress = (String) dataMap.get("hospitalAddress");
			int hospitalId = (Integer) dataMap.get("hospitalId");
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalAddress", hospitalAddress);
			requestParameters.put("hospitalId", hospitalId);
			if (flag.equals("LPO")) {
				requestParameters.put("allocatedAmount",
						map.get("allocatedAmount"));
				requestParameters.put("spentAmount", map.get("spentAmount"));
				requestParameters
						.put("balanceAmount", map.get("balanceAmount"));
				requestParameters.put("grn_amount", map.get("grn_amount"));
				requestParameters.put("vat", map.get("vat"));
				requestParameters.put("disc", map.get("disc"));

				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("Local_Purchase_Order"),
						requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("crv")) {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("crv"), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("proformaB")) {
				requestParameters.put("allocatedAmount",
						map.get("allocatedAmount"));
				requestParameters.put("spentAmount", map.get("spentAmount"));
				requestParameters
						.put("balanceAmount", map.get("balanceAmount"));
				requestParameters.put("grn_amount", map.get("grn_amount"));
				requestParameters.put("vat", map.get("vat"));
				requestParameters.put("disc", map.get("disc"));

				requestParameters.put("SUBREPORT_DIR", getServletContext()
						.getRealPath("/Reports/"));

				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("proforma"), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("contingentBill")) {
				requestParameters.put("allocatedAmount",
						map.get("allocatedAmount"));
				requestParameters.put("spentAmount", map.get("spentAmount"));
				requestParameters
						.put("balanceAmount", map.get("balanceAmount"));
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("contingent_bill"),
						requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (flag.equals("barcode")) {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("barcode"), requestParameters,
						(Connection) connectionMap.get("con"));
			}

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showCreateBarCodeJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		String jsp = "createBarCode" + ".jsp";
		String title = "create Bar Code";

		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public void findGrnLedgeraction(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> sLIList = new ArrayList<StoreGrnM>();
		@SuppressWarnings("unused")
		List objectList = new ArrayList();
		String grnNo = null;
		if (request.getParameter("grnNo") != null) {
			grnNo = request.getParameter("grnNo");
		}
		dataMap.put("grnNo", grnNo);

		try {
			if (!grnNo.equals("") && grnNo != null) {
				map = storesHandlerService.findGrnLedgeraction(dataMap);
			}
			sLIList = (List) map.get("storegrnMList");

			StringBuffer sb = new StringBuffer();
			sb.append("<item>");
			if (sLIList != null) {
				if (sLIList.size() > 0) {
					sb.append("<SLIStatus>" + "YES" + "</SLIStatus>");
				} else {
					sb.append("<SLIStatus>" + "NO" + "</SLIStatus>");
				}
			} else {
				sb.append("<SLIStatus>" + "NO" + "</SLIStatus>");
			}
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView generateRolReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String grnNo = "";
		String flag = null;
		int deptId = 0;
		byte[] bytes = null;

		session = request.getSession();

		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);

		// requestParameters=storesHandlerService.getLPOList(grnNo);
		requestParameters = storesHandlerService.getDBConnection();
		requestParameters.put("deptId", deptId);

		Map<String, Object> map = new HashMap<String, Object>();

		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			dataMap = getHospitalParameterDetails(request);
			Calendar c = Calendar.getInstance();
			Date expiryDate = c.getTime();
			requestParameters.put("expiryDate", expiryDate);
			String hospitalName = (String) dataMap.get("hospitalName");
			String hospitalAddress = (String) dataMap.get("hospitalAddress");
			int hospitalId = (Integer) dataMap.get("hospitalId");
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalAddress", hospitalAddress);
			requestParameters.put("hospitalId", hospitalId);

			requestParameters.put("deptName",
					(String) session.getAttribute("deptName"));

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("ROLItemReport_new"), requestParameters,
					(Connection) connectionMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printExternalIssueJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int issueId = 0;
		String period = null;

		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(ISSUE_ID) != null
					&& !(request.getParameter(ISSUE_ID).equals(""))) {
				issueId = Integer.parseInt("" + request.getParameter(ISSUE_ID));
			}

			requestParameters.put("CRV_NO", issueId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(EXTERNAL_ISSUE), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ EXTERNAL_ISSUE + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public ModelAndView showMMFDepartmentWiseSplitup(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showMMFDepartmentWiseSplitup(box);
		map.put("year", box.getInt("year"));
		map.put("pvmsno", box.getInt("pvmsno"));
		map.put("nomenclature", box.getString("nomenclature"));
		map.put("mmfQty", box.getInt("mmfQty"));
		jsp = "mmfDepartmentSplitUp";
		title = "MMF Qty Department Wise";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView generateReportForIndentSOC(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		map = storesHandlerService.getConnectionForReport();
		map.put("INDENT_NO", box.getString(INDENT_ID));
		map.put("DEPT", new Integer(deptId));
		HMSUtil.generateReport("DocumentPrintOfDGAFMSSOC", map,
				(Connection) map.get("con"), response, getServletContext());
		jsp = "modifyIndentSOC";
		jsp = jsp + ".jsp";
		title = "Indent To DGAFMS in the form of SOC-Modify";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAddSupplyOrderEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getItemsForSupplyOrderEntryJsp(box);
		jsp = "supplyOrderEntryAddition";
		title = "Add Supply Order Entry Items";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indent_id", box.getInt("indent_id"));
		map.put("indent_type", box.getString("indent_type"));
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView doAddSupplyOrderEntryItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.doAddSupplyOrderEntryItems(box);
		jsp = "supplyOrderEntryAddition";
		title = "Add Supply Order Entry Items";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("indent_id", box.getInt("indent_id"));
		map.put("indent_type", box.getString("indent_type"));
		return new ModelAndView(jsp, "map", map);
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// ------------------------------- start of methods written by
	// vikas-------------------------------

	public ModelAndView showStockDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		title = "Stock Details";
		jsp = VIEW_COMPLETE_STOCK_DETAILS_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getStockDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int itemId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		// String checkBoxValue=request.getParameter("nillStock");
		map = storesHandlerService.getStockDetails(box);
		jsp = VIEW_COMPLETE_STOCK_DETAILS_IN_GRID_JSP;
		// jsp = jsp+".jsp";
		title = "Stock Details";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getStockDetailForNextRecord(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int itemId = 0;
		Box box = HMSUtil.getBox(request);
		if (request.getParameter("buttonName") != null) {
			Vector items = box.getVector("itemId");
			int max = items.size() - 1;
			itemId = Integer.valueOf(items.get(max).toString());
			box.put("itemId", itemId);
		} else {

			itemId = Integer.parseInt(box.getString("itemIdForNextRecord"));
			box.put("itemId", itemId);
		}
		map = storesHandlerService.getStockDetailsForNextRecord(box);
		jsp = VIEW_COMPLETE_STOCK_DETAILS_IN_GRID_JSP;
		// jsp = jsp+".jsp";
		title = "Stock Details";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("hiddenFieldForRecords", "true");
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView getItemListForCompleteStockNomenclatureByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
			dataMap.put("autoHint", autoHint);
			dataMap.put("deptId", deptId);
			dataMap.put("userName", userName);
			dataMap.put("hospitalId", hospitalId);

			map = storesHandlerService
					.getItemListForCompleteStockNomenclatureByAutocomplete(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	// ------------------------------- End of methods written by
	// vikas-------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of REPORTS Functions Written
	// By Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public ModelAndView showItemCatalogueJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		int departmentId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		departmentId = Integer.parseInt((session.getAttribute("deptId"))
				.toString());
		map = storesHandlerService.showItemCatalogueJsp(departmentId);
		jsp = PVMS_NIV_MASTER_REPORT + ".jsp";
		title = "Item Catalogue";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showInternalIssueReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapDetail = new HashMap<String, Object>();
		map = storesHandlerService.showInternalIssueReportJsp(mapDetail);
		title = "Internal Issue Report";
		jsp = INTERNAL_ISSUE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showItemCatalogue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		JRDataSource ds = null;
		List itemList = null;
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HttpSession session = request.getSession();

		int section = 0;
		int subSection = 0;
		int sectionList = 0;
		int subSectionList = 0;
		int selectedRadio = 0;
		int hospitalId = 0;
		String hospitalName = "";

		int sectionId = 0;
		int manufacturerId = 0;
		int groupId = 0;
		String query = "";
		String sectionName = null;
		String manufacturerName = null;
		String groupName = null;

		requestParameters.put("deptId", session.getAttribute("deptId"));
		requestParameters.put("departmentname",
				session.getAttribute("deptName"));

		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalname", hospitalName);
			}

			if (request.getParameter(SECTION_LIST) != null
					&& !(request.getParameter(SECTION_LIST).equals("0"))) {
				sectionId = Integer
						.parseInt(request.getParameter(SECTION_LIST));
				query = "and st.section_id = " + sectionId;
			}

			if (request.getParameter(MANUFACTURER_ID) != null
					&& !(request.getParameter(MANUFACTURER_ID).equals("0"))) {
				manufacturerId = Integer.parseInt(request
						.getParameter(MANUFACTURER_ID));
				query = query + " and br.manufacturer_id = " + manufacturerId;
			}

			if (request.getParameter(GROUP_ID) != null
					&& !(request.getParameter(GROUP_ID).equals("0"))) {
				groupId = Integer.parseInt(request.getParameter(GROUP_ID));
				query = query + " and st.group_id = " + groupId;
			}
			requestParameters.put("query", query);

			if (request.getParameter("sectionName") != null
					&& !(request.getParameter("sectionName").equals(""))) {
				sectionName = request.getParameter("sectionName");
			}
			if (sectionName != null) {
				requestParameters.put("sectionname", sectionName);
			} else {
				requestParameters.put("sectionname", "All");
			}
			if (request.getParameter("manufacturerName") != null
					&& !(request.getParameter("manufacturerName").equals(""))) {
				manufacturerName = request.getParameter("manufacturerName");
			}
			if (manufacturerName != null) {
				requestParameters.put("manfuname", manufacturerName);
			} else {
				requestParameters.put("manfuname", "All");
			}
			if (request.getParameter("groupName") != null
					&& !(request.getParameter("groupName").equals(""))) {
				groupName = request.getParameter("groupName");
			}
			if (groupName != null) {
				requestParameters.put("itemtype", groupName);
			} else {
				requestParameters.put("itemtype", "All");
			}
			requestParameters.put("sectionId", sectionId);
			requestParameters.put("manufactureId", manufacturerId);
			requestParameters.put("groupId", groupId);

			HMSUtil.generateReport("Item_Catalogue_All", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());

		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		 * if (request.getParameter(SECTION_ID) != null &&
		 * !(request.getParameter(SECTION_ID).equals(""))) { section =
		 * Integer.parseInt(request.getParameter(SECTION_ID)); } if
		 * (request.getParameter(SECTION_ID_DEPENDENT_INDENT) != null &&
		 * !(request.getParameter(SECTION_ID_DEPENDENT_INDENT) .equals(""))) {
		 * subSection = Integer.parseInt(request
		 * .getParameter(SECTION_ID_DEPENDENT_INDENT)); } if
		 * (request.getParameter(SECTION_LIST) != null &&
		 * !(request.getParameter(SECTION_LIST).equals(""))) { sectionList =
		 * Integer.parseInt(request .getParameter(SECTION_LIST)); } if
		 * (request.getParameter(SUB_SECTION_LIST) != null &&
		 * !(request.getParameter(SUB_SECTION_LIST).equals(""))) {
		 * subSectionList = Integer.parseInt(request
		 * .getParameter(SUB_SECTION_LIST)); } if
		 * (request.getParameter(SELECTED_RADIO) != null &&
		 * !(request.getParameter(SELECTED_RADIO).equals(""))) { selectedRadio =
		 * Integer.parseInt(request .getParameter(SELECTED_RADIO)); }
		 * 
		 * 
		 * if ((sectionList == 0 || section == 0) && (subSectionList == 0 ||
		 * subSection == 0) && (selectedRadio != 0)) { if (selectedRadio == 1) {
		 * requestParameters.put("ITEM_TYPE", selectedRadio); } else if
		 * (selectedRadio == 2) { requestParameters.put("ITEM_TYPE",
		 * selectedRadio); } HMSUtil.generateReport("Item_Catalogue_All",
		 * requestParameters, (Connection) connectionMap.get("con"), response,
		 * getServletContext()); } else if ((sectionList != 0 || section != 0)
		 * && (subSectionList == 0 || subSection == 0)) {
		 * requestParameters.put("SECTION", sectionList); if (selectedRadio ==
		 * 1) { requestParameters.put("ITEM_TYPE", selectedRadio); } else if
		 * (selectedRadio == 2) { requestParameters.put("ITEM_TYPE",
		 * selectedRadio); } HMSUtil.generateReport("Item_Catalogue_Section",
		 * requestParameters, (Connection) connectionMap .get("con"), response,
		 * getServletContext()); } else if ((sectionList == 0 || section == 0)
		 * && (subSectionList != 0 || subSection != 0)) {
		 * 
		 * requestParameters.put("ITEM_CATEGORY", subSectionList); if
		 * (selectedRadio == 1) { requestParameters.put("ITEM_TYPE",
		 * selectedRadio); } else if (selectedRadio == 2) {
		 * requestParameters.put("ITEM_TYPE", selectedRadio); }
		 * 
		 * 
		 * 
		 * HMSUtil.generateReport("Item_Catalogue_subSection",
		 * requestParameters, (Connection) connectionMap .get("con"), response,
		 * getServletContext()); } else {
		 * 
		 * requestParameters.put("SECTION", sectionList);
		 * requestParameters.put("ITEM_CATEGORY", subSectionList);
		 * 
		 * if (selectedRadio == 1) { requestParameters.put("ITEM_TYPE",
		 * selectedRadio); } else if (selectedRadio == 2) {
		 * requestParameters.put("ITEM_TYPE", selectedRadio); }
		 */

		return null;
	}

	public ModelAndView generateInternalIssueReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";

		HttpSession session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);
			}
			String query = "";
			if (request.getParameter(TO_STORE_ID) != null
					&& !(request.getParameter(TO_STORE_ID).equals(""))) {
				int toStoreId = 0;
				toStoreId = Integer.parseInt(request.getParameter(TO_STORE_ID));

				if (toStoreId > 0) {
					query = query + " and store_issue_m.to_store = "
							+ toStoreId;
				}
				requestParameters.put("query", query);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("Internal_Issue_Rpt", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showVendorReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showVendorReportJsp();
		title = "Vendor Report";
		jsp = VENDOR_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getBatchForItem(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int itemId = 0;
		int deptId = 0;
		deptId = Integer.parseInt((session.getAttribute("deptId")).toString());
		if (request.getParameter(ITEM_NAME) != null
				&& !(request.getParameter(ITEM_NAME).equals("0"))) {
			itemId = Integer.parseInt(request.getParameter(ITEM_NAME));
		}
		map = storesHandlerService.getBatchForItem(itemId, deptId);
		title = "Item List";
		jsp = "batchForItem";
		// map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemsForItemGroup(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int groupId = 0;
		if (request.getParameter(GROUP_NAME) != null
				&& !(request.getParameter(GROUP_NAME).equals("0"))) {
			groupId = Integer.parseInt(request.getParameter(GROUP_NAME));
		}
		map = storesHandlerService.getItemsForItemGroup(groupId);
		title = "Item List";
		jsp = "itemsForGroup";
		// map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getInvoice(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int supplierId = 0;
		int deptId = 0;
		if (session.getAttribute("deptId") != null)
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		if (request.getParameter(SUPPLIER_ID) != null
				&& !(request.getParameter(SUPPLIER_ID).equals("0"))) {
			supplierId = Integer.parseInt(request.getParameter(SUPPLIER_ID));
		}
		map = storesHandlerService.getInvoice(supplierId, deptId);
		title = "Item List";
		jsp = "itemsForGroup";
		// map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView generateVendorReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		String hospitalName = "";
		int vendorId = 0;
		String query = new String("");
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		session = request.getSession();
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

			if (request.getParameter(VENDOR_NAME) != null
					&& !(request.getParameter(VENDOR_NAME).equals(""))) {
				vendorId = Integer.parseInt(request.getParameter(VENDOR_NAME));
				if (vendorId != 0) {
					query = "where mas_store_supplier.supplier_id= " + vendorId;
				}

			}

			/*
			 * if (vendorId == 0) { HMSUtil.generateReport("Vendor_List_All",
			 * requestParameters, (Connection) connectionMap.get("con"),
			 * response, getServletContext()); } else {
			 */
			requestParameters.put("query", query);
			HMSUtil.generateReport(VENDOR_REPORT, requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());
			// }

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView generateActualStockReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		String hospitalName = "";
		int deptId = 0;
		String query = new String("");
		Box box = HMSUtil.getBox(request);
		String deptName = "";
		session = request.getSession();
		try {
			if (request.getParameter("departmentId") != null
					&& !request.getParameter("departmentId").equals("0")) {
				deptId = Integer.parseInt(request.getParameter("departmentId"));
				deptName = request.getParameter("deptName");
				requestParameters.put("deptName", deptName);
			}

			if (request.getParameter(GROUP_NAME) != null
					&& !(request.getParameter(GROUP_NAME).equals("0"))) {
				query = " and mas_store_item.group_id ="
						+ Integer.parseInt(request.getParameter(GROUP_NAME));
			}

			if (request.getParameter(ITEM_NAME) != null
					&& !(request.getParameter(ITEM_NAME).equals("0"))) {
				query = query + " and mas_store_item.item_id ="
						+ Integer.parseInt(request.getParameter(ITEM_NAME));
			}
			requestParameters.put("query", query);
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("groupId",
						Integer.parseInt(request.getParameter(GROUP_NAME)));
				requestParameters.put("itemId",
						Integer.parseInt(request.getParameter(ITEM_NAME)));

				requestParameters.put("HOSP_NAME", hospitalName);

				requestParameters.put("hospitalId", hospitalId);
				requestParameters.put("deptId", deptId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		String reportName = "";
		if (box.getString("reportType").equals("summary")) {
			reportName = ACTUAL_STOCK_REPORT;
		} else if (box.getString("reportType").equals("detail")) {
			reportName = "Stock_details_rep";
		}

		HMSUtil.generateReport(reportName, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());

		return null;
	}

	public ModelAndView showDefectiveItemReturnReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Defective Item Return";
		jsp = DEFECTIVE_ITEM_RETURN_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDefectiveItemReturnReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";

		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		requestParameters.put("deptId",
				(Integer) session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(DEFECTIVE_ITEM_RETURN, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showReceiptRegisterReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Receipt Register Report";
		jsp = RECEIPT_REGISTER_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateReceiptRegisterReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		int deptId = 0;
		String hospitalName = "";
		String deptName = "";

		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				requestParameters.put("DepartmentName", deptName);
			}
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(RECEIPT_REGISTER_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showBrandReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showBrandReportJsp();
		title = "Brand Report";
		jsp = BRAND_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateBrandReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		String hospitalName = "";
		int brandId = 0;
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		session = request.getSession();
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if (request.getParameter(BRAND_NAME) != null
					&& !(request.getParameter(BRAND_NAME).equals(""))) {
				brandId = Integer.parseInt(request.getParameter(BRAND_NAME));

			}

			if (brandId == 0) {
				HMSUtil.generateReport("BrandMaster_All", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
			} else {
				requestParameters.put("BRAND", brandId);
				HMSUtil.generateReport(BRAND_REPORT, requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView showDrugListBodySystemWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showDrugListBodySystemWiseReportJsp();
		title = "Drug List Body System Wise Report";
		jsp = DRUG_LIST_BODY_SYSTEM_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDrugListBodySystemWiseReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int hospitalId = 0;
		String hospitalName = "";
		int sectionId = 0;
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if ((request.getParameter(SECTION_ID)) != null
					&& !(request.getParameter(SECTION_ID).equals(""))) {
				sectionId = Integer.parseInt(request.getParameter(SECTION_ID));

			}

			if (sectionId != 0) {
				requestParameters.put("PharmaIndex", sectionId);
				HMSUtil.generateReport(DRUG_LIST_BODY_SYSTEM_WISE_REPORT,
						requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView showVendorTurnoverEnquiryReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showVendorTurnoverEnquiryReportJsp();
		title = "Vendor Turnover Enquiry Report";
		jsp = VENDOR_TRURNOVER_ENQUIRY_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateVendorTurnoverEnquiryReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";
		int supplierId = 0;
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);
			}
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(SUPPLIER_ID)) != null
					&& !(request.getParameter(SUPPLIER_ID).equals(""))) {
				supplierId = Integer
						.parseInt(request.getParameter(SUPPLIER_ID));
				requestParameters.put("SUPPLIER", supplierId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(VENDOR_TRURNOVER_ENQUIRY_REPORT,
				requestParameters, (Connection) connectionMap.get("con"),
				response, getServletContext());
		return null;
	}

	public ModelAndView showExternalIssueReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showExternalIssueReportJsp();
		title = "External Issue Report";
		jsp = EXTERNAL_ISSUE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateExternalIssueReport(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int unitId = 0;
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(UNIT_ID)) != null
					&& !(request.getParameter(UNIT_ID).equals(""))) {
				unitId = Integer.parseInt(request.getParameter(UNIT_ID));
				requestParameters.put("UNIT", unitId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(EXTERNAL_ISSUE_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showDMConsumDrugWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showDMConsumDrugWiseReportJsp();
		title = "D M Consum Drug Wise Report";
		jsp = D_M_DCONSUMDRUG_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDMConsumDrugWiseReportReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int genericId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(ITEM_GENERIC_ID)) != null
					&& !(request.getParameter(ITEM_GENERIC_ID).equals(""))) {
				genericId = Integer.parseInt(request
						.getParameter(ITEM_GENERIC_ID));
				requestParameters.put("GENERIC", genericId);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(D_M_DCONSUMDRUG_WISE_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showFrequencyOfIndentReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		title = "Frequency Of Indent Report";
		jsp = FREQUENCY_OF_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateFrequencyOfIndentReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int genericId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);
			}

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("TO_DATE", toDate);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(FREQUENCY_OF_REPORT, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	public ModelAndView showMmfDepartmentApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		box.put("deptId", deptId);
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry Approval";
		String previousPage = "no";
		map = storesHandlerService.showMmfDepartmentApproval(box);
		map.putAll(storesHandlerService.getSectionList());
		map.put("previousPage", previousPage);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getCurrentYearMmfByItem(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		box.put("deptId", (Integer) session.getAttribute("deptId"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		Map<String, Object> map = new HashMap<String, Object>();

		map = storesHandlerService.getCurrentYearMmfByItem(box);
		map.putAll(storesHandlerService.getSectionList());
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp = jsp + ".jsp";
		title = "MMF Entry Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updateGridItemsInMmfDepartmentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		box.put("userName", (String) session.getAttribute("userName"));
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.updateGridItemsInMmfDepartmentApproval(box);
		map.putAll(storesHandlerService.getSectionList());
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp += ".jsp";
		title = "Store MMF Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemListForNomenclature(HttpServletRequest request,
			HttpServletResponse response) {
		String itemNameField = "";
		Box box = HMSUtil.getBox(request);

		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		box.put("autoHint", autoHint);

		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getItemListForNomenclature(box);
		map.putAll(storesHandlerService.getSectionList());
		jsp = "result";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIndent(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----

		// --------------------------------------------------------------------------------
		int deptId = 0;
		session = request.getSession();

		String itemNameField = "";
		Box box = HMSUtil.getBox(request);
		int internalIndentId = 0;
		int storeDepartmentId = 0;
		int hospitalId = 0;

		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}

		if (request.getParameter("internalIndentId") != null
				&& !request.getParameter("internalIndentId").equals("")) {
			internalIndentId = Integer.parseInt(request
					.getParameter("internalIndentId"));
		}
		if (request.getParameter("itemGroupId") != null
				&& !request.getParameter("itemGroupId").equals("")) {
			int groupId = Integer.parseInt(request.getParameter("itemGroupId"));
			box.put("groupId", groupId);
		}
		if (request.getParameter("itemTypeId") != null
				&& !request.getParameter("itemTypeId").equals("")) {
			int itemTypeId = Integer.parseInt(request
					.getParameter("itemTypeId"));
			box.put("itemTypeId", itemTypeId);
		}
		if (request.getParameter("sectionId") != null
				&& !request.getParameter("sectionId").equals("")) {
			int sectionId = Integer.parseInt(request.getParameter("sectionId"));
			box.put("sectionId", sectionId);
		}
		if (request.getParameter("categoryId") != null
				&& !request.getParameter("categoryId").equals("")) {
			int categoryId = Integer.parseInt(request
					.getParameter("categoryId"));
			box.put("categoryId", categoryId);
		}
		if (request.getParameter("classId") != null
				&& !request.getParameter("classId").equals("")) {
			int classId = Integer.parseInt(request.getParameter("classId"));
			box.put("classId", classId);
		}
		if (request.getParameter("toWard") != null
				&& !request.getParameter("toWard").equals("")) {
			int toWard = Integer.parseInt(request.getParameter("toWard"));
			box.put("toWard", toWard);
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		/*
		 * if (request.getParameter("storeDepartmentId") != null &&
		 * !request.getParameter("storeDepartmentId").equals("")) {
		 * storeDepartmentId = Integer.parseInt(request
		 * .getParameter("storeDepartmentId")); box.put("storeDepartmentId",
		 * storeDepartmentId); }
		 */

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		box.put("autoHint", autoHint);
		box.put("internalIndentId", internalIndentId);

		// dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getItemListForIndent(box);
		map.put("deptId", deptId);
		jsp = "resultIndent";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemListForIndent1(HttpServletRequest request,
			HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----

		// --------------------------------------------------------------------------------
		int deptId = 0;
		session = request.getSession();

		String itemNameField = "";
		Box box = HMSUtil.getBox(request);
		int internalIndentId = 0;
		int storeDepartmentId = 0;
		int hospitalId = 0;

		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}

		if (request.getParameter("internalIndentId") != null
				&& !request.getParameter("internalIndentId").equals("")) {
			internalIndentId = Integer.parseInt(request
					.getParameter("internalIndentId"));
		}
		if (request.getParameter("itemGroupId") != null
				&& !request.getParameter("itemGroupId").equals("")) {
			int groupId = Integer.parseInt(request.getParameter("itemGroupId"));
			box.put("groupId", groupId);
		}
		if (request.getParameter("itemTypeId") != null
				&& !request.getParameter("itemTypeId").equals("")) {
			int itemTypeId = Integer.parseInt(request
					.getParameter("itemTypeId"));
			box.put("itemTypeId", itemTypeId);
		}
		if (request.getParameter("sectionId") != null
				&& !request.getParameter("sectionId").equals("")) {
			int sectionId = Integer.parseInt(request.getParameter("sectionId"));
			box.put("sectionId", sectionId);
		}
		if (request.getParameter("categoryId") != null
				&& !request.getParameter("categoryId").equals("")) {
			int categoryId = Integer.parseInt(request
					.getParameter("categoryId"));
			box.put("categoryId", categoryId);
		}
		if (request.getParameter("classId") != null
				&& !request.getParameter("classId").equals("")) {
			int classId = Integer.parseInt(request.getParameter("classId"));
			box.put("classId", classId);
		}
		if (request.getParameter("toWard") != null
				&& !request.getParameter("toWard").equals("")) {
			int toWard = Integer.parseInt(request.getParameter("toWard"));
			box.put("toWard", toWard);
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			int userType = users.getUserType();
			box.put("userType", userType);
		}
		
		/*
		 * if (request.getParameter("storeDepartmentId") != null &&
		 * !request.getParameter("storeDepartmentId").equals("")) {
		 * storeDepartmentId = Integer.parseInt(request
		 * .getParameter("storeDepartmentId")); box.put("storeDepartmentId",
		 * storeDepartmentId); }
		 */

		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		box.put("autoHint", autoHint);
		box.put("internalIndentId", internalIndentId);
		map = storesHandlerService.getItemListForIndent1(box);

		jsp = "resultIndent1";
		return new ModelAndView(jsp, "map", map);
	}

	public void getOtherItemsForIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		int fromWard = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			fromWard = (Integer) session.getAttribute("deptId");
			box.put("fromWard", fromWard);
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		BigDecimal itemBatchStock = new BigDecimal(0);
		String stockMessage = "";
		map = storesHandlerService.getOtherItemsForIndent(box);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		itemList = (List<MasStoreItem>) map.get("itemList");
		itemBatchStock = (BigDecimal) map.get("stock");
		if(map.get("stockMessage") != null){
			stockMessage = (String)map.get("stockMessage");
		}
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

			sb.append("<stock>" + itemBatchStock.intValue() + "</stock>");
		if(stockMessage != null && !stockMessage.equals("")){
			sb.append("<stockMessage>" + stockMessage+ "</stockMessage>");
		}
		}

		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getItemObject(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.getItemObject(box);
		map.putAll(storesHandlerService.getSectionList());
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp += ".jsp";
		title = "Store MMF Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemObjectFromPvms(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		box.put("storeType", box.get("storeType"));
		box.put("docId", box.get("docId"));
		map = storesHandlerService.getItemObjectFromPvms(box);
		map.putAll(storesHandlerService.getSectionList());
		jsp = STORE_MMF_DEPARTMENT_APPROVAL_JSP;
		jsp += ".jsp";
		title = "Store MMF Approval";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printMmfApprovalEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {
			List<MasEmployee> masEmployeeList = new ArrayList<MasEmployee>();

			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear",
						box.getInt(MMF_DEPARTMENT_DATE));
				if (box.getInt(MMF_DEPARTMENT_DATE) == 2008) {
					requestParameters.put("mmfForThePreviousYear",
							box.getInt(MMF_DEPARTMENT_DATE));
				} else {
					requestParameters.put("mmfForThePreviousYear",
							box.getInt(MMF_DEPARTMENT_DATE) - 1);
				}
			}
			if (request.getParameter("pvms_no") != null) {
				requestParameters.put("pvms_no",
						request.getParameter("pvms_no"));
			}
			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

			requestParameters.put("storeType", box.get("storeType"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_ENTRY_APPROVAL_FORM),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRY_APPROVAL_FORM + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printDepartmentWiseList(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {
			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear",
						box.getInt(MMF_DEPARTMENT_DATE));
			}
			if (!"".equals(box.getString("department"))) {
				requestParameters.put("departmentId", box.getInt("department"));
			}

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MMF_ENTRY_APPROVAL_FORM_DEPARTMENT_WISE),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRY_APPROVAL_FORM_DEPARTMENT_WISE + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printReportForAllDepartments(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {
			// if(request.getParameter("testMmfNo") != null &&
			// !(request.getParameter("testMmfNo").equals(""))){
			// docNo = request.getParameter("testMmfNo");
			// docNo = storesHandlerService.getMmfNo(box.getInt("newDocId"));
			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear",
						box.getInt(MMF_DEPARTMENT_DATE));
			}

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		try {
			bytes = JasperRunManager
					.runReportToPdf(
							getCompiledReport(MMF_ENTRY_APPROVAL_FORM_FOR_ALL_DEPARTMENT),
							requestParameters,
							(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ MMF_ENTRY_APPROVAL_FORM_FOR_ALL_DEPARTMENT + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printReportForItemWise(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		try {

			if (box.getInt(MMF_DEPARTMENT_DATE) != 0) {
				requestParameters.put("mmfForTheYear",
						box.getInt(MMF_DEPARTMENT_DATE));
			}

			if (box.get("storeType").equals("e")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "Expendable");
			} else if (box.get("storeType").equals("h")) {
				requestParameters.put("storeType", box.get("storeType"));
				requestParameters.put("MMFStoreType", "ECHS");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			if (box.get("format").equals("excel")) {

				Map<String, Object> map = new HashMap<String, Object>();
				map = storesHandlerService.getEcelSheetDataForMMf(box);
				if (map.get("flag") != null
						&& map.get("flag").toString()
								.equalsIgnoreCase("NoData")) {
					map.put("message", "No Data Found!....");
				} else {

					try {

						response.setContentType("application/vnd.ms-excel");
						response.setHeader(
								"Content-Disposition",
								"attachment; filename="
										+ map.get("download_path").toString());
						File f = new File(map.get("download_path").toString());
						InputStream in = new FileInputStream(f);
						ServletOutputStream outs = response.getOutputStream();
						int bit = 256;
						int i = 0;
						while ((bit) >= 0) {
							bit = in.read();
							outs.write(bit);
						}
						outs.flush();
						outs.close();
						in.close();
						if (f.exists())
							f.delete();
					} catch (IOException ioe) {
						ioe.printStackTrace();
					}
				}
			} else {

				byte[] bytes = null;

				try {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("mmf_item_wise_report"),
							requestParameters,
							(Connection) connectionMap.get("con"));
				} catch (JRException e) {
					e.printStackTrace();
				}
				String fileName = "mmf_item_wise_report";
				response.setHeader("Content-Disposition",
						"attachment; filename=" + fileName + ".pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;
				try {
					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public ModelAndView printReportForItemsNotUsed(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		byte[] bytes = null;
		try {
			itemList = storesHandlerService.getItemsNotUsed(box);
			JasperReport jasperReport = HMSUtil.getCompiledReport(
					getServletContext(), "testForItemList");
			JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(
					itemList);
			bytes = JasperRunManager.runReportToPdf(jasperReport,
					requestParameters, ds);
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition",
				"attachment;filename=testForItemList");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return null;
	}

	public Map<String, Object> getHospitalParameterDetails(
			HttpServletRequest request) {
		int hospitalId = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();

		List<MasHospital> masHospitalList = new ArrayList<MasHospital>();
		hospitalId = Integer.parseInt(request.getSession()
				.getAttribute(HOSPITAL_ID).toString());
		dataMap.put(HOSPITAL_ID, hospitalId);

		dataMap = hospitalDetailsMasterHandlerService.getHospitalList(dataMap);
		if (dataMap.get("masHospitalList") != null) {
			masHospitalList = (List<MasHospital>) dataMap
					.get("masHospitalList");
			dataMap.put("hospitalName", masHospitalList.get(0)
					.getHospitalName());
			dataMap.put("hospitalAddress", masHospitalList.get(0).getAddress());
			dataMap.put("hospitalId", hospitalId);
			/*
			 * List<MasSetupParameterMaintaince> masSetupParameterMaintainceList
			 * = new ArrayList<MasSetupParameterMaintaince>(); hospitalId =
			 * Integer.parseInt(request.getSession().getAttribute(
			 * HOSPITAL_ID).toString()); dataMap.put(HOSPITAL_ID, hospitalId);
			 * dataMap =
			 * hospitalDetailsMasterHandlerService.getSetupParameterMap
			 * (dataMap);
			 * 
			 * if (dataMap.get("masSetupParameterMaintainceList") != null) {
			 * masSetupParameterMaintainceList =
			 * (List<MasSetupParameterMaintaince>) dataMap
			 * .get("masSetupParameterMaintainceList");
			 * dataMap.put("hospitalName",
			 * masSetupParameterMaintainceList.get(0)
			 * .getHospital().getHospitalName()); dataMap.put("hospitalAddress",
			 * masSetupParameterMaintainceList.get(
			 * 0).getHospital().getAddress()); dataMap.put("fast",
			 * masSetupParameterMaintainceList.get(0) .getFastMovingPercent());
			 * dataMap.put("slow", masSetupParameterMaintainceList.get(0)
			 * .getSlowMovingPercent()); dataMap.put("non",
			 * masSetupParameterMaintainceList.get(0) .getNonMovingPercent());
			 * dataMap.put("hospitalId", hospitalId);
			 */
		}
		return dataMap;
	}

	public ModelAndView showListOfNewItemsIntroduced(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "listOfNewItemsIntroduced" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printListOfNewItemsIntroduced(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(LIST_OF_NEW_ITEMS_INTRODUCED),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ LIST_OF_NEW_ITEMS_INTRODUCED + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showPurchaseOrderListOnDate(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "purchaseOrderListOnDate" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printPurchaseOrderListOnDate(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("Date", toDate);
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("deptName",
					(String) session.getAttribute("deptName"));

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(PURCHASE_ORDER_LIST_ON_DATE),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ PURCHASE_ORDER_LIST_ON_DATE + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showPurchaseListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "purchaseList" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printPurchaseList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("deptName",
					(String) session.getAttribute("deptName"));

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(PURCHASE_LIST), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ PURCHASE_LIST + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showVendorWiseLedger(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "vendorWiseLedger" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printVendorWiseLedger(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("deptName",
					(String) session.getAttribute("deptName"));

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(VENDOR_WISE_LEDGER), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ VENDOR_WISE_LEDGER + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showStockTransferItemWise(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "stockTransferItemWise" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printStockTransferItemWise(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("fromDept1", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(STOCK_TRANFER_ITEM_WISE),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ STOCK_TRANFER_ITEM_WISE + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showStockTransferDepartmentWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "stockTransferDepartmentWise" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printStockTransferDepartmentWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}

			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));

			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(STOCK_TRANSFER_DEPARTMENT_WISE),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ STOCK_TRANSFER_DEPARTMENT_WISE + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showManufacturerWiseItemPurchaseList(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.getLoanInList(1);

		String jsp = "manufacturerWiseItemPurchaseList" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printManufacturerWiseItemPurchaseList(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		int manufacturerId = 0;
		byte[] bytes = null;
		String qry = "";
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			if (request.getParameter("manufacturer") != null
					&& !(request.getParameter("manufacturer").equals("0"))) {
				manufacturerId = Integer.parseInt(request
						.getParameter("manufacturer"));
				qry = "  and  mn.manufacturer_id=" + manufacturerId + "";
				requestParameters.put("qry", qry);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(MANUFACTURER_WISE_ITEM_PURCHASE_LIST),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ MANUFACTURER_WISE_ITEM_PURCHASE_LIST + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showBinCardReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		

		//Added by Arbind on 20-11-2017
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = null;
		session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		dataMap.put("hospitalId", hospitalId);
		map = storesHandlerService.showIndentSocTracker(dataMap);
		Box box = HMSUtil.getBox(request);
		String jsp = "binCard" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printBinCardReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		String fromDate;
		String toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = (request.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = (request.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			dataMap = storesHandlerService
					.getReportDataForBinRegister(requestParameters);
			if (dataMap.get("pojoParentList") != null) {
				pojoParentList = (List<PojoForMasStoreItem>) dataMap
						.get("pojoParentList");
			}
			// JasperReport jasperReport =
			// HMSUtil.getCompiledReport(getServletContext(),BIN_CARD);
			JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(
					pojoParentList);
			for (PojoForMasStoreItem o : pojoParentList) {
				JRBeanCollectionDataSource subrepDs = new JRBeanCollectionDataSource(
						o.getChildPojoForMasstoreItemList());
				o.setSubrepDs(subrepDs);
			}

			requestParameters.put("SUBREPORT_DIR", getServletContext()
					.getRealPath("/Reports/"));

			requestParameters.put("fromDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
			requestParameters.put("toDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE)));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(BIN_CARD), requestParameters, ds);
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ BIN_CARD + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showStockRegisterReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapDetail = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int departmentId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			departmentId = Integer.parseInt((session.getAttribute("deptId"))
					.toString());
		}
		mapDetail.put("departmentId", departmentId);
		map = storesHandlerService.showStockRegisterReportJsp(mapDetail);
		String jsp = "stockRegisterReportJsp" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printStockRegisterReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		String fromDate;
		String toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = (request.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = (request.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			int groupId = 0;
			if (request.getParameter(GROUP_ID) != null
					&& !(request.getParameter(GROUP_ID).equals(""))) {
				groupId = Integer.parseInt(request.getParameter(GROUP_ID));
				requestParameters.put("groupId", groupId);
			}
			int itemId = 0;
			if (request.getParameter(ITEM_ID) != null
					&& !(request.getParameter(ITEM_ID).equals(""))) {
				itemId = Integer.parseInt(request.getParameter(ITEM_ID));
				requestParameters.put("itemId", itemId);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			dataMap = storesHandlerService
					.getReportDataForStockRegister(requestParameters);
			if (dataMap.get("pojoParentList") != null) {
				pojoParentList = (List<PojoForMasStoreItem>) dataMap
						.get("pojoParentList");
			}
			// JasperReport jasperReport =
			// HMSUtil.getCompiledReport(getServletContext(),BIN_CARD);
			JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(
					pojoParentList);

			requestParameters.put("SUBREPORT_DIR", getServletContext()
					.getRealPath("/Reports/"));

			requestParameters.put("fromDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
			requestParameters.put("toDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE)));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(STOCK_REGISTER_REPORT),
					requestParameters, ds);
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ STOCK_REGISTER_REPORT + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showStockValuationReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "stockValuationReportJsp" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printStockValuationReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		String fromDate;
		String toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = (request.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = (request.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			dataMap = storesHandlerService
					.getReportDataForStockValuation(requestParameters);
			if (dataMap.get("pojoParentList") != null) {
				pojoParentList = (List<PojoForMasStoreItem>) dataMap
						.get("pojoParentList");
			}
			// JasperReport jasperReport =
			// HMSUtil.getCompiledReport(getServletContext(),BIN_CARD);
			JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(
					pojoParentList);

			requestParameters.put("SUBREPORT_DIR", getServletContext()
					.getRealPath("/Reports/"));

			requestParameters.put("fromDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(FROM_DATE)));
			requestParameters.put("toDate", HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(TO_DATE)));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(STOCK_VALUATION_REPORT),
					requestParameters, ds);
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ STOCK_VALUATION_REPORT + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showItemNotUsed(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "itemNotUsed" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView showItemTransferReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "itemTransferReport" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView showPendingSupplyOrderItemWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "pendingSupplyOrderItemWise" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView showSupplierWisePurchaseReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showSupplierWisePurchaseReport();
		String jsp = "supplierWisePurchaseReport" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printReportForPendingPurchaseOrderItemWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		MasStoreItem masStoreItem = new MasStoreItem();
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		String reportName = "";
		String itemCode = "";
		int itemId = 0;
		try {

			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}
			if (request.getParameter("itemCode") != null) {
				itemCode = request.getParameter("itemCode");
				MasStoreItem masStoreItem1 = storesHandlerService
						.getItemForItemCode(itemCode);
				itemId = masStoreItem1.getId();
			}
			requestParameters.put("itemId", itemId);
			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("deptName",
					(String) session.getAttribute("deptName"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView printReportForStores(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		MasStoreItem masStoreItem = new MasStoreItem();
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		String reportName = "";
		String query = new String("");
		String query_pending_qty = new String("");
		String query_vendor_wise_po_wise_pending_qty = new String("");
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			if (request.getParameter(SUPPLIER_NAME) != null
					&& !(request.getParameter(SUPPLIER_NAME).equals(""))) {
				if (Integer.parseInt(request.getParameter(SUPPLIER_NAME)) != 0) {
					query = "and main2nd.supplier_id = "
							+ Integer.parseInt(request
									.getParameter(SUPPLIER_NAME));
					requestParameters.put("query", query);
				}
			}
			if (request.getParameter(VENDOR_NAME) != null
					&& !(request.getParameter(VENDOR_NAME).equals(""))) {
				if (Integer.parseInt(request.getParameter(VENDOR_NAME)) != 0) {
					query = "and main2nd.supplier_id = "
							+ Integer.parseInt(request
									.getParameter(VENDOR_NAME));
					requestParameters.put("query", query);
					query_vendor_wise_po_wise_pending_qty = " and supplier.supplier_id="
							+ Integer.parseInt(request
									.getParameter(VENDOR_NAME));
					requestParameters.put(
							"query_vendor_wise_po_wise_pending_qty",
							query_vendor_wise_po_wise_pending_qty);

					query_pending_qty = " and a.supplier_id="
							+ Integer.parseInt(request
									.getParameter(VENDOR_NAME));
					requestParameters.put("query_pending_qty",
							query_pending_qty);

				}
			}

			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}
			if (reportName == "") {
				if (box.getString("reportType").equals("summary")) {
					reportName = PENDING_PO_SUPPLIER_WISE;
				} else if (box.getString("reportType").equals("detail")) {
					reportName = VENDOR_WISE_PO_PENDING_QTY;
				}
			}
			if (request.getParameter("salebaleType") != null
					&& !request.getParameter("salebaleType").equals(0)) {
				String salebaleType = request.getParameter("salebaleType");
				if (salebaleType.equalsIgnoreCase("y")) {

					requestParameters.put("ReportsTitle",
							"Item Transfer Report For Saleble Items");
				} else {
					requestParameters.put("ReportsTitle",
							"Item Transfer Report For Non Saleble Items");
				}
				requestParameters.put("salebaleType",
						request.getParameter("salebaleType"));
			}
			if (request.getParameter(VENDOR_NAME) != null
					&& !request.getParameter(VENDOR_NAME).equals("0")) {
				int supplierId = Integer.parseInt(request
						.getParameter(VENDOR_NAME));

				requestParameters.put("supplierId", supplierId);

			}
			if (request.getParameter(PO_ID) != null
					&& !request.getParameter(PO_ID).equals("0")) {
				int poId = Integer.parseInt(request.getParameter(PO_ID));

				requestParameters.put("poId", poId);

			}
			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("deptName",
					(String) session.getAttribute("deptName"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showPendingPoSupplierWiseJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showVendorReportJsp();
		title = "Vendor Report";
		jsp = "pendingPurchaseOrderSuppierWise";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showStockTransferItemWiseForSalebleType(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.showVendorReportJsp();
		title = "Vendor Report";
		jsp = "stockTransferItemWiseForSalebleType";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showCheckForPurchaseOrder(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);

		session = request.getSession();
		box.put("hospitalId", (Integer) session.getAttribute("hospitalId"));
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getPoList(box);
		title = "check For PurchaseOrder";
		jsp = "checkForPurchaseOrder";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printBarCode(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date manufacturingDate;
		Date expiryDate;
		String batchNo = "";
		String itemCode = "";
		String nameItem = "";
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter("manufacturingDate") != null
					&& !(request.getParameter("manufacturingDate").equals(""))) {
				manufacturingDate = HMSUtil
						.convertStringTypeDateToDateType(request
								.getParameter("manufacturingDate"));
				requestParameters.put("manufacturingDate", manufacturingDate);
			}
			if (request.getParameter("expiryDate") != null
					&& !(request.getParameter("expiryDate").equals(""))) {
				expiryDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("expiryDate"));
				requestParameters.put("expiryDate", expiryDate);
			}
			if (request.getParameter("batchNo") != null
					&& !(request.getParameter("batchNo").equals(""))) {
				batchNo = request.getParameter("batchNo");
				requestParameters.put("batchNo", batchNo);
			}
			if (request.getParameter("itemCode") != null
					&& !(request.getParameter("batchNo").equals(""))) {
				itemCode = request.getParameter("itemCode");
				requestParameters.put("itemCode", itemCode);
			}
			if (request.getParameter("nameItem") != null
					&& !(request.getParameter("nameItem").equals(""))) {
				nameItem = request.getParameter("nameItem");
				requestParameters.put("nameItem", nameItem);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("genrate_barcode"), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition",
				"attachment;filename=genrate_barcode");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public void getDataForBarcode(HttpServletRequest request,
			HttpServletResponse response) {

		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------
		String itemNameField = "";
		Map<String, Object> map = new HashMap<String, Object>();
		String lotNo = "";
		List<StoreItemBatchStock> objectList = new ArrayList<StoreItemBatchStock>();

		box.put("deptId", deptId);
		box.put("userName", userName);
		box.put("hospitalId", hospitalId);

		map = storesHandlerService.getDataForBarcode(box);
		if (map.get("storeItemBatchStockList") != null) {
			objectList = (List<StoreItemBatchStock>) map
					.get("storeItemBatchStockList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			if (objectList != null && objectList.size() > 0) {
				if (objectList.get(0) != null) {
					StoreItemBatchStock stock = (StoreItemBatchStock) objectList
							.get(0);
					String pvmsNo = stock.getItem().getPvmsNo();

					String nomenclature = stock.getItem().getNomenclature();
					int itemId = stock.getItem().getId();

					sb.append("<item>");

					sb.append("<pvms>" + pvmsNo + "</pvms>");
					sb.append("<nomenclature>" + nomenclature
							+ "</nomenclature>");
					sb.append("<itemId>" + itemId + "</itemId>");

					try {
						sb.append("<batchNo>" + stock.getBatchNo()
								+ "</batchNo>");
					} catch (Exception e) {
						sb.append("<batchNo></batchNo>");
					}
					try {
						sb.append("<expiryDate>"
								+ HMSUtil.convertDateToStringWithoutTime(stock
										.getExpiryDate()) + "</expiryDate>");
					} catch (Exception e) {
						sb.append("<expiryDate></expiryDate>");
					}
					try {
						sb.append("<availableStock>" + stock.getClosingStock()
								+ "</availableStock>");
					} catch (Exception e) {
						sb.append("<availableStock>0</availableStock>");
					}
					try {
						sb.append("<barCodeNo>" + stock.getBarcodeNo()
								+ "</barCodeNo>");
					} catch (Exception e) {
						sb.append("<barCodeNo></barCodeNo>");
					}
					try {
						sb.append("<au>"
								+ stock.getItem().getItemConversion()
										.getIssueUnit().getUnitName() + "</au>");
					} catch (Exception e) {
						sb.append("<au></au>");
					}

					sb.append("</item>");

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

		// return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getAutoCompleteForPriceList(HttpServletRequest request,
			HttpServletResponse response) {
		String itemNameField = "";
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		HttpSession session1 = request.getSession();
		if (session1.getAttribute("deptId") != null) {
			deptId = (Integer) session1.getAttribute("deptId");
		}
		box.put("deptId", deptId);
		if (request.getParameter(ITEM_CATEGORY_CODE) != null
				&& !request.getParameter(ITEM_CATEGORY_CODE).equals("0")) {
			box.put(ITEM_CATEGORY_CODE,
					Integer.parseInt(request.getParameter(ITEM_CATEGORY_CODE)));
		}

		box.put("autoHint", itemNameField);

		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getAutoCompleteForPriceList(box);
		jsp = "result";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showPriceListReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		map = storesHandlerService.showPriceListReportJsp();
		jsp += PRICE_LIST_REPORT_JSP;
		jsp += ".jsp";
		title = "WorkCategory";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showMonthlyStockTakingReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		// map = storesHandlerService.showPriceListReportJsp();
		jsp += "monthlyStockTaking";
		jsp += ".jsp";
		title = "monthlyStockTaking";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printMonthlyStockTakingReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate;
		Date toDate;
		byte[] bytes = null;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("MonthlyStockTakingReports"),
					requestParameters, (Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition",
				"attachment;filename=MonthlyStockTakingReports");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showGrReturnRecieptRegister(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		// map = storesHandlerService.showPriceListReportJsp();
		jsp += "grReturnRecieptRegister";
		jsp += ".jsp";
		title = "grReturnRecieptRegister";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printGrnReciptReturnRegister(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate = new Date();
		Date toDate = new Date();
		byte[] bytes = null;
		session = request.getSession();
		String reportName = "";
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			String recievingType = "";
			if (request.getParameter("recievingType") != null
					&& !(request.getParameter("recievingType").equals(""))) {
				recievingType = (request.getParameter("recievingType"));
				// requestParameters.put("recievingType", recievingType);
			} else {
				recievingType = "all";
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}

			requestParameters.put("SUBREPORT_DIR", getServletContext()
					.getRealPath("/Reports/"));
			dataMap = getHospitalParameterDetails(request);

			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("hospitalId",
					(Integer) dataMap.get("hospitalId"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			if (recievingType.equalsIgnoreCase("g")) {
				reportName = "Gr_reciept_return_register_for_reciept";
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport(reportName), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (recievingType.equalsIgnoreCase("r")) {
				reportName = "GR_reciept_return_register_for_return";
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport(reportName), requestParameters,
						(Connection) connectionMap.get("con"));
			}
			if (recievingType.equalsIgnoreCase("all")) {
				reportName = "GR_Reciept_return_register";
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport(reportName), requestParameters,
						(Connection) connectionMap.get("con"));
			}

		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + "");
		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showAboveMaxStockLevelReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		jsp += MAX_STOCK_REPORT_JSP;
		jsp += ".jsp";
		title = "Max Stock Level";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printAboveStockLevel(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		HttpSession session = request.getSession();
		String reportName = "";

		try {
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}
			requestParameters.put("hospitalId",	(Integer) dataMap.get("hospitalId"));
			
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showBelowMinStockLevelReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		jsp += MIN_STOCK_REPORT_JSP;
		jsp += ".jsp";
		title = "Max Stock Level";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printbelowStockLevel(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String reportName = "";

		try {
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}

			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showRequisitionToStoreJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		jsp += REQUISITION_TO_STORE_JSP;
		jsp += ".jsp";
		title = "Max Stock Level";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printRequisitionToStoreReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String reportName = "";
		Date fromDate = null;
		Date toDate = null;
		try {

			dataMap = getHospitalParameterDetails(request);
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(FROM_DATE)));
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(TO_DATE)));
			}
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));
			}
			requestParameters.put("fromDate", fromDate);
			requestParameters.put("toDate", toDate);
			requestParameters.put("departmentId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("hospitalId",
					(Integer) session.getAttribute("hospitalId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showRequisitionToStorePendingJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		jsp += REQUISITION_TO_STORE_PENDING_JSP;
		jsp += ".jsp";
		title = "Max Stock Level";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printRequisitionToStorePendingReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String reportName = "";
		try {

			dataMap = getHospitalParameterDetails(request);
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));

			}
			requestParameters.put("departmentId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("hospitalId",
					(Integer) session.getAttribute("hospitalId"));
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showItemTransactionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		jsp += ITEM_TRANASCTION_REPORT_JSP;
		jsp += ".jsp";
		title = "ITEM TRANSACTION REPORT";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printItemTransactionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String hospitalName = "";
		String hospitalAddress = "";
		String reportName = "";
		String transactionType = "";
		int deptId = 0;
		String fromDate = "";
		String toDate = "";
		int hospitalId = 0;
		deptId = (Integer) session.getAttribute("deptId");
		try {

			dataMap = getHospitalParameterDetails(request);
			hospitalName = (String) dataMap.get("hospitalName");
			hospitalAddress = (String) dataMap.get("hospitalAddress");
			hospitalId = (Integer) dataMap.get("hospitalId");
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalAddress", hospitalAddress);
			requestParameters.put("hospitalId", hospitalId);
			if (request.getParameter("fromDate") != null
					&& !request.getParameter("fromDate").equals("")) {
				fromDate = request.getParameter("fromDate");
				requestParameters.put("fromDate",
						HMSUtil.convertStringTypeDateToDateType(fromDate));
			}
			if (request.getParameter("toDate") != null
					&& !request.getParameter("toDate").equals("")) {
				toDate = request.getParameter("toDate");
				requestParameters.put("toDate",
						HMSUtil.convertStringTypeDateToDateType(toDate));
			}

			if (request.getParameter("transactionType") != null
					&& !request.getParameter("transactionType").equals("")) {
				transactionType = request.getParameter("transactionType");
			}

			requestParameters.put("departmentId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("SUBREPORT_DIR", getServletContext()
					.getRealPath("/Reports/"));
			if (transactionType.equals("all")) {
				reportName = "item_transaction_main";
			}
			if (transactionType.equals("rec")) {
				reportName = "Item_transaction_Reciept_single";
			}
			if (transactionType.equals("ret")) {
				reportName = "Item_Tracsaction_Return_single";
			}
			if (transactionType.equals("adjustment")) {
				reportName = "Item_Transaction_Adjustment_single";
			}
			if (transactionType.equals("iss")) {
				reportName = "item_Transaction_Issue_single";
			}
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showFSNAnalysisReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		map = storesHandlerService.getListForFsNReportData();
		jsp += FSN_ANALYSIS_REPORT_JSP;
		jsp += ".jsp";
		title = "FSN_ANALYSIS_REPORT_JSP";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printFSNAnalysisReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String hospitalName = "";
		String hospitalAddress = "";
		String reportName = "";
		String transactionType = "";
		int deptId = 0;
		String fromDate = "";
		String toDate = "";
		int fast = 0;
		int slow = 0;
		int non = 0;
		int itemCategory = 1;
		int itemType = 1;
		int groupType = 1;
		String dangerousDrug = "";
		String controlledDrug = "";
		String essentialDrug = "";
		String highValueDrug = "";
		String qry = "";
		String qry1 = "";
		deptId = (Integer) session.getAttribute("deptId");
		try {
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			dataMap = getHospitalParameterDetails(request);
			hospitalName = (String) dataMap.get("hospitalName");
			hospitalAddress = (String) dataMap.get("hospitalAddress");
			fast = (Integer) dataMap.get("fast");
			slow = (Integer) dataMap.get("slow");
			non = (Integer) dataMap.get("non");
			requestParameters.put("fast", fast);
			requestParameters.put("slow", slow);
			requestParameters.put("non", non);
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalAddress", hospitalAddress);
			if (request.getParameter("fromDate") != null
					&& !request.getParameter("fromDate").equals("")) {
				fromDate = request.getParameter("fromDate");
				requestParameters.put("fromDate", HMSUtil
						.convertStringTypeDateToDateType(fromDate));
			}
			if (request.getParameter("toDate") != null
					&& !request.getParameter("toDate").equals("")) {
				toDate = request.getParameter("toDate");
				requestParameters.put("toDate", HMSUtil
						.convertStringTypeDateToDateType(toDate));
			}
			if (request.getParameter("itemCategory") != null
					&& !request.getParameter("itemCategory").equals("")) {
				itemCategory = Integer.parseInt(request
						.getParameter("itemCategory"));
				qry = qry + "and item_category_id=" + itemCategory + " ";
				requestParameters.put("qry", qry);
			}
			if (request.getParameter("itemType") != null
					&& !request.getParameter("itemType").equals("")) {
				itemType = Integer.parseInt(request.getParameter("itemType"));
				qry = qry + "and item_type_id=" + itemType + " ";
				requestParameters.put("qry", qry);
			}

			if (request.getParameter("reportType") != null
					&& request.getParameter("reportType").equals("1")) {
				dangerousDrug = request.getParameter("reportType");
				qry1 = "and dangerous_drug=" + "'y'" + " ";
				requestParameters.put("qry1", qry1);
			} else {
				if (request.getParameter("reportType") != null
						&& request.getParameter("reportType").equals("2")) {
					controlledDrug = request.getParameter("reportType");
					qry1 = "and controlled_drug=" + "'y'" + " ";
					requestParameters.put("qry1", qry1);
				} else {
					if (request.getParameter("reportType") != null
							&& request.getParameter("reportType").equals("3")) {
						essentialDrug = request.getParameter("reportType");
						qry1 = "and essential_drug=" + "'y'" + " ";
						requestParameters.put("qry1", qry1);
					} else {
						if (request.getParameter("reportType") != null
								&& request.getParameter("reportType").equals(
										"4")) {
							{
								highValueDrug = request
										.getParameter("reportType");
								qry1 = "and high_value_drug=" + "'y'" + " ";
								requestParameters.put("qry1", qry1);
							}
						}
					}
				}
			}
			reportName = "FSNAnalysis";

			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showPharamacyConsuptionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		session = request.getSession();
		int departmentId = Integer.parseInt(session.getAttribute("deptId")
				.toString());
		map = storesHandlerService.showPharamacyStaticsJsp(departmentId);
		jsp += PHARAMCY_CONSUPTION_JSP;
		jsp += ".jsp";
		title = "PHARAMCY_CONSUPTION_JSP";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printPharmacyConsumptionReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Date fromDate = null;
		Date toDate = null;
		session = request.getSession();
		String reportName = "";
		String query = new String("");
		List<Users> userList = new ArrayList<Users>();
		int empId = 0;
		int hospitalId;
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			if (request.getParameter("reportName") != null
					&& !(request.getParameter("reportName").equals(""))) {
				reportName = (request.getParameter("reportName"));
			}

			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				requestParameters.put("hospitalId", hospitalId);
			}

			if (reportName.equals("PharmacyConsumption1")) {

				if (request.getParameter(ITEM_ID) != null
						&& !(request.getParameter(ITEM_ID)).equals("0")) {
					query += " and item.item_id = "
							+ Integer.parseInt(request.getParameter(ITEM_ID));

				}
				if (request.getParameter("empId") != null
						&& !(request.getParameter("empId")).equals("0")) {
					empId = Integer.parseInt(request.getParameter("empId"));
					map = storesHandlerService.getUserName(empId);
					if (map.get("userList") != null) {
						userList = (List<Users>) map.get("userList");
					}
					Users users = new Users();
					if (userList.size() > 0) {
						users = (Users) userList.get(0);
						query += " and  issuem.last_chg_by= '"
								+ users.getUserName() + "'";
						requestParameters.put("userName", users.getUserName());
					}
				}

			} else if (reportName.equals("PharmacyConsumptionSummary1")) {
				if (request.getParameter(ITEM_ID) != null
						&& !(request.getParameter(ITEM_ID)).equals("0")) {
					query += " and item.item_id = "
							+ Integer.parseInt(request.getParameter(ITEM_ID));
				}
				if (request.getParameter("empId") != null
						&& !(request.getParameter("empId")).equals("0")) {
					empId = Integer.parseInt(request.getParameter("empId"));

					map = storesHandlerService.getUserName(empId);
					if (map.get("userList") != null) {
						userList = (List<Users>) map.get("userList");
					}
					Users users = new Users();

					if (userList.size() > 0) {
						users = (Users) userList.get(0);
						query += " and  issuem.last_chg_by= '"
								+ users.getUserName() + "'";
						requestParameters.put("userName", users.getUserName());
					}
				}
			}
			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			requestParameters.put("query", query);
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			HMSUtil.generateReport(reportName, requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

	public ModelAndView showVendorAnalysisReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		map = storesHandlerService.getDataForVendorAnalysis();
		jsp += "VendorAnalysis";
		jsp += ".jsp";
		title = "VendorAnalysis";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printVendorAnalysisReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String hospitalName = "";
		String hospitalAddress = "";
		String reportName = "";

		int deptId = 0;
		String fromDate = "";
		String toDate = "";

		int categoryId = 0;
		int manufactuererId = 0;
		int supplierId = 0;
		int itemId = 0;
		String itemCategoryName = "All";
		String manufacturerName = "All";
		String supplierName = "All";
		String itemCode = "All";
		int hospitalId = 0;
		// String qry=" supplier_id!=0 And item_category_id!=0 And pvms_no is
		// not null And manufacturer_id!=0 ";
		deptId = (Integer) session.getAttribute("deptId");
		try {

			dataMap = getHospitalParameterDetails(request);
			hospitalName = (String) dataMap.get("hospitalName") + ' '
					+ (String) dataMap.get("hospitalAddress");
			hospitalAddress = (String) dataMap.get("hospitalAddress");

			hospitalId = (Integer) dataMap.get("hospitalId");
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalAddress", hospitalAddress);
			requestParameters.put("hospitalId", hospitalId);

			if (request.getParameter("fromDate") != null
					&& !request.getParameter("fromDate").equals("")) {
				fromDate = request.getParameter("fromDate");
				requestParameters.put("fromDate",
						HMSUtil.convertStringTypeDateToDateType(fromDate));
			}
			if (request.getParameter("toDate") != null
					&& !request.getParameter("toDate").equals("")) {
				toDate = request.getParameter("toDate");
				requestParameters.put("toDate",
						HMSUtil.convertStringTypeDateToDateType(toDate));
			}
			// String qry = "where supplier_id !=0 ";
			String qry = "";
			if (request.getParameter("supplierId") != null
					&& !request.getParameter("supplierId").equals("0")) {
				supplierId = Integer.parseInt(request
						.getParameter("supplierId"));
				qry += " and supplier_id =" + supplierId;
				supplierName = request.getParameter("supplierName");
			}

			if (request.getParameter("categoryId") != null
					&& !request.getParameter("categoryId").equals("0")) {
				categoryId = Integer.parseInt(request
						.getParameter("categoryId"));
				qry += " and item_category_id =" + categoryId;
				itemCategoryName = request.getParameter("itemCategoryName");
			}
			if (request.getParameter("manufactuererId") != null
					&& !request.getParameter("manufactuererId").equals("0")) {
				manufactuererId = Integer.parseInt(request
						.getParameter("manufactuererId"));
				qry += " and manufacturer_id = " + manufactuererId;
				manufacturerName = request.getParameter("manufacturerName");
			}
			if (request.getParameter("pvmsNo") != null
					&& !request.getParameter("pvmsNo").equals("")) {
				itemCode = request.getParameter("pvmsNo");
				qry = " and pvms_no ='" + itemCode + "' ";
			}

			/*
			 * if(request.getParameter("categoryId")!=null&&!request.getParameter
			 * ("categoryId").equals("0")){ categoryId=
			 * Integer.parseInt(request.getParameter("categoryId"));
			 * qry="supplier_id !=0 And item_category_id ="+categoryId+" And
			 * pvms_no is not null And manufacturer_id != 0";
			 * 
			 * 
			 * itemCategoryName=request.getParameter("itemCategoryName"); }
			 * 
			 * if(request.getParameter("supplierId")!=null&&!request.getParameter
			 * ("supplierId").equals("0")){ supplierId=
			 * Integer.parseInt(request.getParameter("supplierId"));
			 * qry="supplier_id ="+supplierId+" And item_category_id !=0 And
			 * pvms_no is not null And manufacturer_id != 0";
			 * 
			 * supplierName=request.getParameter("supplierName"); }
			 * if(request.getParameter
			 * ("manufactuererId")!=null&&!request.getParameter
			 * ("manufactuererId").equals("0")){ manufactuererId=
			 * Integer.parseInt(request.getParameter("manufactuererId"));
			 * qry="supplier_id !=0 And item_category_id !=0 And pvms_no is not
			 * null And manufacturer_id = "+manufactuererId+"";
			 * 
			 * manufacturerName=request.getParameter("manufacturerName"); }
			 * if(request
			 * .getParameter("pvmsNo")!=null&&!request.getParameter("pvmsNo"
			 * ).equals("")){ itemCode= request.getParameter("pvmsNo"); //
			 * Map<String,Object>datamap=new HashMap<String,Object>(); //
			 * datamap=storesHandlerService.getItemObjectFromPvms(box); //
			 * MasStoreItem firstItem=new MasStoreItem(); //
			 * firstItem=(MasStoreItem)datamap.get("datamap"); //
			 * if(firstItem!=null){ // itemId=firstItem.getId(); // }
			 * qry="supplier_id !=0 And item_category_id !=0 And pvms_no
			 * ='"+itemCode+"' And manufacturer_id !=0 ";
			 * 
			 * }
			 */
			requestParameters.put("qry", qry);
			/*
			 * requestParameters.put("manufacturerId",manufactuererId );
			 * requestParameters.put("supplierId",supplierId );
			 * requestParameters.put("categoryId",categoryId );
			 * requestParameters.put("itemCode",itemCode );
			 */
			requestParameters.put("supplierName", supplierName);
			requestParameters.put("manufacturerName", manufacturerName);
			requestParameters.put("itemCategoryName", itemCategoryName);
			requestParameters.put("itemCode", itemCode);
			if (request.getParameter("reportName") != null) {
				reportName = request.getParameter("reportName");
			}
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + ".pdf");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showItemAnalysisReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		map = storesHandlerService.getDataForVendorAnalysis();
		jsp += "ItemAnalysis";
		jsp += ".jsp";
		title = "VendorAnalysis";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPharamacyStaticsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();
		int departmentId = Integer.parseInt(session.getAttribute("deptId")
				.toString());
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		map = storesHandlerService.showPharamacyStaticsJsp(departmentId);
		// map=storesHandlerService.getDataForVendorAnalysis();
		jsp += "PharamacyStatics";
		jsp += ".jsp";
		title = "PharamacyStatics";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPharamacyReceiveItemJsp(HttpServletRequest request,
			HttpServletResponse response) {
		session = request.getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "";
		String title = "";
		String deptName = " ";
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
			map.put("department", deptName);
		}
		/* map = storesHandlerService.showPharamacyStaticsJsp(departmentId); */
		// map=storesHandlerService.getDataForVendorAnalysis();
		jsp += "receiveItemReport";
		jsp += ".jsp";
		title = "receiveItemReport";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("department", deptName);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printPharmacyReceiveItemReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		/*
		 * Map<String, Object> requestParameters = new HashMap<String,
		 * Object>();
		 */
		/* JRDataSource ds= null; */
		Date fromDate = new Date();
		Date toDate = new Date();
		Integer deptID = 0;
		int hospitalId = 0;
		session = request.getSession();

		Box box = HMSUtil.getBox(request);

		fromDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString(FROM_DATE));
		toDate = HMSUtil
				.convertStringTypeDateToDateType(box.getString(TO_DATE));

		if ((Integer) session.getAttribute("deptId") != 0) {
			deptID = (Integer) session.getAttribute("deptId");
		}

		if ((Integer) session.getAttribute(HOSPITAL_ID) != 0) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();

		parameters.put("from_date", fromDate);
		parameters.put("to_date", toDate);
		parameters.put("deptId", deptID);
		parameters.put("hospitalId", hospitalId);

		String reportName = "AcknoedgementReport";

		HMSUtil.generateReport(reportName, parameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());

		return null;
	}

	public ModelAndView printPharamacyStaticsReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		byte[] bytes = null;
		session = request.getSession();
		String hospitalName = "";
		String hospitalAddress = "";
		String reportName = "";

		int deptId = 0;
		String fromDate = "";
		String toDate = "";

		deptId = (Integer) session.getAttribute("deptId");
		try {

			dataMap = getHospitalParameterDetails(request);
			hospitalName = (String) dataMap.get("hospitalName");
			hospitalAddress = (String) dataMap.get("hospitalAddress");
			int fromMonth = 0;
			int toMonth = 0;
			int fromYear = 0;
			int toYear = 0;
			int yearParm = 0;
			int monthParam = 0;
			requestParameters.put("deptId", deptId);
			requestParameters.put("hospitalName", hospitalName);
			requestParameters.put("hospitalAddress", hospitalAddress);
			if (request.getParameter("fromDate") != null
					&& !request.getParameter("fromDate").equals("")) {
				fromDate = request.getParameter("fromDate");

				requestParameters.put("fromDate",
						HMSUtil.convertStringTypeDateToDateType(fromDate));
			}
			if (request.getParameter("toDate") != null
					&& !request.getParameter("toDate").equals("")) {
				toDate = request.getParameter("toDate");
				requestParameters.put("toDate",
						HMSUtil.convertStringTypeDateToDateType(toDate));
				String[] arr = fromDate.split("/");
				if (arr.length > 1) {
					fromYear = Integer.parseInt(arr[2]);
				}
				String[] arr1 = toDate.split("/");
				if (arr1.length > 1) {
					toYear = Integer.parseInt(arr1[2]);
				}
				if (toYear - fromYear == 0) {
					yearParm = toYear;

					fromMonth = Integer.parseInt(arr[1]);

					toMonth = Integer.parseInt(arr1[1]);

					if (toMonth - fromMonth > 6) {
						fromMonth = fromMonth - 1;

						reportName = "PharmacyConsumptionStatisticsMonthly";
					} else {

						reportName = "PharmacyConsumptionStatisticsMonthlyCrossTab";
					}
					monthParam = fromMonth;
				}

				else {
					yearParm = fromYear;
					if (toYear - fromYear > 6) {

						reportName = "PharmacyConsumptionStatisticsYear";
					} else {
						reportName = "PharmacyConsumptionStatisticsYearCrossTab1";
					}
				}

			}

			requestParameters.put("yearParm", yearParm);
			requestParameters.put("monthParam", monthParam);
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reportName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename="
				+ reportName + "");

		int b = bytes.length;
		response.setContentLength(b);
		try {
			ServletOutputStream outputStream = response.getOutputStream();

			outputStream.write(bytes, 0, bytes.length);
			outputStream.flush();
			outputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView printItemPriceList(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		JRDataSource ds = null;
		List itemList = null;

		session = request.getSession();

		int hospitalId = 0;
		String hospitalName = "";
		int itemCategoryId = 0;
		String itemCode = null;
		String itemName = null;
		String query = new String("");
		// requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if (request.getParameter("itemCategoryCode") != null
					&& !(request.getParameter("itemCategoryCode").equals(""))) {
				itemCategoryId = Integer.parseInt(request
						.getParameter("itemCategoryCode"));
				if (itemCategoryId != 0) {
					query = " where mas_store_item.item_category_id = "
							+ itemCategoryId;
				}
			}
			if (request.getParameter(SEARCH_NAME) != null
					&& !(request.getParameter(SEARCH_NAME).equals(""))) {
				itemName = request.getParameter(SEARCH_NAME);
				Integer index1 = itemName.lastIndexOf("[") + 1;
				int index2 = itemName.lastIndexOf("]");
				itemCode = itemName.substring(index1, index2);
				query = query + " And mas_store_item.pvms_no = " + "'"
						+ itemCode + "'";
			}

			requestParameters.put("query", query);
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			HMSUtil.generateReport("item_price_list", requestParameters,
					(Connection) connectionMap.get("con"), response,
					getServletContext());

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showActualStockReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		//Added by Arbind on 20-11-2017
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = null;
		session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		dataMap.put("hospitalId", hospitalId);
		String jsp = "";
		String title = "";
		map = storesHandlerService.showIndentSocTracker(dataMap);
		jsp += "actualStockReport";
		jsp += ".jsp";
		title = "actualStockReport";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printDepartmentIndent(HttpServletRequest request,
			HttpServletResponse response) {

		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> purchaseMap = new HashMap<String, Object>();
		jsp = "printDepartmentIndent";
		jsp += ".jsp";
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}

		List<StoreInternalIndentM> deptIndentNumberList = storesHandlerService
				.printDepartmentIndent(deptId);

		map.put("deptIndentNumberList", deptIndentNumberList);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printDepartmentIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		JRDataSource ds = null;
		List itemList = null;

		session = request.getSession();

		int hospitalId = 0;
		String hospitalName = "";
		int itemCategoryId = 0;
		String itemCode = null;
		String itemName = null;
		String deptName = null;
		String query = new String("");
		// requestParameters.put("DEPART", session.getAttribute("deptId"));
		try {

			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				requestParameters.put("department", deptName);
			}
			int deptId = 0;
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				requestParameters.put("deptId", deptId);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put(HOSPITAL_ID, hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
			}
			if (request.getParameter(DEMAND_NO) != null
					&& !(request.getParameter(DEMAND_NO).equals(""))) {
				String demand_no = request.getParameter(DEMAND_NO);
				requestParameters.put("demand_no", demand_no);
			}
			Map<String, Object> connectionMap = storesHandlerService
					.getConnectionForReport();
			HMSUtil.generateReport("department_indent_report",
					requestParameters, (Connection) connectionMap.get("con"),
					response, getServletContext());

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Added By Ritu for Department Issue Without Indent
	 * 
	 */

	public ModelAndView showDeptIssueWithoutIndentJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();

		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		String deptType = "";
		if (session.getAttribute("deptType") != null) {
			deptType = (String) session.getAttribute("deptType");
		}

		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);

		dataMap.put("deptType", deptType);
		map = storesHandlerService.showDeptIssueWithoutIndentJsp(dataMap);

		String jsp = "";
		jsp = "issueToDepartmentWithoutIndent.jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public void getItemDetailsForIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		BigDecimal itemBatchStock = new BigDecimal(0);
		map = storesHandlerService.getOtherItemsForIndent(box);
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		itemList = (List<MasStoreItem>) map.get("itemList");
		itemBatchStock = (BigDecimal) map.get("stock");
		StringBuffer sb = new StringBuffer();
		for (MasStoreItem masStoreItem : itemList) {
			sb.append("<item>");
			sb.append("<id>" + masStoreItem.getId() + "</id>");
			sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
			try {
				sb.append("<au>"
						+ masStoreItem.getItemConversion().getPurchaseUnit()
								.getUnitName() + "</au>");
			} catch (Exception e) {
				sb.append("<au>" + "-" + "</au>");
			}
			sb.append("<name>" + masStoreItem.getNomenclature() + "</name>");

			sb.append("<stock>" + itemBatchStock + "</stock>");
			sb.append("</item>");
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView addIssueWithoutIndentDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		map = storesHandlerService.addIssueWithoutIndentDetails(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		if (flag) {
			map.put("msg", "Item Issued to department Successfully.");
		} else {
			map.put("msg", "Item not issued to Department.");
		}
		String jsp = "responseForIssueId";
		/*
		 * int issueId =0 ; if(map.get("issueId") != null){ issueId =
		 * (Integer)map.get("issueId"); } StringBuffer sb = new StringBuffer();
		 * if(map.get("issueId") != null){ sb.append("<item>");
		 * sb.append("<issueId>" + issueId + "</issueId>");
		 * sb.append("</item>"); }
		 * 
		 * response.setContentType("text/xml");
		 * response.setHeader("Cache-Control", "no-cache"); try {
		 * response.getWriter().write(
		 * "<?xml version='1.0' encoding='ISO-8859-1'?>");
		 * response.getWriter().write("<items>");
		 * response.getWriter().write(sb.toString());
		 * response.getWriter().write("</items>"); } catch (Exception e) {
		 * e.printStackTrace(); }
		 */
		return new ModelAndView(jsp, "map", map);
	}

	public StoresHandlerService getStoresHandlerService() {
		return storesHandlerService;
	}

	public void setStoresHandlerService(
			StoresHandlerService storesHandlerService) {
		this.storesHandlerService = storesHandlerService;
	}

	public CommonMasterHandlerService getCommonMasterHandlerService() {
		return commonMasterHandlerService;
	}

	public void setCommonMasterHandlerService(
			CommonMasterHandlerService commonMasterHandlerService) {
		this.commonMasterHandlerService = commonMasterHandlerService;
	}

	public void setHospitalDetailsMasterHandlerService(
			HospitalDetailsMasterHandlerService hospitalDetailsMasterHandlerService) {
		this.hospitalDetailsMasterHandlerService = hospitalDetailsMasterHandlerService;
	}

	public BillingHandlerService getBillingHandlerService() {
		return billingHandlerService;
	}

	public void setBillingHandlerService(
			BillingHandlerService billingHandlerService) {
		this.billingHandlerService = billingHandlerService;
	}

	// -------------------------------------------------------------------------------------
	// ---------Pateint Issue Entry ---BY Dipali--11/Nov/2010.
	public ModelAndView showPatientIssueEntryJsp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = STRS_PATIENT_ISSUE_SEARCH;
		jsp += ".jsp";
		title = "Patient Issue Entry";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView searchPatientIssueEntry(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String hinNo = "";
		String deptName = "";
		int deptId = 0;
		int hospitalId;
		Box box = HMSUtil.getBox(request);
		session.setAttribute("box", box);
		session = request.getSession();

		try {
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
				mapForDs.put("deptName", deptName);
			}
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				mapForDs.put("deptId", deptId);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				mapForDs.put("hospitalId", hospitalId);
			}
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				mapForDs.put("hinNo", hinNo);
			}
			if (request.getParameter(P_FIRST_NAME) != null
					&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
				patientFName = request.getParameter(P_FIRST_NAME);
				mapForDs.put("patientFName", patientFName);
			}
			if (request.getParameter(P_MIDDLE_NAME) != null
					&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
				patientMName = request.getParameter(P_MIDDLE_NAME);
				mapForDs.put("patientMName", patientMName);
			}
			if (request.getParameter(P_LAST_NAME) != null
					&& !(request.getParameter(P_LAST_NAME).equals(""))) {
				patientLName = request.getParameter(P_LAST_NAME);
				mapForDs.put("patientLName", patientLName);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		patientMap = storesHandlerService.getPatientForDrugIssue(mapForDs);
		jsp = STRS_PATIENT_ISSUE_SEARCH;
		jsp += ".jsp";
		map.put("patientMap", patientMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPatientForDrugIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = 0;
		int visitId = 0;
		int itemId = 0;
		int hospitalId = 0;
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}

		HttpSession session = request.getSession();
		String deptType = "";
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		if (hinId != 0) {
			map = storesHandlerService.showPatientForDrugIssue(mapForDS);
			List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
			alreadyissuedDrugList = (List) map.get("alreadyissuedDrugList");
		}
		jsp = STRS_PATIENT_DRUG_ISSUE + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView openItemPatientDrugissue(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		int itemId = 0;
		int rowVal = 0;
		session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_TO_OTHER_UNITS;
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openPatientIssuedDrug(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map map = new HashMap();
		int visitId = 0;
		int rowVal = 0;
		session = request.getSession();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// --------------------------------------------------------------------------------

		if (request.getParameter("visitId") != null) {
			// visitId = Integer.parseInt(request.getParameter("visitId");
		}
		/*
		 * if (request.getParameter("rowVal") != null) { rowVal =
		 * Integer.parseInt(request.getParameter("rowVal")); }
		 */
		dataMap.put("deptId", deptId);
		dataMap.put("visitId", visitId);
		// map = storesHandlerService.getPatientIssuedDrug(dataMap);
		map.put("rowVal", rowVal);
		jsp = RequestConstants.ITEM_BRAND_WINDOW_JSP_TO_OTHER_UNITS;
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewIssuedDrug(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();
		int issuedMId = 0;
		if (request.getParameter("issuedMId") != null) {
			issuedMId = Integer.parseInt(request.getParameter("issuedMId"));
		}
		parameterMap.put("issuedMId", issuedMId);
		map = storesHandlerService.viewIssuedDrug(parameterMap);

		String jsp = "";
		jsp = "strs_Patient_Issued_Drug";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView openItemBrandWindowForDrugIssueJsp(
			HttpServletRequest request, HttpServletResponse response)
			throws ParseException {
		// ----- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		// --------------------------------------------------------------------------------
		int itemId = 0;
		String qtyRequested = "";
		int rowVal = 0;
		int issuedItemId = 0;
		int issueId = 0;
		int detailId = 0;
		int visitId = 0;
		int presId = 0;
		Date issueDate = new Date();
		String issueNo = "";
		String itemName = "";
		String pvms = "";
		int qtyPending = 0;
		int totalRow=0;
		BigDecimal loanOutQty = null;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request
					.getParameter(RequestConstants.ITEM_ID));
		}
		if (request.getParameter(RequestConstants.QTY_IN_REQUEST) != null) {
			qtyRequested = (request
					.getParameter(RequestConstants.QTY_IN_REQUEST));
		}
		
		if (request.getParameter("qtyPending") != null) {
			qtyPending = Integer.parseInt(request.getParameter("qtyPending")
					.toString());
		}
		
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		if (request.getParameter("presId") != null) {
			presId = Integer.parseInt(request.getParameter("presId"));
		}
		if (request.getParameter("issueNo") != null) {
			issueNo = request.getParameter("issueNo");
		}

		if (request.getParameter("rowVal") != null) {
			rowVal = Integer.parseInt(request.getParameter("rowVal"));
		}
		if (request.getParameter("issuedItemId") != null
				&& !(request.getParameter("issuedItemId")).equals("")) {
			issuedItemId = Integer.parseInt(request
					.getParameter("issuedItemId"));
		}
		if (request.getParameter("issueId") != null
				&& !(request.getParameter("issueId")).equals("")) {
			issueId = Integer.parseInt(request.getParameter("issueId"));
		}
		if (request.getParameter("detailId") != null
				&& !(request.getParameter("detailId")).equals("")) {
			detailId = Integer.parseInt(request.getParameter("detailId"));
		}
		if (request.getParameter("itemName") != null) {
			itemName = request.getParameter("itemName");
		}
		if (request.getParameter(ISSUE_DATE) != null
				&& !request.getParameter(ISSUE_DATE).equals("")) {
			issueDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(ISSUE_DATE));
		}
		if (request.getParameter("totalRow") != null
				&& !request.getParameter("totalRow").equals("")) {
			totalRow = Integer.parseInt(request
					.getParameter("totalRow"));
		}
		/*
		 * if (request.getParameter("pvms") != null) { pvms =
		 * request.getParameter("pvms"); }
		 */
		/*
		 * if (request.getParameter("loanOutQty") != null &&
		 * request.getParameter("loanOutQty") != "") { loanOutQty = new
		 * BigDecimal(request.getParameter("loanOutQty"));
		 * 
		 * }
		 */
		// dataMap.put("visitId", visitId);
		dataMap.put("deptId", deptId);
		dataMap.put("itemId", itemId);
		dataMap.put("hospitalId", hospitalId);
		// dataMap.put("issueNo", issueNo);
		map = storesHandlerService.getBrandMap(dataMap);
		map.put("issueDate", issueDate);
		map.put("qtyRequested", qtyRequested);
		map.put("qtyPending", qtyPending);
		map.put("visitId", visitId);
		map.put("presId", presId);
		map.put("itemId", itemId);
		map.put("issuedItemId", issuedItemId);
		map.put("rowVal", rowVal);
		map.put("issueId", issueId);
		map.put("detailId", detailId);
		map.put("issueNo", issueNo);
		map.put("itemName", itemName);
		map.put("totalRow", totalRow);
		// map.put("pvms", pvms);
		// map.put("loanOutQty", loanOutQty);
		map.put("flag", request.getParameter("flag"));

		jsp = "strs_Item_Issu_Drug";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView	addPatientDrugIssueReplace(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String userName = "";
		String deptType = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		int issueTId=0;
		int totalRowCount=0;
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("deptType") != null)
			deptType = (String) session.getAttribute("deptType");
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));
        if(request.getParameter("issueTId")!=null){
        	issueTId=Integer.parseInt(request.getParameter("issueTId"));
        }
        if(request.getParameter("totalRowCount")!=null){
        	totalRowCount=Integer.parseInt(request.getParameter("totalRowCount"));
        }
		boolean flag = false;
		int visitId = 0;
		String messageTOBeVisibleToTheUser = "";
		Box box = HMSUtil.getBox(request);
		box.put("deptType", deptType);
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("issueTId", issueTId);
		map = storesHandlerService.addPatientDrugIssueReplace(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		if (flag) {
			map.put("msg", "Drug Replaced to Pharmacy Successfully.");
		} else {
			map.put("msg", "Item not issued to Patient.");
		}
		String jsp = "messagewForReplacedItem";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView addPatientDrugIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String userName = "";
		String deptType = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("deptType") != null)
			deptType = (String) session.getAttribute("deptType");
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		boolean flag = false;
		int visitId = 0;
		String messageTOBeVisibleToTheUser = "";
		Box box = HMSUtil.getBox(request);
		box.put("deptType", deptType);
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		// Commented by dhananjay 04-11-2016
		//map = storesHandlerService.addPatientDrugIssue(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		if (flag) {
			map.put("msg", "Drug Issued to Patient Successfully.");
		} else {
			map.put("msg", "Item not issued to Patient.");
		}
		
		String jsp = "responseForIssueId";
		return new ModelAndView(jsp, "map", map);
	}

	// ------Purchase Order Tracking Screen By Dipali---

	public ModelAndView showPurcahseOrderTrackingJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "strs_PurchaseOrderTracking";
		jsp += ".jsp";
		title = "purcahseorderTracking";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchPOTrackingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		HttpSession session = request.getSession();
		int hospitalId = 0;

		try {
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = Integer.parseInt(""
						+ session.getAttribute("hospitalId"));
				map.put("hospitalId", hospitalId);
			}
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				map.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				map.put("toDate", toDate);
			}
			map = storesHandlerService.searchPOList(map);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "strs_PurchaseOrderTracking";
		jsp += ".jsp";
		title = "OP List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPoTrackingDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int id = 0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("id") != null) {
			id = Integer.parseInt(request.getParameter("id"));
		}
		dataMap.put("id", id);
		map = storesHandlerService.showPoTrackingDetails(dataMap);
		String jsp = STRS_PO_TRACKING_DETAILS;
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchButtonPOTrackingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			map = storesHandlerService.searchButtonPOTrackingList(map);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "strs_PurchaseOrderTracking";
		jsp += ".jsp";
		title = "PO List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	// -End By Dipali----
	// ---By RamDular--

	public ModelAndView getItemListForBINCardByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		int counter = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			map.put("deptId", deptId);
			map.put("userName", userName);
			map.put("autoHint", autoHint);

			map = storesHandlerService.getItemListForBINCardByAutocomplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseInGrid";
		title = "BIN Card Reports";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	// ---By Mukesh---

	@SuppressWarnings("unchecked")
	public ModelAndView searchIndentDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int internalIndentId = 0;
		Box box = HMSUtil.getBox(request);
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("hospitalId", hospitalId);
		box.put("userName", userName);
		box.put("deptId", deptId);
		map = storesHandlerService.searchIndentDetails(box);
		int requestByEmpId = 0;
		//
		if (map.get("requestByEmpId") != null) {
			requestByEmpId = (Integer) map.get("requestByEmpId");
		}
		if (request.getParameter(ISSUE_NO) != null) {
			map.put("max", request.getParameter(ISSUE_NO));
		}
		/*
		 * Code for Issue No Code By Mukesh Narayan SIngh Date 02 Dec 2010
		 */

		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map<String, Object> mapDemand = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)
				&& (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != "")) {
			dispenceryId = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		int employeeId = 0;
		if (request.getParameter(REQUEST_BY) != null
				&& !request.getParameter(REQUEST_BY).equals("")) {
			employeeId = Integer.parseInt(request.getParameter(REQUEST_BY));
		}
		/* jsp = RequestConstants.DEMAND_LIST_AJAX_JSP; */
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("employeeId", employeeId);
		mapDemand = storesHandlerService.getDemandList(dataMap);
		List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		if (mapDemand.get("storeInternalIndentMList") != null) {
			storeInternalIndentMPOList = (List<Object[]>) mapDemand
					.get("storeInternalIndentMList");
		}
		if (mapDemand.get("employeeDeptByList") != null) {
			employeeDeptByList = (List<MasEmployee>) mapDemand
					.get("employeeDeptByList");
		}
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		if (mapDemand.get("searchListForPopup") != null) {
			searchListForPopup = (List) mapDemand.get("searchListForPopup");
		}
		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
		if (mapDemand.get("storeInternalIndentPendingList") != null) {
			storeInternalIndentPendingList = (List) mapDemand
					.get("storeInternalIndentPendingList");
		}
		map.put("storeInternalIndentPendingList",
				storeInternalIndentPendingList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("employeeDeptByList", employeeDeptByList);

		/*
		 * End of Code for Issue No Code By Mukesh Narayan SIngh Date 02 Dec
		 * 2010
		 */

		jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("storeInternalIndentMPOList", storeInternalIndentMPOList);
		map.put("internalIndentId", internalIndentId);
		map.put("requestByEmpId", requestByEmpId);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView addBrandIssueDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		Box box = HMSUtil.getBox(request);
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("userName", userName);
		map = storesHandlerService.addBrandIssueDetails(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		if (flag) {
			map.put("msg", "Item Issued to department Successfully.");
		} else {
			map.put("msg", "Item not issued to Department.");
		}
		String jsp = "responseForIssueId";

		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView addBrandItemIssueDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		int userId = (Integer) session.getAttribute("userId");

		int counter = 0;
		if (request.getParameter("counter") != null) {
			counter = Integer.parseInt(request.getParameter("counter"));
		}

		int issuedQtyTemp = 0;
		int itemId = 0;

		String qtyRequested = "";
		String qtyIssued = "";
		int rowVal = 0;
		int itemIssued = 0;
		int issueId = 0;
		int detailId = 0;
		String issueNo = "";
		int indentDtId = 0;
		int srNo = 0;

		if (request.getParameter("srNo") != null) {
			srNo = Integer.parseInt(request.getParameter("srNo").trim());
		}
		if (request.getParameter(RequestConstants.ISSUE_ID) != null) {
			issueId = Integer.parseInt(request.getParameter(
					RequestConstants.ISSUE_ID).trim());
		}
		if (request.getParameter(RequestConstants.DETAIL_ID) != null) {
			detailId = Integer.parseInt(request.getParameter(
					RequestConstants.DETAIL_ID).trim());
		}
		if (request.getParameter(RequestConstants.ITEM_ID) != null) {
			itemId = Integer.parseInt(request.getParameter(
					RequestConstants.ITEM_ID).trim());
		}

		if (request.getParameter(RequestConstants.ISSUED_ITEM) != null) {
			itemIssued = Integer.parseInt(request.getParameter(
					RequestConstants.ISSUED_ITEM).trim());
		}

		if (request.getParameter(RequestConstants.ISSUE_NO) != null) {
			issueNo = request.getParameter(RequestConstants.ISSUE_NO).trim();
		}
		if (request.getParameter("indentDtId") != null) {
			indentDtId = Integer.parseInt(request.getParameter("indentDtId")
					.trim());
		}
		BigDecimal qtyReq = null;
		// new BigDecimal(box.getString(QTY_IN_REQUEST));
		if (request.getParameter(QTY_IN_REQUEST) != null) {
			qtyReq = new BigDecimal(request.getParameter(QTY_IN_REQUEST));
			// qtyReq=
			// Integer.parseInt(request.getParameter(QTY_IN_REQUEST).trim());
		}
		// int itemId = box.getInt(ITEM_ID);
		// BigDecimal qtyReq = new BigDecimal(box.getString(QTY_IN_REQUEST));
		// int itemIssued = box.getInt(ISSUED_ITEM);
		detailsMap.put("srNo", srNo);
		detailsMap.put("issueId", issueId);
		detailsMap.put("detailId", detailId);
		detailsMap.put("itemId", itemId);
		detailsMap.put("itemIssued", itemIssued);
		detailsMap.put("issueNo", issueNo);
		detailsMap.put("indentDtId", indentDtId);
		String issuedBatchIdAndQty = "";

		StoreIssueM issueM = new StoreIssueM();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		if (issueId == 0) {

			issueM.setIssueType("i");
			issueM.setIssueNo(request.getParameter(ISSUE_NO));
			issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(ISSUE_DATE)));

			MasDepartment department = new MasDepartment();
			department.setId(deptId);
			issueM.setDepartment(department);

			MasDepartment department2 = new MasDepartment();
			department2.setId(Integer.parseInt(request
					.getParameter(DEPARTMENT_ID_TEMP)));
			issueM.setToStore(department2);

			StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
			internalIndentM.setId(Integer.parseInt(request
					.getParameter(REQUEST_NO)));
			issueM.setRequestNo(internalIndentM);

			issueM.setRequestDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(REQUEST_DATE)));

			MasEmployee employee = new MasEmployee();
			employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
			issueM.setRequestBy(employee);

			MasEmployee employee2 = new MasEmployee();
			employee2
					.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
			issueM.setApprovedBy(employee2);

			MasEmployee employee3 = new MasEmployee();
			employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
			issueM.setIssuedBy(employee3);
			issueM.setStatus("o");

			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			issueM.setHospital(hospital);

			issueM.setDocNo(request.getParameter(REQUEST_NO));
			Users users = new Users();
			users.setId(userId);
			issueM.setLastChgBy(users);
			issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			issueM.setLastChgTime(time);

			// session.save(issueM);
			detailsMap.put("issueM", issueM);
		}
		int totalQtyIssued = 0;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		if (counter > 0) {
			for (int i = 0; i < counter; i++) {
				String remark = "";
				int issuedQty = 0;
				int batchId = 0;
				String batchNo = "";
				/*
				 * if (request.getParameter(RequestConstants.QTY_ISSUED_TEMP+i)
				 * != null &&
				 * request.getParameter(RequestConstants.QTY_ISSUED_TEMP+i)=="")
				 * { issuedQtyTemp=
				 * Integer.parseInt(request.getParameter(RequestConstants
				 * .QTY_ISSUED_TEMP+i).trim()); }
				 */
				if (request.getParameter(RequestConstants.QTY_ISSUED + i) != null) {
					issuedQty = Integer.parseInt(request.getParameter(
							RequestConstants.QTY_ISSUED + i).trim());
				}
				if (request.getParameter(RequestConstants.BATCH_ID + i) != null) {
					batchId = Integer.parseInt(request.getParameter(
							RequestConstants.BATCH_ID + i).trim());
				}
				if (request.getParameter(RequestConstants.BATCH_NO + i) != null) {
					batchNo = request.getParameter(
							RequestConstants.BATCH_NO + i).trim();
				}
				if (request.getParameter(RequestConstants.REMARKS + i) != null) {
					remark = request.getParameter(RequestConstants.REMARKS + i)
							.trim();
				}
				String expiryDate = "";
				if (request.getParameter(EXPIRY_DATE + i) != null) {
					expiryDate = request.getParameter(EXPIRY_DATE + i).trim();
				}
				String costPrise = "";
				if (request.getParameter(COST_PRICE + i) != null) {
					costPrise = request.getParameter(COST_PRICE + i).trim();
				}

				// Vector batchNos = box.getVector(BATCH_NO);
				// Vector qtyIssued = box.getVector(QTY_ISSUED);
				// Vector remarks = box.getVector(REMARKS);
				// Vector expDates = box.getVector(EXPIRY_DATE);
				// Vector costPrice = box.getVector(COST_PRICE);
				if (issuedQty > 0) {
					issuedBatchIdAndQty = issuedBatchIdAndQty + "#" + batchId
							+ "/" + issuedQty;

					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT.setBatchNo(batchNo);

					MasStoreItem storeItem = new MasStoreItem();
					storeItem.setId(itemId);
					storeIssueT.setItem(storeItem);

					MasStoreItem storeItem1 = new MasStoreItem();
					storeItem1.setId(itemIssued);
					// storeIssueT.setItemIssued(storeItem1);

					storeIssueT.setQtyRequest(qtyReq);
					// storeIssueT.setQtyIssued(new
					// BigDecimal(qtyIssued.get(i).toString()));
					storeIssueT.setQtyIssued(new BigDecimal(issuedQty));

					storeIssueT.setRemarks(remark);
					storeIssueT.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
					storeIssueT.setCostPrice(new BigDecimal(costPrise));
					storeIssueT.setSrNo(srNo);
					storeIssueT.setIssued("y");
					if (issueId == 0) {
						storeIssueT.setIssueM(issueM);
					} else {
						StoreIssueM stIssueM = new StoreIssueM();
						stIssueM.setId(issueId);
						storeIssueT.setIssueM(stIssueM);

					}
					// session.save(storeIssueT);
					storeIssueTList.add(storeIssueT);
					totalQtyIssued = totalQtyIssued + issuedQty;
				}
			}

		}
		detailsMap.put("storeIssueTList", storeIssueTList);
		detailsMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
		detailsMap.put("totalQtyIssued", totalQtyIssued);
		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		// Box box = HMSUtil.getBox(request);
		detailsMap.put("deptId", deptId);
		detailsMap.put("hospitalId", hospitalId);
		detailsMap.put("userName", userName);
		// map = storesHandlerService.addBrandIssueDetails(box);
		map = storesHandlerService.addBrandItemIssueDetails(detailsMap);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		if (flag) {
			map.put("msg", "Item Issued to department Successfully.");
		} else {
			map.put("msg", "Item not issued to Department.");
		}
		String jsp = "responseForIssueId";

		return new ModelAndView(jsp, "map", map);
	}

	/*
	 * public ModelAndView printDepartmentIssue( HttpServletRequest request,
	 * HttpServletResponse response) { Map<String, Object> parameters = new
	 * HashMap<String, Object>();
	 * 
	 * @SuppressWarnings("unused") int issueId = 0; try { if
	 * (request.getParameter("issueId") != null &&
	 * !request.getParameter("issueId").equals("")) { issueId =
	 * Integer.parseInt(request.getParameter("issueId"));
	 * parameters.put("issueId", issueId); } } catch (Exception e) {
	 * e.printStackTrace(); }
	 * 
	 * Map<String, Object> connectionMap =
	 * storesHandlerService.getConnectionForReport();
	 * HMSUtil.generateReport("department_issue_print", parameters, (Connection)
	 * connectionMap.get("conn"), response, getServletContext()); return new
	 * ModelAndView("index", "map", map); }
	 */
	public ModelAndView printDepartmentIssue1(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int issueId = 0;
		// int departmentId=0;
		// String adjustmentNo="";
		try {

			/*
			 * if (map.get(adjustmentNo)!= null &&
			 * !map.get(adjustmentNo).equals("")) {
			 * adjustmentNo=(String)map.get(adjustmentNo);
			 * 
			 * }
			 */

			String issueNo = "";
			if (request.getParameter("issueIdPrint") != null) {
				issueNo = request.getParameter("issueIdPrint").trim();
			}
			issueId = storesHandlerService.getIssueId(issueNo);
			// }
			if (issueId > 0) {
				requestParameters.put("issueId", issueId);
			}

			/*
			 * Map<String, Object> connectionMap = storesHandlerService
			 * .getConnectionForReport();
			 */byte[] bytes = null;

			String reprotName = "";
			// try {
			if (issueId > 0) {
				reprotName = "department_issue_print";
			}
			// }catch(Exception e){
			// e.printStackTrace();
			// }
			Map<String, Object> connectionMap1 = storesHandlerService
					.getConnectionForReport();
			HMSUtil.generateReport(reprotName, requestParameters,
					(Connection) connectionMap1.get("con"), response,
					getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public void printDepartmentIssue(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		int issueId = 0;
		int departmentId = 0;
		String adjustmentNo = "";
		try {

			/*
			 * if (map.get(adjustmentNo)!= null &&
			 * !map.get(adjustmentNo).equals("")) {
			 * adjustmentNo=(String)map.get(adjustmentNo);
			 * 
			 * }
			 */

			String issueNo = "";
			if (request.getParameter("issueIdPrint") != null) {
				issueNo = request.getParameter("issueIdPrint").trim();
				String[] str = issueNo.split("#");
				if (str.length > 0) {
					issueId = Integer.parseInt(str[1].trim());
					if (issueId > 0) {
						requestParameters.put("issueId", issueId);
					}
				}
			}

			// }
			if (request.getParameter("issueId") != null
					&& !request.getParameter("issueId").equals("")) {
				issueId = Integer.parseInt(request.getParameter("issueId"));
				if (issueId > 0) {
					requestParameters.put("issueId", issueId);
				}
			}
			if (request.getParameter("adjustment") != null
					&& !request.getParameter("adjustment").equals("")) {
				adjustmentNo = request.getParameter("adjustment");
			}
			if (session.getAttribute("deptId") != null) {
				departmentId = Integer
						.parseInt((session.getAttribute("deptId")).toString());
				if (departmentId > 0) {
					requestParameters.put("department_id", departmentId);
					requestParameters.put("adjustment_no", adjustmentNo);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		byte[] bytes = null;

		String reprotName = "";
		try {
			if (issueId > 0) {
				//reprotName = "department_issue_print";
				reprotName = "issue";
			} else {
				reprotName = "Certificate_Of_Stock_Taking";
			}
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport(reprotName), requestParameters,
					(Connection) connectionMap.get("con"));
		} catch (JRException e) {
			e.printStackTrace();
		}

		response.setHeader("Content-Disposition", "attachment; filename="
				+ reprotName + ".pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		//Commented by Arbind on 08-03-2017
		//return new ModelAndView("index", "map", map);
	}

	public ModelAndView correctDepartmentIssueToAcknowledgement(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int indentId = 0;
		try {

			if (request.getParameter(REQUEST_NO) != null) {
				indentId = Integer.parseInt(request.getParameter(REQUEST_NO));
			}
			detailsMap.put("indentId", indentId);
			map = storesHandlerService
					.correctDepartmentIssueToAcknowledgement(detailsMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public void checkPreviousImport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("deptId", deptId);
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		String message = "";
		StringBuffer sb = new StringBuffer();
		map = storesHandlerService.checkPreviousImport(box);
		if (map.get("message") != null) {
			message = (String) map.get("message");
		}
		try {
			sb.append("<item>");
			if (map.get("message") != null) {
				sb.append("<message>" + message + "</message>");
			} else {
				sb.append("<message>" + " " + "</message>");
			}
			sb.append("</item>");

			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/*
	 * **********************Method Written By Tirath For Silvassa For Indent
	 * Issue****************************
	 */

	public ModelAndView submitIssueForOtherInstituteIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int deptId = (Integer) session.getAttribute("deptId");
		int userId = (Integer) session.getAttribute("userId");
		int indentDtId = 0;
		boolean b = false;
		String issuedBatchIdAndQty = "";
		Set set = new HashSet();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
		BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
		BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal amtInRs = new BigDecimal(0);
		BigDecimal roundAmtPs = new BigDecimal(0);
		BigDecimal zero = new BigDecimal("0");

		String[] array1 = request.getParameterValues("tt8");
		String[] totalQuantityIssued = request.getParameterValues("tt6");
		String[] totalQuantityRequested = request
				.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		// String[] storeIndentTIdArray =
		// request.getParameterValues("storeIndentTId");
		/*
		 * if (request.getParameter("indentDtId") != null) { indentDtId=
		 * Integer.parseInt(request.getParameter("indentDtId").trim());
		 * utilMap.put("indentDtId", indentDtId); }
		 */
		StoreIssueM issueM = new StoreIssueM();
		issueM.setIssueType("i");
		utilMap.put("issueNo", request.getParameter(ISSUE_NO));
		issueM.setIssueNo(request.getParameter(ISSUE_NO));
		issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(ISSUE_DATE)));

		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		issueM.setDepartment(department);

		MasDepartment department2 = new MasDepartment();
		department2.setId(Integer.parseInt(request
				.getParameter(DEPARTMENT_ID_TEMP)));
		issueM.setToStore(department2);

		StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
		internalIndentM
				.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
		issueM.setRequestNo(internalIndentM);

		issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(REQUEST_DATE)));

		/*MasEmployee employee = new MasEmployee();
		employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		issueM.setRequestBy(employee);

		MasEmployee employee2 = new MasEmployee();
		employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		issueM.setApprovedBy(employee2);

		MasEmployee employee3 = new MasEmployee();
		employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
		issueM.setIssuedBy(employee3);*/
		
		issueM.setStatus("o");

		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		issueM.setHospital(hospital);

		issueM.setDocNo(request.getParameter(REQUEST_NO));
		Users users = new Users();
		users.setId(userId);
		issueM.setLastChgBy(users);
		issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		issueM.setLastChgTime(time);
		utilMap.put("issueM", issueM);
		int k = 1;
		int totalQtyIssued = 0;
		for (int i = 0; i < array1.length; i++) {
			int issuedQty = 0;
			int batchId = 0;
			BigDecimal totalQtyRequest = null;
			if (!array1[i].trim().equals("blank")) {
				if (!totalQuantityIssued[i].equals("")) {
					totalQtyIssued = Integer.parseInt(totalQuantityIssued[i]);
				}

				if (!totalQuantityRequested[i].equals("")) {
					totalQtyRequest = new BigDecimal(totalQuantityRequested[i]);
				}
				if (request.getParameter(RequestConstants.QTY_ISSUED + k) != null) {
					issuedQty = Integer.parseInt(request.getParameter(
							RequestConstants.QTY_ISSUED + k).trim());
				}

				Integer storeIndentTId = 0;

				String item[] = request
						.getParameterValues(RequestConstants.ITEM_ID);

				String[] subArray1 = array1[i].split(",");
				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(Integer.parseInt(item[i]));

				MasStoreItem isstedItem = new MasStoreItem();
				isstedItem.setId(Integer.parseInt(item[i]));
				/*
				 * if (request.getParameter(RequestConstants.BATCH_ID+i) !=
				 * null) { batchId=
				 * Integer.parseInt(request.getParameter(RequestConstants
				 * .BATCH_ID+i).trim());
				 * System.out.println("batchId=="+batchId);
				 * 
				 * 
				 * }
				 */
				// System.out.println("issuedBatchIdAndQty===="+issuedBatchIdAndQty+"#"+batchId+"/"+issuedQty);
				issuedBatchIdAndQty = issuedBatchIdAndQty + "#" + batchId + "/"
						+ issuedQty;

				for (int j = 0; j < subArray1.length; j++) {
					String subArray2[] = subArray1[j].split("@");
					String qty = subArray2[0].trim();
					String batch = subArray2[1].trim();
					String manufactureDate = subArray2[2].trim();
					String expiryDate = subArray2[3].trim();
					batchId = Integer.parseInt(subArray2[4].trim());

					StoreIssueT child = new StoreIssueT();
					child.setBatchNo(batch);
					if(!expiryDate.equals("")){
					child.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
				}
					child.setQtyIssued(new BigDecimal(qty));
					child.setQtyRequest(totalQtyRequest);
					// added by anamika ----------------
					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock.setId(batchId);
					child.setStock(itemBatchStock);

					child.setIssueM(issueM);
					child.setItem(masStoreItem);
					// child.setItemIssued(isstedItem);
					child.setCostPrice(new BigDecimal(0));
					child.setRemarks(request
							.getParameter(RequestConstants.REMARKS_TEMP));
					child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
					child.setIssued("y");
					child.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
					// child.setSalesTaxAmt(new BigDecimal(salesTax));
					// child.setAmtIncludingSalesTax(new
					// BigDecimal(amtIncludingSalesTax));
					set.add(child);
				}
			}
			totalQtyIssued = totalQtyIssued + issuedQty;

			k = k + 1;
		}
		utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
		utilMap.put("totalQtyIssued", totalQtyIssued);
		utilMap.put("deptId", deptId);
		utilMap.put("hospitalId", hospitalId);
		issueM.setStoreIssueTs(set);
		map = storesHandlerService.submitIssueForOtherInstituteIndent(utilMap, box);
		String msg = "";
		if (map.get("b") != null) {
			b = (Boolean) map.get("b");
		}
		if (b) {
			msg = "Indent Has Been Issued Successfully.";
		} else {
			msg = "Indent Has Not Been Issued Successfully.";
		}
		String jsp = STORES_MESSAGE_JSP;
		String messageTOBeVisibleToTheUser = "Issued Successfully";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		jsp += ".jsp";
		String title = "Invoice";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView submitIssueForIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int deptId = (Integer) session.getAttribute("deptId");
		int userId = (Integer) session.getAttribute("userId");
		int indentDtId = 0;
		boolean b = false;
		String issuedBatchIdAndQty = "";
		Set set = new HashSet();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		BigDecimal totalAmtAllItemsWithoutTax = new BigDecimal(0);
		BigDecimal totalSalesTaxAllItems = new BigDecimal(0);
		BigDecimal totalAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal totalPayableAmtAllItemsIncludingTax = new BigDecimal(0);
		BigDecimal amtInRs = new BigDecimal(0);
		BigDecimal roundAmtPs = new BigDecimal(0);
		BigDecimal zero = new BigDecimal("0");

		String[] array1 = request.getParameterValues("tt8");
		String[] totalQuantityIssued = request.getParameterValues("tt6");
		String[] totalQuantityRequested = request
				.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		// String[] storeIndentTIdArray =
		// request.getParameterValues("storeIndentTId");
		/*
		 * if (request.getParameter("indentDtId") != null) { indentDtId=
		 * Integer.parseInt(request.getParameter("indentDtId").trim());
		 * utilMap.put("indentDtId", indentDtId); }
		 */
		StoreIssueM issueM = new StoreIssueM();
		issueM.setIssueType("i");
		utilMap.put("issueNo", request.getParameter(ISSUE_NO));
		issueM.setIssueNo(request.getParameter(ISSUE_NO));
		issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(ISSUE_DATE)));

		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		issueM.setDepartment(department);

		MasDepartment department2 = new MasDepartment();
		department2.setId(Integer.parseInt(request
				.getParameter(DEPARTMENT_ID_TEMP)));
		issueM.setToStore(department2);

		StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
		internalIndentM
				.setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
		issueM.setRequestNo(internalIndentM);

		issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(REQUEST_DATE)));

		/*MasEmployee employee = new MasEmployee();
		employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		issueM.setRequestBy(employee);

		MasEmployee employee2 = new MasEmployee();
		employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		issueM.setApprovedBy(employee2);

		MasEmployee employee3 = new MasEmployee();
		employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
		issueM.setIssuedBy(employee3);*/
		
		issueM.setStatus("o");

		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		issueM.setHospital(hospital);

		issueM.setDocNo(request.getParameter(REQUEST_NO));
		Users users = new Users();
		users.setId(userId);
		issueM.setLastChgBy(users);
		issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		issueM.setLastChgTime(time);
		utilMap.put("issueM", issueM);
		int k = 1;
		int totalQtyIssued = 0;
		for (int i = 0; i < array1.length; i++) {
			int issuedQty = 0;
			int batchId = 0;
			BigDecimal totalQtyRequest = null;
			if (!array1[i].trim().equals("blank")) {
				if (!totalQuantityIssued[i].equals("")) {
					totalQtyIssued = Integer.parseInt(totalQuantityIssued[i]);
				}

				if (!totalQuantityRequested[i].equals("")) {
					totalQtyRequest = new BigDecimal(totalQuantityRequested[i]);
				}
				if (request.getParameter(RequestConstants.QTY_ISSUED + k) != null) {
					issuedQty = Integer.parseInt(request.getParameter(
							RequestConstants.QTY_ISSUED + k).trim());
				}

				Integer storeIndentTId = 0;

				String item[] = request
						.getParameterValues(RequestConstants.ITEM_ID);

				String[] subArray1 = array1[i].split(",");
				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(Integer.parseInt(item[i]));

				MasStoreItem isstedItem = new MasStoreItem();
				isstedItem.setId(Integer.parseInt(item[i]));
				/*
				 * if (request.getParameter(RequestConstants.BATCH_ID+i) !=
				 * null) { batchId=
				 * Integer.parseInt(request.getParameter(RequestConstants
				 * .BATCH_ID+i).trim());
				 * System.out.println("batchId=="+batchId);
				 * 
				 * 
				 * }
				 */
				// System.out.println("issuedBatchIdAndQty===="+issuedBatchIdAndQty+"#"+batchId+"/"+issuedQty);
				issuedBatchIdAndQty = issuedBatchIdAndQty + "#" + batchId + "/"
						+ issuedQty;

				for (int j = 0; j < subArray1.length; j++) {
					String subArray2[] = subArray1[j].split("@");
					String qty = subArray2[0].trim();
					String batch = subArray2[1].trim();
					String manufactureDate = subArray2[2].trim();
					String expiryDate = subArray2[3].trim();
					batchId = Integer.parseInt(subArray2[4].trim());

					StoreIssueT child = new StoreIssueT();
					child.setBatchNo(batch);
					if(!expiryDate.equals("")){
					child.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
				}
					child.setQtyIssued(new BigDecimal(qty));
					child.setQtyRequest(totalQtyRequest);
					// added by anamika ----------------
					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock.setId(batchId);
					child.setStock(itemBatchStock);

					child.setIssueM(issueM);
					child.setItem(masStoreItem);
					// child.setItemIssued(isstedItem);
					child.setCostPrice(new BigDecimal(0));
					child.setRemarks(request
							.getParameter(RequestConstants.REMARKS_TEMP));
					child.setSrNo(Integer.parseInt(request.getParameter("SRNo")));
					child.setIssued("y");
					child.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
					// child.setSalesTaxAmt(new BigDecimal(salesTax));
					// child.setAmtIncludingSalesTax(new
					// BigDecimal(amtIncludingSalesTax));
					set.add(child);
				}
			}
			totalQtyIssued = totalQtyIssued + issuedQty;

			k = k + 1;
		}
		utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
		utilMap.put("totalQtyIssued", totalQtyIssued);
		utilMap.put("deptId", deptId);
		utilMap.put("hospitalId", hospitalId);
		issueM.setStoreIssueTs(set);
		map = storesHandlerService.insertIssueForIndent(utilMap, box);
		String msg = "";
		if (map.get("b") != null) {
			b = (Boolean) map.get("b");
		}
		if (b) {
			msg = "Indent Has Been Issued Successfully.";
		} else {
			msg = "Indent Has Not Been Issued Successfully.";
		}
		String jsp = STORES_MESSAGE_JSP;
		String messageTOBeVisibleToTheUser = "Issued Successfully";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		jsp += ".jsp";
		String title = "Invoice";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getIssueNoListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {

		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		String itemNameField = "";
		Box box = HMSUtil.getBox(request);

		String autoHint = "";
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		box.put("deptId", deptId);
		box.put("autoHint", autoHint);
		box.put("hospitalId", hospitalId);

		dataMap.put("autoHint", autoHint);
		map = storesHandlerService.getIssueNoListForAutoComplete(box);
		jsp = "issueNoList";
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView generateBINCardReport(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		String pvmsNo = "";
		String brand = "";
		int itemId = 0;
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			Integer temp = (Integer) session.getAttribute("deptId");
			deptId = temp.intValue();
		}
		map = storesHandlerService.getConnectionForReport();
		pvmsNo = box.getString("pvmsNo");

		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date fromDate = null;
		java.sql.Date toDate = null;
		String dt1 = (String) box.get(FROM_DATE);
		String dt2 = (String) box.get(TO_DATE);
		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(dt1));
			fromDate = java.sql.Date.valueOf(date4MySQL);
			date4MySQL = formatterOut.format(formatterIn.parse(dt2));
			toDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
		}
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}

		// String batchNo="";
		// batchNo=box.getString("batchNo");
		box.put("fromDate", fromDate);
		box.put("toDate", toDate);
		box.put("deptId", deptId);
		// box.put("batchNo", batchNo);

		datamap = storesHandlerService.getItemId(box);
		itemId = (Integer) datamap.get("itemId");
		Map<String, Object> dap = new HashMap<String, Object>();
		dap = getHospitalParameterDetails(request);
		map.put("hospitalName", (String) dap.get("hospitalName"));
		map.put("hospitalAddress", (String) dap.get("hospitalAddress"));

		map.put("fromDate", fromDate);
		map.put("toDate", toDate);
		map.put("itemId", itemId);
		map.put("deptId", deptId);

		/*
		 * HMSUtil.generateReport("BIN_Card", map, (Connection) map.get("con"),
		 * response, getServletContext());
		 */

		HMSUtil.generateReport("StockRegisterCS", map,
				(Connection) map.get("con"), response, getServletContext());
		return null;
	}

	public ModelAndView showStockRegisterReportDateWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapDetail = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int departmentId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			departmentId = Integer.parseInt((session.getAttribute("deptId"))
					.toString());
		}
		mapDetail.put("departmentId", departmentId);
		map = storesHandlerService.showStockRegisterReportJsp(mapDetail);
		String jsp = "stockRegisterReportDateWise" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView stockRegisterReportDateWiseDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapDetail = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int departmentId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			departmentId = Integer.parseInt((session.getAttribute("deptId"))
					.toString());
		}
		String fromDate;
		String toDate;
		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = (request.getParameter(FROM_DATE));
			mapDetail.put("fromDate", fromDate);
		}
		if (request.getParameter(TO_DATE) != null
				&& !(request.getParameter(TO_DATE).equals(""))) {
			toDate = (request.getParameter(TO_DATE));
			mapDetail.put("toDate", toDate);
		}
		int groupId = 0;
		if (request.getParameter(GROUP_ID) != null
				&& !(request.getParameter(GROUP_ID).equals(""))) {
			groupId = Integer.parseInt(request.getParameter(GROUP_ID));
			mapDetail.put("groupId", groupId);
		}
		String deptName = "";
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}
		mapDetail.put("departmentId", departmentId);
		map = storesHandlerService
				.stockRegisterReportDateWiseDetails(mapDetail);
		String jsp = "stockRegisterReportDateWiseDetails" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	/*
	 * Code for Department Issue Without Indent Code By Mukesh Narayan SIngh
	 * Date 16 March 2011
	 */
	public ModelAndView submitDepartmentIssueWithoutIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int deptId = (Integer) session.getAttribute("deptId");
		int userId = (Integer) session.getAttribute("userId");
		int indentDtId = 0;
		boolean b = false;
		String issuedBatchIdAndQty = "";
		Set set = new HashSet();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		int counter = 0;
		if (request.getParameter("counter") != null) {
			counter = Integer.parseInt(request.getParameter("counter"));
		}
		// String[] array1 = request.getParameterValues("tt8");
		// String[] totalQuantityIssued = request.getParameterValues("tt6");
		// String[] totalQuantityRequested =
		// request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		// String[] storeIndentTIdArray =
		// request.getParameterValues("storeIndentTId");
		List<String> issueQtyAndBatchList = new ArrayList<String>();// array1
		List<String> totalQuantityIssuedList = new ArrayList<String>();// totalQuantityIssued
		List<String> totalQuantityRequestedList = new ArrayList<String>();// totalQuantityRequested
		List<String> itemIdList = new ArrayList<String>();// totalQuantityRequested
		List<String> srNoList = new ArrayList<String>();// srNo
		if (counter > 0) {
			for (int i = 1; i <= counter; i++) {

				issueQtyAndBatchList.add(request.getParameter("tt8" + i));

				totalQuantityIssuedList.add(request.getParameter("tt6" + i));

				totalQuantityRequestedList.add(request
						.getParameter(RequestConstants.QTY_IN_REQUEST + i));

				itemIdList.add(request.getParameter(RequestConstants.ITEM_ID
						+ i));

				srNoList.add(request.getParameter("SRNo" + i));
			}
		}

		/*
		 * String[] array1 = request.getParameterValues("tt8"); String[]
		 * totalQuantityIssued = request.getParameterValues("tt6"); String[]
		 * totalQuantityRequested =
		 * request.getParameterValues(RequestConstants.QTY_IN_REQUEST);
		 * //String[] storeIndentTIdArray =
		 * request.getParameterValues("storeIndentTId"); if
		 * (request.getParameter("indentDtId") != null) { indentDtId=
		 * Integer.parseInt(request.getParameter("indentDtId").trim());
		 * utilMap.put("indentDtId", indentDtId); }
		 */
		StoreIssueM issueM = new StoreIssueM();
		issueM.setIssueType("i");
		issueM.setIssueNo(request.getParameter(ISSUE_NO));
		issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(ISSUE_DATE)));

		MasDepartment department = new MasDepartment();
		department.setId(deptId);
		issueM.setDepartment(department);

		MasDepartment department2 = new MasDepartment();
		department2.setId(Integer.parseInt(request
				.getParameter(DEPARTMENT_ID_TEMP)));
		issueM.setToStore(department2);

		/*
		 * StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
		 * internalIndentM
		 * .setId(Integer.parseInt(request.getParameter(REQUEST_NO)));
		 * issueM.setRequestNo(internalIndentM);
		 */
		issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(request
				.getParameter(REQUEST_DATE)));
		
		// Commented by dhananjay 24-11-16
		
		/*MasEmployee employee = new MasEmployee();
		employee.setId(Integer.parseInt(request.getParameter(REQUEST_BY)));
		issueM.setRequestBy(employee);

		MasEmployee employee2 = new MasEmployee();
		employee2.setId(Integer.parseInt(request.getParameter(APPROVED_BY)));
		issueM.setApprovedBy(employee2);

		MasEmployee employee3 = new MasEmployee();
		employee3.setId(Integer.parseInt(request.getParameter(ISSUED_BY)));
		issueM.setIssuedBy(employee3);
*/		
		// End
		
		issueM.setStatus("o");

		MasHospital hospital = new MasHospital();
		hospital.setId(hospitalId);
		issueM.setHospital(hospital);

		issueM.setDocNo(request.getParameter(REQUEST_NO));
		Users users = new Users();
		users.setId(userId);
		issueM.setLastChgBy(users);
		issueM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		issueM.setLastChgTime(time);
		utilMap.put("issueM", issueM);
		int k = 1;
		int totalQtyIssued = 0;
		/*
		 * List<String> issueQtyAndBatchList=new ArrayList<String>();//array1
		 * List<String> totalQuantityIssuedList=new
		 * ArrayList<String>();//totalQuantityIssued List<String>
		 * totalQuantityRequestedList=new
		 * ArrayList<String>();//totalQuantityRequested List<String>
		 * itemIdList=new ArrayList<String>();//totalQuantityRequested
		 */
		for (int i = 0; i < issueQtyAndBatchList.size(); i++) {
			int issuedQty = 0;
			int batchId = 0;
			BigDecimal totalQtyRequest = null;
			if (!issueQtyAndBatchList.get(i).trim().equals("blank")) {
				if (!totalQuantityIssuedList.get(i).equals("")) {
					totalQtyIssued = Integer.parseInt(totalQuantityIssuedList
							.get(i));
				}

				if (!totalQuantityRequestedList.get(i).equals("")) {
					totalQtyRequest = new BigDecimal(
							totalQuantityRequestedList.get(i));
				}
				if (request.getParameter(RequestConstants.QTY_ISSUED + k) != null) {
					issuedQty = Integer.parseInt(request.getParameter(
							RequestConstants.QTY_ISSUED + k).trim());
				}

				Integer storeIndentTId = 0;

				// String
				// item[]=request.getParameterValues(RequestConstants.ITEM_ID);

				String[] subArray1 = issueQtyAndBatchList.get(i).split(",");
				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem.setId(Integer.parseInt(itemIdList.get(i)));

				MasStoreItem isstedItem = new MasStoreItem();
				isstedItem.setId(Integer.parseInt(itemIdList.get(i)));
				/*
				 * if (request.getParameter(RequestConstants.BATCH_ID+i) !=
				 * null) { batchId=
				 * Integer.parseInt(request.getParameter(RequestConstants
				 * .BATCH_ID+i).trim()); }
				 * 
				 * issuedBatchIdAndQty=issuedBatchIdAndQty+"#"+batchId+"/"+issuedQty
				 * ;
				 */
				for (int j = 0; j < subArray1.length; j++) {
					String subArray2[] = subArray1[j].split("@");
					String qty = subArray2[0].trim();
					String batch = subArray2[1].trim();
					String expiryDate = subArray2[2].trim();
					String manufactureDate = subArray2[3].trim();
					batchId = Integer.parseInt(subArray2[4].trim());
					
					StoreIssueT child = new StoreIssueT();
					child.setBatchNo(batch);
					child.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
					child.setQtyIssued(new BigDecimal(qty));
					child.setQtyRequest(totalQtyRequest);

					// added by anamika ----------------
					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock.setId(batchId);
					child.setStock(itemBatchStock);

					child.setIssueM(issueM);
					child.setItem(masStoreItem);
					// child.setItemIssued(isstedItem);
					child.setCostPrice(new BigDecimal(0));
					child.setRemarks(request
							.getParameter(RequestConstants.REMARKS_TEMP));
					child.setSrNo(Integer.parseInt(srNoList.get(i)));
					child.setIssued("y");
					child.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiryDate));
					// child.setSalesTaxAmt(new BigDecimal(salesTax));
					// child.setAmtIncludingSalesTax(new
					// BigDecimal(amtIncludingSalesTax));
					set.add(child);
				}
			}
			totalQtyIssued = totalQtyIssued + issuedQty;

			k = k + 1;
		}
		// utilMap.put("issuedBatchIdAndQty", issuedBatchIdAndQty);
		utilMap.put("totalQtyIssued", totalQtyIssued);
		utilMap.put("deptId", deptId);
		issueM.setStoreIssueTs(set);
		map = storesHandlerService.submitDepartmentIssueWithoutIndent(utilMap,
				box);
		// map = storesHandlerService.insertIssueForIndent(utilMap,box);
		String msg = "";
		if (map.get("b") != null) {
			b = (Boolean) map.get("b");
		}
		if (b) {
			msg = "Indent Has Been Issued Successfully.";
		} else {
			msg = "Indent Has Not Been Issued Successfully.";
		}
		String jsp = STORES_MESSAGE_JSP;
		String messageTOBeVisibleToTheUser = "Issued Successfully";
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		jsp += ".jsp";
		String title = "Invoice";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	/**
	 * Code for print central store stock register Code By Mukesh Narayan Singh
	 * Date 01 Apr2011
	 */
	public ModelAndView printStockRegisterCentralStoreReportOpening(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		String fromDate;
		String toDate;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = (request.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = (request.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			int groupId = 0;
			if (request.getParameter(GROUP_NAME) != null
					&& !(request.getParameter(GROUP_NAME).equals(""))) {
				groupId = Integer.parseInt(request.getParameter(GROUP_NAME));
				requestParameters.put("groupId", groupId);
			}
			int item_Id = 0;
			if (request.getParameter(ITEM_NAME) != null
					&& !(request.getParameter(ITEM_NAME).equals(""))) {
				item_Id = Integer.parseInt(request.getParameter(ITEM_NAME));
				requestParameters.put("itemId", item_Id);
			}

			String batchNo = "";
			if (request.getParameter(BATCH_ID) != null
					&& !(request.getParameter(BATCH_ID).equals(""))) {
				batchNo = request.getParameter(BATCH_ID);
				requestParameters.put("batchNo", batchNo);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			// map = storesHandlerService.getItemId(box);
			map = storesHandlerService
					.printStockRegisterCentralStoreReport(requestParameters);
			map.put("hospitalName", (String) dataMap.get("hospitalName"));
			map.put("hospitalAddress", (String) dataMap.get("hospitalAddress"));
			map.put("deptName", deptName);

			map.put("deptId", (Integer) session.getAttribute("deptId"));
			map.put("itemId", item_Id);
			map.put("batchNo", batchNo);
			String reportName = "";
			if (!batchNo.equals("") && !batchNo.equals("0")) {
				reportName = "StockRegisterCS_batch_no_opening";
			} else {
				reportName = "StockRegisterCS_item_id_opening";
			}
			HMSUtil.generateReport(reportName, map,
					(Connection) map.get("con"), response, getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView printStockRegisterCentralStoreReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		String fromDate;
		String toDate;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = (request.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = (request.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			int groupId = 0;
			if (request.getParameter(GROUP_NAME) != null
					&& !(request.getParameter(GROUP_NAME).equals(""))) {
				groupId = Integer.parseInt(request.getParameter(GROUP_NAME));
				requestParameters.put("groupId", groupId);
			}
			int item_Id = 0;
			if (request.getParameter(ITEM_NAME) != null
					&& !(request.getParameter(ITEM_NAME).equals(""))) {
				item_Id = Integer.parseInt(request.getParameter(ITEM_NAME));
				requestParameters.put("itemId", item_Id);
			}

			String batchNo = "";
			if (request.getParameter(BATCH_ID) != null
					&& !(request.getParameter(BATCH_ID).equals(""))) {
				batchNo = request.getParameter(BATCH_ID);
				requestParameters.put("batchNo", batchNo);
			}
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			//
			dataMap = getHospitalParameterDetails(request);
			//
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			// map = storesHandlerService.getItemId(box);
			//
			map = storesHandlerService
					.printStockRegisterCentralStoreReport(requestParameters);
			//
			map.put("hospitalName", (String) dataMap.get("hospitalName"));
			map.put("hospitalAddress", (String) dataMap.get("hospitalAddress"));
			map.put("deptName", deptName);

			map.put("deptId", (Integer) session.getAttribute("deptId"));
			map.put("itemId", item_Id);
			map.put("batchNo", batchNo);
			//
			String reportName = "";
			if (!batchNo.equals("") && !batchNo.equals("0")) {
				reportName = "StockRegisterCS_batch_no";
			} else {
				reportName = "StockRegisterCS_item_id";
			}
			HMSUtil.generateReport(reportName, map,
					(Connection) map.get("con"), response, getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// Added By Ramdular Prajapati ++++++++++++++++++++++++++++++++++++++++

	public ModelAndView printVedAnalysisReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			session = request.getSession();
			String deptName = "";
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			dataMap = getHospitalParameterDetails(request);
			requestParameters.put("hospitalName",
					(String) dataMap.get("hospitalName"));
			requestParameters.put("hospitalAddress",
					(String) dataMap.get("hospitalAddress"));
			requestParameters.put("deptName", deptName);

			requestParameters.put("deptId",
					(Integer) session.getAttribute("deptId"));
			map = storesHandlerService.getConnectionForReport();
			HMSUtil.generateReport(VED_STATUS_REPORT, requestParameters,
					(Connection) map.get("con"), response, getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// ----Added By Manjul-------//
	public ModelAndView showPatientDrugIssueReportDateWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String jsp = "patientDrugIssueDateWise" + ".jsp";
		map = storesHandlerService.showPatientDrugIssueReportDateWise();
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));
	}

	public ModelAndView printPatientDrugIssueReportDateWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String query = "";
		Date fromDate = new Date();
		Date toDate = new Date();
		int ward_name = 0;
		Map<String, Object> parameters = new HashMap<String, Object>();
		String reportName = "patientDrugIssueDateWise";

		if (request.getParameter("fromDate") != null) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter("fromDate"));
		}
		if (request.getParameter("toDate") != null) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter("toDate"));
		}
		if (request.getParameter("ward_name") != null) {
			ward_name = Integer.parseInt(request.getParameter("ward_name"));
		}
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}

		parameters.put("hospitalId", hospitalId);
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("ward_name", ward_name);

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport(reportName, parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		return null;
	}

	/*
	 * public ModelAndView checkIssueNo(HttpServletRequest request,
	 * HttpServletResponse response) { Map<String, Object> map = new
	 * HashMap<String, Object>(); Map<String, Object> dataMap = new
	 * HashMap<String, Object>(); String issueNo=""; String requestNo=""; int
	 * departmentIdTemp=0; Map<String, Object> parameters = new HashMap<String,
	 * Object>(); if(request.getParameter("issueNo")!=null &&
	 * request.getParameter("issueNo")!=""){
	 * issueNo=request.getParameter("issueNo"); }
	 * if(request.getParameter("requestNo")!=null &&
	 * request.getParameter("requestNo")!=""){
	 * requestNo=request.getParameter("requestNo"); }
	 * if(request.getParameter("departmentIdTemp")!=null &&
	 * request.getParameter("departmentIdTemp")!=""){
	 * departmentIdTemp=Integer.parseInt
	 * (request.getParameter("departmentIdTemp")); }
	 * dataMap.put("issueNo",issueNo ); dataMap.put("requestNo",requestNo );
	 * dataMap.put("requestNo",requestNo );
	 * map=storesHandlerService.checkIssueNo(dataMap); jsp =
	 * RequestConstants.DEMAND_LIST_AJAX_JSP; jsp =
	 * RequestConstants.ISSUED_TO_DISPENSARY_JSP; jsp = jsp + ".jsp";
	 * map.put("contentJsp", jsp); return new ModelAndView("index", "map", map);
	 * }
	 */

	/*
	 * public ModelAndView checkIssueNo(HttpServletRequest request,
	 * HttpServletResponse response) { Map<String, Object> map = new
	 * HashMap<String, Object>(); Map<String, Object> dataMap = new
	 * HashMap<String, Object>(); List<StoreIssueM> issueMList1 = new
	 * ArrayList<StoreIssueM>(); String issueNo=""; String requestNo=""; int
	 * departmentIdTemp=0; Map<String, Object> parameters = new HashMap<String,
	 * Object>(); if(request.getParameter("issueNo")!=null &&
	 * request.getParameter("issueNo")!=""){
	 * issueNo=request.getParameter("issueNo"); }
	 * if(request.getParameter("requestNo")!=null &&
	 * request.getParameter("requestNo")!=""){
	 * requestNo=request.getParameter("requestNo"); }
	 * if(request.getParameter("departmentIdTemp")!=null &&
	 * request.getParameter("departmentIdTemp")!=""){
	 * departmentIdTemp=Integer.parseInt
	 * (request.getParameter("departmentIdTemp")); }
	 * dataMap.put("issueNo",issueNo ); dataMap.put("requestNo",requestNo );
	 * dataMap.put("requestNo",requestNo );
	 * dataMap.put("departmentIdTemp",departmentIdTemp );
	 * 
	 * jsp = RequestConstants.DEMAND_LIST_AJAX_JSP; dataMap.put("dispenceryId",
	 * dispenceryId); dataMap.put("deptId", deptId); dataMap.put("hospitalId",
	 * hospitalId); dataMap.put("userName", userName); mapDemand =
	 * storesHandlerService.getDemandList(dataMap); List<Object[]>
	 * storeInternalIndentMPOList = new ArrayList<Object[]>(); List<MasEmployee>
	 * employeeDeptByList = new ArrayList<MasEmployee>();
	 * if(mapDemand.get("storeInternalIndentMList")!=null){
	 * storeInternalIndentMPOList
	 * =(List<Object[]>)mapDemand.get("storeInternalIndentMList"); }
	 * if(mapDemand.get("employeeDeptByList")!=null){
	 * employeeDeptByList=(List<MasEmployee
	 * >)mapDemand.get("employeeDeptByList"); } List<StoreIssueM>
	 * searchListForPopup = new ArrayList<StoreIssueM>();
	 * if(mapDemand.get("searchListForPopup")!=null){
	 * searchListForPopup=(List)mapDemand.get("searchListForPopup"); }
	 * List<Object[]> storeInternalIndentPendingList = new
	 * ArrayList<Object[]>();
	 * if(mapDemand.get("storeInternalIndentPendingList")!=null){
	 * storeInternalIndentPendingList
	 * =(List)mapDemand.get("storeInternalIndentPendingList"); }
	 * map.put("storeInternalIndentPendingList",
	 * storeInternalIndentPendingList); map.put("searchListForPopup",
	 * searchListForPopup); map.put("employeeDeptByList", employeeDeptByList);
	 * 
	 * 
	 * End of Code for Issue No Code By Mukesh Narayan SIngh Date 02 Dec 2010
	 * 
	 * 
	 * jsp = RequestConstants.ISSUED_TO_DISPENSARY_JSP; jsp = jsp + ".jsp";
	 * 
	 * map=storesHandlerService.checkIssueNo(dataMap); issueMList1 =
	 * (List<StoreIssueM>) map.get("issueMList"); map.put("issueMList",
	 * issueMList1); map.put("contentJsp", jsp);
	 * map.put("storeInternalIndentMPOList",storeInternalIndentMPOList);
	 * map.put("internalIndentId", internalIndentId); return new
	 * ModelAndView("index", "map", map); }
	 */

	public ModelAndView getResponceForGroup(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String serviceNo = "";
		int groupId = 0;
		if (request.getParameter(GROUP_ID) != null) {
			groupId = Integer.parseInt(request.getParameter(GROUP_ID));
		}
		dataMap.put("groupId", groupId);
		map = storesHandlerService.getResponceForGroup(dataMap);
		jsp = "responceForGroup";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDateWiseIssueReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getitemGroup();
		jsp = "dateWiseIssueReportJsp" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printStockRegisterDatewiseIssueReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		Date fromDate = new Date();
		Date toDate = new Date();
		int deptId = 0;
		int groupId = 0;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(FROM_DATE)));
				map.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(TO_DATE)));
				map.put("toDate", toDate);
			}
			if (request.getParameter(GROUP_ID) != null
					&& !(request.getParameter(GROUP_ID).equals(""))) {
				groupId = Integer.parseInt((request.getParameter(GROUP_ID)));
				map.put("groupId", groupId);
			}

			deptId = (Integer) session.getAttribute("deptId");
			map.put("deptId", deptId);
			// map = storesHandlerService.getItemId(box);
			// map=storesHandlerService.printStockRegisterCentralStoreReport(requestParameters);
			Map<String, Object> dataMap = getHospitalParameterDetails(request);
			map.put("hospitalName", (String) dataMap.get("hospitalName"));
			map.put("hospitalAddress", (String) dataMap.get("hospitalAddress"));
			map.put("hospitalId", (Integer) dataMap.get("hospitalId"));
			requestParameters = storesHandlerService.getConnectionForReport();

			HMSUtil.generateReport("date_wise_issue_report_store_silvass", map,
					(Connection) requestParameters.get("con"), response,
					getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showDateWiseIssueReportPharmacyJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getitemGroup();
		jsp = "dateWiseIssueReportPharmacyJsp" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printStockRegisterDatewiseIssuePharmacyReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		Date fromDate = new Date();
		Date toDate = new Date();
		int deptId = 0;
		int groupId = 0;
		int hospitalId = 0;
		session = request.getSession();
		try {

			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(FROM_DATE)));
				map.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(TO_DATE)));
				map.put("toDate", toDate);
			}
			if (request.getParameter(GROUP_ID) != null
					&& !(request.getParameter(GROUP_ID).equals(""))) {
				groupId = Integer.parseInt((request.getParameter(GROUP_ID)));
				map.put("groupId", groupId);

			}

			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}

			deptId = (Integer) session.getAttribute("deptId");
			map.put("deptId", deptId);
			// map = storesHandlerService.getItemId(box);
			// map=storesHandlerService.printStockRegisterCentralStoreReport(requestParameters);
			map.put("hospitalName", (String) dataMap.get("hospitalName"));
			map.put("hospitalAddress", (String) dataMap.get("hospitalAddress"));
			// map.put("hospitalId", (Integer) dataMap.get("hospitalId"));
			map.put("hospitalId", hospitalId);
			requestParameters = storesHandlerService.getConnectionForReport();

			HMSUtil.generateReport("date_wise_issue_report_pharmacy_silvassa",
					map, (Connection) requestParameters.get("con"), response,
					getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showDepartmentWiseReorderLevelJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		map = storesHandlerService.showDepartmentWiseReorderLevelJsp(deptId,
				hospitalId);
		jsp = "departmentWiseReorderLevel" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitReorderLevelPharmacy(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		Box box = HMSUtil.getBox(request);
		Vector item_name = box.getVector(ITEM_NAME);
		String message = "";
		box.put("hospitalId", hospitalId);
		boolean successfullyAdded = storesHandlerService
				.submitReorderLevelPharmacy(box, deptId);

		if (successfullyAdded) {
			message = "Reorder Level has been saved Successfully !!";
		} else {
			message = "Error Ocurred Please Try Again!!";
		}
		jsp = "messageForStock1.jsp";
		url = "/hms/hms/stores?method=showReturnFromDispensaryJsp";
		map.put("url", url);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchReorderLevelPharmacy(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String fromDate = "";
		String toDate = "";
		String grnNo = "";
		int deptId = 0;
		int hospitalId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> tempMap = new HashMap<String, Object>();
		Map<String, Object> searchFieldMap = new HashMap<String, Object>();
		List<StoreDeptReorderLevel> storeDeptReorderLevelList = new ArrayList<StoreDeptReorderLevel>();
		try {
			/*
			 * Author Ujjwal Kashyap Dated 23oct 2012 For department Wise Grnno
			 */
			if (session.getAttribute("deptId") != null) {
				deptId = Integer.parseInt(session.getAttribute("deptId")
						.toString());
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = Integer.parseInt(session
						.getAttribute("hospitalId").toString());
			}
			// end By Ujjwal in controller
		} catch (Exception e) {
			e.printStackTrace();
		}

		searchFieldMap.put("deptId", deptId);
		searchFieldMap.put("hospitalId", hospitalId);
		/*
		 * try { // tempMap = storesHandlerService.showGrnJsp(box, dataMap); if
		 * (tempMap.get("searchGrnList") != null)
		 * 
		 * searchGrnList = (List) tempMap.get("searchGrnList");
		 * 
		 * } catch (Exception e) { e.printStackTrace(); }
		 */
		map = storesHandlerService.searchReorderLevelPharmacy(searchFieldMap);
		if (map.get("storeDeptReorderLevelList") != null) {
			storeDeptReorderLevelList = (List<StoreDeptReorderLevel>) map
					.get("storeDeptReorderLevelList");
		}
		map.put("storeDeptReorderLevelList", storeDeptReorderLevelList);
		jsp = "searchReorder";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateROl(HttpServletRequest request,
			HttpServletResponse response) {
		boolean updated = false;
		int reId = 0;
		BigDecimal max = new BigDecimal(0);
		BigDecimal min = new BigDecimal(0);
		BigDecimal rol = new BigDecimal(0);
		if (request.getParameter("parent") != null) {
			reId = Integer.parseInt(request.getParameter("parent"));
		}
		if (request.getParameter("max") != null) {
			max = new BigDecimal(request.getParameter("max"));
		}
		if (request.getParameter("min") != null) {
			min = new BigDecimal(request.getParameter("min"));
		}
		if (request.getParameter("rol") != null) {
			rol = new BigDecimal(request.getParameter("rol"));
		}
		updated = storesHandlerService.updateROl(reId, max, min, rol);
		String message = "Data updated Successfully!!";
		jsp = "messageForStockReorder";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showPrescriptionWisePharmacyConsumptionJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		map = storesHandlerService.showPrescriptionWisePharmacyConsumptionJsp();
		jsp = "prescriptionDepartmentWisePharmacyConsumption" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateReportPharmacyConsumptionPrescriptionWise(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";
		int deptId = 0;
		session = request.getSession();
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate", toDate);
			}
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				requestParameters.put("deptId", deptId);
			}
			if (session.getAttribute("hospitalId") != null)
				hospitalId = (Integer) session.getAttribute("hospitalId");
			requestParameters.put("hospitalId", hospitalId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		if (deptId == 0) {
			HMSUtil.generateReport(
					"Opd_Pharmacy_consumption_report_datewise_without_dept",
					requestParameters, (Connection) connectionMap.get("con"),
					response, getServletContext());
		} else {
			HMSUtil.generateReport("Opd_Pharmacy_consumption_report_datewise",
					requestParameters, (Connection) connectionMap.get("con"),
					response, getServletContext());
		}
		return null;
	}

	public ModelAndView generateConsumptionReport(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int deptId = 0;
		int IpIssueMId = 0;
		int hospitalId = 0;
		if (request.getParameter("IpIssueMId") != null
				&& !(request.getParameter("IpIssueMId").equals(""))) {
			IpIssueMId = Integer.parseInt(request.getParameter("IpIssueMId"));

		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}

		//
		detailsMap = storesHandlerService.getConnectionForReport();
		parameters.put("IpIssueMId", IpIssueMId);
		parameters.put("deptId", deptId);
		parameters.put("hospitalId", hospitalId);
		//
		HMSUtil.generateReport("departmentInternalReport", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		return null;
	}

	/*
	 * 
	 * By Ujjwal For ROL Central Store Silvassa
	 */
	public ModelAndView showDateWiseCentralStoreROLJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getitemGroup();
		jsp = "dateWiseCentralStoreROLJsp" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printDateWiseCentralStoreROLReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
		Box box = HMSUtil.getBox(request);
		// Date fromDate=new Date();
		Date toDate = new Date();
		int deptId = 0;
		int hospitalId = 0;
		int groupId = 0;
		session = request.getSession();
		try {

			/*
			 * if (request.getParameter(FROM_DATE) != null &&
			 * !(request.getParameter(FROM_DATE).equals(""))) { fromDate =
			 * HMSUtil
			 * .convertStringTypeDateToDateType((request.getParameter(FROM_DATE
			 * ))); map.put("fromDate", fromDate); }
			 */

			/*
			 * Calendar cal = Calendar.getInstance(); // //Substract 1 year from
			 * the calendar cal.add(Calendar.YEAR, -1);
			 */
			Calendar date = new GregorianCalendar();
			date.setTime(HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE)));
			date.add(Calendar.YEAR, -1);
			map.put("fromdate", date.getTime());
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType((request
						.getParameter(TO_DATE)));
				map.put("todate", toDate);
			}

			if (request.getParameter(GROUP_ID) != null
					&& !(request.getParameter(GROUP_ID).equals(""))) {
				groupId = Integer.parseInt((request.getParameter(GROUP_ID)));
				map.put("groupId", groupId);
			}

			deptId = (Integer) session.getAttribute("deptId");
			hospitalId = (Integer) session.getAttribute("hospitalId");
			map.put("deptId", deptId);
			map.put("hospitalId", hospitalId);
			// map = storesHandlerService.getItemId(box);
			// map=storesHandlerService.printStockRegisterCentralStoreReport(requestParameters);
			dataMap = getHospitalParameterDetails(request);
			map.put("hospitalName", (String) dataMap.get("hospitalName"));
			map.put("hospitalAddress", (String) dataMap.get("hospitalAddress"));
			dMap = storesHandlerService.getConnectionForReport();
			if (groupId != 0) {
				HMSUtil.generateReport("central_store_silvassa_ROL_group_wise",
						map, (Connection) dMap.get("con"), response,
						getServletContext());
			} else {
				HMSUtil.generateReport("central_store_silvassa_ROL", map,
						(Connection) dMap.get("con"), response,
						getServletContext());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView getItemListForVendorByAutocomplete(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String autoHint = "";
		String itemNameField = "";
		int hospitalId = 0;
		int deptId = 0;
		String fromDepartmentReturn = "";
		session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		dataMap.put("autoHint", autoHint);
		dataMap.put("deptId", deptId);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		// dataMap.put("box", box);
		map = storesHandlerService.getItemListForVendorByAutocomplete(dataMap);
		jsp = "resultVendor";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView printVendorRetrutn(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		byte[] bytes = null;

		String returnNumber = null;
		session = request.getSession();
		requestParameters.put("Dept_ID", session.getAttribute("deptId"));
		try {
			if (request.getParameter("returnNo") != null
					&& !(request.getParameter("returnNo").equals(""))) {

				returnNumber = request.getParameter("returnNo");
				requestParameters.put("returnNumber", returnNumber);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		try {
			bytes = JasperRunManager.runReportToPdf(
					getCompiledReport("vendor_report"), requestParameters,
					(Connection) connectionMap.get("con"));

		} catch (JRException e) {

			e.printStackTrace();
		}
		response.setContentType("application/pdf");
		response.setContentLength(bytes.length);
		ServletOutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			ouputStream.write(bytes, 0, bytes.length);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView createPvmsItemExcelList(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		// box.put("download_path",
		// getServletContext().getRealPath("/stores/"));
		map = storesHandlerService.createPvmsItemExcelList(box);
		if (map.get("flag") != null
				&& map.get("flag").toString().equalsIgnoreCase("NoData")) {
			map.put("message", "No Data Found!....");
			jsp = "storeBalance";
			jsp += ".jsp";
			title = "Export CD";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		} else {
			List<Object[]> masStoreItemList = new ArrayList<Object[]>();
			if (map.get("masStoreItemList") != null)
				masStoreItemList = (List) map.get("masStoreItemList");
			try {
				response.setContentType("application/vnd.ms-excel");
				response.setHeader("Content-Disposition",
						"attachment; filename=PVMS.xls");

				WritableWorkbook wb = Workbook.createWorkbook(response
						.getOutputStream());
				WritableSheet ws = wb.createSheet("Sheet", 0);

				WritableFont wf = new WritableFont(WritableFont.ARIAL, 10,
						WritableFont.BOLD);
				WritableCellFormat wcf = new WritableCellFormat(wf);
				wcf.setAlignment(Alignment.CENTRE);
				wcf.setWrap(true);

				WritableCellFormat wcf2 = new WritableCellFormat(
						NumberFormats.TEXT);
				wcf2.setWrap(true);

				CellView cell = new CellView();
				cell.setSize(3000);
				ws.setColumnView(0, cell);
				cell.setSize(4000);
				ws.setColumnView(1, cell);
				cell.setSize(7000);
				ws.setColumnView(2, cell);
				cell.setSize(3000);
				ws.setColumnView(3, cell);
				cell.setSize(3000);
				ws.setColumnView(4, cell);

				Label label = new Label(0, 0, "Item Id", wcf);
				ws.addCell(label);

				label = new Label(1, 0, "Item Code", wcf);
				ws.addCell(label);

				label = new Label(2, 0, "Item Name", wcf);
				ws.addCell(label);

				label = new Label(3, 0, "Unit", wcf);
				ws.addCell(label);

				label = new Label(4, 0, "Batch1", wcf);
				ws.addCell(label);

				
				label = new Label(5, 0, "DOM1", wcf);
				ws.addCell(label);

				label = new Label(6, 0, "Expiry1", wcf);
				ws.addCell(label);
				
				label = new Label(7, 0, "Qty1", wcf);
				ws.addCell(label);
				
				label = new Label(8, 0, "Unit Rate1", wcf);
				ws.addCell(label);
				
				

				label = new Label(9, 0, "Batch2", wcf);
				ws.addCell(label);
				
				label = new Label(10, 0, "DOM2", wcf);
				ws.addCell(label);
				
				label = new Label(11, 0, "Expiry2", wcf);
				ws.addCell(label);
				
				label = new Label(12, 0, "Qty2", wcf);
				ws.addCell(label);
				
				label = new Label(13, 0, "Unit Rate2", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(14, 0, "Batch3", wcf);
				ws.addCell(label);
				
				label = new Label(15, 0, "DOM3", wcf);
				ws.addCell(label);
				
				label = new Label(16, 0, "Expiry3", wcf);
				ws.addCell(label);
				
				label = new Label(17, 0, "Qty3", wcf);
				ws.addCell(label);
				
				label = new Label(18, 0, "Unit Rate3", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(19, 0, "Batch4", wcf);
				ws.addCell(label);
				
				label = new Label(20, 0, "DOM4", wcf);
				ws.addCell(label);
				
				label = new Label(21, 0, "Expiry4", wcf);
				ws.addCell(label);
								
				label = new Label(22, 0, "Qty4", wcf);
				ws.addCell(label);
				
				label = new Label(23, 0, "Unit Rate4", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(24, 0, "Batch5", wcf);
				ws.addCell(label);
				
				label = new Label(25, 0, "DOM5", wcf);
				ws.addCell(label);
				
				label = new Label(26, 0, "Expiry5", wcf);
				ws.addCell(label);
				
				label = new Label(27, 0, "Qty5", wcf);
				ws.addCell(label);
				
				label = new Label(28, 0, "Unit Rate5", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(29, 0, "Batch6", wcf);
				ws.addCell(label);
				
				label = new Label(30, 0, "DOM6", wcf);
				ws.addCell(label);
				
				label = new Label(31, 0, "Expiry6", wcf);
				ws.addCell(label);
				
				label = new Label(32, 0, "Qty6", wcf);
				ws.addCell(label);
				
				label = new Label(33, 0, "Unit Rate6", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(34, 0, "Batch7", wcf);
				ws.addCell(label);
				
				label = new Label(35, 0, "DOM7", wcf);
				ws.addCell(label);
				
				label = new Label(36, 0, "Expiry7", wcf);
				ws.addCell(label);
				
				label = new Label(37, 0, "Qty7", wcf);
				ws.addCell(label);
				
				label = new Label(38, 0, "Unit Rate7", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(39, 0, "Batch8", wcf);
				ws.addCell(label);
				
				label = new Label(40, 0, "DOM8", wcf);
				ws.addCell(label);
				
				label = new Label(41, 0, "Expiry8", wcf);
				ws.addCell(label);
				
				label = new Label(42, 0, "Qty8", wcf);
				ws.addCell(label);
				
				label = new Label(43, 0, "Unit Rate8", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(44, 0, "Batch9", wcf);
				ws.addCell(label);
				
				label = new Label(45, 0, "DOM9", wcf);
				ws.addCell(label);
				
				label = new Label(46, 0, "Expiry9", wcf);
				ws.addCell(label);
				
				label = new Label(47, 0, "Qty9", wcf);
				ws.addCell(label);
				
				label = new Label(48, 0, "Unit Rate9", wcf);
				ws.addCell(label);
				
				
				
				label = new Label(49, 0, "Batch10", wcf);
				ws.addCell(label);
				
				label = new Label(50, 0, "DOM10", wcf);
				ws.addCell(label);
				
				label = new Label(51, 0, "Expiry10", wcf);
				ws.addCell(label);
				
				label = new Label(52, 0, "Qty10", wcf);
				ws.addCell(label);
				
				label = new Label(53, 0, "Unit Rate10", wcf);
				ws.addCell(label);

				if (masStoreItemList.size() > 0) {
					int count = 1;
					String pvms = "", nomen = "", au = "", itemId = "0";
					/*String batch1 = "";String batch2 = "";String batch3 = "";String batch4 = "";String batch5 = "";
					String batch6 = "";String batch7 = "";String batch8 = "";String batch9 = "";String batch10 = "";
					String expiry1 = "";String expiry2 = "";String expiry3 = "";String expiry4 = "";String expiry5 = "";
					String expiry6 = "";String expiry7 = "";String expiry8 = "";String expiry9 = "";String expiry10 = "";
					String qty1 = "";String qty2 = "";String qty3 = "";String qty4 = "";String qty5 = "";
					String qty6 = "";String qty7 = "";String qty8 = "";String qty9 = "";String qty10 = "";*/
					Iterator<Object[]> it = masStoreItemList.iterator();

					while (it.hasNext()) {
						Object[] ob = it.next();

						if (ob[0] != null)
							itemId = "" + ob[0];
						if (ob[1] != null)
							pvms = "" + ob[1];
						if (ob[2] != null)
							nomen = "" + ob[2];
						if (ob[3] != null)
							au = "" + ob[3];
						label = new Label(0, count, itemId, wcf2);
						ws.addCell(label);

						label = new Label(1, count, pvms, wcf2);
						ws.addCell(label);
						label = new Label(2, count, nomen, wcf2);
						ws.addCell(label);
						label = new Label(3, count, au, wcf2);
						ws.addCell(label);
						
					/*	label = new Label(4, count, batch1, wcf2);
						ws.addCell(label);
						label = new Label(5, count, expiry1, wcf2);
						ws.addCell(label);
						label = new Label(6, count, qty1, wcf2);
						ws.addCell(label);
						
						label = new Label(7, count, batch2, wcf2);
						ws.addCell(label);
						label = new Label(8, count, expiry2, wcf2);
						ws.addCell(label);
						label = new Label(9, count, qty2, wcf2);
						ws.addCell(label);
						
						
						label = new Label(10, count, batch3, wcf2);
						ws.addCell(label);
						label = new Label(11, count, expiry3, wcf2);
						ws.addCell(label);
						label = new Label(12, count, qty3, wcf2);
						ws.addCell(label);
						
						
						label = new Label(13, count, batch4, wcf2);
						ws.addCell(label);
						label = new Label(14, count, expiry4, wcf2);
						ws.addCell(label);
						label = new Label(15, count, qty4, wcf2);
						ws.addCell(label);
						
						
						label = new Label(16, count, batch5, wcf2);
						ws.addCell(label);
						label = new Label(17, count, expiry5, wcf2);
						ws.addCell(label);
						label = new Label(18, count, qty5, wcf2);
						ws.addCell(label);
						
						
						label = new Label(19, count, batch6, wcf2);
						ws.addCell(label);
						label = new Label(20, count, expiry6, wcf2);
						ws.addCell(label);
						label = new Label(21, count, qty6, wcf2);
						ws.addCell(label);
						
						label = new Label(22, count, batch7, wcf2);
						ws.addCell(label);
						label = new Label(23, count, expiry7, wcf2);
						ws.addCell(label);
						label = new Label(24, count, qty7, wcf2);
						ws.addCell(label);
						
						label = new Label(25, count, batch8, wcf2);
						ws.addCell(label);
						label = new Label(26, count, expiry8, wcf2);
						ws.addCell(label);
						label = new Label(27, count, qty8, wcf2);
						ws.addCell(label);
						
						label = new Label(28, count, batch9, wcf2);
						ws.addCell(label);
						label = new Label(29, count, expiry9, wcf2);
						ws.addCell(label);
						label = new Label(30, count, qty9, wcf2);
						ws.addCell(label);
						
						label = new Label(31, count, batch10, wcf2);
						ws.addCell(label);
						label = new Label(32, count, expiry10, wcf2);
						ws.addCell(label);
						label = new Label(33, count, qty10, wcf2);
						ws.addCell(label);
*/
						count++;
					}
				}

				wb.write();
				wb.close();

				return null;
			} catch (Exception ioe) {
				ioe.printStackTrace();
				jsp = "storeBalance";
				jsp += ".jsp";
				title = "Export CD";
				map.put("contentJsp", jsp);
				map.put("title", title);
				return new ModelAndView("index", "map", map);
			}
		}
	}

	public ModelAndView importPVMSOpeningBalanceForDisplay(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> timeMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		String userName = "";
		String flag1 = "import";
		boolean succesfullyAdded = false;
		String msg = "";
		String max = "";
		int hospitalId = 0;
		int deptId = 0;
		if (session.getAttribute("hospitalId") != null){
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute("deptId") != null){
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			box.put("deptId", deptId);
		}
		
			File fil=null;
			Vector cellVectorHolder = new Vector();
			if (MultipartFormDataRequest.isMultipartFormData(request)) {
					try {
						mrequest = new MultipartFormDataRequest(request);
					} catch (UploadException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					java.util.Hashtable files = mrequest.getFiles();
					UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME);
					String filePath=mrequest.getParameter(RequestConstants.UPLOAD_FILENAME);
					InputStream is=file.getInpuStream();
					//System.out.println("file=="+file);
				

					try {
						
						POIFSFileSystem myFileSystem = new POIFSFileSystem(is);
						HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);

	                    HSSFSheet mySheet = myWorkBook.getSheetAt(0);
	                    Iterator rowIter = mySheet.rowIterator();
	                    int i=1;
	                    while (rowIter.hasNext()) {
	                            HSSFRow myRow = (HSSFRow) rowIter.next();
	                            Iterator cellIter = myRow.cellIterator();
	                            Vector cellStoreVector = new Vector();
	                            while (cellIter.hasNext()) {
	                                    HSSFCell myCell = (HSSFCell) cellIter.next();
	                                    cellStoreVector.addElement(myCell);
	                                    
	                            }
	                            cellVectorHolder.addElement(cellStoreVector);
	                    }
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					Object[][] obj=new Object[cellVectorHolder.size()][54];
	                for (int i = 0; i < cellVectorHolder.size(); i++) {
	                        Vector cellStoreVector = (Vector) cellVectorHolder.elementAt(i);
	                        for (int j = 0; j < cellStoreVector.size(); j++) {
	                                HSSFCell myCell = (HSSFCell) cellStoreVector.elementAt(j);
	                                String stringCellValue = myCell.toString();
	                               // System.out.println("stringCellValue======="+stringCellValue);
	                                if(myCell.toString().contains("."))
                                    {
	                                	stringCellValue = myCell.toString().substring(0, stringCellValue.indexOf("."));
                                    }else{
                                    	 stringCellValue = myCell.toString();
                                    }
	                                
	                                obj[i][j]=stringCellValue;
	                                //System.out.println("obj[i][j]----"+obj[i][j]);
	                        }
	                }
				
	                map = storesHandlerService.getOpeningData(box);
	                //System.out.println("obj=="+obj);
	                map.put("obj", obj);
			}	// map.put("departmentList", departmentList);

		
		jsp = "storeBalance";
		jsp += ".jsp";
		// title = "Tender Proposal";
		map.put("contentJsp", jsp);
		map.put("flag1", flag1);
		//map.put("max", max);
		map.put("groupId", box.getInt("groupId"));
		map.put("subGroupId", box.getInt("subGroupId"));
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}
	
	public ModelAndView importPVMSOpeningBalance(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> timeMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		String userName = "";
		String flag1 = "import";
		boolean succesfullyAdded = false;
		String msg = "";

		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = (MultipartFormDataRequest) new MultipartFormDataRequest(
						request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		List<String> mimeType = new ArrayList<String>();
		mimeType.add("dot");
		mimeType.add("docx");
		mimeType.add("dotx");
		mimeType.add("docm");
		mimeType.add("dotm");
		mimeType.add("xls");
		mimeType.add("xlt");
		mimeType.add("xla");
		mimeType.add("xlsx");
		mimeType.add("xltx");
		mimeType.add("xlsm");
		mimeType.add("xltm");
		mimeType.add("xlam");
		mimeType.add("xlsb");
		mimeType.add("ppt");
		mimeType.add("pot");
		mimeType.add("pps");
		mimeType.add("ppa");
		mimeType.add("pptx");
		mimeType.add("potx");
		mimeType.add("ppsx");
		mimeType.add("ppam");
		mimeType.add("pptm");
		mimeType.add("potm");
		mimeType.add("ppsm");
		mimeType.add("pdf");
		mimeType.add("doc");

		Enumeration en = mrequest.getFiles().elements();
		UploadFile uf;
		while (en.hasMoreElements()) {
			String ext = "";
			uf = (UploadFile) en.nextElement();
			try {
				MagicMatch mm = Magic.getMagicMatch(uf.getData());
				ext = mm.getExtension();
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (mimeType.indexOf(ext.toLowerCase()) == -1) {
				throw new SecurityException();
			}
		}

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		int userId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
		}
		String uploadURL = getServletContext().getRealPath("/stores/");
		String fileName = box.getString("filename");
		String whiteList = "*.xls";
		List fileUploadedList = null;

		List<Integer> itemIdList = new ArrayList<Integer>();
		List<String> pvmsNoList = new ArrayList<String>();
		List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> auList = new ArrayList<Integer>();
		List<String> batch1 = new ArrayList<String>();
		List<String> batch2 = new ArrayList<String>();
		List<String> batch3 = new ArrayList<String>();
		List<String> batch4 = new ArrayList<String>();
		List<String> batch5 = new ArrayList<String>();
		List<String> batch6 = new ArrayList<String>();
		List<String> batch7 = new ArrayList<String>();
		List<String> batch8 = new ArrayList<String>();
		List<String> batch9 = new ArrayList<String>();
		List<String> batch10 = new ArrayList<String>();
		List<String> manufactureDate1 = new ArrayList<String>();
		List<String> manufactureDate2 = new ArrayList<String>();
		List<String> manufactureDate3 = new ArrayList<String>();
		List<String> manufactureDate4 = new ArrayList<String>();
		List<String> manufactureDate5 = new ArrayList<String>();
		List<String> manufactureDate6 = new ArrayList<String>();
		List<String> manufactureDate7 = new ArrayList<String>();
		List<String> manufactureDate8 = new ArrayList<String>();
		List<String> manufactureDate9 = new ArrayList<String>();
		List<String> manufactureDate10 = new ArrayList<String>();
		List<String> expiryDate1 = new ArrayList<String>();
		List<String> expiryDate2 = new ArrayList<String>();
		List<String> expiryDate3 = new ArrayList<String>();
		List<String> expiryDate4 = new ArrayList<String>();
		List<String> expiryDate5 = new ArrayList<String>();
		List<String> expiryDate6 = new ArrayList<String>();
		List<String> expiryDate7 = new ArrayList<String>();
		List<String> expiryDate8 = new ArrayList<String>();
		List<String> expiryDate9 = new ArrayList<String>();
		List<String> expiryDate10 = new ArrayList<String>();
		List<BigDecimal> qty1 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty2 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty3 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty4 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty5 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty6 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty7 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty8 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty9 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty10 = new ArrayList<BigDecimal>();

		List<String> remarksList = new ArrayList<String>();
		box.put("uploadURL", uploadURL);
		box.put("filename", box.getString("filename"));

		try {

			fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL,
					whiteList, box.getString("filename"));
			Boolean fileUploaded = false;
			if (fileUploadedList != null && fileUploadedList.size() != 0) {
				fileUploaded = (Boolean) fileUploadedList.get(0);
			}
			jxl.WorkbookSettings ws = null;
			jxl.Workbook workbook = null;
			jxl.Sheet s = null;
			Cell rowData[] = null;
			int rowCount = '0';
			int columnCount = '0';
			DateCell dc = null;
			int totalSheet = 0;

			try {
				ws = new WorkbookSettings();
				ws.setLocale(new Locale("en", "EN"));
				workbook = jxl.Workbook.getWorkbook(
						(new FileInputStream(box.getString("uploadURL") + "/"
								+ box.getString("filename"))), ws);

				totalSheet = workbook.getNumberOfSheets();

				// Getting Default Sheet i.e. 0
				s = workbook.getSheet(0);

				// Reading Individual Cell
				// Total Total No Of Rows in Sheet, will return you no of rows
				// that are occupied with some data
				rowCount = s.getRows();
				// Total Total No Of Columns in Sheet

				columnCount = s.getColumns();
				int itemId = 0;
				String pvmsNO = "";
				String nomenclature = "";
				int au = 0;
				int auId = 0;

				for (int i = 1; i < rowCount; i++) {
					// Get Individual Row
					rowData = s.getRow(i);
					if (rowData[0].getContents().length() != 0) { // the first
																	// date
																	// column
																	// must not
																	// null

						for (int j = 0; j < columnCount; j++) {
							switch (j) {

							case 0:
								try {
									if (rowData[j].getContents().length() != 0) {
										if (!rowData[j].getContents()
												.toString().equals("")) {
											itemIdList.add(Integer
													.parseInt(rowData[j]
															.getContents()
															.toString()));
										} else {
											itemIdList.add(0);
										}
									} else {
										itemIdList.add(0);
									}
								} catch (Exception e) {
									e.printStackTrace();
									itemIdList.add(0);
								}
								break;

							case 1:
								try {
									if (rowData[j].getContents().length() != 0) {
										pvmsNoList
												.add(rowData[j].getContents());
									} else {
										pvmsNoList.add("");
									}
								} catch (Exception e) {
									pvmsNoList.add("");
								}
								break;
							case 2:
								try {
									if (rowData[j].getContents().length() != 0) {
										nomenclatureList.add(rowData[j]
												.getContents());
									} else {
										nomenclatureList.add("");
									}
								} catch (Exception e) {
									nomenclatureList.add("");
								}
								break;

							case 3:
								try {
									if (rowData[j].getContents().length() != 0) {
										au = Integer.parseInt(rowData[j]
												.getContents().toString());
										// auId
										// =Integer.parseInt(au.substring(0,
										// au.lastIndexOf("-")));
										auList.add(au);
									} else {
										auList.add(0);
									}
								} catch (Exception e) {
									auList.add(0);
								}
								break;
							case 4:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch1.add(rowData[j].getContents());

									} else {
										batch1.add("");
									}
								} catch (Exception e) {
									batch1.add("");
								}
								break;
							case 5:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate1.add(rowData[j].getContents());
										

									} else {
										manufactureDate1.add("");
									}
								} catch (Exception e) {
									manufactureDate1.add("");
								}
								break;
							case 6:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate1.add(rowData[j].getContents());

									} else {
										expiryDate1.add("");
									}
								} catch (Exception e) {
									expiryDate1.add("");
								}
								break;
							case 7:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty1.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty1.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty1.add(new BigDecimal(0));
								}
								break;
							case 8:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch2.add(rowData[j].getContents());

									} else {
										batch2.add("");
									}
								} catch (Exception e) {
									batch2.add("");
								}
								break;

							case 9:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate2.add(rowData[j]
												.getContents());

									} else {
										manufactureDate2.add("");
									}
								} catch (Exception e) {
									manufactureDate2.add("");
								}
								break;
							case 10:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate2.add(rowData[j]
												.getContents());

									} else {
										expiryDate2.add("");
									}
								} catch (Exception e) {
									expiryDate2.add("");
								}
								break;
							case 11:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty2.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty2.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty2.add(new BigDecimal(0));
								}
								break;
							case 12:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch3.add(rowData[j].getContents());

									} else {
										batch3.add("");
									}
								} catch (Exception e) {
									batch3.add("");
								}
								break;
							case 13:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate3.add(rowData[j]
												.getContents());

									} else {
										manufactureDate3.add("");
									}
								} catch (Exception e) {
									manufactureDate3.add("");
								}
								break;

							case 14:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate3.add(rowData[j]
												.getContents());

									} else {
										expiryDate3.add("");
									}
								} catch (Exception e) {
									expiryDate3.add("");
								}
								break;
							case 15:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty3.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty3.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty3.add(new BigDecimal(0));
								}
								break;

							case 16:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch4.add(rowData[j].getContents());

									} else {
										batch4.add("");
									}
								} catch (Exception e) {
									batch4.add("");
								}
								break;
							case 17:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate4.add(rowData[j]
												.getContents());

									} else {
										manufactureDate4.add("");
									}
								} catch (Exception e) {
									manufactureDate4.add("");
								}
								break;
							case 18:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate4.add(rowData[j]
												.getContents());

									} else {
										expiryDate4.add("");
									}
								} catch (Exception e) {
									expiryDate4.add("");
								}
								break;
							case 19:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty4.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty4.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty4.add(new BigDecimal(0));
								}
								break;
							case 20:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch5.add(rowData[j].getContents());

									} else {
										batch5.add("");
									}
								} catch (Exception e) {
									batch5.add("");
								}
								break;
							case 21:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate5.add(rowData[j]
												.getContents());

									} else {
										manufactureDate5.add("");
									}
								} catch (Exception e) {
									manufactureDate5.add("");
								}
								break;
							case 22:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate5.add(rowData[j]
												.getContents());

									} else {
										expiryDate5.add("");
									}
								} catch (Exception e) {
									expiryDate5.add("");
								}
								break;
							case 23:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty5.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty5.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty5.add(new BigDecimal(0));
								}
								break;
							case 24:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch6.add(rowData[j].getContents());

									} else {
										batch6.add("");
									}
								} catch (Exception e) {
									batch6.add("");
								}
								break;
							case 25:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate6.add(rowData[j]
												.getContents());

									} else {
										manufactureDate6.add("");
									}
								} catch (Exception e) {
									manufactureDate6.add("");
								}
								break;

							case 26:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate6.add(rowData[j]
												.getContents());

									} else {
										expiryDate6.add("");
									}
								} catch (Exception e) {
									expiryDate6.add("");
								}
								break;
							case 27:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty6.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty6.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty6.add(new BigDecimal(0));
								}
								break;
							case 28:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch7.add(rowData[j].getContents());

									} else {
										batch7.add("");
									}
								} catch (Exception e) {
									batch7.add("");
								}
								break;
							case 29:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate7.add(rowData[j]
												.getContents());

									} else {
										manufactureDate7.add("");
									}
								} catch (Exception e) {
									manufactureDate7.add("");
								}
								break;
							case 30:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate7.add(rowData[j]
												.getContents());

									} else {
										expiryDate7.add("");
									}
								} catch (Exception e) {
									expiryDate7.add("");
								}
								break;
							case 31:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty7.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty7.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty7.add(new BigDecimal(0));
								}
								break;
							case 32:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch8.add(rowData[j].getContents());

									} else {
										batch8.add("");
									}
								} catch (Exception e) {
									batch8.add("");
								}
								break;
							case 33:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate8.add(rowData[j]
												.getContents());

									} else {
										manufactureDate8.add("");
									}
								} catch (Exception e) {
									manufactureDate8.add("");
								}
								break;
							case 34:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate8.add(rowData[j]
												.getContents());

									} else {
										expiryDate8.add("");
									}
								} catch (Exception e) {
									expiryDate8.add("");
								}
								break;

							case 35:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty8.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty8.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty8.add(new BigDecimal(0));
								}
								break;
							case 36:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch9.add(rowData[j].getContents());

									} else {
										batch9.add("");
									}
								} catch (Exception e) {
									batch9.add("");
								}
								break;
							case 37:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate9.add(rowData[j]
												.getContents());

									} else {
										manufactureDate9.add("");
									}
								} catch (Exception e) {
									manufactureDate9.add("");
								}
								break;
							case 38:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate9.add(rowData[j]
												.getContents());

									} else {
										expiryDate9.add("");
									}
								} catch (Exception e) {
									expiryDate9.add("");
								}
								break;

							case 39:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty9.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty9.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty9.add(new BigDecimal(0));
								}
								break;
							case 40:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch10.add(rowData[j].getContents());

									} else {
										batch10.add("");
									}
								} catch (Exception e) {
									batch10.add("");
								}
								break;
							case 41:
								try {
									if (rowData[j].getContents().length() != 0) {

										manufactureDate10.add(rowData[j]
												.getContents());

									} else {
										manufactureDate10.add("");
									}
								} catch (Exception e) {
									manufactureDate10.add("");
								}
								break;

							case 42:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate10.add(rowData[j]
												.getContents());

									} else {
										expiryDate10.add("");
									}
								} catch (Exception e) {
									expiryDate10.add("");
								}
								break;

							case 43:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty10.add(new BigDecimal(rowData[j]
												.getContents()));

									} else {
										qty10.add(new BigDecimal(0));
									}
								} catch (Exception e) {
									qty10.add(new BigDecimal(0));
								}
								break;

							}
						}
					}
				}
				workbook.close();
				// session.setAttribute("itemIdList", itemIdList);

				utilMap.put("itemIdList", itemIdList);
				utilMap.put("pvmsNoList", pvmsNoList);
				utilMap.put("nomenclatureList", nomenclatureList);
				utilMap.put("auList", auList);

				utilMap.put("batch1", batch1);
				utilMap.put("batch2", batch2);
				utilMap.put("batch3", batch3);
				utilMap.put("batch4", batch4);
				utilMap.put("batch5", batch5);
				utilMap.put("batch6", batch6);
				utilMap.put("batch7", batch7);
				utilMap.put("batch8", batch8);
				utilMap.put("batch9", batch9);
				utilMap.put("batch10", batch10);

				utilMap.put("manufactureDate1", manufactureDate1);
				utilMap.put("manufactureDate2", manufactureDate2);
				utilMap.put("manufactureDate3", manufactureDate3);
				utilMap.put("manufactureDate4", manufactureDate4);
				utilMap.put("manufactureDate5", manufactureDate5);
				utilMap.put("manufactureDate6", manufactureDate6);
				utilMap.put("manufactureDate7", manufactureDate7);
				utilMap.put("manufactureDate8", manufactureDate8);
				utilMap.put("manufactureDate9", manufactureDate9);
				utilMap.put("manufactureDate10", manufactureDate10);

				utilMap.put("expiryDate1", expiryDate1);
				utilMap.put("expiryDate2", expiryDate2);
				utilMap.put("expiryDate3", expiryDate3);
				utilMap.put("expiryDate4", expiryDate4);
				utilMap.put("expiryDate5", expiryDate5);
				utilMap.put("expiryDate6", expiryDate6);
				utilMap.put("expiryDate7", expiryDate7);
				utilMap.put("expiryDate8", expiryDate8);
				utilMap.put("expiryDate9", expiryDate9);
				utilMap.put("expiryDate10", expiryDate10);
				utilMap.put("qty1", qty1);
				utilMap.put("qty2", qty2);
				utilMap.put("qty3", qty3);
				utilMap.put("qty4", qty4);
				utilMap.put("qty5", qty5);
				utilMap.put("qty6", qty6);
				utilMap.put("qty7", qty7);
				utilMap.put("qty8", qty8);
				utilMap.put("qty9", qty9);
				utilMap.put("qty10", qty10);
				utilMap.put("deptId", deptId);
				utilMap.put("hospitalId", hospitalId);
				utilMap.put("userName", userName);
				utilMap.put("userId", userId);
				box.put("itemIdList", itemIdList);
				box.put("deptId", deptId);
				box.put("userId", userId);
				box.put("hospitalId", hospitalId);
				box.put("numOfRows", 15);
				box.put("pageCount", 10);
				box.put("currPage", 1);

				timeMap = storesHandlerService.importPvmsMaster(utilMap);
				String time = (String) timeMap.get("time");
				/*
				 * List<MasDepartment> departmentList = new
				 * ArrayList<MasDepartment>(); if(timeMap.get("departmentList")
				 * != null){ departmentList =
				 * (List)timeMap.get("departmentList"); }
				 */
				box.put("time", time);
				if (timeMap.get("msg") != null) {
					msg = (String) timeMap.get("msg");
				}
				map.put("msg", msg);
				// map.put("departmentList", departmentList);

			} catch (IOException e) {
				e.printStackTrace();

			}

		} catch (Exception ioe) {
			ioe.printStackTrace();
		}
		jsp = "storeBalance";
		jsp += ".jsp";
		// title = "Tender Proposal";
		map.put("contentJsp", jsp);
		map.put("flag1", flag1);

		map.put("groupId", box.getInt("groupId"));
		map.put("subGroupId", box.getInt("subGroupId"));
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showIndentCreationbyDepartmentsJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		String  hospitalname="";
        HttpSession session=request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}

		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("hospitalName") != null) {
			hospitalname= (String)
					session.getAttribute("hospitalName");
		}
		
		box.put(RequestConstants.HOSPITAL_NAME, hospitalname);
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.showIndentCreationbyDepartmentsJsp(box);
		jsp = "annualDepartmentCreation";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("hospitalname", hospitalname);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView getItemListForAnnualDepartmentIndent(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.getItemListForAnnualDepartmentIndent(box);
		jsp = "annualDepartmentCreation";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitAnnualDepartmentIndentData(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.submitAnnualDepartmentIndentData(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showIndentCreationbyDepartmentsJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showInstituteWisePendingList(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showInstituteWisePendingList(box);
		jsp = "instituteWiseIndentPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showInstitutionAnnualIndentCreationJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		int districtId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("districtId") != null) {
			districtId = Integer
					.parseInt(session.getAttribute("districtId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		box.put("districtId", districtId);
		map = storesHandlerService.showInstitutionAnnualIndentCreationJsp(box);
		jsp = "instituteIndentCreation";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitInstituteWiseIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int fromWard = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			fromWard = Integer.parseInt(session.getAttribute("deptId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("fromWard", fromWard);
		map = storesHandlerService.submitInstituteWiseIndent(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showInstitutionAnnualIndentCreationJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showDepartmentPopupJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showDepartmentPopupJsp(box);
		jsp = "instituteWiseIndentPopup";
		// jsp = jsp + ".jsp";
		// title = "GRN";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateDepartmentDemandedQty(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		map = storesHandlerService.updateDepartmentDemandedQty(box);
		jsp = "instituteWiseIndentPopup";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showInstituteIndentPopupJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showInstituteIndentPopupJsp(box);
		jsp = "districtWiseIndentPopup";
		map.put("contentJsp", jsp);
		// map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDistrictIndentPopupJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showDistrictIndentPopupJsp(box);
		jsp = "stateWiseIndentPopup";
		// jsp = jsp + ".jsp";
		// title = "GRN";
		map.put("contentJsp", jsp);
		// map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateInstituteDemandedQty(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		map = storesHandlerService.updateInstituteDemandedQty(box);
		jsp = "districtWiseIndentPopup";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView updateDistrictDemandedQty(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		map = storesHandlerService.updateDistrictDemandedQty(box);
		jsp = "stateWiseIndentPopup";
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showStateDataJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		// map = storesHandlerService.showIndentCreationbyDepartmentsJsp(box);
		jsp = "stateDataForIndent";
		// jsp = jsp + ".jsp";
		// title = "GRN";
		map.put("contentJsp", jsp);
		// map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDistrictAnnualIndentCreationJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.showDistrictAnnualIndentCreationJsp(box);
		jsp = "districtAnnualIndentCreation";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitDistrictWiseIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int fromWard = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			fromWard = Integer.parseInt(session.getAttribute("deptId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("fromWard", fromWard);
		map = storesHandlerService.submitDistrictWiseIndent(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showDistrictAnnualIndentCreationJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showStateAnnualIndentCreationJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		int userId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.showStateAnnualIndentCreationJsp(box);
		jsp = "stateAnnualIndentCreation";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitStateWiseIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.submitStateWiseIndent(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showStateAnnualIndentCreationJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAnnualIndentTransferToKMSCLJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showAnnualIndentTransferToKMSCLJsp(box);
		jsp = "stateAnnualIndentTransferToKmscl";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView transferAnnualIndentDataToKMSCL(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		boolean update = true;
		map = storesHandlerService.transferAnnualIndentDataToKMSCL(box);
		if (map.get("update") != null) {
			update = (Boolean) map.get("update");
		}
		String messageTOBeVisibleToTheUser = "";
		if (update) {
			messageTOBeVisibleToTheUser = "Record save Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		// -----------------------
		map = storesHandlerService.createTransferToKMSCLIndentExcelList(box);
		if (map.get("flag") != null
				&& map.get("flag").toString().equalsIgnoreCase("NoData")) {
			jsp = "annualIndentMessage";
			url = "/hms/hms/stores?method=showAnnualIndentTransferToKMSCLJsp";
			// jsp = "annualDepartmentIndentCreationApproval";
			jsp = jsp + ".jsp";
			title = "GRN";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("url", url);
			map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
			return new ModelAndView("index", "map", map);
		} else {
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
			if (map.get("storeInternalIndentTList") != null)
				storeInternalIndentTList = (List) map
						.get("storeInternalIndentTList");
			try {
				response.setContentType("application/vnd.ms-excel");
				response.setHeader("Content-Disposition",
						"attachment; filename=KMSCL.xls");

				WritableWorkbook wb = Workbook.createWorkbook(response
						.getOutputStream());
				WritableSheet ws = wb.createSheet("Sheet", 0);

				WritableFont wf = new WritableFont(WritableFont.ARIAL, 10,
						WritableFont.BOLD);
				WritableCellFormat wcf = new WritableCellFormat(wf);
				wcf.setAlignment(Alignment.CENTRE);
				wcf.setWrap(true);

				WritableCellFormat wcf2 = new WritableCellFormat(
						NumberFormats.TEXT);
				wcf2.setWrap(true);

				CellView cell = new CellView();
				cell.setSize(3000);
				ws.setColumnView(0, cell);
				cell.setSize(7000);
				ws.setColumnView(1, cell);
				cell.setSize(3000);
				ws.setColumnView(2, cell);
				cell.setSize(5000);
				ws.setColumnView(3, cell);
				cell.setSize(5000);
				ws.setColumnView(4, cell);
				cell.setSize(5000);
				ws.setColumnView(5, cell);
				cell.setSize(5000);
				ws.setColumnView(6, cell);
				cell.setSize(5000);
				ws.setColumnView(7, cell);
				cell.setSize(5000);
				ws.setColumnView(8, cell);
				cell.setSize(5000);
				ws.setColumnView(9, cell);
				cell.setSize(5000);
				ws.setColumnView(10, cell);
				cell.setSize(5000);
				ws.setColumnView(11, cell);
				cell.setSize(5000);
				ws.setColumnView(12, cell);
				cell.setSize(5000);
				ws.setColumnView(13, cell);
				cell.setSize(5000);
				ws.setColumnView(14, cell);
				cell.setSize(5000);
				ws.setColumnView(15, cell);

				Label label = new Label(0, 0, "Item Code", wcf);
				ws.addCell(label);

				label = new Label(1, 0, "Item Name", wcf);
				ws.addCell(label);

				label = new Label(2, 0, "Unit", wcf);
				ws.addCell(label);

				label = new Label(3, 0, "Year1 Indent Qty", wcf);
				ws.addCell(label);

				label = new Label(4, 0, "Year2 Indent Qty", wcf);
				ws.addCell(label);

				label = new Label(5, 0, "Prv Year Cons", wcf);
				ws.addCell(label);

				label = new Label(6, 0, "Stock", wcf);
				ws.addCell(label);

				label = new Label(7, 0, "Lead Time", wcf);
				ws.addCell(label);

				label = new Label(8, 0, "Cons.In Lead Time", wcf);
				ws.addCell(label);
				label = new Label(9, 0, "Incremental(%)", wcf);
				ws.addCell(label);
				label = new Label(10, 0, "IncrementalQty", wcf);
				ws.addCell(label);
				label = new Label(11, 0, "Required Qty", wcf);
				ws.addCell(label);
				label = new Label(12, 0, "Pending Indent Qty", wcf);
				ws.addCell(label);
				label = new Label(13, 0, "Additional Qty", wcf);
				ws.addCell(label);
				label = new Label(14, 0, "Demanded Qty", wcf);
				ws.addCell(label);
				label = new Label(15, 0, "Remarks", wcf);
				ws.addCell(label);

				if (storeInternalIndentTList.size() > 0) {
					int count = 1;
					String itemCode = "", itemName = "", unit = "";
					BigDecimal year1IndentQty = new BigDecimal(0);
					BigDecimal year2IndentQty = new BigDecimal(0);
					BigDecimal prvYearCons = new BigDecimal(0);
					int stock = 0;
					int leadTime = 0;
					String remarks = "";
					BigDecimal consInLeadTime = new BigDecimal(0);
					BigDecimal incrementalPercentage = new BigDecimal(0);
					BigDecimal incrementalQty = new BigDecimal(0);
					BigDecimal requiredQty = new BigDecimal(0);
					BigDecimal pendingIndentQty = new BigDecimal(0);
					BigDecimal additionalQty = new BigDecimal(0);
					int demandedQty = 0;

					for (StoreInternalIndentT internalIndentT : storeInternalIndentTList) {
						if (internalIndentT.getItem() != null) {
							itemCode = internalIndentT.getItem().getPvmsNo();
						}
						if (internalIndentT.getItem() != null) {
							itemName = internalIndentT.getItem()
									.getNomenclature();
						}
						if (internalIndentT.getItem() != null
								&& internalIndentT.getItem()
										.getItemConversion() != null) {
							unit = internalIndentT.getItem()
									.getItemConversion().getItemUnitName();
						}
						if (!internalIndentT.getPrevYearIndQty().equals(
								new BigDecimal(0))) {
							year1IndentQty = internalIndentT
									.getPrevYearIndQty();
						}
						if (!internalIndentT.getPrevToPrevYearIndQty().equals(
								new BigDecimal(0))) {
							year2IndentQty = internalIndentT
									.getPrevToPrevYearIndQty();
						}
						if (!internalIndentT.getPrevYearConsmQty().equals(
								new BigDecimal(0))) {
							prvYearCons = internalIndentT.getPrevYearConsmQty();
						}
						if (!internalIndentT.getStockInHand().equals(
								new BigDecimal(0))) {
							stock = internalIndentT.getStockInHand();
						}
						if (!internalIndentT.getLeadTime().equals(
								new BigDecimal(0))) {
							leadTime = internalIndentT.getLeadTime();
						}
						if (!internalIndentT.getConsInLeadTime().equals(
								new BigDecimal(0))) {
							consInLeadTime = internalIndentT
									.getConsInLeadTime();
						}
						if (!internalIndentT.getIncrementalPercentage().equals(
								new BigDecimal(0))) {
							incrementalPercentage = internalIndentT
									.getIncrementalPercentage();
						}
						if (!internalIndentT.getIncrementalQuantity().equals(
								new BigDecimal(0))) {
							incrementalQty = internalIndentT
									.getIncrementalQuantity();
						}
						if (!internalIndentT.getRequiredQty().equals(
								new BigDecimal(0))) {
							requiredQty = internalIndentT.getRequiredQty();
						}
						if (!internalIndentT.getPendingIndentQty().equals(
								new BigDecimal(0))) {
							pendingIndentQty = internalIndentT
									.getPendingIndentQty();
						}
						if (!internalIndentT.getAdditionalQty().equals(
								new BigDecimal(0))) {
							additionalQty = internalIndentT.getAdditionalQty();
						}
						if (internalIndentT.getQtyRequest() != null) {
							demandedQty = internalIndentT.getQtyRequest();
						}
						if (internalIndentT.getRemarks() != null) {
							remarks = internalIndentT.getRemarks();
						}

						label = new Label(0, count, itemCode, wcf2);
						ws.addCell(label);

						label = new Label(1, count, itemName, wcf2);
						ws.addCell(label);

						label = new Label(2, count, unit, wcf2);
						ws.addCell(label);

						label = new Label(3, count, year1IndentQty + "", wcf2);
						ws.addCell(label);

						label = new Label(4, count, year2IndentQty + "", wcf2);
						ws.addCell(label);

						label = new Label(5, count, prvYearCons + "", wcf2);
						ws.addCell(label);

						label = new Label(6, count, stock + "", wcf2);
						ws.addCell(label);

						label = new Label(7, count, leadTime + "", wcf2);
						ws.addCell(label);

						label = new Label(8, count, consInLeadTime + "", wcf2);
						ws.addCell(label);

						label = new Label(9, count, incrementalPercentage + "",
								wcf2);
						ws.addCell(label);

						label = new Label(10, count, incrementalQty + "", wcf2);
						ws.addCell(label);

						label = new Label(11, count, requiredQty + "", wcf2);
						ws.addCell(label);

						label = new Label(12, count, pendingIndentQty + "",
								wcf2);
						ws.addCell(label);

						label = new Label(13, count, additionalQty + "", wcf2);
						ws.addCell(label);

						label = new Label(14, count, demandedQty + "", wcf2);
						ws.addCell(label);

						label = new Label(15, count, remarks, wcf2);
						ws.addCell(label);

						count++;
					}
				}

				wb.write();
				wb.close();

				return null;
			} catch (Exception ioe) {
				ioe.printStackTrace();
				// ------------------------------------------
				jsp = "annualIndentMessage";
				url = "/hms/hms/stores?method=showPendingListAnnualIndentTransferToKMSCLJsp";
				// jsp = "annualDepartmentIndentCreationApproval";
				jsp = jsp + ".jsp";
				title = "GRN";
				map.put("contentJsp", jsp);
				map.put("title", title);
				map.put("url", url);
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				return new ModelAndView("index", "map", map);
			}
		}
	}

	public ModelAndView showIntraInstitutionIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int employeeId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		Users users = new Users();
		if (session.getAttribute("users") != null) {
			users = (Users) session.getAttribute("users");
			employeeId = users.getEmployee().getId();
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("employeeId", employeeId);
		map = storesHandlerService.showIndentWithinInstitute(box);
		jsp = "intraInstitutionIndent";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showIndentTrackerJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> receivedMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		String indentNo = "";
		String fromDate = "";
		String toDate = "";
		String pvmsNo = "";
		String nomenclature = "";
		int hospitalId = 0;
		int deptId = 0;
		String deptType = "";
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("deptType") != null) {
			deptType =(String)session.getAttribute("deptType");
			box.put("deptType", deptType);
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		// dataMap.put("indentNo",indentNo);
		// dataMap.put("fromDate",fromDate);
		// dataMap.put("toDate",toDate);
		// dataMap.put("pvmsNo",pvmsNo);
		// dataMap.put("nomenclature",nomenclature);
		// dataMap.put("hospitalId",hospitalId);
		receivedMap = storesHandlerService.searchIndentTrackingList(box);
		jsp = "indentTracker";
		jsp += ".jsp";
		title = "Tracking Of Indent";
		if (receivedMap.get("indentTrackingList") != null) {
			map.put("indentTrackingList", receivedMap.get("indentTrackingList"));
		}
		if (receivedMap.get("iList") != null) {
			map.put("iList", receivedMap.get("iList"));
		}
		if (receivedMap.get("employeeList") != null) {
			map.put("employeeList", receivedMap.get("employeeList"));
		}
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchIndentTrackingList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> receivedMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		String indentNo = "";
		String fromDate = "";
		String toDate = "";
		String pvmsNo = "";
		String nomenclature = "";

		if (request.getParameter("indentNo") != null
				&& !request.getParameter("indentNo").equals("")) {
			indentNo = request.getParameter("indentNo");
		}
		if (request.getParameter("fromDate") != null
				&& !request.getParameter("fromDate").equals("")) {
			fromDate = request.getParameter("fromDate");
		}
		if (request.getParameter("toDate") != null
				&& !request.getParameter("toDate").equals("")) {
			toDate = request.getParameter("toDate");
		}
		if (request.getParameter("pvmsNo") != null
				&& !request.getParameter("pvmsNo").equals("")) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		if (request.getParameter("nomenclature") != null
				&& !request.getParameter("nomenclature").equals("")) {
			nomenclature = request.getParameter("nomenclature").split("\\[")[0];
		}
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		String deptType = "";
		if (session.getAttribute("deptType") != null) {
			deptType =(String)session.getAttribute("deptType");
			box.put("deptType", deptType);
		}
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt(session.getAttribute("deptId").toString());
			box.put("deptId", deptId);
		}

		box.put("indentNo", indentNo);
		box.put("fromDate", fromDate);
		box.put("toDate", toDate);
		box.put("pvmsNo", pvmsNo);
		box.put("nomenclature", nomenclature);
		box.put("hospitalId", hospitalId);

		receivedMap = storesHandlerService.searchIndentTrackingList(box);

		if (receivedMap.get("indentTrackingList") != null) {
			jsp = "indentTracker";
			jsp += ".jsp";
			title = "Tracking Of Indent";
			map.put("indentTrackingList", receivedMap.get("indentTrackingList"));
			map.put("iList", receivedMap.get("iList"));
			map.put("employeeList", receivedMap.get("employeeList"));
			map.put("search", true);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} else {
			map.put("message", "Search Not Successful");
			showIndentTrackerJsp(request, response);
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListAgainstIssuedItems(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showPendingListAgainstIssuedItems(box);
		jsp = "pendingListAgainstIssuedItems";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchAcknowledgementList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showPendingListAgainstIssuedItems(box);
		jsp = "pendingListAgainstIssuedItems";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showReceiptAgainstIssuedItems(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		String issueNo = "";
		String issue_No = "";
		int hospitalId = 0;
		if (request.getParameter(ISSUE_NO) != null
				&& !(request.getParameter(ISSUE_NO).equals(""))) {
			issueNo = request.getParameter(ISSUE_NO);
		}
		if (request.getParameter(ISSUE_UNIT_ID) != null
				&& !(request.getParameter(ISSUE_UNIT_ID).equals(""))) {
			issue_No = request.getParameter(ISSUE_UNIT_ID);
			box.put("issue_No", issue_No);
		}

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		box.put("hospitalId", hospitalId);
		map = storesHandlerService.createGridIssueData(box);
		jsp = "receiptAgainstIssuedItems";
		jsp = jsp + ".jsp";
		title = "Certificate to Ack";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView stockTakingAddition(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		// map = storesHandlerService.showIndentCreationbyDepartmentsJsp(box);
		jsp = "stockTakingAdditionTemp";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showBlockingOfBatchAndBrandJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		HttpSession session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showBlockingOfBatchAndBrandJsp(box);
		jsp = "blockingOfBatchAndBrand";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView showUnBlockItem(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		HttpSession session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showUnBlockItem(box);
		jsp = "unBlockingOfBatch";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showStockReservationJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showStockReservationJsp(box);
		jsp = "stockReservation";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showOpeningBalanceEntryApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);

		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		// --------------------------------------------------------------------------------
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showPendingListForApproval(box);
		jsp = "pendingListForOpeningEntryApproval";
		jsp = jsp + ".jsp";
		title = "Balance";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView displayOpeningBalanceData(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		// --------------------------------------------------------------------------------
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.displayOpeningBalanceData(box);
		jsp = "openingBalanceEntryApproval.jsp";
		title = "Balance";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView submitOpeningBalanceEntryApproval(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		// --------------------------------------------------------------------------------
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		boolean flag = false;
		map = storesHandlerService.submitOpeningBalanceEntryApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showOpeningBalanceEntryApprovalJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showPendingListForDepartmentIndentAnnualApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId").toString());
			box.put("hospitalId", hospitalId);
		}
		map = storesHandlerService
				.showPendingListForDepartmentIndentAnnualApproval(box);
		jsp = "annualDepartmentApprovalPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAnnualDepartmentIndentCreationApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService
				.showAnnualDepartmentIndentCreationApproval(box);
		jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitAnnualDepartmentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		boolean flag = false;
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitAnnualDepartmentApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForDepartmentIndentAnnualApproval";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	/* by Rahul showPendingDispensingJsp */
	public ModelAndView showPendingDispensingJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = 0;
		int visitId = 0;
		int itemId = 0;
		int hospitalId = 0;
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}

		HttpSession session = request.getSession();
		String deptType = "";
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		if (hinId != 0) {
			map = storesHandlerService.showPendingDispensingJsp(mapForDS);
			List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
			alreadyissuedDrugList = (List) map.get("alreadyissuedDrugList");
		}
		// jsp = STRS_PATIENT_DRUG_ISSUE + ".jsp";
		jsp = "showPendingDispensingJsp" + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	/* by Rahul showPendingIndentApproval */
	public ModelAndView showPendingIndentApproval(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		/*
		 * session = request.getSession(); if (session.getAttribute("userName")
		 * != null) userName = (String) session.getAttribute("userName"); if
		 * (session.getAttribute("hospitalId") != null) hospitalId =
		 * Integer.parseInt("" + session.getAttribute("hospitalId")); if
		 * (session.getAttribute("deptId") != null) deptId = Integer.parseInt(""
		 * + session.getAttribute("deptId")); String deptType=""; if
		 * (session.getAttribute("deptType") != null){ deptType =
		 * (String)session.getAttribute("deptType"); }
		 */
		// --------------------------------------------------------------------------------
		/*
		 * Map map = new HashMap(); Map<String, Object> dataMap = new
		 * HashMap<String, Object>(); dataMap.put("deptId", deptId);
		 * dataMap.put("deptType", deptType); dataMap.put("hospitalId",
		 * hospitalId); dataMap.put("userName", userName);
		 */

		map = storesHandlerService.showPendingIndentApproval(box);
		/* jsp = "showPendingIndentApproval" + ".jsp"; */
		jsp = "showPendingIndentApproval";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView getDetailsPendingIndentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		session = request.getSession();
		map = storesHandlerService.getDetailsPendingIndentApproval(box);
		jsp = "getDetailsPendingIndentApproval" + ".jsp";
		/*
		 * jsp = "showPendingIndentApproval"; jsp = jsp + ".jsp";
		 */
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	/* by Rahul showUnservicedDispensingJsp */
	public ModelAndView showUnservicedDispensingJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.parseInt(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put(DEPT_ID, deptId);
		box.put(HOSPITAL_ID, hospitalId);
		map = storesHandlerService.showUnservicedDispensingJsp(box);
		jsp = "showUnservicedDispensingJsp" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	/* by Rahul showdetailUnservicedDispensing */
	public ModelAndView showdetailUnservicedDispensing(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		jsp = "showdetailUnservicedDispensing" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	/* by Rahul showdetailUnservicedDispensing */
	public ModelAndView showDetailPendingDispensing(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		jsp = "showDetailPendingDispensing" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView setNotAvailable(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hinId = 0;
		int hospitalId = 0;
		int presId = 0;
		session = request.getSession();
		/*
		 * if (session.getAttribute("deptId") != null){ deptId =
		 * Integer.parseInt(session.getAttribute("deptId").toString()); }
		 */
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}
		if (request.getParameter(PRESCRIPTION_DETAILS_ID) != null
				&& !(request.getParameter(PRESCRIPTION_DETAILS_ID).equals("0"))) {
			presId = Integer.parseInt(request
					.getParameter(PRESCRIPTION_DETAILS_ID));
			mapForDS.put("presId", presId);
		}

		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);

		storesHandlerService.setNotAvailable(mapForDS);
		map = billingHandlerService.showDetailPendingDispensing(mapForDS);

		jsp = "showDetailPendingDispensing" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView setForEmpanelled(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hinId = 0;
		int hospitalId = 0;
		int presId = 0;
		int emapelledReqQty = 0;
		int visitId = 0;
		session = request.getSession();
		/*
		 * if (session.getAttribute("deptId") != null){ deptId =
		 * Integer.parseInt(session.getAttribute("deptId").toString()); }
		 */
		if (request.getParameter("visitId") != null
				&& !(request.getParameter("visitId").equals("0"))) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			mapForDS.put("visitId", visitId);
		}
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}
		if (request.getParameter(PRESCRIPTION_DETAILS_ID) != null
				&& !(request.getParameter(PRESCRIPTION_DETAILS_ID).equals("0"))) {
			presId = Integer.parseInt(request
					.getParameter(PRESCRIPTION_DETAILS_ID));
			mapForDS.put("presId", presId);
		}
		if (request.getParameter(RequestConstants.emapelledReqQty) != null
				&& !(request.getParameter(RequestConstants.emapelledReqQty)
						.equals("0"))) {
			emapelledReqQty = Integer.parseInt(request
					.getParameter(RequestConstants.emapelledReqQty));
			mapForDS.put("emapelledReqQty", emapelledReqQty);
		}

		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);

		storesHandlerService.setForEmpanelled(mapForDS);
		map = billingHandlerService.showDetailPendingDispensing(mapForDS);

		jsp = "showDetailPendingDispensing" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	/* by Rahul addDispensingItem */
	public ModelAndView addDispensingItem(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		jsp = "addDispensingItem" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	/* by Rahul addDispensingItem */
	public ModelAndView indentApprovalPharmacy(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		jsp = "indentApprovalPharmacy" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	/* by Rahul addDispensingItem */
	public ModelAndView openTokenForPharmacy(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		jsp = "openTokenForPharmacy";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListAnnualIndentTransferToKMSCLJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		map = storesHandlerService
				.showPendingListAnnualIndentTransferToKMSCLJsp(box);
		jsp = "annualIndentTransferToKMSCLPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAnnualIndentProcessingbyKMSCL(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showAnnualIndentProcessingbyKMSCL(box);
		jsp = "annualIndentProcessingByKMSCL";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showEnquiryBroadCastJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showEnquiryBroadCastJsp(box);
		jsp = "enquiryBroadCast";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView showEmergentIndentAcknoeledgementJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		// map = storesHandlerService.showIndentCreationbyDepartmentsJsp(box);
		jsp = "emergentIndentAcknowledgement";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAnnualIndentAdminSetupJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		map = storesHandlerService.showAnnualIndentAdminSetupJsp(hospitalId);
		String jsp = "annualIndentAdminSetup";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView addAnnualIndentAdminSetup(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.addAnnualIndentAdminSetup(box);
		boolean successfullyAdded = false;
		String message = "";
		if (map.get("successfullyAdded") != null) {
			successfullyAdded = (Boolean) map.get("successfullyAdded");
		}
		if (map.get("message") != null) {
			message = (String) map.get("message");
		}
		if (message.equals("")) {
			if (successfullyAdded) {
				message = "Record Added Successfully !!";
			} else {
				message = "Try Again !!";
			}
		}
		String jsp = "annualIndentAdminSetup";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updateAnnualIndentAdminSetup(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.updateAnnualIndentAdminSetup(box);
		boolean successfullyAdded = false;
		String message = "";
		if (map.get("successfullyAdded") != null) {
			successfullyAdded = (Boolean) map.get("successfullyAdded");
		}
		if (map.get("message") != null) {
			message = (String) map.get("message");
		}
		if (message.equals("")) {
			if (successfullyAdded) {
				message = "Record Updated Successfully !!";
			} else {
				message = "Try Again !!";
			}
		}
		String jsp = "annualIndentAdminSetup";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView deleteAnnualIndentAdminSetup(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		boolean dataDeleted = false;
		dataDeleted = storesHandlerService.deleteAnnualIndentAdminSetup(box);
		if (dataDeleted == true) {
			if (box.getString("flag").equals("InActivate"))
				message = "Record is InActivated successfully !!";
			else if (box.getString("flag").equals("Activate"))
				message = "Record is Activated successfully !!";
		} else {
			message = "Some Problem occured!";
		}
		try {
			map = storesHandlerService
					.showAnnualIndentAdminSetupJsp(hospitalId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "annualIndentAdminSetup";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchAnnualIndentAdminSetup(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.searchAnnualIndentAdminSetup(box);
		jsp = "annualIndentAdminSetup";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("search", "search");
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showInstituteAnnualIndentApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showInstituteAnnualIndentApprovalJsp(box);
		jsp = "annualInstituteIndentApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView empanelled(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		
		int empanelledId = 0;	
		
	
		if (session.getAttribute("empanelledId") != null) {
			empanelledId = Integer.parseInt(session.getAttribute("empanelledId").toString());
		}		
		
		
		box.put("empanelledId", empanelledId);
		map = storesHandlerService.empanelled(box);
		jsp = "empanelled";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView empanelledDetails(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = 0;
		int visitId = 0;
		int itemId = 0;
		int hospitalId = 0;
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}
		
		int empanelledId = 0;	
		
		
		if (request.getParameter("empanelledId") != null) {
			empanelledId = Integer.parseInt(request.getParameter("empanelledId"));
		}	
		mapForDS.put("empanelledId", empanelledId);
		

		HttpSession session = request.getSession();
		String deptType = "";
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		if (hinId != 0) {
			map = storesHandlerService.empanelledDetails(mapForDS);
			List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
			alreadyissuedDrugList = (List) map.get("alreadyissuedDrugList");
		}
		// jsp = STRS_PATIENT_DRUG_ISSUE + ".jsp";
		jsp = "empanelledDetails" + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView directDispensing(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = 0;
		int visitId = 0;
		int itemId = 0;
		int hospitalId = 0;
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}

		HttpSession session = request.getSession();
		String deptType = "";
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		if (hinId != 0) {
			map = storesHandlerService.empanelledDetails(mapForDS);
			List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
			alreadyissuedDrugList = (List) map.get("alreadyissuedDrugList");
		}
		// jsp = STRS_PATIENT_DRUG_ISSUE + ".jsp";
		jsp = "directDispensing" + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView dirDispLastPresBased(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = 0;
		int visitId = 0;
		int itemId = 0;
		int hospitalId = 0;
		if (request.getParameter(HIN_ID) != null
				&& !(request.getParameter(HIN_ID).equals("0"))) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			mapForDS.put("hinId", hinId);
		}

		HttpSession session = request.getSession();
		String deptType = "";
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		map=commonMasterHandlerService.getVisitPendingListForPatientGrid(mapForDS);
		if (hinId != 0) {
			map = storesHandlerService.empanelledDetails(mapForDS);
			List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
			alreadyissuedDrugList = (List) map.get("alreadyissuedDrugList");
		}
		jsp = "directDispensing" + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		map.put("lastPrescripitionBasedDispensing", true);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showPendingListForInstituteAnnualIndentApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService
				.showPendingListForInstituteAnnualIndentApprovalJsp(box);
		jsp = "annualInstituteApprovalPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitAnnualInstituteApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		boolean flag = false;
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitAnnualInstituteApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForInstituteAnnualIndentApprovalJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListForDistrictWiseIndentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		// map = storesHandlerService.showInstituteWisePendingList(box);
		map = storesHandlerService
				.showPendingListForDistrictWiseIndentApproval(box);
		jsp = "annualDistrictIndentApprovalPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListForStateWiseIndentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		// map = storesHandlerService.showInstituteWisePendingList(box);
		map = storesHandlerService
				.showPendingListForStateWiseIndentApproval(box);
		jsp = "annualStateIndentApprovalPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showDistrictAnnualIndentApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showDistrictAnnualIndentApprovalJsp(box);
		jsp = "annualDistrictIndentApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitAnnualDistrictApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}

		boolean flag = false;
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitAnnualDistrictApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForStateWiseIndentApproval";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showStateAnnualIndentApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}

		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showStateAnnualIndentApprovalJsp(box);
		jsp = "annualStateIndentApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitAnnualStateApproval(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}

		boolean flag = false;
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitAnnualStateApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForStateWiseIndentApproval";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListForAnnualIndentProcessingbyKMSCL(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService
				.showPendingListForAnnualIndentProcessingbyKMSCL(box);
		jsp = "annualIndentProcessingByKMSCLPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitAnnualIndentProcessingByKMSCL(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		List storeInternalTIdList = new ArrayList();
		List fromDateList = new ArrayList();
		List toDateList = new ArrayList();
		List procurementStatusList = new ArrayList();
		List itemIdList = new ArrayList();
		
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		boolean flag = false;
		session = request.getSession();
		String fileName = null;
		String fileExtension = null;

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId").toString());
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute("userId") != null) {
			int userId = Integer.parseInt(session.getAttribute("userId").toString());
			box.put("userId", userId);
		}
		 MultipartFormDataRequest mrequest = null;
			
			if (MultipartFormDataRequest.isMultipartFormData(request)) 
			   {
					try 
					{
						mrequest = new MultipartFormDataRequest(request);
					} 
					catch (UploadException e) 
					{
						e.printStackTrace();
					} 
					catch (IOException e) 
					{
						e.printStackTrace();
					}
			   }
			Map<String, Object> uploadFileMap = new HashMap<String, Object>();
			String userHome = getServletContext().getRealPath("");
			String fileSeparator = System.getProperty("file.separator");
			
			String uploadURL = userHome.substring(0, userHome
					.lastIndexOf(fileSeparator))
					+ fileSeparator
					+ "HMSDocumentFolder"
					+ fileSeparator
					+ "upload" + fileSeparator;
			
			
			HMSUtil.createFolderFroDocument("NAC", uploadURL);
			List fileUploadedList = null;
			int uploadCount = Integer.parseInt(mrequest.getParameter("hdb"));
			box.put("uploadCount", uploadCount);
			Hashtable files = mrequest.getFiles();
			if(mrequest.getParameter("storeInternalIndentM") != null){
				int storeInternalIndentM = Integer.parseInt(mrequest.getParameter("storeInternalIndentM"));
				box.put("storeInternalIndentM", storeInternalIndentM);
			}
			if(mrequest.getParameter("stateDemandNo") != null){
				String stateDemandNo = mrequest.getParameter("stateDemandNo");
				box.put("stateDemandNo", stateDemandNo);
			}
			
			
			int i = 1;
			for (i = 1; i <= uploadCount; i++) {
				UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME + i);
				if (file!=null) // && fileSize <= 2097152 )
				{

					String fileName1 = file.getFileName();
					
					if(fileName1 != null){
						StringTokenizer strToken = new StringTokenizer(fileName1, ".");

						fileName = strToken.nextToken();
						fileExtension = strToken.nextToken();

						String whiteList = "*." + fileExtension;

						fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL
								+ "NAC" + fileSeparator, whiteList,fileName1, i);
						box.put("filename" + i, fileName1);
						//box.put("description" + i, mrequest.getParameter(DESCRIPTION+ i));
						box.put("fileExtension" + i, fileExtension);
					}
				} else {
					box.put("filename" + i, "0");
				}

				if(mrequest.getParameter("storeInternalTId"+i) != null){
					storeInternalTIdList.add(Integer.parseInt(mrequest.getParameter("storeInternalTId"+i)));
				}
				if(mrequest.getParameter("itemId"+i) != null){
					itemIdList.add(Integer.parseInt(mrequest.getParameter("itemId"+i)));
				}
				
				if(mrequest.getParameter(FROM_DATE+i) != null){
					fromDateList.add(mrequest.getParameter(FROM_DATE+i));
				}else{
					fromDateList.add("");
				}

				if(mrequest.getParameter(TO_DATE+i) != null){
					toDateList.add(mrequest.getParameter(TO_DATE+i));
				}else{
					toDateList.add("");
				}

				if(mrequest.getParameter("procurementStatus"+i) != null){
					procurementStatusList.add(mrequest.getParameter("procurementStatus"+i));
				}else{
					procurementStatusList.add("");
				}

			}	
			generalMap.put("storeInternalTIdList", storeInternalTIdList);
			generalMap.put("fromDateList", fromDateList);
			generalMap.put("toDateList", toDateList);
			generalMap.put("procurementStatusList", procurementStatusList);
			generalMap.put("itemIdList", itemIdList);
			
			Boolean fileUploaded = false;
			if (fileUploadedList != null && fileUploadedList.size() != 0) {
				fileUploaded = (Boolean) fileUploadedList.get(0);
			}
			box.put("uploadURL", uploadURL);
			box.put("fileSeparator", fileSeparator);

		map = storesHandlerService.submitAnnualIndentProcessingByKMSCL(generalMap,box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForStateWiseIndentApproval";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemTypeList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int group = 0;
		if (request.getParameter("group") != null) {
			group = Integer.parseInt(request.getParameter("group"));
		}
		box.put("group", group);
		map = storesHandlerService.getItemTypeList(box);
		jsp = "responseItemTypeSearch";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getItemTypeListForAnnualIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int group = 0;
		if (request.getParameter("group") != null) {
			group = Integer.parseInt(request.getParameter("group"));
		}
		box.put("group", group);
		map = storesHandlerService.getItemTypeList(box);
		jsp = "responseItemTypeSearchForIndent";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getSectionList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int itemType = 0;
		try {
			Box box = HMSUtil.getBox(request);
			if (request.getParameter("itemType") != null) {
				itemType = Integer.parseInt(request.getParameter("itemType"));
			}
			box.put("itemType", itemType);
			map = storesHandlerService.getSectionList(box);
			jsp = "responseForSectionSearch";
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getSectionListForAnnualIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int itemType = 0;
		try {
			Box box = HMSUtil.getBox(request);
			if (request.getParameter("itemType") != null) {
				itemType = Integer.parseInt(request.getParameter("itemType"));
			}
			box.put("itemType", itemType);
			map = storesHandlerService.getSectionList(box);
			jsp = "responseSectionSearchForIndent";
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView getCategoryList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int section = 0;
		try {
			Box box = HMSUtil.getBox(request);
			if (request.getParameter("section") != null) {
				section = Integer.parseInt(request.getParameter("section"));
			}
			box.put("section", section);
			map = storesHandlerService.getCategoryList(box);
			jsp = "responseForCategorySearch";
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView getCategoryListForIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int section = 0;
		try {
			Box box = HMSUtil.getBox(request);
			if (request.getParameter("section") != null) {
				section = Integer.parseInt(request.getParameter("section"));
			}
			box.put("section", section);
			map = storesHandlerService.getCategoryList(box);
			jsp = "responseForCategorySearchForIndent";
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView displayEnquiryBroadCastList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.displayEnquiryBroadCastList(box);
		jsp = "gridForEnquiryBroadCast";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView submitEnquiryBroadCast(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}

		boolean flag = false;
		box.put("deptId", deptId);
		box.put("userId", userId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitEnquiryBroadCast(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record save Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showEnquiryBroadCastJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showEnquiryBroadCastPendingList(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showEnquiryBroadCastPendingList(box);
		jsp = "pendingListForEnquiryAcknowledgement";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showEmergentIndentAcknowledgementJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showEmergentIndentAcknowledgementJsp(box);
		jsp = "emergentIndentAcknowledgement";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitEnquiryBroadCastAcknowledgement(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}

		boolean flag = false;
		box.put("deptId", deptId);
		box.put("userId", userId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitEnquiryBroadCastAcknowledgement(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Broad Cast Acknowledgement Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showEmergentIndentAcknowledgementJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map ", map);
	}

	public ModelAndView showEmergentIndentJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		int hospitalTypeId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalTypeId") != null) {
			hospitalTypeId = Integer.parseInt(session.getAttribute("hospitalTypeId").toString());
		}

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		box.put("hospitalTypeId", hospitalTypeId);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.showEmergentIndentJsp(box);
		jsp = "emergentIndent";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showPendingListForEmergencyIndentProcessingByKMSCL(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		box.put("hospitalId", hospitalId);
		map = storesHandlerService
				.showPendingListForEmergencyIndentProcessingByKMSCL(box);
		jsp = "emergentIndentProcessingByKMSCLPendingList";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showEmergencyIndentProcessingByKMSCL(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("userId", userId);
		map = storesHandlerService.showEmergencyIndentProcessingByKMSCL(box);
		jsp = "emergencyIndentProcessingByKMSCL";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView submitEmergencyIndentProcessingByKMSCL(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}

		boolean flag = false;
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitEmergencyIndentProcessingByKMSCL(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForEmergencyIndentProcessingByKMSCL";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitEmergencyIndent(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int fromHospitalId = 0;
		int userId = 0;
		int deptId = 0;
		int employeeId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			fromHospitalId = Integer.parseInt(session
					.getAttribute("hospitalId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			employeeId = users.getEmployee().getId();
			box.put("employeeId", employeeId);
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}

		boolean flag = false;
		box.put("deptId", deptId);
		box.put("fromHospitalId", fromHospitalId);
		box.put("userId", userId);
		map = storesHandlerService.submitEmergencyIndent(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Save Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showEmergentIndentJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitIndentWithinInstitute(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int userId = 0;
		int deptId = 0;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			int employeeId = users.getEmployee().getId();
			box.put("employeeId", employeeId);
		}
		box.put("hospitalId", hospitalId);
		box.put("userId", userId);
		box.put("deptId", deptId);
		map = storesHandlerService.submitIndentWithinInstitute(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showIntraInstitutionIndent";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getItemForAutoComplete(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String jsp = "";
		Map<String, Object> map = new HashMap<String, Object>();
		map = storesHandlerService.getItemForAutoComplete(box);
		jsp = "responseForItem";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView displayIndentTrackingList(HttpServletRequest request,
			HttpServletResponse response) {
		List<StoreIndentT> displayIndentList = new ArrayList<StoreIndentT>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int indentId = 0;
		HttpSession session = request.getSession();
		
		 int hospitalId = 0; 
		 if (session.getAttribute("hospitalId") != null) {
		 hospitalId = Integer.parseInt(session.getAttribute("hospitalId").toString()); 
		 }
		
		if (request.getParameter("indentId") != null) {
			indentId = Integer.parseInt(request.getParameter("indentId"));
		}
		// dataMap.put("hospitalId", hospitalId);
		dataMap.put("indentId", indentId);
		dataMap.put("hospitalId", hospitalId);
		dataMap = storesHandlerService.displayIndentTrackingList(dataMap);

		return new ModelAndView("responseForIndentTracking", "dataMap", dataMap);
	}

	// showIssueInOtherInstituteJsp
	public ModelAndView showIssueInOtherInstituteJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		String deptType = "";
		if (session.getAttribute("deptType") != null) {
			deptType = (String) session.getAttribute("deptType");
		}
		// --------------------------------------------------------------------------------

		dataMap.put("deptId", deptId);
		dataMap.put("deptType", deptType);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);

		map = storesHandlerService.showIssueToOtherInstituteJsp(dataMap);
		jsp = "issueToOtherInstitute";
		// jsp = "departmentIssueTemp";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView getIndentListForIssueToOtherInstitute(
			HttpServletRequest request, HttpServletResponse response) {
		// --------------- Retriving User Name,Hospital Id,Department Id from
		// Session-----
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map map = new HashMap();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;
		int toInstituteId = 0;
		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)
				&& (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != "")) {
			dispenceryId = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		if ((request.getParameter("toInstitute") != null)
				&& (request.getParameter("toInstitute") != "")) {
			toInstituteId = Integer.parseInt(request
					.getParameter("toInstitute"));
		}
		jsp = "responseForIndentNo";
		dataMap.put("toInstituteId", toInstituteId);
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		map = storesHandlerService
				.getIndentListForIssueToOtherInstitute(dataMap);
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView searchIndentDetailsForOtherInstitute(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int internalIndentId = 0;
		Box box = HMSUtil.getBox(request);
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int toInstituteId = 0;

		HttpSession session = request.getSession();
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		if ((request.getParameter("toInstitute") != null)
				&& (request.getParameter("toInstitute") != "")) {
			toInstituteId = Integer.parseInt(request
					.getParameter("toInstitute"));
		}
		box.put("toInstituteId", toInstituteId);

		map = storesHandlerService.searchIndentDetailsForOtherInstitute(box);
		int requestByEmpId = 0;
		//
		if (map.get("requestByEmpId") != null) {
			requestByEmpId = (Integer) map.get("requestByEmpId");
		}
		if (request.getParameter(ISSUE_NO) != null) {
			map.put("max", request.getParameter(ISSUE_NO));
		}
		/*
		 * Code for Issue No Code By Mukesh Narayan SIngh Date 02 Dec 2010
		 */

		// ------------------------------------------------------------ Box box
		// = HMSUtil.getBox(request);
		Map<String, Object> mapDemand = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int dispenceryId = 0;

		if ((request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != null)
				&& (request.getParameter(RequestConstants.DEPARTMENT_ID_TEMP) != "")) {
			dispenceryId = Integer.parseInt(request
					.getParameter(RequestConstants.DEPARTMENT_ID_TEMP));
		}
		if ((request.getParameter("toInstitute") != null)
				&& (request.getParameter("toInstitute") != "")) {
			toInstituteId = Integer.parseInt(request
					.getParameter("toInstitute"));
		}
		int employeeId = 0;
		if (request.getParameter(REQUEST_BY) != null
				&& !request.getParameter(REQUEST_BY).equals("")) {
			employeeId = Integer.parseInt(request.getParameter(REQUEST_BY));
		}
		/* jsp = RequestConstants.DEMAND_LIST_AJAX_JSP; */
		dataMap.put("dispenceryId", dispenceryId);
		dataMap.put("toInstituteId", toInstituteId);
		dataMap.put("deptId", deptId);
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("userName", userName);
		dataMap.put("employeeId", employeeId);
		mapDemand = storesHandlerService
				.getDemandListForOtherInstitute(dataMap);
		List<Object[]> storeInternalIndentMPOList = new ArrayList<Object[]>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		if (mapDemand.get("storeInternalIndentMList") != null) {
			storeInternalIndentMPOList = (List<Object[]>) mapDemand
					.get("storeInternalIndentMList");
		}
		if (mapDemand.get("employeeDeptByList") != null) {
			employeeDeptByList = (List<MasEmployee>) mapDemand
					.get("employeeDeptByList");
		}
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		if (mapDemand.get("searchListForPopup") != null) {
			searchListForPopup = (List) mapDemand.get("searchListForPopup");
		}
		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
		if (mapDemand.get("storeInternalIndentPendingList") != null) {
			storeInternalIndentPendingList = (List) mapDemand
					.get("storeInternalIndentPendingList");
		}
		map.put("storeInternalIndentPendingList",
				storeInternalIndentPendingList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("employeeDeptByList", employeeDeptByList);

		/*
		 * End of Code for Issue No Code By Mukesh Narayan SIngh Date 02 Dec
		 * 2010
		 */

		jsp = "issueToOtherInstitute";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("storeInternalIndentMPOList", storeInternalIndentMPOList);
		map.put("internalIndentId", internalIndentId);
		map.put("requestByEmpId", requestByEmpId);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListForAdjustmentApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		int departmentId = 0;
		String physicalStockMDate = "";
		if (request.getParameter(DEPARTMENT_ID) != null
				&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
			departmentId = Integer
					.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		map = storesHandlerService.showPendingListForAdjustmentApproval(box);

		jsp = "pendingListForAdjustmentApproval";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAdjustmentApprovalJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		int departmentId = 0;
		String physicalStockMDate = "";
		if (request.getParameter(DEPARTMENT_ID) != null
				&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
			departmentId = Integer.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		int deptId = 0;
		if (request.getParameter("deptId") != null && !(request.getParameter("deptId").equals(""))) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			box.put("departmentId", deptId);
		}
		int stockMId = 0;
		if (request.getParameter("stockMId") != null && !(request.getParameter("stockMId").equals(""))) {
			stockMId = Integer.parseInt(request.getParameter("stockMId"));
			box.put("stockMId", stockMId);
		}
		map = storesHandlerService.showAdjustmentApprovalJsp(box);
		jsp = "adjustmentApproval";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateBatch(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> generalMap = new HashMap<String, Object>();
		List batchIdList = new ArrayList();
		List blockDateList = new ArrayList();
		List blockStatusList = new ArrayList();
		List blockReasonList = new ArrayList();
		List batchNameList = new ArrayList();
		List orderNoList = new ArrayList();
		List orderDateList = new ArrayList();
		
		List unBlockBatchIdList = new ArrayList();
		List unBlockDateList = new ArrayList();
		List unBlockStatusList = new ArrayList();
		List unBlockReasonList = new ArrayList();
		List unBlockBatchNameList = new ArrayList();
		
		
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int userId = 0;
		String fileName = null;
		String fileExtension = null;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute("users") != null) {
			Users users = (Users) session.getAttribute("users");
			int userType = users.getUserType();
			box.put("userType", userType);
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt(session.getAttribute("userId").toString());
			box.put("userId", userId);
		}
		  MultipartFormDataRequest mrequest = null;
			
			if (MultipartFormDataRequest.isMultipartFormData(request)) 
			   {
					try 
					{
						mrequest = new MultipartFormDataRequest(request);
					} 
					catch (UploadException e) 
					{
						e.printStackTrace();
					} 
					catch (IOException e) 
					{
						e.printStackTrace();
					}
			   }
			Map<String, Object> uploadFileMap = new HashMap<String, Object>();
			String userHome = getServletContext().getRealPath("");
			String fileSeparator = System.getProperty("file.separator");
			
			String uploadURL = userHome.substring(0, userHome
					.lastIndexOf(fileSeparator))
					+ fileSeparator
					+ "HMSDocumentFolder"
					+ fileSeparator
					+ "upload" + fileSeparator;
			
			
			HMSUtil.createFolderFroDocument("blockBatch", uploadURL);
			List fileUploadedList = null;
			int uploadCount = Integer.parseInt(mrequest.getParameter("hdb"));
			box.put("uploadCount", uploadCount);
			Hashtable files = mrequest.getFiles();
			
			
			int i = 1;
			for (i = 1; i <= uploadCount; i++) {
				UploadFile file = (UploadFile) files.get(RequestConstants.UPLOAD_FILENAME + i);
				if (file!=null) // && fileSize <= 2097152 )
				{

					String fileName1 = file.getFileName();
					if(fileName1 != null){
						StringTokenizer strToken = new StringTokenizer(fileName1, ".");

						fileName = strToken.nextToken();
						fileExtension = strToken.nextToken();

						String whiteList = "*." + fileExtension;

						fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL
								+ "blockBatch" + fileSeparator, whiteList,fileName1, i);
						box.put("filename" + i, fileName1);
						//box.put("description" + i, mrequest.getParameter(DESCRIPTION+ i));
						box.put("fileExtension" + i, fileExtension);
					}
				} else {
					box.put("filename" + i, "0");
				}

				if(mrequest.getParameter("batchId"+i) != null){
					batchIdList.add(Integer.parseInt(mrequest.getParameter("batchId"+i)));
				}
				
				if(mrequest.getParameter("batchName"+i) != null){
					batchNameList.add(mrequest.getParameter("batchName"+i));

				}else{
					batchNameList.add("");
				}

				if(mrequest.getParameter("efectiveFromDate"+i) != null){
					blockDateList.add(mrequest.getParameter("efectiveFromDate"+i));
				}else{
					blockDateList.add("");
				}

				if(mrequest.getParameter("status"+i) != null){
					blockStatusList.add(mrequest.getParameter("status"+i));
				}else{
					blockStatusList.add("");
				}

				if(mrequest.getParameter("reason"+i) != null){
					blockReasonList.add(mrequest.getParameter("reason"+i));
				}else{
					blockReasonList.add("");
				}

				if(mrequest.getParameter("orderNo"+i) != null){
					orderNoList.add(mrequest.getParameter("orderNo"+i));
				}else{
					orderNoList.add("");
				}

				if(mrequest.getParameter("orderDate"+i) != null){
					orderDateList.add(mrequest.getParameter("orderDate"+i));
				}else{
					orderDateList.add("");
				}


				if(mrequest.getParameter("batchNo"+i) != null){
					unBlockBatchIdList.add(Integer.parseInt(mrequest.getParameter("batchNo"+i)));
				}else{
					unBlockBatchIdList.add("");
				}
/*
				if(mrequest.getParameter("batchName"+i) != null){
					batchNameList.add(mrequest.getParameter("batchName"+i));
				}else{
					batchNameList.add("");
				}
*/
				if(mrequest.getParameter("unBlockDate"+i) != null){
					unBlockDateList.add(mrequest.getParameter("unBlockDate"+i));
				}else{
					unBlockDateList.add("");
				}
				if(mrequest.getParameter("unBlockStatus"+i) != null){
					unBlockStatusList.add(mrequest.getParameter("unBlockStatus"+i));
				}else{
					unBlockStatusList.add("");
				}

				if(mrequest.getParameter("unBlockReason"+i) != null){
					unBlockReasonList.add(mrequest.getParameter("unBlockReason"+i));
				}else{
					unBlockReasonList.add("");
				}

			}
			generalMap.put("batchIdList", batchIdList);
			generalMap.put("blockDateList", blockDateList);
			generalMap.put("batchNameList", batchNameList);
			generalMap.put("blockStatusList", blockStatusList);
			generalMap.put("blockReasonList", blockReasonList);
			generalMap.put("orderNoList", orderNoList);
			generalMap.put("orderDateList", orderDateList);
			generalMap.put("unBlockBatchIdList", unBlockBatchIdList);
			generalMap.put("unBlockBatchNameList", unBlockBatchNameList);
			generalMap.put("unBlockReasonList", unBlockReasonList);
			generalMap.put("unBlockStatusList", unBlockStatusList);
			generalMap.put("unBlockDateList", unBlockDateList);
			Boolean fileUploaded = false;
			if (fileUploadedList != null && fileUploadedList.size() != 0) {
				fileUploaded = (Boolean) fileUploadedList.get(0);
			}
			box.put("uploadURL", uploadURL);
			box.put("fileSeparator", fileSeparator);
		map = storesHandlerService.updateBatch(box, generalMap);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showBlockingOfBatchAndBrandJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView changePendingVisitStatus(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapVisit = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int visit = box.getInt(VISIT_ID);
		String uhidNo = box.get(RequestConstants.HIN_NO);
		mapVisit = storesHandlerService.changePendingVisitStatus(box);
		 map = storesHandlerService.showUnservicedDispensingJsp(box);
		boolean flag = false;
		if (mapVisit.get("flag") != null && !"".equals("flag")) {
			flag = Boolean.parseBoolean(mapVisit.get("flag").toString());
		}
		String message = "Please Try Again";
		if (flag) {
			message = "Dispensing done successfully";
		}
		String jsp = "dispensingSuccess" + ".jsp";
		map.put("messageTOBeVisibleToTheUser", message);
		map.put(RequestConstants.VISIT_ID, visit);
		map.put(RequestConstants.HIN_NO, uhidNo);
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView intraIndentApproval(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int indentNo = box.getInt(INDENT_NO);

		storesHandlerService.intraIndentApproval(box);
		// storesHandlerService.intraIndentApproval(box);
		map = storesHandlerService.showPendingIndentApproval(box);

		jsp = "showPendingIndentApproval" + ".jsp";
		/*
		 * jsp = "showDetailPendingDispensing"; jsp += ".jsp";
		 */
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView intraIndentReject(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);

		storesHandlerService.intraIndentReject(box);
		map = storesHandlerService.showPendingIndentApproval(box);

		jsp = "showPendingIndentApproval" + ".jsp";
		/*
		 * jsp = "showDetailPendingDispensing"; jsp += ".jsp";
		 */
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView empanellBilling(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.empanellBilling(box);
		jsp = "empanellBilling";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView empannelBillingApproval(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		// map = storesHandlerService.showEmergentIndentJsp(box);
		jsp = "empannelBillingApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView changeCurVisitStatus(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int visit = box.getInt(VISIT_ID);
		storesHandlerService.changeCurVisitStatus(box);
		map = billingHandlerService.getPharmacySalesDetails(box);

		jsp = "pharmacySalesViewSearch" + ".jsp";
		/*
		 * jsp = "showDetailPendingDispensing"; jsp += ".jsp";
		 */
		String message="Data saved Successfully";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView getPatientVisitInfo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		Map<String, Object> details = new HashMap<String, Object>();
		Map<String, Object> visitNoList = new HashMap<String, Object>();
		String hinNo = "";
		boolean lastPrescripitionBasedDispensing = false;
		HttpSession session = request.getSession();
		int deptId =0;
		int hospitalId=0;
		if(session.getAttribute(
				RequestConstants.DEPT_ID)!=null){
			deptId = Integer.parseInt(session.getAttribute(
					RequestConstants.DEPT_ID).toString());
		}if(session.getAttribute(
				RequestConstants.HOSPITAL_ID)!=null){
			hospitalId=Integer.parseInt(session.getAttribute(
					RequestConstants.HOSPITAL_ID).toString());
		}
		
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		if (!hinNo.equals("")) {
			details.put("hinNo", hinNo);
		}
		if (request.getParameter("searchHinNo") != null) {
			String searchHinNo = request.getParameter("searchHinNo");
			details.put("searchHinNo", searchHinNo);
		}
		String patientName = "";
		if (request.getParameter("patientName") != null) {
			patientName = request.getParameter("patientName");
			details.put("patientName", patientName);
		}
		String searchFlag = "";
		if (request.getParameter("searchFlag") != null) {
			searchFlag = request.getParameter("searchFlag");
			
		}
		
		if (box.get("lastPrescripitionBasedDispensing") != null
				&& !"".equals(box.get("lastPrescripitionBasedDispensing"))) {
			lastPrescripitionBasedDispensing = box
					.getBoolean("lastPrescripitionBasedDispensing");
		}
		details.put(RequestConstants.DEPT_ID, deptId);
		details.put(HOSPITAL_ID, hospitalId);
		details.put("lastPrescripitionBasedDispensing", lastPrescripitionBasedDispensing);
		map = storesHandlerService.getPatientVisitInfo(details);
		if (map.get("message") == "success") {

		} 
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<Visit> visits = new ArrayList<Visit>();
		if (map.get("visitList") != null) {
			patientVisitList = (List<Visit>) map.get("visitList");
		}
		if (map.get("visits") != null) {
			visits = (List<Visit>) map.get("visits");
		}
		
		String jsp = "";
		if (patientVisitList != null && patientVisitList.size() <= 0) {
			if(searchFlag.equals("yes")){
				jsp = "directDispensing.jsp";
			}else{
				jsp = "directDispensing.jsp";
				map.put("message", "Visit does not exist.");
			}
		} else {
			if (lastPrescripitionBasedDispensing) {
				if(visits.size()>0){
					jsp = "directDispensing.jsp";
				}else{
					jsp = "dirDispLastPresBased.jsp";
					map.put("lastPrescripitionBasedDispensing",lastPrescripitionBasedDispensing);
				}
			} else {
				jsp = "patientDispense.jsp";
			}
		}

		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView submitResrvedStock(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		int userId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
			box.put("userId", userId);
		}

		map = storesHandlerService.submitResrvedStock(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showStockReservationJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showUnReservedStockJsp(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer
					.parseInt(session.getAttribute("userId").toString());
		}
		box.put("userId", userId);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showUnReservedItems(box);
		jsp = "unReservedStock";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView responseForUnReservedItems(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.responseForUnReservedItems(box);
		jsp = "responseForUnReservedItems";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView submitUnResrvedStock(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			box.put("deptId", deptId);
		}
		int userId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
			box.put("userId", userId);
		}

		map = storesHandlerService.submitUnResrvedStock(box);
		boolean flag = true;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showStockReservationJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPendingListForDefectiveApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}

		map = storesHandlerService.showPendingListForDefectiveApproval(box);

		jsp = "pendingListForDefectiveItemApproval";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showDefectiveItemApprovalJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int defectiveMId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		
		if (request.getParameter("defectiveMId") != null) {
			defectiveMId = Integer.parseInt(request
					.getParameter("defectiveMId"));
			box.put("defectiveMId", defectiveMId);
		}

		map = storesHandlerService.showDefectiveItemApprovalJsp(box);
		jsp = "defectiveItemApproval";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView submitDefectiveItemApproval(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		// --------------------------------------------------------------------------------
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		boolean flag = false;
		map = storesHandlerService.submitDefectiveItemApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForDefectiveApproval";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView submitAdjustmentApproval(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		// --------------------------------------------------------------------------------
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		boolean flag = false;
		map = storesHandlerService.submitAdjustmentApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Approved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showInstitutionAnnualIndentCreationJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showBroadCastDashBoardForDMO(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}

		map = storesHandlerService.showBroadCastDashBoardForDMO(box);
		jsp = "dmo_broadcast_dashboard";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView deleteBroadCast(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}
		map = storesHandlerService.deleteBroadCast(box);
		jsp = "dmo_broadcast_dashboard";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showBroadCastItemDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showBroadCastItemDetail(box);
		jsp = "responseForDmoBroadCastDashboard";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showDmoBroadStatus(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		int broadCastEnquiryTId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		
		if (request.getParameter("broadCastEnquiryTId") != null) {
			broadCastEnquiryTId = Integer.parseInt(request
					.getParameter("broadCastEnquiryTId"));
		}
		box.put("broadCastEnquiryTId", broadCastEnquiryTId);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showDmoBroadStatus(box);
		jsp = "responseForBroadCastStatus";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView submitDmoDashboardBroadData(HttpServletRequest request,
			HttpServletResponse response) {
		String userName = "";
		int userId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int broadCastEnquiryTId = 0;
		int broadCastEnquiryMId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		if (request.getParameter("broadCastEnquiryTId") != null) {
			broadCastEnquiryTId = Integer.parseInt(request
					.getParameter("broadCastEnquiryTId"));
		}
		if (request.getParameter("broadCastEnquiryMId") != null) {
			broadCastEnquiryMId = Integer.parseInt(request
					.getParameter("broadCastEnquiryMId"));
		}
		box.put("broadCastEnquiryTId", broadCastEnquiryTId);
		box.put("broadCastEnquiryMId", broadCastEnquiryMId);
		// --------------------------------------------------------------------------------
		box.put("userId", userId);
		box.put("hospitalId", hospitalId);
		boolean flag = false;
		map = storesHandlerService.submitDmoDashboardBroadData(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showBroadCastDashBoardForDMO";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showBroadCastDashBoardForInstitute(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}

		map = storesHandlerService.showBroadCastDashBoardForInstitute(box);
		jsp = "institute_broadcast_dashboard";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showBroadCastItemDetailInstitute(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}

		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		map = storesHandlerService.showBroadCastItemDetailInstitute(box);
		jsp = "responseForInstituteBroadCastDashboard";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showInstituteBroadStatus(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();
		int broadCastEnquiryTId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (request.getParameter("broadCastEnquiryTId") != null) {
			broadCastEnquiryTId = Integer.parseInt(request
					.getParameter("broadCastEnquiryTId"));
		}
		int itemId = 0;
		if (request.getParameter("itemId") != null) {
			itemId = Integer.parseInt(request
					.getParameter("itemId"));
		}
		
		box.put("broadCastEnquiryTId", broadCastEnquiryTId);
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		box.put("itemId", itemId);
		map = storesHandlerService.showInstituteBroadStatus(box);
		jsp = "responseForInstituteBroadCast";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView submitInstituteDashboardBroadData(
			HttpServletRequest request, HttpServletResponse response) {
		String userName = "";
		int userId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int broadCastEnquiryTId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userId") != null) {
			userId = Integer.parseInt("" + session.getAttribute("userId"));
		}
		if (request.getParameter("broadCastEnquiryTId") != null) {
			broadCastEnquiryTId = Integer.parseInt(request
					.getParameter("broadCastEnquiryTId"));
		}
		box.put("broadCastEnquiryTId", broadCastEnquiryTId);
		// --------------------------------------------------------------------------------
		box.put("userId", userId);
		box.put("hospitalId", hospitalId);
		boolean flag = false;
		map = storesHandlerService.submitInstituteDashboardBroadData(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showBroadCastDashBoardForInstitute";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}
	public ModelAndView viewBroadCastStatusData(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			box.put("hospitalId", hospitalId);
		}

		map = storesHandlerService.viewBroadCastStatusData(box);
		jsp = "viewDMOBroadCast";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView empanelledSave(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		int userId = 0;
		session = request.getSession();

		if (session.getAttribute(RequestConstants.HOSPITAL_ID) != null) {
			hospitalId = Integer.parseInt(session.getAttribute(
					RequestConstants.HOSPITAL_ID).toString());
		}
		if (session.getAttribute(RequestConstants.DEPT_ID) != null) {
			deptId = Integer.parseInt(session.getAttribute(
					RequestConstants.DEPT_ID).toString());
		}
		if (session.getAttribute(RequestConstants.USER_ID) != null) {
			userId = Integer.parseInt(session.getAttribute(
					RequestConstants.USER_ID).toString());
		}
		
		int empanelledId= 0;
		
		if(request.getParameter("empanelledId") != null)
		{
			empanelledId = Integer.parseInt(request.getParameter("empanelledId")); 
		}
		
		box.put("empanelledId", empanelledId);

		box.put(RequestConstants.HOSPITAL_ID, hospitalId);
		box.put(RequestConstants.DEPT_ID, deptId);
		box.put(RequestConstants.USER_ID, userId);
		map = storesHandlerService.empanelledSave(box);
	
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		
		box.put("empanelledId", empanelledId);
		map = storesHandlerService.empanelled(box);

		jsp = "empanelled";
		jsp = jsp + ".jsp";
		map.put("message", "Save Successfully");
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitIndentTracking(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		// --------------------------------------------------------------------------------
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		boolean flag = false;
		map = storesHandlerService.submitIndentTracking(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showIndentTrackerJsp";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);

	}

	public void getEmployeeName(HttpServletRequest request,
			HttpServletResponse response) throws ParseException {
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		//String peNo = "";
		int empId=0;
		/*int employeeId = 0;
		String employeeName = "";*/
		String pen="";
		/*if (box.getString("peNo") != null) {
			peNo = box.getString("peNo");
		}*/
		if (box.getString("empId") != null) {
			empId = (Integer) box.getInt("empId") ;
		}
		try {
			map = storesHandlerService.getEmployeeName(box);

			if (map.get("pen") != null) {
				pen = (String) map.get("pen");
			}
			/*if (map.get("employeeId") != null) {
				employeeId = (Integer) map.get("employeeId");
			}
			if (map.get("employeeName") != null) {
				employeeName = (String) map.get("employeeName");
			}*/
		} catch (Exception e) {
			e.printStackTrace();
		}

		StringBuffer sb = new StringBuffer();
		try {
			sb.append("<item>");
			sb.append("<pen>" + pen + "</pen>");
	/*		sb.append("<employeeId>" + employeeId + "</employeeId>");
			sb.append("<employeeName>" + employeeName + "</employeeName>");*/
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ModelAndView getItemUnitDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		box.put(DEPT_ID, session.getAttribute(DEPT_ID));
		box.put(HOSPITAL_ID, session.getAttribute(HOSPITAL_ID));
		map = storesHandlerService.getItemUnitDetail(box);

		return new ModelAndView("updateunit", "map", map);
	}

	public ModelAndView submitdirectDispensing(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String deptType = "";
		int hospitalId = 1;
		String issueNo=box.get("issueNo"); //Added by Arbind on 21-04-2017
		HttpSession session = request.getSession();
		box.put(DEPT_ID, session.getAttribute(DEPT_ID));
		box.put(HOSPITAL_ID, session.getAttribute(HOSPITAL_ID));
		box.put(USER_ID, session.getAttribute(USER_ID));
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		// Users users = (Users) session.getAttribute(RequestConstants.USERS);
		map = storesHandlerService.submitDirectDispensing(box);
		
		String message="Data saved Successfully";
		map.put("message", message);
		
		jsp = "directDispensing" + ".jsp";
		map.put("issueNo", issueNo);
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView submitOTCDirectDispensing(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String deptType = "";
		int hospitalId = 0;
		String message = "";
		HttpSession session = request.getSession();
		box.put(DEPT_ID, session.getAttribute(DEPT_ID));
		box.put(HOSPITAL_ID, session.getAttribute(HOSPITAL_ID));
		box.put(USER_ID, session.getAttribute(USER_ID));
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId); 
		map = storesHandlerService.submitOTCDirectDispensing(box);
		if(map.get("flag") != null){
			message ="Record saved sucessfully!";
		}else{
			message ="Some Problem Occured!";	
		}
		jsp = "directDispensing" + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		map.put("message", message);
		map.put("paperBased", "Y");
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printPricriptionIssue(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		int visitNo = 0;
		String issueNo = "";  //Added by Amit Das on 19-02-2016
		String serviceNo = "";
		String hinNo = "";
		int hospitalId = 0;
		int deptId = 0;
		int visitId=0;
		int hinId = 0;
		HttpSession session = request.getSession();
		try {
			/*if (request.getParameter(RequestConstants.VISIT_NUMBER) != null
					&& (!request.getParameter(RequestConstants.VISIT_NUMBER).equals(""))) {
				visitNo = Integer.parseInt(request.getParameter(RequestConstants.VISIT_NUMBER));
				parameters.put("visitNo", visitNo);
			}
			if (request.getParameter("serviceNo") != null
					&& (!request.getParameter("serviceNo").equals(""))) {
				serviceNo = request.getParameter("serviceNo");
				parameters.put("serviceNo", serviceNo);
			}*/
			if (request.getParameter("hinNo") != null
					&& (!request.getParameter("hinNo").equals(""))) {
				hinNo = request.getParameter("hinNo");
				parameters.put("hinNo", hinNo);
			}
			if (request.getParameter("visitNo") != null
					&& (!request.getParameter("visitNo").equals(""))) {
				visitNo = Integer.parseInt(request.getParameter("visitNo"));
				parameters.put("visitNo", visitNo);
			}
			if (session.getAttribute("hospitalId") != null
					&& (!"".equals(session.getAttribute("hospitalId")))) {
				hospitalId = Integer.parseInt(session.getAttribute("hospitalId").toString());
				parameters.put("hospitalId", hospitalId);
			}
			String doctorName ="";
			if (request.getParameter("doctorName") != null
					&& (!request.getParameter("doctorName").equals(""))) {
				doctorName = request.getParameter("doctorName");
				parameters.put("doctor_name", doctorName);
			}
			// Added by Amit Das on 19-02-2016
			if (request.getParameter("issueNo") != null
					&& (!request.getParameter("issueNo").equals(""))) {
				issueNo = request.getParameter("issueNo");
				parameters.put("issueNo", issueNo);
			}
			if (request.getParameter("visitId") != null
					&& (!request.getParameter("visitId").equals(""))) {
				visitId =Integer.parseInt(request.getParameter("visitId"));
				parameters.put("visitId", visitId);
			}
			if (request.getParameter("hinId") != null
					&& (!request.getParameter("hinId").equals(""))) {
				hinId =Integer.parseInt(request.getParameter("hinId"));
			}

			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//System.out.println("hospitalId "+hospitalId+" issueNo "+issueNo+" visitId "+visitId+" deptId "+deptId);
		detailsMap = storesHandlerService.getConnectionForReport();

		parameters.put("SUBREPORT_DIR",getServletContext().getRealPath("/Reports/"));
		parameters.put("timeImage", getServletContext().getRealPath("/jsp/images/Times.jpg"));
		
		parameters.put("IMAGE_DIR_LEFT", getServletContext().getRealPath("/jsp/images/malyalam_report_text.jpg"));
		//HMSUtil.generateReport("PatientPrescriptionFormatIssue", parameters,(Connection) detailsMap.get("con"), response,getServletContext());//commented and added by govind 01-08-2017
		map.put("Report_Path", request.getContextPath()+"/Reports/"+"PatientPrescriptionFormatIssue"+hinId+""+hospitalId+".pdf");
		//HMSUtil.generateReportForDirectPrint("PatientPrescriptionFormatIssue", parameters,(Connection) detailsMap.get("con"), response,getServletContext(),getServletContext().getRealPath("/Reports/"));//govind code 7-7-2016
		
	//	HMSUtil.generateReportForDirectPrintPatient("PatientPrescriptionFormatIssue", parameters,(Connection) detailsMap.get("con"), response,getServletContext(),getServletContext().getRealPath("/Reports/"),hinId,hospitalId);//govind code 7-7-2016
		String flag="1";
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}
		if (flag.equals("1"))
		{
			HMSUtil.generateReportForDirectPrintPatient("PatientPrescriptionFormatIssue", parameters,(Connection) detailsMap.get("con"), response,getServletContext(),getServletContext().getRealPath("/Reports/"),hinId,hospitalId);//govind code 7-7-2016
		}

		else if(flag.equals("2")) 
		{
					HMSUtil.generateHTMLReport("PatientPrescriptionFormatIssue", parameters, (Connection) detailsMap.get("con"), response,
							getServletContext());
		}
		
		
		//commented and added by govind 01-08-2017
//		try {
//			byte[] bytes = null;
//			try {
//				bytes = JasperRunManager.runReportToPdf(
//						getCompiledReport("PatientPrescriptionFormatIssue"),
//						parameters, (Connection) detailsMap.get("con"));
//				/*bytes = JasperRunManager.runReportToPdf(
//						getCompiledReport("medicalCaseSheetnewforstorageNewPharmacy"),
//						parameters, (Connection) detailsMap.get("con"));
//				*/
//			} catch (JRException e) {
//
//				e.printStackTrace();
//			}
//			response.setHeader("Content-Disposition", "inline; filename="
//					+ "PatientPrescriptionFormat" + ".pdf");
//			response.setContentType("application/pdf");
//			response.setContentLength(bytes.length);
//			ServletOutputStream ouputStream;
//			try {
//				ouputStream = response.getOutputStream();
//				ouputStream.write(bytes, 0, bytes.length);
//				ouputStream.flush();
//				ouputStream.close();
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
//
//		} catch (IllegalStateException e) {
//			e.printStackTrace();
//		}
//end code
		//added by govind 01-08-2017
		try{
			((Connection) detailsMap.get("con")).close();
			}catch(Exception e){
				e.printStackTrace();
			}
		return new ModelAndView("printReports", "map", map);//added by govind 01-08-2017
	}
	
	public ModelAndView getItemListForGrp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int group = 0;
		int itemTypeId = 0;
		int sectionId = 0;
		int categoryId = 0;
		int classId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		if (request.getParameter("itemGroupId") != null) {
			group = Integer.parseInt(request.getParameter("itemGroupId"));
			dataMap.put("group", group);
		}
		
		if (request.getParameter("itemTypeId") != null) {
			itemTypeId = Integer.parseInt(request.getParameter("itemTypeId"));
			dataMap.put("itemTypeId", itemTypeId);
		}
		
		if (request.getParameter("sectionId") != null) {
			sectionId = Integer.parseInt(request.getParameter("sectionId"));
			dataMap.put("sectionId", sectionId);
		}
		
		if (request.getParameter("categoryId") != null) {
			categoryId = Integer.parseInt(request.getParameter("categoryId"));
			dataMap.put("categoryId", categoryId);
		}
		
		if (request.getParameter("classId") != null) {
			classId = Integer.parseInt(request.getParameter("classId"));
			dataMap.put("classId", classId);
		}
		if (request.getParameter("hospTypeCode") != null) {
			dataMap.put("hospTypeCode", request.getParameter("hospTypeCode"));
		}
		int hospitalId = 0;
		int deptId = 0;
		if (request.getParameter("toWard") != null
				&& !request.getParameter("toWard").equals("")) {
			int toWard = Integer.parseInt(request.getParameter("toWard"));
			dataMap.put("toWard", toWard);
			
		}
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			dataMap.put("deptId", deptId);
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			dataMap.put("hospitalId", hospitalId);
		}
		if(request.getParameter("importIndent")!=null && request.getParameter("importIndent").equalsIgnoreCase("institute")){
			map = storesHandlerService.getItemListForGrp(dataMap);
		}	
		jsp = "responseIndentItem";


		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getItemListBelowROL(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		map = storesHandlerService.getItemListBelowROL(box);
		jsp = "responseForROLItems";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView showPendingListForDepartmentReturnAcknowledgement(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			box.put("deptId", deptId);
		}
		map = storesHandlerService.showPendingListForDepartmentReturnAcknowledgement(box);
		jsp = "pendingListForDepartmentReturnAcknowledgement.jsp";
		//jsp = "departmentReturnAcknowledgement.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView showDepartemntReturnAcknowledgementJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			box.put("deptId", deptId);
		}
		map = storesHandlerService.showDepartemntReturnAcknowledgementJsp(box);
		//jsp = "pendingListForDepartmentReturnAcknowledgement.jsp";
		jsp = "departmentReturnAcknowledgement.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView precptionSearch(HttpServletRequest request,
			HttpServletResponse response) {  
		HttpSession session;
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.parseInt(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put("deptId", deptId);
		box.put(HOSPITAL_ID, hospitalId);
		map = billingHandlerService.getPharmacySalesDetails(box);
		jsp = "prescriptionSearch" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}
	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientPrescriptionReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Date fromDate = new Date();
		Date toDate=new Date();
		Integer hospitalId=0;
		session=request.getSession(); 
		String hinNo = "";
		 
		if (request.getParameter(FROM_DATE) != null) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(FROM_DATE));
		}
		if (request.getParameter(TO_DATE) != null) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter(TO_DATE));
		} 
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		}  
		Map<String, Object> detailsMap = new HashMap<String, Object>(); 
		detailsMap = storesHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("fromDate", fromDate); 
		parameters.put("toDate", toDate);
		parameters.put("hospitalId", hospitalId);
		try { 
			HMSUtil.generateReport("patientPrescriptionReport", parameters,
					(Connection) detailsMap.get("con"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}
	public ModelAndView shortExpiryMedicine(HttpServletRequest request,
			HttpServletResponse response) {  
		HttpSession session;
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.parseInt(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put("deptId", deptId);
		box.put(HOSPITAL_ID, hospitalId);
		map = billingHandlerService.getPharmacySalesDetails(box);
		jsp = "shortExpiryMedicine" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}
	public ModelAndView shortExpiryMedicineReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";

		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		requestParameters.put("deptId",
				(Integer) session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE)); 
				toDate=HMSUtil.addDaysToDate(request
						.getParameter(FROM_DATE), 30);
				requestParameters.put("FROM_DATE", fromDate);
				requestParameters.put("TO_DATE", toDate);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("shortExpiryMedicine", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}

	
	
	public ModelAndView showIssueMedicine(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String jsp = "issueMedicineReport" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}
	
	public ModelAndView printIssueMedicine(HttpServletRequest request,
			HttpServletResponse response) throws JRException {
		Map<String, Object> requestParameters = new HashMap<String, Object>();

		Map<String, Object> detailsMap = new HashMap<String, Object>();




		String fromDate="";
		String toDate="";

		session = request.getSession();
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();

		String deptName = "";
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}
		detailsMap = getHospitalParameterDetails(request);

		requestParameters.put("hospitalName", (String) detailsMap
				.get("hospitalName"));
		requestParameters.put("hospitalAddress", (String) detailsMap
				.get("hospitalAddress"));
		requestParameters.put("deptName", deptName);


		if(request.getParameter("item_id") != "" )
		{
			requestParameters.put("itemId",
					Integer.parseInt(request.getParameter("item_id")));


		}


		requestParameters.put("deptId", (Integer) session
				.getAttribute("deptId"));


		requestParameters.put("fromDate", HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE)));
		requestParameters.put("toDate", HMSUtil
				.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE)));

		HMSUtil.generateReport("itemSalesRegister", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());


		return null;

	}
	public ModelAndView returnDrugPatientSearch(HttpServletRequest request,
			HttpServletResponse response) {  
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int deptId = 0;
		int hospitalId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.parseInt(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put("deptId", deptId);
		box.put(HOSPITAL_ID, hospitalId);
		//map = billingHandlerService.getPharmacySalesDetails(box);
		jsp = "returnDrugPatientSearch" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}
	public ModelAndView getIssueNo(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Visit> visitNoList = new ArrayList<Visit>();
		Box box=HMSUtil.getBox(request);
		String hinNo = "";
		Integer hospitalId = 0;
		HttpSession session = request.getSession();
		if (request.getParameter(HIN_NO) != null
				&& !request.getParameter(HIN_NO).equals("")) {
			hinNo = request.getParameter(HIN_NO);
		}
		String name="";
		String mobNo="";
		if (request.getParameter("patientName") != null
				&& !request.getParameter("patientName").equals("")) {
			name = request.getParameter("patientName");
		}
		if (request.getParameter("mobileNumber") != null
				&& !request.getParameter("mobileNumber").equals("")) {
			mobNo = request.getParameter("mobileNumber");
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		box.put(HOSPITAL_ID, hospitalId); 
		box.put("name", name);
		box.put("mobNo", mobNo);
		map = storesHandlerService.getIssueNo(box,name,mobNo); 
		String jsp = "allIssueNoAndIssueDate";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getPatientDrugDetail(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box=HMSUtil.getBox(request);
		String deptName = "";
		String deptType = "";
		 
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}

		if (session.getAttribute("deptType") != null) {
			deptType = (String) session.getAttribute("deptType");
		}  
		dataMap.put("deptType", deptType); 
		map = storesHandlerService.getPatientDrugDetail(box);
		String includedJsp = "returndrug" + ".jsp";

		jsp = "returnDrugPatientSearch" + ".jsp"; 
		map.put("includedJsp", includedJsp); 
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView returnIssueDrug(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box=HMSUtil.getBox(request);
		String deptName = "";
		String deptType = "";
		int hospitalId=0;
		int userId=0;
		int deptId=0;
		boolean flag = false;
		if (session.getAttribute("deptName") != null) {
			deptName = (String) session.getAttribute("deptName");
		}

		if (session.getAttribute("deptType") != null) {
			deptType = (String) session.getAttribute("deptType");
		}  
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}  
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
		} 
		if (session.getAttribute(DEPT_ID) != null) {
			deptId = (Integer) session.getAttribute(DEPT_ID);
		} 
		box.put(HOSPITAL_ID, hospitalId);
		box.put(USER_ID, userId); 
		box.put(DEPT_ID, deptId);  
		map = storesHandlerService.retrunDrug(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		if (flag) {
			map.put("msg", "Item Return Successfully.");
		} else {
			map.put("msg", "Item not Return.");
		}
		String jsp = "returnDrugPatientSearch" + ".jsp";
		map.put("contentJsp", jsp);  
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView slowMovingMedicine(HttpServletRequest request,
			HttpServletResponse response) {  
		HttpSession session;
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		session = request.getSession();
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = Integer.parseInt(session.getAttribute(HOSPITAL_ID)
					.toString());
		}
		box.put("deptId", deptId);
		box.put(HOSPITAL_ID, hospitalId);
		map = billingHandlerService.getPharmacySalesDetails(box);
		jsp = "slowMovingMedicine" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}
	public ModelAndView slowMovingMedicineReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int hospitalId = 0;
		String hospitalName = "";

		session = request.getSession();
		requestParameters.put("DEPART", session.getAttribute("deptId"));
		requestParameters.put("deptId",
				(Integer) session.getAttribute("deptId"));
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				/*fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE)); */
				fromDate=HMSUtil.addDaysToDate(request
						.getParameter(FROM_DATE), -60);
				requestParameters.put("FROM_DATE", fromDate);
				//requestParameters.put("TO_DATE", toDate);
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("HOSP_NAME", hospitalName);
				requestParameters.put("hospitalId", hospitalId);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("slowMovingMedicine", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
	
	public ModelAndView submitDepartmentReturnApproval(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int deptId = 0;
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer
					.parseInt(session.getAttribute("deptId").toString());
		}
		boolean flag = false;
		box.put("deptId", deptId);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.submitDepartmentReturnApproval(box);
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		String messageTOBeVisibleToTheUser = "";
		if (flag) {
			messageTOBeVisibleToTheUser = "Record saved Successfully";
		} else {
			messageTOBeVisibleToTheUser = "Records Not Added/Updated!... Try Again.....";
			map.put("messageType", "failure");
		}
		jsp = "annualIndentMessage";
		url = "/hms/hms/stores?method=showPendingListForDepartmentReturnAcknowledgement";
		// jsp = "annualDepartmentIndentCreationApproval";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("url", url);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView empanelledBilleing(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int empanelledId = 1;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		}
		if (request.getParameter("empanelledId") != null) {
			empanelledId = Integer.parseInt(request
					.getParameter("empanelledId").toString());
		}
		box.put(RequestConstants.HOSPITAL_ID,hospitalId);
		map = storesHandlerService.empanelledBilling(box);
		String jsp = "empanelledBilling";
		jsp = jsp + ".jsp";
		title = "GRN";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView getAllPrescription(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = null;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int empanelledId = 1;
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		} 
		box.put(RequestConstants.HOSPITAL_ID,hospitalId);
		map = storesHandlerService.getAllPrescription(box);
		String jsp = "priviousPrescriptionDetails";  
		return new ModelAndView(jsp, "map", map); 
	}
	
	
	//---------------- Report ---------------
	
	   
    public ModelAndView showSlowMovingItems (HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;
          int hospitalId=0;
		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	    session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(session.getAttribute("hospitalId")
					.toString());
		} 
	  
	  map= storesHandlerService.getInstituteList();
		title = " Report";

		jsp = "slowMovingItems_jsp";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);
        map.put("hospitalId",hospitalId);
		return new ModelAndView("index", "map", map);
	} 
	   
    @SuppressWarnings("unused")
	public ModelAndView generateSlowMovingItems(HttpServletRequest request,
			HttpServletResponse response) {


		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String fileName = null;

		HttpSession session = request.getSession();
		String institute=null;
		
		String vendorName = "";
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		String query = "";
		Date currentDate=null;
	
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	//	requestParameters.put("deptId", session.getAttribute("deptId"));

		try {
			
			
			
			if(request.getParameter("institute")!=null && !(request.getParameter("institute").equals("")) ){
				institute=request.getParameter("institute");
				requestParameters.put("hospitalId",Integer.parseInt(""+institute.toString()));
			}
			
			if (request.getParameter("currentDate") != null
					&& !(request.getParameter("currentDate").equals(""))) {
				currentDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter("currentDate"));
				requestParameters.put("currentDate",currentDate);

			}
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		requestParameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("slow_moving_items", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
    
	
	//------------------------Report 2--------------
	
    public ModelAndView showSubStockRegister(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;

		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	  map= storesHandlerService.getInstituteList();
		title = "";

		jsp = "subStockreg_jsp";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	} 
	   
    @SuppressWarnings("unused")
	public ModelAndView generateSubStockRegister(HttpServletRequest request,
			HttpServletResponse response) {


		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String fileName = null;

		HttpSession session = request.getSession();
		String institute=null;
		
		String vendorName = "";
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		String query = "";
		Date fromDate=null;
		Date toDate=null;
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	//	requestParameters.put("deptId", session.getAttribute("deptId"));

		try {
			
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate",fromDate);

			}
			
		
			
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate",toDate);

			}
			
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		requestParameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("sub_stock_register", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
    
	
    //--------------Report Three---------------
    
    public ModelAndView showInvoiceReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;

		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	  map= storesHandlerService.getInstituteList();
		title = "";

		jsp = "invoice_jsp";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	} 
	   
    @SuppressWarnings("unused")
	public ModelAndView generateInvoiceReport(HttpServletRequest request,
			HttpServletResponse response) {


		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String fileName = null;

		HttpSession session = request.getSession();
		String institute=null;
		
		
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		String grnType = "";
		
		Date fromDate=null;
		Date toDate=null;
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	//	requestParameters.put("deptId", session.getAttribute("deptId"));

		try {
			
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate",fromDate);

			}
			
			
			if (request.getParameter(SOURCE_OF_SUPPLY) != null
			&& !(request.getParameter(SOURCE_OF_SUPPLY).equals(""))) {
				grnType =request.getParameter(SOURCE_OF_SUPPLY);
		       requestParameters.put("grnType",grnType);

	              }
			
		
			
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate",toDate);

			}
			
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		requestParameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("issue_notes_received", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
     
    
//-------------------- Report 4-----------------------------	
	
    public ModelAndView showItemsFreezed(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;

		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	  map= storesHandlerService.getInstituteList();
		title = "";

		jsp = "itemsFreezed_jsp";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	} 
	   
    @SuppressWarnings("unused")
	public ModelAndView generateItemsFreezed(HttpServletRequest request,
			HttpServletResponse response) {


		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String fileName = null;

		HttpSession session = request.getSession();
		String institute=null;
		
		
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		String grnType = "";
		
		Date fromDate=null;
		Date toDate=null;
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	//	requestParameters.put("deptId", session.getAttribute("deptId"));

		try {
			
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate",fromDate);

			}
			
		
			
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate",toDate);

			}
			
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		requestParameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("items_freezed_for_distribution", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
     
    
    
//-------------------- Report 5-----------------------------	
	
    public ModelAndView showItemsNearingExpiry(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;

		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	  map= storesHandlerService.getInstituteList();
		title = "";

		jsp = "itemsNearing_jsp";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	} 
	   
    @SuppressWarnings("unused")
	public ModelAndView generateItemsNearingExpiry(HttpServletRequest request,
			HttpServletResponse response) {


		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String fileName = null;

		HttpSession session = request.getSession();
		String institute=null;
		
		
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		String grnType = "";
		
		Date yearDate=null;
		Date mo6Date=null;
		Date mo3Date=null;
		Date toDate=null;
		Box box = HMSUtil.getBox(request);
		
		
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	//	requestParameters.put("deptId", session.getAttribute("deptId"));

		try {
			
		
			if("ye".equalsIgnoreCase( request.getParameter("less"))){
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.YEAR, +1);
				Date result = cal.getTime();
				requestParameters.put("toDate",result);
			}
			
		   else if("mo1".equalsIgnoreCase( request.getParameter("less"))){
					Calendar cal = Calendar.getInstance();
					cal.add(Calendar.MONTH, +6);
					Date result = cal.getTime();
					requestParameters.put("toDate",result);
				}
					
		else if("mo2".equalsIgnoreCase( request.getParameter("less"))){
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.MONTH, +3);
			Date result = cal.getTime();
		
			requestParameters.put("toDate",result);
						
		}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("fromDate",toDate);

			}
					

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		requestParameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("items_nearing_expiry", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
   
//-------------------- Report 6-----------------------------	
	
    public ModelAndView showSubStanderd(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;

		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	  map= storesHandlerService.getInstituteList();
		title = "";

		jsp = "certified_subStandurdjsp";
		jsp += ".jsp";

		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	} 
	   
    @SuppressWarnings("unused")
	public ModelAndView generateSubStanderd(HttpServletRequest request,
			HttpServletResponse response) {


		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		String fileName = null;

		HttpSession session = request.getSession();
		String institute=null;
		
		
		int hospitalId = 0;
		String hospitalName = "";
		session = request.getSession();
		String grnType = "";
		
		Date fromDate=null;
		Date toDate=null;
		requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
	//	requestParameters.put("deptId", session.getAttribute("deptId"));

		try {
			
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				requestParameters.put("fromDate",fromDate);

			}
			
		
		/*	
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				requestParameters.put("toDate",toDate);

			}
			*/
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		requestParameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		HMSUtil.generateReport("items_certified_as_sub_standard", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
	}
     
    
    
 //View NAC Item..VK
    
    public ModelAndView showViewNacItemJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		Integer deptId= 0;

		 HttpSession  session = request.getSession();

	  deptId = (Integer)session.getAttribute("deptId");
	 
	     jsp = VIEW_NAC_ITEM_JSP;
		jsp = jsp + ".jsp";
		title = "View Nac Item";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	} 
    
    
    public ModelAndView viewNacItemJsp(HttpServletRequest request,
			HttpServletResponse response) {
		 
		int deptId = 0;
		int hospitalId = 0;
         String fromDate=null;
    	 String toDate=null;
		session = request.getSession();
		 
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
         
           try {
			
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = request.getParameter(FROM_DATE);
			}
		
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = request.getParameter(TO_DATE);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("hospitalId", hospitalId);
		dataMap.put("fromDate", fromDate);
		dataMap.put("toDate", toDate);

		map = storesHandlerService.viewNacItemJsp(dataMap);
		jsp = "responceNac";
		
		title = "View Nac Item";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
    
    public ModelAndView showSubstandardFreezedItemJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = storesHandlerService.showSubstandardFreezedItemJsp();

		String jsp = "substandardFreezedItem" + ".jsp";
		map.put("contentJsp", jsp);
		return (new ModelAndView("index", "map", map));

	}

	public ModelAndView printSubstandardFreezedItem(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		
		String rptName="";
		String itemId = "";
		byte[] bytes = null;
		String qry = "";
		int hospitalId = 0;
		String hospitalName = "";
		String radioSelect="";
		session = request.getSession();
		try {

			if (request.getParameter("item_id") != null
					&& !(request.getParameter("item_id").equals(""))) {
				itemId = request.getParameter("item_id");
				qry = "  and  mas_store_item.pvms_no='" + itemId + "'";
				requestParameters.put("qry", qry);
			}
			if (request.getParameter("radioSelect") != null 	&& !(request.getParameter("radioSelect").equals(""))) {
				radioSelect=request.getParameter("radioSelect");
			}

			if(radioSelect.equalsIgnoreCase("1")){
				rptName="substandardItem";
			}

			if(radioSelect.equalsIgnoreCase("2")){
				rptName="freezedItem";
			}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer) session.getAttribute("hospitalId");
				hospitalName = storesHandlerService.getHospitalName(hospitalId);
				requestParameters.put("hospitalName", hospitalName);
				requestParameters.put("hospitalId", hospitalId);

			}
			requestParameters.put("qry", qry);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	
		
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport(rptName, requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
		return null;
		
	} 

	public ModelAndView submitChangeCurVisitStatus(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		session = request.getSession();
		int hospitalId=0;
		int deptId=0;
		String deptType="";
		int userId=0;
		int visit = box.getInt(VISIT_ID);
		String issueNo=box.get("issueNo");
		String doctorNameforphmcy=box.get("doctorNameforphmcy");
		box.put("hospitalId", session.getAttribute("hospitalId")); // added by amit das on 16-08-2016
		// map = storesHandlerService.changeCurVisitStatus(box); // commented by amit das on 24-12-2016
		
		// Start -  added by dhananjay 18-10-2016
		if (session.getAttribute("userName") != null)
			userName = (String) session.getAttribute("userName");
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		if (session.getAttribute("deptType") != null)
			deptType = (String) session.getAttribute("deptType");
		if (session.getAttribute("userId") != null)
			userId = Integer.parseInt("" + session.getAttribute("userId"));

		boolean flag = false;
		int visitId = 0;
		String messageTOBeVisibleToTheUser = "";
		Box box1 = HMSUtil.getBox(request);
		box1.put("deptType", deptType);
		box1.put("deptId", deptId);
		box1.put("hospitalId", hospitalId);
		box1.put("userId", userId);
		map = storesHandlerService.pharmacyIssuePatientDrug(box1);
		
		map = storesHandlerService.changeCurVisitStatus(box); // added by amit das on 24-12-2016
		
		int hinId=0;
		if(box.getInt("hinId")!=0){
			hinId=box.getInt("hinId");
		}
		// End
		//map = billingHandlerService.getPharmacySalesDetails(box);

		jsp = "opdPatientIssuePring" + ".jsp";
		
		String message="Data saved Successfully";
		map.put("hospitalId", session.getAttribute("hospitalId"));
		map.put("contentJsp", jsp);
		map.put("issueNo", issueNo);
		map.put("message", message);
		map.put("hinId", hinId);
		map.put("doctorNameforphmcy", doctorNameforphmcy);
		return new ModelAndView("index", "map", map);

	}
	
	
	//------------------ prescription ---------
	
	
	 public ModelAndView showDailyIssue(HttpServletRequest request,
				HttpServletResponse response){

				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> detailsMap = new HashMap<String, Object>();
		        String jsp = "dailyIssueReport";
		        map = storesHandlerService.getDepartmentList();
		        jsp += ".jsp";
		        title = "issueReport";
		        map.put("contentJsp", jsp);
		        map.put("title", title);
		        return new ModelAndView("index", "map", map);

		}
	

public ModelAndView generateDailyIssueSummeryReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	int hospitalId = 0;
	int deptId = 0;
	String hospitalName = "";
	String deptName = "";
	String depart="";
	String query = "";
	String fromDate="";
	//String toDate="";
	String toTime="";
	String fromTime="";
	String uhid="";
	String pvms="";
	String pname="";
	int mobileNo=0;
	session = request.getSession();
	query="";
	String date="";
	String nomen="";
	try {

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("hospitalId", hospitalId);   
			requestParameters.put("HOSP_NAME", hospitalName);
		}

		/*if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			requestParameters.put("deptId", deptId);
		}*/
		if (request.getParameter(FROM_DATE) != null) {
			fromDate = request.getParameter(FROM_DATE);
			requestParameters.put("fromDate", fromDate);
			requestParameters.put("FROM_DATE",HMSUtil.convertStringTypeDateToDateType(fromDate));

		}
		if (request.getParameter("fromTime") != null) {
			fromTime = request.getParameter("fromTime");
			requestParameters.put("fromTime", fromTime);
		}
		if (request.getParameter("toTime") != null) {
			toTime = request.getParameter("toTime");
			requestParameters.put("toTime", toTime);
		}
		
		if (request.getParameter("uhid") != null && !request.getParameter("uhid").equals("")) {
			uhid = request.getParameter("uhid");
			query = query + " and pt.hin_no ='"+ uhid+"'";
			requestParameters.put("uhid", uhid);
		}
		if (request.getParameter("pname") != null && !request.getParameter("pname").equals("")) {
			pname = request.getParameter("pname");
			query = query + " and pt.p_first_name like '%"+pname+"%'";
			requestParameters.put("pname", pname);
		}
		if (request.getParameter("mobileNo") != null && !request.getParameter("mobileNo").equals("") && ! request.getParameter("mobileNo").equals("0")) {
			mobileNo = Integer.parseInt(request.getParameter("mobileNo"));
			query = query + " and pt.mobile_number ="+ mobileNo;
			requestParameters.put("mobileNo", mobileNo);
		}else{
			mobileNo=0;
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		//time = (String) utilMap.get("currentTime");
		//date="28/03/2011";
        requestParameters.put("curr_date", date);
		if (session.getAttribute("deptName") != null) {
			deptName = session.getAttribute("deptName").toString();
			requestParameters.put("deptName", deptName);
		}
		/*if (request.getParameter("item_id") != null &&(request.getParameter("item_id") != null)) {
			query = query + "AND mas_store_item.item_id = '"
					+ request.getParameter("item_id") + "' ";
		}*/

		if (request.getParameter("department") != null  && (!request.getParameter("department").equals("")) && (!request.getParameter("department").equals("0"))) {
			
			query = query + " and store_issue_m.TO_STORE ="+ Integer.parseInt(request.getParameter("department"));
			depart= request.getParameter("department");
			requestParameters.put("depart", Integer.parseInt(depart));
		}

		if (request.getParameter("pvmsNiv") != null &&(!request.getParameter("pvmsNiv").equals(""))) {
			query = query + " AND mas_store_item.pvms_no = '"+ request.getParameter("pvmsNiv") + "' ";
			pvms= request.getParameter("pvmsNiv");
			requestParameters.put("pvms", pvms);
		}

		if (request.getParameter("nomenclature") != null &&(!request.getParameter("nomenclature").equals(""))) {
			nomen =request.getParameter("nomenclature") ;
			String nomenclature[]=nomen.split("\\[");
			query = query + " AND mas_store_item.NOMENCLATURE = '"+ nomenclature[0] + "' ";
			requestParameters.put("nomen", nomenclature[0]);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	String flag = (String)request.getParameter("flag");
	if(flag.equalsIgnoreCase("j")){
		requestParameters.put("reportType", box.getString("reportType"));
		Map<String, Object> dailyIssueItem = storesHandlerService.getDailyIssueItem(requestParameters);
	   map = storesHandlerService.getDepartmentList();
	   List<StoreIssueT> issueTList=new ArrayList<StoreIssueT>();
		if(map.get("issueTList") != null){
			issueTList= (List<StoreIssueT>) map.get("issueTList");
		}
		map.put("dailyIssueItem", dailyIssueItem);
		map.put("issueTList",issueTList);
		map.put("depart", depart);
		map.put("reportType", box.getString("reportType"));
		//map.put("fromDate",fromDate);
		String jsp="dailyIssueReport.jsp";
		map.put("contentJsp", jsp);
	return new ModelAndView("index","map", map);

	}else{
	Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
	requestParameters.put("query", query);
	String reportName = "";
	/*if (box.getString("reportType").equals("summary")) {
		reportName = "daily_issue_summery";
	} else if (box.getString("reportType").equals("detail")) {*/
	/*if(!depart.equals("0") && !depart.equals("")){
		reportName = "Internal_Issue_Report_smc";
		}
	else{
		reportName = "daily_issue_details_summery";
		}*/
	//}
	

	if (flag.equals("p"))
	{
		HMSUtil.generateReport("daily_prescription", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());
	}

	else if(flag.equals("2")) {
				HMSUtil.generateHTMLReport("daily_prescription", requestParameters,
						(Connection) connectionMap.get("con"), response,
						getServletContext());
	}

	



	return null;
	}
}

public ModelAndView getItemForReplace(HttpServletRequest request,
		HttpServletResponse response){
	int issueTId=0;
	if(request.getParameter("issueTId")!=null && !request.getParameter("issueTId").equals("0")){
		issueTId=Integer.parseInt(request.getParameter("issueTId"));
	}
	Map<String,Object>map=new HashMap<String,Object>();
	
	List<StoreIssueT>issueTList=new ArrayList<StoreIssueT>();
	issueTList=storesHandlerService.getIssueList(issueTId);
	map.put("issueTList", issueTList);
	map.put("issueTId",issueTId);
	String jsp="";
	jsp="responseForItemReplacement";	
	 return new ModelAndView(jsp, "map", map);
	 }
	
public ModelAndView  getPopupValueForItemReplacement(HttpServletRequest request,
		HttpServletResponse response){
	int itemId=0;
	if(request.getParameter("itemId")!=null){
		itemId=Integer.parseInt(request.getParameter("itemId"));
	}
	int deptId=0;
	session = request.getSession();
	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
	}
	int hospitalId=0;
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
	}
	int issueTId=0;
	if(request.getParameter("issueTId")!=null){
		issueTId=Integer.parseInt(request.getParameter("issueTId"));
	}
	int qtyIssued=0;
	if(request.getParameter("qtyIssued")!=null){
		qtyIssued=Integer.parseInt(request.getParameter("qtyIssued"));
	}
	// added by amit das on 09-06-2016
	int qtyReturned=0;
	if(request.getParameter("qtyReturned")!=null && !request.getParameter("qtyReturned").equals("")){
		qtyReturned=Integer.parseInt(request.getParameter("qtyReturned"));
	}
	Map<String,Object>map=new HashMap<String,Object>();
	/*map=storesHandlerService.getPopupValueForItemReplacement(itemId,deptId);*/
	Map<String,Object>dataMap=new HashMap<String,Object>();
	dataMap.put("deptId", deptId);
	dataMap.put("itemId", itemId);
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("issueTId", issueTId);
	dataMap.put("qtyIssued", qtyIssued);
	
	try{
	map = storesHandlerService.getBrandMap(dataMap);
	}catch(Exception e){
		e.printStackTrace();
	}
	map.put("issueTId", issueTId);
	map.put("qtyIssued", qtyIssued);
	map.put("qtyReturned", qtyReturned);
	jsp="responseForItemReplacementPopup";	
	 return new ModelAndView(jsp, "map", map);
	 
}
	
public ModelAndView showPatientPrescriptionIssueQtyReportJsp(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	jsp = "patientPrescriptionIssueQtyReport.jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
}


public ModelAndView getVisitList(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	String hinNo = "";
	try {
		
		if (request.getParameter(HIN_NO) != null
				&& !(request.getParameter(HIN_NO).equals(""))) {
			hinNo = request.getParameter(HIN_NO);
			detailsMap.put("hinNo", hinNo);
		}
		List<Object> visitNoList = new ArrayList<Object>();
	
			visitNoList = storesHandlerService.getVisitNoList(detailsMap);
			map.put("visitNoList", visitNoList);
			map.put("hinNo", hinNo);
			jsp = "responseForVisitNoIssueQty";

		
	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView(jsp, "map", map);

}


public ModelAndView getPrescriptionList(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	String hinNo = "";
	int visitNo = 0;
	try {
		
		if (request.getParameter("hinNo") != null
				&& !(request.getParameter("hinNo").equals(""))) {
			hinNo = request.getParameter("hinNo");
			detailsMap.put("hinNo", hinNo);
		}
		if (request.getParameter("visitNo") != null
				&& !(request.getParameter("visitNo").equals(""))) {
			visitNo = Integer.parseInt(request.getParameter("visitNo"));
			detailsMap.put("visitNo", visitNo);
		}
		List<Object> prescriptionList = new ArrayList<Object>();
	
		
			prescriptionList = storesHandlerService.getPrescriptionList(detailsMap);
			map.put("prescriptionList", prescriptionList);
			map.put("hinNo", hinNo);
			map.put("visitNo", visitNo);
			jsp = "responseForPrescription";

		
	} catch (Exception e) {
		e.printStackTrace();
	}
	return new ModelAndView(jsp, "map", map);

}



@SuppressWarnings({ "unchecked", "unchecked" })
public ModelAndView showPatientPrescriptionIssueQtyReport(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int prescriptionId = 0;
	Integer hospitalId=0;
	session=request.getSession();
	String hinNo = "";
	String patient_name="";
	int visiNo=0;
	if (request.getParameter("prescriptionId") != null) {
		prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
	}
	
	if (session.getAttribute(HOSPITAL_ID) != null) {
		hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
	}
			
	if (request.getParameter("hinNo") != null) {
		hinNo = request.getParameter("hinNo");
	}


	
		if (request.getParameter("visitNo") != null
				&& !(request.getParameter("visitNo").equals(""))) {
			visiNo = Integer.parseInt(request.getParameter("visitNo"));
		}
	
	
	if (request.getParameter("prescriptionId") != null && !(request.getParameter("prescriptionId").equals("0"))) {
		prescriptionId = Integer.parseInt(request.getParameter("prescriptionId"));
	}

	Map<String, Object> detailsMap = new HashMap<String, Object>();

	detailsMap = storesHandlerService.getConnectionForReport();
	Map<String, Object> parameters = new HashMap<String, Object>();
	parameters.put("visitNo", visiNo);
	parameters.put("hinNo", hinNo);
	parameters.put("prescriptionId", prescriptionId);
	parameters.put("hospitalId", hospitalId);
	parameters.put("SUBREPORT_DIR",
			getServletContext().getRealPath("/Reports/"));
	try {
	
		HMSUtil.generateReport("PatientPrescriptionFormatIssue", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
	} catch (IllegalStateException e) {
		e.printStackTrace();
	}
	return null;
}
public ModelAndView getDetailsForMedicineIssue(
		HttpServletRequest request, HttpServletResponse response) {
	int issueTId=0;
	if(request.getParameter("issueId")!=null){
		issueTId=Integer.parseInt(request.getParameter("issueId"));
	}
	Map<String,Object>map=new HashMap<String,Object>();
	map=storesHandlerService.getDetailsForMedicineIssue(issueTId);
	
	return new ModelAndView("responseForMedicineIssueDetails", "map", map);
}
public ModelAndView printMeddicineDetails(
		HttpServletRequest request, HttpServletResponse response) {
	int issueTId=0;
	if(request.getParameter("issueId")!=null){
		issueTId=Integer.parseInt(request.getParameter("issueId"));
	}
	Map<String,Object>map=new HashMap<String,Object>();
	map=storesHandlerService.getDetailsForMedicineIssue(issueTId);
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	
		detailsMap = storesHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("issueMId", issueTId);
	
	try {
		String flag="1";
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}
		if (flag.equals("1"))
		{
			HMSUtil.generateReport("MedicineIssueDetails", parameters,
					(Connection) detailsMap.get("con"), response,
					getServletContext());
		}

		else if(flag.equals("2")) {
					HMSUtil.generateHTMLReport("MedicineIssueDetails", parameters,
							(Connection) detailsMap.get("con"), response,
							getServletContext());
		}
		
	} catch (IllegalStateException e) {
		e.printStackTrace();
	}
	return null;
}

public ModelAndView printPurchaseOrder(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	

	int locationId = 0;
	int poId =0;
	

	try {
		
		if(request.getParameter("locationId") != null)
		{
			locationId = Integer.parseInt(request.getParameter("locationId"));
					
		}
		
		if(request.getParameter("poId") != null)
		{
			poId = Integer.parseInt(request.getParameter("poId"));
					
		}

		requestParameters.put("locationId", locationId);
		requestParameters.put("poId", poId);
		requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/Reports/"));
				
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		
		HMSUtil.generateReport("SupplyOrderReport", requestParameters,(Connection) connectionMap.get("con"), response,	getServletContext());
		
		
		

	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}

//View Document, Item Blocked Batchwise -- Kaushal Mishra


public ModelAndView viewUploadDocuments(HttpServletRequest request ,HttpServletResponse response) throws SQLException {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> details = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	int hospitalId = 0;
	int userId = 0;
	
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	if (session.getAttribute("users") != null) {
		Users users = (Users) session.getAttribute("users");
		int userType = users.getUserType();
		box.put("userType", userType);
	}
	if (session.getAttribute("userId") != null) {
		userId = Integer.parseInt(session.getAttribute("userId").toString());
		box.put("userId", userId);
	}
	
	details.put("flag", "n");
	
	map = storesHandlerService.uploadAndViewDocuments(box,details);
	 jsp = "blockedBatchViewDocuments";
	 
	 jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
		}

public ModelAndView printQuotationNotice(HttpServletRequest request,
		HttpServletResponse response) {

	Map<String, Object> requestParameters = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	

	int locationId = 0;
	int quotationId =0;
	

	try {
		
		if(request.getParameter("locationId") != null)
		{
			locationId = Integer.parseInt(request.getParameter("locationId"));
					
		}
		
		if(request.getParameter("quotationId") != null)
		{
			quotationId = Integer.parseInt(request.getParameter("quotationId"));
					
		}

		requestParameters.put("locationId", locationId);
		requestParameters.put("quotationId", quotationId);
		requestParameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/Reports/"));
				
		Map<String, Object> connectionMap = storesHandlerService.getConnectionForReport();
		
		HMSUtil.generateReport("Quotation_Notice", requestParameters,(Connection) connectionMap.get("con"), response,	getServletContext());
		
		
		

	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
}

public ModelAndView getAutoCompleteForItemList(HttpServletRequest request,
		HttpServletResponse response) {

	HttpSession session = request.getSession();
	String itemNameField = "";
	String autoHint = "";
	int counter = 0;
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	try {
		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
	
		detailsMap.put("userName", userName);
		detailsMap.put("autoHint", autoHint);

		map = storesHandlerService.getAutoCompleteForItemList(detailsMap);
	} catch (Exception e) {
		e.printStackTrace();
	}
	jsp = "opd_responseInGrid";
	title = "Reports";
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);
}
public ModelAndView getItemListForOtc(HttpServletRequest request,
		HttpServletResponse response) {
	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session-----

	// --------------------------------------------------------------------------------
	int deptId = 0;
	session = request.getSession();

	String itemNameField = "";
	Box box = HMSUtil.getBox(request);
	int internalIndentId = 0;
	int storeDepartmentId = 0;
	int hospitalId = 0;

	String autoHint = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("requiredField") != null) {
		itemNameField = (request.getParameter("requiredField"));
	}

	
	if (request.getParameter(itemNameField) != null) {
		autoHint = (request.getParameter(itemNameField));
	}
	if (session.getAttribute("users") != null) {
		Users users = (Users) session.getAttribute("users");
		int userType = users.getUserType();
		box.put("userType", userType);
	}
	
	/*
	 * if (request.getParameter("storeDepartmentId") != null &&
	 * !request.getParameter("storeDepartmentId").equals("")) {
	 * storeDepartmentId = Integer.parseInt(request
	 * .getParameter("storeDepartmentId")); box.put("storeDepartmentId",
	 * storeDepartmentId); }
	 */

	if (session.getAttribute("deptId") != null) {
		deptId = (Integer) session.getAttribute("deptId");
		box.put("deptId", deptId);
	}
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	box.put("autoHint", autoHint);
	box.put("deptId", deptId);
	box.put("hospitalId", hospitalId);
	map = storesHandlerService.getItemListForOtc(box);

	jsp = "resultIndent1";
	return new ModelAndView(jsp, "map", map);
}
public void fillItemsForOtcDrugs(HttpServletRequest request,
		HttpServletResponse response) {
	// --------------- Retriving User Name,Hospital Id,Department Id from
	// Session------
	String userName = "";
	int deptId = 0;
	int hospitalId = 0;
	HttpSession session = request.getSession();
	if (session.getAttribute("userName") != null)
		userName = (String) session.getAttribute("userName");
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt(""
				+ session.getAttribute("hospitalId"));
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	// --------------------------------------------------------------------------------
	List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
	List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
	Box box = HMSUtil.getBox(request);
	String itemNameField = "";
	String pvmsNo = "";
	String blockFlag = "";
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (request.getParameter("pvmsNo") != null) {
		pvmsNo = (request.getParameter("pvmsNo"));
	}
	if (session.getAttribute("users") != null) {
		Users users = (Users) session.getAttribute("users");
		int userType = users.getUserType();
		dataMap.put("userType", userType);
	}
	
	
	dataMap.put("pvmsNo", pvmsNo);
	dataMap.put("deptId", deptId);
	dataMap.put("userName", userName);
	dataMap.put("hospitalId", hospitalId);
	map = storesHandlerService.fillItemsForOtcDrugs(dataMap);
	if (map.get("batchList") != null) {
		batchList = (List) map.get("batchList");
	}
	String unit = "";
	if(map.get("unit") != null){
		unit = (String)map.get("unit");
	}
	int itemId = 0;
	if(map.get("itemId") != null){
		itemId = (Integer)map.get("itemId");
	}
	
	StringBuffer sb = new StringBuffer();
	try {
		
		sb.append("<item>");
			
		if(batchList.size()>0){
			sb.append("<batchs>");
			for (StoreItemBatchStock batch : batchList) {
				sb.append("<batch>");
				sb.append("<batchId>" + batch.getId() + "</batchId>");
				sb.append("<batchName>" + batch.getBatchNo()+ "</batchName>");
				sb.append("</batch>");
			}
			sb.append("</batchs>");

		}else{
			
			sb.append("<msg>" + "Item Batch Not Available" + "</msg>");
		}
		sb.append("<unit>" + unit + "</unit>");
		sb.append("<itemId>" + itemId + "</itemId>");
	
			sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");

	} catch (Exception e) {
		e.printStackTrace();
	}
}
public void getclosingStock(HttpServletRequest request,
		HttpServletResponse response) throws ParseException {

	HttpSession session = request.getSession();
	int deptId = 0;
	int batchId = 0;
	int itemId = 0;
	
	StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
	String batchName = "";
	Date expirydate = new Date();
	List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));

	if (request.getParameter("batchId") != null) {
		batchId = Integer.parseInt(request.getParameter("batchId"));
		dataMap.put("batchId", batchId);
	}
	dataMap.put("hospitalId", (Integer)session.getAttribute("hospitalId"));
	if (request.getParameter("itemId") != null) {
		itemId = Integer.parseInt("" + (request.getParameter("itemId")));
	}
	dataMap.put("itemId", itemId);
	dataMap.put("deptId", deptId);
	
	List<StoreItemBatchStock> batchIdList = new ArrayList<StoreItemBatchStock>();
	try {
		map = storesHandlerService.getclosingStock(dataMap);
		if(map.get("batchIdList") != null){
			batchIdList = (List)map.get("batchIdList");
		}
		
	} catch (Exception e) {
		e.printStackTrace();
	}
	
	StringBuffer sb = new StringBuffer();
	try {
		sb.append("<item>");
		if(batchIdList.get(0).getClosingStock()!= null){
		sb.append("<stockAvailable>"+ batchIdList.get(0).getClosingStock().intValue()+ "</stockAvailable>");
	}else{
		sb.append("<stockAvailable>"+ 0 + "</stockAvailable>");
	}
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	} catch (Exception e) {
		e.printStackTrace();
	}
	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}
}

public ModelAndView printStockStatusJsp(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	session = request.getSession();
	map = storesHandlerService.printStockStatusJsp();
	jsp += "stockStatus";
	jsp += ".jsp";
	map.put("contentJsp", jsp);
	map.put("title", title);

	return new ModelAndView("index", "map", map);
}

public ModelAndView stockStatusRpt(
		HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	Date fromDate = null;
	Date toDate = null;
	session = request.getSession();
	String reportName = "";
	String query = new String("");
	List<Users> userList = new ArrayList<Users>();
	int empId = 0;
	int hospitalId;
	try {

		if (request.getParameter(FROM_DATE) != null
				&& !(request.getParameter(FROM_DATE).equals(""))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			requestParameters.put("fromDate", fromDate);
		}
		if (request.getParameter(TO_DATE) != null
				&& !(request.getParameter(TO_DATE).equals(""))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			requestParameters.put("toDate", toDate);
		}
		

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			requestParameters.put("hospitalId", hospitalId);
		}


			if (request.getParameter("itemId") != null
					&& !(request.getParameter("itemId")).equals("0")) {
				query += " and t.item_id = "
						+ Integer.parseInt(request.getParameter("itemId"));

			}
			if (request.getParameter("departmentId") != null
					&& !(request.getParameter("departmentId")).equals("0")) {
				query += " and m.department_id = "
						+ Integer.parseInt(request.getParameter("departmentId"));
			}

		
		requestParameters.put("query", query);
		Map<String, Object> connectionMap = storesHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("stockStatus", requestParameters,
				(Connection) connectionMap.get("con"), response,
				getServletContext());

	} catch (Exception e) {
		e.printStackTrace();
	}

	return null;

}


//added by amit das on 14-06-2016
public ModelAndView showDetailedStockRegisterReportJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapDetail = new HashMap<String, Object>();
	int departmentId = 0;
	int hospitalId = 0;
	session = request.getSession();
	if(session.getAttribute("deptId")!=null){
		departmentId = Integer.parseInt((session.getAttribute("deptId")).toString());
	}
	if(session.getAttribute("hospitalId")!=null){
		hospitalId = Integer.parseInt((session.getAttribute("hospitalId")).toString());
	}
	
	mapDetail.put("departmentId", departmentId);
	mapDetail.put("hospitalId", hospitalId);
	mapDetail.put("departmentId", departmentId);
	int itemId=0;
	if (request.getParameter(ITEM_ID) != null
			&& !(request.getParameter(ITEM_ID).equals(""))) {
		itemId =Integer.parseInt(request.getParameter(ITEM_ID));
		mapDetail.put("itemId", itemId);
	}
	
	
	map = storesHandlerService.showDetailedStockRegisterReportJsp(mapDetail);

	jsp = "stock_register";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);

}

//added by amit das on 14-06-2016
public ModelAndView printDetailedStockRegisterReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
	Box box = HMSUtil.getBox(request);
	session = request.getSession();
	Date fromDate = new Date();
	Date toDate = new Date();
	try {

		if (request.getParameter(FROM_DATE) != null) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			requestParameters.put("fromDate",fromDate);
		}
		if (request.getParameter(TO_DATE) != null) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			requestParameters.put("toDate",toDate);
		}

		requestParameters.put("deptId", (Integer) session
			.getAttribute("deptId"));
		int hospitalId = 0;
		hospitalId = Integer.parseInt(request.getSession().getAttribute(
				HOSPITAL_ID).toString());
		requestParameters.put("hospitalId",hospitalId);
		int itemId=0;
		if (request.getParameter(ITEM_ID) != null
				&& !(request.getParameter(ITEM_ID).equals(""))) {
			itemId =Integer.parseInt(request.getParameter(ITEM_ID));
			requestParameters.put("itemId", itemId);
			}
	
		map=storesHandlerService.printDetailedStockRegisterCentralStoreReport(requestParameters);
	
		detailsMap = storesHandlerService.getConnectionForReport();
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("deptName", map.get("deptName"));
		parameters.put("hospitalName", map.get("hospitalName"));
		parameters.put("itemName", map.get("itemName"));
		parameters.put("SUBREPORT_DIR",
					getServletContext().getRealPath("/Reports/"));
			
			HMSUtil.generateReport("StockRegister", parameters,
					(Connection) detailsMap.get("con"), response,
					getServletContext());
		

	}catch (Exception e) {
		e.printStackTrace();
		// TODO: handle exception
	}
	return null;
}


//added by amit das on 14-06-2016
public ModelAndView showDetailedSubStockRegisterReportJsp(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapDetail = new HashMap<String, Object>();
	int departmentId = 0;
	int hospitalId = 0;
	session = request.getSession();
	if(session.getAttribute("deptId")!=null){
		departmentId = Integer.parseInt((session.getAttribute("deptId")).toString());
	}
	if(session.getAttribute("hospitalId")!=null){
		hospitalId = Integer.parseInt((session.getAttribute("hospitalId")).toString());
	}
	
	mapDetail.put("departmentId", departmentId);
	mapDetail.put("hospitalId", hospitalId);
	int itemId=0;
	if (request.getParameter(ITEM_ID) != null
			&& !(request.getParameter(ITEM_ID).equals(""))) {
		itemId =Integer.parseInt(request.getParameter(ITEM_ID));
		mapDetail.put("itemId", itemId);
	}
	
	
	map = storesHandlerService.showDetailedStockRegisterReportJsp(mapDetail);

	jsp = "sub_stock_register";
	jsp = jsp + ".jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);

}


//added by Amit Das on 14-10-2016
	public ModelAndView getItemListForAutoCompleteForStockRegister(HttpServletRequest request,
				HttpServletResponse response) {
			HttpSession session = request.getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			String itemNameField = "";
			String autoHint = "";

			int departmentId = 0;
			int hospitalId = 0;
			try {
				if(session.getAttribute("deptId")!=null){
					departmentId = Integer.parseInt((session.getAttribute("deptId")).toString());
				}
				if(session.getAttribute("hospitalId")!=null){
					hospitalId = Integer.parseInt((session.getAttribute("hospitalId")).toString());
				}
				
				map.put("departmentId", departmentId);
				map.put("hospitalId", hospitalId);
				
				if (request.getParameter("requiredField") != null) {
					itemNameField = (request.getParameter("requiredField"));
				}
				if (request.getParameter(itemNameField) != null) {
					autoHint = (request.getParameter(itemNameField));
				}
				
				map.put("autoHint", autoHint);
				map = storesHandlerService.getItemListForAutoCompleteForStockRegister(map);
			} catch (Exception e) {
				e.printStackTrace();
			}
			jsp = STOCK_REGISTER_RESPONSE_FOR_ITEMS_AUTOCOMPLETE_JSP;

			return new ModelAndView(jsp, "map", map);
		}



//added by amit das on 14-06-2016
public ModelAndView printDetailedSubStockRegisterReport(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> detailsMap = new HashMap<String, Object>();
	List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
	Box box = HMSUtil.getBox(request);
	session = request.getSession();
	Date fromDate = new Date();
	Date toDate = new Date();
	try {

		if (request.getParameter(FROM_DATE) != null) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(FROM_DATE));
			requestParameters.put("fromDate",fromDate);
		}
		if (request.getParameter(TO_DATE) != null) {
			toDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(TO_DATE));
			requestParameters.put("toDate",toDate);
		}

		requestParameters.put("deptId", (Integer) session
			.getAttribute("deptId"));
		int hospitalId = 0;
		hospitalId = Integer.parseInt(request.getSession().getAttribute(
				HOSPITAL_ID).toString());
		requestParameters.put("hospitalId",hospitalId);
		int itemId=0;
		if (request.getParameter(ITEM_ID) != null
				&& !(request.getParameter(ITEM_ID).equals(""))) {
			String itemNameAndId = request.getParameter(ITEM_ID);
			itemId =Integer.parseInt(itemNameAndId.substring(itemNameAndId.indexOf("[")+1, itemNameAndId.lastIndexOf("]")));
			requestParameters.put("itemId", itemId);
			}
	
		map=storesHandlerService.printDetailedStockRegisterCentralStoreReport(requestParameters);
	
		detailsMap = storesHandlerService.getConnectionForReport();
		parameters.put("fromDate", fromDate);
		parameters.put("toDate", toDate);
		parameters.put("deptName", map.get("deptName"));
		parameters.put("hospitalName", map.get("hospitalName"));
		parameters.put("itemName", map.get("itemName"));

		// added by amit das on 14-10-2016
		parameters.put("deptId", (Integer) session
			.getAttribute("deptId"));
		parameters.put("hospitalId",hospitalId);
		
		parameters.put("SUBREPORT_DIR",
					getServletContext().getRealPath("/Reports/"));
			
			HMSUtil.generateReport("SubStockRegister", parameters,
					(Connection) detailsMap.get("con"), response,
					getServletContext());
		

	}catch (Exception e) {
		e.printStackTrace();
		// TODO: handle exception
	}
	return null;
}

public String savestocktoserverside(HttpServletRequest request,
		HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();  
	//int hospitaId=(Integer)session.getAttribute(HOSPITAL_ID);
	Box box=HMSUtil.getBox(request);
	//map.put("hospitalId", hospitaId);
	map = storesHandlerService.submitDepartmentIssueWithoutIndent(box);
	//map=registrationHandlerService.saveClientRegisterPatientToServer(box);
	if(map.get("success")!=null){
	return "success";
	}else{
	return "faliure";
	} 
	
}
public String medicineDispencingToLeanServer(HttpServletRequest request,
		HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();  
	//int hospitaId=(Integer)session.getAttribute(HOSPITAL_ID);
	Box box=HMSUtil.getBox(request);
	//map.put("hospitalId", hospitaId);
	map = storesHandlerService.medicineDispencingToServer(box);
	//map=registrationHandlerService.saveClientRegisterPatientToServer(box);
	if(map.get("success")!=null){
	return "success";
	}else{
	return "faliure";
	} 
	
}

public String medicineDispencingToCentralServer(HttpServletRequest request,
		HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();  
	//int hospitaId=(Integer)session.getAttribute(HOSPITAL_ID);
	Box box=HMSUtil.getBox(request);
	//map.put("hospitalId", hospitaId);
	map = storesHandlerService.medicineDispencingToServer(box);
	//map=registrationHandlerService.saveClientRegisterPatientToServer(box);
	if(map.get("success")!=null){
		return "success";
	}else{
	return "faliure";
	} 
	
}
/*public ModelAndView displaySlowMovingDrugsJsp(HttpServletRequest request,HttpServletResponse response) {
	
	Map<String, Object> map = new HashMap<String, Object>(); 
	int departmentId = 0;
	int hospitalId = 0;
	HttpSession session = request.getSession();
	Box box = HMSUtil.getBox(request);
	if(session.getAttribute("deptId")!=null){
		departmentId = Integer.parseInt((session.getAttribute("deptId")).toString());
		box.put("departmentId", departmentId);
	}
	if(session.getAttribute("hospitalId")!=null){
		hospitalId = Integer.parseInt((session.getAttribute("hospitalId")).toString());
		box.put("hospitalId", hospitalId);
	}
	map = storesHandlerService.displaySlowMovingDrugsJsp(box);
	//jsp = "responseForSlowMovingDrugs";
	String jsp = "moduleDefault";
	
	return new ModelAndView(jsp, "map", map);
    

}*/
	public void addPHColums(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>(); 
		Integer empId = 0;
		Integer hospitalId=0;
		String flag=null;
		String item=null;
		try{
			PrintWriter out=response.getWriter();
			HttpSession session = request.getSession();
			if(session!=null){
				empId=(Integer)session.getAttribute("empId");
				map.put("empId", empId);
			}
			
			if(session.getAttribute("hospitalId")!=null){
				hospitalId =(Integer)session.getAttribute("hospitalId");
				map.put("hospitalId", hospitalId);
			}
			
			if(request.getParameter("flag") != null) {
				flag=request.getParameter("flag");
				map.put("flag", flag);
			}
			if(request.getParameter("item") != null) {
				item=request.getParameter("item");
				if(item!=null && !item.equals("")){
					int startIndex=item.indexOf("[");
					int endIndex=item.indexOf("]");
					String pvsmno=item.substring(++startIndex, endIndex);
					map.put("pvsmno", pvsmno);
				}
			}
			map = storesHandlerService.addPHColums(map);
			if(map.get("mapflag")!=null && (Boolean)map.get("mapflag")){
				List<MasEmployee>promoters=(List<MasEmployee>)map.get("promoters");
				if(promoters!=null){
					for(MasEmployee me:promoters){
						out.write("<option value="+me.getId()+">"+me.getFirstName()+" "+me.getMiddleName()+" "+me.getLastName()+"</option>");
					}
				}
				List<MasHospital>hospitals=(List<MasHospital>)map.get("hospitals");
				if(hospitals!=null){
					for(MasHospital mh:hospitals){
						if(mh.getId()==hospitalId){
							out.write("<option selected='selected' value="+mh.getId()+">"+mh.getHospitalName()+"</option>");
						}else{
							out.write("<option value="+mh.getId()+">"+mh.getHospitalName()+"</option>");
						}
						
					}
				}
				
			}else{
				out.write("No Element");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void getHospitalList(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>(); 
		Integer hospitalId=0;
		try{
			PrintWriter out=response.getWriter();
			HttpSession session = request.getSession();
			if(session.getAttribute("hospitalId")!=null){
				hospitalId =(Integer)session.getAttribute("hospitalId");
				map.put("hospitalId", hospitalId);
			}
			map = storesHandlerService.getHospitalList(map);
			List<MasHospital>hospitals=(List<MasHospital>)map.get("hospitals");
			if(hospitals!=null){
				for(MasHospital mh:hospitals){
					if(mh.getId().equals(hospitalId)){
						out.write("<option selected='selected' value="+mh.getId()+">"+mh.getHospitalName()+"</option>");
					}else{
						out.write("<option value="+mh.getId()+">"+mh.getHospitalName()+"</option>");
					}
				}
			}
			}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	//added by govind 30-09-2016
	public ModelAndView searchPatientReturnDrug(HttpServletRequest request,
			HttpServletResponse response) {  
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int deptId = 0;
		int page = 1;
		 if(request.getParameter("page") != null){
	            page = Integer.parseInt(request.getParameter("page"));
	           
		 }
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		int hospitalId = 0;
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
		}
		String itemNameField = "";
		Box box = HMSUtil.getBox(request);

		if (request.getParameter("requiredField") != null) {
			itemNameField = (request.getParameter("requiredField"));
		}
		if (request.getParameter(itemNameField) != null) {
			autoHint = (request.getParameter(itemNameField));
		}
		box.put("deptId", deptId);
		box.put("autoHint", autoHint);
		box.put("hospitalId", hospitalId);
		box.put("page", page);
		
		map = storesHandlerService.getsearchPatientReturnDrug(box);
		jsp = "returnDrugPatientSearch" + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);

	}
	
	//added by govind 15-10-2016
	
	public ModelAndView searchdirectDispensing(HttpServletRequest request,
			HttpServletResponse response) {
		System.out.println("searchdirectDispensing ");
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String deptType = "";
		int hospitalId = 1;
		HttpSession session = request.getSession();
		box.put(DEPT_ID, session.getAttribute(DEPT_ID));
		box.put(HOSPITAL_ID, session.getAttribute(HOSPITAL_ID));
		box.put(USER_ID, session.getAttribute(USER_ID));
		if (session.getAttribute("deptType") != null)
			deptType = "" + session.getAttribute("deptType");

		mapForDS.put("deptType", deptType);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = (Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);
		
		// Users users = (Users) session.getAttribute(RequestConstants.USERS);
		map = storesHandlerService.searchDirectDispensing(box);
		jsp = "directDispensing" + ".jsp";
		map.put("mapForDS", mapForDS);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	//added by govind 19-10-2016
	
	public void getBatchNO(HttpServletRequest request,
			HttpServletResponse response)throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		box.put(DEPT_ID, session.getAttribute(DEPT_ID));
		box.put(HOSPITAL_ID, session.getAttribute(HOSPITAL_ID));
		
		map = storesHandlerService.getItemUnitDetail(box);

		List<StoreItemBatchStock> batchList=new ArrayList<StoreItemBatchStock>();
		if(null !=map.get("masItemBatchStockValue")){
			batchList=(List<StoreItemBatchStock>)map.get("masItemBatchStockValue");
			
		}
		StringBuffer sb = new StringBuffer();
		
		sb.append("<item>");
		sb.append("<id>" + 0 + "</id>");
		sb.append("<name>" + "select" + "</name>");
		
		sb.append("</item>");
		
		if(null !=batchList && batchList.size()>0){
			for (StoreItemBatchStock bat : batchList) {
			sb.append("<item>");
			sb.append("<id>" + bat.getId() + "</id>");
			sb.append("<name>" + bat.getBatchNo() + "</name>");
			
			sb.append("</item>");
		
			}
		}
		else{
			sb.append("<item>");
			sb.append("<id>" + "" + "</id>");
			sb.append("<name>" + "" + "</name>");
			
			sb.append("</item>");
		}
		
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
	
	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");
	
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	}
	
	public void getItemStockValue(HttpServletRequest request,
			HttpServletResponse response)throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		box.put(DEPT_ID, session.getAttribute(DEPT_ID));
		box.put(HOSPITAL_ID, session.getAttribute(HOSPITAL_ID));
				
		map = storesHandlerService.getItemStockValue(box);

		List<StoreItemBatchStock> batchList=new ArrayList<StoreItemBatchStock>();
		if(null !=map.get("masItemBatchStockValue")){
			batchList=(List<StoreItemBatchStock>)map.get("masItemBatchStockValue");
			
		}
	
		
	    String stock="";		
		if(null !=batchList && batchList.size()>0){
			for (StoreItemBatchStock bat : batchList) {
				stock=bat.getClosingStock().toString()+","+bat.getId().toString();
		
			}
		}	
		
		response.getWriter().write(stock);
	}

	//added govind 19-10-2016 
	public ModelAndView printDirectDispencing(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> parameters = new HashMap<String, Object>();
		String query = "";
		String issueMId = "";  //Added by Amit Das on 19-02-2016
		String serviceNo = "";
		String hinId = "";
		int hospitalId = 0;
		int deptId = 0;
		int visitId=0;
		String issueNo = "";
		HttpSession session = request.getSession();
			
			if (request.getParameter("hinId") != null
					&& (!request.getParameter("hinId").equals(""))) {
				hinId =request.getParameter("hinId");
				parameters.put("hinId", Integer.parseInt(hinId.toString()));
			}
		
			if (session.getAttribute("hospitalId") != null
					&& (!"".equals(session.getAttribute("hospitalId")))) {
				hospitalId = Integer.parseInt(session.getAttribute("hospitalId").toString());
				parameters.put("hospitalId", hospitalId);
			}
		
			if (request.getParameter("issueId") != null
					&& (!request.getParameter("issueId").equals(""))) {
				issueMId = request.getParameter("issueId");
				parameters.put("issueMId", Integer.parseInt(issueMId.toString()));
			}
			if (request.getParameter("visitId") != null
					&& (!request.getParameter("visitId").equals(""))) {
				visitId =Integer.parseInt(request.getParameter("visitId"));
				parameters.put("visitId", visitId);
			}

			if (session.getAttribute("deptId") != null)
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			
			String hinNo="";
			if (request.getParameter("hinNo") != null
					&& (!request.getParameter("hinNo").equals(""))) {
				hinNo =request.getParameter("hinNo");
				parameters.put("hinNo", hinNo);
			}
			int departmentId=0;
			if (request.getParameter("departmentId") != null
					&& (!request.getParameter("departmentId").equals(""))) {
				departmentId =Integer.parseInt(request.getParameter("departmentId"));
				parameters.put("departmentId", departmentId);
			}
			// Added by Arbind on 21-04-2017
			if (request.getParameter("issueNo") != null
					&& (!request.getParameter("issueNo").equals(""))) {
				issueNo = request.getParameter("issueNo");
				parameters.put("issueNo", issueNo);
			}
			System.out.println("hospitalId "+hospitalId+" issueMId "+issueMId+" visitId "+visitId+" hinId "+hinId+" departmentId "+departmentId);

			//added by govind 29-03-2017
			parameters.put("SUBREPORT_DIR",getServletContext().getRealPath("/Reports/"));
			
			parameters.put("timeImage", getServletContext().getRealPath("/jsp/images/Times.jpg"));
			
			parameters.put("IMAGE_DIR_LEFT", getServletContext().getRealPath("/jsp/images/malyalam_report_text.jpg"));
			//added by govind 29-03-2017 end
				
		detailsMap = storesHandlerService.getConnectionForReport();
		String paperBased="N";
   	 if(null !=request.getParameter("paperBased")){
   		paperBased=request.getParameter("paperBased");
   	 }
	try {
		if(paperBased.equalsIgnoreCase("Y")){
		HMSUtil.generateReport("DirectDispensingPharmcy", parameters,
				(Connection) detailsMap.get("con"), response,
				getServletContext());
		}else{
		HMSUtil.generateReport("PatientPrescriptionFormatIssue", parameters,(Connection) detailsMap.get("con"), response,getServletContext());//added by govind 29-03-2017
		}
	} catch (IllegalStateException e) {
		e.printStackTrace();
	}
		return null;
	}

	public ModelAndView drugsStockPosition(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		jsp = "drugStockPosition";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView generateDrugsStockPosition(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> datamap = new HashMap<String, Object>();
		String pvmsNo = "";
		String brand = "";
		int itemId = 0;
		int hospitalId = 0;
		String hospitalName = "";
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer) session.getAttribute("hospitalId");
			hospitalName = storesHandlerService.getHospitalName(hospitalId);
			requestParameters.put("HOSP_NAME", hospitalName);
		}
		map = storesHandlerService.getConnectionForReport();
		pvmsNo = box.getString("pvmsNo");


		datamap = storesHandlerService.getMasItemId(box);
		itemId = (Integer) datamap.get("itemId");
		map.put("item_id", itemId);
		datamap.put("hospitalId", hospitalId); // add hospitalId by javed khan

		Map<String, Object> drugStockItem = storesHandlerService.getdrugStock(datamap);
		map.put("drugStockItem", drugStockItem);
		title = "Drugs Stock Position In SMC Jsp Report";
		jsp = "drugStockPosition";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
		
	}
	
	public ModelAndView showInstituteWiseStock(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "instituteWiseStockPosition";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView getInstituteWiseStock(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		
		map = storesHandlerService.getInstituteWiseStock(box);
		jsp = "instituteWiseStockPosition";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView showKMSCLStockUploadJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "kmsclStockUpload";
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView importKMSCLStock(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		MultipartFormDataRequest mrequest = null;
		String userName = "";
		String flag1 = "import";
		boolean succesfullyAdded = false;
		String msg = "";

		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = (MultipartFormDataRequest) new MultipartFormDataRequest(
						request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		/*List<String> mimeType = new ArrayList<String>();
		mimeType.add("dot");
		mimeType.add("docx");
		mimeType.add("dotx");
		mimeType.add("docm");
		mimeType.add("dotm");
		mimeType.add("xls");
		mimeType.add("xlt");
		mimeType.add("xla");
		mimeType.add("xlsx");
		mimeType.add("xltx");
		mimeType.add("xlsm");
		mimeType.add("xltm");
		mimeType.add("xlam");
		mimeType.add("xlsb");
		mimeType.add("ppt");
		mimeType.add("pot");
		mimeType.add("pps");
		mimeType.add("ppa");
		mimeType.add("pptx");
		mimeType.add("potx");
		mimeType.add("ppsx");
		mimeType.add("ppam");
		mimeType.add("pptm");
		mimeType.add("potm");
		mimeType.add("ppsm");
		mimeType.add("pdf");
		mimeType.add("doc");

		Enumeration en = mrequest.getFiles().elements();
		UploadFile uf;
		while (en.hasMoreElements()) {
			String ext = "";
			uf = (UploadFile) en.nextElement();
			try {
				MagicMatch mm = Magic.getMagicMatch(uf.getData());
				ext = mm.getExtension();
				System.out.println("ext--"+ext);
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (mimeType.indexOf(ext.toLowerCase()) == -1) {
				throw new SecurityException();
			}
		}*/

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		int userId = 0;
		if (session.getAttribute("userId") != null) {
			userId = (Integer) session.getAttribute("userId");
		}
		String uploadURL = getServletContext().getRealPath("/stores/");
		String fileName = box.getString("filename");
		String whiteList = "*.xls";
		List fileUploadedList = null;

		List<String> itemCodeList = new ArrayList<String>();
		List<String> supplierList = new ArrayList<String>();
		List<String> batch1 = new ArrayList<String>();
		List<String> rateList = new ArrayList<String>();
		List<String> manufactureDate1 = new ArrayList<String>();
		List<String> expiryDate1 = new ArrayList<String>();
		List<String> qty1 = new ArrayList<String>();
		
		box.put("uploadURL", uploadURL);
		box.put("filename", box.getString("filename"));

		try {

			fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL,
					whiteList, box.getString("filename"));
			Boolean fileUploaded = false;
			if (fileUploadedList != null && fileUploadedList.size() != 0) {
				fileUploaded = (Boolean) fileUploadedList.get(0);
			}
			jxl.WorkbookSettings ws = null;
			jxl.Workbook workbook = null;
			jxl.Sheet s = null;
			Cell rowData[] = null;
			int rowCount = '0';
			int columnCount = '0';
			DateCell dc = null;
			int totalSheet = 0;

			try {
				ws = new WorkbookSettings();
				ws.setLocale(new Locale("en", "EN"));
				workbook = jxl.Workbook.getWorkbook(
						(new FileInputStream(box.getString("uploadURL") + "/"
								+ box.getString("filename"))), ws);

				totalSheet = workbook.getNumberOfSheets();

				// Getting Default Sheet i.e. 0
				s = workbook.getSheet(0);

				// Reading Individual Cell
				// Total Total No Of Rows in Sheet, will return you no of rows
				// that are occupied with some data
				rowCount = s.getRows();
				// Total Total No Of Columns in Sheet

				columnCount = s.getColumns();
				String itemCode = "";
				
			

				for (int i = 5; i < rowCount; i++) {
					// Get Individual Row
					rowData = s.getRow(i);
					if (rowData[0].getContents().length() != 0) { // the first
																	// date
																	// column
																	// must not
																	// null

						for (int j = 0; j < columnCount; j++) {
							switch (j) {

							case 0:
								try {
									if (rowData[j].getContents().length() != 0) {
										if (!rowData[j].getContents()
												.toString().equals("")) {
											
										} else {
											
										}
									} else {
										
									}
								} catch (Exception e) {
									e.printStackTrace();
									
								}
								break;

							case 1:
								try {
									if (rowData[j].getContents().length() != 0) {
										itemCodeList
												.add(rowData[j].getContents());
									} else {
										itemCodeList.add("");
									}
								} catch (Exception e) {
									itemCodeList.add("");
								}
								break;
							case 2:
								try {
									if (rowData[j].getContents().length() != 0) {
									
									} else {
										
									}
								} catch (Exception e) {
									
								}
								break;

							case 3:
								try {
									if (rowData[j].getContents().length() != 0) {
										
										supplierList.add(rowData[j]
												.getContents().toString());
									} else {
										supplierList.add("");
									}
								} catch (Exception e) {
									supplierList.add("");
								}
								break;
							case 4:
								try {
									if (rowData[j].getContents().length() != 0) {

										batch1.add(rowData[j].getContents());

									} else {
										batch1.add("");
									}
								} catch (Exception e) {
									batch1.add("");
								}
								break;
							case 5:
								try {
									if (rowData[j].getContents().length() != 0) {

										rateList.add(rowData[j].getContents());
									
									} else {
										rateList.add("");
									}
								} catch (Exception e) {
									rateList.add("");
								}
								break;
							case 6:
								try {
									if (rowData[j].getContents().length() != 0) {
										
										manufactureDate1.add(rowData[j].getContents());
										

									} else {
										manufactureDate1.add("");
									}
								} catch (Exception e) {
									manufactureDate1.add("");
								}
								break;
							case 7:
								try {
									if (rowData[j].getContents().length() != 0) {

										expiryDate1.add(rowData[j].getContents());

									} else {
										expiryDate1.add("");
									}
								} catch (Exception e) {
									expiryDate1.add("");
								}
								break;
							case 8:
								try {
									if (rowData[j].getContents().length() != 0) {

										qty1.add((rowData[j]
												.getContents()).toString());

									} else {
										qty1.add("");
									}
								} catch (Exception e) {
									qty1.add("");
								}
								break;
							

							}
						}
					}
				}
				workbook.close();

				utilMap.put("itemCodeList", itemCodeList);
				utilMap.put("supplierList", supplierList);
				utilMap.put("batch1", batch1);
				utilMap.put("rateList", rateList);
				utilMap.put("manufactureDate1", manufactureDate1);
				utilMap.put("expiryDate1", expiryDate1);
				utilMap.put("qty1", qty1);
				
				utilMap.put("deptId", deptId);
				utilMap.put("hospitalId", hospitalId);
				utilMap.put("userName", userName);
				utilMap.put("userId", userId);
				box.put("deptId", deptId);
				box.put("userId", userId);
				box.put("hospitalId", hospitalId);
				box.put("numOfRows", 15);
				box.put("pageCount", 10);
				box.put("currPage", 1);

				map = storesHandlerService.importKMSCLStock(utilMap);

			} catch (IOException e) {
				e.printStackTrace();

			}

		} catch (Exception ioe) {
			ioe.printStackTrace();
		}
		jsp = "kmsclStockUpload";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}
	
	public ModelAndView showCtJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		Box box = HMSUtil.getBox(request);
		box.put("hospitalId", hospitalId);
		map = storesHandlerService.showCtJsp(box);
		jsp = "ct";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView getPatientDetailsForCT(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		String uhidNo = box.getString("uhidNo");
		box.put("uhidNo", uhidNo);
		map = storesHandlerService.getPatientDetailsForCT(box);
		
		String jsp = "responseForCtPatientDetails";
		//String jsp = "responseForDirectVisitEntry";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView saveCtDetails(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int departmentId = (Integer)session.getAttribute("deptId");
		String hospitalCode = (String)session.getAttribute("hospitalCode");
		Users user = (Users) session.getAttribute("users");
		
		Integer userId = user.getId();
		box.put("hospitalId", hospitalId);
		box.put("departmentId", departmentId);
		box.put("userId", userId);
		box.put("userName", user.getUserName());
		box.put("hospitalCode", hospitalCode);
		map = storesHandlerService.saveCtDetails(box);
		boolean flag = false;
		if(map.get("flag")!=null){
			flag = (Boolean)map.get("flag");
		}
		String message = "";
		if(flag){
			message = "Data saved successfully.";
		}else{
			message = "Try again.";
		}
		map.put("message", message);
		jsp = "ct";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	
	public String generatePrecriptionNo(int hinId) {
		String precriptionNo = "";
		try {

			precriptionNo = storesHandlerService.generatePrecriptionNo(hinId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return precriptionNo;
	}
}
