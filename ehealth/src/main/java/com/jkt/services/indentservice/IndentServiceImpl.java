
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.jkt.services.indentservice;

import java.util.List;
import java.util.logging.Logger;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

import jkt.hms.masters.business.StoreInternalIndentT;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

import com.jkt.entities.indent.BusinessFaultType;
import com.jkt.entities.indent.IndentListRequestType;
import com.jkt.entities.indent.IndentListResponseType;
import com.jkt.entities.indent.IndentListType;
import com.jkt.entities.indent.ItemType;
import com.jkt.service.dao.IndentServiceDao;
import com.sun.org.apache.bcel.internal.generic.GETSTATIC;


/**
 * This class was generated by Apache CXF 3.0.2
 * 2015-10-26T12:01:14.934+05:30
 * Generated source version: 3.0.2
 * 
 */

@javax.jws.WebService(
                      serviceName = "IndentService",
                      portName = "IndentService",
                      targetNamespace = "http://www.jkt.com/services/IndentService/",
                      wsdlLocation = "./././hms/jkt/service/IndentService.wsdl",
                      endpointInterface = "com.jkt.services.indentservice.IIndentService")
                      
public class IndentServiceImpl extends SpringBeanAutowiringSupport implements IIndentService {

    private static final Logger LOG = Logger.getLogger(IndentServiceImpl.class.getName());

     /* @Autowired
      private IndentServiceDao indentServiceDao;*/
      @Autowired
	    private SessionFactory sessionFactory;
      
    public SessionFactory getSessionFactory() {
		return sessionFactory;
	}
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
	  @Transactional(value="transactionManager")
	public com.jkt.entities.indent.IndentListResponseType getAllItemOfindent(com.jkt.entities.indent.IndentListRequestType parameters) throws BusinessException    { 
        LOG.info("Executing operation getAllItemOfindent");
        //System.out.println(parameters.getIndentNo());
        //System.out.println(parameters.getInstituteId());
        //null != parameters && 
        //local variables
          List<StoreInternalIndentT> indentTs=null;
          ItemType itemType=null;
          IndentListType indentListType=null;
          IndentListRequestType indentListRequestType=null;
          IndentListResponseType indentListResponseType=null;
          int hospitalId=0;
          hospitalId=Integer.parseInt(parameters.getInstituteId());
        try {
        	if(parameters.getIndentNo()!=null  && parameters.getInstituteId()!=null){
                
        		//invoke dao to get list
        		//indentTs=indentServiceDao.getAllItem(parameters.getIndentNo(), parameters.getInstituteId());
               // session = (Session) getSession();
        		indentTs = sessionFactory.getCurrentSession().createCriteria(StoreInternalIndentT.class,"ind").createAlias("ind.Internal","internal").createAlias("internal.Hospital", "hos")
        				   .add(Restrictions.eq("internal.DemandNo", parameters.getIndentNo()))
        				   .add(Restrictions.eq("hos.Id", hospitalId))
        				.list();
        		//System.out.println(indentTs.size());
        		
        		
        		//create indentList for set response
        		indentListResponseType=new IndentListResponseType();
        		//indentListResponseType.setIndent
        		indentListType=new IndentListType();
        		//iterate for item
        		for(StoreInternalIndentT indentT:indentTs)
        		{
        			//set value
        			itemType=new ItemType();
        			itemType.setKmclCode(indentT.getItem()!=null ? indentT.getItem().getKmsclItemCode():"");
        			itemType.setUnit(indentT.getItem()!=null ? indentT.getItem().getItemConversion().getItemUnitName():"");
        			itemType.setQuantityRecommendedByDME(indentT.getRequiredQty()!=null ?indentT.getRequiredQty().toString():"");
        			itemType.setQuantityApprovedByDHS(indentT.getQtyIssued()!=null ? indentT.getQtyIssued().toString():"");
        			itemType.setQuantity(indentT.getQtyRequest()!=null ? indentT.getQtyRequest().toString():"");
        			itemType.setAnnualIndentId(indentT.getInternal()!=null ? indentT.getInternal().getHospital().getHospitalCode().toString():"");
        			indentListType.getItemType().add(itemType);
        		}
        		//finally set the value in response
        		indentListResponseType.setIndentListType(indentListType);
        	
        	}
        }
          catch(Exception ex){
            // dummy setting for business exception, we can set more meaningful error depending on the business requirements
        	  BusinessFaultType  businessFaultType = new BusinessFaultType();
            businessFaultType.setErrorCode(16359);
            businessFaultType.setErrorMessage("Error in invoking Indent Service " + ex.getMessage());
            businessFaultType.setErrorDescription(ex.getStackTrace().toString());
        }
        finally{
            // close resources, if any
        }
        return indentListResponseType;
    }

}
