/**
 * Copyright 2008 JK Technosoft Ltd. All rights reserved.

 * Use is subject to license terms.
 * Class PurchaseOrderController.java ï¿½
 * Tables Used: store_po_detail, store_po_header
 * Purpose of the class - For Local Purchase (LP) of PVMS and NIV Items
 * @author  Deepti Tevatia
 * Create Date: 4th Feb,2008
 * Revision Date:      		Revision By:
 * @version 1.0
 * @see PurchaseOrderHandlerService.java, PurchaseOrderHandlerServiceImpl.java, PurchaseOrderDataService.java, PurchaseOrderDataServiceImpl.java
 **/
package jkt.hms.opd.controller;
import static jkt.hms.util.RequestConstants.*;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.PosixFilePermission;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.imageio.ImageIO;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadException;
import javazoom.upload.UploadFile;
import jkt.hms.ipd.handler.IPDHandlerService;
import jkt.hms.lab.handler.LabHandlerService;
import jkt.hms.masters.business.DgOrderhd;
import jkt.hms.masters.business.DgResultEntryDetail;
import jkt.hms.masters.business.DgResultEntryHeader;
import jkt.hms.masters.business.EmpScMapping;
import jkt.hms.masters.business.ExpiryDetails;
import jkt.hms.masters.business.ExternalAdmissionDetails;
import jkt.hms.masters.business.ExternalLabReportCommon;
import jkt.hms.masters.business.Ft;
import jkt.hms.masters.business.HospitalDoctorUnitM;
import jkt.hms.masters.business.HospitalDoctorUnitT;
import jkt.hms.masters.business.HospitalParameters;
import jkt.hms.masters.business.Inpatient;
import jkt.hms.masters.business.MasBed;
import jkt.hms.masters.business.MasChargeCode;
import jkt.hms.masters.business.MasDepartment;
import jkt.hms.masters.business.MasDiet;
import jkt.hms.masters.business.MasEmployee;
import jkt.hms.masters.business.MasHospital;
import jkt.hms.masters.business.MasIcd;
import jkt.hms.masters.business.MasImagesDisplay;
import jkt.hms.masters.business.MasMaritalStatus;
import jkt.hms.masters.business.MasReligion;
import jkt.hms.masters.business.MasStoreBrand;
import jkt.hms.masters.business.MasStoreItem;
import jkt.hms.masters.business.OpPatientReferral;
import jkt.hms.masters.business.OpdAntcardMenstrualHistry;
import jkt.hms.masters.business.OpdAntenatalCard;
import jkt.hms.masters.business.OpdAntenatalCardMedicalHistory;
import jkt.hms.masters.business.OpdAntenatalCardPregnancy;
import jkt.hms.masters.business.OpdAntenatalCardTrimester;
import jkt.hms.masters.business.OpdAntenatalUsg;
import jkt.hms.masters.business.OpdCardiologyDepartmentDetails;
import jkt.hms.masters.business.OpdEntExaminationSpeciality;
import jkt.hms.masters.business.OpdGastroEnterologyColonoscopy;
import jkt.hms.masters.business.OpdGastroEnterologyEndoscopy;
import jkt.hms.masters.business.OpdGeneralProformaHeader;
import jkt.hms.masters.business.OpdGravidagramGestationalDiabitiesOne;
import jkt.hms.masters.business.OpdGravidagramGestationalDiabitiesTwo;
import jkt.hms.masters.business.OpdGravidagramHtn;
import jkt.hms.masters.business.OpdPatientAllergyT;
import jkt.hms.masters.business.OpdPatientDetails;
import jkt.hms.masters.business.OpdPatientHistory;
import jkt.hms.masters.business.OpdPatientSecondOpinion;
import jkt.hms.masters.business.OpdTemplateDepartmentWise;
import jkt.hms.masters.business.OpdTemplateTreatment;
import jkt.hms.masters.business.Patient;
import jkt.hms.masters.business.PatientAllergicDrugsDt;
import jkt.hms.masters.business.PatientAllergicDrugsHd;
import jkt.hms.masters.business.PatientFitnessCertificate;
import jkt.hms.masters.business.PatientPrescriptionDetails;
import jkt.hms.masters.business.QueueManagment;
import jkt.hms.masters.business.StoreItemBatchStock;
import jkt.hms.masters.business.Transfer;
import jkt.hms.masters.business.Users;
import jkt.hms.masters.business.Visit;
import jkt.hms.masters.handler.CommonMasterHandlerService;
import jkt.hms.masters.handler.HospitalDetailsMasterHandlerService;
import jkt.hms.opd.handler.OPDHandlerService;
import jkt.hms.util.Box;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.RequestConstants;
import jkt.hms.util.TaperedMedicineUtil;
import jkt.hrms.masters.business.MasQualification;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.util.JRLoader;

import org.apache.commons.fileupload.FileUploadException;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
//commented for maven
/*import org.apache.poi.hssf.record.formula.functions.Frequency;*/
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

import com.google.gson.Gson;

public class OPDController extends MultiActionController {
	OPDHandlerService opdHandlerService = null;
	LabHandlerService labHandlerService = null;
	CommonMasterHandlerService commonMasterHandlerService = null;
	HospitalDetailsMasterHandlerService hospitalDetailsMasterHandlerService = null;
	IPDHandlerService ipdHandlerService =null;
	static final Logger LOGGER = Logger.getLogger(OPDController.class);
	public IPDHandlerService getIpdHandlerService() {
		return ipdHandlerService;
	}

	public void setIpdHandlerService(IPDHandlerService ipdHandlerService) {
		this.ipdHandlerService = ipdHandlerService;
	}

	public HospitalDetailsMasterHandlerService getHospitalDetailsMasterHandlerService() {
		return hospitalDetailsMasterHandlerService;
	}

	public void setHospitalDetailsMasterHandlerService(
			HospitalDetailsMasterHandlerService hospitalDetailsMasterHandlerService) {
		this.hospitalDetailsMasterHandlerService = hospitalDetailsMasterHandlerService;
	}
	
	
	HttpSession session = null;
	Map<String, Object> map = new HashMap<String, Object>();
	String jsp = "";
	String title = "";
	String pojoPropertyName = "";
	String pojoPropertyCode = "";
	String pojoName = "";
	String userName = "";
	String currentDate = "";
	String currentTime = "";
	String message = "";
	String code = "";
	String name = "";
	String changedBy = "";
	String jspName = "";
	String url = "";
	
	@SuppressWarnings("unchecked")
	public ModelAndView showWaitingPatientListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		int tokeNo=0;
		String patientName;
		String uhid;
		int hospitalId=0;
		int searchFlag=0;
		String [] departmentIdlist = {"0"};
		ArrayList<Integer> serviceCentreList = new ArrayList<Integer>();
		
		Map<Integer, Integer> searchSelectedDeptIdlist = new HashMap<Integer, Integer>();
		
		if(request.getParameter("searchFlag")!=null){
			searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag",searchFlag);
		}
	
		if(request.getParameter("searchDept")!=null){
			if(null != session.getAttribute("searchSelectedDeptIdlist")) {
				session.removeAttribute("searchSelectedDeptIdlist");
			}
			if(request.getParameterValues("opd_Department")!=null && !request.getParameterValues("opd_Department").equals("")) {
				departmentIdlist = request.getParameterValues("opd_Department");
				for(int i = 0 ; i< departmentIdlist.length ; i++) {
					serviceCentreList.add(new Integer(departmentIdlist[i]));
					searchSelectedDeptIdlist.put(Integer.parseInt(departmentIdlist[i]),Integer.parseInt( departmentIdlist[i]));
				}
				session.setAttribute("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
				mapForDS.put("serviceCentreList", serviceCentreList);
			}
		} else {
			if(null !=session.getAttribute("searchSelectedDeptIdlist")){
				searchSelectedDeptIdlist=(Map<Integer, Integer>) session.getAttribute("searchSelectedDeptIdlist");
				for(Map.Entry<Integer, Integer> entry : searchSelectedDeptIdlist.entrySet()) {
					serviceCentreList.add(entry.getKey());
				}
			}
			mapForDS.put("serviceCentreList", serviceCentreList);
		}
		if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("")){
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo",tokeNo);
		}
		if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("") ){
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if(request.getParameter("uhid")!=null){
			uhid = request.getParameter("uhid");
			mapForDS.put("uhid", uhid);
		}
		if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		int empId = 0;
		if (session.getAttribute("userId") != null) {
			empId = (Integer) session.getAttribute("userId");
			mapForDS.put("userId", empId);
		}
		
		
		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		
		mapForDS.put("opNursingWaitinList", true);
		
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		String deptName =(String)map.get("deptName");
		
		session.setAttribute("deptName", deptName);
		jsp = "nurse_waiting_List";
		jsp += ".jsp";
		title = "Nurse Patient List";
		map.put("searchDeptIdlist", serviceCentreList);
		map.put("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView searchWaitingPatientListJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";

		int deptId = (Integer) session.getAttribute("deptId");
		String date = request.getParameter("date");

		Date currentDate = HMSUtil.convertStringTypeDateToDateType(date);
		if (request.getParameter(HIN_NO) != null
				&& !(request.getParameter(HIN_NO).equals(""))) {
			hinNo = request.getParameter(HIN_NO);
			mapForDS.put("hinNo", hinNo);
		}
		
		if (request.getParameter(P_FIRST_NAME) != null
				&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
			patientFName = request.getParameter(P_FIRST_NAME);
			mapForDS.put("patientFName", patientFName);
		}
		if (request.getParameter(P_MIDDLE_NAME) != null
				&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
			patientMName = request.getParameter(P_MIDDLE_NAME);
			mapForDS.put("patientMName", patientMName);
		}
		if (request.getParameter(P_LAST_NAME) != null
				&& !(request.getParameter(P_LAST_NAME).equals(""))) {
			patientLName = request.getParameter(P_LAST_NAME);
			mapForDS.put("patientLName", patientLName);
		}
	
		mapForDS.put("deptId", deptId);
		mapForDS.put("currentDate", currentDate);
		map = opdHandlerService.searchWaitingPatientList(mapForDS);

		jsp = "OPD_WAITING_LIST_JSP";
		jsp += ".jsp";
		title = "Waiting Patient List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
		
	}
	@SuppressWarnings({ "unused", "unchecked" })
	public ModelAndView showOPDMainJsp(HttpServletRequest request,
            HttpServletResponse response) {
    HttpSession session = request.getSession(); 
    Map<String, Object> map = new HashMap<String, Object>();
    Map<String, Object> map2 = new HashMap<String, Object>();
    Map<String, Object> map3 = new HashMap<String, Object>();
    Map<String, Object> map4 = new HashMap<String, Object>();
    Map<String, Object> map5 = new HashMap<String, Object>();
    Map<String, Object> map6 = new HashMap<String, Object>();
    Map<String, Object> map7 = new HashMap<String, Object>();
    Map<String, Object> map8 = new HashMap<String, Object>();
    Map<String, Object> labTestMap = new HashMap<String, Object>();
    
    List<Visit> visitTokenList = new ArrayList<Visit>();
    List<MasDepartment> masDepartmentList = null;
    String loggedInDeptName =  null;
    List<OpdPatientHistory> preOpdPatientHistoryList = null;
    int visitId =0;
    int districtId=0;
    int hospitalId=0;
    int hospitalTypeId = 0;
    String fromTempate="opConsultation";
    
    String templateFlag = ""; 
    
    map.put("fromTempate", fromTempate);
    if(session.getAttribute("districtId")!=null){
    	districtId = (Integer) session.getAttribute("districtId");
        map.put("districtId", districtId);
       }
    if(session.getAttribute("hospitalTypeId")!=null){
    	hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
        map.put("hospitalTypeId", hospitalTypeId);
       }
    
    if(session.getAttribute(HOSPITAL_ID)!=null){
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		map.put("hospitalId", hospitalId);
	}
    if(request.getParameter("visitId")!=null){
      visitId =Integer.parseInt(request.getParameter("visitId"));
      map.put("visitId", visitId);
    }
    int deptId =0;
    if(session.getAttribute("deptId")!=null){
     deptId = (Integer) session.getAttribute("deptId");
     map.put("deptId", deptId);
    }
    String deptName ="";
    if(session.getAttribute("deptName")!=null){
    	deptName = (String) session.getAttribute("deptName");
    	map.put("deptName", deptName);
    }
    String empDeptCode ="";
    if(session.getAttribute("empDeptCode")!=null){
	  empDeptCode = (String) session.getAttribute("empDeptCode");
    }
    int empId =0;
    if(session.getAttribute("userId")!=null){
      empId =(Integer) session.getAttribute("userId");
      map.put("docId", empId);
      map.put("userId", empId);
    }
    int empDeptId =0;
    if(session.getAttribute("empDeptId")!=null){
    	empDeptId =(Integer) session.getAttribute("empDeptId");
      map.put("empDeptId", empDeptId);
    }
    
    int token  =0;
    if(request.getParameter("token")!=null){
     String tokens=	request.getParameter("token");
     token =Integer.parseInt(tokens.split("/")[1].trim());        
    }
    
    int skip  =0;
    if(request.getParameter("skip")!=null){
    	if( Integer.parseInt(request.getParameter("skip"))!=0){
    		skip= Integer.parseInt(request.getParameter("skip"));
        	map.put("skip", skip);
    	}
    }
    
    if(request.getParameter("skipped")!=null){
    	map.put("skipped", request.getParameter("skipped"));
    }
    
    if(request.getParameter("searchFlag")!=null){
    	map.put("searchFlag", request.getParameter("searchFlag"));
    }
    
    if(request.getParameter("nextFlag")!=null){
    	if( Integer.parseInt(request.getParameter("nextFlag"))!=0){
    		map.put("nextFlag",  Integer.parseInt(request.getParameter("nextFlag")));
    	}
    }
    
    
    map = opdHandlerService.getPatientDetails(map);
    String departmentCode=null;
	List patientDataList = (List) map.get("patientDataList");
    List<MasDiet> dietList =(List)map.get("dietDataList");
    List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
    storeBrandList = (List)map.get("storeBrandList");
    
   if(map.get("masDepartmentList")!=null){
    	masDepartmentList = (List<MasDepartment>) map.get("masDepartmentList");
    	if(masDepartmentList.size()>0){
    		loggedInDeptName = 	masDepartmentList.get(0).getDepartmentName();
    		departmentCode = masDepartmentList.get(0).getDepartmentCode();
    	}
    }
 
   if(map.get("preOpdPatientHistoryList")!=null){
	   preOpdPatientHistoryList = (List<OpdPatientHistory>) map.get("preOpdPatientHistoryList");
   }
   
    if(patientDataList!=null && patientDataList.size()>0){
    	Visit visit = (Visit) patientDataList.get(0);
	    int visitNo = visit.getVisitNo();
	    int hinId = visit.getHin().getId();
	    map.put("visitNo", visitNo);
	    map.put("hinId", hinId);
	    map.put("token", token);
	    map.put("deptName", deptName);
	    map = opdHandlerService.getOPDDetails(map);
    }
    if(map.get("patientStatus")!=null && (Boolean)map.get("patientStatus")==true){
    	ServletContext context=getServletContext(); 
    	Map contextMap=new HashMap(); 
    	contextMap.put("uhidNum", map.get("uhidNum"));
    	contextMap.put("patientStatus", map.get("patientStatus"));
    	contextMap.put("visitId", map.get("visitId"));
    	contextMap.put("deptId", map.get("deptId"));
    	contextMap.put("hospitalId", map.get("hospitalId"));
    	
    	contextMap.put("token", map.get("token"));
    	contextMap.put("pvisitDate", map.get("pvisitDate"));
    	contextMap.put("districtId", map.get("districtId"));
    	contextMap.put("docId", map.get("docId"));
    	  
	    context.setAttribute("contextMap", contextMap);
    }
    	
    if(map.get("openStatus")!=null && (Boolean)map.get("openStatus"))
   	{
    	map.put("opClinicalWaitinList", true);
   			map = opdHandlerService.getWaitingPatientList(map);
   			map.put("openMsg", "Record already opened. Please try again after 5 Minutes.");
   			String openMsg= "Case Sheet already opened. Please try again after 5 Minutes.";
   			try {
   				LOGGER.info("OP Consultation Screen -Case sheet already opened with in 5 Min");
				response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList&openMsg="+openMsg);
			} catch (IOException e) {
				
				e.printStackTrace();
			}
   			jsp = "op_clinical_waiting_list.jsp";
   			map.put("contentJsp", jsp);
   			map.put("title", title);
   			return new ModelAndView("index", "map", map);
   	}
    
    
    
      map = opdHandlerService.showDepartmentSpeciality(map);
      
      
      if(request.getParameter("recall")!=null){
      	map.put("recall", request.getParameter("recall"));
      }
      opdHandlerService.displayCurrentPatientToken(map);
      map.put("patientDataList", patientDataList);
      map.put("dietDataList", dietList);
      map.put("storeBrandList", storeBrandList);
      if(patientDataList!=null && patientDataList.size()==0 && skip==1){
      	try{
      		response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList");
      	}catch(Exception e){
      		e.printStackTrace();
      	}
      }
      //added by govind 20-01-2017
      String orderNo="";
      int OrderId=0;
      Box box = HMSUtil.getBox(request);
      if(patientDataList.size()>0){
    	Visit visit=(Visit)patientDataList.get(0);
		box.put("visitId", visit.getId());
		box.put("hinId", visit.getHin().getId());

		map2 = opdHandlerService.showPatientLabResult(box);
		if(map2.get("orderNo")!=null){
			orderNo=map2.get("orderNo").toString();
		}
		if(map2.get("OrderId")!=null){
			OrderId=(Integer)map2.get("OrderId");
		}
      }
      map.put("orderNo", orderNo);
      map.put("OrderId", OrderId);
      //added by govind 20-01-2017 end
      if(patientDataList!=null && patientDataList.size()>0){
    	Visit visit = (Visit) patientDataList.get(0);
	    box.put("hinId", visit.getHin().getId());
	    map3 = opdHandlerService.getClinicalSummaryDetail(box);
		int deptId1 = (Integer) session.getAttribute("deptId");
        box.put("deptId", deptId);
		map4 = opdHandlerService.showDermatologyGeneralProformaJsp(box);
		map5 = opdHandlerService.showDermatologyLeprosyProformaJsp(box);
		map6 = opdHandlerService.showGeneralPsychiatricCaseRecord (box);
		map7 = opdHandlerService.showDeaddictionCentreJsp (box);
		labTestMap = opdHandlerService.showNephrologyCaseSheetJsp(box);
    }
      	List<Object[]>previousDetailList = new ArrayList<Object[]>();
		List<Object[]>previousPrescriptionList = new ArrayList<Object[]>();
		List<Object[]>previousInvestigationList = new ArrayList<Object[]>();
		List<Object[]>previousDiagnosisList = new ArrayList<Object[]>();
		List<Object[]>previousProcedureList = new ArrayList<Object[]>();
		List<Object[]> generalProformaHeadersList = new ArrayList<Object[]>();
		List<Object[]> firstLesionList = new ArrayList<Object[]>();
		List<Object[]> secondLesionList = new ArrayList<Object[]>();
		List<Object[]> findingLesionList = new ArrayList<Object[]>();
		
		List<Object[]> previousComplaintListLeprosy = new ArrayList<Object[]>();
		List<Object[]> historyList = new ArrayList<Object[]>();
		List<Object[]> opdDermLpsyProExm = new ArrayList<Object[]>();
		List<Object[]> opdDermLpsyProNerveExm = new ArrayList<Object[]>();
		List<DgResultEntryHeader> internalLabTestList = new ArrayList<DgResultEntryHeader>();
		List<ExternalLabReportCommon> externalLabTestList = new ArrayList<ExternalLabReportCommon>();
		
		//code added by rajdeo
		List<MasMaritalStatus> maritalStatusList = new ArrayList<MasMaritalStatus>();
		List<MasQualification> educationList = new ArrayList<MasQualification>();
		List<MasReligion> religionList = new ArrayList<MasReligion>();
		List<Object[]> previousComplaintListPsychiatric = new ArrayList<Object[]>();
		
		List<Object[]> previousComplaintListDeaddictionCentre = new ArrayList<Object[]>();
		List<Object[]> deaddictionPerforma = new ArrayList<Object[]>();
		List<OpdPatientDetails> systemicExmListDeaddictionCentre = new ArrayList<OpdPatientDetails>();
		
		List<Object[]> previousComplaintListPsychogeriatricClinic = new ArrayList<Object[]>();
		List<Object[]> psychogeriatricClinic = new ArrayList<Object[]>();
		List<Object[]> systemicExmListpsychogeriatricClinic = new ArrayList<Object[]>();
		
		/*if(labTestMap.get("internalLabTestList") != null){
			internalLabTestList =(List)labTestMap.get("internalLabTestList");
			 map.put("internalLabTestList", internalLabTestList);
		}
		*/
		
		/*if(labTestMap.get("externalLabListCommon") != null){
			externalLabTestList =(List)labTestMap.get("externalLabListCommon");
			 map.put("externalLabTestList", externalLabTestList);
		}*/
		
		if(map3.get("previousDetailList") != null){
			previousDetailList =(List)map3.get("previousDetailList");
			 map.put("previousDetailList", previousDetailList);
		}
		if(map3.get("previousPrescriptionList") != null){
			previousPrescriptionList =(List)map3.get("previousPrescriptionList");
			 map.put("previousPrescriptionList", previousPrescriptionList);
		}
		if(map3.get("previousInvestigationList") != null){
			previousInvestigationList =(List)map3.get("previousInvestigationList");
			 map.put("previousInvestigationList", previousInvestigationList);
		}
		if(map3.get("previousDiagnosisList") != null){
			previousDiagnosisList =(List)map3.get("previousDiagnosisList");
			 map.put("previousDiagnosisList", previousDiagnosisList);
		}
		if(map3.get("previousProcedureList") != null){
			previousProcedureList =(List)map3.get("previousProcedureList");
			 map.put("previousProcedureList", previousProcedureList);
		}
		if(map3.get("previousInvestigationHashMap") != null){
			 map.put("previousInvestigationHashMap", (Map<Date, String>)map3.get("previousInvestigationHashMap"));
		}
		if(map4.get("generalProformaHeadersList") != null){
			generalProformaHeadersList =(List)map4.get("generalProformaHeadersList");
			 map.put("generalProformaHeadersList", generalProformaHeadersList);
			}
		
		if(map4.get("firstLesionList") != null){
			firstLesionList =(List)map4.get("firstLesionList");
			 map.put("firstLesionList", firstLesionList);
		}
		if(map4.get("secondLesionList") != null){
			secondLesionList =(List)map4.get("secondLesionList");
			 map.put("secondLesionList", secondLesionList);
		}
		if(map4.get("findingLesionList") != null){
			findingLesionList =(List)map4.get("findingLesionList");
			 map.put("findingLesionList", findingLesionList);
		}
		if(map5.get("previousComplaintListLeprosy") != null){
			previousComplaintListLeprosy =(List)map5.get("previousComplaintListLeprosy");
			 map.put("previousComplaintListLeprosy", previousComplaintListLeprosy);
		}
		if(map5.get("historyList") != null){
			historyList =(List)map5.get("historyList");
			 map.put("historyList", historyList);
		}
		if(map5.get("opdDermLpsyProExm") != null){
			opdDermLpsyProExm =(List)map5.get("opdDermLpsyProExm");
			 map.put("opdDermLpsyProExm", opdDermLpsyProExm);
		}
		
		if(map5.get("opdDermLpsyProNerveExm") != null){
			opdDermLpsyProNerveExm =(List)map5.get("opdDermLpsyProNerveExm");
			 map.put("opdDermLpsyProNerveExm", opdDermLpsyProNerveExm);
		}
		
		if(map.get("uhidNum")!=null){
			Map m= new HashMap<>();
			Map m2= new HashMap<>();
			String uhid = (String) map.get("uhidNum");
			Integer VisitId = (Integer)map.get("VisitId");
			m.put("uhid", uhid);
			m.put("VisitId", VisitId);
			m2 = opdHandlerService.getMemberDetails(m);
			/*if( m2.get("memberId")!=null)
				map.put("memberId", m2.get("memberId"));*/
		}
	    map.put("patientDataList", patientDataList);
	    map.put("dietDataList", dietList);
	    map.put("storeBrandList", storeBrandList);
	    String jsp = null; 
      
	    if(departmentCode!=null &&( departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeGeneralMedicine"))
	    		|| departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeOrthopadics"))
	    		|| departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeDermatology"))
	    		|| empDeptCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeAnteNatalClinic"))
	    		|| departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeGeneralSurgery"))
	    		|| departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeNephrology")) 
	    		|| departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeDental"))
 || departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodePaeditrics"))
	    		 || departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodePsychiatry"))
|| departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeENT"))
  
  )){
			   jsp = "opd_detail";		   
			   map.put("departmentCode", departmentCode);
		   }else
	    	  jsp = OPD_MAIN_JSP; 
	    
	   map.put("departmentCode", departmentCode);
	   map.put("preOpdPatientHistoryList", preOpdPatientHistoryList);
      jsp += ".jsp";
      title = "Patient Details";
      map.put("deptId", deptId);
      map.put("contentJsp", jsp);
      map.put("title", title);
      map.put("loggedInDeptName", loggedInDeptName);
      map.put("empDeptCode", empDeptCode);
      map.put("deptName", deptName);
      return new ModelAndView("index", "map", map);
 }
	
	public ModelAndView getClinicalSummaryHistoryData(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		 Box box = HMSUtil.getBox(request);
		map = opdHandlerService.getClinicalSummaryDetail(box);
		String jsp =null;
		if(box.get("opdType")!=""  && box.get("opdType").equals("LP"))
			 jsp = "respnseForClinicalSummaryLP";
		else
		 jsp = "respnseForClinicalSummary";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView getICDList(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			map.put("autoHint", autoHint);
			map = opdHandlerService.getICDList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForAutoCompleteICD";
		return new ModelAndView(jsp, "map", map);
	}
	@SuppressWarnings("unused")
	public ModelAndView getICDListwithID(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			map.put("autoHint", autoHint);
			map = opdHandlerService.getICDListwithID(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForAutoCompleteICDwithID";
		return new ModelAndView(jsp, "map", map);
	}
	@SuppressWarnings("unchecked")
	public void getIcdWithIcdCode(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		
		String icdCode = "";
		if (request.getParameter("icdCode") != null) {
			icdCode = (request.getParameter("icdCode"));
		}
		dataMap.put("icdCode", icdCode);
		List<MasIcd> masIcdList = new ArrayList<MasIcd>();
		map = opdHandlerService.getIcdWithIcdCode(dataMap);
		masIcdList = (List) map.get("masIcdList");
		String icdString = "no";
		for (MasIcd masIcd : masIcdList) {
			icdString = masIcd.getIcdName() + "[" + masIcd.getIcdCode() + "]";
		}
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<icdString>" + icdString.toUpperCase() + "</icdString>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unused")
	public ModelAndView showGridInMainJsp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		int templateId = Integer.parseInt(request.getParameter("templateId"));

		map=opdHandlerService.showOPDTreatmentRecords(templateId);

		jsp=OPD_SHOW_GRID_IN_MAIN_JSP;

		title="Patient Details";

		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unused")
	public ModelAndView showGridForInvestigation(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();

		int investigationTemplateId = Integer.parseInt(request
				.getParameter("investigationTemplateId"));

		map = opdHandlerService
				.showOPDInvestigationRecords(investigationTemplateId);

		jsp = OPD_SHOW_GRID_FOR_INVESTIGATION_JSP;

		title = "Patient Investigation Details";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	// Start added by om tripathi
	@SuppressWarnings("unused")
	public ModelAndView getItemListForAutoCompleteOutItem(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		int counter=0;
		boolean lastPrescripitionBasedDispensing=false;
		Box box=HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map1 = new HashMap<String, Object>();
		String screenName=null;
		int hospitalId=((Integer)session.getAttribute(HOSPITAL_ID));
		if(session.getAttribute("deptId")!=null){
		 deptId = (Integer) session.getAttribute("deptId");
		}
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter("screenName") != null) {
				screenName = (request.getParameter("screenName"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			Integer allergyTypeCheck=0;
			if (request.getParameter("allergyTypeCheck") != null) {
				allergyTypeCheck = Integer.parseInt(request.getParameter("allergyTypeCheck"));
				map.put("allergyTypeCheck", allergyTypeCheck);
			}
			String allergy="OPIP";
			map.put("allergy", allergy);
			if (request.getParameter("allergy") != null) {
				allergy = request.getParameter("allergy");
				map.put("allergy", allergy);
			}
		
			if (request.getParameter("lastPrescripitionBasedDispensing") != null) {
				lastPrescripitionBasedDispensing = Boolean.parseBoolean(request.getParameter("lastPrescripitionBasedDispensing"));
			}
			map.put("lastPrescripitionBasedDispensing", lastPrescripitionBasedDispensing);
			map.put("deptId", deptId);
			if(userName!=null ){
			map.put("userName", userName);
			}
			
			map.put("autoHint", autoHint);
			map.put("screenName", screenName);
			map1 = opdHandlerService.getItemListForAutoCompleteOutItem(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseOutGrid";
       return new ModelAndView(jsp, "map", map1);
	 }
	
	@SuppressWarnings("unused")
	public ModelAndView getItemListForAutoCompleteItem(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		int counter=0;
		boolean lastPrescripitionBasedDispensing=false;
		Box box=HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map1 = new HashMap<String, Object>();
		String screenName=null;
		int hospitalId=((Integer)session.getAttribute(HOSPITAL_ID));
		if(session.getAttribute("deptId")!=null){
		 deptId = (Integer) session.getAttribute("deptId");
		}
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter("screenName") != null) {
				screenName = (request.getParameter("screenName"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			Integer allergyTypeCheck=0;
			if (request.getParameter("allergyTypeCheck") != null) {
				allergyTypeCheck = Integer.parseInt(request.getParameter("allergyTypeCheck"));
				map.put("allergyTypeCheck", allergyTypeCheck);
			}
			String allergy="OPIP";
			map.put("allergy", allergy);
			if (request.getParameter("allergy") != null) {
				allergy = request.getParameter("allergy");
				map.put("allergy", allergy);
			}
		
			if (request.getParameter("lastPrescripitionBasedDispensing") != null) {
				lastPrescripitionBasedDispensing = Boolean.parseBoolean(request.getParameter("lastPrescripitionBasedDispensing"));
			}
			map.put("lastPrescripitionBasedDispensing", lastPrescripitionBasedDispensing);
			map.put("deptId", deptId);
			if(userName!=null ){
			map.put("userName", userName);
			}
			
			if (request.getParameter("pharmacyCheck") != null && !request.getParameter("pharmacyCheck").isEmpty()) {
				map.put("pharmacyCheck", request.getParameter("pharmacyCheck"));
			}
		
			map.put("autoHint", autoHint);
			map.put("screenName", screenName);
			map1 = opdHandlerService.getItemListForAutoComplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}

		jsp = "opd_responseInGridNew";
       return new ModelAndView(jsp, "map", map1);
	 }
	@SuppressWarnings("unused")
	public ModelAndView getItemListForAutoCompleteItemOTC(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		int counter=0;
		boolean lastPrescripitionBasedDispensing=false;
		Box box=HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map1 = new HashMap<String, Object>();
		if(session.getAttribute("deptId")!=null){
		 deptId = (Integer) session.getAttribute("deptId");
		}
		try { 
			map.put("deptId", deptId);
			if(userName!=null ){
			map.put("userName", userName);
			}
			map.put("autoHint", autoHint);
			map1 = opdHandlerService.getItemListForAutoCompleteOTC(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map1.put("counter", counter);
		jsp = "otc_details";
       return new ModelAndView(jsp, "map", map1);
	 }
  public ModelAndView getItemListForAutoCompleteItemIpd(
			HttpServletRequest request, HttpServletResponse response) {
          HttpSession session = request.getSession();
		 
        String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		int counter=0;
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map1 = new HashMap<String, Object>();

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if(session.getAttribute("deptId")!= null){
			deptId= (Integer)session.getAttribute("deptId");
			map.put("deptId", deptId);
			}
		
			if (request.getParameter("counter") != null) {
				counter = Integer.parseInt(request.getParameter("counter"));
			}
		
			map.put("userName", userName);
			map.put("autoHint", autoHint);

			map1 = opdHandlerService.getItemListForAutoCompleteIpd(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map1.put("counter", counter);
		jsp = "opd_responseInGridNew";

		return new ModelAndView(jsp, "map", map1);
	}

	@SuppressWarnings("unchecked")
	public void checkItem(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session=request.getSession();
		int hospitalId=0;
		if(session!=null){
			hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		}
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientAllergicDrugsDt> patientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		String pvmsNo = "";
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}


		dataMap.put("visitId", visitId);
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put(HOSPITAL_ID, hospitalId);
		map.put(HOSPITAL_ID, hospitalId);
		map = opdHandlerService.checkItem(dataMap);

		patientAllergicDrugsDtList = (List<PatientAllergicDrugsDt>) map.get("patientAllergicDrugsDtList");

		int itemId = 0;
		StringBuffer sb = new StringBuffer();
		try {
				for (PatientAllergicDrugsDt patientAllergicDrugsDt : patientAllergicDrugsDtList) {
					itemId = patientAllergicDrugsDt.getItem().getId();


				sb.append("<item>");
				if (itemId > 0) {
			    sb.append("<bedStatus>" + "yes" + "</bedStatus>");
		        } else {
			    sb.append("<bedStatus>" + "no" + "</bedStatus>");
		        }
				sb.append("<itemId>" + itemId + "</itemId>");
	            sb.append("</item>");
		    }
		}catch (Exception e) {
					e.printStackTrace();
				}
		    response.setContentType("text/xml");
		    response.setHeader("Cache-Control", "no-cache");

		try{

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) map.get("itemBatchStock");
			if(itemBatchStock==null)
			{
				response.getWriter().write("<stocks>");
				response.getWriter().write("<stock>");
				response.getWriter().write("0");
				response.getWriter().write("</stock>");
				response.getWriter().write("</stocks>");
			}
			else
			{
				response.getWriter().write("<stocks>");
				response.getWriter().write("<stock>");
				response.getWriter().write("1");
				response.getWriter().write("</stock>");
				response.getWriter().write("</stocks>");
			}
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	@SuppressWarnings("unchecked")
	public void checkAlergicItemOnSubmit(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientAllergicDrugsDt> patientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		int counter = 0;
		if(request.getParameter("counter") != null){
			counter=Integer.parseInt(request.getParameter("counter"));
		}

		dataMap.put("visitId", visitId);
		String message = "";

		if(counter > 0){
			for (int i = 1; i <= counter; i++) {
				dataMap.put("pvmsNo", request.getParameter("pvmsNo"+i));
				map = opdHandlerService.checkItem(dataMap);
				patientAllergicDrugsDtList = (List<PatientAllergicDrugsDt>) map.get("patientAllergicDrugsDtList");
				if(patientAllergicDrugsDtList.size() > 0){
					for (PatientAllergicDrugsDt patientAllergicDrugsDt : patientAllergicDrugsDtList) {
						message = patientAllergicDrugsDt.getItem().getNomenclature()+" Drug is Alergic for this patient.\n";

					}
				}
			}

		}

		StringBuffer sb = new StringBuffer();
		try {

				sb.append("<item>");

			    sb.append("<message>" +message+ "</message>");

	            sb.append("</item>");

		}catch (Exception e) {
					e.printStackTrace();
				}
		    response.setContentType("text/xml");
		    response.setHeader("Cache-Control", "no-cache");

		try{

			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	@SuppressWarnings("unused")
	public ModelAndView getInvestigationListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();
		String val="";
		
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			if (request.getParameter("fromOpd") != null) {
				map.put("fromOpd", request.getParameter("fromOpd"));
			}
			
			if (request.getParameter("labradiologyCheck") != null) {
				String labradiologyCheck=request.getParameter("labradiologyCheck");
				map.put("labradiologyCheck", labradiologyCheck);
			}

			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map = opdHandlerService.getInvestigationListForAutoComplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = OPD_RESPONSE_FOR_INVESTIGATION_JSP;

		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView fillChargeCode(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		String rowVal = request.getParameter("rowVal");
		String chargeCodeNameWithId = request.getParameter("chargeCodeName"+ rowVal);
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int index1 = chargeCodeNameWithId.lastIndexOf("[");
		int index2 = chargeCodeNameWithId.lastIndexOf("]");
		String chargeCodeName = "";
		if(index1>0){
			 chargeCodeName = chargeCodeNameWithId.trim().substring(0, index1);
		}
		

		map = opdHandlerService.getChargeCodeValue(chargeCodeName,hinId);

		jsp = OPD_RESPONSE_FOR_CHARGE_CODE_NAME_JSP;

		title = "Patient Investigation Details";
		map.put("rowVal", rowVal);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings({ "unused", "deprecation", "unchecked" })
	public ModelAndView submitOPDPatientDetails(HttpServletRequest request,	HttpServletResponse response) {
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForNext = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box=HMSUtil.getBox(request);
		
		ServletContext context=getServletContext(); 
    	Map contextMap=new HashMap(); 
    	contextMap.put("displayAudioStatus", "Yes");
    	contextMap.put("displayConsultationDate", box.getString("consultationDate"));
    	contextMap.put("displayDepartmentId", box.getInt("departmentId"));
    	contextMap.put("displayHospital", box.getInt("hospitalId"));
    	  
	    context.setAttribute("contextMap", contextMap);
		
		Map<String, Object> mapAudiologicalExamEntSpeciality= null;
		if(request.getParameter("audiologFlag")!=null && request.getParameter("audiologFlag").toString().equalsIgnoreCase("AudiologicalExam")){	
			mapAudiologicalExamEntSpeciality = opdHandlerService.saveAudiologicalExamEntSpeciality(box);
			
		}
		
		//added by swarup 29-11-2017
		Map<String, Object> mapFamilyPlanningGynecologyJsp= null;
		if(request.getParameter("familyPlanGynecologyFlag")!=null && request.getParameter("familyPlanGynecologyFlag").toString().equalsIgnoreCase("FamilyPlanningGynecology")){	
			mapFamilyPlanningGynecologyJsp = opdHandlerService.saveFamilyPlanningGynecologyJsp(box);
		}		
		
		//swarup 27-11-2017
		Map<String, Object> mapNephrologyCaseSheet= null;
		List othersList = new ArrayList();
		if(request.getParameter("nephroFlag")!=null && request.getParameter("nephroFlag").toString().equalsIgnoreCase("NephrologyCaseSheet")){	
			 
			String OthersString = "";
			String[] OthersStringArray = null;
			if (request.getParameterValues("Others") != null) {
				OthersStringArray = (String[]) request.getParameterValues("Others");
				for (int x = 0; x < OthersStringArray.length; x++) {
					if (x == 0) {
						OthersString = OthersStringArray[x];
					} else {
						OthersString = OthersString + ","
								+ OthersStringArray[x];
					}
			 	}
				box.put("OthersString", OthersString);
			}
			
			String pastHistoryString = "";
			String[] pastHistoryStringArray = null;
			if (request.getParameterValues("pastHistory") != null) {
				pastHistoryStringArray = (String[]) request.getParameterValues("pastHistory");
				for (int x = 0; x < pastHistoryStringArray.length; x++) {
					if (x == 0) {
						pastHistoryString = pastHistoryStringArray[x];
					} else {
						pastHistoryString = pastHistoryString + ","
								+ pastHistoryStringArray[x];
					
					}
			 	}
				box.put("pastHistoryString", pastHistoryString);
			}
			
			String personalHistoryString = "";
			String[] personalHistoryStringArray = null;
			if (request.getParameterValues("personalHistory") != null) {
				personalHistoryStringArray = (String[]) request.getParameterValues("personalHistory");
				for (int x = 0; x < personalHistoryStringArray.length; x++) {
					if (x == 0) {
						personalHistoryString = personalHistoryStringArray[x];
					} else {
						personalHistoryString = personalHistoryString + ","
								+ personalHistoryStringArray[x];
					}
			 	}
				box.put("personalHistoryString", personalHistoryString);
			}
			
			String pAString = "";
			String[] pAStringArray = null;
			if (request.getParameterValues("pA") != null) {
				pAStringArray = (String[]) request.getParameterValues("pA");
				for (int x = 0; x < pAStringArray.length; x++) {
					if (x == 0) {
						pAString = pAStringArray[x];
					} else {
						pAString = pAString + ","
								+ pAStringArray[x];
					}
			 	}
				box.put("pAString", pAString);
			}
			
			String cvsString = "";
			String[] cvsStringArray = null;
			if (request.getParameterValues("cvs") != null) {
				cvsStringArray = (String[]) request.getParameterValues("cvs");
				for (int x = 0; x < cvsStringArray.length; x++) {
					if (x == 0) {
						cvsString = cvsStringArray[x];
					} else {
						cvsString = cvsString + ","
								+ cvsStringArray[x];
					}
			 	}
				box.put("cvsString", cvsString);
			}
			
			String[] fixedInvestigationArray = null;
			if (request.getParameterValues("fixedInvestigation") != null) {
				fixedInvestigationArray = request.getParameterValues("fixedInvestigation");
				mapForDS.put("fixedInvestigationArray", fixedInvestigationArray);
			}
			
			String chestString = "";
			String[] chestStringArray = null;
			if (request.getParameterValues("chest") != null) {
				chestStringArray = (String[]) request.getParameterValues("chest");
				for (int x = 0; x < chestStringArray.length; x++) {
					if (x == 0) {
						chestString = chestStringArray[x];
					} else {
						chestString = chestString + ","
								+ chestStringArray[x];
						}
			 	}
			box.put("chestString", chestString);
			}
			 mapNephrologyCaseSheet = opdHandlerService.saveNephrologyCaseSheetJsp(box);
			}
		String forms=null;
		int skip=0;
		int forNext=0;
		int hinId=0;
		int  referred_tokenNo=0;
		String reffered_department_name="";
		if (request.getParameter("hinId")!=null && !request.getParameter("hinId").equals("")) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		int departmentId=0;
		if(request.getParameter("departmentId")!=null){
			departmentId = Integer.parseInt(request.getParameter("departmentId"));
		}
		int visitId=0;
		if(request.getParameter("visitId")!=null){
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		int hospitalId=0;
		if(request.getParameter("hospitalId")!=null){
			hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
		}
		String hospitalCode = "";
		if (session.getAttribute("hospitalCode") != null) {
			hospitalCode=(String) session.getAttribute("hospitalCode");
			mapForDS.put("hospitalCode", hospitalCode);
		}
		int opdpatientDetailId=0;
		if(request.getParameter("opdpatientDetailId")!=null){
			opdpatientDetailId = Integer.parseInt(request.getParameter("opdpatientDetailId"));
			mapForDS.put("opdpatientDetailId", opdpatientDetailId);
			map.put("opdpatientDetailId", opdpatientDetailId);
		}
		
		if (request.getParameter("ncd")!=null && !request.getParameter("ncd").equals("")) {
			if(request.getParameter("ncd").equalsIgnoreCase("on")){
				mapForDS.put("ncd", "y");
			}
		}
		
		if (request.getParameter("geriatric")!=null && !request.getParameter("geriatric").equals("")) {
			if(request.getParameter("geriatric").equalsIgnoreCase("on")){
				mapForDS.put("geriatric", "y");
			}
		}
		if (request.getParameter("phiso_remarks")!=null && !request.getParameter("phiso_remarks").equals("")) {
				String phiso_remarks=request.getParameter("phiso_remarks");
				mapForDS.put("phiso_remarks", phiso_remarks);
		}
		
		if (request.getParameter("patientdeathStatus")!=null && !request.getParameter("patientdeathStatus").equals("")) {
			String patientdeathStatus=request.getParameter("patientdeathStatus");
			mapForDS.put("patientdeathStatus", patientdeathStatus);
		}
		
		
		if (request.getParameter("preganancy")!=null && !request.getParameter("preganancy").equals("")) {
			if(request.getParameter("preganancy").equalsIgnoreCase("on")){
				mapForDS.put("preganancy", "y");
			}
	    }
		if (request.getParameter("period")!=null && !request.getParameter("period").equals("")) {
			Integer period=Integer.parseInt(request.getParameter("period"));
			mapForDS.put("period", period);
	    }
		if (request.getParameter("lactation")!=null && !request.getParameter("lactation").equals("")) {
			if(request.getParameter("lactation").equalsIgnoreCase("on")){
				mapForDS.put("lactation", "y");
			}
	    }
		if (request.getParameter("forms")!=null) {
			forms =(String)request.getParameter("forms");
		}	
		if (request.getParameter("from")!=null) {
			forNext =Integer.parseInt(request.getParameter("from"));
		}
		if(request.getParameter("skip")!=null){
			skip=Integer.parseInt(request.getParameter("skip"));
		}
		String fromTemplate="";
		if(request.getParameter("fromTemplate")!=null){
			fromTemplate=request.getParameter("fromTemplate");
			if(fromTemplate.equalsIgnoreCase("opConsultationDetailed"))
			{
				fromTemplate ="opConsultationDetailed";
			}else if(fromTemplate.equalsIgnoreCase("opConsultationLite")){
				fromTemplate ="opConsultationLite";
			}else
				fromTemplate ="opConsultation";			
		}else
				fromTemplate ="opConsultation";
		
		        mapForDS.put("fromTemplate", fromTemplate);
		
		
		int userId=0;
		if(session!=null){
			userId=(Integer)session.getAttribute(USER_ID);
		}
		int empId=0;
		if(session.getAttribute("empId")!=null){
			empId=(Integer)session.getAttribute("empId");
		}
		int fromDepartment=0;
		if(session.getAttribute("deptId")!=null){
			fromDepartment=(Integer)session.getAttribute("deptId");
			mapForDS.put("fromDepartment",fromDepartment);
		}
		String  mlcCheck = "n";
		if(request.getParameter("mlcCheck") != null){
			  mlcCheck = "y";
			mapForDS.put("mlcCheck", mlcCheck);
		}
		
		if(mlcCheck.equals("y")){
		if (request.getParameterValues("mlscasetype")!=null && !request.getParameterValues("mlscasetype").equals("")) {
			String[] mlcStr=request.getParameterValues("mlscasetype");
			List<String> mlcNameList = new ArrayList<String>();
			for (int j = 0; j < mlcStr.length; j++) {
				String mlcName =(mlcStr[j]);
				mlcNameList.add(mlcName);
			}
			mapForDS.put("mlcNameList", mlcNameList);
	    }
				
		if(request.getParameter("policeIntimation") != null){
			String  policeIntimation = "y";
			mapForDS.put("policeIntimation", policeIntimation);
		}else{
			String  policeIntimation = "n";
			mapForDS.put("policeIntimation", policeIntimation);
		}
		}
		String posture="";
		if(request.getParameter("posture") !=null && !request.getParameter("posture").equals("")){
			posture=request.getParameter("posture");
			
			mapForDS.put("posture", posture);
		}
		String squareWindow="";
		if(request.getParameter("squareWindow") !=null && !request.getParameter("squareWindow").equals("")){
			squareWindow=request.getParameter("squareWindow");
			
			mapForDS.put("squareWindow", squareWindow);
		}
		String armRecoil="";
		if(request.getParameter("armRecoil") !=null && !request.getParameter("armRecoil").equals("")){
			armRecoil=request.getParameter("armRecoil");
			
			mapForDS.put("armRecoil", armRecoil);
		}
		String poplitcalAngle="";
		if(request.getParameter("poplitcalAngle") !=null && !request.getParameter("poplitcalAngle").equals("")){
			poplitcalAngle=request.getParameter("poplitcalAngle");
			
			mapForDS.put("poplitcalAngle", poplitcalAngle);
		}
		String scarfSign="";
		if(request.getParameter("scarfSign") !=null && !request.getParameter("scarfSign").equals("")){
			scarfSign=request.getParameter("scarfSign");
			
			mapForDS.put("scarfSign", scarfSign);
		}
		String heelToEar="";
		if(request.getParameter("heelToEar") !=null && !request.getParameter("heelToEar").equals("")){
			heelToEar=request.getParameter("heelToEar");
			
			mapForDS.put("heelToEar", heelToEar);
		}
		String skin="";
		if(request.getParameter("skin") !=null && !request.getParameter("skin").equals("")){
			skin=request.getParameter("skin");
			
			mapForDS.put("skin", skin);
		}
		String lanuge="";
		if(request.getParameter("lanuge") !=null && !request.getParameter("lanuge").equals("")){
			lanuge=request.getParameter("lanuge");
			
			mapForDS.put("lanuge", lanuge);
		}
		String planterSurface="";
		if(request.getParameter("planterSurface") !=null && !request.getParameter("planterSurface").equals("")){
			planterSurface=request.getParameter("planterSurface");
			
			mapForDS.put("planterSurface", planterSurface);
		}
		String breast="";
		if(request.getParameter("breast") !=null && !request.getParameter("breast").equals("")){
			breast=request.getParameter("breast");
			
			mapForDS.put("breast", breast);
		}
		String eyeEar="";
		if(request.getParameter("eyeEar") !=null && !request.getParameter("eyeEar").equals("")){
			eyeEar=request.getParameter("eyeEar");
			
			mapForDS.put("eyeEar", eyeEar);
		}
		String genilalsMale="";
		if(request.getParameter("genilalsMale") !=null && !request.getParameter("genilalsMale").equals("")){
			genilalsMale=request.getParameter("genilalsMale");
			
			mapForDS.put("genilalsMale", genilalsMale);
		}
		String genilalsFemale="";
		if(request.getParameter("genilalsFemale") !=null && !request.getParameter("genilalsFemale").equals("")){
			genilalsFemale=request.getParameter("genilalsFemale");
			
			mapForDS.put("genilalsFemale", genilalsFemale);
		}
		int week=0;
		if(request.getParameter("week") !=null && !request.getParameter("week").equals("0")){
			week=Integer.parseInt(request.getParameter("week"));
			
			mapForDS.put("week", week);
		}
		BigDecimal headCircumference=null;
		if(request.getParameter("headCircumference") !=null && !request.getParameter("headCircumference").equals("")){
			headCircumference=new BigDecimal(request.getParameter("headCircumference"));
			
			mapForDS.put("headCircumference", headCircumference);
		}
		Double heightNicu =0.0;
		if (request.getParameter("height") != null && !request.getParameter("height").equals("")) {
			heightNicu=Double.parseDouble(request.getParameter("height"));
			mapForDS.put("height", heightNicu);
		}
		Double weightNicu=0.0;
		if (request.getParameter("weight") != null	&& !request.getParameter("weight").equals("")) {
			weightNicu =Double.parseDouble(request.getParameter("weight"));
			mapForDS.put("weight", weightNicu);
		}
		
		Double headCircumHidden=0.0;
		if (request.getParameter("headCircumference") != null	&& !request.getParameter("headCircumference").equals("")) {
			headCircumHidden =Double.parseDouble(request.getParameter("headCircumference"));
			mapForDS.put("headCircumHidden", headCircumHidden);
		}
		
		// added by amit das on 06-09-2016
		if (request.getParameter("episodeId") != null	&& !request.getParameter("episodeId").equals("0")) {
			int episodeId =Integer.parseInt(request.getParameter("episodeId"));
			mapForDS.put("episodeId", episodeId);
		}
		
		// added by amit das on 07-09-2016 
		//Remove from below(&& !request.getParameter("snomed").equals("")) ticket 835.
		if (request.getParameter("snomed") != null	) {
			String snomed =  request.getParameter("snomed");
			mapForDS.put("snomed", snomed);
		}
		
		// added by amit das on 07-09-2016
		if (request.getParameter("episodeCloseCheck") != null	&& !request.getParameter("episodeCloseCheck").equals("")) {
			Boolean episodeCloseCheck =  Boolean.parseBoolean(request.getParameter("episodeCloseCheck"));
			mapForDS.put("episodeCloseCheck", episodeCloseCheck);
		}
		
		
		// added by amit das on 06-09-2016
		if (request.getParameter("episodeName") != null	&& !request.getParameter("episodeName").trim().equals("")) {
			String episodeName = request.getParameter("episodeName");
			mapForDS.put("episodeName", episodeName);
		}
		
		if (request.getParameter("bloodGroupValue") != null	&& !request.getParameter("bloodGroupValue").trim().equals("") && !request.getParameter("bloodGroupValue").trim().equals("0")) {
			String bloodGroupValue = request.getParameter("bloodGroupValue");
			mapForDS.put("bloodGroupValue", bloodGroupValue);
		}
		
		if (request.getParameter("bloodGroupStatus") != null	&& !request.getParameter("bloodGroupStatus").trim().equals("")) {
			String bloodGroupStatus = request.getParameter("bloodGroupStatus");
			mapForDS.put("bloodGroupStatus", bloodGroupStatus);
		}
		
		
		// added by Dhananjay Kumar on 28-12-2016
		String pharmacyCheckedStatus="";
		if (request.getParameter("Pharmacyqueue") != null	&& request.getParameter("Pharmacyqueue").trim().equals("y")) {
			pharmacyCheckedStatus="y";
			
			}
		else{
			pharmacyCheckedStatus="n";
			
		}
		mapForDS.put("pharmacyCheckedStatus", pharmacyCheckedStatus);
		
		String labCheckedStatus="";
		if (request.getParameter("laboratoryqueue") != null	&& request.getParameter("laboratoryqueue").trim().equals("y")) {
			labCheckedStatus="y";
			
			}
		else{
			labCheckedStatus="n";
			
		}
		mapForDS.put("labCheckedStatus", labCheckedStatus);
		String RadiologyqueueStatus="";
		if (request.getParameter("Radiologyqueue") != null	&& request.getParameter("Radiologyqueue").trim().equals("y")) {
			RadiologyqueueStatus="y";
			
			}
		else{
			RadiologyqueueStatus="n";
			
		}
		mapForDS.put("RadiologyqueueStatus", RadiologyqueueStatus);
		
		
		String Sonography="";
		if (request.getParameter("Sonography") != null	&& request.getParameter("Sonography").trim().equals("y")) {
			Sonography="y";
			
			}
		else{
			Sonography="n";
			
		}
		mapForDS.put("Sonography", Sonography);
		
		
		String Echo="";
		if (request.getParameter("Echo") != null	&& request.getParameter("Echo").trim().equals("y")) {
			Echo="y";
			
			}
		else{
			Echo="n";
			
		}
		mapForDS.put("Echo", Echo);
	
		String Ultrasound="";
		if (request.getParameter("Ultrasound") != null	&& request.getParameter("Ultrasound").trim().equals("y")) {
			Ultrasound="y";
			
			}
		else{
			Ultrasound="n";
			
		}
		mapForDS.put("Ultrasound", Ultrasound);
	
		
		int pulse = 0;
		String systolic = null;
		String diastolic = null;
		Float temperature = null;
		Float bmi=0.0f;
		Float respiratoryRate = 0.0f;
		Float spo2 = 0.0f;
		String pem= null;
		String stunting= null;
		String wasting= null;
		String reviewDate = null;
		String userName = null;
		Users users=null;
		String flag = null;
		String physiotherapyrequiredId="";
		
		int tokenNoTemp=0;
		int visitNoTemp=0;
		String deptNameTemp="";
		boolean submitData = false;
		String urlDept = "";
		String departmentName = "";
		String submitFrom="";
		Integer tab=0;
		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}
		int currentPriority=0;
		if(request.getParameter("priorityName") !=null && !request.getParameter("priorityName").equals("")){
			currentPriority=Integer.parseInt(request.getParameter("priorityName"));
			
			mapForDS.put("currentPriority", currentPriority);
		}
		if (!request.getParameter("submitFrom").equals("")) {
			submitFrom = request.getParameter("submitFrom");
			mapForDS.put("submitFrom", submitFrom);
		}
		if (request.getParameter("tab")!=null && !request.getParameter("tab").equals("")) {
			tab =Integer.parseInt(request.getParameter("tab"));
		}
		if (request.getParameter("pulse")!=null && !request.getParameter("pulse").equals("")) {
			pulse = Integer.parseInt(request.getParameter("pulse"));
			mapForDS.put("pulse", pulse);
		}
		String bp="";
		if ((request.getParameter("systolic") != null	&& !request.getParameter("systolic").equals("")) && (request.getParameter("diastolic") != null	&& !request.getParameter("diastolic").equals(""))) {
			systolic = request.getParameter("systolic");
			diastolic = request.getParameter("diastolic");
			bp=systolic+"/"+diastolic;
		}
		
		mapForDS.put("bp", bp);
		if (request.getParameter("temperature") != null	&& !request.getParameter("temperature").equals("")) {
			temperature =Float.parseFloat(request.getParameter("temperature"));
			mapForDS.put("temperature", temperature);
		}
		if (request.getParameter("heightHidden") != null && !request.getParameter("heightHidden").equals("")) {
			int height =Integer.parseInt(request.getParameter("heightHidden"));
			mapForDS.put("height", height);
		}
		if (request.getParameter("weightHidden") != null	&& !request.getParameter("weightHidden").equals("")) {
			int weight =Integer.parseInt(request.getParameter("weightHidden"));
			mapForDS.put("weight", weight);
		}
		if (request.getParameter("bmi") != null	&& !request.getParameter("bmi").equals("")) {
			bmi =Float.valueOf(request.getParameter("bmi"));
			mapForDS.put("bmi", bmi);
		}
		
		if (request.getParameter("respiratoryRate") != null	&& !request.getParameter("respiratoryRate").equals("")) {
			respiratoryRate =Float.valueOf(request.getParameter("respiratoryRate"));
			mapForDS.put("respiratoryRate", respiratoryRate);
		}
		
		if (request.getParameter("spo2") != null	&& !request.getParameter("spo2").equals("")) {
			spo2 =Float.valueOf(request.getParameter("spo2"));
			mapForDS.put("spo2", spo2);
		}
		
		if (request.getParameter("pem") != null	&& !request.getParameter("pem").equals("")) {
			mapForDS.put("pem", request.getParameter("pem"));
		}
		
		if (request.getParameter("stunting") != null	&& !request.getParameter("stunting").equals("")) {
			mapForDS.put("stunting", request.getParameter("stunting"));
		}
		//JK
		if (request.getParameter("ped_mac") != null	&& !request.getParameter("ped_mac").equals("")) {
			mapForDS.put("ped_mac", request.getParameter("ped_mac"));
		}
		//JK End
		
		if (request.getParameter("wasting") != null	&& !request.getParameter("wasting").equals("")) {
			mapForDS.put("wasting", request.getParameter("wasting"));
		}
		String opdRemarks="";
		if (request.getParameter("opdRemarks")!=null && !request.getParameter("opdRemarks").equals("")) {
			opdRemarks = request.getParameter("opdRemarks");
			
		}
		String opdReview="";
		if (request.getParameter("opdReview")!=null && !request.getParameter("opdReview").equals("")) {
			mapForDS.put("opdReview", request.getParameter("opdReview"));
		}
		
		
		String summaryConsultation="";
		if (request.getParameter("summaryConsultation")!=null && !request.getParameter("summaryConsultation").equals("")) {
			summaryConsultation = request.getParameter("summaryConsultation");
			
		}
		
		if (request.getParameter("reviewDate")!=null) {
			reviewDate = request.getParameter("reviewDate");
			mapForDS.put("reviewDate", reviewDate);
		}
		if (request.getParameter("userName")!=null && !request.getParameter("userName").equals("")) {
			userName = request.getParameter("userName");
			users = (Users) session.getAttribute("users");
		}
		
		String[] snomedListArray = null;
		if (request.getParameterValues("snomedList") != null) {
			snomedListArray = (String[]) request.getParameterValues("snomedList");
		}
		String[] diagnosisIdArray = null;
		if (request.getParameterValues("diagnosisId") != null) {
			diagnosisIdArray = (String[]) request.getParameterValues("diagnosisId");
		}
		int comorbidityCount = 0;
		if (request.getParameter("comorbidityCount") != null) {
			comorbidityCount = Integer.parseInt(request.getParameter("comorbidityCount"));
		}
		
		String[] comorbidityArray = new String[comorbidityCount];
		List<String>comorbidityMonth=new ArrayList<String>();
		List<String>comorbidityYear=new ArrayList<String>();
		List<String>comorbidityRemark=new ArrayList<String>();
		
		int j = 0;
		for (int i = 0; i <comorbidityCount; i++,j++) {
			if (request.getParameter("comorbidityName" + j)!=null && !request.getParameter("comorbidityName" + j).equals("0") && !request.getParameter("comorbidityName" + j).equals("") ) {
				String comorbidityName = request.getParameter("comorbidityName" + j);
				int index1 = comorbidityName.lastIndexOf("[");
				int index2 = comorbidityName.lastIndexOf("]");
				index1++;
				comorbidityArray[i] = comorbidityName.substring(index1,	index2);
				
				if (!request.getParameter("comorbidityMonth" + j).equals("")) {
					comorbidityMonth.add(request.getParameter("comorbidityMonth" + j));
				}
				if (!request.getParameter("comorbidityYear" + j).equals("")) {
					comorbidityYear.add(request.getParameter("comorbidityYear" + j));
				}
				if (!request.getParameter("comorbidityRemark" + j).equals("")) {
					comorbidityRemark.add(request.getParameter("comorbidityRemark" + j));
				}
			}
		}	
		mapForDS.put("comorbidityArray", comorbidityArray);
		mapForDS.put("comorbidityMonth", comorbidityMonth);
		mapForDS.put("comorbidityYear", comorbidityYear);
		mapForDS.put("comorbidityRemark", comorbidityRemark);
		
		
		String diagnosis_status=request.getParameter("diagnosis_status");
		if (request.getParameter("deferredDiagnosis") != null)
			mapForDS.put("deferredDiagnosis", "y");
		else
			mapForDS.put("deferredDiagnosis", "n");
		Integer referdistrict =0;		
		Integer referhospital=hospitalId;
		if (request.getParameter("referral") != null && !request.getParameter("referral").equals("")) {
			Integer referral =Integer.parseInt(request.getParameter("referral"));
			mapForDS.put("referral", referral);
			if(referral==1){
				if (request.getParameter("referVisitDate") != null && !request.getParameter("referVisitDate").equals("")) {
					String referVisitDate=request.getParameter("referVisitDate");
					try{
						Date referalTillDate=HMSUtil.addDaysToDate(referVisitDate, 14);
						mapForDS.put("referalTillDate", referalTillDate);
					}catch(Exception e){
						e.printStackTrace();
					}	
					Date referralDate = HMSUtil.convertStringTypeDateToDateType(referVisitDate);
					mapForDS.put("referralDate", referralDate);
				}
				if (request.getParameter("referTo") != null && !request.getParameter("referTo").equals("")) {
					String referdType =request.getParameter("referTo");
					mapForDS.put("referType", referdType);
					if(referdType.equalsIgnoreCase("External")){
						if (request.getParameter("referdistrict") != null && Integer.parseInt(request.getParameter("referdistrict"))!=0) {
							referdistrict =Integer.parseInt(request.getParameter("referdistrict"));
							mapForDS.put("referdistrict", referdistrict);
						}
						if (request.getParameter("referhospital") != null && !request.getParameter("referhospital").equals("")) {
							referhospital =Integer.parseInt( request.getParameter("referhospital"));
							mapForDS.put("referhospital", referhospital);
						}
					}
				}
				
				if(request.getParameter("patientAdvise") != null && !request.getParameter("patientAdvise").equals(""))
				{
					mapForDS.put("patientAdvise", request.getParameter("patientAdvise"));
				}
				
				if(request.getParameter("referralNote") != null && !request.getParameter("referralNote").equals(""))
				{
					
					mapForDS.put("referralNote", request.getParameter("referralNote"));
				}
			}
		}
	
		if (request.getParameter("referdepartment") != null && !request.getParameter("referdepartment").equals("")) {
			Integer referdDepartment =Integer.parseInt( request.getParameter("referdepartment"));
			mapForDS.put("referdepartment", referdDepartment);
		}
		
		if (request.getParameter("refereddoctor") != null && !request.getParameter("refereddoctor").equals("")) {
			Integer refereddoctor =Integer.parseInt( request.getParameter("refereddoctor"));
			mapForDS.put("refereddoctor", refereddoctor);
		}
		Integer referredSession = 0;
		if (request.getParameter("referredSession") != null && !request.getParameter("referredSession").equals("")) {
			referredSession = Integer.parseInt( request.getParameter("referredSession"));
			mapForDS.put("referredSession", referredSession);
		}
		if (request.getParameter("referralNote") != null && !request.getParameter("referralNote").equals("")) {
			String referralNote =request.getParameter("referralNote");
			mapForDS.put("referralNote", referralNote);
		}

		if (request.getParameter("patientAdvise") != null && !request.getParameter("referralNote").equals("")) {
			String patientAdvise =request.getParameter("patientAdvise");
			mapForDS.put("patientAdvise", patientAdvise);
		}
		
		//observation start
		if (request.getParameter("admissionAdvised") != null && !request.getParameter("admissionAdvised").equals("")) {
			String admissionAdvised =request.getParameter("admissionAdvised");
			if(admissionAdvised.equalsIgnoreCase("on"))
				mapForDS.put("admissionAdvised", "y");
		}else{
				mapForDS.put("admissionAdvised", "n");
		}
		String tpatient_status="";
		if (request.getParameter("patient_expire") != null && !request.getParameter("patient_expire").equals("")) {
			String patient_status =request.getParameter("patient_expire");
			if(patient_status!=null && patient_status.equals("on")){
				tpatient_status="y";
			mapForDS.put("patient_status", "y");
			
			}
		}
		if (request.getParameter("siftedToMortuary") != null && !request.getParameter("siftedToMortuary").equals("")) {
			String mortuaryStatus =request.getParameter("siftedToMortuary");
			if(mortuaryStatus!=null && mortuaryStatus.equals("on")){
				mortuaryStatus="y";
			mapForDS.put("mortuaryStatus", "y");
			
			}
		}
		if (request.getParameter("observationStatus") != null && !request.getParameter("observationStatus").equals("")) {
			String observationStatus =request.getParameter("observationStatus");
			if(observationStatus!=null && observationStatus.equals("on"))
			mapForDS.put("observationStatus", "y");
		}
		if (request.getParameter("admissionDate") != null && !request.getParameter("admissionDate").equals("")) {
			Date admissionDate =HMSUtil.convertStringTypeDateToDateType(request.getParameter("admissionDate"));
			mapForDS.put("admissionDate", admissionDate);
		}
		if (request.getParameter("admissionWard") != null && !request.getParameter("admissionWard").equals("0")) {
			Integer admissionWard =Integer.parseInt(request.getParameter("admissionWard"));
			mapForDS.put("admissionWard", admissionWard);
		}
		int checkedPaywaradmissionId=0;
		if(request.getParameter("checkedPaywaradmission")!=null && !request.getParameter("checkedPaywaradmission").equals("0")){
			checkedPaywaradmissionId=Integer.parseInt(request.getParameter("checkedPaywaradmission"));
			mapForDS.put("checkedPaywaradmissionId", checkedPaywaradmissionId);
		}
		
		
		String lastEncounter="";
		String presentComplain = "";
		String clinicalFindings = "";
		String pastIllness = "";
		String personalHistory = "";
		String familyHistory = "";
		String medicationhistory = "";
		String generalExamination="";
		String localExamination="";
		String otherDiagnosis="";
		String systemicExamination="";
		String surgicalHistory=null;
		String permorbidPersonality=null;
		String general_appearance = null;
		String mental_status = null;
		String cognitive_function = null;
		String developmentHistory= request.getParameter("developmentHistory") ;
		String menstrualAndObstetricHistory= request.getParameter("menstrualAndObstetricHistory");
		String dietHistory= request.getParameter("dietHistory") ;
		
		String pOrS= request.getParameter("pOrS") ;
		String cervicalSmear= request.getParameter("cervicalSmear") ;
		String pOrV= request.getParameter("pOrV") ;
		String pOrR= request.getParameter("pOrR") ;
		String procedureDone= request.getParameter("procedureDone") ;
		
		String treatmentPlan = request.getParameter("treatmentPlan") ;
		String nonPharmacological = request.getParameter("nonPharmacological");
		
		
		if (request.getParameter("presentComplain") != null) {
			presentComplain = request.getParameter("presentComplain");
			mapForDS.put("presentComplain", presentComplain);
		}
		if (request.getParameter("pastIllness") != null) {
			pastIllness = request.getParameter("pastIllness");
			mapForDS.put("pastIllness", pastIllness);
		}
		
		if (request.getParameter("personalHistory") != null) {
			personalHistory = request.getParameter("personalHistory");
			mapForDS.put("personalHistory", personalHistory);
		}

		if (request.getParameter("comorbidityHistoryFromSnomed") != null) {
			String comorbidityHistoryFromSnomed = request.getParameter("comorbidityHistoryFromSnomed");
			mapForDS.put("comorbidityHistoryFromSnomed", comorbidityHistoryFromSnomed);
		}
		
		if (request.getParameter("clinicalFindings") != null) {
			clinicalFindings = request.getParameter("clinicalFindings");
			mapForDS.put("clinicalFindings", clinicalFindings);
		}
		
		if (request.getParameter("familyHistory") != null) {
			familyHistory = request.getParameter("familyHistory");
			mapForDS.put("familyHistory", familyHistory);
		}
		if (request.getParameter("medicationhistory")!=null && !request.getParameter("medicationhistory").equals("")) {
			medicationhistory = request.getParameter("medicationhistory");
			mapForDS.put("medicationhistory", medicationhistory);
		}
		if (request.getParameter("generalExaminationOPC") != null) {
			generalExamination = request.getParameter("generalExaminationOPC");
			mapForDS.put("generalExamination", generalExamination.trim());
		}
		if (request.getParameter("localExamination") !=null&& !request.getParameter("localExamination").equals("")) {
			localExamination = request.getParameter("localExamination");
			mapForDS.put("localExamination", localExamination.trim());
		}
		
		if (request.getParameter("localExamination") !=null&& !request.getParameter("localExamination").equals("")) {
			mapForDS.put("localExamination",  request.getParameter("localExamination").trim());
		}
		if (request.getParameter("localExamination") !=null&& !request.getParameter("localExamination").equals("")) {
			mapForDS.put("localExamination",  request.getParameter("localExamination").trim());
		}
		if (request.getParameter("general_appearance") !=null&& !request.getParameter("general_appearance").isEmpty()) {
			mapForDS.put("",  request.getParameter("").trim());
		}
		if (request.getParameter("mental_status") !=null&& !request.getParameter("mental_status").isEmpty()) {
			mapForDS.put("mental_status",  request.getParameter("mental_status").trim());
		}
		if (request.getParameter("cognitive_function") !=null&& !request.getParameter("cognitive_function").isEmpty()) {
			mapForDS.put("cognitive_function",  request.getParameter("cognitive_function").trim());
		}
	
		if (request.getParameter("menstrualHistory") !=null&& !request.getParameter("menstrualHistory").isEmpty()) {
			mapForDS.put("menstrualHistory",  request.getParameter("menstrualHistory").trim());
		}
		if (request.getParameter("obstreticHistory") !=null&& !request.getParameter("obstreticHistory").isEmpty()) {
			mapForDS.put("obstreticHistory",  request.getParameter("obstreticHistory").trim());
		}
		if (request.getParameter("managementPlan") !=null&& !request.getParameter("managementPlan").isEmpty()) {
			mapForDS.put("managementPlan",  request.getParameter("managementPlan").trim());
		}
		
		
		if (request.getParameter("OtherDiagnosis") !=null&& !request.getParameter("OtherDiagnosis").equals("")) {
			otherDiagnosis = request.getParameter("OtherDiagnosis");
			mapForDS.put("otherDiagnosis", otherDiagnosis.trim());
		}
		
		if (request.getParameter("systemicExamination") !=null&& !request.getParameter("systemicExamination").equals("")) {
			systemicExamination = request.getParameter("systemicExamination");
			mapForDS.put("systemicExamination", systemicExamination.trim());
		}
	
		String physicalExamination="";
		if (request.getParameter("physicalExamination") !=null&& !request.getParameter("physicalExamination").equals("")) {
			physicalExamination = request.getParameter("physicalExamination");
			
	
		}
		if (request.getParameter("surgicalHistory") !=null&& !request.getParameter("surgicalHistory").equals("")) {
			mapForDS.put("surgicalHistory",request.getParameter("surgicalHistory"));
		}
		if (request.getParameter("permorbidPersonality") !=null&& !request.getParameter("permorbidPersonality").equals("")) {
			mapForDS.put("permorbidPersonality",request.getParameter("permorbidPersonality"));
		}
		
		if (request.getParameter("earExamination") != null) {
			mapForDS.put("earExamination",request.getParameter("earExamination").trim());
		}
		if (request.getParameter("nosePnsExamination") != null) {
			mapForDS.put("nosePnsExamination", request.getParameter("nosePnsExamination").trim());
		}
		if (request.getParameter("oralCavityThroatExamination") != null) {
			mapForDS.put("oralCavityThroatExamination", request.getParameter("oralCavityThroatExamination").trim());
		}
		if (request.getParameter("neckExamination") != null) {
			mapForDS.put("neckExamination", request.getParameter("neckExamination").trim());
		}
		if (request.getParameter("developmentHistory") != null) {
			mapForDS.put("developmentHistory", request.getParameter("developmentHistory").trim());
		}
		if (request.getParameter("dietHistory") != null) {
			mapForDS.put("dietHistory", request.getParameter("dietHistory").trim());
		}
		if (request.getParameter("socioEconomicHistory") != null) {
			mapForDS.put("socioEconomicHistory", request.getParameter("socioEconomicHistory").trim());
		}
		
		if (request.getParameter("pastHistory") != null) {
			mapForDS.put("pastHistory", request.getParameter("pastHistory").trim());
		}
		
		if (request.getParameter("antenatalHistory") != null) {
			mapForDS.put("antenatalHistory", request.getParameter("antenatalHistory").trim());
		}
		//-----
		if (request.getParameter("extraOralExamination") != null) {
			mapForDS.put("extraOralExamination", request.getParameter("extraOralExamination").trim());
		}
		
		if (request.getParameter("intraOralExamination") != null) {
			mapForDS.put("intraOralExamination", request.getParameter("intraOralExamination").trim());
		}
		
		if (request.getParameter("chairSideInvestigations") != null) {
			mapForDS.put("chairSideInvestigations", request.getParameter("chairSideInvestigations").trim());
		}
		if (request.getParameter("orderingProcedure") != null) {
			mapForDS.put("orderingProcedure", request.getParameter("orderingProcedure").trim());
		}
		
		String dentureSecondarySelection[] = request.getParameterValues("dentureSecondaryExisting"); 
		StringBuilder  dentureSecondarySelectionValues=new StringBuilder();
		if (dentureSecondarySelection != null && dentureSecondarySelection.length != 0) {
			for (int i = 0; i < dentureSecondarySelection.length; i++) {
				dentureSecondarySelectionValues.append(dentureSecondarySelection[i]).append(",");
			}
			}
		
		mapForDS.put("physicalExamination", physicalExamination.trim());
		mapForDS.put("developmentHistory", developmentHistory);
		mapForDS.put("menstrualAndObstetricHistory", menstrualAndObstetricHistory);
		mapForDS.put("dietHistory", dietHistory);
		mapForDS.put("pOrS", pOrS);
		mapForDS.put("cervicalSmear", cervicalSmear);
		mapForDS.put("pOrV", pOrV);
		mapForDS.put("pOrR", pOrR);
		mapForDS.put("procedureDone", procedureDone);
		mapForDS.put("treatmentPlan", treatmentPlan);
		mapForDS.put("nonPharmacological", nonPharmacological);
		mapForDS.put("dentureSecondarySelectionValues", dentureSecondarySelectionValues);
		
		
		String consultationDate = request.getParameter("consultationDate");
		String consultationTime = request.getParameter("consultationTime");
		
		/*Allergy Grid Start*/
		List<Integer> allergyType = new ArrayList<Integer>();
		List<String> allergen=new ArrayList<String>();
		List<Integer> saverityCodes=new ArrayList<Integer>();
		List<String> allergymonth=new ArrayList<String>();
		List<String> allergyyear=new ArrayList<String>();
		List<String> allergystatus=new ArrayList<String>();
		List<Integer> allergyDetailIds=new ArrayList<Integer>();
		List<String> allergyRemarkList=new ArrayList<String>();
		
		Integer allergyHeaderIds=0;
		if (request.getParameter("allergyHeaderIds")!=null && Integer.parseInt(request.getParameter("allergyHeaderIds")) != 0) {
			allergyHeaderIds = Integer.parseInt(request.getParameter("allergyHeaderIds"));
		}
		int allergyCount = 0;
		if (request.getParameter("allergyCount")!=null && Integer.parseInt(request.getParameter("allergyCount")) != 0) {
			allergyCount = Integer.parseInt(request.getParameter("allergyCount"));
		}
		for ( j = 0; j <=allergyCount; j++) {
			if (request.getParameter("allergyType" + j)!=null && !request.getParameter("allergyType" + j).equals("0") && !request.getParameter("allergyType" + j).equals("") ) {
				allergyType.add(Integer.parseInt(request.getParameter("allergyType" + j)));

				Integer allergyDetailId=null;
				if (!request.getParameter("allergyDetailId" + j).equals("")) {
					allergyDetailId =Integer.parseInt(request.getParameter("allergyDetailId" + j));
				}
				
				if (!request.getParameter("allergyName" + j).equals("")) {
					allergen.add(request.getParameter("allergyName" + j));
				}
				if (request.getParameter("allergyseverity" + j)!=null   && !request.getParameter("allergyseverity" + j).equals("")) {
					saverityCodes.add(Integer.parseInt(request.getParameter("allergyseverity" + j)));
				}
				if (request.getParameter("allergymonth" + j)!=null && !request.getParameter("allergymonth" + j).equals("")) {
					allergymonth.add(request.getParameter("allergymonth" + j));
				}
				if (request.getParameter("allergyyear" + j)!=null  && !request.getParameter("allergyyear" + j).equals("")) {
					allergyyear.add(request.getParameter("allergyyear" + j));
				}
				if (request.getParameter("allergystatus" + j)!=null  &&  !request.getParameter("allergystatus" + j).equals("")) {
					allergystatus.add(request.getParameter("allergystatus" + j));
				}
				if (request.getParameter("allergy_remarks" + j)!=null  &&  !request.getParameter("allergy_remarks" + j).equals("")) {
					allergyRemarkList.add(request.getParameter("allergy_remarks" + j));
				}
				allergyDetailIds.add(allergyDetailId);
			}
		}	
		
		mapForDS.put("allergyHeaderIds", allergyHeaderIds);
		mapForDS.put("allergyDetailIds", allergyDetailIds);
		mapForDS.put("allergyType", allergyType);
		mapForDS.put("allergen", allergen);
		mapForDS.put("saverityCodes", saverityCodes);
		mapForDS.put("allergymonth", allergymonth);
		mapForDS.put("allergyyear", allergyyear);
		mapForDS.put("allergystatus", allergystatus);
		mapForDS.put("allergyRemarkList", allergyRemarkList);
		
		/*Allergy Grid: end*/
		
		/* Prescription grid: start*/
		List<String> pvmsNoList = new ArrayList<String>();
		List<String> manufacturerList=new ArrayList<String>();
		List<String> manufacturerIdList=new ArrayList<String>();
		List<String> brandIdList=new ArrayList<String>();

		List<Integer> parkPrescriptionIds = new ArrayList<Integer>();
		List<Integer> frequencyList = new ArrayList<Integer>();
		List<Float> dosageList = new ArrayList<Float>();
		List<Float> totalList = new ArrayList<Float>();
		List<Float> actualTotalAfterMixList = new ArrayList<Float>(); //added by amit das on 19-11-2016
		List<Integer> noOfDaysList = new ArrayList<Integer>();
		List<Integer> routes = new ArrayList<Integer>();
		List<Integer> instrunctionList = new ArrayList<Integer>();
		List<String> spLinstrunctionList = new ArrayList<String>();
		
		List<Date> startDates = new ArrayList<Date>();
		List<Date> endDates = new ArrayList<Date>();
		List<String> dpStatus = new ArrayList<String>();
		List<String> durationPrescriptionList = new ArrayList<String>();
		List<String> prescription_availableStatusList = new ArrayList<String>();
		String prescription_availableStatus="";
		
		/* Start Added By Om Tripathi  24/08/2017*/
		List<String> nomenclatureList = new ArrayList<String>();
		List<Integer> itemOutList = new ArrayList<Integer>();
		List<Integer> frequencyOutList = new ArrayList<Integer>();
		List<Float> dosageOutList = new ArrayList<Float>();
		List<Float> totalOutList = new ArrayList<Float>();
		List<Integer> noOfDaysOutList = new ArrayList<Integer>();
		List<Integer> routesOut = new ArrayList<Integer>();
		List<Integer> instrunctionOutList = new ArrayList<Integer>();
		List<String> durationPrescriptionOutList = new ArrayList<String>();
		List<Float> actualTotalAfterMixOutList = new ArrayList<Float>(); 
		List<String> spLinstrunctionOutList = new ArrayList<String>();
		List<Date> startDatesOut = new ArrayList<Date>();
		List<Date> endDatesOut = new ArrayList<Date>();
		List<String> dpStatusOut = new ArrayList<String>();
		List<String> ctList = new ArrayList<String>();
		
		List<Integer> unitsList = new ArrayList<Integer>();
		List<String> unitTables = new ArrayList<String>();
		List<String> spinstrunctionOutList = new ArrayList<String>();
		/*End Added By Om Tripathi  24/08/2017*/
		Integer pHeaderId = 0;
		if (null !=request.getParameter("pHeaderId") && Integer.parseInt(request.getParameter("pHeaderId")) >= 0) {
			pHeaderId = Integer.parseInt(request.getParameter("pHeaderId"));
		}
		int hdb = 0;
		if (null !=request.getParameter("pTabhdb") && Integer.parseInt(request.getParameter("pTabhdb")) >= 0) {
		
			hdb = Integer.parseInt(request.getParameter("pTabhdb"));
		}
		String[] pvmsArr = new String[hdb+1];
		j = 0;
		StringBuffer parkPrescriptions=new StringBuffer();
		for (int i = 0; i <=hdb; i++)  {
			if (request.getParameter("nomenclaturepTab" + j)!=null && !request.getParameter("nomenclaturepTab" + j).equals("")) {

				String nomenclature = request.getParameter("nomenclaturepTab" + j);
				int index1 = nomenclature.lastIndexOf("[");
				int index2 = nomenclature.lastIndexOf("]");
				index1++;
				pvmsArr[i] = nomenclature.substring(index1,	index2);
				parkPrescriptions.append(nomenclature.substring(0, index1-1)+"|");
				String pvmsNo=null;
                if(request.getParameter("pvmsNopTab"+j)!=null)
                {
                	pvmsNo = request.getParameter("pvmsNopTab"+j);

                }
                
                String durationPrescription=null;
        		if(request.getParameter("durationPrescriptionTab"+j)!=null){
        			durationPrescription = request.getParameter("durationPrescriptionTab"+j);
        			durationPrescriptionList.add(durationPrescription);
        		}
        	
                
                
                int parkPrescriptionId=0;
		 		if(request.getParameter("parkPrescriptionIds"+ j)!=null && !request.getParameter("parkPrescriptionIds"+ j).equals("")){
		 			parkPrescriptionId = Integer.parseInt(request.getParameter("parkPrescriptionIds"+ j));
		 		}
                
				int frequencyId=0;
		 		if(request.getParameter("frequencypTab"+ j)!=null && !request.getParameter("frequencypTab"+ j).equals("")){
		 			frequencyId = Integer.parseInt(request.getParameter("frequencypTab"+ j));
		 		}
				
		 		int noOfDays=0;
		 		if(request.getParameter("noOfDayspTab"+ j)!=null && !request.getParameter("noOfDayspTab"+ j).equals("")){
		 			noOfDays = Integer.parseInt(request.getParameter("noOfDayspTab"+ j));
		 		}
		 		Float dosage=0.0f;
		 		if(request.getParameter("dosagepTab" + j)!=null && !request.getParameter("dosagepTab" + j).equals("")){
		 			dosage = Float.valueOf(request.getParameter("dosagepTab" + j));
		 		}
		 		
		 		Integer instrunction=0;
		 		if(request.getParameter("instrunctionpTab" + j)!=null && !request.getParameter("instrunctionpTab" + j).equals("")){
		 			instrunction = Integer.parseInt(request.getParameter("instrunctionpTab" + j));
		 		}
		 		String splInstrunctionpTab="";
		 		if(request.getParameter("splInstrunctionpTab" + j)!=null && !request.getParameter("splInstrunctionpTab" + j).equals("")){
		 			splInstrunctionpTab = request.getParameter("splInstrunctionpTab" + j);
		 		}
		 		
		 		if(request.getParameter("splInstrunction" + j)!=null && !request.getParameter("splInstrunction" + j).equals("")){
		 			splInstrunctionpTab = request.getParameter("splInstrunction" + j);
		 		}
		 		Integer route=0;
		 		if(request.getParameter("routepTab" + j)!=null && !request.getParameter("routepTab" + j).equals("")){
		 			route = Integer.parseInt(request.getParameter("routepTab" + j));
		 		}
                  else if(request.getParameter("route" + j)!=null && !request.getParameter("route" + j).equals("")){
		 			
		 			route = Integer.parseInt(request.getParameter("route" + j));
		 			
		 		}
		 		
		 		// added by amit das on 19-11-2016
		 		float actualTotalAfterMix=0.0f;
		 		if(request.getParameter("mixable" + j)!=null && request.getParameter("mixable" + j).equalsIgnoreCase("Y")){
		 			
		 			if(request.getParameter("actualTotalAfterMix" + j)!=null && !request.getParameter("actualTotalAfterMix" + j).equals("")){
		 				actualTotalAfterMix = Float.parseFloat(request.getParameter("actualTotalAfterMix" + j));
			 		}
		 			
		 		}
		 		
		 		float total=0.0f;
		 		if(request.getParameter("totalpTab" + j)!=null && !request.getParameter("totalpTab" + j).equals("")){
		 			total = Float.parseFloat(request.getParameter("totalpTab" + j));
		 		}
		 		
		 		if(request.getParameter("total" + j)!=null && !request.getParameter("total" + j).equals("")){
		 			total = Float.parseFloat(request.getParameter("total" + j));
		 		}	 		
		 		
		 		if(request.getParameter("ct" + j) != null){
					ctList.add("y");
				}	else {
					ctList.add("n");
				}
		 		
		 		
		 		Date startDate=new Date();
		 		Date endDate=new Date();
	 			if(request.getParameter("startDate" + j)!=null && !request.getParameter("startDate" + j).equals("")){
		 			startDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter("startDate" + j));
		 		}
	 			if(request.getParameter("endDate" + j)!=null && !request.getParameter("endDate" + j).equals("")){
		 			endDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter("endDate" + j));
		 		}
	 			
	 			if(request.getParameter("prescription_availableStatuspTab" + j)!=null && !request.getParameter("prescription_availableStatuspTab" + j).equals("")){
	 				prescription_availableStatus = request.getParameter("prescription_availableStatuspTab" + j);
		 		}else{
		 			prescription_availableStatus = null;
		 		}
	 			prescription_availableStatusList.add(prescription_availableStatus);
	 			parkPrescriptionIds.add(parkPrescriptionId);
				pvmsNoList.add(pvmsArr[i]);
				frequencyList.add(frequencyId);
				dosageList.add(dosage);
				actualTotalAfterMixList.add(actualTotalAfterMix); // added by amit das in 19-11-2016
				totalList.add(total);
				noOfDaysList.add(noOfDays);
				
				spLinstrunctionList.add(splInstrunctionpTab);
				instrunctionList.add(instrunction);
				routes.add(route);
				startDates.add(startDate);
				endDates.add(endDate);
			}
			j++;
		}
		
		/* Added By Om Tripathi 24/08/2017 Start********   */
		
		/* Prescription Out side Medicine grid: start*/
		String nomenclatures=null;
		
		int hdbOut = 0;
		if (null !=request.getParameter("hdb1") && Integer.parseInt(request.getParameter("hdb1")) >= 0) {
			hdbOut = Integer.parseInt(request.getParameter("hdb1"));
		}
		int thdb = 0;
		if (null !=request.getParameter("hdb") && Integer.parseInt(request.getParameter("hdb")) >= 0) {
			thdb = Integer.parseInt(request.getParameter("hdb"));
		}
		int taperHdb=0;
		if (null !=request.getParameter("taperedMedicineHdb") && Integer.parseInt(request.getParameter("taperedMedicineHdb")) >= 0) {
			taperHdb = Integer.parseInt(request.getParameter("taperedMedicineHdb"));
		}
		//added by govind 23-09-2017
		List<TaperedMedicineUtil> taperUtilList=new ArrayList<TaperedMedicineUtil>();
		for (int i = 0; i <=thdb; i++)  {
		Integer itemId =0;
		if (request.getParameter("nomenclature" + i)!=null && !request.getParameter("nomenclature" + i).equals("")) {

			 String nomencls = request.getParameter("nomenclature" + i);
			 int index1 = nomencls.lastIndexOf("(");
				int index2 = nomencls.lastIndexOf(")");
				if(index1>=0 ){
					index1++;
					itemId = Integer.parseInt(nomencls.substring(index1,index2));
				}
					for(int t=1;t<=taperHdb;t++){
							if(box.get("taperedItemId"+i+"_"+t)!=null){
								Integer itemId2=box.getInt("taperedItemId"+i+"_"+t);
							if(itemId.equals(itemId2)){
								TaperedMedicineUtil tap=new TaperedMedicineUtil();
								tap.setItemId(box.getInt("taperedItemId"+i+"_"+t));
							if(box.get("taperedFrequency"+i+"_"+t)!=null){
								tap.setFrequency(box.getInt("taperedFrequency"+i+"_"+t));
							}
							if(box.get("taperedDosage"+i+"_"+t)!=null){
								tap.setDosage(box.getString("taperedDosage"+i+"_"+t));
							}
							if(box.get("taperedDosageCount"+i+"_"+t)!=null){
								tap.setDosageCount(new BigDecimal(box.getString("taperedDosageCount"+i+"_"+t)));
							}
							if(box.get("taperedDuration"+i+"_"+t)!=null){
								tap.setDuration(box.getInt("taperedDuration"+i+"_"+t));
							}
							if(box.get("total"+i+"_"+t)!=null){
								tap.setTotal(new BigDecimal(box.getString("total"+i+"_"+t)));
							}
							taperUtilList.add(tap);
						  }
						}
					}
				}
		}
		//added by govind 23-09-2017 end
		int l = 0;
		List<Integer> prescriptionIdOutList =new ArrayList<>();
		for (int i = 0; i <=hdbOut; i++)  {
			int itemId =0;
			if (request.getParameter("nomenclatures" + l)!=null && !request.getParameter("nomenclatures" + l).equals("")) {

				 String nomencls = request.getParameter("nomenclatures" + l);
				 
				 int index1 = nomencls.lastIndexOf("[");
					int index2 = nomencls.lastIndexOf("]");
					if(index1>=0 ){
						index1++;
						itemId = Integer.parseInt(nomencls.substring(index1,	index2));
					
						nomenclatures = nomencls.substring(0,	index1-1);
					}else{
						nomenclatures = nomencls;
					}
					
		 		Float dosage=0.0f;
		 		if(request.getParameter("dosagesOut" + l)!=null && !request.getParameter("dosagesOut" + l).equals("")){
		 			dosage = Float.valueOf(request.getParameter("dosagesOut" + l));
		 		}
		 	
		 		int prescriptionIdOut=0;
		 		if(request.getParameter("prescriptionIdOut"+ l)!=null && !request.getParameter("prescriptionIdOut"+ l).equals("")){
		 			prescriptionIdOut = Integer.parseInt(request.getParameter("prescriptionIdOut"+ l));
		 		}
		 		int frequencyId=0;
		 		if(request.getParameter("frequencyValueOut"+ l)!=null && !request.getParameter("frequencyValueOut"+ l).equals("")){
		 			frequencyId = Integer.parseInt(request.getParameter("frequencyValueOut"+ l));
		 		}
		 		
		 		int noOfDays=0;
		 		if(request.getParameter("noOfDaysOut"+ l)!=null && !request.getParameter("noOfDaysOut"+ l).equals("")){
		 			noOfDays = Integer.parseInt(request.getParameter("noOfDaysOut"+ l)); //duration
		 		}
		 		
		 		Integer routeOut=0;
		 		if(request.getParameter("routesOut" + l)!=null && !request.getParameter("routesOut" + l).equals("")){
		 			routeOut = Integer.parseInt(request.getParameter("routesOut" + l));
		 		}
		 		
		 		Integer instrunctions=0;
		 		if(request.getParameter("instrunctionOut" + l)!=null && !request.getParameter("instrunctionOut" + l).equals("")){
		 			instrunctions = Integer.parseInt(request.getParameter("instrunctionOut" + l));
		 		}
		 		
		 		String splInstrunctions="";
		 		if(request.getParameter("splInstrunctionsOut" + l)!=null && !request.getParameter("splInstrunctionsOut" + l).equals("")){
		 			splInstrunctions = request.getParameter("splInstrunctionsOut" + l);
		 		}
		 		
		 		float total=0.0f;
		 		if(request.getParameter("totalOut" + l)!=null && !request.getParameter("totalOut" + l).equals("")){
		 			total = Float.parseFloat(request.getParameter("totalOut" + l));
		 		}
		 		String unitLables=""; 
		 		if(request.getParameter("unitLables" + l)!=null && !request.getParameter("unitLables" + l).equals("")){
		 			unitLables = request.getParameter("unitLables" + l); //unit tables string quntity values
		 		}
		 		
		 		
		 		Date startDate=new Date();
		 		Date endDate=new Date();
	 			if(request.getParameter("startDate" + l)!=null && !request.getParameter("startDate" + l).equals("")){
		 			startDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter("startDate" + l));
		 		}
	 			if(request.getParameter("endDate" + l)!=null && !request.getParameter("endDate" + l).equals("")){
		 			endDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter("endDate" + l));
		 		}
	 			nomenclatureList.add(nomenclatures);
	 			prescriptionIdOutList.add(prescriptionIdOut);
	 			itemOutList.add(itemId);
				frequencyOutList.add(frequencyId);
				dosageOutList.add(dosage);
				 
				totalOutList.add(total);
				noOfDaysOutList.add(noOfDays);
				instrunctionOutList.add(instrunctions);
				routesOut.add(routeOut);
				startDatesOut.add(startDate);
				endDatesOut.add(endDate);
				//unitsList.add(Units);
				unitTables.add(unitLables);
				spinstrunctionOutList.add(splInstrunctions);
			
				
			}
			l++;
		}
		mapForDS.put("taperUtilList", taperUtilList);
		
		/* Added By Om Tripathi 24/08/2017 End **************************************************************************************************************/
		mapForDS.put("unitsList", unitsList);
		mapForDS.put("unitTables", unitTables);
		mapForDS.put("spinstrunctionOutList", spinstrunctionOutList);
		mapForDS.put("frequencyOutList",frequencyOutList);
		mapForDS.put("nomenclatureList",nomenclatureList);
		mapForDS.put("prescriptionIdOutList",prescriptionIdOutList);
		mapForDS.put("dosageOutList",dosageOutList);
		mapForDS.put("itemOutList",itemOutList);
		//mapForDS.put("actualTotalAfterMixOutList",actualTotalAfterMixOutList);
		mapForDS.put("totalOutList",totalOutList);
		mapForDS.put("noOfDaysOutList",noOfDaysOutList);
		mapForDS.put("instrunctionOutList",instrunctionOutList);
		mapForDS.put("startDatesOut",startDatesOut);
		mapForDS.put("endDatesOut",endDatesOut);
		mapForDS.put("routesOut",routesOut);
		
		mapForDS.put("durationPrescriptionList",durationPrescriptionList);
		mapForDS.put("prescription_availableStatusList", prescription_availableStatusList);
		mapForDS.put("pHeaderId", pHeaderId);
		mapForDS.put("parkPrescriptionIds", parkPrescriptionIds);
		mapForDS.put("parkPrescriptions", parkPrescriptions);
		mapForDS.put("pvmsNoList", pvmsNoList);
		mapForDS.put("manufacturerList", manufacturerList);
		mapForDS.put("manufacturerIdList", manufacturerIdList);
		mapForDS.put("brandIdList", brandIdList);

		mapForDS.put("frequencyList", frequencyList);
		mapForDS.put("dosageList", dosageList);
 		mapForDS.put("noOfDaysList", noOfDaysList);
 		mapForDS.put("ctList", ctList);
		mapForDS.put("routes", routes);
		mapForDS.put("instrunctionsList", instrunctionList);
		mapForDS.put("spLinstrunctionList", spLinstrunctionList);
		mapForDS.put("totalList", totalList);
		mapForDS.put("actualTotalAfterMixList", actualTotalAfterMixList); // added by amit das in 19-11-2016
		mapForDS.put("startDatesList", startDates);
		mapForDS.put("endDatesList", endDates);
		mapForDS.put("dpStatusList", dpStatus);

		/* Prescription grid: end*/
		
		/*NursingCare grid: start*/
		List<Integer> parkNuringIds = new ArrayList<Integer>();
		List<String> treatmentProcedureNameList = new ArrayList<String>();
		List<Integer> treatmentFrequencyList = new ArrayList<Integer>();
		List<Integer> treatmentNoOfDaysList = new ArrayList<Integer>();
		List<String>  treatmentRemarkList = new ArrayList<String>();
		List<Integer> treatmentAlertList = new ArrayList<Integer>();

		Integer procedureHeaderId = 0;
		if (request.getParameter("procedureHeaderId")!=null && Integer.parseInt(request.getParameter("procedureHeaderId")) >= 0) {
			procedureHeaderId = Integer.parseInt(request.getParameter("procedureHeaderId"));
		}	
		int nursinghdb = 0;
		if (request.getParameter("nursinghdb")!=null && Integer.parseInt(request.getParameter("nursinghdb"))>=0) {
			nursinghdb = Integer.parseInt(request.getParameter("nursinghdb"));
		}
		pvmsArr = new String[nursinghdb+1];
		j = 0;
		for (int i = 0; i <=nursinghdb; i++)  {
				if(request.getParameter("procedureName_nursing" + j)!=null && !request.getParameter("procedureName_nursing" + j).equals("")){
					String procedureName = request.getParameter("procedureName_nursing" + j);
					int index1 = procedureName.lastIndexOf("[");
					int index2 = procedureName.lastIndexOf("]");
					index1++;
					pvmsArr[i] = procedureName.substring(index1,	index2);
					
					treatmentProcedureNameList.add(pvmsArr[i] );
					int procedureDetailId=0;
			 		if(request.getParameter("procedureDetailId"+ j)!=null && !request.getParameter("procedureDetailId"+ j).equals("")){
			 			procedureDetailId = Integer.parseInt(request.getParameter("procedureDetailId"+ j));
			 		}
			 		parkNuringIds.add(procedureDetailId);
					
					int freaquency=0;
			 		if(request.getParameter("frequency_nursing"+ j)!=null && !request.getParameter("frequency_nursing"+ j).equals("")){
			 			freaquency = Integer.parseInt(request.getParameter("frequency_nursing"+ j));
			 			treatmentFrequencyList.add(freaquency);
			 		}
					
			 		int noOfDays=0;
			 		if(request.getParameter("noOfDays_nursing"+ j)!=null && !request.getParameter("noOfDays_nursing"+ j).equals("")){
			 			noOfDays = Integer.parseInt(request.getParameter("noOfDays_nursing"+ j));
			 			treatmentNoOfDaysList.add(noOfDays);
			 		}

			 		String remark_nursing="";
			 		if(request.getParameter("remark_nursing"+ j)!=null && !request.getParameter("remark_nursing"+ j).equals("")){
			 			remark_nursing = request.getParameter("remark_nursing"+ j);
			 			treatmentRemarkList.add(remark_nursing);
			 		}
			 		
			 		String alert="";
		 			if(request.getParameter("alert_nursing" + j)!=null && !request.getParameter("alert_nursing" + j).equals("")){
		 				alert = request.getParameter("alert_nursing" + j);
		 				if(alert.equals("on")){
		 					treatmentAlertList.add(1);
		 				}
			 		}
				}
			j++;
		}
		mapForDS.put("procedureHeaderId", procedureHeaderId);
		mapForDS.put("parkNuringIds", parkNuringIds);
		mapForDS.put("nursingprocedure", treatmentProcedureNameList);
		mapForDS.put("nursingfrequency", treatmentFrequencyList);
		mapForDS.put("nursingdays", treatmentNoOfDaysList);
		mapForDS.put("nursingremarks", treatmentRemarkList);
		mapForDS.put("nursingalert", treatmentAlertList);
		
		/*NursingCare grid: end*/
		
		/*Surgery grid: start*/
		
		List<Integer> parkSurgeryIds = new ArrayList<Integer>();
		treatmentProcedureNameList = new ArrayList<String>();
		treatmentRemarkList = new ArrayList<String>();
		List<Date> tentativeDateList = new ArrayList<Date>();
		List<String> pacRequestList=new ArrayList<String>();
		
		int surgeryHeaderId = 0;
		if (request.getParameter("surgeryHeaderId")!=null && Integer.parseInt(request.getParameter("surgeryHeaderId")) >= 0) {
			surgeryHeaderId = Integer.parseInt(request.getParameter("surgeryHeaderId"));
		}
		int surgeryhdb = 0;
		if (request.getParameter("surgeryhdb")!=null && Integer.parseInt(request.getParameter("surgeryhdb")) >= 0) {
			surgeryhdb = Integer.parseInt(request.getParameter("surgeryhdb"));
		}
		pvmsArr = new String[surgeryhdb+1];
		j = 0;
		for (int i = 0; i <=surgeryhdb; i++)  {
			if(request.getParameter("procedureName_surgery" + j)!=null && !request.getParameter("procedureName_surgery" + j).equals("")){
				
				pvmsArr[i]=request.getParameter("surgery_code_id" + j).trim();
				treatmentProcedureNameList.add(pvmsArr[i]);
		 		
				int surgeryDetailsId=0;
		 		if(request.getParameter("surgeryDetailsId"+ j)!=null && !request.getParameter("surgeryDetailsId"+ j).equals("")){
		 			surgeryDetailsId = Integer.parseInt(request.getParameter("surgeryDetailsId"+ j));
		 		}
		 		parkSurgeryIds.add(surgeryDetailsId);
				Date tentativeDate=new Date();
	 			if(request.getParameter("tentativeDate" + j)!=null && !request.getParameter("tentativeDate" + j).equals("")){
	 				tentativeDate = HMSUtil.convertStringTypeDateToDateType(request.getParameter("tentativeDate" + j));
	 				tentativeDateList.add(tentativeDate);
	 				
		 		}
	 			
	 			String remark_surgery="";
		 		if(request.getParameter("remark_surgery"+ j)!=null && !request.getParameter("remark_surgery"+ j).equals("")){
		 			remark_surgery = request.getParameter("remark_surgery"+ j);
		 			treatmentRemarkList.add(remark_surgery);
		 		}
		 		
		 		if(request.getParameter("chkpacNeed"+ j)!=null && !request.getParameter("chkpacNeed"+ j).equals("")){
		 			pacRequestList.add(request.getParameter("chkpacNeed"+ j));
		 		}
		 		
		 	
			}
			j++;
		}
		mapForDS.put("surgeryHeaderId", surgeryHeaderId);
		mapForDS.put("parkSurgeryIds", parkSurgeryIds);
		mapForDS.put("surgeryprocedure", treatmentProcedureNameList);
		mapForDS.put("tentativeDate", tentativeDateList);

		mapForDS.put("surgeryremarks", treatmentRemarkList);
		mapForDS.put("pacRequestList", pacRequestList);

		/*Surgery grid: end*/
		
		/**
		 * Snomed Data for history fields
		 */
		 int snomedCount = 0;
		 List<String> snomedIds = new ArrayList<String>();
		 List<String> snomedDescs = new ArrayList<String>();
		 List<String> fieldTypes = new ArrayList<String>();
		 
		 if(request.getParameter("snomedCount")!=null){
			 snomedCount = Integer.parseInt(request.getParameter("snomedCount"));
		 }
		 
		 for (int i = 1; i <=snomedCount; i++)  {
			 if(request.getParameter("snomedId" + i)!=null && !request.getParameter("snomedId" + i).equals("")){
				 snomedIds.add(request.getParameter("snomedId" + i));
				 if(request.getParameter("snomedDesc" + i)!=null && !request.getParameter("snomedDesc" + i).equals("")){
					 snomedDescs.add(request.getParameter("snomedDesc" + i));
				 }
				 if(request.getParameter("fieldType" + i)!=null && !request.getParameter("fieldType" + i).equals("")){
					 fieldTypes.add(request.getParameter("fieldType" + i));
				 }
				 
			 }
		 }
		 mapForDS.put("snomedIds", snomedIds);
		 mapForDS.put("snomedDescs", snomedDescs);
		 mapForDS.put("fieldTypes", fieldTypes);
		/**
		 * 
		 */
		
		
		// template---------------
		List<String> chargeCodeIdList = new ArrayList<String>();
		List<String> clinicalList = new ArrayList<String>();
		List<String> availableStatusList = new ArrayList<String>();
		List<String> parkInvestigationIds = new ArrayList<String>();

		int hiddenValue = 0;
		if (request.getParameter("hiddenValue")!=null && !request.getParameter("hiddenValue").equals("")) {
			hiddenValue = Integer.parseInt(request.getParameter("hiddenValue"));
		}
		
		
		String dhHeaderIds = "";
		int invHeaderIds = 0;
		if (request.getParameter("dhHeaderIds")!=null && !request.getParameter("dhHeaderIds").equals("")) {
			dhHeaderIds = request.getParameter("dhHeaderIds");
			
		}
		String[] chargeCodeIdArr = new String[hiddenValue+1];

		//method return id rate

		List<MasChargeCode> masChargeCodeList = new ArrayList<MasChargeCode>();
		Map<String, Object> mapCharge = new HashMap<String, Object>();
		String clinicalNotes=null;
		String availableStatus=null;
		int tokenForPhysio=0;
		if(physiotherapyrequiredId!=null)
		{
			if(physiotherapyrequiredId.equalsIgnoreCase("y"))
			{
				int deptId=81;
				map=opdHandlerService.submitforPhysio(empId,deptId,hinId);
				if(map.get("tokenNoTemp")!=null){
					tokenForPhysio=(Integer)map.get("tokenNoTemp");
					}
				if(map.get("visitNoTemp")!=null){
					visitNoTemp=(Integer)map.get("visitNoTemp");
					}

				map = opdHandlerService.getMasChargeCode();
	
				 if(map.get("masChargeCodeList")!=null)
				 {
					 masChargeCodeList =(List<MasChargeCode>)map.get("masChargeCodeList");
					  for(MasChargeCode masCharge :masChargeCodeList)
					  {
						  mapCharge = opdHandlerService.getChargeCodeDetails(masCharge.getChargeCodeCode().toString(),hinId);
						  if(mapCharge.get("chargeId")!=null)
						  {
							  chargeCodeIdList.add(mapCharge.get("chargeId").toString());
						  }
						  clinicalList.add(clinicalNotes);
					  }
				 }
			}
		}
		StringBuffer parkInvestigations=new StringBuffer();
		for (int i = 0; i <=hiddenValue; i++) {
			if (request.getParameter("chargeCodeName" + i)!=null && !request.getParameter("chargeCodeName" + i).equals("") ) {
				String chargeCodeNameWithId = request.getParameter("chargeCodeName" + i);
				
				int index1 = chargeCodeNameWithId.lastIndexOf("[");
				int index2 = chargeCodeNameWithId.lastIndexOf("]");
				index1++;
				chargeCodeIdArr[i] = chargeCodeNameWithId.substring(index1,index2);
				parkInvestigations.append(chargeCodeNameWithId.substring(0, index1-1)+"|");
				chargeCodeIdList.add(chargeCodeIdArr[i]);
				
				clinicalNotes = request.getParameter("clinicalNotes"+ i);
				clinicalList.add(clinicalNotes);
				
				availableStatus = request.getParameter("availableStatus"+ i);
				availableStatusList.add(availableStatus);
				
				String parkInvestigationIdDtId= request.getParameter("parkInvestigationId"+ i);
		 		parkInvestigationIds.add(parkInvestigationIdDtId);
			}
		}
		String diagnosisCheck = "";
		if(request.getParameter("diagnosisCheck") != null){
			diagnosisCheck =(String)request.getParameter("diagnosisCheck");
		}
		mapForDS.put("diagnosisCheck", diagnosisCheck);
		mapForDS.put("dhHeaderIds", dhHeaderIds);
		mapForDS.put("parkInvestigationIds", parkInvestigationIds);
		mapForDS.put("parkInvestigations", parkInvestigations);
		mapForDS.put("chargeCodeIdList", chargeCodeIdList);
		mapForDS.put("clinicalList", clinicalList);
		mapForDS.put("availableStatusList", availableStatusList);
		mapForDS.put("snomedListArray", snomedListArray);
		mapForDS.put("diagnosisIdArray", diagnosisIdArray);
		mapForDS.put("diagnosis_status", diagnosis_status);
		
		/*Investigation grid :end*/		
		
		mapForDS.put("prescriptionNo", generatePrecriptionNo(hinId));
		mapForDS.put("hinId", hinId);
		mapForDS.put("departmentId", departmentId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("userName", userName);
		mapForDS.put("users", users);
		mapForDS.put("empId", empId);
		mapForDS.put("consultationDate", consultationDate);
		mapForDS.put("consultationTime", consultationTime);
		mapForDS.put("opdRemarks", opdRemarks.trim());
		mapForDS.put("summaryConsultation", summaryConsultation);
		mapForDS.put("reviewDate", reviewDate);
		mapForDS.put("deptId", departmentId);
		mapForDS.put("userId", userId);
		mapForDS.put("forNext", forNext);
		box.put("hinId", hinId);
		box.put("hospitalId", hospitalId);
		box.put("visitId", visitId);
		box.put("departmentId", departmentId);
		
		//persisting speciality
		int specialtyId=0;
		if(request.getParameter("specialty")!=null){
			specialtyId = Integer.parseInt(request.getParameter("specialty"));
		}
		int maritalStatusId = 0;
		if(request.getParameter("maritalStatusId")!=null && !request.getParameter("maritalStatusId").equals("")){
			maritalStatusId = Integer.parseInt(request.getParameter("maritalStatusId"));
		}
		int qualificationId = 0;
		if(request.getParameter("qualificationId")!=null && !request.getParameter("qualificationId").equals("")){
			qualificationId = Integer.parseInt(request.getParameter("qualificationId"));
		}
		int religionId = 0;
		if(request.getParameter("religionId")!=null && !request.getParameter("religionId").equals("")){
			religionId = Integer.parseInt(request.getParameter("religionId"));
		}
		int occupationId = 0;
		if(request.getParameter("occupationId")!=null && !request.getParameter("occupationId").equals("")){
			occupationId = Integer.parseInt(request.getParameter("occupationId"));
		}
		String templateName = "";
		if(request.getParameter("templateName")!=null){
			templateName = request.getParameter("templateName");
		}
		
		String[] parameterId=request.getParameterValues("parameterId");
		String[] grpId=request.getParameterValues("grpId");
		String[] textValue=request.getParameterValues("textValue");
		
		String[] textValue1=null;
		if(request.getParameterValues("textVal1")!=null)
			textValue1 = request.getParameterValues("textVal1");
		
		mapForDS.put("specialtyId", specialtyId);
		mapForDS.put("maritalStatusId", maritalStatusId);
		mapForDS.put("qualificationId", qualificationId);
		mapForDS.put("occupationId", occupationId);
		mapForDS.put("religionId", religionId);
		mapForDS.put("parameterId", parameterId);
		mapForDS.put("grpId", grpId);
		mapForDS.put("textValue", textValue);
		mapForDS.put("textValue1", textValue1);
		mapForDS.put("templateName", templateName);
		mapForDS.put("paywardFlag", request.getParameter("payward"));
		
		mapForDS.put("provisionalDiagnosis", request.getParameter("snomed"));
		mapForDS.put("finalDiagnosis",  request.getParameter("finalDiagnosis"));
		mapForDS.put("opdType",  request.getParameter("opdType"));
		
		if(request.getParameter("referralCase")!=null){
			mapForDS.put("referralCase", request.getParameter("referralCase"));
			
		}

		boolean bool =false,changeStatus=false;
		mapForDS.put("forms",forms);
		 Map<String, Object> mapForSpeciality = null; //added by amit das on 22-07-2016
		if(skip!=1){
			String antStatus = "";
			antStatus = opdHandlerService.getAntenatalCardVisitStatus(visitId);
			if(antStatus != null && !antStatus.equals("")) {
				mapForDS.put("antStatus", antStatus);
			}
			map=opdHandlerService.submitOPDPatientDetails(mapForDS);
			
	    	  if(null !=map.get("ref_token_No")){
	    		  map.put("referred_tokenNo", (Integer)map.get("ref_token_No"));
	    		  referred_tokenNo=(Integer)map.get("ref_token_No");
	    	  }
	    	 
	    	  if(null !=map.get("ref_department_name")){
	    		  map.put("referred_department_name", (String)map.get("ref_department_name"));
	    		  reffered_department_name=(String)map.get("ref_department_name");
	    	  }
		//	if(parameterId!=null && textValue!=null){
			if(specialtyId != 0 ){
				OpdPatientDetails opdPatientDetails =null;
				if(map.get("opdPatientDetails")!=null){
					opdPatientDetails=(OpdPatientDetails)map.get("opdPatientDetails");
					mapForDS.put("opdPatientDetails", opdPatientDetails);
				}
				 mapForSpeciality =	opdHandlerService.saveSpeciality(mapForDS,box); // added by amit das on 22-07-2016
				//mapForSpeciality =	opdHandlerService.saveSpecialityTemplateDetails(mapForDS,box); 
			}
		//	}
		}else if(forNext!=1){
			changeStatus=opdHandlerService.changeVisitStatus(mapForDS);
		}
		Map<String, Object> generalMap= new HashMap<String,Object>();
		OpdPatientDetails opdPatientDetails =null;
		if(map.get("opdPatientDetails")!=null){
			opdPatientDetails=(OpdPatientDetails)map.get("opdPatientDetails");
			mapForDS.put("opdPatientDetails", opdPatientDetails);
			generalMap.put("opdPatientDetails", opdPatientDetails);
			if(opdPatientDetails!=null){
			box.put("opdPatientDetailId", opdPatientDetails.getId());
			map.put("opdId", opdPatientDetails.getId());
			
			}
		}
		 Map<String, Object> mapForNicuCaseRecord = null;
		 if(box.getString("nicuFlag").equalsIgnoreCase("NicuCaseRecord")){
			 mapForDS.put("height", box.getInt("height"));
			 mapForDS.put("weight", box.getInt("weight"));
			mapForNicuCaseRecord =	opdHandlerService.saveNicuCaseRecord(mapForDS,box); // added by amit das on 22-07-2016
		}
		 Map<String, Object> mapForGynecologyCaseSheet = null;
		 if(box.getString("gynecologyCaseSheetFlag").equalsIgnoreCase("Gynecology Case Sheet")){
			 mapForGynecologyCaseSheet =	opdHandlerService.saveGynecologyCaseSheet(mapForDS,box); 
		}
		 
		 Map<String, Object> mapForGeneralPsychiatricCaseRecord = null;
		 if(box.getString("generalPsychiatricCaseRecordFlag").equalsIgnoreCase("General Adult Psychiatry Case Record")){
			mapForGeneralPsychiatricCaseRecord =opdHandlerService.saveGeneralPsychiatricCaseRecord(mapForDS,box); 
		}
			String lymphadenopathyValueSelect = "";
			String[] lymphadenopathyValueSelectArray = null;
			if (request.getParameterValues("lymphadenopathyValue1") != null) {
				lymphadenopathyValueSelectArray = (String[]) request
						.getParameterValues("lymphadenopathyValue1");
				for (int x = 0; x < lymphadenopathyValueSelectArray.length; x++) {
					if (x == 0) {
						lymphadenopathyValueSelect = lymphadenopathyValueSelectArray[x];
					} else {
						lymphadenopathyValueSelect = lymphadenopathyValueSelect + ","
								+ lymphadenopathyValueSelectArray[x];
					}
				}
				box.put("lymphadenopathyValueSelect", lymphadenopathyValueSelect);
				
			}
		 String tempalteName="";
		 Map<String, Object> mapForGeneralSurgery = null;
		 if(box.getString("generalSurgeryFlag").equalsIgnoreCase("General Surgery")){
				box.put("opdPatientDetailId", opdPatientDetails.getId());
				
			 mapForGeneralSurgery =	ipdHandlerService.saveGeneralSurgery(box);
			 tempalteName = "General Surgery";
			 map.put("tempalteName",tempalteName);
			 map.put("opdPatientDetailId",opdPatientDetails.getId());
		}
			 
	
		
		 
		String familyHistorySelect = "";
		String[] familyHistorySelectArray = null;
		if (request.getParameterValues("familyHistorySelect") != null) {
			familyHistorySelectArray = (String[]) request
					.getParameterValues("familyHistorySelect");
			for (int x = 0; x < familyHistorySelectArray.length; x++) {
				if (x == 0) {
					familyHistorySelect = familyHistorySelectArray[x];
				} else {
					familyHistorySelect = familyHistorySelect + ","
							+ familyHistorySelectArray[x];
				}
			}
			box.put("familyHistorySelect", familyHistorySelect);
		}
		
		String reasonsForSeekingTreatmentSelect = "";
		String[] reasonsForSeekingTreatmentSelectArray = null;
		if (request.getParameterValues("reasonsForSeekingTreatmentSelect") != null) {
			reasonsForSeekingTreatmentSelectArray = (String[]) request
					.getParameterValues("reasonsForSeekingTreatmentSelect");
			for (int x = 0; x < reasonsForSeekingTreatmentSelectArray.length; x++) {
				if (x == 0) {
					reasonsForSeekingTreatmentSelect = reasonsForSeekingTreatmentSelectArray[x];
				} else {
					reasonsForSeekingTreatmentSelect = reasonsForSeekingTreatmentSelect + ","
							+ reasonsForSeekingTreatmentSelectArray[x];
				}
			}
			box.put("reasonsForSeekingTreatmentSelect", reasonsForSeekingTreatmentSelect);
		}
		
		
		String formulationPlanSelect = "";
		String[] formulationPlanSelectArray = null;
		if (request.getParameterValues("formulationPlanSelect") != null) {
			formulationPlanSelectArray = (String[]) request
					.getParameterValues("formulationPlanSelect");
			for (int x = 0; x < formulationPlanSelectArray.length; x++) {
				if (x == 0) {
					formulationPlanSelect = formulationPlanSelectArray[x];
				} else {
					formulationPlanSelect = formulationPlanSelect + ","
							+ formulationPlanSelectArray[x];
				}
			}
			box.put("formulationPlanSelect", formulationPlanSelect);
			
		}
			box.put("templateName", templateName);
		 Map<String, Object> mapForDeaddictionCentre = null;
		 if(box.getString("deaddictionFlag").equalsIgnoreCase("DeaddictionCenter")){
				mapForDeaddictionCentre =	opdHandlerService.saveDeaddictionCentre(box); // added by amit das on 22-07-2016
				 
		 }	 
		 String leftTragalTendernessStr = "";
			String[] leftTragalTendernessArray = null;
			if (request.getParameterValues("tragalTendernessLeftList") != null) {
				leftTragalTendernessArray = (String[]) request.getParameterValues("tragalTendernessLeftList");
				for (int x = 0; x < leftTragalTendernessArray.length; x++) {
					if (x == 0) {
						leftTragalTendernessStr = leftTragalTendernessArray[x];
					} else {
						leftTragalTendernessStr = leftTragalTendernessStr + ","
								+ leftTragalTendernessArray[x];
					}
				}
				box.put("leftTragalTendernessStr", leftTragalTendernessStr);
				
			}
			
			String rightTragalTendernessStr = "";
			String[] rightTragalTendernessArray = null;
			if (request.getParameterValues("tragalTendernessRightList") != null) {
				rightTragalTendernessArray = (String[]) request.getParameterValues("tragalTendernessRightList");
				for (int x = 0; x < rightTragalTendernessArray.length; x++) {
					if (x == 0) {
						rightTragalTendernessStr = rightTragalTendernessArray[x];
					} else {
						rightTragalTendernessStr = rightTragalTendernessStr + ","
								+ rightTragalTendernessArray[x];
					}
				}
				box.put("rightTragalTendernessStr", rightTragalTendernessStr);
				
			}
		 Map<String, Object> mapForEntExamination = null;
		 if(box.getString("entFlag").equalsIgnoreCase("EntExamination")){
			 
			 if(request.getParameter("imageStr") != null){
				 String imageStr= request.getParameter("imageStr");
				 box.put("imageStr", imageStr);
			 }
			mapForEntExamination =	opdHandlerService.saveENTExamination(box);
		 }
		 List complaintsList = new ArrayList();
		 
		 Map<String, Object> mapForLeprosyProforma= null;
		 if(box.getString("leprosyFlag").equalsIgnoreCase("LeprosyPerforma")){	
	
				
		
				
				String presentingComplaintsStr = "";
				String[] presentingComplaintsArray = null;
				if (request.getParameterValues("presentingComplaints") != null) {
					presentingComplaintsArray = (String[]) request.getParameterValues("presentingComplaints");
					for (int x = 0; x < presentingComplaintsArray.length; x++) {
						if (x == 0) {
							presentingComplaintsStr = presentingComplaintsArray[x];
						} else {
							presentingComplaintsStr = presentingComplaintsStr + ","
									+ presentingComplaintsArray[x];
						}
					}
					box.put("presentingComplaintsStr", presentingComplaintsStr);
					
				}
				
			 mapForLeprosyProforma =	opdHandlerService.saveLeprosyProforma(box);
		 }
			
		Map<String, Object> mapForPsychogeriatricClinic= null;
		
		if(box.getString("psychogeriatricClinicFlag").equalsIgnoreCase("PsychogeriatricClinic")){
			mapForPsychogeriatricClinic = opdHandlerService.savePsychogeriatricClinic(box);
		}
		
		
		Map<String, Object> mapForMedicine= null;
		if(box.getString("medicineFlag").equalsIgnoreCase("GeneralMedicine")){	
			mapForMedicine = opdHandlerService.saveMedicine(box);
		}
		
		Map<String, Object> mapForContactLens= null;
		if(box.getString("CLFlag").equalsIgnoreCase("ContactLens")){	
		    mapForContactLens = opdHandlerService.saveContactLensTemplate(box);
		}
		
		
		String injuryNature = "";
		String [] injuryNatureArray = null;
		if(request.getParameterValues("natureOfInjury") != null)
		{
			injuryNatureArray = request.getParameterValues("natureOfInjury");
			for (int x=0; x < injuryNatureArray.length; x++)
			{
				if(x == 0)
				{
					injuryNature = injuryNatureArray[x];					
				} else {
					
					injuryNature = injuryNature + "," + injuryNatureArray[x];
				}
					
			}
			box.put("natureOfInjury", injuryNature);
		}
		
		String upperLimbType = "";
		String[] upperLimbTypeArray = null;
		if (request.getParameterValues("upperLimbType") != null) {
			upperLimbTypeArray = (String[]) request.getParameterValues("upperLimbType");
			for (int x = 0; x < upperLimbTypeArray.length; x++) {
				if (x == 0) {
					upperLimbType = upperLimbTypeArray[x];
				} else {
					upperLimbType = upperLimbType + ","
							+ upperLimbTypeArray[x];
				}
			}
			box.put("upperLimbTypeF", upperLimbType);
		}
		String lowerLimbType = "";
		String[] lowerLimbTypeArray = null;
		if (request.getParameterValues("lowerLimbType") != null) {
			lowerLimbTypeArray = (String[]) request.getParameterValues("lowerLimbType");
			for (int x = 0; x < lowerLimbTypeArray.length; x++) {
				if (x == 0) {
					lowerLimbType = lowerLimbTypeArray[x];
				} else {
					lowerLimbType = lowerLimbType + ","
							+ lowerLimbTypeArray[x];
				}
			}
			box.put("lowerLimbTypeF", lowerLimbType);
		}
		
		Map<String, Object> mapForOrthopedics= null;
		
		int orthoRecordId = 0;
		
		if(request.getParameter("orthoRecordId") != null && !request.getParameter("orthoRecordId").equals("") ){
			orthoRecordId = Integer.parseInt(request.getParameter("orthoRecordId"));
		}
		
		box.put("orthoRecordId", orthoRecordId);
		
		if(box.getString("orthoFlag").equalsIgnoreCase("Orthopedics")){
			mapForOrthopedics = opdHandlerService.saveOrthopedicsSpeciality(box);
		}
		
		
		String[] triggersArray = null;
		if (request.getParameterValues("triggers") != null) {
			triggersArray = (String[]) request.getParameterValues("triggers");
		}
			
		Map<String, Object> mapForRespiratoryClinic= null;
		List triggersList = new ArrayList();
		List pastHistoryList = new ArrayList();
		if(box.getString("respiratoryFlag").equalsIgnoreCase("Respiratory Clinic")){
			if (request.getParameterValues("triggers")!=null && !request.getParameterValues("triggers").equals("")) {
				String[] triggersStr=request.getParameterValues("triggers");
				for (int k = 0; k < triggersStr.length; k++) {
					String triggerValue =(triggersStr[k]);
					triggersList.add(triggerValue);
				}
				generalMap.put("triggersList", triggersList);
		    }
			if (request.getParameterValues("pastHistory")!=null && !request.getParameterValues("pastHistory").equals("")) {
				String[] pastHistoryStr=request.getParameterValues("pastHistory");
				for (int k = 0; k < pastHistoryStr.length; k++) {
					String pastHistoryValue =(pastHistoryStr[k]);
					pastHistoryList.add(pastHistoryValue);
				}
				generalMap.put("pastHistoryList", pastHistoryList);
				
		    }
			mapForRespiratoryClinic = opdHandlerService.saveRespiratoryClinic(box,generalMap);
		}
		
		
		Map<String, Object> mapForGeneralProforma= null;
		List pastHistoryProformaList = new ArrayList();
		List mucousMembraneList = new ArrayList();
		List hairList = new ArrayList();
		List nailsList = new ArrayList();
		List systemIllnessList = new ArrayList();
		List signsList = new ArrayList();
		List aggrvatingFactorList = new ArrayList();
		if(box.getString("generalProformaFlag").equalsIgnoreCase("General Performa")){
			String presentingComplaintsStr = "";
			String[] presentingComplaintsArray = null;
			if (request.getParameterValues("presentingComplaints") != null) {
				presentingComplaintsArray = (String[]) request.getParameterValues("presentingComplaints");
				for (int x = 0; x < presentingComplaintsArray.length; x++) {
					if (x == 0) {
						presentingComplaintsStr = presentingComplaintsArray[x];
					} else {
						presentingComplaintsStr = presentingComplaintsStr + ","
								+ presentingComplaintsArray[x];
					}
				}
				box.put("presentingComplaintsStr", presentingComplaintsStr);
				
			}
			
			//uncommented below code by swarup 19/11/2017
			String aggravatingFactorsStr = "";
			String[] aggravatingFactorsArray = null;
			if (request.getParameterValues("aggravatingFactors") != null) {
				aggravatingFactorsArray = (String[]) request.getParameterValues("aggravatingFactors");
				for (int x = 0; x < aggravatingFactorsArray.length; x++) {
					if (x == 0) {
						aggravatingFactorsStr = aggravatingFactorsArray[x];
					} else {
						aggravatingFactorsStr = aggravatingFactorsStr + ","
								+ aggravatingFactorsArray[x];
					}
				}
				box.put("aggravatingFactorsStr", aggravatingFactorsStr);
				
			}
			//uncommented above code by swarup 
			
			
			
			
			String pastHistoryStr = "";
			String[] pastHistoryArray = null;
			if (request.getParameterValues("pastHistory") != null) {
				pastHistoryArray = (String[]) request.getParameterValues("pastHistory");
				for (int x = 0; x < pastHistoryArray.length; x++) {
					if (x == 0) {
						pastHistoryStr = pastHistoryArray[x];
					} else {
						pastHistoryStr = pastHistoryStr + ","
								+ pastHistoryArray[x];
					}
				}
				box.put("pastHistoryStr", pastHistoryStr);
				
			}
			String distributionStr = "";
			String[] distributionArray = null;
			if (request.getParameterValues("distribution") != null) {
				distributionArray = (String[]) request.getParameterValues("distribution");
				for (int x = 0; x < distributionArray.length; x++) {
					if (x == 0) {
						distributionStr = distributionArray[x];
					} else {
						distributionStr = distributionStr + ","
								+ distributionArray[x];
					}
				}
				box.put("distributionStr", distributionStr);
				
			}
			String mucousMembraneStr = "";
			String[] mucousMembraneArray = null;
			if (request.getParameterValues("mucousMembrane") != null) {
				mucousMembraneArray = (String[]) request.getParameterValues("mucousMembrane");
				for (int x = 0; x < mucousMembraneArray.length; x++) {
					if (x == 0) {
						mucousMembraneStr = mucousMembraneArray[x];
					} else {
						mucousMembraneStr = mucousMembraneStr + ","
								+ mucousMembraneArray[x];
					}
				}
				box.put("mucousMembraneStr", mucousMembraneStr);
				
			}
			
			String hairStr = "";
			String[] hairArray = null;
			if (request.getParameterValues("hair") != null) {
				hairArray = (String[]) request.getParameterValues("hair");
				for (int x = 0; x < hairArray.length; x++) {
					if (x == 0) {
						hairStr = hairArray[x];
					} else {
						hairStr = hairStr + ","
								+ hairArray[x];
					}
				}
				box.put("hairStr", hairStr);
				
			}
			
			String nailsStr = "";
			String[] nailsArray = null;
			if (request.getParameterValues("nails") != null) {
				nailsArray = (String[]) request.getParameterValues("nails");
				for (int x = 0; x < nailsArray.length; x++) {
					if (x == 0) {
						nailsStr = nailsArray[x];
					} else {
						nailsStr = nailsStr + ","
								+ nailsArray[x];
					}
				}
				box.put("nailsStr", nailsStr);
				
			}
			
			String systemIllnessStr = "";
			String[] systemIllnessArray = null;
			if (request.getParameterValues("systemIllness") != null) {
				systemIllnessArray = (String[]) request.getParameterValues("systemIllness");
				for (int x = 0; x < systemIllnessArray.length; x++) {
					if (x == 0) {
						systemIllnessStr = systemIllnessArray[x];
					} else {
						systemIllnessStr = systemIllnessStr + ","
								+ systemIllnessArray[x];
					}
				}
				box.put("systemIllnessStr", systemIllnessStr);
				
			}
			
			String signsStr = "";
			String[] signsArray = null;
			if (request.getParameterValues("signs") != null) {
				signsArray = (String[]) request.getParameterValues("signs");
				for (int x = 0; x < signsArray.length; x++) {
					if (x == 0) {
						signsStr = signsArray[x];
					} else {
						signsStr = signsStr + ","
								+ signsArray[x];
					}
				}
				box.put("signsStr", signsStr);
				
			}
			
			int headerRecordId = 0;
			
			if(request.getParameter("headerRecordId") != null && !request.getParameter("headerRecordId").equals("") ){
				headerRecordId = Integer.parseInt(request.getParameter("headerRecordId"));
			}
			
			box.put("headerRecordId", headerRecordId);
			
			mapForGeneralProforma = opdHandlerService.saveGeneralProforma(box,generalMap);
		}
		
		//Added by Arbind on 19-05-2017
		Map<String, Object> mapForOralMedicine = null;
		if(box.getString("oralFlag").equalsIgnoreCase("oralMedicine")){
			 mapForOralMedicine = opdHandlerService.saveOralMedicine(mapForDS, box, request);
		}
		//Added by Arbind on 01-12-2017
		Map<String, Object> mapForPhototherapyProforma = null;
		if(box.getString("phototherapyFlag").equalsIgnoreCase("Phototherapy Proforma")){
			box.put("opdPatientDetailId", opdPatientDetails.getId());
			mapForPhototherapyProforma = opdHandlerService.savePhototherapyProforma(mapForDS, box, request);
		}
		Map<String, Object> antenatalCardMap = null;
		if(box.getString("antenatalCardFlag").equalsIgnoreCase("AntenatalCard")){
			Map<String, Object> infoMap = null;
			
			infoMap = addAntenatalCardForTemplate(request);
			if(opdPatientDetails != null && opdPatientDetails.getId() != null) {
			infoMap.put("opdPatientDetailId",opdPatientDetails.getId());
			}
			
			
			antenatalCardMap = opdHandlerService.addAntenatalCard2(infoMap);
		}
		Map<String, Object> mapForInfertilityClinic = null;
		if(box.getString("infertilityClinicFlag").equalsIgnoreCase("InfertilityClinic")){
			mapForInfertilityClinic = opdHandlerService.submitInfertilityClinic(mapForDS, box, request);
		}
		
		
		Map<String, Object> mapForpreAssessmentClinic = null;
		if(box.getString("assessmentFlag").equalsIgnoreCase("preAssessmentClinic")){
			mapForpreAssessmentClinic = opdHandlerService.savePreAssessmentClinic(mapForDS, box, request);
		}

		Map<String, Object> mapForMaxillofacialTraumaProforma = null;
		if(box.getString("maxillofacialTraumaProformaFlag").equalsIgnoreCase("maxillofacialTraumaProformaFlag")){
			mapForMaxillofacialTraumaProforma = opdHandlerService.saveMaxillofacialTraumaProforma(mapForDS, box, request);
		}
		
		Map<String, Object> mapForOralMedicinePathology = null;
		if(box.getString("oralMedicinePathologyFlag").equalsIgnoreCase("oralMedicinePathologyFlag")){
			mapForOralMedicinePathology = opdHandlerService.saveOralMedicinePathology(mapForDS, box, request);
		}
		Map<String, Object> mapForCaseRecordOfPeriodontics = null;
		if(box.getString("caseRecordOfPeriodonticsFlag").equalsIgnoreCase("caseRecordOfPeriodonticsFlag")){
			mapForCaseRecordOfPeriodontics = opdHandlerService.saveCaseRecordOfPeriodontics(mapForDS, box, request);
		}
	
		Map<String, Object> mapForOralAndMaxillofacialSurgery = null;
		if(box.getString("oralAndMaxillofacialSurgeryFlag").equalsIgnoreCase("oralAndMaxillofacialSurgeryFlag")){
			mapForOralAndMaxillofacialSurgery = opdHandlerService.saveOralAndMaxillofacialSurgery(mapForDS, box, request);
		}
		Map<String, Object> mapForImplantPlanning = null;
		if(box.getString("implantPlanningFlag").equalsIgnoreCase("implantPlanningFlag")){
			mapForImplantPlanning = opdHandlerService.saveImplantPlanning(mapForDS, box, request);
		}
		Map<String, Object> mapFordiagnosticRecord = null;
		if(box.getString("diagnosticRecordFlag").equalsIgnoreCase("diagnosticRecordFlag")){
			mapFordiagnosticRecord = opdHandlerService.saveDiagnosticRecord(mapForDS, box, request);
		}
		
		Map<String, Object> mapForMaxillofacialProsthesis = null;
		if(box.getString("maxillofacialProsthesisFlag").equalsIgnoreCase("maxillofacialProsthesisFlag")){
			mapForMaxillofacialProsthesis = opdHandlerService.saveMaxillofacialProsthesis(mapForDS, box, request);
		}
		Map<String, Object> mapForRemovablePartialProsthodontics = null;
		if(box.getString("removablePartialProsthodonticsFlag").equalsIgnoreCase("removablePartialProsthodonticsFlag")){
			mapForRemovablePartialProsthodontics = opdHandlerService.saveRemovablePartialProsthodontics(mapForDS, box, request);
		}	 
		
		Map<String, Object> mapForFixedProsthodontics = null;
		if(box.getString("fixedProsthodonticsFlag").equalsIgnoreCase("fixedProsthodonticsFlag")){
			mapForFixedProsthodontics = opdHandlerService.saveFixedProsthodontics(mapForDS, box, request);
		}	 
		
		Map<String, Object> mapForEndodontics = null;
		if(box.getString("endodonticsFlag").equalsIgnoreCase("endodonticsFlag")){
			mapForEndodontics = opdHandlerService.saveEndodontics(mapForDS, box, request);
		}	 
		
		Map<String, Object> mapForCommunityOralHealthCaseHistory = null;
		if(box.getString("communityOralHealthCaseHistoryFlag").equalsIgnoreCase("communityOralHealthCaseHistoryFlag")){
			mapForCommunityOralHealthCaseHistory = opdHandlerService.saveCommunityOralHealthCaseHistory(mapForDS, box, request);
		}	 
		Map<String, Object> mapForPedodonticsVitalStatistics = null;
		if(box.getString("pedodonticsVitalStatisticsFlag").equalsIgnoreCase("pedodonticsVitalStatisticsFlag")){
			mapForPedodonticsVitalStatistics = opdHandlerService.savePedodonticsVitalStatistics(mapForDS, box, request);
		}
		
		Map<String, Object> mapForPsCaseRecordOrthodotics = null;
		if(box.getString("psCaseRecordOrthodoticsFlag").equalsIgnoreCase("psCaseRecordOrthodoticsFlag")){
			mapForPsCaseRecordOrthodotics = opdHandlerService.savePsCaseRecordOrthodotics(mapForDS, box, request);
		}
		
		//code for Hemo dialysis
				Map<String, Object> mapHemoDialysis = new HashMap<>();
				if(box.getString("hemoDialysisFlag").equalsIgnoreCase("HemoDialysis")){
					Map<String, Object> DialysisMap = new HashMap<>();		
					DialysisMap = getHemoDialysis(request);
					DialysisMap.put("opdpatientDetailId",opdPatientDetails.getId());	
					DialysisMap.put("hinId", hinId);
					DialysisMap.put("visitId", visitId);			
					mapHemoDialysis = opdHandlerService.saveHemoDialysis(DialysisMap);
				}
				
				//end
		
		if(map.get("bool")!=null){
			bool=(Boolean)map.get("bool");
		}
		
		if(map.get("deptNameTemp")!=null){
			deptNameTemp=(String)map.get("deptNameTemp");
		}
		if(map.get("tokenNoTemp")!=null){
			tokenNoTemp=(Integer)map.get("tokenNoTemp");
		}
		if(map.get("visitNoTemp")!=null){
			visitNoTemp=(Integer)map.get("visitNoTemp");
		}
		String transferPatientMessage="";
		mapForDS.put("forOPClinnic", true);
		
		if(forNext==1){
		try{
			int tokeNo=0;
			String patientName;
			String uhid;
			int opd_DepartmentId=0;
			int searchFlag=0;
			mapForNext.put("forOPClinnic", true);
			mapForNext.put("skip", 1);
			mapForNext.put("visitId", visitId);
			mapForNext.put("userId", userId);
			if(request.getParameter("searchFlag")!=null){
				searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
				mapForNext.put("searchFlag",searchFlag);
			}
			
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			if (request.getParameter("deptId") != null) {
				int deptId = Integer.parseInt(request.getParameter("deptId"));
				session.setAttribute("deptId", deptId);
				mapForNext.put("deptId", deptId);
			} else {
				if(session.getAttribute("deptId")!=null){
				int deptId = (Integer) session.getAttribute("deptId");
				mapForNext.put("deptId", deptId);
				}
			}
			
			mapForNext.put("hospitalId", hospitalId);
			mapForNext.put("opClinicalWaitinList", true);
			mapForNext = opdHandlerService.getWaitingPatientList(mapForNext);
			List<Visit>patientList=(List<Visit>)mapForNext.get("patientList");
			if(patientList.size()>0){
				Visit visitNext=patientList.get(0);
				int visitNextId=visitNext.getId();
				String nextToken=visitNext.getTotalHospitalVisit()+"/"+visitNext.getTokenNo();
				if(skip==1)
				{	
						if (forms != null) {
							if (forms.equalsIgnoreCase("opdetail")) {
								response.sendRedirect("/hms/hms/opd?method=showOpdDetailJsp&visitId="
										+ visitNextId + "&token=" + nextToken+"&nextFlag="+skip);
							} else if (forms.equalsIgnoreCase("oplite")) {
								response.sendRedirect("/hms/hms/opd?method=showOpdLiteJsp&visitId="
										+ visitNextId + "&token=" + nextToken+"&nextFlag="+skip);
							}
						} else {
							response.sendRedirect("/hms/hms/opd?method=showOPDMainJsp&visitId="
									+ visitNextId + "&token=" + nextToken+"&nextFlag="+skip);
						}
			   }
				
			}else{
					if (forms != null) {
						if (forms.equalsIgnoreCase("opdetail")) {
							response.sendRedirect("/hms/hms/opd?method=showNewOPDetailWaitingList");
						} else if (forms.equalsIgnoreCase("oplite")) {
							response.sendRedirect("/hms/hms/opd?method=showNewOPWaitingList");
						}
					} else {
						response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList");
					}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		String deptName = opdHandlerService.getDepartmentNameFromId(departmentId);
		if (flag.equals("opth")) {
			map = opdHandlerService.getOpdOphthalmology(visitId);
			jsp = OPD_OPHTHALMOLOGY_JSP;
		}
		
		mapForDS.put("skip", forNext); //added by amit das on 19-08-2017
		
		// added by amit das on 31-05-2017
		if(session.getAttribute(USER_ID)!=null){
			userId = (Integer) session.getAttribute(USER_ID);
			mapForDS.put("userId", userId);
		}
		mapForDS.put("hospitalId", hospitalId);
		if (bool) {
			if (flag.equals("opd")) {
				String antStatus = "";
				antStatus = opdHandlerService.getAntenatalCardStatus(hinId);
				map = opdHandlerService.getWaitingPatientList(mapForDS);
				map.put("transferPatientMessage", transferPatientMessage);
				map.put("antStatus", antStatus); 
				if(submitFrom.equals("3"))
					{message = "Patient Parked.";}
				else
					{message = "Patient Details Submitted.";}
				String mesaage1="";
				
				jsp = OPD_WAITING;
				
				map.put("departmentCode", box.get("departmentCode"));
				map.put("forms", forms);
				map.put("opdType", mapForDS.put("opdType",  request.getParameter("opdType")));
				if (deptName!=null && deptName.equalsIgnoreCase("Opthalmology OPD")) {
					urlDept = "opd?method=showOpdOphthamologyJsp&visitId="
							+ visitId;
				}
				title = "Waiting Patient List";
				
				map.put("message",message);
				if(null !=opdPatientDetails && null !=opdPatientDetails.getId()){
				map.put("opdId",opdPatientDetails.getId());
				}
				submitData = true;
			}
		} else {
			//map = opdHandlerService.getWaitingPatientList(mapForDS);
			String opdType=box.getString("opdType");
			message = "Error Occurred in Submitting Details.";
			if(opdType!="" && opdType.equalsIgnoreCase("detail")){
				jsp = "op_clinical_waiting_list_new_detail";
			}else if(opdType!="" && opdType.equalsIgnoreCase("lite")){
				jsp = "op_clinical_waiting_list_new";
			}else{
				jsp = "op_clinical_waiting_list";
			}
			
			title = "Waiting Patient List";
			map.put("message",message);
		}
		jsp += ".jsp";
		map.put("opdType", box.getString("opdType"));
		
		map.put("hinId", hinId);
		map.put("deptId", departmentId);
		map.put("visitId", visitId);
		title = "Patient Details";
		map.put("urlDept", urlDept);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("submitData", submitData);
		map.put("visitNoTemp",visitNoTemp);
		map.put("patient_status", tpatient_status);
		
		if(mapForSpeciality!=null)
			map.putAll(mapForSpeciality); // added by amit das on 22-07-2016
		
		
		if(mapForNicuCaseRecord!=null)
			map.putAll(mapForNicuCaseRecord); 
		
		
		if(mapForGynecologyCaseSheet!=null)
			map.putAll(mapForGynecologyCaseSheet); 
		
		
		

		if(mapForGeneralPsychiatricCaseRecord!=null)
			map.putAll(mapForGeneralPsychiatricCaseRecord); 
		
		
		if(mapForDeaddictionCentre!=null)
			map.putAll(mapForDeaddictionCentre); 
		
		
		if(mapForMedicine!=null)
			map.putAll(mapForMedicine); 
		

		if(mapForEntExamination!=null)
			map.putAll(mapForEntExamination); 
		
		if(mapForLeprosyProforma!=null)
			map.putAll(mapForLeprosyProforma); 
		
		if(mapForPsychogeriatricClinic!=null)
			map.putAll(mapForPsychogeriatricClinic); 
		
		if(mapForOrthopedics!=null)
			map.putAll(mapForOrthopedics); 
		
		if(mapForGeneralProforma!=null)
			map.putAll(mapForGeneralProforma); 
		
		//added by swarup 13/11/2017
		if(mapAudiologicalExamEntSpeciality!=null)
		map.putAll(mapAudiologicalExamEntSpeciality);
		
		
		//added by abhishek 24/11/2017
		if(mapNephrologyCaseSheet!=null)
		map.putAll(mapNephrologyCaseSheet);
		
		//added by swarup 01/11/2017
				if(mapFamilyPlanningGynecologyJsp!=null)
				map.putAll(mapFamilyPlanningGynecologyJsp);
				
		if(mapForRespiratoryClinic!=null)
			map.putAll(mapForRespiratoryClinic); 
		
		if(mapForOralMedicine!=null)
			map.putAll(mapForOralMedicine);
		
		if(mapForPhototherapyProforma!=null)
			map.putAll(mapForPhototherapyProforma);
		
		if(mapForpreAssessmentClinic!=null)
			map.putAll(mapForpreAssessmentClinic);
		
		if(mapForMaxillofacialTraumaProforma!=null)
			map.putAll(mapForMaxillofacialTraumaProforma);
		
		if(mapFordiagnosticRecord!=null )
			map.putAll(mapFordiagnosticRecord);
		

		if(mapForCaseRecordOfPeriodontics!=null)
			map.putAll(mapForCaseRecordOfPeriodontics);
		
		if(mapForOralAndMaxillofacialSurgery!=null)
			map.putAll(mapForOralAndMaxillofacialSurgery);
		
		if(mapForImplantPlanning!=null)
			map.putAll(mapForImplantPlanning);
		
		
		if(mapForMaxillofacialProsthesis!=null)
			map.putAll(mapForMaxillofacialProsthesis);
		
		
		if(mapForOralMedicinePathology!=null)
			map.putAll(mapForOralMedicinePathology);
		
		
		if(mapForRemovablePartialProsthodontics!=null)
			map.putAll(mapForRemovablePartialProsthodontics);
		

		if(mapForFixedProsthodontics!=null)
			map.putAll(mapForFixedProsthodontics);
		

		if(mapForEndodontics!=null)
			map.putAll(mapForEndodontics);
		
		if(mapForCommunityOralHealthCaseHistory!=null)
			map.putAll(mapForCommunityOralHealthCaseHistory);
		
		if(mapForPedodonticsVitalStatistics!=null)
			map.putAll(mapForPedodonticsVitalStatistics);
		
		
		if(mapForPsCaseRecordOrthodotics!=null)
				map.putAll(mapForPsCaseRecordOrthodotics);
		
		if(mapHemoDialysis!=null)
			map.putAll(mapHemoDialysis);
		
		if(mapForInfertilityClinic!=null)
			map.putAll(mapForInfertilityClinic);
		
		if(mapForContactLens!=null)
			map.putAll(mapForContactLens); 
		
		if(mapForGeneralSurgery!=null)
			map.putAll(mapForGeneralSurgery);
		
		map.put("referred_tokenNo", referred_tokenNo);
		map.put("reffered_department_name", reffered_department_name);

		
		
		session.removeAttribute("token");
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousVisit(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId =Integer.parseInt(request.getParameter("visitId"));

		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("visitId", visitId);
		map = opdHandlerService.getPreviousPatientVisit(mapForDS);

		map.put("visitNoForJsp", visitNo);
		jsp = OPD_PREVIOUS_VISIT_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousHinNumber(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		String hinNo = request.getParameter("hinNo");

		mapForDS.put("hinNo", hinNo);

		map = opdHandlerService.showPatientPreviousHinNumber(mapForDS);

		jsp = OPD_PREVIOUS_HIN_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView viewPreviousVisit(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		List<DgOrderhd> dgOrderhdList = new ArrayList<DgOrderhd>();
		int deptId = (Integer) session.getAttribute("deptId");
		int visitNoForJsp = 0;
		int visitId = Integer.parseInt(request.getParameter("visitId"));
	    List hinNo = new ArrayList();
		try {
			visitNoForJsp = Integer.parseInt(request
					.getParameter("visitNoForJsp"));
		} catch (Exception e) {

		}

		mapForDS.put("visitId", visitId);
		mapForDS.put("deptId", deptId);
		//hinNo = opdHandlerService.getHinNoList(String.valueOf(visitId));
		// map=opdHandlerService.getPatientDetails(visitId);
	//	mapForDS.put("hinNo", hinNo.get(0));
		//dgOrderhdList = labHandlerService.getOrderNoList(mapForDS);

		map = opdHandlerService.viewPreviousVisit(mapForDS);
		map.put("visitNoForJsp", visitNoForJsp);
		jsp = OPD_VIEW_PREVIOUS_VISIT_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

	//	map.put("dgOrderhdList", dgOrderhdList);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
		// return null;

	}

	public ModelAndView viewPreviousNextVisit(HttpServletRequest request,
			HttpServletResponse response) {

		//HttpSession session = request.getSession(); //Un used commented by OM Tripathi
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNoForJsp = 0;
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		String flag = "";
		if (!request.getParameter("flag").equals("")) {
			flag = request.getParameter("flag");
		}
		int pre_VisitId = 0;
		try {
			visitNoForJsp = Integer.parseInt(request
					.getParameter("visitNoForJsp"));
		} catch (Exception e) {

		}
		mapForDS.put("visitId", visitId);
		mapForDS.put("flag", flag);
		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		map = opdHandlerService.viewPreviousNextVisit(mapForDS);

		List<Visit> visitList = (List) map.get("visitList");
		int max = (Integer) map.get("max");
		int min = 0;
		if (map.get("min") != null) {
			min = (Integer) map.get("min");
		}
		for (Visit visitObj : visitList) {
			if (visitId == visitObj.getId()) {
				break;
			}
			pre_VisitId = visitObj.getId();

		}
		mapForDS.put("visitId", pre_VisitId);
		map = opdHandlerService.viewPreviousVisit(mapForDS);
		// if(map.get("patientVisitDataList")!=null ){
		// List patientVisitDataList = (List)map.get("patientVisitDataList");
		// if(patientVisitDataList.size()>0){
		jsp = OPD_VIEW_PREVIOUS_VISIT_JSP;
		// }
		// else{
		// jsp="msgForPreviousVisit";
		// }
		jsp += ".jsp";
		title = "Patient Previous Visit";
		map.put("visitNoForJsp", visitNoForJsp);
		map.put("max", max);
		map.put("min", min);
		map.put("contentJsp", jsp);
		map.put("title", title);
		// }
		return new ModelAndView("index", "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousPrescription(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		String nomenclature1 = request.getParameter("nomenclature1");
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		mapForDS.put("nomenclature1", nomenclature1);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);

		map = opdHandlerService.showPatientPrevoiusPrescription(mapForDS);
		String opdType = request.getParameter("opdType");
		 if(opdType!=null && opdType.equalsIgnoreCase("LP"))
		  jsp = OPD_PATIENT_PRESCRIPTION_LP_JSP;
		 else
		  jsp = OPD_PATIENT_PRESCRIPTION_JSP;

		title = "Patient Previous Visit";
		map.put("nomenclature1", nomenclature1);
		map.put("visitId", visitId);
		map.put("title", title);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView showPatientPreviousInvestigation(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		String chargeCodeName1 = "";

		mapForDS.put("visitNo", visitNo);
		mapForDS.put("hinId", hinId);

		map = opdHandlerService.showPatientPrevoiusInvestigation(mapForDS);
		if (request.getParameter("chargeCodeName1") != null) {
			chargeCodeName1 = request.getParameter("chargeCodeName1");
		}
		String opdType = request.getParameter("opdType");
		 if(opdType!=null && opdType.equalsIgnoreCase("LP"))
		  jsp = OPD_PATIENT_INVESTIGATION_LP_JSP;
	     else
		  jsp = OPD_PATIENT_INVESTIGATION_JSP;

		title = "Patient Previous Visit";
		map.put("chargeCodeName1", chargeCodeName1);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView showOPDPatientSearchJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		String jsp = OPD_PATIENT_SEARCH_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView showPatientDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> patientMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		String serviceNo = "";
		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String servFName = "";
		String servMName = "";
		String servLName = "";

		try {
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				mapForDS.put("hinNo", hinNo);
			}
			if (request.getParameter(SERVICE_NO) != null
					&& !(request.getParameter(SERVICE_NO).equals(""))) {
				serviceNo = request.getParameter(SERVICE_NO);
				mapForDS.put("serviceNo", serviceNo);
			}

			if (request.getParameter(P_FIRST_NAME) != null
					&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
				patientFName = request.getParameter(P_FIRST_NAME);
				mapForDS.put("patientFName", patientFName);
			}
			if (request.getParameter(P_MIDDLE_NAME) != null
					&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
				patientMName = request.getParameter(P_MIDDLE_NAME);
				mapForDS.put("patientMName", patientMName);
			}
			if (request.getParameter(P_LAST_NAME) != null
					&& !(request.getParameter(P_LAST_NAME).equals(""))) {
				patientLName = request.getParameter(P_LAST_NAME);
				mapForDS.put("patientLName", patientLName);
			}

			if (request.getParameter(S_FIRST_NAME) != null
					&& !(request.getParameter(S_FIRST_NAME).equals(""))) {
				servFName = request.getParameter(S_FIRST_NAME);
				mapForDS.put("servFName", servFName);
			}
			if (request.getParameter(S_MIDDLE_NAME) != null
					&& !(request.getParameter(S_MIDDLE_NAME).equals(""))) {
				servMName = request.getParameter(S_MIDDLE_NAME);
				mapForDS.put("servMName", servMName);
			}
			if (request.getParameter(S_LAST_NAME) != null
					&& !(request.getParameter(S_LAST_NAME).equals(""))) {
				servLName = request.getParameter(S_LAST_NAME);
				mapForDS.put("servLName", servLName);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		patientMap = opdHandlerService.searchPatientDetails(mapForDS);
		String jsp = "";
		jsp = OPD_PATIENT_SEARCH_JSP + ".jsp";

		map.put("patientMap", patientMap);
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		return new ModelAndView("indexB", "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showSurgeryRequisitionJsp(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		 Map<String, Object> map = new HashMap<String, Object>();
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int empId = (Integer) session.getAttribute("userId");
		int orderNo = 0;
		mapForDS.put("visitId", visitId);
		mapForDS.put("empId", empId);
		try {
			map = opdHandlerService.showSurgeryRequisitionJsp(mapForDS);
			orderNo = (Integer) map.get("orderNo");
			jsp = OPD_SURGERY_REQUISITION_JSP;
			jsp += ".jsp";
			title = "Patient Previous Visit";

			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("orderNo", orderNo);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showAjaxResponseForSurgeryRequisitionJsp(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		 Map<String, Object> map = new HashMap<String, Object>();
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));

		mapForDS.put("departmentId", departmentId);

		try {
			map = opdHandlerService
					.showAjaxResponseForSurgeryRequisitionJsp(mapForDS);
			jsp = OPD_AJAX_RESPONSE_FOR_SUGERY_REQUISITION;
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView showSurgeryRequisitionJspFromPatientList(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		int deptId=0;
		if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
		}
		int hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		 Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = request.getParameter("hinNo");
		int empId = (Integer) session.getAttribute("userId");
		int orderNo = 0;
		mapForDS.put("empId", empId);
		mapForDS.put("hinNo", hinNo);
		mapForDS.put(HOSPITAL_ID, hospitalId);
		mapForDS.put("deptId", deptId);

		try {
		//	map = opdHandlerService.showSurgeryRequisitionJspForHin(mapForDS);
			orderNo = (Integer) map.get("orderNo");
			jsp = OPD_SURGERY_REQUISITION_FOR_INPATIENT_JSP;
			jsp += ".jsp";
			map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("orderNo", orderNo);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
		// return null;

	}



	@SuppressWarnings("unused")
	public ModelAndView showSurgeryRequisitionJspFromPatientList1(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		int deptId=0;
		if(session.getAttribute(DEPT_ID)!=null){
			deptId = (Integer) session.getAttribute(DEPT_ID);
		}
		int hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
		Box box=HMSUtil.getBox(request);
		box.put(DEPT_ID, deptId);
		box.put(HOSPITAL_ID, hospitalId);
//		
//		Map<String, Object> mapForDS = new HashMap<String, Object>();
		List<Patient> patientDetailList = new ArrayList<Patient>();
		 Map<String, Object> map = new HashMap<String, Object>();
//		String hinNo = request.getParameter("hinNo1");
//		int empId = (Integer) session.getAttribute("userId");
//		int orderNo = 0;
//		mapForDS.put("empId", empId);
//		mapForDS.put("hinNo", hinNo);
//		mapForDS.put(HOSPITAL_ID, hospitalId);
//		mapForDS.put("deptId", deptId);
//
//		try {
			map = opdHandlerService.showSurgeryRequisitionJspForHin(box);
//			orderNo = (Integer) map.get("orderNo");
//
//			patientDetailList=(List<Patient>)map.get("patientDetailList");
//			if(patientDetailList.size()>0)
//			{
			jsp = OPD_SURGERY_REQUISITION_FOR_INPATIENT_JSP;
//			}
//			else
//			{
//				jsp="messageJspForOTReq";
//			}
			jsp += ".jsp";
//			map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
//			map.put("orderNo", orderNo);
//		} catch (RuntimeException e) {
//			e.printStackTrace();
//		}

		return new ModelAndView("index", "map", map);
		// return null;

	}


	public ModelAndView showSurgeryRequisitionForInpatient(
			HttpServletRequest request, HttpServletResponse response) {

		//HttpSession session = request.getSession(); //Un used commented by OM Tripathi
		//Map<String, Object> mapForDS = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		int orderNo = 0;
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));
		if (request.getParameter("orderNo") != null) {
			orderNo = Integer.parseInt(request.getParameter("orderNo"));
		}
		try {
			jsp = OPD_AJAX_RESPONSE_SURGERY_REQUISITION_FOR_INPATIENT_JSP;
			map.put("orderNo", orderNo);
			map.put("departmentId", departmentId);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {

			e.printStackTrace();
		}

		return new ModelAndView(jsp, "map", map);
		// return null;

	}

	@SuppressWarnings("unused")
	public ModelAndView getChargeCodeListForAutoComplete(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String departmentIdField = "";
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map.put("deptId", deptId);
			map = opdHandlerService.getInvestigationListForAutoComplete(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = OPD_RESPONSE_FOR_INVESTIGATION_JSP;

		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unused")
	public ModelAndView submitSurgeryRequisitionDetails(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		// Map<String, Object> map = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int deptId = Integer.parseInt(request.getParameter("deptId"));
		String[] chargeCodeId = request.getParameterValues("chargeCodeId");
		String requisitionDate = request.getParameter("date");
		String requisitionTime = request.getParameter("orderTime");
		String userName = request.getParameter("userName");
		int prescribedDepartmentId = Integer.parseInt(request
				.getParameter("prescribedDepartmentId"));
		int orderNo = 0;
		orderNo = Integer.parseInt(request.getParameter("orderNo"));
		List<Integer> chargeCodeList = new ArrayList<Integer>();
		
		if(chargeCodeId!=null){
			for (int i = 0; i < chargeCodeId.length; i++) {
				int chargeCode = Integer.parseInt(chargeCodeId[i]);
				chargeCodeList.add(chargeCode);
			}
		}
		
		mapForDS.put("hinId", hinId);
		mapForDS.put("chargeCodeList", chargeCodeList);
		mapForDS.put("deptId", deptId);
		mapForDS.put("userName", userName);
		mapForDS.put("prescribedDepartmentId", prescribedDepartmentId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("requisitionDate", requisitionDate);
		mapForDS.put("requisitionTime", requisitionTime);

		try {

			boolean bool = opdHandlerService
					.submitSurgeryRequisitionDetails(mapForDS);
			if (bool) {
				// map=opdHandlerService.getWaitingPatientList(prescribedDepartmentId);
				message = "Surgery Requisition Completed.";
				jsp = OPD_MSG__FOR_SURGERY_REQUISITION;
			} else {
				// map=opdHandlerService.getWaitingPatientList(prescribedDepartmentId);
				message = "Error in surgery Requisition.";
				jsp = OPD_MSG__FOR_SURGERY_REQUISITION;
			}

			jsp += ".jsp";
			map.put("orderNo", orderNo);
			map.put("deptId", deptId);
			map.put("visitId", visitId);
			map.put("message", message);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {

			e.printStackTrace();
		}

		return new ModelAndView("index", "map", map);
		// return null;

	}

	public ModelAndView submitSurgeryRequisitionDetailsForInpatient(
			HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		boolean bool =false;
//		Map<String, Object> datamap = new HashMap<String, Object>();
		Box box =HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		box.put("deptId", (Integer) session.getAttribute("deptId"));
		Users users = (Users)session.getAttribute("users");
		box.put("userId", users.getId());
		box.put("userName", users.getUserName());
		box.put("empId", users.getEmployee().getId());
		int deptId = (Integer) session.getAttribute("deptId");
		

		try {
			map = opdHandlerService.submitSurgeryRequisitionDetailsForInpatient(box);
			if(map.get("bool")!=null){
				bool=(Boolean)map.get("bool");
			}
			if (bool) {
				message = "Surgery Requisition Completed !!Do you want to print ?";
				jsp = OPD_MSG_SURGERY_REQUISITION_FOR_INPATIENT;
			} else {
				message = "Error Occured !! Try Again !!";
				jsp = OPD_MSG_SURGERY_REQUISITION_FOR_INPATIENT;
			}
			jsp += ".jsp";
//			map.put("orderNo", orderNo);
			map.put("message", message);
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {

			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	// ----------------------------End of methods by
	// vikas-------------------------

	// -------------------------------Methods For OPD Ophthalmology By
	// Ritu-------------------------

	public ModelAndView showOpdOphthamologyJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		map = opdHandlerService.getPatientDetails(map);
		detailsMap = opdHandlerService.getFrequencyList();
		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_JSP;
		//jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView submitOphthalmologyDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";

		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		HttpSession session = request.getSession();

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyDetails(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmology";
		} else {
			message = "Error Occured!! Try Again !!";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewPatientOphthalmologyDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOpdOphthamologyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.getPatientOphthalmologyDetails(parameterMap);

		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OPD_OPHTHALMOLOGY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showOphthalmologyDiagnosisJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		map = opdHandlerService.getPatientDetails(map);
		detailsMap = opdHandlerService.getFrequencyList();
		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_DIAGNOSIS_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitOphthalmologyDiagnosis(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		String userName = "";

		Box box = HMSUtil.getBox(request);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyDiagnosis(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Diagnosis Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmologyDiagnosis";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewOphthalmologyDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int visitId = 0;
		int currentVisitId = 0;

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		map = opdHandlerService.getOphthalmologyDiagnosisDetails(parameterMap);
		map.put("visitId", visitId);
		map.put("currentVisitId", currentVisitId);
		String jsp = "";
		jsp = VIEW_OPHTHALMOLOGY_DIAGNOSIS_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showOphthalmologyRetinalJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		map = opdHandlerService.getPatientDetails(map);

		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_RETINAL_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitOphthalmologyRetinal(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		String userName = "";

		Box box = HMSUtil.getBox(request);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}

		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyRetinal(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Retinal Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmologyRetinal";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewOphthalmologyRetinal(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int visitId = 0;
		int currentVisitId = 0;

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		map = opdHandlerService.getOphthalmologyRetinalDetails(parameterMap);
		map.put("visitId", visitId);
		map.put("currentVisitId", currentVisitId);

		String jsp = "";
		jsp = VIEW_OPHTHALMOLOGY_RETINAL_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showOphthalmologyFollowUpJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int visitId = 0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		map = opdHandlerService.getPatientDetails(map);

		map.put("detailsMap", detailsMap);
		String jsp = "";
		jsp = OPD_OPHTHALMOLOGY_FOLLOW_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitOphthalmologyFollowUp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = 0;
		String userName = "";

		Box box = HMSUtil.getBox(request);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}

		int visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId", visitId);
		int departmentId = (Integer) session.getAttribute("deptId");
		map = opdHandlerService.submitOphthalmologyFollowUp(box);
		Boolean saved = (Boolean) map.get("saved");
		String message = "";
		String jsp = "";
		if (saved) {
			message = "Opthalmology Follow Up Information Saved Successfully. Do you want to print ?";
			jsp = "messageForOphthalmologyFollowUp";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("visitId", visitId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewOphthalmologyFollowUp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int visitId = 0;
		int currentVisitId = 0;

		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		map = opdHandlerService.getOphthalmologyFollowUpDetails(parameterMap);
		map.put("visitId", visitId);
		map.put("currentVisitId", currentVisitId);

		String jsp = "";
		jsp = VIEW_OPHTHALMOLOGY_FOLLOW_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// --------------------------------- End of methods by Ritu
	// ---------------------------------------------

	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 *
	 */

	// ...................................***** Patient Allergic Drugs
	// *****.............................
	public ModelAndView showPatientAllergicDrugsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = 0;

		if (request.getParameter(VISIT_ID) != null) {

			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		map = opdHandlerService.getPatientAllergicDrugs(visitId);
		jsp = PATIENT_ALLERGIC_DRUGS_JSP;
		jsp += ".jsp";
		title = "Patient Allergic Drugs List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView getItemList(HttpServletRequest request,
			HttpServletResponse response) {

		String itemNameField = "";
		int visitId = 0;
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}

			if (request.getParameter("nomenclature") != null) {
				autoHint = (request.getParameter("nomenclature"));
			}
			if (request.getParameter("visitId") != null) {
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			map.put("visitId", visitId);
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map = opdHandlerService.getItemList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseInGrid";
		return new ModelAndView(jsp, "map", map);
	}

	@SuppressWarnings("unchecked")
	public void fillItemsInGrid(HttpServletRequest request,
			HttpServletResponse response) {

		int deptId = 0;
		int hospitalId = 0;
		String userName = "";
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}

		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";

		try {
			if (request.getParameter("pvmsNo") != null) {
				pvmsNo = request.getParameter("pvmsNo");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		dataMap.put("deptId", deptId);
		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("userName", userName);
		dataMap.put("hospitalId", hospitalId);
		map = opdHandlerService.fillItemsInGrid(dataMap);
		if (map.get("itemList") != null) {
			itemList = (List<MasStoreItem>) map.get("itemList");
		}
		StringBuffer sb = new StringBuffer();
		try {
			for (MasStoreItem masStoreItem : itemList) {
				sb.append("<item>");
				sb.append("<id>" + masStoreItem.getId() + "</id>");
				sb.append("<pvms>" + masStoreItem.getPvmsNo() + "</pvms>");
				sb.append("</item>");
			}
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
		} catch (Exception e) {
			e.printStackTrace();
		}
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addPatientAllergicDrugs(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		Map<String, Object> returnMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		Box box = HMSUtil.getBox(request);
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		int pageNo = 1;
		int noOfRecords = 0;
		String buttonFlag = "";
		int patientAllergicDrugshdId = 0;
		List itemList = new ArrayList();

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter("patientAllergicDrugshdId") != null) {
			patientAllergicDrugshdId = Integer.parseInt(request
					.getParameter("patientAllergicDrugshdId"));
		}

		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		if (request.getParameter("pageNo") != null) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		if (request.getParameter("counter") != null) {
			noOfRecords = Integer.parseInt(request.getParameter("counter"));
		}
		if (request.getParameter(CHANGED_BY) != null
				&& !(request.getParameter(CHANGED_BY).equals(""))) {
			changedBy = request.getParameter(CHANGED_BY);
		}
		String headerStored = "no";
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		PatientAllergicDrugsHd patientAllergicDrugshd = new PatientAllergicDrugsHd();
		if (pageNo == 1) {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			patientAllergicDrugshd.setDepartment(masDepartment);

			Patient patient = new Patient();
			patient.setId(hinId);
			patientAllergicDrugshd.setHin(patient);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			patientAllergicDrugshd.setHospital(masHospital);

			Visit visit = new Visit();
			visit.setId(visitId);
			patientAllergicDrugshd.setVisit(visit);

			patientAllergicDrugshd.setLastChgTime(time);
			patientAllergicDrugshd.setLastChgBy(changedBy);

			patientAllergicDrugshd.setStatus("y");
			patientAllergicDrugshd.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			String referredDept = null;
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}

			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
			infoMap.put("patientAllergicDrugshd", patientAllergicDrugshd);
		} else {
			headerStored = "yes";
		}
		infoMap.put("headerStored", headerStored);
		try {
			Vector itemId = box.getVector(ITEM_ID);
			List spInsList = new ArrayList();
			Vector specialInstruction = box.getVector(INSTRUCTIONS);
			ListIterator itr = (ListIterator) specialInstruction.listIterator();
			int counter = 0;

			for (int i = 0; i < itemId.size(); i++) {
				if (!itemId.get(i).toString().equals("")) {
					counter++;
				}
			}

			noOfRecords = counter;
			for (int i = 0; i < noOfRecords; i++) {
				itemList.add(itemId.get(i));
			}
			while (itr.hasNext()) {
				String ins = (String) itr.next();
				spInsList.add(ins);
			}

			infoMap.put("specialInstruction", spInsList);
			infoMap.put("patientAllergicDrugshdId", patientAllergicDrugshdId);
			infoMap.put("itemList", itemList);
			infoMap.put("userId", userId);
			infoMap.put("visitId", visitId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		boolean success = false;
		String jsp = "";
		String message = "";
		int orderhdId = 0;
		returnMap = opdHandlerService.addPatientAllergicDrugs(infoMap);
		if (returnMap.get("success") != null) {
			success = (Boolean) returnMap.get("success");
		}
		if (success) {
			if (buttonFlag.equals("next")) {
				pageNo++;
				message = "Patient Allergic Drug has been done Successfully";
				map = opdHandlerService.getPatientAllergicDrugs(visitId);
				detailsMap = opdHandlerService.getItem();

				map.put("detailsMap", detailsMap);
				if (returnMap.get("orderhdId") != null) {
					orderhdId = (Integer) returnMap.get("orderhdId");
					map.put("orderhdId", orderhdId);
				}
				String includedJsp = "patientAllergicDrugs.jsp";
				map.put("includedJsp", includedJsp);
				jsp = PATIENT_ALLERGIC_DRUGS_JSP + ".jsp";
			} else {
				jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS + ".jsp";
				pageNo++;
				message = "Patient Allergic Drug has been done Successfully.";
			}
		} else {
			jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS + ".jsp";
			message = "Patient Allergic Drug has not been done Successfully !!";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("pageNo", pageNo);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewPatientAllergicDrug(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showPatientAllergicDrugsJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewPatientAllergicDrug(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewPatientAllergicDrug";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// ...................................***** Opd Template Department
	// Wise*****.............................
	public ModelAndView showOpdTemplateDepartmentWiseJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getOpdTemplateDepartmentWise(visitId);
		jsp = "opdTemplateDepartmentWise";
		jsp += ".jsp";
		title = "Patient History List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView getFileName(HttpServletRequest request,
			HttpServletResponse response) {

		MultipartFormDataRequest mrequest = null;
		Map<String, Object> map = new HashMap<String, Object>();
		map = (Map) request.getSession().getAttribute("map");
		//String filePath = "";//Un used commented by OM Tripathi
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("file.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			String fileContent = "";
			String uploadURL = properties
					.getProperty("uploadinvestigationfile");
			String whiteList = "*.doc,*.txt,*.rtf,*.DOC,*.TXT,*.RTF";
			String fileNameToBeAssigned = "temp.txt";
			List fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL,
					whiteList, fileNameToBeAssigned);
			boolean fileUploaded = false;
			if (fileUploadedList != null && fileUploadedList.size() != 0) {
				fileUploaded = (Boolean) fileUploadedList.get(0);
			}
			if (fileUploaded) {
				fileContent = HMSUtil.getContent("C:\\temp\\temp.txt");
			}
			map.put("content", fileContent);
		}
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings("unchecked")
	public ModelAndView addOpdTemplateDepartmentWise(
			HttpServletRequest request, HttpServletResponse response) {

		MultipartFormDataRequest mrequest = null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String remarks = "";
		String result = "";
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		HttpSession session = request.getSession();

		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		map = (Map<String, Object>) session.getAttribute("map");

		if (mrequest.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(mrequest.getParameter(HIN_ID));
		}
		if (mrequest.getParameter("visitId") != null) {
			visitId = Integer.parseInt(mrequest.getParameter("visitId"));
		}
		if (mrequest.getParameter(REMARKS) != null) {
			remarks = mrequest.getParameter(REMARKS);
		}

		if (mrequest.getParameter(CHANGED_BY) != null
				&& !(mrequest.getParameter(CHANGED_BY).equals(""))) {
			changedBy = mrequest.getParameter(CHANGED_BY);
		}
		/*
		 * if(request.getParameter("content") != null){ result =
		 * request.getParameter("content"); }
		 */

		result = (String) map.get("content");

		OpdTemplateDepartmentWise opdTemplateDepartmentWise = new OpdTemplateDepartmentWise();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdTemplateDepartmentWise.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			opdTemplateDepartmentWise.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			opdTemplateDepartmentWise.setHin(patient);

			Visit v = new Visit();
			v.setId(visitId);
			opdTemplateDepartmentWise.setVisit(v);

			opdTemplateDepartmentWise.setLastChgTime(time);
			opdTemplateDepartmentWise.setLastChgBy(changedBy);

			opdTemplateDepartmentWise.setStatus("y");
			opdTemplateDepartmentWise.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			opdTemplateDepartmentWise.setRemarks(remarks);
			opdTemplateDepartmentWise.setResult(result);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("opdTemplateDepartmentWise", opdTemplateDepartmentWise);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);

		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addOpdTemplateDepartmentWise(infoMap);

		if (successfullyAdded) {
			message = "Opd Template Department Wise has been done Successfully..";
		} else {
			message = "Opd Template Department Wise has not been done Successfully..";
		}

		try {
			map = opdHandlerService.getOpdTemplateDepartmentWise(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS;
		title = "Add Opd Template Department Wise";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewOpdTemplateDepartmentWise(
			HttpServletRequest request, HttpServletResponse response) {

		MultipartFormDataRequest mrequest = null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (mrequest.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(mrequest.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}

		if (mrequest.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(mrequest.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (mrequest.getParameter("flag") != null) {
			flag = mrequest.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (mrequest.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(mrequest
					.getParameter("currentVisitId"));
		}
		if (mrequest.getParameter("viewScreen") != null) {
			viewScreen = mrequest.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOpdTemplateDepartmentWiseJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (mrequest.getParameter("deptId") != null) {
				deptId = Integer.parseInt(mrequest.getParameter("deptId"));
			}
			if (mrequest.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(mrequest
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOpdTemplateDepartmentWise(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOpdTemplateDepartmentWise";
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewOpdTemplateDepartmentWisePreNext(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOpdTemplateDepartmentWiseJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService
				.viewOpdTemplateDepartmentWisePreNext(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOpdTemplateDepartmentWisePreNext";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// ...................................***** Patient History
	// *****.............................

	public ModelAndView showPatientHistoryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getPatientHistory(visitId);
		jsp = PATIENT_HISTORY_JSP;
		jsp += ".jsp";
		title = "Patient History List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addPatientHistory(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String personalOtherDetails = "";
		String personalPastHistory = "";
		String personalPresentHistory = "";
		String personalPresentMedication = "";

		String familyOtherDetails = "";
		String familyPastHistory = "";
		String familyPresentHistory = "";
		String familyPresentMedication = "";

		HttpSession session = request.getSession();
		int userId=0;
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		Users user=new Users();
		if (request.getParameter(USER_ID) != null) {
			userId = Integer.parseInt(request.getParameter(USER_ID));
			user.setId(userId);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(PERSONAL_OTHER_DETAILS) != null) {
			personalOtherDetails = request.getParameter(PERSONAL_OTHER_DETAILS);
		}
		if (request.getParameter(PERSONAL_PAST_HISTORY) != null) {
			personalPastHistory = request.getParameter(PERSONAL_PAST_HISTORY);
		}
		if (request.getParameter(PERSONAL_PRESENT_HISTORY) != null) {
			personalPresentHistory = request
					.getParameter(PERSONAL_PRESENT_HISTORY);
		}

		if (request.getParameter(PERSONAL_PRESENT_MEDICATION) != null) {
			personalPresentMedication = request
					.getParameter(PERSONAL_PRESENT_MEDICATION);
		}

		if (request.getParameter(FAMILY_OTHER_DETAILS) != null) {
			familyOtherDetails = request.getParameter(FAMILY_OTHER_DETAILS);
		}
		if (request.getParameter(FAMILY_PAST_HISTORY) != null) {
			familyPastHistory = request.getParameter(FAMILY_PAST_HISTORY);
		}
		if (request.getParameter(FAMILY_PRESENT_HISTORY) != null) {
			familyPresentHistory = request.getParameter(FAMILY_PRESENT_HISTORY);
		}
		if (request.getParameter(FAMILY_PRESENT_MEDICATION) != null) {
			familyPresentMedication = request
					.getParameter(FAMILY_PRESENT_MEDICATION);
		}

		if (request.getParameter(CHANGED_BY) != null
				&& !(request.getParameter(CHANGED_BY).equals(""))) {
			changedBy = request.getParameter(CHANGED_BY);
		}
		/*
		 * Users user = (Users)session.getAttribute("users"); int userId =
		 * user.getId();
		 */
		OpdPatientHistory patientHistory = new OpdPatientHistory();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			patientHistory.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			patientHistory.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			patientHistory.setHin(patient);

			/*
			 * Visit visit = new Visit(); visit.setId(visitId);
			 */
			patientHistory.setVisitInpatientId(visitId);

			patientHistory.setLastChgTime(time);
			patientHistory.setLastChgBy(user);

			patientHistory.setStatus("y");
			patientHistory.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			patientHistory.setPersonalOtherDetails(personalOtherDetails);
			patientHistory.setPersonalPastHistory(personalPastHistory);
			patientHistory.setPersonalPresentHistory(personalPresentHistory);
			patientHistory
					.setPersonalPresentMedication(personalPresentMedication);

			patientHistory.setFamilyOtherDetails(familyOtherDetails);
			patientHistory.setFamilyPastHistory(familyPastHistory);
			patientHistory.setFamilyPresentHistory(familyPresentHistory);
			patientHistory.setFamilyPresentMedication(familyPresentMedication);

			patientHistory.setIpOpPacStatus("OP");

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("patientHistory", patientHistory);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService.addPatientHistory(infoMap);

		if (successfullyAdded) {
			message = "Patient History has been done Successfully..";
		} else {
			message = "Patient History has not been done Successfully..";
		}

		try {
			map = opdHandlerService.getPatientHistory(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = MESSAGE_FOR_PALLIENT_ALLERGIC_DRUGS;
		title = "Add Patient History";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewPatientHistory(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showPatientHistoryJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewPatientHistory(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewPatientHistory";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// ...................................***** Pediatric Vaccination Plan
	// *****.............................

	public ModelAndView showPediatricVaccinationPlanJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getPediatricVaccinationPlanJsp(visitId);
		jsp = PEDIATRIC_VACCINATION_PLAN_JSP;
		jsp += ".jsp";
		title = "Pediatric Vaccination Plan List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addPediatricVaccinationPlan(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		int hinId = box.getInt(HIN_ID);
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		box.put("visitId", visitId);
		box.put("hinId", hinId);

		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);

		map = opdHandlerService.addPediatricVaccinationPlan(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Vaccination Plan Saved Successfully. Do you want to print ?";
			jsp = MESSAGE_FOR_PEDIATRIC_VACCINATION_PLAN;
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}

		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("deptId", departmentId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView updatePediatricVaccinationPlan(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.updatePediatricVaccinationPlan(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Vaccination Plan updated Successfully.";
		} else {
			message = "Some Problem Occured.";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		String jsp = MESSAGE_FOR_PEDIATRIC_VACCINATION_PLAN;
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	// ...................................***** Pediatric Case Sheet
	// *****.............................

	public ModelAndView showPediatricCaseSheetJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		map = opdHandlerService.getPediatricCaseSheet(visitId);
		jsp = PEDIATRIC_CASE_SHEET_JSP;
		jsp += ".jsp";
		title = "Pediatric Case Sheet List";
		map.put("detailsMap", detailsMap);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addPediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);

		map = opdHandlerService.addPediatricCaseSheet(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Pediatric Case Sheet Saved Successfully. Do you want to print ?";
			jsp = "messagePediatricCaseSheet";
		} else {
			message = "Some Problem Occured.";
			jsp = "messageSomeTry";
		}

		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		jsp += ".jsp";
		map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewPediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showPediatricCaseSheetJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewPediatricCaseSheet(parameterMap);

		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_CASE_SHEET_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}
	//-------------------------------Infertility Clinic-----------------------------------------------//
	public ModelAndView showInfertilityClinic(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hinId = 0;
		int visitId  = 0;
		if(request.getParameter("visitId") != null){
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		if(request.getParameter("hinId") != null){
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		map = opdHandlerService.showInfertilityClinic(visitId,hinId);
		String jsp = "infertility_clinic";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	
	

	// ...................................***** OBG
	// *****.............................

	public ModelAndView showOBGONEJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showOBGJsp(visitId);
		jsp = OBG_JSP;
		//jsp += ".jsp";
		title = "OBG List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showOBGTWOJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addOBGOne(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartTwo";
		} else {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = OBG_JSP;
		}

		//jsp += ".jsp";
		title = "OBG List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showOBGTHREEJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.updateOBG(box);

		saved = (Boolean) map.get("saved");

		if (saved) {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartThree";
		} else {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartTwo";
		}
		//jsp += ".jsp";
		title = "OBG List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showOBGFOURJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.updateOBG(box);

		saved = (Boolean) map.get("saved");

		if (saved) {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartFour";
		} else {
			map = opdHandlerService.showOBGJsp(visitId);
			jsp = "obgPartThree";
		}
		//jsp += ".jsp";
		title = "OBG List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView addOBGJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		int departmentId = (Integer) session.getAttribute("deptId");
		box.put("departmentId", departmentId);

		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addOrUpdateOBGJsp(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "OBG Saved Successfully. Do you want to print ?";
			jsp = "messageOpdObg";
		} else {
			message = "Some Problem Occured.";
			jsp = "obgPartFour";
		}
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		//jsp += ".jsp";
		title = "OBG List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewOBGONE(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGONEJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGONE(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_ONE;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewOBGTWO(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGTWOJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGTWO(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_TWO;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewOBGTHREE(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGTHREEJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGTHREE(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_THREE;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewOBGFOUR(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOBGFOURJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOBGFOUR(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBE_FOUR;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// -------------------------------------- OPD
	// ENT--------------------------------------
	public ModelAndView showEntJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showENTJsp(visitId);
		jsp = ENT_JSP;
		jsp += ".jsp";
		title = "ENT List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addEnt(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addEnt(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Ent has been done Successfully.Do you want to print ?";
			jsp = "messageOpdEnt";
		} else {
			message = "Ent has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showENTJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp += ".jsp";
		title = "ENT List";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewEnt(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showEntJsp&visitId=" + currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewEnt(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewEnt";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// -------------------------------- Cardiology Department
	// Details----------------------------
	public ModelAndView showCardiologyDepartmentDetailsJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getCardiologyDepartmentDetails(visitId);
		jsp = CARDIOLOGY_DEPARTMENT_DETAILS_JSP;
		jsp += ".jsp";
		title = "Cardiology Department Details List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addCardiologyDepartmentDetails(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String tmtReport = "";
		String echoCardiology = "";
		String holter = "";
		String cardiacCathetizationData = "";
		String remarks = "";

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		if (request.getParameter(TMT_REPORT) != null) {
			tmtReport = request.getParameter(TMT_REPORT);
		}
		if (request.getParameter(ECHO_CARDIOLOGY) != null) {
			echoCardiology = request.getParameter(ECHO_CARDIOLOGY);
		}
		if (request.getParameter(HOLTER) != null) {
			holter = request.getParameter(HOLTER);
		}

		if (request.getParameter(CARDIAC_CATHETIZATION_DATA) != null) {
			cardiacCathetizationData = request
					.getParameter(CARDIAC_CATHETIZATION_DATA);
		}

		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = new OpdCardiologyDepartmentDetails();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			cardiologyDepartmentDetails.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			cardiologyDepartmentDetails.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			cardiologyDepartmentDetails.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			cardiologyDepartmentDetails.setVisit(visit);

			cardiologyDepartmentDetails.setLastChgTime(time);
			cardiologyDepartmentDetails.setLastChgBy(userId);

			cardiologyDepartmentDetails.setStatus("y");
			cardiologyDepartmentDetails.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			cardiologyDepartmentDetails
					.setCardiacCathetizationData(cardiacCathetizationData);
			cardiologyDepartmentDetails.setEchoCardiology(echoCardiology);
			cardiologyDepartmentDetails.setHolter(holter);
			cardiologyDepartmentDetails.setRemarks(remarks);

			cardiologyDepartmentDetails.setTmtReport(tmtReport);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("cardiologyDepartmentDetails",
					cardiologyDepartmentDetails);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
			
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addCardiologyDepartmentDetails(infoMap);

		if (successfullyAdded) {
			message = "Cardiology Department Details has been done Successfully..Do you want to print ?";
			jsp = "messageOpdCardiology";
		} else {
			message = "Cardiology Department Details has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.getCardiologyDepartmentDetails(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Cardiology Department Details";
		jsp += ".jsp";

		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewCardiologyDepartmentDetails(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showCardiologyDepartmentDetailsJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewCardiologyDepartmentDetails(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewCardiologyDepartmentDetails";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// -------------------------------- Gastro-Enterology
	// Endoscopy----------------------------
	public ModelAndView showGastroEnterologyEndoscopyJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getGastroEnterologyEndoscopy(visitId);

		jsp = GASTRO_ENTEROLOGY_ENDOSCOPY_JSP;
		jsp += ".jsp";
		title = "Gastro-Enterology Endoscopy List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGastroEnterologyEndoscopy(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String biopsy = "";
		String duodenum = "";
		String esophagus = "";
		String finalDiagnosis = "";
		String gastricAntumForHpylori = "";
		String othersRemarks = "";
		String reportNo = "";
		int referredBy = 0;
		String stomach = "";
		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(REPORT_NO) != null) {
			reportNo = request.getParameter(REPORT_NO);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if ((request.getParameter(EMPLOYEE_ID)) != null
				&& !(request.getParameter(EMPLOYEE_ID).equals("0"))) {
			referredBy = Integer.parseInt(request.getParameter(EMPLOYEE_ID));

		}
		if ((request.getParameter(VISIT_ID)) !=null
		&&(!request.getParameter(VISIT_ID).equals("0"))){
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		if (request.getParameter(BIOPSY) != null) {
			biopsy = request.getParameter(BIOPSY);
		}
		if (request.getParameter(STOMACH) != null) {
			stomach = request.getParameter(STOMACH);
		}
		if (request.getParameter(DUODENUM) != null) {
			duodenum = request.getParameter(DUODENUM);
		}
		if (request.getParameter(FINAL_DIAGNOSIS) != null) {
			finalDiagnosis = request.getParameter(FINAL_DIAGNOSIS);
		}

		if (request.getParameter(ESOPHAGUS) != null) {
			esophagus = request.getParameter(ESOPHAGUS);
		}
		if (request.getParameter(GASTRIC_ANTUM_FOR_H_PYLORI) != null) {
			gastricAntumForHpylori = request
					.getParameter(GASTRIC_ANTUM_FOR_H_PYLORI);
		}

		if (request.getParameter(OTHERS_REMARKS) != null) {
			othersRemarks = request.getParameter(OTHERS_REMARKS);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGastroEnterologyEndoscopy gastroEnterologyEndoscopy = new OpdGastroEnterologyEndoscopy();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gastroEnterologyEndoscopy.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gastroEnterologyEndoscopy.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gastroEnterologyEndoscopy.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gastroEnterologyEndoscopy.setVisit(visit);

			gastroEnterologyEndoscopy.setLastChgTime(time);
			gastroEnterologyEndoscopy.setLastChgBy(userId);
			gastroEnterologyEndoscopy.setReportDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyEndoscopy.setStatus("y");
			gastroEnterologyEndoscopy.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyEndoscopy.setBiopsy(biopsy);
			gastroEnterologyEndoscopy.setDuodenum(duodenum);
			gastroEnterologyEndoscopy.setEsophagus(esophagus);
			gastroEnterologyEndoscopy.setFinalDiagnosis(finalDiagnosis);

			gastroEnterologyEndoscopy
					.setGastricAntumForHpylori(gastricAntumForHpylori);
			gastroEnterologyEndoscopy.setOthersRemarks(othersRemarks);

			gastroEnterologyEndoscopy.setStomach(stomach);

			gastroEnterologyEndoscopy.setReportNo(reportNo);

			if (referredBy != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(referredBy);
				gastroEnterologyEndoscopy.setReferredBy(masEmployee);
			}

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("gastroEnterologyEndoscopy", gastroEnterologyEndoscopy);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
			
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGastroEnterologyEndoscopy(infoMap);

		if (successfullyAdded) {
			message = " Gastro Enterology Endoscopy saved Successfully. Do you want to print ?";
			jsp = "messageForOpd";
		} else {
			message = "Gastro Enterology Endoscopy has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.getGastroEnterologyEndoscopy(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		title = "Add Gastro Enterology Endoscopy";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewGastroEnterologyEndoscopy(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyEndoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGastroEnterologyEndoscopy(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGastroEnterologyEndoscopy";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// -------------------------------- Gastro-Enterology
	// Colonoscopy----------------------------
	public ModelAndView showGastroEnterologyColonoscopyJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.getGastroEnterologyColonoscopy(visitId);

		jsp = GASTRO_ENTEROLOGY_COLONOSCOPY_JSP;
		jsp += ".jsp";
		title = "Gastro-Enterology Colonoscopy List";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGastroEnterologyColonoscopy(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String biopsy = "";
		String analCanal = "";
		String cecum = "";
		String finalDiagnosis = "";
		String descendingColon = "";
		String rectum = "";
		String reportNo = "";
		int referredBy = 0;
		String transverseColon = "";
		String sigmoid = "";
		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		if (request.getParameter(REPORT_NO) != null) {
			reportNo = request.getParameter(REPORT_NO);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if ((request.getParameter(EMPLOYEE_ID)) != null
				&& !(request.getParameter(EMPLOYEE_ID).equals("0"))) {
			referredBy = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(BIOPSY) != null) {
			biopsy = request.getParameter(BIOPSY);
		}
		if (request.getParameter(ANAL_CANCAL) != null) {
			analCanal = request.getParameter(ANAL_CANCAL);
		}
		if (request.getParameter(CECUM) != null) {
			cecum = request.getParameter(CECUM);
		}
		if (request.getParameter(FINAL_DIAGNOSIS) != null) {
			finalDiagnosis = request.getParameter(FINAL_DIAGNOSIS);
		}

		if (request.getParameter(DESCENDING_COLON) != null) {
			descendingColon = request.getParameter(DESCENDING_COLON);
		}
		if (request.getParameter(RECTUM) != null) {
			rectum = request.getParameter(RECTUM);
		}

		if (request.getParameter(SIGMOID) != null) {
			sigmoid = request.getParameter(SIGMOID);
		}
		if (request.getParameter(TRANSVERSE_COLON) != null) {
			transverseColon = request.getParameter(TRANSVERSE_COLON);
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGastroEnterologyColonoscopy gastroEnterologyColonoscopy = new OpdGastroEnterologyColonoscopy();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gastroEnterologyColonoscopy.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gastroEnterologyColonoscopy.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gastroEnterologyColonoscopy.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gastroEnterologyColonoscopy.setVisit(visit);

			gastroEnterologyColonoscopy.setLastChgTime(time);
			gastroEnterologyColonoscopy.setLastChgBy(userId);
			gastroEnterologyColonoscopy.setReportDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyColonoscopy.setStatus("y");
			gastroEnterologyColonoscopy.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gastroEnterologyColonoscopy.setBiopsy(biopsy);
			gastroEnterologyColonoscopy.setAnalCanal(analCanal);
			gastroEnterologyColonoscopy.setBiopsy(biopsy);
			gastroEnterologyColonoscopy.setCecum(cecum);

			gastroEnterologyColonoscopy.setDescendingColon(descendingColon);
			gastroEnterologyColonoscopy.setFinalDiagnosis(finalDiagnosis);

			gastroEnterologyColonoscopy.setRectum(rectum);
			gastroEnterologyColonoscopy.setSigmoid(sigmoid);
			gastroEnterologyColonoscopy.setTransverseColon(transverseColon);
			gastroEnterologyColonoscopy.setReportNo(reportNo);

			if (referredBy != 0) {
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(referredBy);
				gastroEnterologyColonoscopy.setReferredBy(masEmployee);
			}
			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("gastroEnterologyColonoscopy",
					gastroEnterologyColonoscopy);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGastroEnterologyColonoscopy(infoMap);

		if (successfullyAdded) {
			message = "Gastro Enterology Colonoscopy has been done Successfully.Do you want to print ?";
			jsp = "messageOpdColonoScope";
		} else {
			message = "Gastro Enterology Colonoscopy has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.getGastroEnterologyColonoscopy(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Gastro Enterology Colonoscopy";
		jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView viewGastroEnterologyColonoscopy(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGastroEnterologyColonoscopy(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGastroEnterologyColonoscopy";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// -------------------------------- ANTENATAL
	// CARD----------------------------
	public ModelAndView showAntenatalCardJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		//int hinId=0; //Un used commented by OM Tripathi
		//List<MasAdministrativeSex> sexList = new ArrayList<MasAdministrativeSex>();
		map = opdHandlerService.getAntenatalCard(visitId);
	       
		jsp = ANTENATAL_CARD_JSP;
		//jsp += ".jsp";
		title = "Antenatal Card List";
		map.put("visitId", visitId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}
	

	@SuppressWarnings("unchecked")
	public ModelAndView addAntenatalCard(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		List<OpdAntenatalCardTrimester> antCardTrimeList=new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntcardMenstrualHistry> menstrHistList=new ArrayList<OpdAntcardMenstrualHistry>();//added by govind 30-8-2016
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		int menarche = 0;
		String cycle = "";
		String days = "";
		Date lmp = new Date();
		Date edd = new Date();
		int gravida = 0;
		int para = 0;
		int abortions = 0;
		int live = 0;
		int ectopic = 0;
		String year = "";
		String pregnancyOutcome = "";
		String complications = "";
		int age = 0;
		String sex = "";
		int birthWeight = 0;
		String breastFeeding = "";
		String generalHealth = "";
		String medical = "";
		String surgical = "";
		String gynecological = "";
		String medicalHistory = "";
		String multiplePregnancy = "";
		String foetalAbnormality = "";
		String dietaryHabit = "";
		String smoking = "";
		String build = "";
		String nutrition = "";
		String height = "";
		String weight = "";
		String breast = "";
		String nipple = "";
		String heart = "";
		String lungs = "";
		String bloodGroupWife = "";
		String bloodGroupHusband = "";
		String sts = "";
		String hbsag = "";
		String hiv = "";
		String gct = "";
		Date examinationDate = new Date();
		String ogtt = "";
		Date ogttDate = new Date();
		String fasting = "";
		String oneHr = "";
		String twoHr = "";
		String threeHr = "";
		String highRiskFactors = "";
		//changed by govind 10-11-2016
		/*Date tetanusOnestDoseDate = new Date();
		Date tetanusTwondDoseDate = new Date(); */
		Date tetanusOnestDoseDate = null;
		Date tetanusTwondDoseDate = null;
		//changed by govind 10-11-2016 end
		String willingForTubectomy = "";
		Date antenatalDate = new Date();
		String weightAntenatal = "";
		String anyCompliant = "";
		String parllor = "";
		String oedema = "";
		String bp = "";
		String uterineSize = "";
		String presentationPosition = "";
		String engagement = "";
		String fhsFm = "";
		String urine = "";
		String hbGms = "";
		Date nextVisitOn = new Date();
		String advice = "";
		//govind code
		int deliveryOutcome=0,exist=0,antCardId=0,AntCount=0,SomeField=0;
		
		String obsterCompl="";
		String medicalDisord="";
		String usgDeatil="",usgDate="",usgDescrip="";int uCount=1;
		String AnemiaYes="",dmYes="",heartDisYes="",hypertenPreYes="",helpYes="",didSheReceivYes="",eclampsiaYes="",anyPrevAbdomSurgYes="",cerclageYes="";
		String heartDis="",mildNameMedicn="",mildDetctTreat="",severNameMedicn="",severDetctTreat="",didSheReceiv="",eclampsia="",anyPrevAbdomSurg="",cerclage="",other="";
		String pregConfrm="";
		//govind code end
		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		
		if (request.getParameter("existAnte") != null
				&& (!request.getParameter("existAnte").equals(""))) {
			exist = Integer.parseInt(request.getParameter("existAnte"));
		}
		
		
		if (request.getParameter("antCardId") != null
				&& (!request.getParameter("antCardId").equals(""))) {
			antCardId = Integer.parseInt(request.getParameter("antCardId"));
		}
		
		if (request.getParameter("AntCount") != null
				&& (!request.getParameter("AntCount").equals(""))) {
			AntCount = Integer.parseInt(request.getParameter("AntCount"));
		}
		
		//govind 9-8
		if (request.getParameter("SomeField") != null
				&& (!request.getParameter("SomeField").equals(""))) {
			SomeField = Integer.parseInt(request.getParameter("SomeField"));
		}
		//govind 9-8 end
		
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(TETANUS_ONE_DOSE_DATE) != null
				&& !(request.getParameter(TETANUS_ONE_DOSE_DATE).equals(""))) {
			tetanusOnestDoseDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(TETANUS_ONE_DOSE_DATE));
			infoMap.put("tetanusOnestDoseDate", tetanusOnestDoseDate); //added by amit das on 08-08-2016
		}
		if (request.getParameter(TETANUS_TWO_DOSE_DATE) != null
				&& !(request.getParameter(TETANUS_TWO_DOSE_DATE).equals(""))) {
			tetanusTwondDoseDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(TETANUS_TWO_DOSE_DATE));
			infoMap.put("tetanusTwondDoseDate", tetanusTwondDoseDate); //added by amit das on 08-08-2016
		}
		if (request.getParameter(ANTENATAL_DATE) != null
				&& !(request.getParameter(ANTENATAL_DATE).equals(""))) {
			antenatalDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(ANTENATAL_DATE));
		}
		if (request.getParameter(EXAMINATION_DATE) != null
				&& !(request.getParameter(EXAMINATION_DATE).equals(""))) {
			examinationDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(EXAMINATION_DATE));
		}
	
		if (request.getParameter(LMP) != null
				&& !(request.getParameter(LMP).equals(""))) {
			lmp = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(LMP));
		}
		if (request.getParameter(EDD) != null
				&& !(request.getParameter(EDD).equals(""))) {
			edd = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(EDD));
		}
		if (request.getParameter(OGTT_DATE) != null
				&& !(request.getParameter(OGTT_DATE).equals(""))) {
			ogttDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(OGTT_DATE));
		}
		if (request.getParameter(NEXT_VISIT_ON) != null
				&& !(request.getParameter(NEXT_VISIT_ON).equals(""))) {
			nextVisitOn = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(NEXT_VISIT_ON));
		}

		if (request.getParameter(HB_GMS) != null) {
			hbGms = request.getParameter(HB_GMS);
		}
		if (request.getParameter(URINE) != null) {
			urine = request.getParameter(URINE);
		}
		if (request.getParameter(FHS_FM) != null) {
			fhsFm = request.getParameter(FHS_FM);
		}
		if (request.getParameter(ENGAGEMENT) != null) {
			engagement = request.getParameter(ENGAGEMENT);
		}
		if (request.getParameter(PRESENTATION_POSITION) != null) {
			presentationPosition = request.getParameter(PRESENTATION_POSITION);
		}
		if (request.getParameter(UTERINE_SIZE) != null) {
			uterineSize = request.getParameter(UTERINE_SIZE);
		}
		if (request.getParameter(BP) != null) {
			bp = request.getParameter(BP);
		}
		if (request.getParameter(OEDEMA) != null) {
			oedema = request.getParameter(OEDEMA);
		}
		if (request.getParameter(PARLLOR) != null) {
			parllor = request.getParameter(PARLLOR);
		}
		if (request.getParameter(ANY_COMPLIANT) != null) {
			anyCompliant = request.getParameter(ANY_COMPLIANT);
		}
		if (request.getParameter(WEIGHT_ANTENATAL) != null) {
			weightAntenatal = request.getParameter(WEIGHT_ANTENATAL);
		}
		if (request.getParameter(WILLING_FOR_TUBECTOMY) != null) {
			willingForTubectomy = request.getParameter(WILLING_FOR_TUBECTOMY);
		}
		if (request.getParameter(HIGH_RISK_FACTORS) != null) {
			highRiskFactors = request.getParameter(HIGH_RISK_FACTORS);
		}
		if (request.getParameter(THREE_HR) != null) {
			threeHr = request.getParameter(THREE_HR);
		}
		if (request.getParameter(TWO_HR) != null) {
			twoHr = request.getParameter(TWO_HR);
		}
		if (request.getParameter(ONE_HR) != null) {
			oneHr = request.getParameter(ONE_HR);
		}
		if (request.getParameter(FASTING) != null) {
			fasting = request.getParameter(FASTING);
		}
		if (request.getParameter(ADVICE) != null) {
			advice = request.getParameter(ADVICE);
		}

		if (request.getParameter(OGTT) != null) {
			ogtt = request.getParameter(OGTT);
		}
		if (request.getParameter(GCT) != null) {
			gct = request.getParameter(GCT);
		}
		if (request.getParameter(HIV) != null) {
			hiv = request.getParameter(HIV);
		}
		if (request.getParameter(HBSAG) != null) {
			hbsag = request.getParameter(HBSAG);
		}
		if (request.getParameter(STS) != null) {
			sts = request.getParameter(STS);
		}
		if (request.getParameter(BLOOD_GROUP_HUSBAND) != null) {
			bloodGroupHusband = request.getParameter(BLOOD_GROUP_HUSBAND);
		}
		if (request.getParameter(BLOOD_GROUP_WIFE) != null) {
			bloodGroupWife = request.getParameter(BLOOD_GROUP_WIFE);
		}
		if (request.getParameter(TRANSVERSE_COLON) != null) {
			lungs = request.getParameter(TRANSVERSE_COLON);
		}
		if (request.getParameter(HEART) != null) {
			heart = request.getParameter(HEART);
		}
		if (request.getParameter(NIPPLE) != null) {
			nipple = request.getParameter(NIPPLE);
		}
		if (request.getParameter(BREAST) != null) {
			breast = request.getParameter(BREAST);
		}
		if (request.getParameter(WEIGHT) != null) {
			weight = request.getParameter(WEIGHT);
		}
		if (request.getParameter(HEIGHT) != null) {
			height = request.getParameter(HEIGHT);
		}
		if (request.getParameter(NUTRITION) != null) {
			nutrition = request.getParameter(NUTRITION);
		}
		if (request.getParameter(BUILD) != null) {
			build = request.getParameter(BUILD);
		}
		if (request.getParameter(SMOKING) != null) {
			smoking = request.getParameter(SMOKING);
		}
		if (request.getParameter(DIETARY_HABIT) != null) {
			dietaryHabit = request.getParameter(DIETARY_HABIT);
		}
		if (request.getParameter(FOETAL_ABNORMALITY) != null) {
			foetalAbnormality = request.getParameter(FOETAL_ABNORMALITY);
		}
		if (request.getParameter(MULTIPLE_PREGNANCY) != null) {
			multiplePregnancy = request.getParameter(MULTIPLE_PREGNANCY);
		}
		if (request.getParameter(GYNECOLOGICAL) != null) {
			gynecological = request.getParameter(GYNECOLOGICAL);
		}
		if (request.getParameter(SURGICAL) != null) {
			surgical = request.getParameter(SURGICAL);
		}
		if (request.getParameter(MEDICAL) != null) {
			medical = request.getParameter(MEDICAL);
		}
//		if (request.getParameter(GENERAL_HEALTH) != null) {
//			generalHealth = request.getParameter(GENERAL_HEALTH);
//		}
				
		if (request.getParameter(DAYS) != null) {
			days = request.getParameter(DAYS);
		}
		if (request.getParameter(CYCLE) != null) {
			cycle = request.getParameter(CYCLE);
		}
		
		if (request.getParameter(MENARCHE) != null
				&& (!request.getParameter(MENARCHE).equals(""))) {
			menarche = Integer.parseInt(request.getParameter(MENARCHE));
		}

		if (request.getParameter(GRAVIDA) != null
				&& (!request.getParameter(GRAVIDA).equals(""))) {
			gravida = Integer.parseInt(request.getParameter(GRAVIDA));
		}
		if (request.getParameter(PARA) != null
				&& (!request.getParameter(PARA).equals(""))) {
			para = Integer.parseInt(request.getParameter(PARA));
		}

		if (request.getParameter(ABORTIONS) != null
				&& (!request.getParameter(ABORTIONS).equals(""))) {
			abortions = Integer.parseInt(request.getParameter(ABORTIONS));
		}
		
		if (request.getParameter(LIVE) != null
				&& (!request.getParameter(LIVE).equals(""))) {
			live = Integer.parseInt(request.getParameter(LIVE));
		}
		
		if ((request.getParameter(ECTOPIC) != null)
				&& (!request.getParameter(ECTOPIC).equals(""))) {
			ectopic = Integer.parseInt(request.getParameter(ECTOPIC));
		}
			
	//govind code
	
		if (request.getParameter(OBSTER_COMPLICATION) != null
				&& (!request.getParameter(OBSTER_COMPLICATION).equals(""))) {
			obsterCompl = request.getParameter(OBSTER_COMPLICATION);
		}
		if (request.getParameter(MEDICAL_DISORDER) != null
				&& (!request.getParameter(MEDICAL_DISORDER).equals(""))) {
			medicalDisord = request.getParameter(MEDICAL_DISORDER);
		}
		
	//added by govind 23-8-2016
		if (request.getParameter("AnemiaYes") != null
				&& (!request.getParameter("AnemiaYes").equals(""))) {
			AnemiaYes =request.getParameter("AnemiaYes");
		}
		if (request.getParameter("dmYes") != null
				&& (!request.getParameter("dmYes").equals(""))) {
			dmYes =request.getParameter("dmYes");
		}
		if (request.getParameter("heartDisYes") != null
				&& (!request.getParameter("heartDisYes").equals(""))) {
			heartDisYes =request.getParameter("heartDisYes");
		}
		if (request.getParameter("hypertenPreYes") != null
				&& (!request.getParameter("hypertenPreYes").equals(""))) {
			hypertenPreYes =request.getParameter("hypertenPreYes");
		}
		if (request.getParameter("helpYes") != null
				&& (!request.getParameter("helpYes").equals(""))) {
			helpYes =request.getParameter("helpYes");
		}
		if (request.getParameter("didSheReceivYes") != null
				&& (!request.getParameter("didSheReceivYes").equals(""))) {
			didSheReceivYes =request.getParameter("didSheReceivYes");
		}
		if (request.getParameter("eclampsiaYes") != null
				&& (!request.getParameter("eclampsiaYes").equals(""))) {
			eclampsiaYes =request.getParameter("eclampsiaYes");
		}
		if (request.getParameter("anyPrevAbdomSurgYes") != null
				&& (!request.getParameter("anyPrevAbdomSurgYes").equals(""))) {
			anyPrevAbdomSurgYes =request.getParameter("anyPrevAbdomSurgYes");
		}
		if (request.getParameter("cerclageYes") != null
				&& (!request.getParameter("cerclageYes").equals(""))) {
			cerclageYes =request.getParameter("cerclageYes");
		}
		//added by govind 25-8-2016
		if (request.getParameter("heartDis") != null
				&& (!request.getParameter("heartDis").equals(""))) {
			heartDis =request.getParameter("heartDis");
		}
		if (request.getParameter("mildNameMedicn") != null
				&& (!request.getParameter("mildNameMedicn").equals(""))) {
			mildNameMedicn =request.getParameter("mildNameMedicn");
		}
		if (request.getParameter("mildDetctTreat") != null
				&& (!request.getParameter("mildDetctTreat").equals(""))) {
			mildDetctTreat =request.getParameter("mildDetctTreat");
		}
		if (request.getParameter("severNameMedicn") != null
				&& (!request.getParameter("severNameMedicn").equals(""))) {
			severNameMedicn =request.getParameter("severNameMedicn");
		}
		if (request.getParameter("severDetctTreat") != null
				&& (!request.getParameter("severDetctTreat").equals(""))) {
			severDetctTreat =request.getParameter("severDetctTreat");
		}
		if (request.getParameter("didSheReceiv") != null
				&& (!request.getParameter("didSheReceiv").equals(""))) {
			didSheReceiv =request.getParameter("didSheReceiv");
		}
		if (request.getParameter("eclampsia") != null
				&& (!request.getParameter("eclampsia").equals(""))) {
			eclampsia =request.getParameter("eclampsia");
		}
		if (request.getParameter("anyPrevAbdomSurg") != null
				&& (!request.getParameter("anyPrevAbdomSurg").equals(""))) {
			anyPrevAbdomSurg =request.getParameter("anyPrevAbdomSurg");
		}
		if (request.getParameter("cerclage") != null
				&& (!request.getParameter("cerclage").equals(""))) {
			cerclage =request.getParameter("cerclage");
		}
		if (request.getParameter("other") != null
				&& (!request.getParameter("other").equals(""))) {
			other =request.getParameter("other");
		}
		
		if (request.getParameter("pregConfrm") != null
				&& (!request.getParameter("pregConfrm").equals(""))) {
			pregConfrm =request.getParameter("pregConfrm");
		}
		//end code
		
		
		int usghdb=0;
		if (request.getParameter("usghdb") != null
				&& (!request.getParameter("usghdb").equals(""))) {
			usghdb = Integer.parseInt(request.getParameter("usghdb"));
		}
		
		
		
		int usgCount=Integer.parseInt((String)request.getParameter("usgCount"));//usg Detail getting
		if(usgCount==1){
		for(int u=0;u<=usghdb;u++){
			if (request.getParameter("usgDate"+u) != null
					&& (!request.getParameter("usgDate"+u).equals(""))) {
				usgDate = request.getParameter("usgDate"+u);
			}
			if (request.getParameter("usgFld"+u) != null
					&& (!request.getParameter("usgFld"+u).equals(""))) {
				usgDescrip = request.getParameter("usgFld"+u);
			}
			
			usgDeatil=usgDeatil+uCount+","+(usgDate+u)+","+usgDescrip+";";
			uCount++;
		}
		}
		
		if(exist==1){
			infoMap.put("usgDeatil", usgDeatil);
			
		}
		
		
	//govind code end
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdAntenatalCard antenatalCard =null;
		
		try {
			
			//govind code 5-8
			int opdhdb=0;
			if (request.getParameter("opdhdb") != null
					&& (!request.getParameter("opdhdb").equals(""))) {
				opdhdb = Integer.parseInt(request.getParameter("opdhdb"));
			}
			
				//govind end 5-8

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			infoMap.put("masHospital", masHospital); // added by amit das on 08-08-2016
			

			Patient patient = new Patient();
			patient.setId(hinId);
			infoMap.put("patient", patient); // added by amit das on 08-08-2016
			
			

			Visit visit = new Visit();
			visit.setId(visitId);
			
			
			if(AntCount==1){
				for(int op=0;op<=opdhdb;op++){
				if (request.getParameter(PREGNANCY_OUTCOME+op) != null) {
					pregnancyOutcome = request.getParameter(PREGNANCY_OUTCOME+op);
				}
				
				if (request.getParameter(SEX+op) != null) {
					sex = request.getParameter(SEX+op);
				}
				
					if ((request.getParameter(AGE_UNIT+op) != null)
						&& (!request.getParameter(AGE_UNIT+op).equals(""))) {
					age = Integer.parseInt(request.getParameter(AGE_UNIT+op));
				}
				
					if (request.getParameter(BIRTH_WEIGHT+op) != null
							&& (!request.getParameter(BIRTH_WEIGHT+op).equals(""))) {
						birthWeight = Integer.parseInt(request.getParameter(BIRTH_WEIGHT+op));
					}
				
				if (request.getParameter(DELIVERY_OUTCOME+op) != null
						&& (!request.getParameter(DELIVERY_OUTCOME+op).equals(""))) {
					deliveryOutcome = Integer.parseInt(request.getParameter(DELIVERY_OUTCOME+op));
				}
				
				if (request.getParameter(YEAR+op) != null
						&& !(request.getParameter(YEAR+op).equals(""))) {
					year = request.getParameter(YEAR+op);
				}
				
				if (request.getParameter(COMPLICATIONS+op) != null) {
					complications = request.getParameter(COMPLICATIONS+op);
				}
				if (request.getParameter(BREAST_FEEDING+op) != null) {
					breastFeeding = request.getParameter(BREAST_FEEDING+op);
				}
				
					if (request.getParameter(GENERAL_HEALTH+op) != null) {
					generalHealth = request.getParameter(GENERAL_HEALTH+op);
				}
				}
				}
			int count=0;
			if(SomeField==1 && AntCount==1 && exist==1){
				antenatalCard = new OpdAntenatalCard();
				count=1;
			}
			if(SomeField==1 && exist==0 && AntCount==0){
				antenatalCard = new OpdAntenatalCard();
				count=1;
			}
			if(SomeField==1 && exist==0 && AntCount==1){
				antenatalCard = new OpdAntenatalCard();
				count=1;
			}
			if(count==1){
			antenatalCard.setHospital(masHospital);
			antenatalCard.setHin(patient);
			antenatalCard.setVisit(visit);
			antenatalCard.setDepartment(masDepartment);
			antenatalCard.setLastChgTime(time);
			antenatalCard.setLastChgBy(userId);
			antenatalCard.setStatus("y");
			antenatalCard.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			antenatalCard.setAbortions(abortions);
			antenatalCard.setAdvice(advice);
			antenatalCard.setAge(age);
			antenatalCard.setAntenatalDate(antenatalDate);
			antenatalCard.setAnyCompliant(anyCompliant);
			antenatalCard.setBirthWeight(birthWeight);
			antenatalCard.setBloodGroupHusband(bloodGroupHusband);
			antenatalCard.setBloodGroupWife(bloodGroupWife);
			antenatalCard.setBp(bp);
			antenatalCard.setBreast(breast);
			antenatalCard.setBreastFeeding(breastFeeding);
			antenatalCard.setBuild(build);
			antenatalCard.setComplications(complications);
			antenatalCard.setCycle(cycle);
			antenatalCard.setDays(days);
			antenatalCard.setDietaryHabit(dietaryHabit);
			antenatalCard.setEctopic(ectopic);
			antenatalCard.setEdd(edd);
			antenatalCard.setEngagement(engagement);
			antenatalCard.setExaminationDate(examinationDate);
			antenatalCard.setFasting(fasting);
			antenatalCard.setFhsFm(fhsFm);
			antenatalCard.setFoetalAbnormality(foetalAbnormality);
			antenatalCard.setGct(gct);
			antenatalCard.setGeneralHealth(generalHealth);
			antenatalCard.setGravida(gravida);
			antenatalCard.setGynecological(gynecological);
			antenatalCard.setHbGms(hbGms);
			antenatalCard.setHbsag(hbsag);
			antenatalCard.setHeart(heart);
			antenatalCard.setHeight(height);
			antenatalCard.setHighRiskFactors(highRiskFactors);
			antenatalCard.setHiv(hiv);
			antenatalCard.setLive(live);
			antenatalCard.setLmp(lmp);
			antenatalCard.setLungs(lungs);
			antenatalCard.setMedical(medical);

			String[] medicalHistoryArray = null;
			if (request.getParameterValues(MEDICAL_HISTORY) != null) {
				medicalHistoryArray = (String[]) request
						.getParameterValues(MEDICAL_HISTORY);
				for (int x = 0; x < medicalHistoryArray.length; x++) {
					if (x == 0) {
						medicalHistory = medicalHistoryArray[x];
					} else {
						medicalHistory = medicalHistory + ","
								+ medicalHistoryArray[x];
					}
				}
			}
			antenatalCard.setMedicalHistory(medicalHistory);
			antenatalCard.setMenarche(menarche);
			antenatalCard.setMultiplePregnancy(multiplePregnancy);
			antenatalCard.setNextVisitOn(nextVisitOn);
			antenatalCard.setNipple(nipple);
			antenatalCard.setNutrition(nutrition);
			antenatalCard.setOedema(oedema);
			antenatalCard.setOneHr(oneHr);
			antenatalCard.setPara(para);
			antenatalCard.setParllor(parllor);
			antenatalCard.setPregnancyOutcome(pregnancyOutcome);
			antenatalCard.setPresentationPosition(presentationPosition);
			antenatalCard.setSex(sex);
			antenatalCard.setSmoking(smoking);
			antenatalCard.setSts(sts);
			antenatalCard.setSurgical(surgical);
			antenatalCard.setTetanusOnestDoseDate(tetanusOnestDoseDate);
			antenatalCard.setTetanusTwondDoseDate(tetanusTwondDoseDate);
			antenatalCard.setTwoHr(twoHr);
			antenatalCard.setThreeHr(threeHr);
			antenatalCard.setUrine(urine);
			antenatalCard.setUterineSize(uterineSize);
			antenatalCard.setWeight(weight);
			antenatalCard.setWeightAntenatal(weightAntenatal);
			antenatalCard.setWillingForTubectomy(willingForTubectomy);
			antenatalCard.setYear(year);
			antenatalCard.setOgtt(ogtt);
			antenatalCard.setOgttDate(ogttDate);
			antenatalCard.setDelvrOutcm(deliveryOutcome);
			antenatalCard.setObsterComplcatn(obsterCompl);
			antenatalCard.setMedicalDisord(medicalDisord);
			antenatalCard.setUsgDetail(usgDeatil);
		//govind added 23-8-2016
			antenatalCard.setAnemiaYn(AnemiaYes);
			antenatalCard.setDmYn(dmYes);
			antenatalCard.setHeartdisYn(heartDisYes);
			antenatalCard.setHypertenPreYn(hypertenPreYes);
			antenatalCard.setHelpYn(helpYes);
			antenatalCard.setDidsheReceiveYn(didSheReceivYes);
			antenatalCard.setEclampsiaYn(eclampsiaYes);
			antenatalCard.setAnyprevAbdomsurYn(anyPrevAbdomSurgYes);
			antenatalCard.setCerclagesYn(cerclageYes);
			//govind added 25-8-2016 end	
			antenatalCard.setHeartDis(heartDis);
			antenatalCard.setMildNameMedcn(mildNameMedicn);
			antenatalCard.setMildDeductTreat(mildDetctTreat);
			antenatalCard.setSeverNameMedcn(severNameMedicn);
			antenatalCard.setSeverDeductTreat(severDetctTreat);
			antenatalCard.setDidsheReceiv(didSheReceiv);
			antenatalCard.setEclampsia(eclampsia);
			antenatalCard.setAnyprevAbdomsurg(anyPrevAbdomSurg);
			antenatalCard.setCerclage(cerclage);
			antenatalCard.setOther(other);
			
			antenatalCard.setPregnConfrm(pregConfrm);
			
			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("referredDept", referredDept);
			
		   }
		
			infoMap.put("antenatalCard", antenatalCard);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			
			infoMap.put("referredDepartment", masDepartment);
			
			infoMap.put("hinId", hinId);
			infoMap.put("userId", userId);
			infoMap.put("time", time);
			infoMap.put("date", date);
			infoMap.put("exist", exist);
			infoMap.put("AntCount", AntCount);
			infoMap.put("antCardId", antCardId);
			infoMap.put("count", count);
			
			antCardTrimeList=getOpdAntenatalCardTrimester(request);
			
	      //added by govind 30-8-2016 
			
			menstrHistList=getOpdAntCardMensHistory(request);
			
			//added by govind 30-8-2016 end
			
			
			
			infoMap.put("antCardTrimeList", antCardTrimeList);
			infoMap.put("menstrHistList", menstrHistList);
			
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService.addAntenatalCard(infoMap);

		if (successfullyAdded) {
			message = "Antenatal Card has been done Successfully..";
		} else {
			message = "Antenatal Card has not been done Successfully..";
		}

		try {
			map = opdHandlerService.getAntenatalCard(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "messageOBG";
		title = "Add Antenatal Card";
		//jsp += ".jsp";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("contentJsp", jsp);

		return new ModelAndView(jsp, "map", map);
	}


	public ModelAndView viewAntenatalCard(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showAntenatalCardJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewAntenatalCard(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewAntenatalCard";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView updateAntenatalCard(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean saved = false;
		// HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);

		/*
		 * int departmentId = (Integer)session.getAttribute("deptId");
		 * box.put("departmentId", departmentId);
		 *
		 * int hospitalId = (Integer)session.getAttribute("hospitalId");
		 * box.put("hospitalId", hospitalId);
		 *
		 * Users user = (Users)session.getAttribute("users"); int userId =
		 * user.getId(); box.put("userId", userId);
		 */

		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.updateAntenatalCard(box);
		saved = (Boolean) map.get("saved");
		String message = "";
		if (saved) {
			message = "Antenatal Card updated Successfully.";
		} else {
			message = "Some Problem Occured.";
		}
		map.put("visitId", visitId);
		jsp = "messageAntenatalCard";
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showAntenatalCardEditJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int aId = Integer.parseInt(request.getParameter("aId"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getAntenatalCardEdit(aId, visitId);

		jsp = ANTENATAL_CARD_EDIT_JSP;
		title = "Antenatal Card List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	public ModelAndView showGravidagramHTNJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getGravidagramHTN(visitId);

		jsp = GRAVIDAGRAM_HTN_JSP;
		title = "Antenatal Card List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGravidagramHTN(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";
		String days = "";
		String weeks = "";
		String am = "";
		String pm = "";
		String dfmc = "";
		String fhs = "";
		String fundalHt = "";
		String abdoGirth = "";
		String wtKg = "";
		String uAlb = "";
		String usgAfi = "";
		String nst = "";
		String haemat = "";
		Date gravidagramHtnDate = new Date();

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(DATE) != null
				&& !(request.getParameter(DATE).equals(""))) {
			gravidagramHtnDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE));
		}
		if (request.getParameter(HAEMAT) != null
				&& !(request.getParameter(HAEMAT).equals(""))) {
			haemat = request.getParameter(HAEMAT);
		}
		if (request.getParameter(NST) != null) {
			nst = request.getParameter(NST);
		}
		if (request.getParameter(USB_AFI) != null) {
			usgAfi = request.getParameter(USB_AFI);
		}
		if (request.getParameter(U_ALB) != null) {
			uAlb = request.getParameter(U_ALB);
		}
		if (request.getParameter(WT_KG) != null) {
			wtKg = request.getParameter(WT_KG);
		}
		if (request.getParameter(ABDO_GIRTH) != null) {
			abdoGirth = request.getParameter(ABDO_GIRTH);
		}
		if (request.getParameter(FUBDAL_HT) != null) {
			fundalHt = request.getParameter(FUBDAL_HT);
		}
		if (request.getParameter(AM) != null) {
			am = request.getParameter(AM);
		}
		if (request.getParameter(PM) != null) {
			pm = request.getParameter(PM);
		}
		if (request.getParameter(FHS) != null) {
			fhs = request.getParameter(FHS);
		}
		if (request.getParameter(DFMC) != null) {
			dfmc = request.getParameter(DFMC);
		}
		if (request.getParameter(WEEKS) != null) {
			weeks = request.getParameter(WEEKS);
		}
		if (request.getParameter(DAYS) != null) {
			days = request.getParameter(DAYS);
		}

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGravidagramHtn gravidagramHtn = new OpdGravidagramHtn();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gravidagramHtn.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gravidagramHtn.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gravidagramHtn.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gravidagramHtn.setVisit(visit);

			gravidagramHtn.setLastChgTime(time);
			gravidagramHtn.setLastChgBy(userId);
			gravidagramHtn.setStatus("y");
			gravidagramHtn.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gravidagramHtn.setGravidagramHtnDate(gravidagramHtnDate);
			gravidagramHtn.setAbdoGirth(abdoGirth);
			gravidagramHtn.setBpAm(am);
			gravidagramHtn.setBpPm(pm);
			gravidagramHtn.setFetusDffmc(dfmc);
			gravidagramHtn.setFetusFhs(fhs);
			gravidagramHtn.setFundalHt(fundalHt);
			gravidagramHtn.setHaematBiochemInvestigations(haemat);
			gravidagramHtn.setNst(nst);
			gravidagramHtn.setPogDays(days);
			gravidagramHtn.setPogWeeks(weeks);
			gravidagramHtn.setUAlb(uAlb);
			gravidagramHtn.setUsgAfi(usgAfi);
			gravidagramHtn.setWtKg(wtKg);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("gravidagramHtn", gravidagramHtn);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
			
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService.addGravidagramHTN(infoMap);

		if (successfullyAdded) {
			message = "Gravidagram HTN has been done Successfully..";
		} else {
			message = "Gravidagram HTN has not been done Successfully..";
		}

		/*
		 * try{ map = opdHandlerService.getAntenatalCard(visitId);
		 *
		 * }catch (Exception e) { e.printStackTrace(); }
		 */
		jsp = "messageGravidagramHTN";
		title = "Add Antenatal Card";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewGravidagramHTN(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGravidagramHTNJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			// int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			/*
			 * if(request.getParameter("visitNoForJsp") != null){ visitNoForJsp
			 * = Integer.parseInt(request.getParameter("visitNoForJsp")); }
			 */
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId;
		}
		map = opdHandlerService.viewGravidagramHTN(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGravidagramHTN";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showGravidagramGestationalDiabitiesOneJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getGravidagramGestationalDiabitiesOne(visitId);

		jsp = GRAVIDAGRAM_GESTATIONAL_DIABITIES_ONE_JSP;
		title = "Gravidagram estational Diabities One List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGravidagramGestationalDiabitiesOne(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";

		Date gravidagramDate = new Date();
		Date lmp = new Date();
		Date edd = new Date();
		Date dateOgtt = new Date();
		Date dateGct = new Date();

		String party = "";
		String pmc = "";
		String riskFactors = "";
		String prevPregnancy = "";
		String presentPregnancy = "";
		String pogOgtt = "";
		String pogGct = "";
		String valueOgtt = "";
		String valueGct = "";

		String remarksOgtt = "";
		String remarksGct = "";

		String fasting = "";
		String familyHoDm = "";
		String bmi = "";
		int height = 0;
		int weight = 0;

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(DATE) != null
				&& !(request.getParameter(DATE).equals(""))) {
			gravidagramDate = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE));
		}
		if (request.getParameter(LMP) != null
				&& !(request.getParameter(LMP).equals(""))) {
			lmp = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(LMP));
		}
		if (request.getParameter(EDD) != null
				&& !(request.getParameter(EDD).equals(""))) {
			edd = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(EDD));
		}
		if (request.getParameter(DATE_OGTT) != null
				&& !(request.getParameter(DATE_OGTT).equals(""))) {
			dateOgtt = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE_OGTT));
		}
		if (request.getParameter(DATE_GCT) != null
				&& !(request.getParameter(DATE_GCT).equals(""))) {
			dateGct = HMSUtil.dateFormatterDDMMYYYY(request
					.getParameter(DATE_GCT));
		}
		if (request.getParameter(PARTY) != null
				&& !(request.getParameter(PARTY).equals(""))) {
			party = request.getParameter(PARTY);
		}
		if (request.getParameter(PMC) != null) {
			pmc = request.getParameter(PMC);
		}
		if (request.getParameter(LIVE) != null) {
			prevPregnancy = request.getParameter(LIVE);
		}
		if (request.getParameter(ECTOPIC) != null) {
			presentPregnancy = request.getParameter(ECTOPIC);
		}
		if (request.getParameter(POG_OGTT) != null) {
			pogOgtt = request.getParameter(POG_OGTT);
		}
		if (request.getParameter(POG_GCT) != null) {
			pogGct = request.getParameter(POG_GCT);
		}
		if (request.getParameter(VALUES_GCT) != null) {
			valueGct = request.getParameter(VALUES_GCT);
		}
		if (request.getParameter(VALUES_OGTT) != null) {
			valueOgtt = request.getParameter(VALUES_OGTT);
		}
		if (request.getParameter(REMARKS_GCT) != null) {
			remarksGct = request.getParameter(REMARKS_GCT);
		}
		if (request.getParameter(REMARKS_OGTT) != null) {
			remarksOgtt = request.getParameter(REMARKS_OGTT);
		}
		if (request.getParameter(FASTING) != null) {
			fasting = request.getParameter(FASTING);
		}
		if (request.getParameter(RISK_FACTORY) != null) {
			riskFactors = request.getParameter(RISK_FACTORY);
		}
		if (request.getParameter(BMI) != null) {
			bmi = request.getParameter(BMI);
		}
		if (request.getParameter(FAMILY_HO_DM) != null) {
			familyHoDm = request.getParameter(FAMILY_HO_DM);
		}
		if (!request.getParameter(WEIGHT).equals("")) {
			weight = Integer.parseInt(request.getParameter(WEIGHT));
		}
		if (!request.getParameter(HEIGHT).equals("")) {
			height = Integer.parseInt(request.getParameter(HEIGHT));
		}
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGravidagramGestationalDiabitiesOne gravidagramGestationalDiabitiesOne = new OpdGravidagramGestationalDiabitiesOne();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gravidagramGestationalDiabitiesOne.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gravidagramGestationalDiabitiesOne.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gravidagramGestationalDiabitiesOne.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gravidagramGestationalDiabitiesOne.setVisit(visit);

			gravidagramGestationalDiabitiesOne.setLastChgTime(time);
			gravidagramGestationalDiabitiesOne.setLastChgBy(userId);
			gravidagramGestationalDiabitiesOne.setStatus("y");
			gravidagramGestationalDiabitiesOne.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			gravidagramGestationalDiabitiesOne.setBmi(bmi);
			gravidagramGestationalDiabitiesOne.setEdd(edd);
			gravidagramGestationalDiabitiesOne.setFamilyHoDm(familyHoDm);
			gravidagramGestationalDiabitiesOne.setGctDate(dateGct);
			gravidagramGestationalDiabitiesOne.setGctFasting(fasting);
			gravidagramGestationalDiabitiesOne.setGctPog(pogGct);
			gravidagramGestationalDiabitiesOne.setGctRemarks(remarksGct);
			gravidagramGestationalDiabitiesOne.setGctValue(valueGct);
			gravidagramGestationalDiabitiesOne
					.setGravidagramGestationalDiabitiesOneDate(gravidagramDate);
			gravidagramGestationalDiabitiesOne.setHeight(height);
			gravidagramGestationalDiabitiesOne.setLmp(lmp);
			gravidagramGestationalDiabitiesOne.setOgttDate(dateOgtt);
			gravidagramGestationalDiabitiesOne.setOgttPog(pogOgtt);
			gravidagramGestationalDiabitiesOne.setOgttRemarks(remarksOgtt);
			gravidagramGestationalDiabitiesOne.setOgttValue(valueOgtt);
			gravidagramGestationalDiabitiesOne.setParty(party);
			gravidagramGestationalDiabitiesOne.setPmc(pmc);
			gravidagramGestationalDiabitiesOne
					.setPresentPregnancy(presentPregnancy);
			gravidagramGestationalDiabitiesOne.setPrevPregnancy(prevPregnancy);
			gravidagramGestationalDiabitiesOne.setRiskFactors(riskFactors);
			gravidagramGestationalDiabitiesOne.setWeight(weight);
			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("gravidagramGestationalDiabitiesOne",
					gravidagramGestationalDiabitiesOne);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
			
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGravidagramGestationalDiabitiesOne(infoMap);

		if (successfullyAdded) {
			message = "gravidagram Gestational Diabities One  has been done Successfully..";
		} else {
			message = "gravidagram Gestational Diabities One has not been done Successfully..";
		}

		/*
		 * try{ map = opdHandlerService.getAntenatalCard(visitId);
		 *
		 * }catch (Exception e) { e.printStackTrace(); }
		 */
		jsp = "messageGravidagramHTN";
		title = "Add Ggravidagram Gestational Diabities One";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewGravidagramGestationalDiabitiesOne(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGravidagramGestationalDiabitiesOneJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			// int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			/*
			 * if(request.getParameter("visitNoForJsp") != null){ visitNoForJsp
			 * = Integer.parseInt(request.getParameter("visitNoForJsp")); }
			 */
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId;
		}
		map = opdHandlerService
				.viewGravidagramGestationalDiabitiesOne(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewGravidagramGestationalDiabitiesOne";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showGravidagramGestationalDiabitiesTwoJsp(
			HttpServletRequest request, HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.getGravidagramGestationalDiabitiesTwo(visitId);

		jsp = GRAVIDAGRAM_GESTATIONAL_DIABITIES_TWO_JSP;
		title = "Gravidagram estational Diabities Two List";
		map.put("visitId", visitId);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView addGravidagramGestationalDiabitiesTwo(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map<String, Object> infoMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		int hinId = 0;
		int visitId = 0;
		String date = "";
		String time = "";

		String nuchalTraslucency = "";
		String msarp = "";
		String anomalyScan = "";
		String retalEcho = "";
		Date datePog = new Date();
		String metAge = "";
		String cen = "";
		String ac = "";
		String efw = "";

		String ael = "";
		String nst = "";

		String elAcac = "";
		String pondrelIndex = "";
		String remarks = "";
		String doppler = "";
		String deliverNote = "";
		String birthWeight = "";
		String mnNeonatlEcome = "";

		HttpSession session = request.getSession();
		date = (String) utilMap.get("currentDate");
		time = (String) utilMap.get("currentTime");
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (!request.getParameter(VISIT_ID).equals("")) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(NUCHAL_TRASLUCENCY) != null
				&& !(request.getParameter(NUCHAL_TRASLUCENCY).equals(""))) {
			nuchalTraslucency = request.getParameter(NUCHAL_TRASLUCENCY);
		}
		if (request.getParameter(MSARP) != null) {
			msarp = request.getParameter(MSARP);
		}
		if (request.getParameter(ANOMALY_SCAN) != null) {
			anomalyScan = request.getParameter(ANOMALY_SCAN);
		}
		if (request.getParameter(RETAL_ECHO) != null) {
			retalEcho = request.getParameter(RETAL_ECHO);
		}
		if (request.getParameter(POG) != null
				&& !(request.getParameter(POG).equals(""))) {
			datePog = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(POG));
		}

		if (request.getParameter(MET_AGE) != null) {
			metAge = request.getParameter(MET_AGE);
		}
		if (request.getParameter(CEN) != null) {
			cen = request.getParameter(CEN);
		}
		if (request.getParameter(AC) != null) {
			ac = request.getParameter(AC);
		}
		if (request.getParameter(EFW) != null) {
			efw = request.getParameter(EFW);
		}
		if (request.getParameter(AEL) != null) {
			ael = request.getParameter(AEL);
		}
		if (request.getParameter(NST) != null) {
			nst = request.getParameter(NST);
		}
		if (request.getParameter(EL_ACAC) != null) {
			elAcac = request.getParameter(EL_ACAC);
		}
		if (request.getParameter(PONDREL_INDEX) != null) {
			pondrelIndex = request.getParameter(PONDREL_INDEX);
		}
		if (request.getParameter(REMARKS) != null) {
			remarks = request.getParameter(REMARKS);
		}
		if (request.getParameter(DOPPLER) != null) {
			doppler = request.getParameter(DOPPLER);
		}
		if (request.getParameter(DELIVER_NOTE) != null) {
			deliverNote = request.getParameter(DELIVER_NOTE);
		}
		if (request.getParameter(BIRTH_WEIGHT) != null) {
			birthWeight = request.getParameter(BIRTH_WEIGHT);
		}
		if (request.getParameter(MN_NEONATL_ECOME) != null) {
			mnNeonatlEcome = request.getParameter(MN_NEONATL_ECOME);
		}

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		OpdGravidagramGestationalDiabitiesTwo gravidagramGestationalDiabitiesTwo = new OpdGravidagramGestationalDiabitiesTwo();
		try {

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			gravidagramGestationalDiabitiesTwo.setDepartment(masDepartment);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			gravidagramGestationalDiabitiesTwo.setHospital(masHospital);

			Patient patient = new Patient();
			patient.setId(hinId);
			gravidagramGestationalDiabitiesTwo.setHin(patient);

			Visit visit = new Visit();
			visit.setId(visitId);
			gravidagramGestationalDiabitiesTwo.setVisit(visit);

			gravidagramGestationalDiabitiesTwo.setLastChgTime(time);
			gravidagramGestationalDiabitiesTwo.setLastChgBy(userId);
			gravidagramGestationalDiabitiesTwo.setStatus("y");
			gravidagramGestationalDiabitiesTwo.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			gravidagramGestationalDiabitiesTwo.setAc(ac);
			gravidagramGestationalDiabitiesTwo.setAel(ael);
			gravidagramGestationalDiabitiesTwo.setAnomalyScan(anomalyScan);
			gravidagramGestationalDiabitiesTwo.setBirthWeight(birthWeight);
			gravidagramGestationalDiabitiesTwo.setCen(cen);
			gravidagramGestationalDiabitiesTwo.setDeliverNote(deliverNote);
			gravidagramGestationalDiabitiesTwo.setDoppler(doppler);
			gravidagramGestationalDiabitiesTwo.setEfw(efw);
			gravidagramGestationalDiabitiesTwo.setElAcac(elAcac);
			gravidagramGestationalDiabitiesTwo.setMetAge(metAge);
			gravidagramGestationalDiabitiesTwo
					.setMnNeonatlEcome(mnNeonatlEcome);
			gravidagramGestationalDiabitiesTwo.setMsarp(msarp);
			gravidagramGestationalDiabitiesTwo.setNst(nst);
			gravidagramGestationalDiabitiesTwo
					.setNuchalTraslucency(nuchalTraslucency);
			gravidagramGestationalDiabitiesTwo.setPog(datePog);
			gravidagramGestationalDiabitiesTwo.setPondrelIndex(pondrelIndex);
			gravidagramGestationalDiabitiesTwo.setRemarks(remarks);
			gravidagramGestationalDiabitiesTwo.setRetalEcho(retalEcho);

			String referredDept = "";
			String[] referredToDeptArray = null;
			if (request.getParameterValues(DEPARTMENT_ID) != null) {
				referredToDeptArray = (String[]) request
						.getParameterValues(DEPARTMENT_ID);
				for (int i = 0; i < referredToDeptArray.length; i++) {
					if (i == 0) {
						referredDept = referredToDeptArray[i];
					} else {
						referredDept = referredDept + ","
								+ referredToDeptArray[i];
					}
				}
			}
			infoMap.put("gravidagramGestationalDiabitiesTwo",
					gravidagramGestationalDiabitiesTwo);
			infoMap.put("visitId", visitId);
			infoMap.put("hospitalId", hospitalId);
			infoMap.put("referredDept", referredDept);
			infoMap.put("referredDepartment", masDepartment);
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		boolean successfullyAdded = false;
		successfullyAdded = opdHandlerService
				.addGravidagramGestationalDiabitiesTwo(infoMap);

		if (successfullyAdded) {
			message = "gravidagram Gestational Diabities Two  has been done Successfully..";
		} else {
			message = "gravidagram Gestational Diabities Two has not been done Successfully..";
		}

		/*
		 * try{ map = opdHandlerService.getAntenatalCard(visitId);
		 *
		 * }catch (Exception e) { e.printStackTrace(); }
		 */
		jsp = "messageGravidagramHTN";
		title = "Add Ggravidagram Gestational Diabities Two";
		map.put("visitId", visitId);
		map.put("message", message);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView viewGravidagramGestationalDiabitiesTwo(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGravidagramGestationalDiabitiesTwoJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			// int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			/*
			 * if(request.getParameter("visitNoForJsp") != null){ visitNoForJsp
			 * = Integer.parseInt(request.getParameter("visitNoForJsp")); }
			 */
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId;
		}
		map = opdHandlerService
				.viewGravidagramGestationalDiabitiesTwo(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "vioewGravidagramGestationalDiabitiesTwo";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	// ------------------------------------------------For
	// Reports----------------------------------------

	@SuppressWarnings("unchecked")
	public ModelAndView getOpdReportList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// String serviceNo = "";
		String hinNo = "";
		try {
			/*
			 * if(request.getParameter(SERVICE_NO) != null &&
			 * !(request.getParameter(SERVICE_NO).equals(""))){ serviceNo =
			 * request.getParameter(SERVICE_NO); detailsMap.put("serviceNo",
			 * serviceNo); }
			 */
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				detailsMap.put("hinNo", hinNo);
			}
			List<Object> visitNoList = new ArrayList<Object>();
			List<Object> hinNoList = new ArrayList<Object>();
			String flag = "";

			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
			if (flag.equals("visit")) {
				visitNoList = opdHandlerService.getVisitNoList(detailsMap);
				map.put("visitNoList", visitNoList);
				jsp = RESPONSE_FOR_OPD_VISIT_NO;

			}/*
			 * else if(flag.equals("hin")){ hinNoList =
			 * opdHandlerService.getHinNoList(serviceNo); map.put("hinNoList",
			 * hinNoList);
			 *
			 * jsp = RESPONSE_FOR_OPD_HIN_NO; }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);

	}

	@SuppressWarnings("unchecked")
	public ModelAndView getVisitList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// String serviceNo = "";
		String hinNo = "";
		try {
			/*
			 * if(request.getParameter(SERVICE_NO) != null &&
			 * !(request.getParameter(SERVICE_NO).equals(""))){ serviceNo =
			 * request.getParameter(SERVICE_NO); detailsMap.put("serviceNo",
			 * serviceNo); }
			 */
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				detailsMap.put("hinNo", hinNo);
			}
			List<Object> visitNoList = new ArrayList<Object>();
			List<Object> hinNoList = new ArrayList<Object>();
			String flag = "";

			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
			if (flag.equals("visit")) {
				visitNoList = opdHandlerService.getVisitNoList(detailsMap);
				map.put("visitNoList", visitNoList);
				jsp = "responseForVisitNo";

			}/*
			 * else if(flag.equals("hin")){ hinNoList =
			 * opdHandlerService.getHinNoList(serviceNo); map.put("hinNoList",
			 * hinNoList);
			 *
			 * jsp = RESPONSE_FOR_OPD_HIN_NO; }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);

	}

	private JasperReport getCompiledReport(String fileName) throws JRException {

		File reportFile = new File(getServletContext().getRealPath(
				"/Reports/" + fileName + ".jasper"));
		JasperReport jasperReport = (JasperReport) JRLoader
				.loadObject(reportFile);

		return jasperReport;
	}

	// ----------------------------------------Patient Prescription Report
	// ------------------

	public ModelAndView showPatientPrescriptionReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_PRESCRIPTION_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientPrescriptionReport(
			HttpServletRequest request, HttpServletResponse response) {
		//Map<String, Object> map = new HashMap<String, Object>();//Un used commented by OM Tripathi
		int visitNo = 0;
		int deptId = 0;
		Integer hospitalId=0;
		session=request.getSession();
		// String serviceNo = "";
		String hinNo = "";
		String patient_name="";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		
	//	Users user = (Users) session.getAttribute("users");
		String patientDetailsStatus=null;
		if(request.getParameter("patientDetailsStatus")!= null){
			patientDetailsStatus = request.getParameter("patientDetailsStatus");
		}
		
		int userId = (Integer)session.getAttribute("empId");
		if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			}
		
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		
		if (request.getParameter("visitNo") != null) {
			visitNo = Integer.parseInt(request.getParameter("visitNo"));
		}
		
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		}
				
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		if (request.getParameter(HIN_NO) == null) {
			if (request.getParameter("hinNo") != null
					&& !(request.getParameter("hinNo").equals(""))) {
				hinNo = request.getParameter("hinNo");
			}
		}
		/*if (request.getParameter(VISIT_NUMBER) == null) {
			if (request.getParameter("visitNo") != null
					&& !(request.getParameter("visitNo").equals(""))) {
				visiNo = Integer.parseInt(request.getParameter("visitNo"));
			}
		}*/
		int visitId =0;
		if(request.getParameter("visitId")!=null && !(request.getParameter("visitId").equals(""))){
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}else if(request.getParameter(VISIT_ID)!=null && !(request.getParameter("VISIT_ID").equals(""))){
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter("patient_name") != null && !(request.getParameter("patient_name").equals(""))) {
			patient_name = request.getParameter("patient_name");
		}
		

		if(request.getParameter("secondOpinionVisitId")!= null && !request.getParameter("secondOpinionVisitId").equals("")){
			visitId = Integer.parseInt(request.getParameter("secondOpinionVisitId"));

		}
		if (request.getParameter("hin_no") != null && !request.getParameter("hin_no").equals("")) {
			hinNo = request.getParameter("hin_no");
			
		}
	
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("hin_no", hinNo);
		parameters.put("visitNo", visitNo);
		parameters.put("patient_name", patient_name);
		parameters.put("hospitalId", hospitalId);
		parameters.put("userId", userId);
		parameters.put("deptId", deptId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
				parameters.put("timeImage", getServletContext().getRealPath("/jsp/images/Times.jpg"));
				
		parameters.put("IMAGE_DIR_LEFT", getServletContext().getRealPath("/jsp/images/malyalam_report_text.jpg"));
		try {
			/*
			 * byte[] bytes = null; try { bytes =
			 * JasperRunManager.runReportToPdf
			 * (getCompiledReport("PatientPrescriptionFormatEha"
			 * ),parameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 *
			 * e.printStackTrace(); }
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */
			

			String reportName="";
			//String displayName=null;
			if(patientDetailsStatus==null || patientDetailsStatus.equalsIgnoreCase("y")){
				reportName="medicalCaseSheetnewforstorageNew";
				HMSUtil.generateReportWithDisplayName(reportName, "Prescription",parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());
			}else{
				reportName="medicalCaseSheetnewforstorageNew2";
				HMSUtil.generateReport(reportName, parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());
			}
			
			
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// ----------------------------------------Patient Investigation Report
	// ------------------

	public ModelAndView showPatientInvestigationReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_INVESTIGATION_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPatientInvestigationReport(
			HttpServletRequest request, HttpServletResponse response) {
		//Map<String, Object> map = new HashMap<String, Object>();//Un used commented by OM Tripathi
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		String patientDetailsStatus=null;
		if(request.getParameter("patientDetailsStatus")!= null){
			patientDetailsStatus = request.getParameter("patientDetailsStatus");
		}
		
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		if (request.getParameter(HIN_NO) == null) {
			if (request.getParameter("hinNo") != null
					&& !(request.getParameter("hinNo").equals(""))) {
				hinNo = request.getParameter("hinNo");
			}
		}
		if (request.getParameter(VISIT_NUMBER) == null) {
			if (request.getParameter("visitNo") != null
					&& !(request.getParameter("visitNo").equals(""))) {
				visiNo = Integer.parseInt(request.getParameter("visitNo"));
			}
		}
		if (request.getParameter("visitNo") != null
				&& !(request.getParameter("visitNo").equals(""))) {
			visiNo = Integer.parseInt(request.getParameter("visitNo"));
		}
		/*if(request.getParameter("secondOpinionVisitId")!= null && !request.getParameter("secondOpinionVisitId").equals("")){
			visitId = Integer.parseInt(request.getParameter("secondOpinionVisitId"));
		}
		int visit_Id = 0;*/
		
		if (request.getParameter("hin_no") != null && !request.getParameter("hin_no").equals("")) {
			hinNo = request.getParameter("hin_no");
		}
		
		//Users user = (Users) session.getAttribute("empId");
		session=request.getSession();
		int userId=0;
		int deptId=0;
		int visitId=0;
		if(session.getAttribute("empId")!=null)
		 userId =  (Integer) session.getAttribute("empId");
		
		if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			}
		
		if(request.getParameter("secondOpinionVisitId")!=null){
			visitId = Integer.parseInt(request.getParameter("secondOpinionVisitId"));
		}
		
		if(request.getParameter("visitId")!=null){
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		
		
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("userId", userId);
		parameters.put("deptId", deptId);
		parameters.put("visitId", visitId);
		parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/Reports/"));
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		
		
		try {
			/*
			 * byte[] bytes = null; try { bytes =
			 * JasperRunManager.runReportToPdf
			 * (getCompiledReport("PatientInvestigationFormatEha"
			 * ),parameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 *
			 * e.printStackTrace(); }
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */
			String reportName="";
			if(patientDetailsStatus==null || patientDetailsStatus.equalsIgnoreCase("y")){
				reportName="PatientInvestigationFormatEha";
			}else{
				reportName="PatientInvestigationFormatEha2";
			}
			HMSUtil.generateReport(reportName, parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// ----------------------------------------Patient History Report
	// ------------------

	public ModelAndView showPatientHistoryReportJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_HISTORY_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPatientHistoryReport(HttpServletRequest request,
			HttpServletResponse response) {
		//Map<String, Object> map = new HashMap<String, Object>();//Un used commented by OM Tripathi
		int visiNo = 0;
		int hospitalId=0;
		session=request.getSession();
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("hospitalId", hospitalId);
		
		try {
			/*
			 * byte[] bytes = null; try { bytes =
			 * JasperRunManager.runReportToPdf
			 * (getCompiledReport("PatientHistoryFormatEha"
			 * ),parameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 *
			 * e.printStackTrace(); }
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */
			HMSUtil.generateReport("PatientHistoryFormatEha", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// ------------------------------------------ Dail Department Wise
	// --------------------------------------
	public ModelAndView showDailyDepartmentWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		//added by arbind 27-02-2017
		session=request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		map.put("hospitalId", hospitalId);
		map = opdHandlerService.showDailyDepartmentWiseReportJsp(map);
		title = "Daily Department Wise Report";
		jsp = DAILY_DEPARTMENT_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDailyDepartmentWiseReport(
			HttpServletRequest request, HttpServletResponse response) {
		session =request.getSession();
		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		int selectedRadio = 0;
		String doctor_name = "";
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		Integer hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		parameters.put("hospitalId", hospitalId);
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(CONSULTING_DOCTOR)) != null
					&& !(request.getParameter(CONSULTING_DOCTOR).equals(""))) {
				doctorId = Integer.parseInt(request
						.getParameter(CONSULTING_DOCTOR));
			}

			if (doctorId != 0) {
				doctor_name = "and visit.doctor_id = " + doctorId;
				parameters.put("doctor_name", doctor_name);
			}
			if (request.getParameter(SELECTED_RADIO) != null
					&& !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request
						.getParameter(SELECTED_RADIO));
			}
			if (selectedRadio == 1) {

				try {
					/*
					 * byte[] bytes = null; try { bytes =
					 * JasperRunManager.runReportToPdf
					 * (getCompiledReport(DAILY_DEPARTMENT_WISE_SUMMARY
					 * ),parameters,(Connection)detailsMap.get("conn")); } catch
					 * (JRException e) {
					 *
					 * e.printStackTrace(); }
					 * response.setContentType("application/pdf");
					 * response.setContentLength(bytes.length);
					 * ServletOutputStream ouputStream; try { ouputStream =
					 * response.getOutputStream(); ouputStream.write(bytes, 0,
					 * bytes.length); ouputStream.flush(); ouputStream.close();
					 * } catch (IOException e) { e.printStackTrace(); }
					 */
					HMSUtil.generateReport(DAILY_DEPARTMENT_WISE_SUMMARY,
							parameters, (Connection) detailsMap.get("conn"),
							response, getServletContext());
				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			} else if (selectedRadio == 2) {
				try {
					/*
					 * byte[] bytes = null; try { bytes =
					 * JasperRunManager.runReportToPdf
					 * (getCompiledReport(DAILY_DEPARTMENT_WISE_DETAIL
					 * ),parameters,(Connection)detailsMap.get("conn")); } catch
					 * (JRException e) {
					 *
					 * e.printStackTrace(); }
					 * response.setContentType("application/pdf");
					 * response.setContentLength(bytes.length);
					 * ServletOutputStream ouputStream; try { ouputStream =
					 * response.getOutputStream(); ouputStream.write(bytes, 0,
					 * bytes.length); ouputStream.flush(); ouputStream.close();
					 * } catch (IOException e) { e.printStackTrace(); }
					 */
					HMSUtil.generateReport(DAILY_DEPARTMENT_WISE_DETAIL,
							parameters, (Connection) detailsMap.get("conn"),
							response, getServletContext());
				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// -------------------------------------- Daily Doctor Wise Report
	// --------------------------------
	public ModelAndView showDailyDoctorWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0,departmentId=0;
		//added by govind 30-11-2016
		session=request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}

		if (session.getAttribute(DEPT_ID) != null) {
			departmentId = (Integer) session.getAttribute(DEPT_ID);
		}
		
		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map=opdHandlerService.getDoctorDepartment(map);	
		List<EmpScMapping>list= new ArrayList<EmpScMapping>();
		if(map.get("doctorList") != null){
			list = (List)map.get("doctorList");
		}
		//added by govind 30-11-2016 end
		map = opdHandlerService.showDailyDepartmentWiseReportJsp(map);
		title = "Daily Doctor Wise Report";
		jsp = DAILY_DOCTOR_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		
		if(list.size()>0){
			map.put("doctorList", list);
		}
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDailyDoctorWiseReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = null;
		parameters=new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		int selectedRadio = 0;
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		HttpSession session=request.getSession();
		
		Integer hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		parameters.put("hospitalId", hospitalId);

		String query="";
		
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(CONSULTING_DOCTOR)) != null
					&& !(request.getParameter(CONSULTING_DOCTOR).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(CONSULTING_DOCTOR));
				//parameters.put("EMPLOYEE_ID", doctorId);
				if(doctorId>0){
				query="and mas_employee.employee_id="+doctorId;//changed by govind 30-11-2016
				parameters.put("query", query);
			   }
			}
			if (request.getParameter(SELECTED_RADIO) != null
					&& !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request
						.getParameter(SELECTED_RADIO));
			}
			
			String hospitalName="";
			hospitalName = opdHandlerService.getHospitalName(hospitalId);
			parameters.put("hospitalName", hospitalName);
			
			if (selectedRadio == 1) {

				try {
					/*
					 * byte[] bytes = null; try { bytes =
					 * JasperRunManager.runReportToPdf
					 * (getCompiledReport(DAILY_DOCTOR_WISE_SUMMARY
					 * ),parameters,(Connection)detailsMap.get("conn")); } catch
					 * (JRException e) {
					 *
					 * e.printStackTrace(); }
					 * response.setContentType("application/pdf");
					 * response.setContentLength(bytes.length);
					 * ServletOutputStream ouputStream; try { ouputStream =
					 * response.getOutputStream(); ouputStream.write(bytes, 0,
					 * bytes.length); ouputStream.flush(); ouputStream.close();
					 * } catch (IOException e) { e.printStackTrace(); }
					 */
					HMSUtil.generateReport(DAILY_DOCTOR_WISE_SUMMARY,
							parameters, (Connection) detailsMap.get("conn"),
							response, getServletContext());
				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			} else if (selectedRadio == 2) {
				try {
					/*
					 * byte[] bytes = null; try { bytes =
					 * JasperRunManager.runReportToPdf
					 * (getCompiledReport(DAILY_DOCTOR_WISE_DETAIL
					 * ),parameters,(Connection)detailsMap.get("conn")); } catch
					 * (JRException e) {
					 *
					 * e.printStackTrace(); }
					 * response.setContentType("application/pdf");
					 * response.setContentLength(bytes.length);
					 * ServletOutputStream ouputStream; try { ouputStream =
					 * response.getOutputStream(); ouputStream.write(bytes, 0,
					 * bytes.length); ouputStream.flush(); ouputStream.close();
					 * } catch (IOException e) { e.printStackTrace(); }
					 */

					HMSUtil.generateReport(DAILY_DOCTOR_WISE_DETAIL,
							parameters, (Connection) detailsMap.get("conn"),
							response, getServletContext());
				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// -------------------------------- Daily OPD
	// Prescriptions---------------------------
	public ModelAndView showDailyOPDPrescriptionsReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		int deptId=0;
		//added by arbind 27-02-2017
		session=request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
	 deptId = (Integer) session.getAttribute(DEPT_ID);


	 map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map = opdHandlerService.showDailyOPDPrescriptionsReportJsp(map);
		title = "Daily OPD Prescriptions";
		jsp = DAILY_OPD_PRESCRIPTIONS_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDailyOPDPrescriptionsReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		session=request.getSession();
		Integer hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		
		parameters.put("hospitalId",hospitalId);
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(FROM_DATE));

				parameters.put("FROM_DATE", fromDate);

			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate =  HMSUtil.dateFormatterDDMMYYYY(request
						.getParameter(TO_DATE));

				parameters.put("TO_DATE", toDate);

			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));

				parameters.put("DEPARTMENT_ID", departmentId);
			}

			if ((request.getParameter(EMPLOYEE_ID)) != null
					&& !(request.getParameter(EMPLOYEE_ID).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));

				parameters.put("EMPLOYEE_ID", doctorId);

			}
			
			
			
			try {
				/*
				 * byte[] bytes = null; try { bytes =
				 * JasperRunManager.runReportToPdf
				 * (getCompiledReport(DAILY_OPD_PRESCRIPTIONS_REPORT
				 * ),parameters,(Connection)detailsMap.get("conn")); } catch
				 * (JRException e) {
				 *
				 * e.printStackTrace(); }
				 * response.setContentType("application/pdf");
				 * response.setContentLength(bytes.length); ServletOutputStream
				 * ouputStream; try { ouputStream = response.getOutputStream();
				 * ouputStream.write(bytes, 0, bytes.length);
				 * ouputStream.flush(); ouputStream.close(); } catch
				 * (IOException e) { e.printStackTrace(); }
				 */
				HMSUtil.generateReport("dailyOpdPrescriptionsReport",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());
			} catch (IllegalStateException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	// -------------------------------- Daily OPD
	// Investigations---------------------------
	public ModelAndView showDailyOPDInvestigationsReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyOPDInvestigationsReportJsp();
		title = "Daily OPD Investigations";
		jsp = DAILY_OPD_INVESTIGATIONS_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDailyOPDInvestigationsReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int doctorId = 0;
		session=request.getSession();
		Integer hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		parameters.put("hospitalId", hospitalId);
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
			parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(EMPLOYEE_ID)) != null
					&& !(request.getParameter(EMPLOYEE_ID).equals(""))) {
				doctorId = Integer.parseInt(request.getParameter(EMPLOYEE_ID));
			parameters.put("EMPLOYEE_ID", doctorId);
			}
			try {
				/*
				 * byte[] bytes = null; try { bytes =
				 * JasperRunManager.runReportToPdf
				 * (getCompiledReport(DAILY_OPD_INVESTIGATIONS_REPORT
				 * ),parameters,(Connection)detailsMap.get("conn")); } catch
				 * (JRException e) {
				 *
				 * e.printStackTrace(); }
				 * response.setContentType("application/pdf");
				 * response.setContentLength(bytes.length); ServletOutputStream
				 * ouputStream; try { ouputStream = response.getOutputStream();
				 * ouputStream.write(bytes, 0, bytes.length);
				 * ouputStream.flush(); ouputStream.close(); } catch
				 * (IOException e) { e.printStackTrace(); }
				 */
				HMSUtil.generateReport("dailyOpdInvestigationsReport",
						parameters, (Connection) detailsMap.get("conn"),
						response, getServletContext());
			} catch (IllegalStateException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// ----------------------------------------Medical Case Sheet Report Report
	// ------------------

	public ModelAndView showPatientMedicalCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = PATIENT_MEDICAL_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPatientMedicalCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		String hinNo = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		/*if (request.getParameter(HIN_NO) == null) {
			if (request.getParameter("hinNo") != null
					&& !(request.getParameter("hinNo").equals(""))) {
				hinNo = request.getParameter("hinNo");
			}
		}*/

		if (request.getParameter(VISIT_NUMBER) == null) {
			if (request.getParameter("visitNo") != null
					&& !(request.getParameter("visitNo").equals(""))) {
				visiNo = Integer.parseInt(request.getParameter("visitNo"));
			}
		}

		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		try {
			/*
			 * byte[] bytes = null; try { bytes =
			 * JasperRunManager.runReportToPdf
			 * (getCompiledReport("PatientMedicalCaseSheetReportEha"
			 * ),parameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 *
			 * e.printStackTrace(); }
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */
			HMSUtil.generateReport("PatientMedicalCaseSheetReportEha",
					parameters, (Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	// -------------------------------- Daily OPD Rank
	// Category---------------------------
	public ModelAndView showDailyOPDRankCategoryReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		map = opdHandlerService.showDailyOPDRankCategoryReportJsp();
		title = "Daily Doctor Wise Report";
		jsp = DAILY_PATIENT_RANK_CATEGORY_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateDailyOPDRankCategoryReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		int departmentId = 0;
		int rankId = 0;
		int selectedRadio = 0;
		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();
		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(DEPARTMENT_ID)) != null
					&& !(request.getParameter(DEPARTMENT_ID).equals(""))) {
				departmentId = Integer.parseInt(request
						.getParameter(DEPARTMENT_ID));
				parameters.put("DEPARTMENT_ID", departmentId);
			}
			if ((request.getParameter(RANK_ID)) != null
					&& !(request.getParameter(RANK_ID).equals(""))) {
				rankId = Integer.parseInt(request.getParameter(RANK_ID));
				parameters.put("RANK_ID", rankId);
			}
			if (request.getParameter(SELECTED_RADIO) != null
					&& !(request.getParameter(SELECTED_RADIO).equals(""))) {
				selectedRadio = Integer.parseInt(request
						.getParameter(SELECTED_RADIO));
			}
			if (selectedRadio == 1) {

				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_PATIENT_RANK_CATEGORY_REPORT_SUMMARY),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			} else if (selectedRadio == 2) {
				try {
					byte[] bytes = null;
					try {
						bytes = JasperRunManager
								.runReportToPdf(
										getCompiledReport(DAILY_PATIENT_RANK_CATEGORY_REPORT_DETAIL),
										parameters,
										(Connection) detailsMap.get("conn"));

					} catch (JRException e) {

						e.printStackTrace();
					}
					response.setContentType("application/pdf");
					response.setContentLength(bytes.length);
					ServletOutputStream ouputStream;
					try {
						ouputStream = response.getOutputStream();
						ouputStream.write(bytes, 0, bytes.length);
						ouputStream.flush();
						ouputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printOpdGastroEndoscopy(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);

		try {

			HMSUtil.generateReport("endoscopyEha",
					parameters, (Connection) detailsMap.get("conn"), response,
					getServletContext());

		}catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView printOpdGastroColonoscopy(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("colonoscopyEha"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdVaccinationPlan(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		int hinId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("opdhid", hinId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdVaccinationPlanEha"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	// -------------------------------------- OPD Oncosurgery case sheet
	// --------------------------------------
	public ModelAndView showOncosurgeryCaseSheetJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showOncosurgeryCaseSheetJsp(visitId);
		jsp = ONCOSURGERY_CASE_SHEET_JSP;
		jsp += ".jsp";
		title = "Oncosurgery Case Sheet List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addOncosurgeryCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);
		box.put("referredDept", referredDept);
		map = opdHandlerService.addOncosurgeryCaseSheet(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Oncosurgery Case Sheet has been done Successfully.Do you want to print ?";
			jsp = "messageOpdOncosurgeryCaseSheet";
		} else {
			message = "Oncosurgery Case Sheet has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showOncosurgeryCaseSheetJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Oncosurgery Case Sheet List";
		jsp += ".jsp";

		map.put("message", message);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewOncosurgeryCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOncosurgeryCaseSheetJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOncosurgeryCaseSheet(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOncoSurgeryCaseSheet";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdOncosurgeryCaseSheet(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("oncosurgeryCaseSheetEha"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	// -------------------------------------- OPD Urology Case Sheet
	// --------------------------------------
	public ModelAndView showUrologyCaseSheetJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showUrologyCaseSheetJsp(visitId);
		jsp = UROLOGY_CASE_SHEET_JSP;
		jsp += ".jsp";
		title = "Urology Case Sheet List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("visitId", visitId);
		map.put("message", message);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);
		map = opdHandlerService.addUrologyCaseSheet(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Urology Case Shee has been done Successfully.Do you want to print ?";
			jsp = "messageOpdUrology";
		} else {
			message = "Urology Case Shee has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showUrologyCaseSheetJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Urology Case Sheet List";
		jsp += ".jsp";

		map.put("message", message);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showUrologyCaseSheetJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewUrologyCaseSheet(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewUrologyCaseSheet";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdUrologyCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("urologyCaseSheetEha"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	// -------------------------------------- OPD Oncosurgery
	// --------------------------------------
	public ModelAndView showOncosurgeryJsp(HttpServletRequest request,
			HttpServletResponse response) {
		int visitId = Integer.parseInt(request.getParameter("visitId"));

		map = opdHandlerService.showOncosurgeryJsp(visitId);
		jsp = ONCOSURGERY_JSP;
		jsp += ".jsp";
		title = "Oncosurgery Case Sheet List";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView addOncosurgery(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		HttpSession session = request.getSession();
		Box box = HMSUtil.getBox(request);
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		String message = "";
		box.put("visitId", visitId);
		String referredDept = "";
		String[] referredToDeptArray = null;
		if (request.getParameterValues(DEPARTMENT_ID) != null) {
			referredToDeptArray = (String[]) request
					.getParameterValues(DEPARTMENT_ID);
			for (int i = 0; i < referredToDeptArray.length; i++) {
				if (i == 0) {
					referredDept = referredToDeptArray[i];
				} else {
					referredDept = referredDept + "," + referredToDeptArray[i];
				}
			}
		}
		box.put("referredDept", referredDept);

		map = opdHandlerService.addOncosurgery(box);
		saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Oncosurgery  has been done Successfully.Do you want to print ?";
			jsp = "messageOpdOncosurgery";
		} else {
			message = "Oncosurgery  has not been done Successfully..";
			jsp = "messageSomeTry";
		}

		try {
			map = opdHandlerService.showOncosurgeryJsp(visitId);

		} catch (Exception e) {
			e.printStackTrace();
		}

		title = "Add Oncosurgery List";
		jsp += ".jsp";

		map.put("message", message);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("visitId", visitId);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewOncosurgery(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}
		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showOncosurgeryJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewOncosurgery(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = "viewOncoSurgery";
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdOncosurgery(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);

		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("oncosurgeryEha"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	// ------------------------------------------ Dail Department Wise
	// --------------------------------------
	public ModelAndView showOpdOncosurgeryWiseReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		// map = opdHandlerService.showOpdOncosurgeryWiseReportJsp();
		title = "Opd Oncosurgery Wise Report";
		jsp = OPD_ONCOSURGRY_WISE_REPORT_JSP;
		jsp = jsp + ".jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}

	public ModelAndView generateOpdOncosurgeryWiseReport(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> parameters = new HashMap<String, Object>();
		Date fromDate = null;
		Date toDate = null;
		String stageT = "";
		String stageM = "";
		String stageN = "";
		String stageNor = "";

		Map<String, Object> detailsMap = opdHandlerService
				.getConnectionForReport();

		try {
			if (request.getParameter(FROM_DATE) != null
					&& !(request.getParameter(FROM_DATE).equals(""))) {
				fromDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(FROM_DATE));
				parameters.put("FROM_DATE", fromDate);
			}
			if (request.getParameter(TO_DATE) != null
					&& !(request.getParameter(TO_DATE).equals(""))) {
				toDate = HMSUtil.convertStringTypeDateToDateType(request
						.getParameter(TO_DATE));
				parameters.put("TO_DATE", toDate);
			}
			if ((request.getParameter(STAGE_T)) != null
					&& !(request.getParameter(STAGE_T).equals(""))) {
				stageT = request.getParameter(STAGE_T);
				parameters.put("STAGE_T", stageT);
			}
			if ((request.getParameter(STAGE_N)) != null
					&& !(request.getParameter(STAGE_N).equals(""))) {
				stageN = request.getParameter(STAGE_N);
				parameters.put("STAGE_N", stageN);
			}
			if ((request.getParameter(STAGE_M)) != null
					&& !(request.getParameter(STAGE_M).equals(""))) {
				stageM = request.getParameter(STAGE_M);
				parameters.put("STAGE_M", stageM);
			}
			if ((request.getParameter(STAGE_NOR)) != null
					&& !(request.getParameter(STAGE_NOR).equals(""))) {
				stageNor = request.getParameter(STAGE_NOR);
				parameters.put("STAGE_NOR", stageNor);
			}

			try {
				byte[] bytes = null;
				try {
					bytes = JasperRunManager.runReportToPdf(
							getCompiledReport("oncosurgeryWiseEha"),
							parameters, (Connection) detailsMap.get("conn"));

				} catch (JRException e) {

					e.printStackTrace();
				}
				response.setContentType("application/pdf");
				response.setContentLength(bytes.length);
				ServletOutputStream ouputStream;
				try {
					ouputStream = response.getOutputStream();
					ouputStream.write(bytes, 0, bytes.length);
					ouputStream.flush();
					ouputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

			} catch (IllegalStateException e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showSearchPatientPreviousVisit(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = SEARCH_PATIENT_PREVIOUS_VISI + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView printOpdEnt(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("entCaseSheetMainEha"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdOphthalmology(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyMainEha"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdOphthalmologyRetinalProforma(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager
						.runReportToPdf(
								getCompiledReport("opdOphthalmologyRetinalProformaEha"),
								parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdOphthalmologyFollowUpForm(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyFollowUpFormEha"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdOphthalmologyDiagnosis(
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdOphthalmologyDiagnosisEha"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdPediatricCaseSheet(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdPediatricCaseSheetEha"),
						parameters, (Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView printOpdObg(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("opdvid", visitId);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		try {
			byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("opdObgMainEha"), parameters,
						(Connection) detailsMap.get("conn"));

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return new ModelAndView("index", "map", map);

	}

	// --------------------------------------- Report Case Sheet
	// ------------------

	public ModelAndView showOpdObgCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OBG_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdObgCaseSheetReport(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		try {
			/*
			 * byte[] bytes = null; try { bytes =
			 * JasperRunManager.runReportToPdf
			 * (getCompiledReport("opdObgMainCaseSheetEha"
			 * ),parameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 *
			 * e.printStackTrace(); }
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */
			HMSUtil.generateReport("opdObgMainCaseSheetEha", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdOncosurgeryCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_ONCOSURGERY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOncosurgeryCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {
			/*
			 * byte[] bytes = null; try { bytes =
			 * JasperRunManager.runReportToPdf
			 * (getCompiledReport("opdOncosurgeryCaseSheetReportEha"
			 * ),parameters,(Connection)detailsMap.get("conn")); } catch
			 * (JRException e) {
			 *
			 * e.printStackTrace(); }
			 * response.setContentType("application/pdf");
			 * response.setContentLength(bytes.length); ServletOutputStream
			 * ouputStream; try { ouputStream = response.getOutputStream();
			 * ouputStream.write(bytes, 0, bytes.length); ouputStream.flush();
			 * ouputStream.close(); } catch (IOException e) {
			 * e.printStackTrace(); }
			 */

			HMSUtil.generateReport("opdOncosurgeryCaseSheetReportEha",
					parameters, (Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOncosurgeryCaseSheetOpdReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = ONCOSURGERY_CASE_SHEET_OPD_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOncosurgeryCaseSheetOpdReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {

			HMSUtil.generateReport("oncosurgeryCaseSheetOpdReport",
					parameters, (Connection) detailsMap.get("conn"), response,
					getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdOphthalmologyMainCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return null;
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyMainCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visitNo = 0;
		// String serviceNo = "";
		int hinNo = 0;
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = Integer.parseInt(request.getParameter(HIN_NO));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("Visit_No", visitNo);
		// parameters.put("serviceNo", serviceNo);

		parameters.put("CORNEA-RE", getServletContext().getRealPath("/jsp/images/Cornea-RE.JPG"));
		parameters.put("CORNEA-LE", getServletContext().getRealPath("/jsp/images/Cornea-le.JPG"));

		parameters.put("Gonioscopy-RE", getServletContext().getRealPath("/jsp/images/Gonioscopy-Re.JPG"));
		parameters.put("Gonioscopy-LE", getServletContext().getRealPath("/jsp/images/Gonioscopy-le.JPG"));

		parameters.put("LENSE-RE", getServletContext().getRealPath("/jsp/images/Lens-Re.JPG"));
		parameters.put("LENSE-LE", getServletContext().getRealPath("/jsp/images/Lens-le.JPG"));

		parameters.put("FUNDUS-RE", getServletContext().getRealPath("/jsp/images/Fundus-Re.JPG"));
		parameters.put("FUNDUS-LE", getServletContext().getRealPath("/jsp/images/Fundus-le.JPG"));

		parameters.put("Hin_No", hinNo);
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		try {
			HMSUtil.generateReport("opdOphthalmologyMainEha",
					parameters, (Connection) detailsMap.get("conn"), response,
					getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdOphthalmologyRetinalProformaCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_RETINAL_PROFORMA_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyRetinalProformaCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		int hinNo = 0;
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = Integer.parseInt(request.getParameter(HIN_NO));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("Visit_No", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("Hin_No", hinNo);

		parameters.put("REINAL-RE", getServletContext().getRealPath("/jsp/images/Reinal-Re.JPG"));
		parameters.put("REINAL-LE", getServletContext().getRealPath("/jsp/images/Reinal-Le.JPG"));


		try {


			HMSUtil.generateReport("opdOphthalmologyRetinalProformaReport",
					parameters, (Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdOphthalmologyFollowUpFormCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_FOLLOW_UP_FORM_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyFollowUpFormCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		int hinNo = 0;
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = Integer.parseInt(request.getParameter(HIN_NO));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("Visit_No", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("Hin_No", hinNo);
		try {

			HMSUtil.generateReport("opdOphthalmologyFollowUpFormEha",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdOphthalmologyDiagnosisCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_OPHTHALMOLOGY_DIAGNOSIS_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdOphthalmologyDiagnosisCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		int hinNo = 0;
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = Integer.parseInt(request.getParameter(HIN_NO));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {


			HMSUtil.generateReport("opdOphthalmologyDiagnosisReport",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

					} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdPediatricCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_PEDIATRIC_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdPediatricCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		String serviceNo="";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		if (request.getParameter(SERVICE_NO) != null) {
			serviceNo = request.getParameter(SERVICE_NO);
		}

		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {


			HMSUtil.generateReport("opdPediatricCaseSheetReport",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdGastroEnterologyColonoscopyCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_GASTRO_ENTEROLOGY_COLONOSCOPY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdGastroEnterologyColonoscopyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {


			HMSUtil.generateReport("opdGastroEnterologyColonoscopyCaseSheetReportEha",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		}catch (IllegalStateException ex) {
			ex.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdGastroEnterologyEndoscopyCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_GASTRO_ENTEROLOGY_ENDOSCOPY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdGastroEnterologyEndoscopyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {

			HMSUtil.generateReport("opdGastroEnterologyEndoscopyCaseSheet",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showPediatricVaccinationPlanCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_PEDIATRIC_VACCINATION_PLAN_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showPediatricVaccinationPlanCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {


			HMSUtil.generateReport("pediatricVaccinationPlanCaseSheet",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdEntMainCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_ENT_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdEntMainCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		parameters.put("SUBREPORT_DIR",		getServletContext().getRealPath("/Reports/"));
		parameters.put("EAR-RE", getServletContext().getRealPath("/jsp/images/EAR-re.JPG"));
		parameters.put("EAR-LE", getServletContext().getRealPath("/jsp/images/EAR-le.JPG"));
		parameters.put("NOSE", getServletContext().getRealPath("/jsp/images/Nose.JPG"));
		parameters.put("THROAT", getServletContext().getRealPath("/jsp/images/Throat.JPG"));
		try {


			HMSUtil.generateReport("opdEntCaseSheetMainReport",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView showOpdCardiologyCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_CARDIOLOGY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdCardiologyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {


			HMSUtil.generateReport("opdCardiologyCaseSheetReport",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ModelAndView printOpdCardiology(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visitId);
		try {

			HMSUtil.generateReport("opdCardiologyEha",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;

	}

	public ModelAndView showOpdUrologyCaseSheetCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = OPD_UROLOGY_CASE_SHEET_REPORT_JSP + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView showOpdUrologyCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(request.getParameter(SERVICE_NO) != null){ serviceNo =
		 * request.getParameter(SERVICE_NO); }
		 */
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitNo", visiNo);
		// parameters.put("serviceNo", serviceNo);
		parameters.put("hinNo", hinNo);
		try {


			HMSUtil.generateReport("opdUrologyCaseSheetReport",
					parameters, (Connection) detailsMap.get("conn"),
					response, getServletContext());

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}

	/** start of methods by Abha * */

	public ModelAndView viewGynaecology(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_GYNAECOLOGY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewComplaints(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_COMPLAINT_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewGeneralExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_GENERAL_EXAMINATION_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewMedicalSurgicalHistory(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_MEDICAL_SURGICAL_HISTORY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewSystemicExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_SYSTEMIC_EXAMINATION_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView viewObstetricMenstrualHistory(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> parameterMap = new HashMap<String, Object>();

		int visitNo = 0;
		int hinId = 0;
		String flag = "";
		int currentVisitId = 0;
		String viewScreen = "";
		String backButtonUrl = "";
		if (request.getParameter(VISIT_NUMBER) != null) {
			visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
			parameterMap.put("visitNo", visitNo);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			parameterMap.put("hinId", hinId);
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
			parameterMap.put("flag", flag);
		}

		if (request.getParameter("currentVisitId") != null) {
			currentVisitId = Integer.parseInt(request
					.getParameter("currentVisitId"));
		}
		if (request.getParameter("viewScreen") != null) {
			viewScreen = request.getParameter("viewScreen");
		}
		if (viewScreen.equals("no")) {
			backButtonUrl = "opd?method=showGastroEnterologyColonoscopyJsp&visitId="
					+ currentVisitId;
		} else if (viewScreen.equals("yes")) {
			int deptId = 0;
			int visitNoForJsp = 0;
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			if (request.getParameter("visitNoForJsp") != null) {
				visitNoForJsp = Integer.parseInt(request
						.getParameter("visitNoForJsp"));
			}
			backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
					+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
		}
		map = opdHandlerService.viewGynaecology(parameterMap);
		map.put("currentVisitId", currentVisitId);
		map.put("backButtonUrl", backButtonUrl);
		String jsp = "";
		jsp = VIEW_OBSTETRIC_MEBSTURAL_HISTORY_JSP;
		jsp += ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);

	}

	public ModelAndView submitSocioEconomicHistory(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		String userName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		boolean successfullyAdded = false;
		if (request.getParameter(PAST_MC) != null) {
			pastMc = request.getParameter(PAST_MC);
		}
		if (request.getParameter(PRESENT_MC) != null) {
			presentMc = request.getParameter(PRESENT_MC);
		}
		if (request.getParameter(LMP) != null) {
			lmp = request.getParameter(LMP);
		}
		if (request.getParameter(PMP1) != null) {
			pmp1 = request.getParameter(PMP1);
		}
		if (request.getParameter(PMP2) != null) {
			pmp2 = request.getParameter(PMP2);
		}
		if (request.getParameter(OBSTETRIC_HISTORY) != null) {
			obstetricHistory = request.getParameter(OBSTETRIC_HISTORY);
		}
		if (request.getParameter(DYSPAREUNIA) != null) {
			dyspareunia = request.getParameter(DYSPAREUNIA);
		}
		if (request.getParameter(AWARENESS_OF_FERTILE_PERIOD) != null) {
			fertilePeriod = request.getParameter(AWARENESS_OF_FERTILE_PERIOD);
		}
		if (request.getParameter(TRYING_TO_CONCEIVE_FOR) != null) {
			conceive = request.getParameter(TRYING_TO_CONCEIVE_FOR);
		}
		if (request.getParameter(FREQUENCY_OF_COITUS_PER_WK) != null) {
			coitusPrWk = request.getParameter(FREQUENCY_OF_COITUS_PER_WK);
		}
		if (request.getParameter(MENARCHY) != null
				&& !request.getParameter(MENARCHY).equals("0")
				&& !request.getParameter(MENARCHY).equals("")) {
			menarchy = Float.parseFloat(request.getParameter(MENARCHY));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		map.put("menarchy", menarchy);
		map.put("coitusPrWk", coitusPrWk);
		map.put("conceive", conceive);
		map.put("fertilePeriod", fertilePeriod);
		map.put("dyspareunia", dyspareunia);
		map.put("obstetricHistory", obstetricHistory);
		map.put("pmp2", pmp2);
		map.put("pmp1", pmp1);
		map.put("lmp", lmp);
		map.put("presentMc", presentMc);
		map.put("pastMc", pastMc);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);

		successfullyAdded = opdHandlerService.submitSocioEconomicHistory(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitMedicalSurgicalHistory(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		boolean successfullyAdded = false;
		if (request.getParameter(PAST_MEDICAL_HISTORY) != null) {
			pastMedicalHistory = request.getParameter(PAST_MEDICAL_HISTORY);
		}
		if (request.getParameter(PAST_SURGICAL_HISTORY) != null) {
			pastSurgicalHistory = request.getParameter(PAST_SURGICAL_HISTORY);
		}
		if (request.getParameter(FAMILY_HISTORY) != null) {
			familyHistory = request.getParameter(FAMILY_HISTORY);
		}

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("familyHistory", familyHistory);
		map.put("pastSurgicalHistory", pastSurgicalHistory);
		map.put("pastMedicalHistory", pastMedicalHistory);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);
		successfullyAdded = opdHandlerService.submitMedicalSurgicalHistory(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Medical/Surgical History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitSystemicExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String otherSystems = "";
		String gynaecologicalExamination = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		boolean successfullyAdded = false;
		if (request.getParameter(OTHER_SYSTEMS) != null) {
			otherSystems = request.getParameter(OTHER_SYSTEMS);
		}
		if (request.getParameter(GYNAECOLOGICAL_EXAMINATION) != null) {
			gynaecologicalExamination = request
					.getParameter(GYNAECOLOGICAL_EXAMINATION);
		}

		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);
		map.put("hinId", hinId);
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		map.put("otherSystems", otherSystems);
		map.put("gynaecologicalExamination", gynaecologicalExamination);

		successfullyAdded = opdHandlerService.submitSystemicExamination(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Systemic Examination";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitComplaints(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}

		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		boolean successfullyAdded = false;
		if (request.getParameter(LEUCORRHOEA) != null) {
			leucorrhoea = request.getParameter(LEUCORRHOEA);
		}
		if (request.getParameter(DYSMENORRHOEA) != null) {
			dysmenorrhoea = request.getParameter(DYSMENORRHOEA);
		}
		if (request.getParameter(PRURITIS_VULVAE) != null) {
			pruritisVulvae = request.getParameter(PRURITIS_VULVAE);
		}
		if (request.getParameter(BACKACHE) != null) {
			backache = request.getParameter(BACKACHE);
		}

		if (request.getParameter(PRIMARY_INFERTILITY) != null
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("0")
				&& !request.getParameter(PRIMARY_INFERTILITY).equals("")) {
			primaryInfertility = Float.parseFloat(request
					.getParameter(PRIMARY_INFERTILITY));
		}
		if (request.getParameter(SECONDARY_INFERTILITY) != null
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("0")
				&& !request.getParameter(SECONDARY_INFERTILITY).equals("")) {
			secondaryInfertility = Float.parseFloat(request
					.getParameter(SECONDARY_INFERTILITY));
		}
		if (request.getParameter(HYPOMENORRHOEA) != null
				&& !request.getParameter(HYPOMENORRHOEA).equals("0")
				&& !request.getParameter(HYPOMENORRHOEA).equals("")) {
			hypomenorrhoea = Float.parseFloat(request
					.getParameter(HYPOMENORRHOEA));
		}
		if (request.getParameter(OLIGOMENORRHOEA) != null
				&& !request.getParameter(OLIGOMENORRHOEA).equals("0")
				&& !request.getParameter(OLIGOMENORRHOEA).equals("")) {
			oligomenorrhoea = Float.parseFloat(request
					.getParameter(OLIGOMENORRHOEA));
		}
		if (request.getParameter(GALACTORRHOEA) != null
				&& !request.getParameter(GALACTORRHOEA).equals("0")
				&& !request.getParameter(GALACTORRHOEA).equals("")) {
			galactorrhoea = Float.parseFloat(request
					.getParameter(GALACTORRHOEA));
		}
		if (request.getParameter(HISRSUTISM) != null
				&& !request.getParameter(HISRSUTISM).equals("0")
				&& !request.getParameter(HISRSUTISM).equals("")) {
			hisrsutism = Float.parseFloat(request.getParameter(HISRSUTISM));
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}

		map.put("primaryInfertility", primaryInfertility);
		map.put("secondaryInfertility", secondaryInfertility);
		map.put("hypomenorrhoea", hypomenorrhoea);
		map.put("oligomenorrhoea", oligomenorrhoea);
		map.put("galactorrhoea", galactorrhoea);
		map.put("hisrsutism", hisrsutism);
		map.put("leucorrhoea", leucorrhoea);
		map.put("visitId", visitId);
		map.put("pruritisVulvae", pruritisVulvae);
		map.put("backache", backache);
		map.put("dysmenorrhoea", dysmenorrhoea);
		map.put("userName", userName);
		map.put("date", date);
		map.put("time", time);
		map.put("hinId", hinId);
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("hospitalId", hospitalId);
		successfullyAdded = opdHandlerService.submitComplaints(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView submitGeneralExamination(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();

		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoea = "";
		String pigmentation = "";
		String others = "";
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		session = request.getSession();

		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute("userName") != null) {
			userName = (String) session.getAttribute("userName");
		}

		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		boolean successfullyAdded = false;
		if (request.getParameter(OBESITY) != null) {
			obesity = request.getParameter(OBESITY);
		}
		if (request.getParameter(ACNE) != null) {
			acne = request.getParameter(ACNE);
		}
		if (request.getParameter(HAIR_DISTRIBUTION) != null) {
			hairDistribution = request.getParameter(HAIR_DISTRIBUTION);
		}
		if (request.getParameter(BREAST_DEVELOPMENT) != null) {
			breastDevelopment = request.getParameter(BREAST_DEVELOPMENT);
		}
		if (request.getParameter(PIGMENTATION) != null) {
			pigmentation = request.getParameter(PIGMENTATION);
		}
		if (request.getParameter(OTHERS) != null) {
			others = request.getParameter(OTHERS);
		}

		if (request.getParameter(HEIGHT) != null
				&& !request.getParameter(HEIGHT).equals("0")
				&& !request.getParameter(HEIGHT).equals("")) {
			height = Float.parseFloat(request.getParameter(HEIGHT));
		}
		if (request.getParameter(WEIGHT) != null
				&& !request.getParameter(WEIGHT).equals("0")
				&& !request.getParameter(WEIGHT).equals("")) {
			weight = Float.parseFloat(request.getParameter(WEIGHT));
		}
		if (request.getParameter(GALACTORRHOEA) != null) {
			galactorrhoea = request.getParameter(GALACTORRHOEA);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
		}
		if (request.getParameter(VISIT_ID) != null) {
			visitId = Integer.parseInt(request.getParameter(VISIT_ID));
		}
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		map.put("galactorrhoea", galactorrhoea);
		map.put("weight", weight);
		map.put("height", height);
		map.put("height", height);
		map.put("others", others);
		map.put("pigmentation", pigmentation);
		map.put("hairDistribution", hairDistribution);
		map.put("breastDevelopment", breastDevelopment);
		map.put("acne", acne);
		map.put("obesity", obesity);
		map.put("hospitalId", hospitalId);
		map.put("deptId", deptId);

		successfullyAdded = opdHandlerService.submitGeneralExaminaton(map);
		if (successfullyAdded) {
			message = "Record Added Successfully !!";
		} else {
			message = "Try Again !";

		}
		jsp = MESSAGE_FOR_GYNAE;
		jsp += ".jsp";
		title = "Socio-Economic History";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 *
	 */
	// ----------------------SurgeryRequisitionForInPatient------By
	// Dipali---------------------------------------
	public ModelAndView printSurgeryRequisitionForInPatient(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> requestParameters = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int orderNo = 0;
		Integer hospitalId;
		session=request.getSession();
		try {
			if (request.getParameter("orderNo") != null
					&& !request.getParameter("orderNo").equals("")) {
				orderNo = Integer.parseInt(request.getParameter("orderNo"));
				requestParameters.put("orderNo", orderNo);
			}
			HttpSession session = request.getSession();
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				requestParameters.put("hospitalId", hospitalId);
			}
			/*if (request.getParameter("hospitalId") != null
					&& !request.getParameter("hospitalId").equals("")) {
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
				requestParameters.put("hospitalId", hospitalId);
			}*/
			int orderId=0;
			orderId=opdHandlerService.getOrderId();
			requestParameters.put("orderId", orderId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = opdHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("opd_surgeryRequisitionForInpatient",
				requestParameters, (Connection) connectionMap.get("conn"),
				response, getServletContext());
		return null;
	}

	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 *
	 */
	/**
	 * ----------------------UPLOAD DOCUMENTS ---------------------------------
	 */

	/*public ModelAndView showUploadingDocumentsJsp(HttpServletRequest request,
			HttpServletResponse response) {	
		Map<String, Object> map = new HashMap<String, Object>();
//		int visitId = Integer.parseInt(request.getParameter("visitId"));
		map = opdHandlerService.showUploadingDocumentsJsp(visitId);
		jsp = "opd_uploadpatientdoc" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}*/
	
	
	
	public ModelAndView showUploadingDocumentsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int visitId = 0;
		if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
		visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		int token = 0;
		if(request.getParameter("token")!=null){
			token = Integer.parseInt(request.getParameter("token"));
		}
		String backFlag = "";
		if(request.getParameter("backFlag")!=null){
			backFlag =request.getParameter("backFlag");
		}
		int inpatientId = 0;
		if(request.getParameter("parent")!=null && !request.getParameter("parent").equals("")){
			inpatientId = Integer.parseInt(request.getParameter("parent"));
		}
		String reportingFor="";
		if(request.getParameter("reportingFor")!=null){
			reportingFor = request.getParameter("reportingFor");
			mapForDS.put("reportingFor", reportingFor);
		}
		map = opdHandlerService.showUploadingDocumentsJsp(visitId,inpatientId,mapForDS);
		map.put("visitId", visitId);
		map.put("token", token);
		map.put("backFlag", backFlag);
		map.put("inpatientId", inpatientId);
//		jsp = "opd_uploadpatientdoc" + ".jsp";
//		map.put("contentJsp", jsp);
		String jsp = "";
		if(backFlag.equals("OPD")  || backFlag.equals("dental") || backFlag.equals("fp") ){
			//jsp = "opd_uploadpatientdoc";// comment by javed khan for CSRF protection on 10-03-2013
			map.put("contentJsp", "opd_uploadpatientdoc.jsp"); // added by javed khan for CSRF protection on 10-03-2013
			jsp = "indexPop"; // added by javed khan for CSRF protection on 10-04-2013
		}else{
			
			map.put("contentJsp", "opd_uploadpatientdoc.jsp"); // comment by javed khan for CSRF protection on 10-03-2013
			jsp = "index";
		}
		 return new ModelAndView(jsp, "map", map);
	}

	/*public ModelAndView viewPatientDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId;
		String userName = "";
		String jsp = "";
		String inputField = "";
		String flag = "";
		String flag1 = "";

		MultipartFormDataRequest mrequest = null;
		Box box = HMSUtil.getBox(request);
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {

				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			if (mrequest.getParameter("inputField") != null
					&& !(mrequest.getParameter("inputField").equals(""))) {
				inputField = mrequest.getParameter("inputField");
			}

			if (mrequest.getParameter("flag") != null
					&& !(mrequest.getParameter("flag").equals(""))) {
				flag = mrequest.getParameter("flag");
			}
			if (mrequest.getParameter("flag1") != null
					&& !(mrequest.getParameter("flag1").equals(""))) {
				flag1 = mrequest.getParameter("flag1");
				if (mrequest.getParameter("hinNo") != null) {
					inputField = mrequest.getParameter("hinNo");
				} else {
					inputField = mrequest.getParameter("adNo");
				}
			}
			
		} else {
			if (request.getParameter("inputField") != null
					&& !(request.getParameter("inputField").equals(""))) {
				inputField = request.getParameter("inputField");
			}

			if (request.getParameter("flag") != null
					&& !(request.getParameter("flag").equals(""))) {
				flag = request.getParameter("flag");
			}
			if (request.getParameter("flag1") != null
					&& !(request.getParameter("flag1").equals(""))) {
				flag1 = request.getParameter("flag1");
				removeFilesInUploadFolder(request, response);
				if (request.getParameter("fieldValue") != null) {
					inputField = request.getParameter("fieldValue");
				} else {
					inputField = request.getParameter("fieldValue");
				}
			}
		}

		map.put("inputField", inputField);
		map.put("flag", flag);
		map.put("flag1", flag1);

		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		String uploadURL = getServletContext().getRealPath("/upload/");
		File urlName = new File(getServletContext().getRealPath("/upload/"));
		String getPathName = urlName.getPath();
		map.put("uploadURL", uploadURL);
		map = opdHandlerService.viewPatientDetails(map);

		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			jsp = "opd_uploadpatientdoc";
			jsp += ".jsp";
			title = "Cancel for Patient Appointments";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		} else if (flag.equals("view")) {
			jsp = "opdViewPatientDoc";
			jsp += ".jsp";
			title = "Cancel for Patient Appointments";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		} else {
			jsp = "opdViewDocumentsPopUp";
			jsp += ".jsp";
			title = "Cancel for Patient Appointments";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		}

	}*/
	
	public ModelAndView viewPatientDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId;
		String userName = "";
		String jsp = "";
		String inputField = "";
		String flag = "";
		String flag1 = "";
		String hin_no = "";
		int visitId = 0;
		int inpatientId = 0;
		MultipartFormDataRequest mrequest = null;
		Box box = HMSUtil.getBox(request);
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			if (mrequest.getParameter("inputField") != null
					&& !(mrequest.getParameter("inputField").equals(""))) {
				inputField = mrequest.getParameter("inputField");
			}
			if (mrequest.getParameter("hin_no") != null) {
				hin_no = mrequest.getParameter("hin_no");
			}
			if (mrequest.getParameter("flag") != null
					&& !(mrequest.getParameter("flag").equals(""))) {
				flag = mrequest.getParameter("flag");
			}
			if (mrequest.getParameter("flag1") != null
					&& !(mrequest.getParameter("flag1").equals(""))) {
				flag1 = mrequest.getParameter("flag1");
				if (mrequest.getParameter("hinNo") != null)
					inputField = mrequest.getParameter("hinNo");
				else
					inputField = mrequest.getParameter("adNo");
			}
			if (mrequest.getParameter("visitId") != null
					&& !(mrequest.getParameter("visitId").equals(""))) {
				visitId = Integer.parseInt(mrequest.getParameter("visitId"));
			}
			
			if (mrequest.getParameter(INPATIENT_ID) != null
					&& !(mrequest.getParameter(INPATIENT_ID).equals(""))) {
				inpatientId = Integer.parseInt(mrequest.getParameter(INPATIENT_ID));
			}
			if (mrequest.getParameter("parent") != null
					&& !(mrequest.getParameter("parent").equals(""))) {
				inpatientId = Integer.parseInt(mrequest.getParameter("parent"));
			}
		} else {
			if (request.getParameter("inputField") != null
					&& !(request.getParameter("inputField").equals(""))) {
				inputField = request.getParameter("inputField");
			}

			if (request.getParameter("flag") != null
					&& !(request.getParameter("flag").equals(""))) {
				flag = request.getParameter("flag");
			}
			if (request.getParameter("flag1") != null
					&& !(request.getParameter("flag1").equals(""))) {
				flag1 = request.getParameter("flag1");
				removeFilesInUploadFolder(request, response);
				if (request.getParameter("fieldValue") != null)
					inputField = request.getParameter("fieldValue");
				else
					inputField = request.getParameter("fieldValue");
			}
			if (request.getParameter("visitId") != null
					&& !(request.getParameter("visitId").equals(""))) {
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			
			if (request.getParameter(INPATIENT_ID) != null
					&& !(request.getParameter(INPATIENT_ID).equals(""))) {
				inpatientId = Integer.parseInt(request.getParameter(INPATIENT_ID));
			}
			if (request.getParameter("parent") != null
					&& !(request.getParameter("parent").equals(""))) {
				inpatientId = Integer.parseInt(request.getParameter("parent"));
			}
		}
		map.put("visitId", visitId);
		map.put("inputField", inputField);
		map.put("flag", flag);
		map.put("flag1", flag1);
		map.put(INPATIENT_ID, inpatientId);
		HttpSession session = request.getSession();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		String userHome = getServletContext().getRealPath("");
		String fileSeparator = System.getProperty("file.separator");
		String uploadURL = userHome.substring(0, userHome
				.lastIndexOf(fileSeparator))
				+ fileSeparator
				+ "HMSDocumentFolder"
				+ fileSeparator
				+ "upload" + fileSeparator;
		
		//String destuploadURL = getServletContext().getRealPath("/upload/");
	//	File urlName = new File(getServletContext().getRealPath("/upload/"));
	//	String getPathName = urlName.getPath();
	//	map.put("destUploadURL", destuploadURL + fileSeparator + hin_no);
		map.put("uploadURL", uploadURL + hin_no);
		map = opdHandlerService.viewPatientDetails(map);
		String[] files = null;
		try {
		//	File fileDir = new File(destuploadURL + fileSeparator + hin_no);
			File fileDir = new File(uploadURL + fileSeparator + hin_no);
			if (fileDir.exists()) {
				files = fileDir.list();
			}
		} catch (Exception exc) {
			exc.printStackTrace();

		}
		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			jsp = "opd_uploadpatientdoc";
			jsp += ".jsp";
			title = "Cancel for Patient Appointments";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		} else if (flag.equals("view")) {
			jsp = "opdViewPatientDoc";
			jsp += ".jsp";
			title = "Cancel for Patient Appointments";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("files", files);
			return new ModelAndView("index", "map", map);
		} else {
			jsp = "opdViewDocumentsPopUp";
			jsp += ".jsp";
			title = "Cancel for Patient Appointments";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("files", files);
			return new ModelAndView("index", "map", map);
		}

	}

	/*public ModelAndView submitUploadDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		MultipartFormDataRequest mrequest = null;
		String fileName = null;
		String message = null;
		String fileExtension = null;
		int hospitalId;
		String userName = "";
		Users users=null;
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {

				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		HttpSession session = request.getSession();

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			users = (Users) session.getAttribute("users");
			box.put("userName", userName);
			box.put("usersId", users.getId());
		}

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();
		// Vector noOfFiles=box.getVector(UPLOAD_FILENAME);

		String uploadURL = getServletContext().getRealPath("/upload/");
		List fileUploadedList = null;
		int i = 1;
		for (i = 1; i <= 5; i++) {
			if (!request.getParameter("filename" + i).equals("")) {
				StringTokenizer strToken = new StringTokenizer(
						request.getParameter("filename" + i), ".");

				fileName = strToken.nextToken();
				fileExtension = strToken.nextToken();

				String whiteList = "*." + fileExtension;

				// Long fileSizeLimit = 2097152l;
				// RequestConstants.UPLOAD_FILENAME=box.getString("filename"+i);

				fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL,
						whiteList, request.getParameter("filename" + i), i);
				box.put("filename" + i, request.getParameter("filename" + i));
				box.put("description" + i,
						mrequest.getParameter("description" + i));
			} else {
				box.put("filename" + i, "0");
			}
		}
		if (mrequest.getParameter("hin") != null) {
			box.put("hinId", mrequest.getParameter("hin"));
		} else {
			box.put("hinId", 0);
		}
		if (mrequest.getParameter("inpatientId") != null) {
			box.put("inpatientId", mrequest.getParameter("inpatientId"));
		} else {
			box.put("inpatientId", 0);
		}
		box.put("patientName", mrequest.getParameter("patientName"));
		box.put("sex", mrequest.getParameter("sex"));
		box.put("age", mrequest.getParameter("age"));
		if (mrequest.getParameter("address") != null) {
			box.put("address", mrequest.getParameter("address"));
		}
		Boolean fileUploaded = false;
		if (fileUploadedList != null && fileUploadedList.size() != 0) {
			fileUploaded = (Boolean) fileUploadedList.get(0);
		}
		box.put("uploadURL", uploadURL);
		map = opdHandlerService.submitUploadDocuments(box);
		if (map.get("dataSaved").equals(true)) {
			message = "File Uploaded Sucessfully!!";
		} else {
			message = "Data Cannot be Saved !!";
		}
		map.put("message", message);
		jsp = "submit_uploadpatientdoc";
		jsp += ".jsp";
		title = "Upload Documents";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}*/
	
	public ModelAndView submitUploadDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		MultipartFormDataRequest mrequest = null;
		String fileName = null;
		String message = null;
		String hin_no = "";
		String fileExtension = null;
		int hospitalId;
		int visitId = 0;
		int inpatientId = 0;
		String userName = "";
		int userId=0;
		int hinId=0;
		
		
		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {

				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		HttpSession session = request.getSession();
		if (mrequest.getParameter("hin_no") != null) {
			hin_no = (String) mrequest.getParameter("hin_no");
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
		}
		if (session.getAttribute(USER_ID) != null) {
			userId = (Integer) session.getAttribute(USER_ID);
			box.put(USER_ID, userId);
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
			box.put("userName", userName);
		}
		if (mrequest.getParameter("visitId") != null
				&& !mrequest.getParameter("visitId").equals("")) {
			visitId = Integer.parseInt(mrequest.getParameter("visitId"));
		}
		if (mrequest.getParameter(HIN_ID) != null
				&& !mrequest.getParameter(HIN_ID).equals("")) {
			hinId = Integer.parseInt(mrequest.getParameter(HIN_ID));
			box.put(HIN_ID, hinId);
		}
		
		
		Map<String, Object> uploadFileMap = new HashMap<String, Object>();
		String userHome = getServletContext().getRealPath("");
		String fileSeparator = System.getProperty("file.separator");
		
		String uploadURL = userHome.substring(0, userHome
				.lastIndexOf(fileSeparator))
				+ fileSeparator
				+ "HMSDocumentFolder"
				+ fileSeparator
				+ "upload" + fileSeparator;
		
		
		HMSUtil.createFolderFroDocument(hin_no, uploadURL);
		List fileUploadedList = null;
		int uploadCount = Integer.parseInt(mrequest.getParameter("uploadCount"));
		box.put("uploadCount", uploadCount);
		Hashtable files = mrequest.getFiles();
		

		
		int i = 1;
		for (i = 1; i <= uploadCount; i++) {
			UploadFile file = (UploadFile) files
					.get(RequestConstants.UPLOAD_FILENAME + i);
			if (file!=null) // && fileSize <= 2097152 )
			{
				
				 String fileName1 = file.getFileName();

				StringTokenizer strToken = new StringTokenizer(fileName1, ".");

				fileName = strToken.nextToken();
				fileExtension = strToken.nextToken();

				String whiteList = "*." + fileExtension;

				fileUploadedList = HMSUtil.uploadFile(mrequest, uploadURL
						+ hin_no + fileSeparator, whiteList,fileName1, i);
				box.put("filename" + i, fileName1);
				box.put("description" + i, mrequest.getParameter(DESCRIPTION+ i));
				box.put("fileExtension" + i, fileExtension);
			} else {
				box.put("filename" + i, "0");
			}
		}
		
		if (mrequest.getParameter(INPATIENT_ID) != null
				&& !mrequest.getParameter(INPATIENT_ID).equals("0")) {
			inpatientId = Integer.parseInt(mrequest.getParameter(INPATIENT_ID));
			box.put(INPATIENT_ID, inpatientId);
		}
		
//		box.put("patientName", mrequest.getParameter("patientName"));
//		box.put("sex", mrequest.getParameter("sex"));
//		box.put("age", mrequest.getParameter("age"));
//		if (mrequest.getParameter("address") != null)
//			box.put("address", mrequest.getParameter("address"));
		Boolean fileUploaded = false;
		if (fileUploadedList != null && fileUploadedList.size() != 0) {
			fileUploaded = (Boolean) fileUploadedList.get(0);
		}
		box.put("uploadURL", uploadURL);
		box.put("hin_no", hin_no);
		box.put("fileSeparator", fileSeparator);
		
		map = opdHandlerService.submitUploadDocuments(box);
		
		if (map.get("dataSaved").equals(true)) {
			message = "File Uploaded Sucessfully!!";
		} else {
			message = "Data Cannot be Saved !!";
		}
		map.put("message", message);
		map.put("visitId", visitId);
		map.put("inpatientId", inpatientId);
		jsp = "submit_uploadpatientdoc";
		jsp += ".jsp";
		title = "Upload Documents";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}


	/*public ModelAndView viewPatientDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String filename = null;
		String fileExtension = null;
		MultipartFormDataRequest mrequest = null;

		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();

		String uploadURL = getServletContext().getRealPath("/upload/");

		// String whiteList = "*.zip";
		// String whiteList = "*.jpg";

		// Long fileSizeLimit = 2097152l;

		
		 * List fileUploadedList = null; fileUploadedList =
		 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
		 * box.getString("filename"));
		 * Boolean fileUploaded=false; if(fileUploadedList != null &&
		 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
		 * fileUploadedList.get(0); }
		 
		box.put("uploadURL", uploadURL);
		StringTokenizer st1 = new StringTokenizer(box.getString("filename"),
				".");
		filename = st1.nextToken();
		fileExtension = st1.nextToken();
		box.put("filename", box.getString("filename"));
		// map = mrdHandlerService.viewUploadDocuments(box);
		try {
			if (fileExtension == "doc" || fileExtension == "docx") {
				response.setContentType("application/vnd.ms-word");
			} else if (fileExtension == "xls" || fileExtension == "xlsx") {
				response.setContentType("application/vnd.ms-excel");
			} else if (fileExtension == "pdf") {
				response.setContentType("application/pdf");
			} else if (fileExtension.trim().equalsIgnoreCase("txt")) {
				response.setContentType("text/plain");
			} else if (fileExtension.trim().equalsIgnoreCase("ppt")) {
				response.setContentType("application/ppt");
			} else if (fileExtension == "png") {
				response.setContentType("image/png");
			} else if (fileExtension == "jpeg") {
				response.setContentType("image/jpeg");
			} else if (fileExtension == "wbmp") {
				response.setContentType("image/vnd.wap.wbmp");
			} else if (fileExtension == "gif") {
				response.setContentType("image/gif");
			} else if (fileExtension == "jpg") {

				response.setContentType("image/jpg");
			} else {
				response.setContentType("application/octet-stream");
			}
			// set the header and also the Name by which user will be prompted
			// to save
			response.setHeader("Content-Disposition", "attachment;filename="
					+ java.net.URLEncoder.encode(box.getString("filename"))
					+ "");

			// response.setContentType("image/"+fileExtension);
			// response.setHeader("Content-Disposition", "attachment;
			// filename="+filename+"."+fileExtension);

			File f = new File(uploadURL + "/" + filename + "." + fileExtension);
			InputStream in = new FileInputStream(f);
			response.getOutputStream().flush();
			ServletOutputStream outs = response.getOutputStream();

			long length = f.length();

			if (length > Integer.MAX_VALUE) {
				// File is too large
			}

			// Create the byte array to hold the data
			byte[] bytes = new byte[(int) length];

			int offset = 0;
			int numRead = 0;
			while (offset < bytes.length
					&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
				offset += numRead;
			}

			if (offset < bytes.length) {
			}
			outs.write(bytes);
			in.close();

		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		jsp = "opdViewPatientDoc";
		jsp += ".jsp";
		title = "Import CD";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}*/
	
	public ModelAndView viewPatientDocuments(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);
		String filename = null;
		String fileExtension = null;
		MultipartFormDataRequest mrequest = null;
		String hin_no="";

		if (MultipartFormDataRequest.isMultipartFormData(request)) {
			try {
				mrequest = new MultipartFormDataRequest(request);
			} catch (UploadException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(mrequest==null && request.getParameter(HIN_NO)!=null && !request.getParameter(HIN_NO).equalsIgnoreCase(""))
		{
			hin_no=request.getParameter(HIN_NO);
		}
		else if(mrequest!=null && mrequest.getParameter(HIN_NO)!=null && !mrequest.getParameter(HIN_NO).equalsIgnoreCase(""))
		{
			hin_no=mrequest.getParameter(HIN_NO);
		}

		Map<String, Object> uploadFileMap = new HashMap<String, Object>();

		String userHome = getServletContext().getRealPath("");
		String fileSeparator = System.getProperty("file.separator");
		
		String uploadURL = userHome.substring(0, userHome
				.lastIndexOf(fileSeparator))
				+ fileSeparator
				+ "HMSDocumentFolder"
				+ fileSeparator
				+ "upload" + fileSeparator
				+ hin_no + fileSeparator;
		
		// String whiteList = "*.zip";
		// String whiteList = "*.jpg";

		// Long fileSizeLimit = 2097152l;

		/*
		 * List fileUploadedList = null; fileUploadedList =
		 * HMSUtil.uploadFile(mrequest,uploadURL, whiteList,
		 * box.getString("filename"));
		 * Boolean fileUploaded=false; if(fileUploadedList != null &&
		 * fileUploadedList.size()!=0) { fileUploaded = (Boolean)
		 * fileUploadedList.get(0); }
		 */
		box.put("uploadURL", uploadURL);
		StringTokenizer st1 = new StringTokenizer(box.getString("filename"),
				".");
		filename = st1.nextToken();
		fileExtension = st1.nextToken();
		box.put("filename", box.getString("filename"));
		// map = mrdHandlerService.viewUploadDocuments(box);
		try {
			if (fileExtension == "doc" || fileExtension == "docx") {
				response.setContentType("application/vnd.ms-word");
			} else if (fileExtension == "xls" || fileExtension == "xlsx") {
				response.setContentType("application/vnd.ms-excel");
			} else if (fileExtension == "pdf") {
				response.setContentType("application/pdf");
			} else if (fileExtension.trim().equalsIgnoreCase("txt")) {
				response.setContentType("text/plain");
			} else if (fileExtension.trim().equalsIgnoreCase("ppt")) {
				response.setContentType("application/ppt");
			} else if (fileExtension == "png") {
				response.setContentType("image/png");
			} else if (fileExtension == "jpeg") {
				response.setContentType("image/jpeg");
			} else if (fileExtension == "wbmp") {
				response.setContentType("image/vnd.wap.wbmp");
			} else if (fileExtension == "gif") {
				response.setContentType("image/gif");
			} else if (fileExtension == "jpg") {

				response.setContentType("image/jpg");
			} else {
				response.setContentType("application/octet-stream");
			}
			// set the header and also the Name by which user will be prompted
			// to save
			response.setHeader("Content-Disposition", "attachment;filename="
					+ java.net.URLEncoder.encode(box.getString("filename"))
					+ "");

			// response.setContentType("image/"+fileExtension);
			// response.setHeader("Content-Disposition", "attachment;
			// filename="+filename+"."+fileExtension);

			File f = new File(uploadURL + "/" + filename + "." + fileExtension);
			InputStream in = new FileInputStream(f);
			response.getOutputStream().flush();
			ServletOutputStream outs = response.getOutputStream();

			long length = f.length();

			if (length > Integer.MAX_VALUE) {
				// File is too large
			}

			// Create the byte array to hold the data
			byte[] bytes = new byte[(int) length];

			int offset = 0;
			int numRead = 0;
			while (offset < bytes.length
					&& (numRead = in.read(bytes, offset, bytes.length - offset)) >= 0) {
				offset += numRead;
			}

			if (offset < bytes.length) {
			}
			outs.write(bytes);
			in.close();

		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		jsp = "opdViewPatientDoc";
		jsp += ".jsp";
		title = "Import CD";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	/**
	 * ----------------------VIEW DOCUMENTS ---------------------------------
	 */

	public ModelAndView showViewDocumentsJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "opdViewPatientDoc" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView removeFilesInUploadFolder(HttpServletRequest request,
			HttpServletResponse response) {
		Box box = HMSUtil.getBox(request);

		String filename = null;
		String fileExtension = null;
		Map<String, Object> uploadFileMap = new HashMap<String, Object>();

		String uploadURL = getServletContext().getRealPath("/upload/");
		box.put("uploadURL", uploadURL);

		File f = new File(uploadURL);

		if (f.listFiles().length > 0) {
			File fd[] = f.listFiles();

			for (int i = 0; i < fd.length; i++) {
				if (fd[i].isFile()) {
					fd[i].delete();
				}
			}
		}
		if (f.listFiles().length < 1) {
			if (!f.canWrite()) {
			}
		}

		jsp = "opdViewPatientDoc";
		jsp += ".jsp";
		title = "Import CD";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public String generatePrecriptionNo(int hinId) {
		String precriptionNo = "";
		try {

			precriptionNo = opdHandlerService.generatePrecriptionNo(hinId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return precriptionNo;
	}

	// Added By Ritu For dispensing price

	public void getDispensingPriceForItem(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> dispensingPriceList = new ArrayList<Object[]>();

		String pvmsNo = "";
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		dataMap.put("pvmsNo", pvmsNo);
		map = opdHandlerService.getDispensingPriceForItem(dataMap);

		BigDecimal dispensingPrice = new BigDecimal(0.00);
		int itemId = 0;
		if (map.get("dispensingPriceList") != null) {
			dispensingPriceList = (List<Object[]>) map
					.get("dispensingPriceList");

			if (dispensingPriceList.size() > 0) {
				for (Object[] obj : dispensingPriceList) {
					if (obj[0] != null) {
						dispensingPrice = (BigDecimal) obj[0];
					}
					if (obj[1] != null) {
						itemId = (Integer) obj[1];
					}
				}
			}
		}

		StringBuffer sb = new StringBuffer();

		sb.append("<item>");
		if (dispensingPrice.compareTo(new BigDecimal(0)) > 0) {
			sb.append("<dispensingPrice>"+dispensingPrice+"</dispensingPrice>");
			} else {
			sb.append("<dispensingPrice>" + "0.00" + "</dispensingPrice>");
		}
		sb.append("<pvmsNo>" + pvmsNo + "</pvmsNo>");
		sb.append("<itemId>" + itemId + "</itemId>");
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}


	public ModelAndView getItemBrandName(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		String flag = "";
		String pvmsNo = "";
		int itemId=0;
		int counter=0;
		int departmentId=0;
		int hospitalId=0;
		session=request.getSession();
		if (request.getParameter("pvmsNo") != null)
		{
			pvmsNo = request.getParameter("pvmsNo");

		}
		
		if (request.getParameter("counter") != null)
		{
			counter = Integer.parseInt(request.getParameter("counter"));

		}
		if (session.getAttribute(HOSPITAL_ID) != null)
		{
			hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);

		}
		if (session.getAttribute(DEPT_ID) != null)
		{
			departmentId=(Integer)session.getAttribute(DEPT_ID);
		}							
		
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}

		dataMap.put("hospitalId", hospitalId);
		dataMap.put("departmentId", departmentId);
		dataMap.put("pvmsNo", pvmsNo);
		map = opdHandlerService.getItemBrandName(dataMap);
		if(map.get("brandList")!=null)
		{
			brandList = (List)map.get("brandList");
		}

		jsp = "bandNameResponseJsp";
		jsp += ".jsp";
		title = "Import CD";
		map.put("brandList", brandList);
		map.put("counter", counter);
		map.put("title", title);
		return new ModelAndView("bandNameResponseJSP", "map", map);
	}



	public ModelAndView getItemBrandManufacturerName(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandManufacturerList = new ArrayList<MasStoreBrand>();
		String flag = "";
		String pvmsNo = "";
		int brandId=0;
		int counter=0;
		if (request.getParameter("pvmsNo") != null)
		{
			pvmsNo = request.getParameter("pvmsNo");
		}
		if (request.getParameter("brandId") != null)
		{
			brandId = Integer.parseInt(request.getParameter("brandId"));
		}
		if (request.getParameter("counter") != null)
		{
			counter = Integer.parseInt(request.getParameter("counter"));
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("brandId", brandId);
		map = opdHandlerService.getItemBrandManufacturerName(dataMap);
		if(map.get("brandManufacturerList")!=null)
		{
			brandManufacturerList = (List)map.get("brandManufacturerList");
		}

		jsp = "bandManufacturerNameResponseJsp";
		jsp += ".jsp";
		title = "Import CD";
		map.put("brandManufacturerList", brandManufacturerList);
		map.put("counter", counter);
		map.put("title", title);
		return new ModelAndView("bandManufacturerNameResponseJsp", "map", map);
	}


	public ModelAndView getNomenclature(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandManufacturerList = new ArrayList<MasStoreBrand>();
		String flag = "";
		String pvmsNo = "";
		int brandId=0;
		int counter=0;
		if (request.getParameter("pvmsNo") != null)
		{
			pvmsNo = request.getParameter("pvmsNo");
		}
		if (request.getParameter("brandId") != null)
		{
			brandId = Integer.parseInt(request.getParameter("brandId"));
		}
		if (request.getParameter("counter") != null)
		{
			counter = Integer.parseInt(request.getParameter("counter"));
		}
		if (request.getParameter("flag") != null) {
			flag = request.getParameter("flag");
		}

		dataMap.put("pvmsNo", pvmsNo);
		dataMap.put("brandId", brandId);
		map = opdHandlerService.getItemBrandManufacturerName(dataMap);
		if(map.get("brandManufacturerList")!=null)
		{
			brandManufacturerList = (List)map.get("brandManufacturerList");
		}


		jsp += ".jsp";
		title = "Import CD";
		map.put("brandManufacturerList", brandManufacturerList);
		map.put("counter", counter);
		map.put("title", title);
		return new ModelAndView("nomenclatureResponse", "map", map);
	}



	public void getDrugTypeOfItem(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvmsNo = "";
		if (request.getParameter("pvmsNo") != null) {
			pvmsNo = request.getParameter("pvmsNo");
		}
		dataMap.put("pvmsNo", pvmsNo);
		map = opdHandlerService.getDrugTypeOfItem(dataMap);

		String drugType = "";
		if (map.get("drugType") != null) {
			drugType = (String) map.get("drugType");
		}

		StringBuffer sb = new StringBuffer();

		sb.append("<item>");
		if (!drugType.equals("")) {
			sb.append("<drugType>" + drugType + "</drugType>");
		} else {
			sb.append("<drugType>" + "" + "</drugType>");
		}
		sb.append("<pvmsNo>" + pvmsNo + "</pvmsNo>");
		sb.append("</item>");

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 *
	 */

	// ---------------------------------------------------------------------------------
	public CommonMasterHandlerService getCommonMasterHandlerService() {
		return commonMasterHandlerService;
	}

	public void setCommonMasterHandlerService(
			CommonMasterHandlerService commonMasterHandlerService) {
		this.commonMasterHandlerService = commonMasterHandlerService;
	}

	public OPDHandlerService getOpdHandlerService() {
		return opdHandlerService;
	}

	public void setOpdHandlerService(OPDHandlerService opdHandlerService) {
		this.opdHandlerService = opdHandlerService;
	}
	
	
	//-------------------------------Physiotherapy Required Method Start -----------------------------//
   //++ ------------------------------Start by RAMDULAR---------------------------------------------------------- ++//

	@SuppressWarnings("unchecked")
	public ModelAndView showPhysiotherapyPatientList(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		String pFirstName ="";
		String pMiddleName ="";
		String pLastName ="";
		String hinNo="";

		if(request.getParameter(HIN_NO)!=null)
		{
			hinNo = request.getParameter(HIN_NO);
			 mapForDS.put("hinNo", hinNo);
		}
		if(request.getParameter(P_FIRST_NAME)!=null)
		{
			pFirstName = request.getParameter(P_FIRST_NAME);
			 mapForDS.put("pFirstName", pFirstName);
		}
		if(request.getParameter(P_MIDDLE_NAME)!=null)
		{
			pMiddleName = request.getParameter(P_MIDDLE_NAME);
			 mapForDS.put("pMiddleName", pMiddleName);
		}
		if(request.getParameter(P_LAST_NAME)!=null)
		{
			pLastName = request.getParameter(P_LAST_NAME);
			 mapForDS.put("pLastName", pLastName);
		}

		//int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter("filter") != null) {
			if(request.getParameter("consultingDoc")!=null)
			{
			 int empId = Integer.parseInt(request.getParameter("consultingDoc"));
		 	 mapForDS.put("empId", empId);
			}
		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}


		String title = request.getParameter("title");
		map = opdHandlerService.getPhysiotherapistPatientList(mapForDS);
 		 
		jsp = OPD_PHYSIOTHERAPY_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	public ModelAndView showOPDPhysiotherapyJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int token   = Integer.parseInt(request.getParameter("token"));
		int deptId = (Integer) session.getAttribute("deptId");
		String deptName="";
		Map<String, Object> mapForDS = new HashMap<String, Object>();
	       List<Visit> visitTokenList = new ArrayList<Visit>();

		mapForDS.put("deptId", deptId);
		mapForDS.put("visitId", visitId);
		mapForDS.put("token", token);
 		map =opdHandlerService.getPhysiotherapistList(mapForDS);
 	 	deptName = opdHandlerService.getDepartmentNameFromId(deptId);
		jsp = OPD_PHYSIOTHERAPY_JSP;
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("deptName", deptName);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}
	public ModelAndView submitOPDPhysiotherapyJsp(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int visitId =0;
		if(request.getParameter("visitId")!=null){
			visitId =Integer.parseInt(request.getParameter("visitId"));
		}
		int hinId= Integer.parseInt(request.getParameter("hinId"));
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		String userName=null;
		String physiotherapistNameId=null;
		String hoExaminationId=null;
		String plancaregoalsId=null;
		String modalityNameId=null;
		String remarksId=null;
		String prognosisReportsId=null;
		Box box= HMSUtil.getBox(request);

     	boolean b = opdHandlerService.submitOPDPhysiotherapyJsp(box);
     	String message="";
     	if(b){
     	 message= "Physiotherapy Details have been Submitted !";
     	}else{
     		message= "Some Error Occured. Please Try Again !!";
     	}
		jsp  = OPD_PHYSIOTHERAPY_MSG_JSP;
		jsp += ".jsp";
		map.put("visitId",visitId);
		map.put("hinId",hinId);
		map.put("contentJsp",jsp);
		map.put("message", message);
	 return new ModelAndView("index","map",map);
	}


	public ModelAndView addImmunizationCard(HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		/*List<Integer> snoList = new ArrayList<Integer>();
		List<String> givendateList = new ArrayList<String>();
		boolean saved = false;
		HttpSession session = request.getSession();
		

		int listLength =  Integer.parseInt(request.getParameter("listLength"));
		int visitId = Integer.parseInt(request.getParameter("visitId"));
		int departmentId = (Integer) session.getAttribute("deptId");
		int hospitalId = (Integer) session.getAttribute("hospitalId");
		box.put("departmentId", departmentId);
		box.put("hospitalId", hospitalId);
		box.put("listLength", listLength);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		box.put("userId", userId);
		box.put("deptId", departmentId);
		box.put("visitId", visitId);
		String message = "";

		for(int i=1; i<=listLength;i++)
		{
			int sno=0;
			sno =(Integer.parseInt(request.getParameter("sno"+i)));
			String givendate =null;
			givendate = (request.getParameter("givendate"+i));
			if(request.getParameter("givendate"+i)!=null && !request.getParameter("givendate"+i).equals(""))
			{
				snoList.add(sno);
				givendateList.add(givendate);
			}
		}
		map.put("snoList", snoList);
		map.put("givendateList", givendateList);*/
		map = opdHandlerService.addImmunizationCard(box,map);

		/* saved = (Boolean) map.get("saved");
		if (saved) {
			message = "Immunization has been done Successfully.";
			jsp = "messageImmunization";
		} else {
			message = "Immunization has not been done Successfully..";
			jsp = "messageSomeTry";
		}
		jsp += ".jsp";
		title = "Immunization List";
		map.put("visitId", visitId);
		map.put("deptId", departmentId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("message", message);*/
		// return new ModelAndView("index", "map", map);
		return null;
	}

	public ModelAndView showTokenNumber(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int deptId = 0;
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter("filter") != null) {
			int empId = Integer.parseInt(request.getParameter("consultingDoc"));
			mapForDS.put("empId", empId);
		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}

		map = opdHandlerService.getDepartmentName(mapForDS);
		jsp = TOKEN_NUMBER_JSP;

		jsp += ".jsp";
		title = "Token Number";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}
	public ModelAndView getTokenNumber(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		int departmentId =0;
		int hospitalId =0;
		String deptName="";
		int param1=0;
		int param2=0;
		if(Integer.parseInt(request.getParameter(DEPARTMENT_ID))!=0)
		{
			departmentId = Integer.parseInt(request.getParameter(DEPARTMENT_ID));
		}
		if(Integer.parseInt(request.getParameter("num1"))!=0)
		{
			param1 = Integer.parseInt(request.getParameter("num1"));
		}
		if(Integer.parseInt(request.getParameter("num2"))!=0)
		{
			param2 = Integer.parseInt(request.getParameter("num2"));
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""
					+ session.getAttribute("hospitalId"));
		}
		if (session.getAttribute(LOGIN_NAME) != null) {
			userName = (String) session.getAttribute(LOGIN_NAME);
		}

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		detailsMap = opdHandlerService.getConnectionForReport();
		deptName   = opdHandlerService.getDepartmentNameFromId(departmentId);

		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("deptName", deptName);
		parameters.put("hospitalId", hospitalId);
		parameters.put("param1", param1);
		parameters.put("param2", param2);
		parameters.put("SUBREPORT_DIR",getServletContext().getRealPath("/Reports/"));

		map.put("departmentId", departmentId);
		map.put("userName", userName);
		try {
		//	map = opdHandlerService.getTokenNumber(map);

			HMSUtil.generateReport("PatientTokenNumber", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;

	}
	
	public ModelAndView showPopupTokenJsp(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
		int deptId=0; 
		int hospitalId=0;
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer)session.getAttribute("hospitalId");
			mapForDS.put("hospitalId", hospitalId);	
		}
		if(session.getAttribute("deptId")!=null){
			 deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}else if(request.getParameter("deptId")!=null){
			 deptId = Integer.parseInt(request.getParameter("deptId"));
		 	mapForDS.put("deptId", deptId);
		}
		
		map = opdHandlerService.showPopupTokenJsp(mapForDS);
		jsp = WINDOW_POPUP_JSP;
		jsp += ".jsp";
		title = "Token Number";
		map.put("contentJsp", jsp);

		map.put("title", title);
		return new ModelAndView(WINDOW_POPUP_JSP, "map", map);
	}
	
	
	public ModelAndView showPopupToken(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
		int deptId=0; 
		int hospitalId=0;
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer)session.getAttribute("hospitalId");
			mapForDS.put("hospitalId", hospitalId);	
		}
		if(session.getAttribute("deptId")!=null){
			 deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}else if(request.getParameter("deptId")!=null){
			 deptId = Integer.parseInt(request.getParameter("deptId"));
		 	mapForDS.put("deptId", deptId);
		}
		
		map = opdHandlerService.showPopupTokenJsp(mapForDS);
		String jsp = "otherTokenDisplay";
		//jsp += ".jsp";
		title = "Token Number";
		map.put("contentJsp", jsp);

		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
	public void populatMasInstitute(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		//
		int hospitalIdd = 0;
		if (request.getParameter("hospitalIdd") != null
				&& !request.getParameter("hospitalIdd").equals("")) {
			hospitalIdd = Integer.parseInt(request.getParameter("hospitalIdd"));	
			
		}
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		
		dataMap.put("hospitalIdd", hospitalIdd);
		detailsMap = opdHandlerService.populatMasInstitute(dataMap);
		departmentList = (List<MasDepartment>) detailsMap.get("departmentList");
		// ------------Response------------------

		StringBuffer sb = new StringBuffer();
		
		for (MasDepartment deptList : departmentList) {
			sb.append("<item>");
			
			
			sb.append("<deptName>" + deptList.getDepartmentName()
					+ "</deptName>");
			sb.append("<deptNameId>" + deptList.getId() + "</deptNameId>");
			
			sb.append("</item>");
		}
		
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
		//
	}


	
	
	/** method which will display the all the second opnion's Patient List
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	public ModelAndView showSecondOpnionListJsp(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		
		List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
		int deptId=0; 
		int hospitalId=0;
		
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer)session.getAttribute("hospitalId");
			mapForDS.put("hospitalId", hospitalId);	
		}
		
		if(request.getParameter("deptId")!=null){
			 deptId = Integer.parseInt(request.getParameter("deptId"));
		 	mapForDS.put("deptId", deptId);
		}
		int empId=0;
		if(session.getAttribute("empId")!=null){
			empId=(Integer)session.getAttribute("empId");
			mapForDS.put("empId", empId);
		}
		map = opdHandlerService.showSecondOpnionListJsp(mapForDS);

		String jsp = "second_opinion_window";
		//jsp += ".jsp";
		title = "Second Opinion";
		map.put("contentJsp", jsp);

		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}
	
	

	
	public ModelAndView showToeknDisplayForNurseJsp(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
		int deptId=0; 
		int hospitalId=0;
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer)session.getAttribute("hospitalId");
			mapForDS.put("hospitalId", hospitalId);	
		}
		if(session.getAttribute("deptId")!=null){
			 deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}else if(request.getParameter("deptId")!=null){
			 deptId = Integer.parseInt(request.getParameter("deptId"));
		 	mapForDS.put("deptId", deptId);
		}
		
		map = opdHandlerService.showToeknDisplayForNurseJsp(mapForDS);
		
		jsp = "window_popupNursing";
		jsp += ".jsp";
		title = "Token Number";
		map.put("contentJsp", jsp);

		map.put("title", title);
		return new ModelAndView("window_popupNursing", "map", map);
	}
	
	public void openImageForDisplay(HttpServletRequest request,HttpServletResponse response) throws IOException{
		
		Map<String,Object> map=new HashMap<String,Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		
		HttpSession session = request.getSession();
		
		List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
		
		int deptId=0; 
		int hospitalId=0;
		int imageId=0;
		
		if(null !=request.getParameter("imageId")){
			imageId=Integer.parseInt( request.getParameter("imageId"));
		}
		
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = (Integer)session.getAttribute("hospitalId");
			mapForDS.put("hospitalId", hospitalId);	
		}
		if(session.getAttribute("deptId")!=null){
			 deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		else if(request.getParameter("deptId")!=null){
			 deptId = Integer.parseInt(request.getParameter("deptId"));
		 	mapForDS.put("deptId", deptId);
		}
		
	//	map = opdHandlerService.openImageForDisplay(imageId,hospitalId,deptId);
		
		String imagepath="";
		
		if(null !=request.getParameter("imagepath")){
			imagepath= request.getParameter("imagepath");
		}
		OutputStream oImage = null;
		File file = new File(imagepath);

	    FileInputStream fin = new FileInputStream(file);
	    byte b[] = new byte[(int)file.length()];
	    fin.read(b);
	    response.setContentType("image/jpeg, image/jpg, image/png, image/gif");
	    oImage = response.getOutputStream();
	     oImage.write(b);
	     oImage.flush();
	     oImage.close();
	
	}

	

	@SuppressWarnings("unused")
	public ModelAndView showPreviousSystemPatientPrescriptions(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);

		String hinId = "";
		if(request.getParameter("hinNo")!=null)
		{
			hinId =request.getParameter("hinNo");
		}
		mapForDS.put("hinId", hinId);
		mapForDS.put("hospitalId", hospitalId);
		map = opdHandlerService.showPreviousSystemPatientPrescriptions(mapForDS);
		jsp = WINDOW_POPUP_PREV_JSP;
		jsp += ".jsp";
		title = "Previous System Patient Prescriptions";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(WINDOW_POPUP_PREV_JSP, "map", map);


	}

	public ModelAndView printPhysiotherapyReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> parameters = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		int visitId = 0;
		int hinId = 0;
		try {
			if (request.getParameter("visitId") != null
					&& !request.getParameter("visitId").equals("")) {
				visitId = Integer.parseInt(request.getParameter("visitId"));
				parameters.put("visitId", visitId);
			}
			if (request.getParameter("hinId") != null
					&& !request.getParameter("hinId").equals("")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				parameters.put("hinId", hinId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Map<String, Object> connectionMap = opdHandlerService
				.getConnectionForReport();
		HMSUtil.generateReport("opd_physiotherapyReport",
				parameters, (Connection) connectionMap.get("conn"),
				response, getServletContext());
		return null;
	}
	public ModelAndView showUpdateTime(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		 Map<String, Object> map = new HashMap<String, Object>();
		int departmentId = Integer.parseInt(request
				.getParameter("departmentId"));


		try {

			jsp = "updateTimeResponseJsp";
			map.put("contentJsp", jsp);
			map.put("title", title);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);
	}

	public ModelAndView showTreatmentPopUp(
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		String genericname = "";
		String autoHint = "";
		String srNo="";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("genericname") != null) {
				genericname = (request.getParameter("genericname"));
			}
			if (request.getParameter("srNo") != null) {
				srNo = (request.getParameter("srNo"));
			}
			if(genericname!="")
			{
			map.put("autoHint", genericname);
			map.put("srNo", srNo);
			map= opdHandlerService.showTreatment(map);
			}
			} catch (Exception e) {
			e.printStackTrace();
		}
		  // originally jsp = "treatmentJsp";
		   jsp = "treatmentJspNewS";
		  
		 
		   map.put("contentJsp",jsp);
		
			   return new ModelAndView(jsp, "map", map);	   
	}
	public ModelAndView autoCompleteForTreatment(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map= opdHandlerService.showTreatmentPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "treatmentResponseJsp";
		return new ModelAndView(jsp, "map", map);
		
	}
	
	
	public ModelAndView showPatientPhysiotheraypPreviousVisit1(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		/*int deptId = Integer.parseInt(""+session.getAttribute("deptId")); 
			//Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId =0;
		if(request.getParameter("visitId")!=null && request.getParameter("visitId")!=""){
			visitId=Integer.parseInt(request.getParameter("visitId"));
		}
		String flag="";
		if(request.getParameter("flag")!=null &&request.getParameter("flag")!=""){
			flag=request.getParameter("flag");*/
		//}
		//mapForDS.put("flag", flag);
		mapForDS.put("hinId", hinId);
		//mapForDS.put("deptId", deptId);
		//mapForDS.put("visitNo", visitNo);
		//mapForDS.put("visitId", visitId);
		map = opdHandlerService.getPhysiotherapistPatientList1(mapForDS);

	//	map.put("visitNoForJsp", visitNo);
		jsp = PREVIOUS_PHYSIOTHERAPY_LIST_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPatientPhysiotheraypPreviousVisit(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		int deptId = Integer.parseInt(""+session.getAttribute("deptId")); 
			//Integer.parseInt(request.getParameter("deptId"));
		int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		int visitId =0;
		if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
			visitId=Integer.parseInt(request.getParameter("visitId"));
		}
		String flag="";
		if(request.getParameter("flag")!=null && !request.getParameter("flag").equals("")){
			flag=request.getParameter("flag");
		}
		mapForDS.put("flag", flag);
		mapForDS.put("hinId", hinId);
		mapForDS.put("deptId", deptId);
		mapForDS.put("visitNo", visitNo);
		mapForDS.put("visitId", visitId);
		map = opdHandlerService.getPhysiotherapistPatientList(mapForDS);

		map.put("visitNoForJsp", visitNo);
		jsp = PREVIOUS_PHYSIOTHERAPY_LIST_JSP;
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}

	public ModelAndView showPreviPhysiotherapyPatientList(HttpServletRequest request,
			HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		String pFirstName ="";
		String pMiddleName ="";
		String pLastName ="";
		String hinNo="";
		int hinId =0;

		if(request.getParameter(HIN_NO)!=null)
		{
			hinNo = request.getParameter(HIN_NO);
			 mapForDS.put("hinNo", hinNo);
		}
		if(request.getParameter(HIN_ID)!=null)
		{
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			 mapForDS.put("hinId", hinId);
		}
		if(request.getParameter(P_FIRST_NAME)!=null)
		{
			pFirstName = request.getParameter(P_FIRST_NAME);
			 mapForDS.put("pFirstName", pFirstName);
		}
		if(request.getParameter(P_MIDDLE_NAME)!=null)
		{
			pMiddleName = request.getParameter(P_MIDDLE_NAME);
			 mapForDS.put("pMiddleName", pMiddleName);
		}
		if(request.getParameter(P_LAST_NAME)!=null)
		{
			pLastName = request.getParameter(P_LAST_NAME);
			 mapForDS.put("pLastName", pLastName);
		}

		//int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		if (request.getParameter("filter") != null) {
			if(request.getParameter("consultingDoc")!=null)
			{
			 int empId = Integer.parseInt(request.getParameter("consultingDoc"));
		 	 mapForDS.put("empId", empId);
			}
		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}


		String title = request.getParameter("title");
		map = opdHandlerService.getPhysiotherapistPatientList(mapForDS);
 		 
		jsp = OPD_PHYSIOTHERAPY_LIST_JSP;
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}

	
	public ModelAndView showPhysiotherapyPreviousDetails(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		String deptName="";
		int visitId  =0;
		int deptId =0;
		int hinId =0;
		Map<String, Object> mapForDS = new HashMap<String, Object>();
	       List<Visit> visitTokenList = new ArrayList<Visit>();
	       
		if(request.getParameter("visitId")!=null)
		{
			visitId = Integer.parseInt(request.getParameter("visitId"));
			mapForDS.put("visitId", visitId);
		}
		if(session.getAttribute("deptId")!=null)
		{
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
		}
		
		map =opdHandlerService.getPhysiotherapyPreviousDetails(mapForDS);
 	 	deptName = opdHandlerService.getDepartmentNameFromId(deptId);
		jsp = VIEW_PHYSIOTHERAPY_JSP;
		jsp += ".jsp";
		title = "Patient Details";
		map.put("visitId", visitId);
		map.put("deptId", deptId);
		map.put("deptName", deptName);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);

	}
	public ModelAndView showStudentPreviousVisit(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		//int deptId = Integer.parseInt(request.getParameter("deptId"));
		//int visitNo = Integer.parseInt(request.getParameter("visitNo"));
		//int visitId =Integer.parseInt(request.getParameter("visitId"));

		mapForDS.put("hinId", hinId);
		//mapForDS.put("deptId", deptId);
		//mapForDS.put("visitNo", visitNo);
		//mapForDS.put("visitId", visitId);
		map = opdHandlerService.getPreviousStudentVisit(mapForDS);

		//map.put("visitNoForJsp", visitNo);
		jsp = "opd_previousVisitStudent";
		jsp += ".jsp";
		title = "Patient Previous Visit";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView getstudentDetail(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// String serviceNo = "";
		
		String hinNo = "";
		int patientTypeId=0;
		try {
			if (request.getParameter(PATIENT_TYPE_ID) != null
					&& !(request.getParameter(PATIENT_TYPE_ID).equals(""))) {
				patientTypeId =Integer.parseInt(request.getParameter(PATIENT_TYPE_ID));
				detailsMap.put("patientTypeId", patientTypeId);
			}
		
				map = opdHandlerService.getstudentDetail(detailsMap);

				jsp = "responseForStudent";

			/*
			 * else if(flag.equals("hin")){ hinNoList =
			 * opdHandlerService.getHinNoList(serviceNo); map.put("hinNoList",
			 * hinNoList);
			 *
			 * jsp = RESPONSE_FOR_OPD_HIN_NO; }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);

	}
	public ModelAndView getstudentDetail1(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// String serviceNo = "";
		
		String gr_no = "";
		int schoolId=0;
		try {
			if (request.getParameter("schoolId") != null
					&& !(request.getParameter("schoolId").equals(""))) {
				schoolId =Integer.parseInt(request.getParameter("schoolId"));
				detailsMap.put("schoolId", schoolId);
			}
			if (request.getParameter("gr_no") != null
					&& !(request.getParameter("gr_no").equals(""))) {
				gr_no =request.getParameter("gr_no");
				detailsMap.put("gr_no", gr_no);
			}
				map = opdHandlerService.getstudentDetail1(detailsMap);

				jsp = "responseForStudent1";

			/*
			 * else if(flag.equals("hin")){ hinNoList =
			 * opdHandlerService.getHinNoList(serviceNo); map.put("hinNoList",
			 * hinNoList);
			 *
			 * jsp = RESPONSE_FOR_OPD_HIN_NO; }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("schoolId",schoolId);
		return new ModelAndView(jsp, "map", map);

	}
/*
 * Statistical Report By Ujjwal
 * on Dated: 15/04/2013
 */
	public ModelAndView showAboveBelowoneYearJsp(
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "aboveBelowOneyear.jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);	
		return new ModelAndView("index", "map", map);
		
	}
	
	
	public ModelAndView filldoctoreName	(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int deptId=0;
		if(request.getParameter("referredDepartmentId")!=null && !request.getParameter("referredDepartmentId").equals("")){
			deptId=Integer.parseInt(request.getParameter("referredDepartmentId"));
		}
		map=opdHandlerService.filldoctoreName(deptId);
		jsp = "responseforDoc";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView showreferralPatientJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int deptId=0;
		map=opdHandlerService.showreferralPatientJsp(deptId);
		jsp = "referralforPatient.jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);	
		return new ModelAndView("index", "map", map);
		}	
	public ModelAndView	searchPatient(HttpServletRequest request,
			HttpServletResponse response){		
			String hinNo="";
			if(request.getParameter(HIN_NO)!=null && !request.getParameter(HIN_NO).equals("")){
				hinNo=	request.getParameter(HIN_NO);
			}
			map=opdHandlerService.searchPatient(hinNo);
			jsp = "referralforPatientSearch.jsp";
			map.put("contentJsp", jsp);
			map.put("title", title);	
			return new ModelAndView("index", "map", map);
}
	
	public ModelAndView submitReferalPatient(HttpServletRequest request,
			HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int hinId=0;
		String fatherName="";
		String contactNo="";
		Date referredDate=new Date();
		String referTime="";
		String referToTime="";
		String facilityCentre="";
		String Diagnosis="";
		Date admittedDate=new Date();
		String admittedTime="";
		String summary_procedure="";
		String drugAdministered="";
		String investigationDone="";
		String general="";
		String cns="";
		String resp="";
		String cardiac="";
		String others="";
		String info="";
		String personSpoken="";
		String facilityAddIdName="";
		String facilityCntctIdName="";
		
			
		if(request.getParameter(HIN_ID)!=null && !request.getParameter(HIN_ID).equals("0")){
			hinId=Integer.parseInt(request.getParameter(HIN_ID));
			}
		if(request.getParameter("fatherName")!=null && !request.getParameter("fatherName").equals("")){
			fatherName=request.getParameter("fatherName");
			}
		if(request.getParameter("contactNo")!=null && !request.getParameter("contactNo").equals("")){
			contactNo=request.getParameter("contactNo");
			}
			
		if(request.getParameter("referredDate")!=null && !request.getParameter("referredDate").equals("")){
			referredDate=HMSUtil.convertStringTypeDateToDateType(request.getParameter("referredDate"));
			}
		if(request.getParameter("time")!=null && !request.getParameter("time").equals("")){
			referTime=request.getParameter("time");
			}
		if(request.getParameter("toName")!=null && !request.getParameter("toName").equals("")){
			referToTime=request.getParameter("toName");
			}
		if(request.getParameter("facilityIdName")!=null && !request.getParameter("facilityIdName").equals("")){
			facilityCentre=request.getParameter("facilityIdName");
			}
		if(request.getParameter("icd")!=null && !request.getParameter("icd").equals("")){
			Diagnosis=request.getParameter("icd");
			}
		if(request.getParameter("AdmittedOn")!=null && !request.getParameter("AdmittedOn").equals("")){
			admittedDate=HMSUtil.convertStringTypeDateToDateType(request.getParameter("AdmittedOn"));
			}
		if(request.getParameter("admittedtime")!=null && !request.getParameter("admittedtime").equals("")){
			admittedTime=request.getParameter("admittedtime");
			}
		if(request.getParameter("summaryName")!=null && !request.getParameter("summaryName").equals("")){
			summary_procedure=request.getParameter("summaryName");
			}
		if(request.getParameter("drugAdministered")!=null && !request.getParameter("drugAdministered").equals("")){
			drugAdministered=request.getParameter("drugAdministered");
			}
		if(request.getParameter("investigationDone")!=null && !request.getParameter("investigationDone").equals("")){
			investigationDone=request.getParameter("investigationDone");
			}
		if(request.getParameter("general")!=null && !request.getParameter("general").equals("")){
			general=request.getParameter("general");
			}
		if(request.getParameter("cns")!=null && !request.getParameter("cns").equals("")){
			cns=request.getParameter("cns");
			}
		if(request.getParameter("resp")!=null && !request.getParameter("resp").equals("")){
			resp=request.getParameter("resp");
			}
		if(request.getParameter("cardiac")!=null && !request.getParameter("cardiac").equals("")){
			cardiac=request.getParameter("cardiac");
			}
		if(request.getParameter("others")!=null && !request.getParameter("others").equals("")){
			others=request.getParameter("others");
			}
		if(request.getParameter("info")!=null && !request.getParameter("info").equals("")){
			info=request.getParameter("info");
			}
		if(request.getParameter("personSpoken")!=null && !request.getParameter("personSpoken").equals("")){
			personSpoken=request.getParameter("personSpoken");
			}
		if(request.getParameter("facilityCntctIdName")!=null && !request.getParameter("facilityCntctIdName").equals("")){
			facilityCntctIdName=request.getParameter("facilityCntctIdName");
			}
		if(request.getParameter("facilityAddIdName")!=null && !request.getParameter("facilityAddIdName").equals("")){
			facilityAddIdName=request.getParameter("facilityAddIdName");
			}
		String renal="";
		if(request.getParameter("renal")!=null && !request.getParameter("renal").equals("")){
			renal=request.getParameter("renal");
			}
		
		OpPatientReferral opPatientReferral=new OpPatientReferral();
		
		Patient pt=new Patient();
		pt.setId(hinId);
		opPatientReferral.setHin(pt);
		opPatientReferral.setFatherName(fatherName);
		opPatientReferral.setAdmitted_date(admittedDate);
		opPatientReferral.setAdmittedTime(personSpoken);
		opPatientReferral.setCardiac(cardiac);
		opPatientReferral.setCns(cns);
		opPatientReferral.setContactNo(contactNo);
		opPatientReferral.setDiagnosis(Diagnosis);
		opPatientReferral.setFacilityCentre(facilityCentre);
		opPatientReferral.setGeneral(general);
		opPatientReferral.setInformation(info);
		opPatientReferral.setInvestigationDone(investigationDone);
		opPatientReferral.setOthers(others);
		opPatientReferral.setPersonSpokenTo(personSpoken);
		opPatientReferral.setReferredDate(referredDate);
		opPatientReferral.setReferredTime(referTime);
		opPatientReferral.setReferredTo(referToTime);		
		opPatientReferral.setResp(resp);
		opPatientReferral.setSummaryOfProcedure(summary_procedure);
		opPatientReferral.setFacilityAddress(facilityAddIdName);
		opPatientReferral.setFacilityTelephone(facilityCntctIdName);
		opPatientReferral.setRenal(renal);
		map.put("opPatientReferral", opPatientReferral);
		boolean added=opdHandlerService.submitReferalPatient(opPatientReferral);
		if(added==true){
			message="Data Added Successfully";
		}
		
		jsp = "messageForreferralforPatientSearch.jsp";
		map.put("opPatientReferralId", opPatientReferral.getId());
		map.put("contentJsp", jsp);
		map.put("title", title);	
		map.put("message", message);
		return new ModelAndView("index", "map", map);
	}	
	public ModelAndView printBDCertificate(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> parameters = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int opreferralId = 0;
		int dischargeId = 0;
		String bOrD = "";
		try {
			if (request.getParameter("opreferralId") != null) {
				opreferralId = Integer.parseInt(request.getParameter("opreferralId")); 
			}
			
			parameters.put("opreferralId", opreferralId);
			
			detailsMap = opdHandlerService.getConnectionForReport();
			HMSUtil.generateReport("op_patient_referral", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	public ModelAndView	showPatientMedicalCertificate(HttpServletRequest request,
			HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		int deptId=0;
	//	map=opdHandlerService.showreferralPatientJsp(deptId);
		jsp = "patientSearchForMedicalCertificate.jsp";
		map.put("contentJsp", jsp);
		map.put("title", title);	
		return new ModelAndView("index", "map", map);
		}
		public ModelAndView	searchPatientForFitness(HttpServletRequest request,
			HttpServletResponse response){		
			String hinNo="";
			if(request.getParameter(HIN_NO)!=null && !request.getParameter(HIN_NO).equals("")){
				hinNo=	request.getParameter(HIN_NO);
			}
			map=opdHandlerService.searchPatient(hinNo);
			jsp = "fitnessforPatientSearch.jsp";
			map.put("contentJsp", jsp);
			map.put("title", title);	
			return new ModelAndView("index", "map", map);
}
		public ModelAndView	submitPatientForFitness(HttpServletRequest request,
				HttpServletResponse response){	
			int hinId=0;
			String generalPhysical="";
			String systemicExam="";
			String resSystem="";
			String cvs="";
			String pa="";
			String genitoUrinary="";
			String cns="";
			String ans="";	
			String bloodGroup="";
			String haemogram="";
			int hb=0;
			int tlc=0;
			int p=0;
			int l=0;
			int e=0;
			int m=0;
			int b=0;
			String activityOfEye="";
			String colorOfEye="";
			String ohe="";
			String ace="";
			
			if(request.getParameter(HIN_ID)!=null && !request.getParameter(HIN_ID).equals("0")){
				hinId=Integer.parseInt(request.getParameter(HIN_ID));
			}
			if(request.getParameter("generalPhysic")!=null && !request.getParameter("generalPhysic").equals("")){
				generalPhysical=request.getParameter("generalPhysic");
			}
			if(request.getParameter("sysExam")!=null && !request.getParameter("sysExam").equals("")){
				systemicExam=request.getParameter("sysExam");
			}
			if(request.getParameter("resSystem")!=null && !request.getParameter("resSystem").equals("")){
				resSystem=request.getParameter("resSystem");
			}
			if(request.getParameter("CVS")!=null && !request.getParameter("CVS").equals("")){
				cvs=request.getParameter("CVS");
			}
			if(request.getParameter("pa")!=null && !request.getParameter("pa").equals("")){
				pa=request.getParameter("pa");
			}
			if(request.getParameter("gentio")!=null && !request.getParameter("gentio").equals("")){
				genitoUrinary=request.getParameter("gentio");
			}
			if(request.getParameter("cns")!=null && !request.getParameter("cns").equals("")){
				cns=request.getParameter("cns");
			}
			if(request.getParameter("ans")!=null && !request.getParameter("ans").equals("")){
				ans=request.getParameter("ans");
			}
			if(request.getParameter("grp")!=null && !request.getParameter("grp").equals("")){
				bloodGroup=request.getParameter("grp");
			}
			if(request.getParameter("haemo")!=null && !request.getParameter("haemo").equals("")){
				haemogram=request.getParameter("haemo");
			}
			
			if(request.getParameter("tlc")!=null && !request.getParameter("tlc").equals("")){
				tlc=Integer.parseInt(request.getParameter("tlc"));
			}
			if(request.getParameter("hb")!=null && !request.getParameter("hb").equals("")){
				hb=Integer.parseInt(request.getParameter("hb"));
			}
			if(request.getParameter("p")!=null && !request.getParameter("p").equals("")){
				p=Integer.parseInt(request.getParameter("p"));
			}
			if(request.getParameter("l")!=null && !request.getParameter("l").equals("")){
				l=Integer.parseInt(request.getParameter("l"));
			}
			if(request.getParameter("e")!=null && !request.getParameter("e").equals("")){
				e=Integer.parseInt(request.getParameter("e"));
			}
			if(request.getParameter("m")!=null && !request.getParameter("m").equals("")){
				m=Integer.parseInt(request.getParameter("m"));
			}
			if(request.getParameter("b")!=null && !request.getParameter("b").equals("")){
				b=Integer.parseInt(request.getParameter("b"));
			}
			if(request.getParameter("eyeActivity")!=null && !request.getParameter("eyeActivity").equals("")){
				activityOfEye=request.getParameter("eyeActivity");
			}
			if(request.getParameter("Color")!=null && !request.getParameter("Color").equals("")){
				colorOfEye=request.getParameter("Color");
			}
			if(request.getParameter("ohe")!=null && !request.getParameter("ohe").equals("")){
				ohe=request.getParameter("ohe");
			}
			if(request.getParameter("ace")!=null && !request.getParameter("ace").equals("")){
				ace=request.getParameter("ace");
			}
			String hospitalName="";
			if(request.getParameter("hospitalName")!=null && !request.getParameter("hospitalName").equals("")){
				hospitalName=request.getParameter("hospitalName");
			}
			
			PatientFitnessCertificate fitness=new PatientFitnessCertificate();
			fitness.setAns(ans);
			fitness.setBil(b);
			fitness.setBloodGroup(bloodGroup);
			fitness.setCns(cns);
			fitness.setCvs(cvs);
			fitness.setEsno(e);
			fitness.setGeneralPhysicalExam(generalPhysical);
			fitness.setGenitoUrinary(genitoUrinary);
			fitness.setHaemo(haemogram);
			fitness.setHb(hb);
			Patient pat =new Patient();
			pat.setId(hinId);
			fitness.setHin(pat);
			fitness.setLetho(l);
			fitness.setMa(m);
			fitness.setPa(pa);
			fitness.setPoly(p);
			fitness.setResSystem(resSystem);
			fitness.setSystemicExam(systemicExam);
			fitness.setTlc(tlc);
			fitness.setActivityOfVision(activityOfEye);
			fitness.setColorVision(colorOfEye);
			fitness.setOhe(ohe);
			fitness.setAce(ace);
			fitness.setHospitalName(hospitalName);
			map.put("fitness", fitness);
			boolean added=opdHandlerService.submitPatientForFitness(fitness);
			if(added==true){
				message="Data Added Successfully";
			}
			
			
			jsp = "messageForFitenessPatient.jsp";
				map.put("opPatientReferralId", fitness.getId());
				map.put("contentJsp", jsp);
				map.put("title", title);	
				map.put("message", message);
				return new ModelAndView("index", "map", map);
				}
		public ModelAndView printFitenessCertificate(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> detailsMap = new HashMap<String, Object>();
			int opreferralId = 0;
			int dischargeId = 0;
			String bOrD = "";
			try {
				if (request.getParameter("opreferralId") != null) {
					opreferralId = Integer.parseInt(request.getParameter("opreferralId")); 
				}
				
				parameters.put("fitnessId", opreferralId);
				
				detailsMap = opdHandlerService.getConnectionForReport();
				HMSUtil.generateReport("proforma_for_health_checkup", parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());

			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}	
		
		
		
		public ModelAndView  showWaitingforBillingPhysiotherapyPatientList(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> detailsMap = new HashMap<String, Object>();
			map=opdHandlerService.showWaitingforBillingPhysiotherapyPatientList();
			jsp = "waitingForPhysioBilling.jsp";
			
			map.put("contentJsp", jsp);
			map.put("title", title);	
		
			
			return new ModelAndView("index", "map", map);
		}	
		//-- ------------------------------END----------------------------------------------------- --//
		public ModelAndView showSearchJspForJSSK(
				HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "";
			String flag = "";
/*			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
*/			//if (flag.equals("searchDeposit")) {
				jsp = "searchPatientForJSSK" + ".jsp";
			//} else if (flag.equals("searchFinalSettlement")) {
				//jsp = SEARCH_PATIENT_FOR_FINAL_SETTLEMENT_JSP + ".jsp";
			//}
			map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
		}
		public ModelAndView searchPatientForJSSK(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDs = new HashMap<String, Object>();
			Map<String, Object> patientMap = new HashMap<String, Object>();

			String hinNo = "";
			String patientFName = "";
			String patientMName = "";
			String patientLName = "";
			int hinId = 0;
			try {
				if (request.getParameter(HIN_NO) != null
						&& !(request.getParameter(HIN_NO).equals(""))) {
					hinNo = request.getParameter(HIN_NO);
					mapForDs.put("hinNo", hinNo);
				}
				if (request.getParameter(P_FIRST_NAME) != null
						&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
					patientFName = request.getParameter(P_FIRST_NAME);
					mapForDs.put("patientFName", patientFName);
				}
				if (request.getParameter(P_MIDDLE_NAME) != null
						&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
					patientMName = request.getParameter(P_MIDDLE_NAME);
					mapForDs.put("patientMName", patientMName);
				}
				if (request.getParameter(P_LAST_NAME) != null
						&& !(request.getParameter(P_LAST_NAME).equals(""))) {
					patientLName = request.getParameter(P_LAST_NAME);
					mapForDs.put("patientLName", patientLName);
				}
				if (request.getParameter("hinId") != null) {
					hinId = Integer.parseInt(request.getParameter("hinId"));
					mapForDs.put("hinId", hinId);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			HospitalParameters hospitalParameters = new HospitalParameters();

			//map = opdHandlerService.getSystemParamDetails();
			if (map.get("hospitalParameters") != null) {
				hospitalParameters = (HospitalParameters) map
						.get("hospitalParameters");
			}
			int allowAdvForOp = 0;
			if (hospitalParameters != null) {
				if (hospitalParameters.getAllowOpAdvance() != null) {
					allowAdvForOp = hospitalParameters.getAllowOpAdvance();
				}
			}
			String jsp = "";
			patientMap = opdHandlerService
					.getPatientDetailsForJSSK(mapForDs);

			List<Patient> patientList = new ArrayList<Patient>();
			if (patientMap.get("patientDetailsList") != null) {
				patientList = (List<Patient>) patientMap.get("patientDetailsList");
			}
			//
			/*if ((!hinNo.equals("") && patientList.size() > 0) || hinId != 0) {
				if (patientList.get(0).getPatientStatus().equals("Out Patient")
						&& allowAdvForOp == 0) {
					String message = "Advance not allowed for OP Patients.";
					map.put("message", message);
					jsp = SEARCH_PATIENT_FOR_ADVANCE_JSP + ".jsp";
				} else {
					String receiptNo = "";
					receiptNo = opBillingHandlerService
							.generateReceiptNo("display");
					map.put("receiptNo", receiptNo);
					jsp = DEPOSITS_JSP + ".jsp";
				}
			} else {
				jsp = SEARCH_PATIENT_FOR_ADVANCE_JSP + ".jsp";
			}
*/			
			boolean b=false;
			int sexId=0;
			for(Patient pt:patientList){
				sexId=pt.getSex().getId();
				
			}
			if(sexId==2){
				b=true;
			}
			
			
			if(b==true){
			patientMap.put("patientList",patientList);
			
			}
			patientMap.put("b",b);
			jsp="JSSKdeposits.jsp";
			map.put("patientMap", patientMap);
			map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
		}
		
		public ModelAndView searchPatientForMLC(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDs = new HashMap<String, Object>();
			Map<String, Object> patientMap = new HashMap<String, Object>();

			String hinNo = "";
			String patientFName = "";
			String patientMName = "";
			String patientLName = "";
			int hinId = 0;
			try {
				if (request.getParameter(HIN_NO) != null
						&& !(request.getParameter(HIN_NO).equals(""))) {
					hinNo = request.getParameter(HIN_NO);
					mapForDs.put("hinNo", hinNo);
				}
				if (request.getParameter(P_FIRST_NAME) != null
						&& !(request.getParameter(P_FIRST_NAME).equals(""))) {
					patientFName = request.getParameter(P_FIRST_NAME);
					mapForDs.put("patientFName", patientFName);
				}
				if (request.getParameter(P_MIDDLE_NAME) != null
						&& !(request.getParameter(P_MIDDLE_NAME).equals(""))) {
					patientMName = request.getParameter(P_MIDDLE_NAME);
					mapForDs.put("patientMName", patientMName);
				}
				if (request.getParameter(P_LAST_NAME) != null
						&& !(request.getParameter(P_LAST_NAME).equals(""))) {
					patientLName = request.getParameter(P_LAST_NAME);
					mapForDs.put("patientLName", patientLName);
				}
				if (request.getParameter("hinId") != null) {
					hinId = Integer.parseInt(request.getParameter("hinId"));
					mapForDs.put("hinId", hinId);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			HospitalParameters hospitalParameters = new HospitalParameters();

			//map = opdHandlerService.getSystemParamDetails();
			if (map.get("hospitalParameters") != null) {
				hospitalParameters = (HospitalParameters) map
						.get("hospitalParameters");
			}
			int allowAdvForOp = 0;
			if (hospitalParameters != null) {
				if (hospitalParameters.getAllowOpAdvance() != null) {
					allowAdvForOp = hospitalParameters.getAllowOpAdvance();
				}
			}
			String jsp = "";
			patientMap = opdHandlerService
					.searchPatientForMLC(mapForDs);

			List<Patient> patientList = new ArrayList<Patient>();
			if (patientMap.get("patientDetailsList") != null) {
				patientList = (List<Patient>) patientMap.get("patientDetailsList");
			}
		//	
			/*if ((!hinNo.equals("") && patientList.size() > 0) || hinId != 0) {
				if (patientList.get(0).getPatientStatus().equals("Out Patient")
						&& allowAdvForOp == 0) {
					String message = "Advance not allowed for OP Patients.";
					map.put("message", message);
					jsp = SEARCH_PATIENT_FOR_ADVANCE_JSP + ".jsp";
				} else {
					String receiptNo = "";
					receiptNo = opBillingHandlerService
							.generateReceiptNo("display");
					map.put("receiptNo", receiptNo);
					jsp = DEPOSITS_JSP + ".jsp";
				}
			} else {
				jsp = SEARCH_PATIENT_FOR_ADVANCE_JSP + ".jsp";
			}
*/			
			boolean b=false;
			int sexId=0;
			for(Patient pt:patientList){
				sexId=pt.getSex().getId();
				
			}
			if(sexId==2){
				b=true;
			}
			
			
			if(b==true){
			patientMap.put("patientList",patientList);
			
			}
			patientMap.put("b",b);
			jsp="MLCdeposits.jsp";
			map.put("patientMap", patientMap);
			map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
		}		public ModelAndView		updateBills(HttpServletRequest request,
				HttpServletResponse response){
			Map<String,Object>patientMap=new HashMap<String,Object>();
			Map<String,Object>map=new HashMap<String,Object>();
			int inpatientId=0;
			if(request.getParameter(INPATIENT_ID)!=null){
				inpatientId=Integer.parseInt(request.getParameter(INPATIENT_ID));
			}
			boolean updadted=false;
			String message="";
			if(updadted==true){
				message="Updated Successfully!!";
			}else{
				message="Not Updated Successfully!!";
			}
				updadted=opdHandlerService.updateBills(inpatientId);
			jsp="JSSKdeposits.jsp";
			map.put("message", message);
			map.put("patientMap", patientMap);
			map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
		
		}
		public ModelAndView showSearchJspForMLCDiscount(
				HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "";
			String flag = "";
/*			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
*/			//if (flag.equals("searchDeposit")) {
				jsp = "searchPatientForMLCDiscount.jsp";// + ".jsp";
			//} else if (flag.equals("searchFinalSettlement")) {
				//jsp = SEARCH_PATIENT_FOR_FINAL_SETTLEMENT_JSP + ".jsp";
			//}
			map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
		}
		
		public ModelAndView showSnomedCTSearchJsp(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String query = request.getParameter("term");
			Integer code =Integer.parseInt(request.getParameter("code"));
			map.put("code", code);
			if(query!=null){
				map.put("term", query);
				map = opdHandlerService.getSnomedCTDetails(map);
			}
			jsp = "Snomed_Search";
			map.put("contentJsp", jsp);
			return new ModelAndView(jsp, "map", map);
		}
	
	@SuppressWarnings("unchecked")
	public ModelAndView getSnomedCTListForAutoCompleteItem(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			/*try{
			String query = request.getParameter("term");
			//Integer code =Integer.parseInt(request.getParameter("code"));
		   // LOGGER.info("query :"+query);
			JSONArray arrayObj = new JSONArray();
		    query = URLDecoder.decode(query, "UTF-8");
		    ISNOMEDAgent agent = new SNOMEDAgent();
		    Set<Description> conceptList=null;
		    if(code==1){
		        conceptList = agent.search(query, EnumSuffix.DISORDER);
		    }else if(code==2){
		    	conceptList = agent.search(query, EnumSuffix.FINDING);
		    }
		    conceptList = agent.search(query);
		    if(conceptList!=null){
		    	 List<Description>suggestions=new ArrayList<Description>(conceptList);
				    List<String>sugeList=new ArrayList<String>();
				    for(Description des:suggestions){
				    	if(sugeList.size()<=100){
				    	sugeList.add(des.getTerm());
				    	}
				    }
				    Collections.sort(sugeList);
				    map.put("suggestions", sugeList);
		    }	
		   
		    jsp = OPD_RESPONSE_FOR_SNOMEDCT_JSP;
		    map.put("contentJsp", jsp);
			}catch(Exception e){
				e.printStackTrace();
			}*/
			return new ModelAndView(jsp, "map", map);
	}
	
	/*written by Rajendra Kumar: 25-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getNursingScreenJSP(HttpServletRequest request,	HttpServletResponse response) {
		 	HttpSession session = request.getSession();
		    Map<String, Object> map = new HashMap<String, Object>();
		    int visitId =0;
		    int token  =0;
		    int hospitalId=0;
		    Visit visit=null;
		    OpdPatientHistory opdPatientHistory=null;
		    OpdPatientDetails opdPatientDetail=null;
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
			if (session!=null && session.getAttribute(USER_ID) != null) {
				Integer userId = (Integer) session.getAttribute(USER_ID);
				map.put("userId", userId);
			}
			if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
				visitId =Integer.parseInt( request.getParameter("visitId"));
				map.put("visitId", visitId);
			}
			if(request.getParameter("token")!=null && !request.getParameter("token").equals("")){
				String[]tokens=request.getParameter("token").split("/");
				token =Integer.parseInt(tokens[1].trim());
				map.put("token", token);
			}	
			
			map = opdHandlerService.getPatientVisitDetails(map);
			if(map.get("openStatus")!=null && (Boolean)map.get("openStatus"))
			{
					map = opdHandlerService.getWaitingPatientList(map);
					map.put("openMsg", "Record already opened. Please try again after 2 minuts.");
					jsp = "nurse_waiting_List.jsp";
			}else{
			 	List patientDataList = (List) map.get("patientDataList");
			    List<OpdPatientDetails> OpdPatientDetailList = (List) map.get("lastOpdPatientDetails");
			    List<OpdPatientHistory> opdPatientHistories = (List) map.get("lastOpdPatientHistory");
			    if(patientDataList.size()>0){
			    	visit = (Visit) patientDataList.get(0);
			    }
			    if(opdPatientHistories.size()>0 && OpdPatientDetailList.size()>0){
			    	opdPatientDetail=(OpdPatientDetails)OpdPatientDetailList.get(0);
			    	map.put("pulse", opdPatientDetail.getPulse());
			    	map.put("temprature", opdPatientDetail.getTemperature());
			    	if(opdPatientDetail.getBp()!=null && opdPatientDetail.getBp().split("/").length>0){
			    		map.put("systolic", opdPatientDetail.getBp()!=null?opdPatientDetail.getBp().split("/")[0]:"");
				    	map.put("diastolic",  opdPatientDetail.getBp()!=null && !opdPatientDetail.getBp().equals("")?opdPatientDetail.getBp().split("/")[1]:"");
			    	}
			    	map.put("weight", opdPatientDetail.getWeight());
			    	map.put("height", opdPatientDetail.getHeight());
			    	map.put("bmi", opdPatientDetail.getBmi());
			    	
			    	opdPatientHistory = (OpdPatientHistory) opdPatientHistories.get(0);
			    	map.put("presentComplaintHistory", opdPatientHistory.getPresentComplaintHistory());
			    	map.put("historyOfpastIllness", opdPatientHistory.getPastIllnessHistory());
			    	map.put("personalHistory", opdPatientHistory.getPersonalPresentHistory());
			    	map.put("familyHistory", opdPatientHistory.getFamilyPresentHistory());
			    	map.put("medicationHistory", opdPatientHistory.getMadicationHistory());
			    }
			    
			    String uhid="";
				int hin_id=0;
				int departmentId=0;
				String patientName="";
				String bloodGroupValue = "";
				String bloodGroupStatus = "";
				if(visit!=null){
					uhid= visit.getHin().getHinNo();
				    hin_id=visit.getHin().getId();		    		
				   
				    if(visit.getDepartment()!=null){
				    	 departmentId=visit.getDepartment().getId();
				    }
				    if(visit.getHin().getPFirstName()!=null && !visit.getHin().getPFirstName().equals("")){
				    	 patientName=visit.getHin().getPFirstName();
				    }
				    
				    if(visit.getHin().getPMiddleName()!=null && !visit.getHin().getPMiddleName().equals("")){
				    	patientName=patientName+" "+visit.getHin().getPMiddleName();
				    }
				    if(visit.getHin().getPLastName()!=null && !visit.getHin().getPLastName().equals("")){
				    	patientName=patientName+" "+visit.getHin().getPMiddleName();
				    }
				    if(visit.getHin().getBloodGroupValue()!=null && !visit.getHin().getBloodGroupValue().equals("")){
				    	bloodGroupValue=visit.getHin().getBloodGroupValue();
				    }
				    if(visit.getHin().getConfirmedStatus() !=null && !visit.getHin().getConfirmedStatus().equals("")){
				    	bloodGroupStatus=visit.getHin().getConfirmedStatus();
				    }
				    String gender=null;
				    if(visit.getHin().getSex()!=null)
				    gender=visit.getHin().getSex().getAdministrativeSexName();
				    String age=visit.getHin().getAge();
				    //Added by Arbind on 22-04-2017
				    Date dob = null;
				    if(visit.getHin().getDateOfBirth()!=null && !visit.getHin().getDateOfBirth().equals("")){
				    	dob = visit.getHin().getDateOfBirth();
				    }
				    map.put("dob", dob);
				    map.put("uhid", uhid);
				    map.put("hin_id",hin_id);
				    map.put("depaId",departmentId);
				    map.put("patientName", patientName);
				    map.put("gender", gender);
				    map.put("age",age);
				    map.put("bloodGroupValue",bloodGroupValue);
				    map.put("bloodGroupStatus",bloodGroupStatus);
				}
			    map.put("token", token);
			    map.put("visitId", visitId);
			    jsp = "nursing_screen.jsp";
			}
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	
	/*written by Rajendra Kumar: 25-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getObservationWardAdmissionWaitingList(HttpServletRequest request,	HttpServletResponse response) {
			HttpSession session = request.getSession();
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForOBS = new HashMap<String, Object>();
			String patientName="";
			String uhid="";
			String mobileNo="";
			String docName="";
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			mapForOBS.put("hospitalId", hospitalId);
			if (request.getParameter("patientName") != null	&& request.getParameter("patientName") != "") {
				patientName = request.getParameter("patientName");
				mapForOBS.put("patientName", patientName);
			}
			if (request.getParameter("uhid") != null	&& request.getParameter("uhid") != "") {
				uhid = request.getParameter("uhid");
				mapForOBS.put("uhid", uhid);
			}
			if (request.getParameter("mobileno") != null	&& request.getParameter("mobileno") != "") {
				mobileNo = request.getParameter("mobileno");
				mapForOBS.put("mobileno", mobileNo);
			}
			if (request.getParameter("docName") != null	 && request.getParameter("docName") != "") {
				docName = request.getParameter("docName");
				mapForOBS.put("docName", docName);
			}
			map=opdHandlerService.getObservationWardAdmissionWaitingList(mapForOBS);
		    jsp = "observation_ward_admission_waiting_list.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	/*written by Rajendra Kumar: 25-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getObservationDashboard(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Map<String, Object> mapForOBS = new HashMap<String, Object>();
			String patientName="";
			String uhid="";
			String mobileNo="";
			String docName="";
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			mapForOBS.put("hospitalId", hospitalId);
			if (request.getParameter("patientName") != null	&& request.getParameter("patientName") != "") {
				patientName = request.getParameter("patientName");
				mapForOBS.put("patientName", patientName);
			}
			if (request.getParameter("uhid") != null	&& request.getParameter("uhid") != "") {
				uhid = request.getParameter("uhid");
				mapForOBS.put("uhid", uhid);
			}
			if (request.getParameter("mobileno") != null	&& request.getParameter("mobileno") != "") {
				mobileNo = request.getParameter("mobileno");
				mapForOBS.put("mobileno", mobileNo);
			}
			if (request.getParameter("docName") != null	 && request.getParameter("docName") != "") {
				docName = request.getParameter("docName");
				mapForOBS.put("docName", docName);
			}
			mapForOBS.put("admitPatient", true);
			map=opdHandlerService.getObservationWardAdmissionWaitingList(mapForOBS);
			jsp = "observation_dashboard.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	/*written by Rajendra Kumar: 25-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getObservationWard(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Integer opdId=null;
			if (request.getParameter("opdId") != null	 && request.getParameter("opdId") != "") {
				opdId = Integer.parseInt(request.getParameter("opdId"));
				map.put("opdId", opdId);
			}
			HttpSession session = request.getSession();
			if(session.getAttribute(HOSPITAL_ID)!=null){
				int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
			if(session.getAttribute("deptId")!=null){
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			if (request.getParameter("pulseHidden") != null	 && request.getParameter("pulseHidden") != "") {
				map.put("pulseHidden", Integer.parseInt(request.getParameter("pulseHidden")));
			}
			if (request.getParameter("temperatureHidden") != null	 && request.getParameter("temperatureHidden") != "") {
				map.put("temperatureHidden", Float.parseFloat(request.getParameter("temperatureHidden")));
			}
			if (request.getParameter("diastolicHidden") != null	 && request.getParameter("diastolicHidden") != "") {
				map.put("diastolicHidden", Integer.parseInt(request.getParameter("diastolicHidden")));
			}
			if (request.getParameter("systolicHidden") != null	 && request.getParameter("systolicHidden") != "") {
				map.put("systolicHidden", Integer.parseInt(request.getParameter("systolicHidden")));
			}
					
			map=opdHandlerService.getObservationWard(map);
		    jsp = "observation_ward.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	/*written by Rajendra Kumar: 26-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getFutureConsultation(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
		    jsp = "future_consultation.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	/*written by Rajendra Kumar: 27-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getOPClinicalWaitingList(HttpServletRequest request,	HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		
		int tokeNo=0;
		String patientName;
		String uhid;
		int opd_DepartmentId=0;
		int hospitalId=0;
		int searchFlag=0;
		String flag="";
		String fromTempate="opConsultation";
		mapForDS.put("forOPClinnic", true);
		mapForDS.put("fromTempate", fromTempate);
		if(request.getParameter("flag")!=null){
			flag=request.getParameter("flag");
			mapForDS.put("flag",flag);
		}
		if(request.getParameter("searchFlag")!=null){
			searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag",searchFlag);
		}
		
		if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo",tokeNo);
		}
		if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if(request.getParameter("uhid")!=null){
			uhid = request.getParameter("uhid");
			mapForDS.put("uhid", uhid);
			
		}
		if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		
		Integer userId=null;
		if(session.getAttribute(USER_ID)!=null){
			userId = (Integer) session.getAttribute(USER_ID);
			mapForDS.put("userId", userId);
		}
			
		
		
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
			}
		}
		
		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		
		mapForDS.put("opClinicalWaitinList", true);

		
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		String deptName =(String)map.get("deptName");
		// start added by Om tripathi 10/08/2017
				ServletContext context=getServletContext();
				Map contextMaps=null;
				contextMaps =(Map) context.getAttribute("contextMap");
				if(contextMaps!=null && contextMaps.size()>0 && contextMaps.get("patientStatus")!=null && (Boolean)contextMaps.get("patientStatus")==true){
				    if(mapForDS.get("hospitalId").equals(contextMaps.get("hospitalId")) 
				    		&& mapForDS.get("deptId").equals(contextMaps.get("deptId"))){
				    
				    	contextMaps.put("patientStatus", contextMaps.get("patientStatus"));
				    	contextMaps.put("VisitId", contextMaps.get("VisitId"));
				    	contextMaps.put("uhidNum", contextMaps.get("uhidNum"));
				    	context.setAttribute("contextMaps", contextMaps);
				    	map.put("contextMaps",contextMaps);
				    	Map mm=(Map) map.get("contextMaps");
				    }
			    }
		//end Added by Om Tripathi 10/08/2017
		session.setAttribute("deptName", deptName);
		String jsp = "op_clinical_waiting_list.jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("flag", flag);
		return new ModelAndView("index", "map", map);
	}
	@SuppressWarnings("unchecked")
	public ModelAndView showOPClinicwWaitingPatientListJsp(HttpServletRequest request,HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		
		int tokeNo=0;
		String patientName;
		String uhid;
		Integer userId=null;
		int opd_DepartmentId=0;
		int hospitalId=0;
		int searchFlag=0;
		mapForDS.put("forOPClinnic", true);
		if(request.getParameter("searchFlag")!=null){
			searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag",searchFlag);
		}
		if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo",tokeNo);
		}
		if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("") ){
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if(request.getParameter("uhid")!=null){
			uhid = request.getParameter("uhid");
			mapForDS.put("uhid", uhid);
		}
		
		
		if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		
		// added by amit das on 31-05-2017
		if(session.getAttribute(USER_ID)!=null){
			userId = (Integer) session.getAttribute(USER_ID);
			mapForDS.put("userId", userId);
		}

		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
			}
		}
		
		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		mapForDS.put("opClinicalWaitinList", true);
		
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		String deptName =(String)map.get("deptName");
		
		session.setAttribute("deptName", deptName);
		String jsp=null;
		if(searchFlag>0){  //Added By OM Tripathi 4/2/2018
			 jsp = "op_clinical_search_list_new_consult";
		}else{
			 jsp = "op_clinical_waiting_list";
		}
		
		jsp += ".jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("searchFlag", searchFlag);
		return new ModelAndView("index", "map", map);
	}
	/*written by Rajendra Kumar: 27-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getProcedureOrdering(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			map=opdHandlerService.getProcedureOrder(map);
		    jsp = "procedureordering.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	
	/*written by Rajendra Kumar: 27-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getOPNursingTokenDisplay(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
		    jsp = "op_nursing_token_display.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	
	/*written by Rajendra Kumar: 27-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getOPClinicTokenDisplay(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
		    jsp = "op_clinic_token_display.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	
	/*written by Rajendra Kumar: 27-03-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView getOPNursingCareScreenJSP(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			String uhid=request.getParameter("hinNo");
			Integer injAppId=null;
			if (request.getParameter("injAppId") != null) {
				injAppId = Integer.parseInt(request.getParameter("injAppId"));
			}
		    int empId =0;
		    if(session.getAttribute("userId")!=null){
		      empId =(Integer) session.getAttribute("userId");
		      map.put("docId", empId);
		      map.put("userId", empId);
		    }
		   
			Integer departmentId =null;
			if (session.getAttribute("deptId") != null) {
				departmentId = (Integer) session.getAttribute("deptId");
				map.put("deptId", departmentId);
			}
			Integer hospitalId=null;
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
			
			Date date=null;
			if (request.getParameter("opdDate") != null) {
				map.put("opdDate",request.getParameter("opdDate"));
			}
			// treat opdate as appointmentdate
			int visitId=0;
			if (request.getParameter("visitId") != null) {
				map.put("visitId",Integer.parseInt(request.getParameter("visitId")));
			}
			
		
			
			map.put("departmentId",departmentId);
			map.put("hospitalId",hospitalId);
			map.put("hinNo",uhid);
			map.put("injAppId",injAppId);
			map=opdHandlerService.getDrugAndProcedureDetails(map);
		    jsp = "op_nursing_care.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	public ModelAndView getSecondOpinionScreenJSP(HttpServletRequest request,	HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		int visitId=0;
		
		if(null != request.getParameter("visitId"))
		 visitId=Integer.parseInt(request.getParameter("visitId"));
		
		int hinId=Integer.parseInt(request.getParameter("hinNo"));  
		
		String uhidNo=request.getParameter("uhidNo");
		
		session=request.getSession();
		int empId=0;
		 if(session.getAttribute("userId")!=null){
			 empId =(Integer) session.getAttribute("userId");
		 }
		
		Integer departmentId=(Integer)session.getAttribute("deptId");
		map.put("departmentId", departmentId);
		
		int hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
		map.put("hospitalId", hospitalId);
		map.put("hinId", hinId);
		map.put("uhidNo", uhidNo);
		map.put("visitId", visitId);
		map.put("empId", empId);
		
		
		map=opdHandlerService.getSecondOpinion(map);
	    jsp = "second_opinion.jsp";
	    map.put("contentJsp", jsp);
		return new ModelAndView("second_opinion", "map", map);
	}	
	/*written by Rajendra Kumar: 27-03-2015*/
	public ModelAndView showDiagnosisPopUp(HttpServletRequest request,
			HttpServletResponse response) {
			HttpSession session = request.getSession();
			String diagnosisname = "";
			String autoHint = "";
	
			Map<String, Object> map = new HashMap<String, Object>();
			try {
				if (request.getParameter("diagnosisname") != null) {
					diagnosisname = (request.getParameter("diagnosisname"));
				}
				
				if (diagnosisname != "") {
					map.put("autoHint", diagnosisname);
					map = opdHandlerService.showDiagnosis(map);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		jsp = "DiagnosisJsp";
		jsp += ".jsp";
		title = "Patient Clinical Assist";

		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("DiagnosisJsp", "map", map);

	}
	/*Written by rajendra kumar :10-04-2015*/
	@SuppressWarnings("unchecked")
	public ModelAndView savePreConsultationAssessmentDetails(HttpServletRequest request,	HttpServletResponse response) {
		 Box box = HMSUtil.getBox(request);
		 HttpSession session=request.getSession();
		 Map<String, Object> map = new HashMap<String, Object>();
		 ArrayList<Integer> serviceCentreList = new ArrayList<Integer>();
		 Map<Integer, Integer> searchSelectedDeptIdlist = new HashMap<Integer, Integer>();
		 try{
		 int hospitalId=(Integer)request.getSession().getAttribute(HOSPITAL_ID);
		 box.put("hostpitalId", hospitalId);
		 if(session.getAttribute("userId")!=null){
		      int empId =(Integer) session.getAttribute("userId");
		      box.put("docId", empId);
		 }
		 String savedName=box.get("patientname");
		 //Added by Arbind on 09-05-2017
		 if(null !=session.getAttribute("searchSelectedDeptIdlist")){
			searchSelectedDeptIdlist=(Map<Integer, Integer>) session.getAttribute("searchSelectedDeptIdlist");
			for(Map.Entry<Integer, Integer> entry : searchSelectedDeptIdlist.entrySet()) {
				serviceCentreList.add(entry.getKey());
			}
			map.put("serviceCentreList", serviceCentreList);
		}
		box.put("nextSkip", true);
		
		 map=opdHandlerService.savePataientPreConsultationAssessment(box, map);
		 List<Visit>patientList=(List<Visit>)map.get("patientWaitingList");
		 map.put("patientList", patientList);
		 Visit visit=null;
		 if(patientList!=null && patientList.size()>0){
		    visit=patientList.get(0) ;
		    String uhid="";
			int hin_id=0;
			int departmentId=0;
			String patientName="";
			String gender="";
			String age="";
			if(visit!=null)
			{
				uhid= visit.getHin().getHinNo();
			    hin_id=visit.getHin().getId();		    		
			    departmentId=visit.getDepartment().getId();
			    patientName=visit.getHin().getPFirstName();
			    
			    if(visit.getHin().getPMiddleName()!=null && !visit.getHin().getPMiddleName().equals("")){
			    	patientName=patientName+" "+visit.getHin().getPMiddleName();
			    }
			    if(visit.getHin().getPLastName()!=null && !visit.getHin().getPLastName().equals("")){
			    	patientName=patientName+" "+visit.getHin().getPMiddleName();
			    }
			    if(session!=null && session.getAttribute(USER_ID)!=null){
			    	Integer userId=(Integer) session.getAttribute(USER_ID);
			    	 map.put("userId", userId);
			    }
			    
			    if(visit.getHin().getSex()!=null)
			    gender=visit.getHin().getSex().getAdministrativeSexName();
			    age=visit.getHin().getAge();
			    
			    map.put("uhid", uhid);
			    map.put("hin_id",hin_id);
			    map.put("depaId",departmentId);
			    map.put("patientName", patientName);
			    map.put("gender", gender);
			    map.put("age",age);
			    
			    map.put("hospitalId",hospitalId);
			    map.put("visitId",visit.getId());
			    map.put("token",visit.getTokenNo());
			    map.put("lastpatient", false);
			    
			    
			    //previous history and other details of patient as per last visit no
			    OpdPatientHistory opdPatientHistory=null;
			    OpdPatientDetails opdPatientDetail=null;
				map = opdHandlerService.getPatientVisitDetails(map);
			    List patientDataList = (List) map.get("patientDataList");
			    List<OpdPatientDetails> OpdPatientDetailList = (List) map.get("lastOpdPatientDetails");
			    List<OpdPatientHistory> opdPatientHistories = (List) map.get("lastOpdPatientHistory");
			    if(patientDataList.size()>0){
			    	visit = (Visit) patientDataList.get(0);
			    }
			    if(opdPatientHistories.size()>0 && OpdPatientDetailList.size()>0){
			    	opdPatientDetail=(OpdPatientDetails)OpdPatientDetailList.get(0);
			    	map.put("pulse", opdPatientDetail.getPulse());
			    	map.put("temprature", opdPatientDetail.getTemperature());
			    	map.put("systolic", opdPatientDetail.getBp().split("/")[0]);
			    	map.put("distolic", opdPatientDetail.getBp().split("/")[1]);
			    	map.put("weight", opdPatientDetail.getWeight());
			    	map.put("height", opdPatientDetail.getHeight());
			    	map.put("bmi", opdPatientDetail.getBmi());
			    	
			    	opdPatientHistory = (OpdPatientHistory) opdPatientHistories.get(0);
			    	map.put("presentComplaintHistory", opdPatientHistory.getPresentComplaintHistory());
			    	map.put("historyOfpastIllness", opdPatientHistory.getPastIllnessHistory());
			    	map.put("personalHistory", opdPatientHistory.getPersonalPresentHistory());
			    	map.put("familyHistory", opdPatientHistory.getFamilyPresentHistory());
			    	map.put("medicationHistory", opdPatientHistory.getMadicationHistory());
			    }
			}
		 }else{
			 map.put("lastpatient", true);
		 }
		 map.put("savedName", savedName);
		 map.put("assessmentStatus", true);
		 request.setAttribute("savedName", savedName);
		 if(((Boolean)map.get("lastpatient"))){
			 response.sendRedirect("opd?method=showWaitingPatientListJsp&savedName="+savedName);
			 //showWaitingPatientListJsp(request, response);
		 }
		 }catch(Exception e){
			 e.printStackTrace();
		 }
		 jsp = "nursing_screen.jsp";
		 map.put("contentJsp", jsp);
		 return new ModelAndView("index", "map", map);
	}
	public ModelAndView submitPreConsultationAssessmentDetails(HttpServletRequest request,	HttpServletResponse response) {
		 Box box = HMSUtil.getBox(request);
		 Map<String, Object> map = new HashMap<String, Object>();
		 HttpSession session=request.getSession();
		 ArrayList<Integer> serviceCentreList = new ArrayList<Integer>();
		 Map<Integer, Integer> searchSelectedDeptIdlist = new HashMap<Integer, Integer>();
		 try{
		 int hospitalId=(Integer)request.getSession().getAttribute(HOSPITAL_ID);
		 box.put("hostpitalId", hospitalId);
		 String savedName=box.get("patientname");
		 if(session.getAttribute("userId")!=null){
		      int empId =(Integer) session.getAttribute("userId");
		      box.put("docId", empId);
		 }
		//Added by Arbind on 09-05-2017
		 if(null !=session.getAttribute("searchSelectedDeptIdlist")){
			searchSelectedDeptIdlist=(Map<Integer, Integer>) session.getAttribute("searchSelectedDeptIdlist");
			for(Map.Entry<Integer, Integer> entry : searchSelectedDeptIdlist.entrySet()) {
				serviceCentreList.add(entry.getKey());
			}
			map.put("serviceCentreList", serviceCentreList);
		}
		 map=opdHandlerService.savePataientPreConsultationAssessment(box, map);
		 map.put("lastpatient", true);
		 map.put("savedName", savedName);
		 map.put("assessmentStatus", true);
		 }catch(Exception e){
			 e.printStackTrace();
		 }
		 jsp = "preopd_msg.jsp";
		 map.put("contentJsp", jsp);
		 return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView showPopUpPresentComplaint(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String historyEnteredValues = request.getParameter("historyEnteredValues");
		map = opdHandlerService.showPopUpPresentComplaint(dataMap);
		jsp = PRESENT_COMPLAINT_TEMPALTE;
		jsp += ".jsp";
		title = "PresentComplaintTempalte";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("historyEnteredValues", historyEnteredValues);
		return new ModelAndView(PRESENT_COMPLAINT_TEMPALTE, "map", map);
		}
	
	public ModelAndView showPopUpFamilyHistory(HttpServletRequest request,HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		String historyEnteredValues = request.getParameter("historyEnteredValues");
		map = opdHandlerService.showPopUpFamilyHistory(dataMap);
		jsp = FAMILY_HISTORY_TEMPALTE;
		jsp += ".jsp";
		title = "family his story Tempalte";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("historyEnteredValues", historyEnteredValues);
		return new ModelAndView(FAMILY_HISTORY_TEMPALTE, "map", map);
	}
	
	public ModelAndView showPopUpHistoryOfPastIllness(HttpServletRequest request,HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		String historyEnteredValues = request.getParameter("historyEnteredValues");
		map = opdHandlerService.showPopUpHistoryOfPastIllness(dataMap);
		jsp = HISTORY_OF_PAST_ILLNESS_TEMPALTE;
		jsp += ".jsp";
		title = "History of Past Illness";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("historyEnteredValues", historyEnteredValues);
		return new ModelAndView(HISTORY_OF_PAST_ILLNESS_TEMPALTE, "map", map);
	}
	
	public ModelAndView showPopUpPersonalHistory(HttpServletRequest request,HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		String historyEnteredValues = request.getParameter("historyEnteredValues");
		map = opdHandlerService.showPopUpPersonalHistory(dataMap);
		jsp = PERSONAL_HISTORY_TEMPALTE;
		jsp += ".jsp";
		title = "History of Past Illness";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("historyEnteredValues", historyEnteredValues);
		return new ModelAndView(PERSONAL_HISTORY_TEMPALTE, "map", map);
	}
	
	public ModelAndView showPopUpMedicationHistory(HttpServletRequest request,HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		String historyEnteredValues = request.getParameter("historyEnteredValues");
		map = opdHandlerService.showPopUpMedicationHistory(dataMap);
		jsp = MEDICATION_HISTORY_TEMPALTE;
		jsp += ".jsp";
		title = "History of Past Illness";
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("historyEnteredValues", historyEnteredValues);
		if(request.getParameter("flag")!=null && request.getParameter("flag").equalsIgnoreCase("preAneshesia")){
			map.put("anesthesiaFlag", "preAneshesia");
		}
		return new ModelAndView(MEDICATION_HISTORY_TEMPALTE, "map", map);
	}
	
	
	public ModelAndView autoCompleteForSystemDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			dataMap.put("autoHint", autoHint);
			map = opdHandlerService.autoCompleteForDiagnosis(dataMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseForSystemDiagnosis";
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView showPopUpGeneralExamination(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		map = opdHandlerService.showPopUpGeneralExamination(dataMap);
		jsp = GENERAL_EXAM_TEMPLATE;
		jsp += ".jsp";
		title = "generalExamTempalte";
		map.put("contentJsp", jsp);
		map.put("title", title);
		if(request.getParameter("flag")!=null && request.getParameter("flag").equalsIgnoreCase("preAneshesiaDoctorNotes")){
			map.put("preAneshesiaDoctorNotesFlag", "preAneshesiaDoctorNotes");
		}
		return new ModelAndView(GENERAL_EXAM_TEMPLATE, "map", map);
		}
	
	public ModelAndView showPopUpSystemicExamination(HttpServletRequest request,HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		map = opdHandlerService.showPopUpSystemicExamination(dataMap);
		jsp = SYSTEMIC_EXAM_TEMPLATE;
		jsp += ".jsp";
		title = "generalExamTempalte";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(SYSTEMIC_EXAM_TEMPLATE, "map", map);
	}
	
	public ModelAndView showPopUpLocalExamination(HttpServletRequest request,HttpServletResponse response) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		session = request.getSession();
		map = opdHandlerService.showPopUpLocalExamination(dataMap);
		jsp = LOCAL_EXAM_TEMPLATE;
		jsp += ".jsp";
		title = "Local Examination Tempalte";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(SYSTEMIC_EXAM_TEMPLATE, "map", map);
	}
	
	
	 public ModelAndView showMonthlyReport186Jsp(HttpServletRequest request, HttpServletResponse response) {
         Map<String, Object> map = new HashMap<String, Object>();
         Map<String, Object> detailsMap = new HashMap<String, Object>();
         detailsMap = opdHandlerService.getConnectionForReport();
         Map<String, Object> parameters = new HashMap<String, Object>();
         parameters.put("SUBREPORT_DIR",    getServletContext().getRealPath("/Reports/"));
         try {
 
             HMSUtil.generateReport("subReportPHC_1",
                     parameters, (Connection) detailsMap.get("conn"), response,
                     getServletContext());
         } catch (IllegalStateException e) {
             e.printStackTrace();
         }
         return null;
     }
	
	public void submitSecondOpinion(HttpServletRequest request,HttpServletResponse response){
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session=request.getSession();
		
		int visitId=0;
		int hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
		
		String patientDetailsStatus=null;
		if(null != request.getParameter("patientDetailsStatus")){
			patientDetailsStatus=request.getParameter("patientDetailsStatus");
		}else{
			patientDetailsStatus="n";
		}	
		
		if(null != request.getParameter("visitId"))
		 visitId=Integer.parseInt(request.getParameter("visitId"));
		
		int hinId=Integer.parseInt(request.getParameter("hinId"));  
		
		String uhidNo=request.getParameter("uhidNo");
		
		
		String ehr="";
		if(request.getParameter("ehr") !=null ){
			if(request.getParameter("ehr").equalsIgnoreCase("y")){
				ehr=request.getParameter("ehr");
			}
			else{
				ehr="n";
			}
		}
		
		String Investigation="";
		if(request.getParameter("Investigation") !=null ){
			if(request.getParameter("Investigation").equalsIgnoreCase("y")){
				Investigation=request.getParameter("Investigation");
			}
			else{
				Investigation="n";
			}
			
		}
		String prescription="";
		if(request.getParameter("prescription") !=null ){
			if(request.getParameter("prescription").equalsIgnoreCase("y")){
				prescription=request.getParameter("prescription");
			}
			else{
				prescription="n";
			}
			
		}
		
		String casesheet="";
		if(request.getParameter("caseSheet") !=null ){
			if(request.getParameter("caseSheet").equalsIgnoreCase("y")){
				casesheet=request.getParameter("caseSheet");
			}
			else{
				casesheet="n";
			}
			
		}
		
		int secondOpinionDoc=0;
		if(null !=request.getParameter("secondOpinionDoc") && !request.getParameter("secondOpinionDoc").equals("") )
		 secondOpinionDoc=Integer.parseInt(request.getParameter("secondOpinionDoc"));
		
		
		String comments=request.getParameter("comments");
		
		map.put("patientDetailsStatus", patientDetailsStatus);
		map.put("secondOpinionDoc", secondOpinionDoc);
		map.put("comments", comments);
		map.put("hospitalId", hospitalId);
		map.put("ehr", ehr);
		map.put("Investigation", Investigation);
		map.put("prescription", prescription);
		map.put("casesheet", casesheet);
		map.put("hinId", hinId);
		map.put("uhidNo", uhidNo);
		map.put("visitId", visitId);
		map.put("visitId", visitId);
		
		
		map = opdHandlerService.submitSecondOpinion(map);
		String message="";
		Boolean status=false;
		if(map.get("status")!=null){
			status=(Boolean) map.get("status");
			if(status){
				message="Successfully Saved !";
			}else{
				message="Error occured while Saving !";
			}
		}
		
		
		try {
			PrintWriter pw = response.getWriter();
			pw.print(message);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		/*jsp = "second_opinion.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("second_opinion", "map", map);*/
	}
	
	public ModelAndView getDistrictHospital(HttpServletRequest request,HttpServletResponse response){
			Map<String, Object> map = new HashMap<String, Object>();
			int districtId=Integer.parseInt(request.getParameter("districtId"));
			HttpSession session=request.getSession();
			int hospitalTypeId = 0;
			int hospitalId=0;
			if(request.getParameter("hospitalTypeId")!= null){
				hospitalTypeId = Integer.parseInt(request.getParameter("hospitalTypeId")); 
			}
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
			map.put("hospitalTypeId", hospitalTypeId);
			map.put("districtId", districtId);
			map=opdHandlerService.getDistrictHospital(map);
			return new ModelAndView("opd_responseForDistrictHospital","map",map);
		}
	
	public ModelAndView getHospitalDepartment(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		String referType = "";
		String referExternal = "";
		int deptId = 0;
		HttpSession session=request.getSession();
		if(request.getParameter("hospitalId")!=null){
			hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
		}
		if(request.getParameter("referType")!=null){
			referType=request.getParameter("referType");
		}
		
		//Changed by Arbind on 13-03-2017
		/*if(session.getAttribute("deptId")!=null){
			deptId=(Integer)session.getAttribute("deptId");
		}*/
		if(request.getParameter("deptId")!=null){
			deptId=Integer.parseInt(request.getParameter("deptId"));
		}
		map.put("hospitalId", hospitalId);
		map.put("referType", referType);
		map.put("deptId", deptId);
		map=opdHandlerService.getHospitalDepartment(map);
		return new ModelAndView("opd_responseForHospitalDepartment","map",map);
	}
	
	public void getDoctorUnit(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException{
		HttpSession session=request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int hospitalId=0;
		if(request.getParameter("hospitalId")!=null){
			hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
		}
		String appointmentDate=request.getParameter("appointmentDate");
		int departmentId=Integer.parseInt(request.getParameter("departmentId"));
		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map.put("appointmentDate", appointmentDate);
		if(request.getParameter("personalReview")!=null && request.getParameter("personalReview").equalsIgnoreCase("yes")){
			map.put("personalReview", "yes");
			if(session.getAttribute("empId")!=null){
				map.put("doctor",session.getAttribute("empId") );
			}
			
		}
		map=opdHandlerService.getDoctorUnit(map);
		List<HospitalDoctorUnitM> unitList=(List<HospitalDoctorUnitM>) map.get("unitList");
		PrintWriter out=response.getWriter();
		
		if(request.getParameter("personalReview")!=null && request.getParameter("personalReview").equalsIgnoreCase("yes")){
			Map<String,String> unitMap=new HashMap<String,String>();
			//List<String> units=new ArrayList<String>();
			String unitStr="";
			for(HospitalDoctorUnitM unit:unitList){
				unitStr=unit.getId()+":"+unit.getUnitCode();
			}
			unitMap.put("unit", unitStr);
			if(map.get("message")!=null){
				unitMap.put("message",String.valueOf(map.get("message")));
			}
			 Gson gsonObj = new Gson();
			 String jsonStr = gsonObj.toJson(unitMap);
			 out.print(jsonStr);
		}else{
			List<String> list=new ArrayList<String>();
			for(HospitalDoctorUnitM unit:unitList){
				list.add(unit.getId()+":"+unit.getUnitCode());
			}
			out.print(list);
		}
		
	}
	
	public void getUnitDoctors(HttpServletRequest request,HttpServletResponse response) throws IOException,ServletException{
		String unitId=request.getParameter("unitId");
		List<HospitalDoctorUnitT> doctorList=(List<HospitalDoctorUnitT>) opdHandlerService.getUnitDoctors(unitId);
		List<String> list=new ArrayList<String>();
		for(HospitalDoctorUnitT doctor:doctorList){
			list.add(doctor.getEmployee().getId()+":"+doctor.getEmployee().getEmployeeName());
		}
		PrintWriter out=response.getWriter();
		out.print(list);
	}
	
	public ModelAndView getDoctorDepartment(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		
		int hospitalId=0;
		if(request.getParameter("hospitalId")!=null){
			hospitalId=Integer.parseInt(request.getParameter("hospitalId"));
		}
		int departmentId=Integer.parseInt(request.getParameter("departmentId"));
		map.put("departmentId", departmentId);
		map.put("hospitalId", hospitalId);
		map=opdHandlerService.getDoctorDepartment(map);
		return new ModelAndView("opd_responseForDoctorDepartment","map",map);
	}
	public ModelAndView getPatientDetails(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		int hinId=Integer.parseInt(request.getParameter("hinId"));
		map.put("visitId", hinId);
		map=opdHandlerService.getPatientDetails(map);
		jsp="patientDetail";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp,"map",map);
	}
	public ModelAndView getANCSummary(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		Box box=HMSUtil.getBox(request);
		int hinId=Integer.parseInt(request.getParameter("hinId"));
		box.put("hinId", hinId);
		map=opdHandlerService.getANCSummary(box);
		jsp="ancSummary";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp,"map",map);
	}
	
	public ModelAndView submitDifferentialDiagnosis(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		String parameterValue="";
		String diagnosisId="";
		try {
			if (request.getParameter("paraVal") != null) {
				parameterValue=request.getParameter("paraVal");
			}
			if (request.getParameter("diagnosisId") != null) {
				diagnosisId=request.getParameter("diagnosisId");
				
			}
			String arr[]=parameterValue.split("=");
			String diagnosisIdArr[]=diagnosisId.split("=");
			
			map = opdHandlerService.submitDifferentialDiagnosis(diagnosisIdArr);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "responseDifferentialDiagnosis";
		return new ModelAndView(jsp, "map", map);

	}
	
	public ModelAndView autoCompleteForDiagnosis(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			map.put("autoHint", autoHint);
			map = opdHandlerService.showDiagnosisPopUp(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "DiagnosisResponseJsp";
		return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView getPatientVitalTrends(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			int hinId=0;
			Long memberId=0l;
			if (request.getParameter("hinId") != null) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			map.put("hinId", hinId);
			if (request.getParameter("memberId") != null) {
				memberId = Long.parseLong(request.getParameter("memberId"));
			}
			map.put("memberId", memberId);
			map = opdHandlerService.getPatientVitalTrends(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("opd_responseForVitalTrends", "map", map);
	}
	public ModelAndView getPayward(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		String flag=request.getParameter("flag");
		int hospitalId=(Integer)request.getSession().getAttribute(HOSPITAL_ID);
		map.put("hospitalId", hospitalId);
		map.put("flag", flag);
		map=opdHandlerService.getPayward(map);
		return new ModelAndView("opd_responseForPayward","map",map);
	}
	public ModelAndView opdPatientObservationStatus(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try{
		HttpSession session = request.getSession();
		Integer opdId=null;
		if (request.getParameter("opdId") != null	|| request.getParameter("opdId") != "") {
			opdId = Integer.parseInt(request.getParameter("opdId"));
			map.put("opdId",opdId);
		}
		map=opdHandlerService.opdPatientObservationStatus(map);
		
		Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
		map.put("hospitalId", hospitalId);
		map=opdHandlerService.getObservationWardAdmissionWaitingList(map);
		}catch(Exception e){
			e.printStackTrace();
		}
	    jsp = "observation_ward_admission_waiting_list.jsp";
	    map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView getOPNursingCareWaitingList(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			HttpSession session = request.getSession();
			String [] departmentIdlist = {"0"};
			ArrayList<Integer> serviceCentreList = new ArrayList<Integer>();
			Map<Integer, Integer> searchSelectedDeptIdlist = new HashMap<Integer, Integer>();
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
			if(session.getAttribute("deptId")!=null){
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			Date FromDateId=new Date();
			if (request.getParameter("FromDateId") != null	|| request.getParameter("FromDateId") != "") {
				 FromDateId = HMSUtil.convertStringTypeDateToDateType(request.getParameter("FromDateId"));
				map.put("FromDateId",FromDateId);
			}
			Date ToDateId=new Date();
			if (request.getParameter("ToDateId") != null	|| request.getParameter("ToDateId") != "") {
				ToDateId = HMSUtil.convertStringTypeDateToDateType(request.getParameter("ToDateId"));
				map.put("ToDateId",ToDateId);
			}
			
			//Changed by Arbind on 17-05-2017
			/*int opd_DepartmentId=0;
			if(request.getParameter("opd_Department")!=null && !request.getParameter("opd_Department").equals("")){
				opd_DepartmentId = Integer.parseInt(request.getParameter("opd_Department"));
				map.put("opd_Department",opd_DepartmentId);
			}*/
			if(request.getParameter("searchDept")!=null){
				if(null != session.getAttribute("searchSelectedDeptIdlist")) {
					session.removeAttribute("searchSelectedDeptIdlist");
				}
				if(request.getParameterValues("opd_Department")!=null && !request.getParameterValues("opd_Department").equals("")) {
					departmentIdlist = request.getParameterValues("opd_Department");
					for(int i = 0 ; i< departmentIdlist.length ; i++) {
						serviceCentreList.add(new Integer(departmentIdlist[i]));
						searchSelectedDeptIdlist.put(Integer.parseInt(departmentIdlist[i]),Integer.parseInt( departmentIdlist[i]));
					}
					session.setAttribute("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
					map.put("serviceCentreList", serviceCentreList);
				}
			} else {
				if(null !=session.getAttribute("searchSelectedDeptIdlist")){
					searchSelectedDeptIdlist=(Map<Integer, Integer>) session.getAttribute("searchSelectedDeptIdlist");
					for(Map.Entry<Integer, Integer> entry : searchSelectedDeptIdlist.entrySet()) {
						serviceCentreList.add(entry.getKey());
					}
				}
				map.put("serviceCentreList", serviceCentreList);
			}

			map=opdHandlerService.getOPNursingCareWaitingList(map);
			//map.put("searchDeptId",opd_DepartmentId);
			map.put("searchDeptIdlist", serviceCentreList);
			map.put("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
			
			}
		catch(Exception e){
				e.printStackTrace();
			}
		    jsp = "op_nursingcare_waiting_list.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView submitPrescriptionTamplate(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			
			session=request.getSession();
			Integer totalItem=Integer.parseInt(request.getParameter("total"));
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			Integer userId=(Integer) session.getAttribute(USER_ID);
			Integer deptId=(Integer) session.getAttribute(DEPT_ID);
			HttpSession session = request.getSession();
			Box box=HMSUtil.getBox(request);
			box.put(HOSPITAL_ID, hospitalId);
			box.put(USER_ID, userId);
			box.put(DEPT_ID, deptId);
			box.put("totalItem", totalItem);
			map.put("hospitalId", hospitalId);
			
			map=opdHandlerService.submitPrescriptionTamplate(box);
			}
		catch(Exception e){
				e.printStackTrace();
			}
		    jsp = "opdtreatmentTemplate";
		    map.put("contentJsp", jsp);
			return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView submitInvestigationTamplate(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			
			session=request.getSession();
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			Integer userId=(Integer) session.getAttribute(USER_ID);
			Integer deptId=(Integer) session.getAttribute(DEPT_ID);
			HttpSession session = request.getSession();
			Box box=HMSUtil.getBox(request);
			box.put(HOSPITAL_ID, hospitalId);
			box.put(USER_ID, userId);
			box.put(DEPT_ID, deptId);
			
			
			
			map.put("hospitalId", hospitalId);
			
			map=opdHandlerService.submitInvestigationTamplate(box);
			}
		catch(Exception e){
				e.printStackTrace();
			}
		    jsp = "opdtreatmentInvestigation";
		    map.put("contentJsp", jsp);
			return new ModelAndView(jsp, "map", map);
	}
	
	@SuppressWarnings("unused")
	public ModelAndView getNursingCareProcedureAutoList(HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";
		Integer minor_major=null;
		int departmentId=0;
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			 if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			if (request.getParameter("minor_major") != null) {
				minor_major=Integer.parseInt(request.getParameter("minor_major"));
				map.put("minor_major", minor_major);
			}
			if (session.getAttribute("deptId") != null) {
				departmentId = (Integer) session.getAttribute("deptId");
				map.put("departmentId", departmentId);
			}
			map.put("autoHint", autoHint);
			map = opdHandlerService.getNursingCareProcedureAutoList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForNursingCare";
       return new ModelAndView(jsp, "map", map);
	 }
	public void submitProcedureOrder(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			session=request.getSession();
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			Integer userId=(Integer) session.getAttribute(USER_ID);
			Integer deptId=(Integer) session.getAttribute(DEPT_ID);
			HttpSession session = request.getSession();
			Box box=HMSUtil.getBox(request);
			/*box.put(HOSPITAL_ID, hospitalId);
			box.put(USER_ID, userId);
			box.put(DEPT_ID, deptId);
			map.put("hospitalId", hospitalId);*/
			
			List<Integer> procedureTypes = new ArrayList<Integer>();
			List<String> procedureCode = new ArrayList<String>();
			List<Integer> frequencyList = new ArrayList<Integer>();
			List<Integer> noOfDaysList = new ArrayList<Integer>();
			List<String> remarks = new ArrayList<String>();
			List<Integer> alerts = new ArrayList<Integer>();

			int hdb = 1;
			if (Integer.parseInt(request.getParameter("hdb")) != 1) {
				hdb = Integer.parseInt(request.getParameter("hdb"));
			}
			String[] pvmsArr = new String[hdb];
			
			int j = 1;
			for (int i = 0; i <hdb; i++) {
				if (!request.getParameter("procedureName" + j).equals("")) {
					String nomenclature = request.getParameter("procedureName" + j);
					int index1 = nomenclature.lastIndexOf("[");
					int index2 = nomenclature.lastIndexOf("]");
					index1++;
					pvmsArr[i] = nomenclature.substring(index1,	index2);
					
					
					int procedureType=0;
			 		if(request.getParameter("roceduretype"+ j)!=null && !request.getParameter("roceduretype"+ j).equals("")){
			 			procedureType = Integer.parseInt(request.getParameter("roceduretype"+ j));
			 		}
					
					int frequencyId=0;
			 		if(request.getParameter("frequency"+ j)!=null && !request.getParameter("frequency"+ j).equals("")){
			 			frequencyId = Integer.parseInt(request.getParameter("frequency"+ j));
			 		}
							 		
			 		int noOfDay=0;
			 		if(request.getParameter("noOfDays"+ j)!=null && !request.getParameter("noOfDays"+ j).equals("")){
			 			noOfDay = Integer.parseInt(request.getParameter("noOfDays"+ j));
			 		}
			 		String remark="";
			 		if(request.getParameter("remark" + j)!=null && !request.getParameter("remark" + j).equals("")){
			 			remark = request.getParameter("remark" + j);
			 		}
			 		int alert=0;
			 		if(request.getParameter("alert" + j)!=null && !request.getParameter("alert" + j).equals("")){
			 			if(request.getParameter("alert" + j).equals("on"))
			 			alert=1;
			 			else
			 			alert=2;	
			 		}
			 		
			 		procedureCode.add(pvmsArr[i]);
			 		procedureTypes.add(procedureType);
					frequencyList.add(frequencyId);
					noOfDaysList.add(noOfDay);
					remarks.add(remark);
					alerts.add(alert);
				}
				j++;
			}
			map.put("procedureTypes", procedureTypes);
			map.put("procedureCode", procedureCode);
			map.put("frequencyList", frequencyList);
			map.put("noOfDaysList", noOfDaysList);
			map.put("remarks", remarks);
			map.put("alerts", alerts);
			
			map=opdHandlerService.submitProcedureOrder(map);
			response.sendRedirect("opd?method=getOPNursingCareWaitingList");
			}
		catch(Exception e){
				e.printStackTrace();
			}
	}
	public ModelAndView getPrescriptionTemplateOP(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		Box box=HMSUtil.getBox(request);
		String departmentCode =null;
		String opdType = box.get("opdType");
		try{
			session=request.getSession();
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			Integer userId=(Integer) session.getAttribute(USER_ID);
			Integer deptId=(Integer) session.getAttribute(DEPT_ID);
			HttpSession session = request.getSession();
			box.put(HOSPITAL_ID, hospitalId);
			box.put(USER_ID, userId);
			box.put(DEPT_ID, deptId);
			map.put("hospitalId", hospitalId);
			List<OpdTemplateTreatment> templateList=new ArrayList<OpdTemplateTreatment>();
			List<OpdTemplateTreatment>templateTreatments=new ArrayList<OpdTemplateTreatment>();
			Map<Integer, Boolean> presMap = new HashMap<Integer, Boolean>();
			map=opdHandlerService.getPrescriptionTemplate(box);
			if(map.get("template")!=null){
				templateList=(List<OpdTemplateTreatment>)map.get("template");
			}
			Map<String, Object> preMap=opdHandlerService.getTodayOtherPrescription(box.getInt("hinId"),box.getInt("visitId"));
			if(preMap!=null){
				List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
				if(preMap.get("ppdList")!=null){
					ppdList=(List<PatientPrescriptionDetails>)preMap.get("ppdList");
				}
				map.put("ppdList", ppdList);
				for(PatientPrescriptionDetails pres:ppdList){
					presMap.put(pres.getItem().getId(), true);
				}
				for(OpdTemplateTreatment temp:templateList){					
					if(presMap.get(temp.getItem().getId())!=null && presMap.get(temp.getItem().getId())==true){						
					}else{
						templateTreatments.add(temp);
					}
				}
				map.put("template", templateTreatments);
				departmentCode = box.get("departmentCode");
				map.put("departmentCode", box.get("departmentCode"));
			}
			}
		catch(Exception e){
				e.printStackTrace();
			}
		
		if(departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeGeneralMedicine")) || departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeOrthopadics")) || departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodePsychiatry")) || departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeENT")) || (departmentCode.equals(HMSUtil.getValuesFromPropertiesFile("adt.properties", "deptCodeDermatology"))) || opdType.equalsIgnoreCase("LP") ){
			jsp = "opd_responseForPrescriptionMedicine";
		}
		else if(opdType!=null && (opdType.equalsIgnoreCase("opdLite") || opdType.equalsIgnoreCase("opdDetail"))){
		    jsp = "opdLite_responseForPrescriptionTemplate";
		}else{
			jsp = "opd_responseForPrescriptionTemplate";
		}
		    map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView getPrescriptionTemplateTab(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		try{
			session=request.getSession();
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			Integer userId=(Integer) session.getAttribute(USER_ID);
			Integer deptId=(Integer) session.getAttribute(DEPT_ID);
			HttpSession session = request.getSession();
			Box box=HMSUtil.getBox(request);
			box.put(USER_ID, userId);
			box.put(DEPT_ID, deptId);
			box.put("hospitalId", hospitalId);
			map.put("hospitalId", hospitalId);
			List<OpdTemplateTreatment> templateList=new ArrayList<OpdTemplateTreatment>();
			List<OpdTemplateTreatment>templateTreatments=new ArrayList<OpdTemplateTreatment>();
			Map<Integer, Boolean> presMap = new HashMap<Integer, Boolean>();
			map=opdHandlerService.getPrescriptionTemplate(box);
			if(map.get("template")!=null){
				templateList=(List<OpdTemplateTreatment>)map.get("template");
			}
			Map<String, Object> preMap=opdHandlerService.getTodayOtherPrescription(box.getInt("hinId"),box.getInt("visitId"));
			if(preMap!=null){
				List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
				if(preMap.get("ppdList")!=null){
					ppdList=(List<PatientPrescriptionDetails>)preMap.get("ppdList");
				}
				map.put("ppdList", ppdList);

                for(PatientPrescriptionDetails pres:ppdList){
					presMap.put(pres.getItem().getId(), true);
				}
				for(OpdTemplateTreatment temp:templateList){					
					if(presMap.get(temp.getItem().getId())!=null && presMap.get(temp.getItem().getId())==true){						
					}else{
						templateTreatments.add(temp);
					}
				}
				map.put("template", templateTreatments);
			}
			}
		catch(Exception e){
				e.printStackTrace();
			}
		    jsp = "opd_responseForPrescriptionTemplateTab";
		    map.put("contentJsp", jsp);
			return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView getLabInvestigationTemplate(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		String opdType=null;
		try{
			HttpSession session = request.getSession();
			Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
			Integer userId=(Integer) session.getAttribute(USER_ID);
			Integer deptId=(Integer) session.getAttribute(DEPT_ID);
			Box box=HMSUtil.getBox(request);
			opdType = box.get("opdType");
			box.put(HOSPITAL_ID, hospitalId);
			box.put(USER_ID, userId);
			box.put(DEPT_ID, deptId);
			map.put("hospitalId", hospitalId);
			map=opdHandlerService.getLabInvestigationTemplate(box);
			map.put("hinId", Integer.parseInt(box.get("hinId")));
			//map.put("departmentCode", box.get("departmentCode"));
			}
			catch(Exception e){
				e.printStackTrace();
			}
	
			if(opdType!=null && (opdType.equalsIgnoreCase("opdLite") || opdType.equalsIgnoreCase("opdDetail")))
				jsp = "opdLite_responseForLabInvestigationTemplate";
			else if(opdType!=null && opdType.equalsIgnoreCase("LP")){
				jsp= "opdLP_responseForLabInvestigationTemplate";
			}
			else
				jsp = "opd_responseForLabInvestigationTemplate";
		    map.put("contentJsp", jsp);
			return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView showDiseaseFeatures(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		map = opdHandlerService.showDiseaseFeatures(box);
		jsp = "diseaseFeaturesPopup";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);

	}
	public ModelAndView snomedTemplatesJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		String[]presentComplain=request.getParameterValues("presentComplain");
		String[]pastIllness=request.getParameterValues("pastIllness");
		String[]personalHistory=request.getParameterValues("personalHistory");
		String[]familyHistory=request.getParameterValues("familyHistory");
		String[]medicationhistory=request.getParameterValues("medicationhistory");
		String[]systemic=request.getParameterValues("systemic");
		String[]general=request.getParameterValues("general");
		
		map.put("presentComplain",presentComplain);
		map.put("pastIllness",pastIllness);
		map.put("personalHistory",personalHistory);
		map.put("familyHistory",familyHistory);
		map.put("medicationhistory",medicationhistory);
		map.put("systemic",systemic);
		map.put("general",general);
		
		map = opdHandlerService.submitSnomedTemplates(map);
		if(map.get("flag")!=null && ((Boolean)map.get("flag"))){
			map.put("msg", "New Templates created successfully");
		}else{
			map.put("msg", "Some error occured! Try again.");
		}
		jsp = "snomed_templates.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);

	}
	//Satish "Upload Images"
	public ModelAndView showDisplayImagesJsp(HttpServletRequest request,HttpServletResponse response) {
				Map<String, Object> map = new HashMap<String, Object>();
				Map<String, Object> mapForDS = new HashMap<String, Object>();
				HttpSession session = request.getSession();
				
				int deptId=0; 
				int hospitalId=0;
				
				
				if (session.getAttribute("hospitalId") != null) {
					hospitalId = (Integer)session.getAttribute("hospitalId");
					mapForDS.put("hospitalId", hospitalId);	
				}
				 if(request.getParameter("deptId")!=null){
					 deptId = Integer.parseInt(request.getParameter("deptId"));
				 	mapForDS.put("deptId", deptId);
				}
				 map = opdHandlerService.showDisplayImagesJsp(mapForDS);
				String jsp = "displayImagesForAdvertis.jsp";
				
				
				map.put("contentJsp", jsp);			
				return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView submitImagesList(HttpServletRequest request,HttpServletResponse response) throws IOException{
		
		Map<String, Object> map = new HashMap<String, Object>();
		 Map<String, Object> details = new HashMap<String, Object>();
		 
		HttpSession session = request.getSession();
		
		 MultipartFormDataRequest mrequest = null;
	       if (MultipartFormDataRequest.isMultipartFormData(request))
	          {
	               try
	               {
	                   mrequest = new MultipartFormDataRequest(request);
	               }
	               catch (Exception e)
	               {
	                   e.printStackTrace();
	               }   
	          }
	
    	String from_date=mrequest.getParameter(EFFECTIVE_DATE_FROM);
    	String to_date = mrequest.getParameter(EFFECTIVE_DATE_TO);
		
		int hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
		int uploadHosId=Integer.parseInt(mrequest.getParameter("hospitalIdd"));
		int deprtId=Integer.parseInt(mrequest.getParameter("deptNameId"));
		
		Box box=HMSUtil.getBox(mrequest);
		box.put(HOSPITAL_ID, hospitalId);
		box.put("deprtId", deprtId);
		
		 String strOSName = System.getProperty("os.name");

			String rootPath = System.getProperty("catalina.home");
			String folderPath=rootPath+File.separator +"Image" + File.separator + uploadHosId+File.separator+deprtId;
       File dir = new File(rootPath+File.separator +"Image" + File.separator + uploadHosId+File.separator+deprtId);
		
     
      
       String videoimagePath="";
       String imagePath="";
       String imageFilename="";
       String imageFileExtension="";
       String videoFilename="";
       String videoFileExtension="";
      
       if(request.getParameter("imageNmae")!=null){
    	   imageFilename= (String)request.getParameter("imageNmae");
         	 details.put("imageuploadFrom", (String)request.getParameter("imageNmae"));
          }
       if(mrequest.getParameter("imageNmae")!=null){
    	   imageFilename= (String)mrequest.getParameter("imageNmae");
         	 details.put("imageuploadFrom", (String)mrequest.getParameter("imageNmae"));
          }
       
       if(mrequest.getParameter("imageNmae1")!=null){
    	   videoFilename= (String)mrequest.getParameter("imageNmae1");
         	 details.put("videoouploadFrom", (String)mrequest.getParameter("imageNmae1"));
          }
       String size="600097152";
       Long fileSizeLimit =Long.valueOf(size)  ;
       UploadFile file=null;
         if(strOSName != null)
         {
             if(strOSName.toLowerCase().indexOf("windows") != -1)
              {
                 if (!dir.exists()){
                    	dir.mkdirs();
                    }
                       List fileUploadedList = null;    
                       imagePath=folderPath+File.separator+imageFilename;
                        details.put("filename", imageFilename);
                        StringTokenizer strToken=new StringTokenizer(imageFilename,".");
                       // Long fileSizeLimit = RequestConstants.MAX_FILE_SIZE;
                       
                        imageFilename=strToken.nextToken();
                        imageFileExtension=strToken.nextToken();
                        String whiteList = "*."+imageFileExtension;             
                        fileUploadedList = HMSUtil.opUploadFileMaintenance(mrequest,folderPath, whiteList,fileSizeLimit,imageFilename);
                         
                          
                        details.put("videoFilename", videoFilename);
                        videoimagePath=folderPath+File.separator+videoFilename; 
                        StringTokenizer strToken1=new StringTokenizer(videoFilename,".");
                      
                        videoFilename=strToken1.nextToken();
                        videoFileExtension=strToken1.nextToken();
                        String whiteList1 = "*."+videoFileExtension;             
                        fileUploadedList = HMSUtil.videoUploadFileMaintenance(mrequest,folderPath, whiteList1,fileSizeLimit,videoFilename);
                        
                         }         
                     }
                     
                  if(strOSName.toLowerCase().indexOf("unix") != -1 || strOSName.indexOf("nix") >= 0 || strOSName.indexOf("nux") >= 0 || strOSName.indexOf("aix") > 0)
                         
                 {
                	 Path pathToFile1 = Paths.get(rootPath);
                	 Path pathToFile = Paths.get(folderPath);
           
                     //using PosixFilePermission to set file permissions 777
                     Set<PosixFilePermission> perms = new HashSet<PosixFilePermission>();
                     //add owners permission
                     perms.add(PosixFilePermission.OWNER_READ);
                     perms.add(PosixFilePermission.OWNER_WRITE);
                     perms.add(PosixFilePermission.OWNER_EXECUTE);
                     //add group permissions
                     perms.add(PosixFilePermission.GROUP_READ);
                     perms.add(PosixFilePermission.GROUP_WRITE);
                     perms.add(PosixFilePermission.GROUP_EXECUTE);
                     //add others permissions
                     perms.add(PosixFilePermission.OTHERS_READ);
                     perms.add(PosixFilePermission.OTHERS_WRITE);
                     perms.add(PosixFilePermission.OTHERS_EXECUTE);
                      
                     Files.setPosixFilePermissions(pathToFile1, perms);
                	
                	 if (!Files.exists(pathToFile)){
                		 Files.createDirectories(pathToFile);
                		 Files.setPosixFilePermissions(pathToFile, perms);
                	 }
                	 List<Object> fileUploadedList   = null; 
                	 if(null != imageFilename && !imageFilename.equalsIgnoreCase("")){
                	 imagePath=folderPath+File.separator+imageFilename; 
                     details.put("filename", imageFilename);
                     StringTokenizer strToken=new StringTokenizer(imageFilename,".");
                  
                     imageFilename=strToken.nextToken();
                     imageFileExtension=strToken.nextToken();
                     String whiteList = "*."+imageFileExtension;             
                     fileUploadedList = HMSUtil.opUploadFileMaintenance(mrequest,folderPath, whiteList,fileSizeLimit,imageFilename);
                	 }
                	 if(null != videoFilename && !videoFilename.equalsIgnoreCase("")){
                     videoimagePath=folderPath+File.separator+videoFilename;  
                     details.put("videoFilename", videoFilename);
                     StringTokenizer strToken1=new StringTokenizer(videoFilename,".");
                   
                     videoFilename=strToken1.nextToken();
                     videoFileExtension=strToken1.nextToken();
                     String whiteList1 = "*."+videoFileExtension;             
                     fileUploadedList = HMSUtil.videoUploadFileMaintenance(mrequest,folderPath, whiteList1,fileSizeLimit,videoFilename);
                     //videoimagePath=folderPath+File.separator+videoFilename;  
                	 }
                 }
          
          
          
			//map.put("image",file.getData());
			//map.put("video",buffer1);
			map.put("imagePath", imagePath);
			map.put("videoimagePath", videoimagePath);
			
			map.put("hospitalId", uploadHosId);
			map.put("deprtId", deprtId);
			map.put("from_date", from_date);
			map.put("to_date", to_date);
			map.put("imageContentType", imageFileExtension);
			map.put("fileContentType", videoFileExtension);
			map=opdHandlerService.submitImagesList(map,box);
			
		    jsp = "displayImagesForAdvertis.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
	}
	private void appendFile(InputStream in, File destFile) {
		final int BUFFER_SIZE=    1024 * 1024 * 50; 
	
		OutputStream out = null;
		try {
			if (destFile.exists()) {
				out = new BufferedOutputStream(new FileOutputStream(destFile, true), BUFFER_SIZE); 
			} else {
				out = new BufferedOutputStream(new FileOutputStream(destFile),BUFFER_SIZE);
			}
			in = new BufferedInputStream(in, BUFFER_SIZE);
			
			int len = 0;
			byte[] buffer = new byte[BUFFER_SIZE];			
			while ((len = in.read(buffer)) > 0) {
				out.write(buffer, 0, len);
			}
		} catch (Exception e) {
			
		} finally {		
			try {
				if (null != in) {
					in.close();
				}
				if(null != out){
					out.close();
				}
			} catch (IOException e) {
				
			}
}
	}
	public ModelAndView uploadVideosData(HttpServletRequest request,HttpServletResponse response) throws IOException, FileUploadException{
					Map<String, Object> map = new HashMap<String, Object>();
					
				
					session=request.getSession();
					int hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
					HttpSession session = request.getSession();
			        
					String saveDirectory = 	"C:/Test/abc";
					 
					MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
			        MultipartFile multipartFile = multipartRequest.getFile("videosfile");
			        
			        
			        byte[] buffer=multipartFile.getBytes();
			        String name = "userAvatar";
			        response.setContentType("video/quicktime,video/mp4,video/x-ms-wmv,video/3gpp");
			        response.setContentLength(buffer.length);

			        response.setHeader("Content-Disposition", "inline; filename=\"" + name
			                + "\"");
			        
			        BufferedInputStream input = null;
			        BufferedOutputStream output = null;
			        try {
			            input = new BufferedInputStream(new ByteArrayInputStream(buffer));
			            File file=new File(saveDirectory);
			           // File file=new File(saveDirectory+"."+multipartFile.getContentType());
			            if(!file.exists()){
			            	file.createNewFile();
			            }
			            output = new BufferedOutputStream(new FileOutputStream(file));
			   
			            int length;
			            while ((length = input.read(buffer)) > 0) {
			                output.write(buffer, 0, length);
			            }
			        } catch (IOException e) {
			           e.printStackTrace();
			        }
			  
						
						/*Box box=HMSUtil.getBox(request);
						box.put(HOSPITAL_ID, hospitalId);
						
						map.put("image",buffer);
						map.put("hospitalId", hospitalId);
				
						//map=opdHandlerService.submitImagesList(map,box);
						
					    jsp = "displayImagesForAdvertis";
					    map.put("contentJsp", jsp);*/
						return new ModelAndView(jsp, "map", map);
				}
	
	public ModelAndView saveAndGetTempComorbidity(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		String diagnosis=null;
		Integer hospitalId=0,visitNo=0,hinId=0,action=1;
		if(request.getParameter("diagnosis")!=null && !request.getParameter("diagnosis").equals("")){
			diagnosis=request.getParameter("diagnosis");
			diagnosis=diagnosis.replace("_", ".");
			diagnosis=diagnosis.replace("idid", "*");
			diagnosis=diagnosis.replace("~", "?");
		}
		if(request.getParameter("visitNo")!=null && !request.getParameter("visitNo").equals("")){
			visitNo=Integer.parseInt(request.getParameter("visitNo"));	
		}
		if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("")){
			hospitalId=Integer.parseInt(request.getParameter("hospitalId"));	
		}
		if(request.getParameter("hinId")!=null && !request.getParameter("hinId").equals("")){
			hinId=Integer.parseInt(request.getParameter("hinId"));	
		}
		if(request.getParameter("action")!=null && !request.getParameter("action").equals("")){
			action=Integer.parseInt(request.getParameter("action"));	
		}
		map.put("diagnosis", diagnosis);
		map.put("hospitalId", hospitalId);
		map.put("visitNo", visitNo);
		map.put("hinId", hinId);
		map.put("action", action);
		map = opdHandlerService.saveAndGetTempComorbidity(map);
		String jsp = "opdtempresponse";
	    //jsp += ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}
	
	@SuppressWarnings("rawtypes")
	public ModelAndView showObervationPatientList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = 0;
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
		} else if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute(DEPT_ID);
		}
		map.put("hospitalId", hospitalId);
		map.put("dept", deptId);
		map = opdHandlerService.showObervationPatientList(map);

		jsp = "showObervationPatientList";
		jsp += ".jsp";
		title = "Admitted Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);

		return new ModelAndView("index", "map", map);
	}
	@SuppressWarnings("unused")
	public void getDeseaseStatus(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String icdCode = "";
		try {
			if(request.getParameter("icdCode")!=null && !request.getParameter("icdCode").equals("")){
				icdCode=request.getParameter("icdCode");
				icdCode=icdCode.replace("_", ".");
				icdCode=icdCode.replace("idid", "*");
			}
		map.put("icdCode", icdCode);
		map = opdHandlerService.getICDList(map);
		if(map.get("icd")!=null){
			MasIcd icd=(MasIcd)map.get("icd");
			String otherpregister=(String)map.get("otherpregister");	
			map.put("icd", icd);
			String status="",notifiableDesease="",pRegister="";
			if(icd.getNotifiableDesease()!=null){
				notifiableDesease=icd.getNotifiableDesease();
			}
			if(icd.getPRegister()!=null){
				pRegister=icd.getPRegister();
			}else if(otherpregister!=null){
				pRegister="p";
			}
			status=notifiableDesease+"_"+pRegister;
			PrintWriter out=response.getWriter();
			out.write(status);
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	@SuppressWarnings("unused")
	public ModelAndView submitCantraDrugAndDiesease(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Box box=HMSUtil.getBox(request);
		map = opdHandlerService.submitCantraDrugAndDiesease(box);
		
		jsp = "cantra_indicative_for_drug_and_deasease";
		jsp += ".jsp";	
		title = "Cantra-Indicative Drug And Diesease";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	
	public void checkDrugCantraIndicative(HttpServletRequest request,HttpServletResponse response) {
		try{
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			String ids=request.getParameter("ids");
			String code2=request.getParameter("code2");
			Integer itemId=0;
			if(request.getParameter("itemId")!=null && !request.getParameter("itemId").equals("")){
				 itemId=Integer.parseInt(request.getParameter("itemId"));
			}
			
			String icdCode=request.getParameter("icdCode");

			map.put("itemId",itemId);
			map.put("icdCode",icdCode);
			
			map.put("ids",ids);
			map.put("code2",code2);
						
			int deptId = 0;
			int hospitalId = 0;
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				session.setAttribute("deptId", deptId);
			} else if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute(DEPT_ID);
			}
			Integer hinId=0;
			if (request.getParameter("hinId") != null) {
				hinId=Integer.parseInt(request.getParameter("hinId"));
			}
			
			map.put("hinId",hinId);
			
			
			
			map=opdHandlerService.checkDrugCantraIndicative(map);
			String msg=(String)map.get("msg");
			PrintWriter out=response.getWriter();
			if(msg!=null)
			out.write(msg);
			/*if(map.get("contraStrA")!=null){
				String finalString=(String)map.get("contraStrA");
				PrintWriter out=response.getWriter();
				if(finalString!=null)
				out.write(finalString);
			}else if(map.get("contraStrB")!=null){
				String finalString=(String)map.get("contraStrB");
				PrintWriter out=response.getWriter();
				if(finalString!=null)
				out.write(finalString);
			}*/
			
			/*String[] strIds=ids.split(",");
			for(String pIds:strIds){
				String str=(String)map.get(pIds);
				if(str!=null && !str.equals("")){
					PrintWriter out=response.getWriter();
					out.write(pIds+"|"+str);
					break;
				}
			}*/
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public ModelAndView showVaccineDetailJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();;
		Box box = HMSUtil.getBox(request);
		int hospitalId = 0;
		int visitId=0;
		int deptId = 0;
		if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
			visitId=Integer.parseInt(request.getParameter("visitId"));	
		}
		if (session.getAttribute("hospitalId") != null) {
			hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
		}
		
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
		}
		int inpatientId=0;
		if(request.getParameter("inpatientId")!=null && !request.getParameter("inpatientId").equals("")){
			inpatientId=Integer.parseInt(request.getParameter("inpatientId"));	
		}
		box.put("hospitalId", hospitalId);
		box.put("visitId", visitId);
		box.put("inpatientId",inpatientId);
		box.put("deptId",deptId);
		map = opdHandlerService.showVaccineDetailJsp(box);
		jsp = "opdvaccineDetail";
		map.put("contentJsp", jsp);
		/*jsp += ".jsp";
		title = "Immunization";
		map.put("contentJsp", jsp);
		map.put("title", title);*/
		return new ModelAndView(jsp, "map", map);
	}
	public void displayAU(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem>itemMasterList = new ArrayList<MasStoreItem>();
		String pvmsNo ="";
		String age = "";
		
		// added by amit das for drug conversion on 19-11-2016
		String mixable = null;
		String mixtureUnit = null;
		int mixtureQuantity = 0;
		
		
		HttpSession session = request.getSession();
		int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		if(request.getParameter("pvmsNo") != null){
			pvmsNo = request.getParameter("pvmsNo");
		}
		dataMap.put("hospitalId",hospitalId);
		dataMap.put("pvmsNo",pvmsNo);
		map = opdHandlerService.displayAU(dataMap);
		if(map.get("itemMasterList") != null){
			itemMasterList=(List<MasStoreItem>)map.get("itemMasterList");
		}
		List<Object[]> presMapList = new ArrayList<Object[]>();
		if(map.get("presMapList") != null){
			presMapList=(List<Object[]>)map.get("presMapList");
		}
		
		String au = "";
		String dispensingUnit = "";
		BigDecimal actualDispensingQty = new BigDecimal(0);
		String dangerousDrug = "";
		String tapered = "";
		
		if(itemMasterList.size()>0){
			MasStoreItem storeItem= itemMasterList.get(0);
			if(storeItem.getItemConversion() != null){
			 au =(String) storeItem.getItemConversion().getItemUnitName();
			}
			if(storeItem.getDispUnit() != null && !storeItem.getDispUnit().equals("")){
				dispensingUnit = storeItem.getDispUnit();
			 }
			if(storeItem.getADispQty() != null && storeItem.getADispQty().compareTo(new BigDecimal(0))>0){
				actualDispensingQty = storeItem.getADispQty();
			}
			if(storeItem.getDangerousDrug()!=null){
				dangerousDrug = storeItem.getDangerousDrug();
			}
			
			// added by amit das on 19-11-2016
			if(storeItem.getMixable()!=null){
				mixable = storeItem.getMixable();
			}
			// added by amit das on 19-11-2016
			if(storeItem.getMixtureQuantity()!=null){
				mixtureQuantity = storeItem.getMixtureQuantity();
			}
			// added by amit das on 25-11-2016
			if(storeItem.getMixtureUnit()!=null){
				mixtureUnit = storeItem.getMixtureUnit();
			}
			if(storeItem.getTapered()!=null){
				tapered = storeItem.getTapered();
			}
		 }
		BigDecimal closingstock = new BigDecimal(0.0);
		if(map.get("closingstock") != null){
			closingstock= (BigDecimal)map.get("closingstock");
		}
		StringBuffer sb = new StringBuffer();
			sb.append("<item>");
			if(dispensingUnit != null && !dispensingUnit.equals("")){
				sb.append("<au>" +dispensingUnit + "</au>");
			}else{
				sb.append("<au>" +au + "</au>");
			}
			sb.append("<actualDispensingQty>" +actualDispensingQty + "</actualDispensingQty>");
			sb.append("<stock>" +closingstock + "</stock>");
			sb.append("<dangerousDrug>" +dangerousDrug + "</dangerousDrug>");
			
			// added by amit das on 19-11-2016
			sb.append("<mixable>" +mixable + "</mixable>");
			sb.append("<mixtureQuantity>" +mixtureQuantity + "</mixtureQuantity>");
			sb.append("<mixtureUnit>" +mixtureUnit + "</mixtureUnit>");
			sb.append("<tapered>" +tapered + "</tapered>");
			
			/*
			 * Added by Ritu to display default freq  and no of days
			 */
			if(presMapList.size() > 0){
				for(Object[] obj : presMapList){
					sb.append("<dosage>" +(obj[0]!=null?obj[0]:"") + "</dosage>");
					sb.append("<noOfDays>" +(obj[1]!=null?obj[1]:"" )+ "</noOfDays>");
					sb.append("<freq>" +(obj[2]!=null?obj[2]:"") + "</freq>");
					sb.append("<freqType>" +(obj[3]!=null?obj[3]:"") + "</freqType>");
					sb.append("<freqCount>" +(obj[4]!=null?obj[4]:"") + "</freqCount>");
				}
				
			}else{
				sb.append("<dosage>" +""+ "</dosage>");
				sb.append("<noOfDays>" +"" + "</noOfDays>");
				sb.append("<freq>" +"" + "</freq>");
				sb.append("<freqType>" +"" + "</freqType>");
				sb.append("<freqCount>" +""+ "</freqCount>");
			}
		
			
			sb.append("</item>");
			
			
	

		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write("<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void populateSecondOpinionForm(HttpServletRequest request,HttpServletResponse response) {
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientSecondOpinion> secondOpenionList = new ArrayList<OpdPatientSecondOpinion>();
		
	  int secondOpinionId=0;
	  
		HttpSession session = request.getSession();
		int hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		
		if(request.getParameter("secondOpinionId") != null){
			secondOpinionId =Integer.parseInt(request.getParameter("secondOpinionId"));
		}
		dataMap.put("hospitalId",hospitalId);
		dataMap.put("secondOpinionId",secondOpinionId);
		map = opdHandlerService.populateSecondOpinionForm(dataMap);
		
		if(map.get("secondOpenionList") != null){
			secondOpenionList=(List<OpdPatientSecondOpinion>)map.get("secondOpenionList");
		}
		
		
		
		StringBuffer sb = new StringBuffer();
			sb.append("<item>");
			if(null !=secondOpenionList && secondOpenionList.size()>0){
				for(OpdPatientSecondOpinion secondOpinion:secondOpenionList){
					if(secondOpinion.getPatientDetailsStatus()!=null && secondOpinion.getPatientDetailsStatus().equalsIgnoreCase("y")){
						sb.append("<patientDetailsStatus>" +secondOpinion.getPatientDetailsStatus() + "</patientDetailsStatus>");	
					}
					else{
						sb.append("<patientDetailsStatus>" +"n" + "</patientDetailsStatus>");
					}
					
					if(secondOpinion.getEhr().equalsIgnoreCase("y")){
						sb.append("<ehr>" +secondOpinion.getEhr() + "</ehr>");	
					}
					else{
						sb.append("<ehr>" +"" + "</ehr>");
					}
					sb.append("<visitNo>" +secondOpinion.getVisit().getVisitNo() + "</visitNo>");
					sb.append("<comments>" +secondOpinion.getOpenionComments() + "</comments>");
					sb.append("<uhidNo>" +secondOpinion.getUhidNo() + "</uhidNo>");
					sb.append("<hin_id>" +secondOpinion.getOpinionHin().getId() + "</hin_id>");
					sb.append("<provisionalDiagnosis>" +(map.get("provisionalDiagnosis") != null ? map.get("provisionalDiagnosis"):"") + "</provisionalDiagnosis>");
					sb.append("<finalDiagnosis>" +(map.get("finalDiagnosis") != null ? map.get("finalDiagnosis"):"") + "</finalDiagnosis>");
				}
			}
			
		    sb.append("</item>");
	
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");
		try {
			response.getWriter().write("<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@SuppressWarnings("unused")
	public ModelAndView getItemListForAutoCompleteItemAllergy(HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		int counter=0;
		boolean lastPrescripitionBasedDispensing=false;
		Box box=HMSUtil.getBox(request);
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map1 = new HashMap<String, Object>();
		if(session.getAttribute("deptId")!=null){
		 deptId = (Integer) session.getAttribute("deptId");
		}
		try {
			 if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			Integer allergyTypeCheck=0;
			if (request.getParameter("allergyTypeCheck") != null) {
				allergyTypeCheck = Integer.parseInt(request.getParameter("allergyTypeCheck"));
				map.put("allergyTypeCheck", allergyTypeCheck);
			}
			
			map.put("deptId", deptId);
			if(userName!=null ){
			map.put("userName", userName);
			}
			map.put("autoHint", autoHint);
			map1 = opdHandlerService.getItemListForAutoCompleteAllergy(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
	//	map1.put("counter", counter);
		jsp = "opd_responseInGridNewAllergy";
       return new ModelAndView(jsp, "map", map1);
	 }
	
	public ModelAndView submitNursingCare(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		
		Box box=HMSUtil.getBox(request);
		
		// added by amit das on 16-09-2016
		if(session.getAttribute("hospitalId")!=null){
			box.put("hospitalId", (Integer)session.getAttribute("hospitalId"));
		}
		
		
		map = opdHandlerService.submitNursingCare(box);
		boolean flag = false;
		if (map.get("flag") != null) {
			flag = (Boolean) map.get("flag");
		}
		
		try
		{	
			PrintWriter pw = response.getWriter();
			pw.write("success~~~"+flag);				
			
		}
		
		catch(Exception e)
		{		
			e.printStackTrace();
		}
		
		String msg="OP Nursing submited successfully.";
		map.put("nursing_msg",msg);
		jsp = "op_nursing_care.jsp";
		map.put("contentJsp", jsp);
		title = "OP Nursing Care";
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
	@SuppressWarnings("unchecked")
	public ModelAndView submitObservationWard(HttpServletRequest request,	HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDs = new HashMap<String, Object>();
			Integer opdId=null;
			Integer nurseprescription=0;
			Box box=HMSUtil.getBox(request);
			if (request.getParameter("opdId") != null	 && request.getParameter("opdId") != "") {
				opdId = Integer.parseInt(request.getParameter("opdId"));
				map.put("opdId", opdId);
				mapForDs.put("opdId", opdId);
			}
			Integer opStatus=0;
			if (request.getParameter("obStatus") != null	 && request.getParameter("obStatus") != "") {
				opStatus = Integer.parseInt(request.getParameter("obStatus"));
				map.put("opStatus", opStatus);
			}
			HttpSession session = request.getSession();
			if(session.getAttribute(HOSPITAL_ID)!=null){
				int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
			if(session.getAttribute("deptId")!=null){
				int deptId = (Integer) session.getAttribute("deptId");
				map.put("deptId", deptId);
			}
			if(session.getAttribute("userId")!=null){
				int userId = (Integer) session.getAttribute("userId");
				map.put("userId", userId);
			}
			if(session.getAttribute("deptType")!=null){
				String deptType = (String) session.getAttribute("deptType");
				map.put("deptType", deptType);
			}
			if (request.getParameter("nurseprescription") != null	 && request.getParameter("nurseprescription") != "") {
				nurseprescription = Integer.parseInt(request.getParameter("nurseprescription"));
				map.put("nurseprescription", nurseprescription);
			}
			int hinId=0;
			if (request.getParameter("hinId") != null	 && request.getParameter("hinId") != "") {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				map.put("hinId", hinId);
			}
			int i=0;
			/*Integer[] ids=new Integer[nurseprescription];
			int i=0;
			List<Integer> stockIdList=new ArrayList<Integer>();
			List<Float> presQty=new ArrayList<Float>();
			List<Integer> itemIdList=new ArrayList<Integer>();
			List<String> mixableList=new ArrayList<String>();
			for(int count=1;count<=nurseprescription;count++){
				if (request.getParameter("prescrtionNurseStatus"+count) != null	 && request.getParameter("prescrtionNurseStatus"+count) != "") {
					int  id =Integer.parseInt(request.getParameter("prescrtionNurseStatus"+count));
					ids[i++]=id;
					
					int stockid=Integer.parseInt(request.getParameter("stockId"+count));
					stockIdList.add(stockid);
					
					float presQnty=Float.parseFloat(request.getParameter("presQtyId"+count));
					presQty.add(presQnty);
					if(!request.getParameter("mixable"+count).equals("")){
						String mixableStr=request.getParameter("mixable"+count);
						mixableList.add(mixableStr);
					}
				}
			}
			map.put("mixableList", mixableList);
			map.put("itemIdList", itemIdList);
			map.put("presQty", presQty);
			map.put("stockIdList", stockIdList);
			map.put("presciptionNurseStatusId", ids);*/
			Integer nurseprocedure=0;
			if (request.getParameter("nurseprocedure") != null	 && request.getParameter("nurseprocedure") != "") {
				nurseprocedure = Integer.parseInt(request.getParameter("nurseprocedure"));
				map.put("nurseprocedure", nurseprocedure);
			}
			Integer[] ids =new Integer[nurseprocedure];
			i=0;
			for(int count=1;count<=nurseprocedure;count++){
				if (request.getParameter("procedureStatus"+count) != null	 && request.getParameter("procedureStatus"+count) != "") {
					int  id =Integer.parseInt(request.getParameter("procedureStatus"+count));
					ids[i++]=id;
				}
			}
			map.put("procedureStatusId", ids);
			
			if (request.getParameter("pulseHidden") != null	 && !request.getParameter("pulseHidden").isEmpty()) {
				map.put("pulseHidden", Integer.parseInt(request.getParameter("pulseHidden")));
			}
			if (request.getParameter("temperatureHidden") != null	 && !request.getParameter("temperatureHidden").isEmpty()) {
				map.put("temperatureHidden", Float.parseFloat(request.getParameter("temperatureHidden")));
			}
			if (request.getParameter("diastolicHidden") != null	 && !request.getParameter("diastolicHidden").isEmpty()) {
				map.put("diastolicHidden", Integer.parseInt(request.getParameter("diastolicHidden")));
			}
			if (request.getParameter("systolicHidden") != null	 && !request.getParameter("systolicHidden").isEmpty()) {
				map.put("systolicHidden", Integer.parseInt(request.getParameter("systolicHidden")));
			}
			
			map=opdHandlerService.submitObservationWard(map,box);
			if(opStatus==1)
			{
			if((Integer)map.get("flag")>0)
			{
				map.put("msg", "Observation saved successfully.");
				
			}
		    jsp = "observation_ward.jsp";
		    map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
			}
			else
			{
				Map<String, Object> mapU = new HashMap<String, Object>();
				
				//mapU = opdHandlerService.patientDischargeAndAdmit(mapForDs);
				mapU = opdHandlerService.referObservationToOpd(mapForDs);
				if ((Integer) map.get("flag") > 0) {
					map.put("msg", "Patient Refered to the Opd.... ");
				}
				jsp = "observation_ward.jsp";
				map.put("contentJsp", jsp);
				return new ModelAndView("index", "map", map);
			}
		
	}
	
	public ModelAndView showCaseSheetReportJsp(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		jsp = "caseSheet" + ".jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index", "map", map);
	}

	@SuppressWarnings({ "unchecked", "unchecked" })
	public ModelAndView printCaseSheetReport(
			HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visiNo = 0;
		Integer hospitalId=0;
		session=request.getSession();
		
		String hinNo = "";
		
		if (request.getParameter(VISIT_NUMBER) != null) {
			visiNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
		}
		
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer)session.getAttribute(HOSPITAL_ID);
		}
				
		if (request.getParameter(HIN_NO) != null) {
			hinNo = request.getParameter(HIN_NO);
		}

		if (request.getParameter(HIN_NO) == null) {
			if (request.getParameter("hinNo") != null
					&& !(request.getParameter("hinNo").equals(""))) {
				hinNo = request.getParameter("hinNo");
			}
		}
		if (request.getParameter(VISIT_NUMBER) == null) {
			if (request.getParameter("visitNo") != null
					&& !(request.getParameter("visitNo").equals(""))) {
				visiNo = Integer.parseInt(request.getParameter("visitNo"));
			}
		}

		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("visitId", visiNo);
		parameters.put("hin_no", hinNo);
		parameters.put("hospitalId", hospitalId);
		parameters.put("IMAGE_DIR_LEFT", getServletContext().getRealPath("/jsp/images/malyalam_report_text.jpg"));
		parameters.put("SUBREPORT_DIR",
				getServletContext().getRealPath("/Reports/"));
		

		try {
			
			HMSUtil.generateReport("patientPrescriptionSlip", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
		return null;
	}
	@SuppressWarnings("unchecked")
	public ModelAndView getVisitIdList(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		// String serviceNo = "";
		String hinNo = "";
		try {
			/*
			 * if(request.getParameter(SERVICE_NO) != null &&
			 * !(request.getParameter(SERVICE_NO).equals(""))){ serviceNo =
			 * request.getParameter(SERVICE_NO); detailsMap.put("serviceNo",
			 * serviceNo); }
			 */
			if (request.getParameter(HIN_NO) != null
					&& !(request.getParameter(HIN_NO).equals(""))) {
				hinNo = request.getParameter(HIN_NO);
				detailsMap.put("hinNo", hinNo);
			}
			List<Object> visitNoList = new ArrayList<Object>();
			List<Object> hinNoList = new ArrayList<Object>();
			String flag = "";

			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
			if (flag.equals("visit")) {
				visitNoList = opdHandlerService.getVisitNoList(detailsMap);
				map.put("visitNoList", visitNoList);
				jsp = "responseForVisitId";

			}/*
			 * else if(flag.equals("hin")){ hinNoList =
			 * opdHandlerService.getHinNoList(serviceNo); map.put("hinNoList",
			 * hinNoList);
			 *
			 * jsp = RESPONSE_FOR_OPD_HIN_NO; }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(jsp, "map", map);

	}
	@SuppressWarnings("unchecked")
	public void checkItemStockQty(HttpServletRequest request,	HttpServletResponse response) {
		try{
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Integer ItemId=Integer.parseInt(request.getParameter("id"));
			map.put("ItemId",ItemId);
			map=opdHandlerService.checkItemStockQty(map);
			BigDecimal stockQty=(BigDecimal)map.get("stockqty");
			PrintWriter out=response.getWriter();
			out.write(stockQty.toString());
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	@SuppressWarnings("unchecked")
	public void checkInvestigationItem(HttpServletRequest request,	HttpServletResponse response) {
		try{
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> blockedMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Integer hospitalId=null; 
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = Integer.parseInt(""+ session.getAttribute("hospitalId"));
			}
			Integer chargeCode=Integer.parseInt(request.getParameter("chargeCode"));
			map.put("hospitalId",hospitalId);
			map.put("chargeCode",chargeCode);
			map=opdHandlerService.checkInvestigationItem(map);
			PrintWriter out=response.getWriter();
			if((Integer)map.get("hospitalChargeCode")>0){
				blockedMap=opdHandlerService.checkInvestigationItemIsBlocked(map);
				if((Integer)blockedMap.get("hospitalChargeCode")>0){
					out.write("A");
				}else{
					out.write("B");
				}
			//out.write("A");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public ModelAndView openPopupForInjectionIssue(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		int deptId = 0;
		int hospitalId = 0;
		HttpSession session = request.getSession();
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("deptId", deptId);
		if (session.getAttribute("hospitalId") != null)
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
		
		map = opdHandlerService.getItemBatch(box);
		
		map.put("counter", box.getInt("counter"));
		map.put("flag", box.getString("flag"));
		
		String jsp = "issueInjectionPopup";
		return new ModelAndView(jsp,"map",map);
	}
	public ModelAndView showInjectionAppointment(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		box.put("hospitalId", hospitalId);
		map = opdHandlerService.getInjectionDetailsForAppointment(box);
		String jsp = "injectionAppointment.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index","map",map);
	}
	public ModelAndView issueInjectionFromReception(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session= request.getSession();
		int hospitalId = 0;
		int deptId =0;
		Map<String, Object> dataMap = new HashMap<String, Object>();
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
			dataMap.put("hospitalId", hospitalId);
		}
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
			box.put("userName", user.getLoginName());
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("deptId", deptId);
		map = opdHandlerService.issueInjectionFromReception(box);
		boolean flag = (Boolean)map.get("flag");
		String message = ""; 
		if(flag){
			message = "Record Saved Successfully.";
		}else{
			message = "Try Again.";
		}
	//	map = registrationHandlerService.showDMARegister(dataMap);
		map.put("message", message);
		String jsp="issueInjectionPopup";
		return new ModelAndView(jsp,"map",map);
	}
	
	public ModelAndView saveInjectionRegisterDetails(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int deptId =0;
		List<Integer>  prescriptionIds=new ArrayList<Integer>();
		
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			box.put("hospitalId", hospitalId);
			
		}
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
			box.put("userName", user.getLoginName());
		}
		if (session.getAttribute("deptId") != null)
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		box.put("deptId", deptId);
		
		map = opdHandlerService.saveInjectionRegisterDetails(box);
		boolean flag = (Boolean)map.get("flag");
		String message = ""; 
		if(flag){
			message = "Injection Details Saved Successfully.";
		}else{
			message = "Try Again.";
		}
	//	map = registrationHandlerService.getDoctorList(hospitalId);
		map.put("message", message);
		map.put("appointmentHeaderId",  box.getInt("appointmentHeaderId"));
		String jsp = "injectionMessage.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index","map",map);
	}
	public ModelAndView saveInjectionAppointment(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = 0;
		int deptId =0;
		
		if (session.getAttribute("hospitalId") != null)
		{
			hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
			box.put("hospitalId", hospitalId);
		}
		
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		
		if (session.getAttribute("users") != null) {
			Users user = (Users) session.getAttribute("users");
			box.put("userId", user.getId());
		}
		
		if (session.getAttribute("deptId") != null)
		{
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			box.put("deptId", deptId);
		}
		map = opdHandlerService.saveInjectionAppointment(box);
		boolean flag = (Boolean)map.get("flag");
		String message = ""; 
		if(flag){
			message = "Record Saved Successfully.";
		}else{
			message = "Try Again.";
		}
		//map = registrationHandlerService.getDoctorList(hospitalId);
		map.put("message", message);
		String jsp = "injectionWaitingList.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index","map",map);
	}
	public ModelAndView getPendingInjectionList(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		int deptId=(Integer)session.getAttribute("deptId");
		box.put("hospitalId", hospitalId);
		box.put("deptId", deptId);
		Date FromDate=new Date();
		Date ToDate=new Date();
		if(request.getParameter("FromDateId")!=null){
			FromDate=HMSUtil.convertStringTypeDateToDateType(request.getParameter("FromDateId"));
		}
		if(request.getParameter("ToDateId")!=null){
			ToDate=HMSUtil.convertStringTypeDateToDateType(request.getParameter("ToDateId"));
		}
		map = opdHandlerService.getPendingInjectionList(box,FromDate,ToDate,hospitalId);
		String jsp = "injectionWaitingList.jsp";
		map.put("contentJsp", jsp);
		return new ModelAndView("index","map",map);
	}
	
	public void deleteOPDdetails(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		map = opdHandlerService.deleteOPDdetails(box);
		/*try{
			if((Integer)map.get("flag")==1){
				PrintWriter out=response.getWriter();
				out.print("Record deleted successfully.");
			}
		}catch(Exception e){
			e.printStackTrace();
		}	*/
	}
	
	public void updatSecondOpinionPatient(HttpServletRequest request, HttpServletResponse response) throws IOException{
		Map<String, Object> map = new HashMap<String, Object>();
		
		Box box = HMSUtil.getBox(request);
		int secondOpinionId=0;
		int visitId=0;
		String remarks="";
		if(request.getParameter("secondOpinionId")!=null){
			secondOpinionId=Integer.parseInt(request.getParameter("secondOpinionId"));
		}
		if(request.getParameter("secondOpinionVisitId")!=null){
			visitId=Integer.parseInt(request.getParameter("secondOpinionVisitId"));
		}
		if(request.getParameter("docRemark")!=null){
			remarks=request.getParameter("docRemark");
		}
		map = opdHandlerService.updatSecondOpinionPatient(box);
		
		String message="";
		String jsp = "";
		boolean status=(Boolean) map.get("status");
		
		if(status){
			message="Saved Successfully";
			//jsp = "second_opinion_window.jsp";
		}
		else{
			message="Some error occure";
		}
		PrintWriter printWriter = response.getWriter();	
		printWriter.write(message);
		/*map.put("contentJsp", jsp);
		map.put("message", message);
		return new ModelAndView("second_opinion_window","map",map);*/
	}
	public ModelAndView getTemplate(HttpServletRequest request,HttpServletResponse response){
			Map<String, Object> map = new HashMap<String, Object>();
			Integer hospitalId=0,deptId=0,userId=0;
			Box box = HMSUtil.getBox(request);
			HttpSession session = request.getSession();
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				box.put("hospitalId", hospitalId);
			}
			
			if(session.getAttribute("deptId")!=null){
				deptId = (Integer) session.getAttribute("deptId");
				box.put("deptId", deptId);
			}
			//added By Om Tripahi
			if(session.getAttribute("userId")!=null){
				userId= (Integer) session.getAttribute("userId");
				box.put("userId", userId);
			}
			map = opdHandlerService.getTemplate(box);
			map.put("tempId", box.getInt("tempId"));
			return new ModelAndView("opd_responseForTemplates","map",map);
		}
	public ModelAndView secondOpinionInvestigation(HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		int hin_id=0;
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		
		if(request.getParameter("hin_id") != null){
			

			hin_id =Integer.parseInt(request.getParameter("hin_id"));
		}
		parameters.put("hin_id", hin_id);
		
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		try{

		detailsMap = opdHandlerService.getConnectionForReport();
		
		HMSUtil.generateReport("second_opinion_investigation", parameters, (Connection)detailsMap.get("conn"), response, getServletContext());
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return null;
		}
	
	@SuppressWarnings("unused")
	public ModelAndView getRouteAutoList(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String autoHint = "";
		
		try {
			 if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			
			map.put("autoHint", autoHint);
			map = opdHandlerService.getRouteAutoList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForRoute";
       return new ModelAndView(jsp, "map", map);
	 }

	//VK
	@SuppressWarnings("unchecked")
	public ModelAndView getOPClinicalReadViewList(HttpServletRequest request,HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		
		int tokeNo=0;
		String patientName;
		String uhid;
		int opd_DepartmentId=0;
		int hospitalId=0;
		int searchFlag=0;
		String flag="";
		mapForDS.put("forOPClinnic", true);
		if(request.getParameter("flag")!=null){
			flag=request.getParameter("flag");
			mapForDS.put("flag",flag);
		}
		if(request.getParameter("searchFlag")!=null){
			searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag",searchFlag);
		}
		
		if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo",tokeNo);
		}
		if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if(request.getParameter("uhid")!=null){
			uhid = request.getParameter("uhid");
			mapForDS.put("uhid", uhid);
		}
		Integer userId=null;
		if(session.getAttribute(USER_ID)!=null){
			userId = (Integer) session.getAttribute(USER_ID);
		}
		if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
			}
		}
		
		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		
		mapForDS.put("opClinicalWaitinList", true);
		mapForDS.put("emp", userId);
		
		
		map = opdHandlerService.getOPClinicalReadViewList(mapForDS);
		String deptName =(String)map.get("deptName");
		
		//session.setAttribute("deptName", deptName);
		//Added by Arbind on 09-03-2017
		if(deptName != null && !deptName.equals(""))
			session.setAttribute("deptName", deptName);
		String jsp = "op_clinical_read_view.jsp";
		title = "Waiting Patient List";
		map.put("opdType",request.getParameter("opdType"));
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	}
  //VK
	@SuppressWarnings({ "unused", "unchecked" })
	public ModelAndView showOPDMainForRecallJsp(HttpServletRequest request,
            HttpServletResponse response) {
    HttpSession session = request.getSession();
    Map<String, Object> map = new HashMap<String, Object>();
    List<Visit> visitTokenList = new ArrayList<Visit>();
    int visitId =0;
    int hospitalId=0;
    if(session.getAttribute(HOSPITAL_ID)!=null){
		hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		map.put("hospitalId", hospitalId);
	}
    if(request.getParameter("visitId")!=null){
      visitId =Integer.parseInt(request.getParameter("visitId"));
      map.put("visitId", visitId);
    }
    int deptId =0;
    if(session.getAttribute("deptId")!=null){
     deptId = (Integer) session.getAttribute("deptId");
     map.put("deptId", deptId);
    }
    int empId =0;
    if(session.getAttribute("userId")!=null){
      empId =(Integer) session.getAttribute("userId");
      map.put("docId", empId);
    }
    
    int token  =0;
    if(request.getParameter("token")!=null){
     String tokens=	request.getParameter("token");
     token =Integer.parseInt(tokens.split("/")[1].trim());        
    }
    
    int skip  =0;
    if(request.getParameter("skip")!=null){
    	if( Integer.parseInt(request.getParameter("skip"))!=0){
    		skip= Integer.parseInt(request.getParameter("skip"));
        	map.put("skip", skip);
    	}
    }
    
    map = opdHandlerService.getPatientDetails(map);
	List patientDataList = (List) map.get("patientDataList");
    List<MasDiet> dietList =(List)map.get("dietDataList");
    List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
    storeBrandList = (List)map.get("storeBrandList");
    if(patientDataList!=null && patientDataList.size()>0){
    	Visit visit = (Visit) patientDataList.get(0);
	    int visitNo = visit.getVisitNo();
	    int hinId = visit.getHin().getId();
	    map.put("visitNo", visitNo);
	    map.put("hinId", hinId);
	    map.put("token", token);
	    map = opdHandlerService.getOPDDetails(map);
    }
      String jsp = OPD_MAIN_JSP; //OPD_MAIN_JSP_FOR_RECALL;
      jsp += ".jsp";
      title = "Patient Details";
      map.put("deptId", deptId);
      map.put("contentJsp", jsp);
      map.put("title", title);
      return new ModelAndView("index", "map", map);
 }
	
	@SuppressWarnings("unused")
	public ModelAndView removeCantraDrugs(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String ids = "";
		try {
			 if (request.getParameter("ids") != null) {
				ids = (request.getParameter("ids"));
			}
			map.put("ids", ids);
			map = opdHandlerService.removeCantraDrugs(map);
			Box box=HMSUtil.getBox(request);
			map = opdHandlerService.submitCantraDrugAndDiesease(box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		String jsp = "cantra_indicative_for_drug_and_deasease";
		jsp += ".jsp";	
		String title = "Cantra-Indicative Drug And Diesease";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	 }
	
	@SuppressWarnings("unused")
	public ModelAndView removeCantraDisease(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		String ids = "";
		try {
			 if (request.getParameter("ids") != null) {
				ids = (request.getParameter("ids"));
			}
			map.put("ids", ids);
			map = opdHandlerService.removeCantraDisease(map);
			Box box=HMSUtil.getBox(request);
			map = opdHandlerService.submitCantraDrugAndDiesease(box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		String jsp = "cantra_indicative_for_drug_and_deasease";
		jsp += ".jsp";	
		String title = "Cantra-Indicative Drug And Diesease";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView("index", "map", map);
	 }
	public ModelAndView getBedStatus(HttpServletRequest request,HttpServletResponse response){
		int deptId=0;
		if(request.getParameter("deptId")!=null){
			deptId=Integer.parseInt(request.getParameter("deptId"));
		}
		int hospitalId=0;
		HttpSession session=request.getSession();
		if(session.getAttribute("hospitalId")!=null){
			hospitalId=(Integer)session.getAttribute("hospitalId");
		}
		Map<String,Object>map=new HashMap<String,Object>();
		map=opdHandlerService.getBedStatus(deptId,hospitalId);
		jsp="responseForBedStatusOP";
		return new ModelAndView(jsp, "map", map);
	}
	
	public ModelAndView getLoincSnomedList(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String labText=null;
			if (request.getParameter("labText") != null && !request.getParameter("labText").equals("")) {
				labText = request.getParameter("labText");
				int index1 = labText.lastIndexOf("[");
				int index2 = labText.lastIndexOf("]");
				index1++;
				if(labText.length()>0 && index1!=0 && index2!=0){
				labText = labText.substring(index1,	index2);
				map.put("labText", labText);
				map = opdHandlerService.getLoincSnomedList(map);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("opd_responseForLoincMappedSnomedList", "map", map);
	}
	
	
	@SuppressWarnings("unused")
	public ModelAndView getSnomedListForAutoCompleteItem(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		String autoHint = "";

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}
			

			map.put("autoHint", autoHint);
			map = opdHandlerService.getSnomedList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = "opd_responseForAutoCompleteSnomed";
		return new ModelAndView(jsp, "map", map);
	}
	
	@SuppressWarnings("unused")
	public ModelAndView getICDListBasedOnSnomedId(HttpServletRequest request,
			HttpServletResponse response) {

		HttpSession session = request.getSession();
		List<MasIcd> icdList = new ArrayList<MasIcd>();
		long snomedId = 0;
		

			Map<String, Object> map = new HashMap<String, Object>();
	
			if (request.getParameter("snomedId") != null) {
				snomedId = Long.parseLong((request.getParameter("snomedId")));
			}			

			map.put("snomedId", snomedId);
			map = opdHandlerService.getICDListBasedOnSnomedId(map);
			
			
			if(map.get("icdList")!= null)
			{
				icdList =(List<MasIcd>) map.get("icdList");
			}
			
			int totalRecords = 0;
			if(map.get("totalRecords")!= null)
			{
				totalRecords = (Integer) map.get("totalRecords");
			}
			
			try
			{
				PrintWriter pw = response.getWriter();		    
			   
			 
				if(icdList.size() == 0){
					
				}
				
				pw.write("[");
				int counter=1;
				
				for(MasIcd list : icdList)
				{
					
					
				    if(counter != icdList.size())
				    {
				    	pw.write("{\"Id\": \""+list.getId()+"\",\"IcdCode\": \""+list.getIcdCode()+"\",\"IndName\": \""+list.getIcdName()+"\",\"SnomedId\": \""+list.getSnomedConceptId()+"\",\"totalRecords\":\""+totalRecords+"\"},");
				    }
				    else
				    {
				    	pw.write("{\"Id\": \""+list.getId()+"\",\"IcdCode\": \""+list.getIcdCode()+"\",\"IndName\": \""+list.getIcdName()+"\",\"SnomedId\": \""+list.getSnomedConceptId()+"\",\"totalRecords\":\""+totalRecords+"\"}");
				    }
				
				    counter++;		
					
				}
				
				
				pw.write("]");
				
				
				//pw.write("</table>");
				
			}
			
			catch(Exception e)
			{
				icdList.clear();
				e.printStackTrace();
			}
			icdList.clear();
			
			return null;	
		
	}
	@SuppressWarnings("unused")
	public ModelAndView getChargeCodeListForAutoComplete1(
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession session = request.getSession();
		String itemNameField = "";
		int deptId = 0;
		String departmentIdField = "";
		String autoHint = "";
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			if (request.getParameter("requiredField") != null) {
				itemNameField = (request.getParameter("requiredField"));
			}
			if (request.getParameter(itemNameField) != null) {
				autoHint = (request.getParameter(itemNameField));
			}

			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
			}
			map.put("userName", userName);
			map.put("autoHint", autoHint);
			map.put("deptId", deptId);
			map = opdHandlerService.getInvestigationListForAutoComplete1(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		jsp = OPD_RESPONSE_FOR_INVESTIGATION_JSP;

		return new ModelAndView(jsp, "map", map);
	}
	public ModelAndView	getTodayOtherPrescription(HttpServletRequest request, HttpServletResponse response){
		int hinId=0;
		int visitId=0;
		if(request.getParameter("hinId")!=null){
			hinId=Integer.parseInt(request.getParameter("hinId"));
		}
		if(request.getParameter("visitId")!=null){
			visitId=Integer.parseInt(request.getParameter("visitId"));
		}
		Map<String,Object>map=new HashMap<String,Object>();
		map=opdHandlerService.getTodayOtherPrescription(hinId,visitId);
		
		jsp = "popUpForTodayOtherPrescription";

		return new ModelAndView(jsp, "map", map);
		
	}
	@SuppressWarnings( { "unchecked", "unchecked" })
	public void showPatientMedicalCaseSheetReportNew(
			HttpServletRequest request, HttpServletResponse response) {
		//Map<String, Object> map = new HashMap<String, Object>();//Un used commented by OM Tripathi
		int visiNo = 0;
		String serviceNo = "";
		String hinNo = "";
		int visitId = 0;
		String patientDetailsStatus=null;
		if (request.getParameter("visiNo") != null) {
			visiNo = Integer.parseInt(request
					.getParameter("visiNo"));
		}
		
		if(request.getParameter("visitId")!= null){
			visitId = Integer.parseInt(request.getParameter("visitId"));
		}
		
		if(request.getParameter("patientDetailsStatus")!= null){
			patientDetailsStatus = request.getParameter("patientDetailsStatus");
		}
		
		
		if(request.getParameter("secondOpinionVisitId")!= null && !request.getParameter("secondOpinionVisitId").equals("")){
			visitId = Integer.parseInt(request.getParameter("secondOpinionVisitId"));
		}
		if (request.getParameter("patientEharIdUhid") != null && !request.getParameter("patientEharIdUhid").equals("")) {
			hinNo = request.getParameter("patientEharIdUhid");
		}
		
		if (request.getParameter("hinNo") != null) {
			hinNo = request.getParameter("hinNo");
		}else {
			hinNo=opdHandlerService.getHinNo(visitId);
		}
		
		
		
		HttpSession session = request.getSession();
		int hospitalId = 0;
		if(request.getParameter("hospitalId")!=null){
			hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
		}else{
			hospitalId =(Integer) session.getAttribute("hospitalId");
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		detailsMap = opdHandlerService.getConnectionForReport();
		Map<String, Object> parameters = new HashMap<String, Object>();
		
		parameters.put("visitId", visitId);
		parameters.put("hospitalId", hospitalId);
		parameters.put("visitNo", visiNo);
		parameters.put("serviceNo", serviceNo);
		parameters.put("hin_no", hinNo);
		parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
				"/Reports/"));
		try {
			/*byte[] bytes = null;
			try {
				bytes = JasperRunManager.runReportToPdf(
						getCompiledReport("medicalCaseSheetnewforstorage"), parameters,
						(Connection) detailsMap.get("conn"));
				LOGGER.info("bytes-------------->"+bytes.length);

			} catch (JRException e) {

				e.printStackTrace();
			}
			response.setContentType("application/pdf");
			response.setContentLength(bytes.length);
			ServletOutputStream ouputStream;
			try {
				ouputStream = response.getOutputStream();
				ouputStream.write(bytes, 0, bytes.length);
				ouputStream.flush();
				ouputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			HMSUtil.generateReport("medicalCaseSheetnewforstorage", parameters,
					(Connection) detailsMap.get("conn"), response,
					getServletContext());

			*/
			String reportName="";
			if(patientDetailsStatus==null || patientDetailsStatus.equalsIgnoreCase("y")){
				reportName="medicalCaseSheetnewforstorageOPD";
			}else{
				reportName="medicalCaseSheetnewforstorageOPD2";
			}
			
			String flag="1";
			if (request.getParameter("flag") != null) {
				flag = request.getParameter("flag");
			}
			if (flag.equals("1"))
			{
				HMSUtil.generateReport(reportName, parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());
			}

			else if(flag.equals("2")) {
						HMSUtil.generateHTMLReport(reportName, parameters,
								(Connection) detailsMap.get("conn"), response,
								getServletContext());
			}
			

		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
	}
	
	public ModelAndView	getGroupAndParameterValues(HttpServletRequest request, HttpServletResponse response){
		Map map = new HashMap();
		Map generalMap = new HashMap();
		
		HttpSession session = request.getSession();

		int  template = 0;
		String tempLateName = "";
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = Integer.parseInt("" + session.getAttribute("deptId"));
		}
		String specialtyType = "";
		if (session.getAttribute("specialtyType") != null) {
			specialtyType = ("" + session.getAttribute("specialtyType"));
		}
		
		
		if (request.getParameter("tempLate") != null
				&& !(request.getParameter("tempLate").equals(""))) {
			template =Integer.parseInt(request.getParameter("tempLate"));
		}
		int hinId = 0;
		if (request.getParameter("hinId") != null
				&& !(request.getParameter("hinId").equals(""))) {
			hinId =Integer.parseInt(request.getParameter("hinId"));
		}
		
		int visitId = 0;
		if (request.getParameter("visitId") != null
				&& !(request.getParameter("visitId").equals(""))) {
			visitId =Integer.parseInt(request.getParameter("visitId"));
		}
		
		if (request.getParameter("tempLateName") != null
				&& !(request.getParameter("tempLateName").equals(""))) {
			tempLateName = request.getParameter("tempLateName");
		}

		generalMap.put("template", template);
		generalMap.put("tempLateName", tempLateName);
		generalMap.put("deptId", deptId);
		generalMap.put("visitId", visitId);
		generalMap.put("hinId", hinId);
		generalMap.put("specialtyType", specialtyType);
		
		//map = opdHandlerService.showGroupAndParameterValues(generalMap);
		map = opdHandlerService.showGroupAndParameterValuesNew(generalMap);
		//String jsp = "opd_responseForSpeciality";
		String jsp = "opd_responseForSpecialityNew";
		map.put("template", template);
		map.put("tempLateName", tempLateName);
		map.put("hinId", hinId);
		map.put("visitId", visitId);
		return new ModelAndView(jsp, "map", map);
	}
	
	
	
	
	//public ModelAndView
	public void getItemForAllergy(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		/*List objectList = new ArrayList();*/
		String val="";
		if(request.getParameter("val")!=null){
			val=request.getParameter("val");
		}
		
		String itemCode = "";
		if (request.getParameter("id") != null) {
			itemCode = (request.getParameter("id"));
		}
		dataMap.put("itemCode", itemCode);
		dataMap.put("val", val);
		int visitId=0;
		if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("0")){
			visitId=Integer.parseInt(request.getParameter("visitId"));
		}
		List<OpdPatientAllergyT> allergyTList = new ArrayList<OpdPatientAllergyT>();
		map = opdHandlerService.getItemForAllergy(val,visitId);
		boolean matched=false;
		if(map.get("matched")!=null){
			matched=(Boolean)map.get("matched");
		}
		allergyTList = (List) map.get("allergyTList");
		String allergyString = "";
		for (OpdPatientAllergyT masIcd : allergyTList) {
			allergyString = allergyString.concat(masIcd.getAllergen()).concat(" ");
		}
		StringBuffer sb = new StringBuffer();
		sb.append("<item>");
		sb.append("<allergyString>" + matched + "</allergyString>");
		sb.append("</item>");
		response.setContentType("text/xml");
		response.setHeader("Cache-Control", "no-cache");

		try {
			response.getWriter().write(
					"<?xml version='1.0' encoding='ISO-8859-1'?>");
			response.getWriter().write("<items>");
			response.getWriter().write(sb.toString());
			response.getWriter().write("</items>");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public ModelAndView submitExpiryDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		ExpiryDetails expiryDetails = new ExpiryDetails();
		int hinId = 0;
		int inpatientId = 0;
		int bedId = 0;
		int wardId = 0;
		int transactionId = 0;
		int deathCertificateNo = 0;

		if (request.getParameter(INPATIENT_ID) != null && !request.getParameter(INPATIENT_ID).equals("")) {
			inpatientId = Integer.parseInt(request.getParameter(INPATIENT_ID));
			Inpatient inpatient = new Inpatient();
			inpatient.setId(inpatientId);
			expiryDetails.setInpatient(inpatient);
		}
		if (request.getParameter(HIN_ID) != null) {
			hinId = Integer.parseInt(request.getParameter(HIN_ID));
			Patient patient = new Patient();
			patient.setId(hinId);
			expiryDetails.setHin(patient);
		}
		if (request.getParameter(WARD_ID) != null && !request.getParameter(WARD_ID).equals("")) {
			wardId = Integer.parseInt(request.getParameter(WARD_ID));
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(wardId);
			expiryDetails.setWard(masDepartment);
		}
		if (request.getParameter(BED_ID) != null && !request.getParameter(BED_ID).equals("")) {
			bedId = Integer.parseInt(request.getParameter(BED_ID));
			MasBed masBed = new MasBed();
			masBed.setId(bedId);
			expiryDetails.setBed(masBed);
		}
		if (request.getParameter(D_DEATH_CAUSE_ID) != null) {
			expiryDetails.setDDeathCauseText(""
					+ request.getParameter(D_DEATH_CAUSE_ID));
		}
		if (request.getParameter(S_DEATH_CAUSE_ID) != null) {
			expiryDetails.setSDeathCauseText(""
					+ request.getParameter(S_DEATH_CAUSE_ID));
		}
		if (request.getParameter(C_DEATH_CAUSE_ID) != null) {
			expiryDetails.setCDeathCauseText(""
					+ request.getParameter(C_DEATH_CAUSE_ID));
		}

		
		if (request.getParameter("issueDate") != null) {
			expiryDetails.setIssueDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter("issueDate")));
		}
		if (request.getParameter("issueTime") != null) {
			expiryDetails.setIssueTime(request.getParameter("issueTime"));
		}
		if (request.getParameter(DEATH_CERTIFICATE_NO) != null && !request.getParameter(DEATH_CERTIFICATE_NO).equals("")) {
			expiryDetails.setDeathCertificateNo(request
					.getParameter(DEATH_CERTIFICATE_NO));
			deathCertificateNo = Integer.parseInt(request
					.getParameter(DEATH_CERTIFICATE_NO));
		}
		if (request.getParameter("transactionId") != null) {
			transactionId = Integer.parseInt(request
					.getParameter("transactionId"));
		}
		if (request.getParameter(DEATH_CERTIFICATE_TAKEN_BY) != null) {
			expiryDetails.setDeathCertificateTakenBy(request
					.getParameter(DEATH_CERTIFICATE_TAKEN_BY));
		}
		if (request.getParameter(DATE_OF_EXPIRY) != null
				&& !(request.getParameter(DATE_OF_EXPIRY).equals(""))) {
			expiryDetails.setExpiryDate(HMSUtil
					.convertStringTypeDateToDateType(request
							.getParameter(DATE_OF_EXPIRY)));
		}
		if (request.getParameter(TIME_OF_EXPIRY) != null) {
			expiryDetails.setExpiryTime(request.getParameter(TIME_OF_EXPIRY));
		}
		if (request.getParameter(CONSQUENCE_OF) != null) {
			expiryDetails.setConsequenceOf(""
					+ request.getParameter(CONSQUENCE_OF));
		}
		if (request.getParameter(ID_MARK1) != null) {
			expiryDetails.setIdMarks1("" + request.getParameter(ID_MARK1));
		}
		if (request.getParameter(ID_MARK2) != null) {
			expiryDetails.setIdMarks2("" + request.getParameter(ID_MARK2));
		}
		if (request.getParameter(REMARKS) != null) {
			expiryDetails.setRemarks("" + request.getParameter(REMARKS));
		}
		HttpSession session = request.getSession();

		int hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);
		expiryDetails.setHospital(masHospital);

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		Users userObj = new Users();
		userObj.setId(userId);
		expiryDetails.setAddEditBy(userObj);

		if (request.getParameter(CHANGED_DATE) != null) {
			Date addEditDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(CHANGED_DATE));
			expiryDetails.setAddEditDate(addEditDate);
		}
		if (request.getParameter(CHANGED_TIME) != null) {
			String addEditTime = request.getParameter(CHANGED_TIME);
			expiryDetails.setAddEditTime(addEditTime);
		}

		Map<String, Object> expiryDetilsMap = new HashMap<String, Object>();
		expiryDetilsMap.put("expiryDetails", expiryDetails);
		expiryDetilsMap.put("transactionId", transactionId);
		expiryDetilsMap.put("deathCertificateNo", deathCertificateNo);

		expiryDetilsMap.put("hinId", hinId);
		boolean saved = false;
		saved = opdHandlerService.submitExpiryDetails(expiryDetilsMap);
		String message = "";

		if (saved == true) {
			message = "Expiry Details  saved successfully.Do you want print ?";
		} else {
			message = "Some problem Occured! Try Again.";
		}

		jsp = "messageForExpiryDetailsOpd" + ".jsp";
		map.put("inpatientId", inpatientId);
		map.put("contentJsp", jsp);
		map.put("message", message);
		map.put("hinId", hinId);
		return new ModelAndView("index", "map", map);
	}
	public ModelAndView printExpiryDetails(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		Date currDate = null;
		int inpatientId = 0;
		int hinId=0;
		Map<String, Object> parameters = new HashMap<String, Object>();
		String reportName = "d_certificate_opd";
		if (request.getParameter("inpatientId") != null && !request.getParameter("inpatientId").equals("")) {
			inpatientId = Integer.parseInt(request.getParameter("inpatientId"));
		}
		if (request.getParameter("hinId") != null) {
			hinId = Integer.parseInt(request.getParameter("hinId"));
		}
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		dataMap.put("inpatientId", inpatientId);
		dataMap.put("hinId", hinId);
		detailsMap = opdHandlerService.printExpiryDetails(dataMap);
		
		parameters.put("inpatientId", inpatientId);
		parameters.put("hinId", hinId);
			HMSUtil.generateReport(reportName, parameters,
				(Connection) detailsMap.get("conn"), response,
				getServletContext());
		
		return null;
	}
public ModelAndView submitDischargeInformation(HttpServletRequest request,
			HttpServletResponse response) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		HttpSession httpSession=request.getSession();
		HttpSession session = request.getSession();
		int hinId = 0;
		int hospitalId=(Integer)httpSession.getAttribute(HOSPITAL_ID);
		int deptId=(Integer)httpSession.getAttribute(DEPT_ID);
		dataMap.put("hospitalId", hospitalId);
		String hinNo="";
		if (request.getParameter("hinNo") != null) {
			hinNo = request.getParameter("hinNo");
			dataMap.put("hinNo", hinNo);
		}
		int visitNo=0;
		if (request.getParameter("visitNo") != null) {
			visitNo = Integer.parseInt(request.getParameter("visitNo"));
			dataMap.put("visitNo", visitNo);
		}
		int visitId=0;
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			dataMap.put("visitId", visitId);
		}
		List<Patient> patientList=new ArrayList<Patient>();
		map=opdHandlerService.getdeadPatientDetails(dataMap);
		if(null !=map.get("patientList")){
			patientList=(List<Patient>)map.get("patientList");
		}

		Users user = (Users) session.getAttribute("users");
		int userId = user.getId();
		Users userObj = new Users();
		userObj.setId(userId);
		//discharge.setAddEditBy(userObj);
		Map<String, Object> dischargeMap = new HashMap<String, Object>();
		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);
		//discharge.setHospital(masHospital);
		String addEditTime = "";
		Date addEditDate = null;
		if (request.getParameter(DISCHARGE_DATE) != null) {
			addEditDate = HMSUtil.convertStringTypeDateToDateType(request
					.getParameter(DISCHARGE_DATE));
			//discharge.setAddEditDate(addEditDate);
			//discharge.setDateOfDischarge(addEditDate);
			dischargeMap.put("addEditDate", addEditDate);
		}
		if (request.getParameter(DISCHARGE_TIME) != null) {
			addEditTime = request.getParameter(DISCHARGE_TIME);
			//discharge.setAddEditTime(addEditTime);
			//discharge.setTimeOfDischarge(addEditTime);
			dischargeMap.put("addEditTime", addEditTime);
		}
		

		dischargeMap.put("hinId", hinId);
		//dischargeMap.put("inpatientId", inpatientId);
		//dischargeMap.put("adNo", adNo);
		//dischargeMap.put("discharge", discharge);
		//dischargeMap.put("bedId", bedId);
		//dischargeMap.put("dischargeDate", dischargeDate);
		//dischargeMap.put("dischargeTime", dischargeTime);

		boolean dischargeInfoSave = false;
		/*dischargeInfoSave = adtHandlerService
				.submitDischargeInformation(dischargeMap);*/

		String message = "";
		Map<String, Object> patientDetailsMap = new HashMap<String, Object>();
		//patientDetailsMap.put("adNo", adNo);
		//patientDetailsMap.put("inpatientId", inpatientId);
		patientDetailsMap.put(HOSPITAL_ID, hospitalId);
		patientDetailsMap.put(DEPT_ID, deptId);

		if (dischargeInfoSave) {
			message = " Discharge Information has been submitted Successfully";
			if (request.getParameter("flag") != null
					&& request.getParameter("flag").equals("expiry")) {
				
				String transferType="ward";
				
				
				Transfer transfer = new Transfer();
				Inpatient inpatient=new Inpatient();
				
				transfer.setInpatient(inpatient);
				Patient patient=new Patient();
				patient.setId(hinId);
				transfer.setHin(patient);
				
				MasHospital hospital=new MasHospital();
				hospital.setId((Integer)session.getAttribute(HOSPITAL_ID));
				transfer.setHospital(hospital);
				transfer.setRequestStatus("p");
				transfer.setTransferType(transferType);				
				transfer.setTransferReason("Death");
				/*
				  transfer.setFromWard(inpatient.getDepartment());
				transfer.setFromBed(inpatient.getBed());
				transferNoList = session.createCriteria(Transfer.class)
						.addOrder(Order.desc("Id")).setMaxResults(1).list();
				if(transferNoList!=null && transferNoList.size()>0)
				{
					transfer.setTransferNo(transferNoList.get(0).getTransferNo());
				}
				else
				{
					transfer.setTransferNo(1);
				}
				if(transferType.equalsIgnoreCase("bed"))
				{
				 transfer.setToWard(inpatient.getDepartment());
				 MasBed toBed=new  MasBed();
				 toBed.setId((Integer)transferMap.get(BED_ID));
				 transfer.setToBed(toBed);
				}
				else
				{
					MasDepartment toDepartment=new MasDepartment();
					toDepartment.setId((Integer)transferMap.get(TO_WARD));
					transfer.setToWard(toDepartment);
				}
				transfer.setDateOfTransfer((Date)transferMap.get(TRANSFER_DATE));
				transfer.setTimeOfTransfer((String)transferMap.get(TRANSFER_TIME));*/
				transfer.setAdStatus(inpatient.getAdStatus());
				transfer.setStatus("y");
				Users users=new Users();
				users.setId((Integer)session.getAttribute(USER_ID));
				transfer.setAddEditBy(users);
				Map<String, Object> utilMap = new HashMap<String, Object>();
				utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
				String date2 = (String) utilMap.get("currentDate");
				String time = (String) utilMap.get("currentTime");
				transfer.setAddEditDate(HMSUtil.convertStringTypeDateToDateType(date2));
				transfer.setAddEditTime(time);
				transfer.setDateOfTransfer(HMSUtil.convertStringTypeDateToDateType(date2));
				transfer.setTimeOfTransfer(time);
				patientDetailsMap.put("transfer", transfer);
			//	map = adtHandlerService.showExpiryDetails(patientDetailsMap);
				jsp = "expiryDetailsOpd" + ".jsp";

			} else {
				//jsp = MESSAGE_FOR_DISCHARGE_JSP + ".jsp";
				jsp = "expiryDetailsOpd" + ".jsp";
			}
		} else {
			message = "Some problem Occured! Try Again.";
			//jsp = MESSAGE_FOR_DISCHARGE_JSP + ".jsp";
			jsp = "expiryDetailsOpd" + ".jsp";
		}
		String backUrl = "";
		backUrl = "/hms/hms/adt?method=showDischargeJsp";
		
		map.put("patientList", patientList);
		map.put("message", message);
		map.put("contentJsp", jsp);
		map.put("backUrl", backUrl);
		return new ModelAndView("index", "map", map);
	}
@SuppressWarnings("unused")
public ModelAndView showPatientExpieryCerificate(HttpServletRequest request,
		HttpServletResponse response) {

	HttpSession session = request.getSession();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	
	int hinId = 0;
	int hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
	//int deptId=(Integer)httpSession.getAttribute(DEPT_ID);
	mapForDS.put("hospitalId", hospitalId);
	String UHID="";
	if(request.getParameter("UHID") !=null && !request.getParameter("UHID").equals("")){
		UHID=request.getParameter("UHID");
	}
	List<Patient> patientList=new ArrayList<Patient>();
	mapForDS.put("UHID", UHID);
	if(!UHID.equals(""))
	map=opdHandlerService.getdeadPatientDetails(mapForDS);
	if(null !=map.get("patientList")){
		patientList=(List<Patient>) map.get("patientList");
	}
	if(null !=patientList && patientList.size()>0){
		jsp = "expiryDetailsOpd";
	}
	else{
		jsp = "showPatientExpiryCeritificate";
	}
	
	jsp += ".jsp";
	title = "Patient Previous Visit";

	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView("index", "map", map);
}

public ModelAndView openUploadPopWindow(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> details = new HashMap<String, Object>();
	int departmentId = 0;
	
	if (request.getParameter("department") != null) {
		departmentId = Integer.parseInt(request.getParameter("department"));
	}if (departmentId!=0) {
		details.put("departmentId", departmentId);
	}
	
	if(request.getParameter("hinId")!=null){
		details.put("hinId", Integer.parseInt(request.getParameter("hinId")));
    }
	
	details.put("flag", "n");
	
	map = opdHandlerService.uploadAndViewDocuments(details);
	String jsp = "uploadAndViewDocuments";

	return new ModelAndView(jsp, "map", map);
}


public ModelAndView uploadAndViewDocuments(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> details = new HashMap<String, Object>();
	Box box=HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	int departmentId = 0;
	int hospitalId = 0;
	int hinId=0;
	String flag="n";	
	String uploadFrom ="NA";
	
	 MultipartFormDataRequest mrequest = null;
     if (MultipartFormDataRequest.isMultipartFormData(request))
        {
             try
             {
                 mrequest = new MultipartFormDataRequest(request);
             }
             catch (UploadException e)
             {
                 e.printStackTrace();
             }
             catch (IOException e)
             {
                 e.printStackTrace();
             }
        }
     if(mrequest.getParameter("hinId")!=null){
    	 hinId= Integer.parseInt((String)mrequest.getParameter("hinId"));
       	 details.put("hinId", Integer.parseInt((String)mrequest.getParameter("hinId")));
        }
     
     if(mrequest.getParameter("uploadFrom")!=null){
    	 uploadFrom= (String)mrequest.getParameter("uploadFrom");
       	 details.put("uploadFrom", (String)mrequest.getParameter("uploadFrom"));
        }
     
     if(mrequest.getParameter("visitId")!=null){
    	
       	 details.put("visitId", Integer.parseInt((String)mrequest.getParameter("visitId")));
        }
     
     if(mrequest.getParameter("inpatientId")!=null){
    	
       	 details.put("inpatientId", Integer.parseInt((String)mrequest.getParameter("inpatientId")));
        }
     
    
     String filename = "";
     String uploadURL="";
     if(uploadFrom.equalsIgnoreCase("OPD"))
     {
    	 uploadURL = getServletContext().getRealPath("/UploadedDocuments/OPD/"+hinId+"/");
     }
     if(uploadFrom.equalsIgnoreCase("IP"))
     {
    	 uploadURL = getServletContext().getRealPath("/UploadedDocuments/IP/"+hinId+"/");
     }
    
     String comments = "";
     String fileExtension=null;
     
     if (mrequest.getParameter("department") != null) {
 		departmentId = Integer.parseInt(request.getParameter("department"));
 	}if (departmentId!=0) {
 		details.put("departmentId", departmentId);
 	}
 	if(mrequest.getParameter("fileName")!= null){
        filename = mrequest.getParameter("fileName");
    }else {
    	if(box.getString("filename")!= null){
            filename = box.getString("filename");
    	}
     }
 	
    
    
    if(mrequest.getParameter("flag")!=null){
      	 flag = (String)mrequest.getParameter("flag");
       }
    details.put("flag", flag);
    
    if( mrequest.getParameter("comments")!= null){
        comments = mrequest.getParameter("comments");
        details.put("comments", comments);
    }
    details.put("uploadURL", uploadURL);
    
    if(flag.equalsIgnoreCase("y"))
    {    
      
            List fileUploadedList = null;           
            details.put("filename", filename);
            StringTokenizer strToken=new StringTokenizer(filename,".");
            Long fileSizeLimit = RequestConstants.MAX_FILE_SIZE;
            filename=strToken.nextToken();
            fileExtension=strToken.nextToken();
            String whiteList = "*."+fileExtension;             
            fileUploadedList = HMSUtil.uploadFileMaintenance(mrequest,uploadURL, whiteList,fileSizeLimit,filename);
    }    
         
        
     map = opdHandlerService.uploadAndViewDocuments(details);
     String jsp = "uploadAndViewDocuments";
     String msg="File Successfuly Uploaded.";
     //jsp += ".jsp";
     //map.put("contentJsp", jsp);
     map.put("message", msg);
     
     return new ModelAndView(jsp, "map", map);

}
public ModelAndView showPoliceIntimationDetail(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session = request.getSession();
	if (session.getAttribute("hospitalId") != null){
		hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
	}
	map = opdHandlerService.showPoliceIntimationDetail(hospitalId);
	String jsp = "policeIntimationWaitingList.jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
 }
public ModelAndView displayPoliceIntimationDetail(HttpServletRequest request,
		HttpServletResponse response) {
	Box box=HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	if(request.getParameter("opdPatientDetailId") != null){
		int opdPatientDetailId = Integer.parseInt(request.getParameter("opdPatientDetailId"));
		box.put("opdPatientDetailId", opdPatientDetailId);
	}
	int hospitalId=0;
	HttpSession session = request.getSession();
	if (session.getAttribute("hospitalId") != null){
		hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
	}
	
	map = opdHandlerService.displayPoliceIntimationDetail(box);
	String jsp = "policeIntimationDetail.jsp";
	map.put("contentJsp", jsp);
	return new ModelAndView("index", "map", map);
 }
public ModelAndView submitPoliceIntimationDetail(HttpServletRequest request,
		HttpServletResponse response) {
	Box box=HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int hospitalId=0;
	HttpSession session = request.getSession();
	if (session.getAttribute("hospitalId") != null){
		hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
		box.put("hospitalId", hospitalId);
	}
	map = opdHandlerService.submitPoliceIntimationDetail(box);
	boolean flag = false;
	if (map.get("flag") != null) {
		flag = (Boolean) map.get("flag");
	}
	String flagString="";
	if (map.get("flagString") != null) {
		flagString = (String) map.get("flagString");
	}
	int police_intimation_detail_id=0;
	if (map.get("police_intimation_detail_id") != null) {
		police_intimation_detail_id = (Integer) map.get("police_intimation_detail_id");
	}
	String message = "";
	if (flag) {
		message = "Record saved Successfully";
	} else {
		message = "Records Not Added/Updated!... Try Again.....";
		
	}
	String jsp = "msg_policeIntimation.jsp";
	map.put("contentJsp", jsp);
	map.put("message", message);
	map.put("flagString", flagString);
	map.put("police_intimation_detail_id", police_intimation_detail_id);
	return new ModelAndView("index", "map", map);
 
}


@SuppressWarnings("unused")
public ModelAndView generatePoliceIntimationDetail(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> requestParameters = new HashMap<String, Object>();
	String fileName = null;
	int police_intimation_detail_id=0;
	String flagString="";
	String jasper="";
	HttpSession session = request.getSession();
	String institute=null;
	int hospitalId = 0;
	session = request.getSession();
	requestParameters.put("hospitalId", session.getAttribute("hospitalId"));
  try{
	  if (request.getParameter("police_intimation_detail_id") != null  && !request.getParameter("police_intimation_detail_id").equals("0")) {
		  police_intimation_detail_id = Integer.parseInt(request.getParameter("police_intimation_detail_id"));
    		requestParameters.put("police_intimation_detail_id", police_intimation_detail_id);
		}
	  if (request.getParameter("flagString") != null  && !request.getParameter("flagString").equals("0")) {
		  flagString = request.getParameter("flagString");
    		
		}
	  
  }catch(Exception e){
	  
  }
    requestParameters.put("SUBREPORT_DIR",
	getServletContext().getRealPath("/Reports/"));
    Map<String, Object> connectionMap = opdHandlerService.getConnectionForReport();
					    if(flagString.equals("outpatient"))
					    {
					    	jasper="policeIntimation_id_out";	
					    }else{
					    	jasper="policeIntimation_id";
					    }
	HMSUtil.generateReport(jasper, requestParameters, (Connection) connectionMap.get("conn"), response,
			getServletContext());
					    
	return null;
}

public ModelAndView saveNursingCare(HttpServletRequest request,	HttpServletResponse response) {
	Box box=HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	map = opdHandlerService.saveNursingCare(box);
	boolean flag = false;
	if (map.get("flag") != null) {
		flag = (Boolean) map.get("flag");
	}
	
	try
	{	
		PrintWriter pw = response.getWriter();
		pw.write("success~~~"+flag);				
		
	}
	
	catch(Exception e)
	{		
		e.printStackTrace();
	}
	
	return null;
 
}

public ModelAndView openPopupForProcedureIssue(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	int deptId = 0;
	int hospitalId = 0;
	HttpSession session = request.getSession();
    int hinId=0;
    int procedureDetailsId=0;
    String deptNameforExternal=null;
    int visitId=0;
    String dateOfAdmission=null;
    int referralDept=0;
    int referralHospital=0;
    String userName=null;
    if(request.getParameter("hinId")!=null){
    	hinId = Integer.parseInt(request.getParameter("hinId"));
		map.put("hinId", hinId);
	}
    if(request.getParameter("procedureDetailsId")!=null){
    	procedureDetailsId = Integer.parseInt(request.getParameter("procedureDetailsId"));
		map.put("procedureDetailsId", procedureDetailsId);
	}
    if(request.getParameter("deptNameforExternal")!=null){
    	deptNameforExternal = request.getParameter("deptNameforExternal");
		map.put("deptNameforExternal", deptNameforExternal);
	}
  
    if(request.getParameter("visitId")!=null){
    	visitId = Integer.parseInt(request.getParameter("visitId"));
		map.put("visitId", visitId);
	}
    if(request.getParameter("dateOfAdmission")!=null){
    	dateOfAdmission = request.getParameter("dateOfAdmission");
		map.put("dateOfAdmission", dateOfAdmission);
	}
    if(request.getParameter("referralDept")!=null){
    	referralDept = Integer.parseInt(request.getParameter("referralDept"));
		map.put("referralDept", referralDept);
	}
    if(request.getParameter("referralHospital")!=null){
    	referralHospital = Integer.parseInt(request.getParameter("referralHospital"));
		map.put("referralHospital", referralHospital);
	}
    if(request.getParameter("userName")!=null){
    	userName = request.getParameter("userName");
		map.put("userName", userName);
	}
   
	if (session.getAttribute("deptId") != null)
		deptId = Integer.parseInt("" + session.getAttribute("deptId"));
	box.put("deptId", deptId);
	if (session.getAttribute("hospitalId") != null)
		hospitalId = Integer.parseInt("" + session.getAttribute("hospitalId"));
	box.put("hospitalId", hospitalId);
	
	map = opdHandlerService.getProcedureDetailsForPopUp(box);
	map.put("userName", userName);
	map.put("referralHospital", referralHospital);
	map.put("referralDept", referralDept);
	map.put("dateOfAdmission", dateOfAdmission);
	map.put("hinId", hinId);
	map.put("visitId", visitId);
	map.put("procedureDetailsId", procedureDetailsId);
	String jsp = "issueProcedurePopup";
	return new ModelAndView(jsp,"map",map);
}
public void checkForAlreadyIssuedPrescribtion(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	/*List objectList = new ArrayList();*/
	String val="";
	if(request.getParameter("val")!=null){
		val=request.getParameter("val");
	}
	
	String itemCode = "";
	if (request.getParameter("id") != null) {
		itemCode = (request.getParameter("id"));
	}
	dataMap.put("itemCode", itemCode);
	dataMap.put("val", val);
	int visitId=0;
	HttpSession session=request.getSession();
	int hospitalId=0;
	if(session.getAttribute("hospitalId")!=null){
		hospitalId=(Integer)session.getAttribute("hospitalId");
	}
	if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("0")){
		visitId=Integer.parseInt(request.getParameter("visitId"));
	}
	map = opdHandlerService.checkForAlreadyIssuedPrescribtion(val,visitId,hospitalId);
	
	boolean matched=false;
	if(map.get("matched")!=null){
		matched=(Boolean)map.get("matched");
	}
	StringBuffer sb = new StringBuffer();
	sb.append("<item>");
	sb.append("<alreadyIssued1>" + matched + "</alreadyIssued1>");
	sb.append("</item>");
	response.setContentType("text/xml");
	response.setHeader("Cache-Control", "no-cache");

	try {
		response.getWriter().write(
				"<?xml version='1.0' encoding='ISO-8859-1'?>");
		response.getWriter().write("<items>");
		response.getWriter().write(sb.toString());
		response.getWriter().write("</items>");
	} catch (Exception e) {
		e.printStackTrace();
	}
}


public ModelAndView doPatientRelease(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> dataMap = new HashMap<String, Object>();
	Map<String, Object> map = new HashMap<String, Object>();
	

	int visitId=0;
	HttpSession session=request.getSession();
	int hospitalId=0;
	int deptId =0;
	if(session.getAttribute("hospitalId")!=null){
		hospitalId=(Integer)session.getAttribute("hospitalId");
	}
	
	if(session.getAttribute("deptId")!=null){
	deptId = (Integer) session.getAttribute("deptId");
	}
		
	if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("0")){
		visitId=Integer.parseInt(request.getParameter("visitId"));
	}
	dataMap.put("hospitalId", hospitalId);
	dataMap.put("deptId", deptId);
	dataMap.put("visitId", visitId);
	
	
	map = opdHandlerService.doPatientRelease(dataMap);
	
	boolean flag = false;
	if (map.get("flag") != null) {
		flag = (Boolean) map.get("flag");
	}
	
	try
	{	
		PrintWriter pw = response.getWriter();
		pw.write("success~~~"+flag);				
		
	}
	
	catch(Exception e)
	{		
		e.printStackTrace();
	}
	
	return null;
	
	
}
public void openVideoForDisplay(HttpServletRequest request,HttpServletResponse response) throws IOException{
	
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	
	HttpSession session = request.getSession();
	
	
	int deptId=0; 
	int hospitalId=0;
	int imageId=0;
	String videopath="";

	if(null !=request.getParameter("imageIdd")){
		videopath= request.getParameter("imageIdd");
	}
	
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer)session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);	
	}
	if(session.getAttribute("deptId")!=null){
		 deptId = (Integer) session.getAttribute("deptId");
		mapForDS.put("deptId", deptId);
	}
	else if(request.getParameter("deptId")!=null){
		 deptId = Integer.parseInt(request.getParameter("deptId"));
	 	mapForDS.put("deptId", deptId);
	}
	
	OutputStream oImage = null;
	File file = new File(videopath);

    FileInputStream fin = new FileInputStream(file);
    byte b[] = new byte[(int)file.length()];
    fin.read(b);
    response.setContentType("video/mp4,video/mp3,video/webm,video/3gp,video/ogg,video/x-ms-wmv,video/3gpp,video/x-msvideo,video/x-flv,video/quicktime,video/x-ms-vob,video/x-msvideo");
    oImage = response.getOutputStream();
     oImage.write(b);
     oImage.flush();
     oImage.close();
}

public ModelAndView displayTravelHistory(HttpServletRequest request,HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> details = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	Box box=HMSUtil.getBox(request);
	int hinId = 0;
	int hospitalId = 0;
	int surveyId = 0;
	
	if (request.getParameter("hinId") != null) {
		hinId = Integer.parseInt(request.getParameter("hinId"));
		box.put("hinId", hinId);
	}
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer)session.getAttribute("hospitalId");
		box.put("hospitalId", hospitalId);
	}
	
	if(request.getParameter("surveyId")!=null){
		surveyId= Integer.parseInt(request.getParameter("surveyId"));
		box.put("surveyId", surveyId);
    }
	
	map = opdHandlerService.displayTravelHistory(box);
	String jsp = "viewPHTravelHistory";

	return new ModelAndView(jsp, "map", map);
}



		//added by amit das on 07-06-2016
		public ModelAndView	showChangeSchemeOPJsp(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> dataMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			
			int deptId = 0;
			int hospitalId = 0;
			String hinNo = null;
			String patientName = null;
			
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				dataMap.put(HOSPITAL_ID, hospitalId);
			}
			
			
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				session.setAttribute("deptId", deptId);
				dataMap.put(DEPARTMENT_ID, deptId);
			} else if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute(DEPT_ID);
				dataMap.put(DEPARTMENT_ID, deptId);
			}
			
			
			if (request.getParameter("hinNo") != null && !request.getParameter("hinNo").trim().equals("")) {
				hinNo = request.getParameter("hinNo");
				dataMap.put("hinNo", hinNo);
			}
			
			if (request.getParameter("patientName") != null  && !request.getParameter("patientName").trim().equals("")) {
				patientName = request.getParameter("patientName");
				dataMap.put("patientName", patientName);
			}
			
			
			map = opdHandlerService.getOutpatientListForSchemeChange(dataMap);

			jsp = PATIENT_SCHEME_OP_JSP;
			jsp += ".jsp";
			map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			
			return new ModelAndView("index", "map", map);
			
		}	
		
		
		//added by amit das on 07-06-2016
		public ModelAndView updateOutPatientScheme(HttpServletRequest request,
				HttpServletResponse response) {
			Box box=HMSUtil.getBox(request);
			HttpSession session = request.getSession();
			Map<String, Object> dataMap = new HashMap<String, Object>();
			
			int deptId = 0;
			int hospitalId = 0;
			int visitId = 0;
			
			if (session.getAttribute(HOSPITAL_ID) != null) {
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				box.put(HOSPITAL_ID, hospitalId);
			}
			
			
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				session.setAttribute("deptId", deptId);
				box.put(DEPARTMENT_ID, deptId);
			} else if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute(DEPT_ID);
				box.put(DEPARTMENT_ID, deptId);
			}
			
			if (request.getParameter("visitId") != null) {
				visitId = Integer.parseInt(request.getParameter("visitId"));
				box.put("visitId", visitId);
			}
			
			map = opdHandlerService.updatePatientScheme(box);
			
			
			jsp = PATIENT_SCHEME_OP_JSP;
			jsp += ".jsp";
			map.put("contentJsp", jsp);
			
			return new ModelAndView("index", "map", map);
		}
		
		public ModelAndView showNCDPattern(HttpServletRequest  request,HttpServletResponse response){
			Map<String,Object>map=new HashMap<String, Object>();
			Box box=HMSUtil.getBox(request);
			map = opdHandlerService.showNCDPattern(box);
			String jsp="ncdpattern";
			return new ModelAndView(jsp,"map",map);
		}
		public ModelAndView showRNTCPDetail(HttpServletRequest  request,HttpServletResponse response){
			Map<String,Object>map=new HashMap<String, Object>();
			Box box=HMSUtil.getBox(request);
			map = opdHandlerService.showRNTCPDetail(box);
			String jsp="rntcp_detail";
			return new ModelAndView(jsp,"map",map);
		}
		public ModelAndView showFpisRecord(HttpServletRequest  request,HttpServletResponse response){
			Map<String,Object>map=new HashMap<String, Object>();
			Box box=HMSUtil.getBox(request);
			map = opdHandlerService.showFpisRecord(box);
			String jsp="fpispattern";
			return new ModelAndView(jsp,"map",map);
		}
		
		/*@SuppressWarnings({ "unused", "unchecked" })
		public void displayCurrentPatientToken(HttpServletRequest request,
	            HttpServletResponse response) {
	    HttpSession session = request.getSession();
	    Map<String, Object> map = new HashMap<String, Object>();
	    List<Visit> visitTokenList = new ArrayList<Visit>();
	    int visitId =0;
	    int districtId=0;
	    int hospitalId=0;
	    int hospitalTypeId = 0;
	    
	    if(session.getAttribute("hospitalTypeId")!=null){
	    	hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
	        map.put("hospitalTypeId", hospitalTypeId);
	       }
	    
	    if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
		}
	    if(request.getParameter("visitId")!=null){
	      visitId =Integer.parseInt(request.getParameter("visitId"));
	      map.put("visitId", visitId);
	    }
	    int deptId =0;
	    if(session.getAttribute("deptId")!=null){
	     deptId = (Integer) session.getAttribute("deptId");
	     map.put("deptId", deptId);
	    }
	    int empId =0;
	    if(session.getAttribute("userId")!=null){
	      empId =(Integer) session.getAttribute("userId");
	      map.put("docId", empId);
	    }
	    
	    int token  =0;
	    if(request.getParameter("token")!=null){
	     String tokens=	request.getParameter("token");
	     token =Integer.parseInt(tokens.split("/")[1]);        
	    }
	    
	     opdHandlerService.displayCurrentPatientToken(map);
	    
	      String jsp = OPD_MAIN_JSP;
	      jsp += ".jsp";
	      title = "Patient Details";
	      map.put("deptId", deptId);
	      map.put("contentJsp", jsp);
	      map.put("title", title);
	      return new ModelAndView("index", "map", map);
	 }
*/
		// added by amit das on 22-06-2016
		public ModelAndView showWaitingQueueTokenJsp(HttpServletRequest request,
				HttpServletResponse response) throws IOException {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			int userId=0; 
			int hospitalId=0;
			String flag = null;
			String displayName = null; // added by amit das on 19-01-2017
			
			String displayDepartmentTypeName = null; // added by amit das on 19-01-2017
			int deptId=0;
		
			if(request.getParameter("displayName")!=null){
				displayName = request.getParameter("displayName");
				mapForDS.put("displayName",displayName); // added by amit das on 19-01-2017
				
			}
			
			int empId =0;
		    if(session.getAttribute("userId")!=null){
		      empId =(Integer) session.getAttribute("userId");
		      map.put("docId", empId);
		    }
			if(session.getAttribute("deptId")!=null){
				deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
				}
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer)session.getAttribute("hospitalId");
				mapForDS.put("hospitalId", hospitalId);	
			}
			
			if (session.getAttribute("userId") != null) {
				userId = (Integer)session.getAttribute("userId");
				mapForDS.put("userId", userId);	
			}
			
			if(request.getParameter("flag")!=null){
				flag =	request.getParameter("flag");
				mapForDS.put("flag", flag);
			}
			
			Users users = (Users)session.getAttribute("users");
		    if(users!=null){
		    	empId=users.getEmployee().getId();
		    	mapForDS.put("docId", empId);
		    }
		    
	
		    
			
			map = opdHandlerService.getDisplayDepartmentType(mapForDS);
			
			if(map.get("departmentTypeName")!=null){
				displayDepartmentTypeName = (String)map.get("departmentTypeName");
				if(displayDepartmentTypeName!=null && displayDepartmentTypeName.equalsIgnoreCase("OP Clinic")){
					
					if(session.getAttribute("hospitalId")!=null){
						hospitalId = (Integer)session.getAttribute("hospitalId");
						mapForDS.put("hospitalId", hospitalId);	
					}else if (map.get("hospitalId") != null) {
						hospitalId = (Integer)map.get("hospitalId");
						mapForDS.put("hospitalId", hospitalId);	
					}
						
					map = opdHandlerService.getWaitingQueue(mapForDS);
					jsp = WAITING_QUEUE_JSP;
				} else {
					map.put("displayName",displayName);
					
					map = opdHandlerService.showPopupTokenJsp(map);
					jsp = "otherTokenDisplay";
				}
			}
			
			
			
			map.put("flag", flag);
			map.put("displayName",displayName); // added by amit das on 19-01-2017
			
			
			
			
			//jsp += ".jsp";
			title = "Token Number";
			map.put("contentJsp", jsp);

			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		// added by amit das on 30-06-2016
		public ModelAndView getWaitingQueueTokens(HttpServletRequest request,
						HttpServletResponse response) throws IOException {
					Map<String, Object> map = new HashMap<String, Object>();
					Map<String, Object> mapForDS = new HashMap<String, Object>();
					HttpSession session = request.getSession();
					int userId=0; 
					int hospitalId=0;
					int deptId=0;
					String displayName = null;
					String flag = null;
					
					/*InetAddress IP=InetAddress.getLocalHost();
					ipAddress = IP.getHostAddress();*/
					// ipAddress = request.getRemoteAddr();
					if(request.getParameter("displayName")!=null){
						displayName = request.getParameter("displayName");
						mapForDS.put("displayName",displayName);
					}
					
					if(request.getParameter("flag")!=null && !request.getParameter("flag").equals("")){
						flag =	request.getParameter("flag");
						mapForDS.put("flag", flag);
					}
					
					
					if (session.getAttribute("hospitalId") != null) {
						hospitalId = (Integer)session.getAttribute("hospitalId");
						mapForDS.put("hospitalId", hospitalId);	
					}
					if(session.getAttribute("deptId")!=null){
						 deptId = (Integer) session.getAttribute("deptId");
						mapForDS.put("deptId", deptId);
					}
					
					if (session.getAttribute("userId") != null) {
						userId = (Integer)session.getAttribute("userId");
						mapForDS.put("userId", userId);	
					}
					int empId =0;
				    /*if(session.getAttribute("userId")!=null){
				      empId =(Integer) session.getAttribute("userId");
				      map.put("docId", empId);
				      mapForDS.put("docId", empId);
				    }*/
				    Users users = (Users)session.getAttribute("users");
				    if(users!=null){
				    	empId=users.getEmployee().getId();
				    	mapForDS.put("docId", empId);
				    }
				   
					map = opdHandlerService.getWaitingQueue(mapForDS);
					 map.put("docId", empId);
					jsp = "responseForWaitingQueueTokens";
						
					
					
					//jsp += ".jsp";
					//title = "Token Number";
					//map.put("contentJsp", jsp);

					map.put("title", title);
					return new ModelAndView(jsp, "map", map);
				}
		
		// added by amit das on 30-06-2016
		public ModelAndView showPopupTokens(HttpServletRequest request,
				HttpServletResponse response) throws IOException {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
			int deptId=0; 
			int hospitalId=0;
			
			if (session.getAttribute("hospitalId") != null) {
				hospitalId = (Integer)session.getAttribute("hospitalId");
				mapForDS.put("hospitalId", hospitalId);	
			}
			if(session.getAttribute("deptId")!=null){
				 deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
			}else if(request.getParameter("deptId")!=null){
				 deptId = Integer.parseInt(request.getParameter("deptId"));
			 	mapForDS.put("deptId", deptId);
			}
			
			map = opdHandlerService.showPopupTokenList(mapForDS);
			jsp = "responseForWaitingQueueToken";
			return new ModelAndView(jsp, "map", map);
		}
		
		// added by amit das on 22-07-2016
		public void showPatientSpecialityReport(
				HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> detailsMap = new HashMap<String, Object>();
			
			int visitId = 0;
			String specialityTemplateName = null;
			String reportName = null;
			String templateFlag=null;
			if(request.getParameter("visitId")!= null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			if(request.getParameter("specialityTemplateName")!= null){
				specialityTemplateName = request.getParameter("specialityTemplateName");
			}
			if(request.getParameter("templateFlag")!= null){
				templateFlag = request.getParameter("templateFlag");
			}
			
			
			if(request.getParameter("secondOpinionVisitId")!= null && !request.getParameter("secondOpinionVisitId").equals("")){
				visitId = Integer.parseInt(request.getParameter("secondOpinionVisitId"));
			}
			
			int hospitalId = 0;
			if(request.getParameter("hospitalId")!=null){
				hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
			}else{
				hospitalId =(Integer) session.getAttribute("hospitalId");
			}
			
			if(templateFlag!=null && templateFlag.equalsIgnoreCase("Template") && !templateFlag.equalsIgnoreCase("")){
					reportName="templateRpt";
				}
			/*
			if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("GLAUCOMA")){
				reportName="OphthalmologyGlaucoma";
			}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("RETINA")){
				reportName="OphthalmologyRetina";
			}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Case Record")){
				reportName="OphthalmologyCaseRecord";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Child And Adolescent")){
				reportName="childAndAdolescent";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Oncology")){
				reportName="oncology";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Holistic And Psychromatic Clinic")){
				reportName="holisticAndPsychromaticClin";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Sucide Prevention")){
				reportName="sucidePrevention";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("General Proforma")){
				reportName="generalProforma";
			}

			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("STD Case Records")){
				reportName="stdCaseRecords";
			}

			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Vesiculo-bullous disorders")){
				reportName="vesiculoBullousDisorders";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Paediatric Case Record")){
				reportName="paediatric_case_record";
			}
			
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Neonatology Unit")){
				reportName="paediatric_neonatology_unit";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Donor Evaluation")){
				reportName="donor_evaluation";
			}
			else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Recipient Evaluation")){
				reportName="recipent_evaluation";
			}
				*/
			else{
				
				if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Psychogeriatric Clinic")){
					reportName="psychogeriatricClinic";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Deaddiction Centre")){
				reportName="deaddictionCentre";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Respiratory Clinic")){
					reportName="respiratoryClinic";
					}
				
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("General Proforma")){
					reportName="generalProforma";
				}
				
				
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Pre Assessment Clinic")){
					reportName="PreAssessmentClinicRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Maxillofacial Trauma - Proforma")){
					reportName="maxillofaciaTraumaProformaRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Case Record Periodontics")){
					reportName="OPD_management";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Oral and Maxillofacial Surgery")){
					reportName="oralAndMaxillofacialSurgeryRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Implant Planning")){
					reportName="implantPlanningRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Removable Partial Prosthodontics")){
					reportName="removablePartialRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Fixed Prosthodontics")){
					reportName="fixedProsthodonticsRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Endodontics")){
					reportName="endodonticsRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Diagnostic Record Prosthodontics")){
					reportName="diagnosticRecordRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Maxillofacial Prosthesis")){
					reportName="maxillofacialProsthesisRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Oral Medicine Pathology")){
					reportName="pathologyOralMedicineRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Community Oral Health")){
					reportName="communityOralHealthCaseHistoryRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("PG CASE RECORD - Orthodontics")){
					reportName="ORTHODONTICS";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Pedodontics Vital Statistics")){
					reportName="PEDODONTICS";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Oral Medicine")){
					reportName="oralMedicineCaseRecordRpt";
				}
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Infertility Clinic")){
					reportName="infertilityClinicRpt";
				}
				
				else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Gynecology Case Sheet")){
					reportName="gynecologyCaseSheet";
				}
		
				
			}
			detailsMap = opdHandlerService.getConnectionForReport();
			
			
			parameters.put("opdvid", visitId);
			parameters.put("hospitalId", hospitalId);
			parameters.put("templateName", specialityTemplateName);
			parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
					"/Reports/"));
			try {
				
				HMSUtil.generateReport(reportName, parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());

			} catch (IllegalStateException e) {
				e.printStackTrace();
			}
		}

		// added by amit das on 22-07-2016
				public void showPatientSpecialityOpdDetailsIdReport(
						HttpServletRequest request, HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					HttpSession session = request.getSession();
					Map<String, Object> parameters = new HashMap<String, Object>();
					Map<String, Object> detailsMap = new HashMap<String, Object>();
					
					int opdPatientDetailId=0;
					String specialityTemplateName = null;
					String reportName = null;
					
					if(request.getParameter("opdPatientDetailId")!= null){
						opdPatientDetailId = Integer.parseInt(request.getParameter("opdPatientDetailId"));
					}
					
					if(request.getParameter("specialityTemplateName")!= null){
						specialityTemplateName = request.getParameter("specialityTemplateName");
					}
					
					int hospitalId = 0;
					if(request.getParameter("hospitalId")!=null){
						hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
					}else{
						hospitalId =(Integer) session.getAttribute("hospitalId");
						}
					
					//swarup 14/11/2017
					int visitId = 0;
					if(request.getParameter("visitId")!=null){
						visitId =Integer.parseInt(request.getParameter("visitId"));
					}else{
						visitId =(Integer) session.getAttribute("visitId");
					}
				
				 if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("ENT Examination")){
						reportName="ent_examination";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Medicine")){
						reportName="medicine";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Orthopedic")){
						reportName="orthopedic_op";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Leprosy Proforma")){
						reportName="leprosyProforma";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Contact Lens")){
						reportName="contact_lens_clinic_rpt";
					}
					
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Audiological Examination")){
						reportName="Audiological_Examination_Report";
					}
					 
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Nephrology Case Sheet")){
						reportName="Nephrology_Case_Sheet_Report";
					}
					 
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Family Planning")){
						reportName="FamilyPlanningGynecology";
					}
					 
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Phototherapy Proforma")){
						//reportName="phototherapy_proforma_report";
						reportName="phototherapyProforma";
					}
					 /*else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Nicu Case Record")){
						reportName="leprosyProforma";
					}*/
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Hemo Dialysis")){
						//reportName="phototherapy_proforma_report";
						reportName="hemoDialysisReport";
					}
					detailsMap = opdHandlerService.getConnectionForReport();
					parameters.put("opdPatientDetailId", opdPatientDetailId);
					parameters.put("hospitalId", hospitalId);
					parameters.put("visitid", visitId);
					//parameters.put("hinId", hinId);
					parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
							"/Reports/"));
					try {
						
						HMSUtil.generateReport(reportName, parameters,
								(Connection) detailsMap.get("conn"), response,
								getServletContext());

					} catch (IllegalStateException e) {
						e.printStackTrace();
					}
				}
		@SuppressWarnings("unchecked")
		public ModelAndView showNicuCaseRecordJsp(HttpServletRequest request,
				HttpServletResponse response) {
			Box box = HMSUtil.getBox(request);
			Map<String, Object> map = new HashMap<String, Object>();
			int hinId = 0;
			if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				box.put("hinId",hinId);
			}	
			int visitId=0;
			
			if(request.getParameter("visitId")!= null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				box.put("visitId",visitId);
			}
				map = opdHandlerService.showNicuCaseRecordJsp(box); 
			 jsp = "nicu_case_record_paediatrics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("hinId", hinId);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView patientDischargeAndAdmit(HttpServletRequest request,
				HttpServletResponse response) throws IOException {
			Box box = HMSUtil.getBox(request);
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			List<String> prescription_availableStatusList = new ArrayList<String>();
			List<String> pvmsNoList = new ArrayList<String>();
			List<Integer> frequencyList = new ArrayList<Integer>();
			List<Float> dosageList = new ArrayList<Float>();
			List<Float> totalList = new ArrayList<Float>();
			List<Float> actualTotalAfterMixList = new ArrayList<Float>(); //added by amit das on 19-11-2016
			List<Integer> noOfDaysList = new ArrayList<Integer>();
			List<Integer> routes = new ArrayList<Integer>();
			List<Integer> instrunctionList = new ArrayList<Integer>();
			List<String> spLinstrunctionList = new ArrayList<String>();
			String prescription_availableStatus="";
			
			int hinId=0;
			if (request.getParameter("hinId")!=null && !request.getParameter("hinId").equals("")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			int visitId=0;
			if (request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")) {
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			
			int hdb = 0;
			if (null !=request.getParameter("hdb") && Integer.parseInt(request.getParameter("hdb")) >= 0) {
				hdb = Integer.parseInt(request.getParameter("hdb"));
			}
			
			String[] pvmsArr = new String[hdb+1];
			int j = 0;
			
			StringBuffer parkPrescriptions=new StringBuffer();
			
			for (int i = 0; i <=hdb; i++)  {
				if (request.getParameter("nomenclature" + j)!=null && !request.getParameter("nomenclature" + j).equals("")) {
					
					String nomenclature = request.getParameter("nomenclature" + j);
					int index1 = nomenclature.lastIndexOf("[");
					int index2 = nomenclature.lastIndexOf("]");
					index1++;
					
					pvmsArr[i] = nomenclature.substring(index1,	index2);
					
					parkPrescriptions.append(nomenclature.substring(0, index1-1)+"|");
					String pvmsNo=null;
					if(request.getParameter("pvmsNo"+j)!=null)
	                {
	                	pvmsNo = request.getParameter("pvmsNo"+j);

	                }
					
					/*String durationPrescription=null;
	        		if(request.getParameter("durationPrescriptionTab"+j)!=null){
	        			durationPrescription = request.getParameter("durationPrescriptionTab"+j);
	        			durationPrescriptionList.add(durationPrescription);
	        		}*/
					int frequencyId=0;
			 		if(request.getParameter("frequency"+ j)!=null && !request.getParameter("frequency"+ j).equals("")){
			 			frequencyId = Integer.parseInt(request.getParameter("frequency"+ j));
			 		}
			 		
			 		int noOfDays=0;
			 		if(request.getParameter("noOfDays"+ j)!=null && !request.getParameter("noOfDays"+ j).equals("")){
			 			noOfDays = Integer.parseInt(request.getParameter("noOfDays"+ j));
			 		}
			 		
			 		Float dosage=0.0f;
			 		if(request.getParameter("dosage" + j)!=null && !request.getParameter("dosage" + j).equals("")){
			 			dosage = Float.valueOf(request.getParameter("dosage" + j));
			 		}
			 		
			 		Integer instrunction=0;
			 		if(request.getParameter("instrunction" + j)!=null && !request.getParameter("instrunction" + j).equals("")){
			 			instrunction = Integer.parseInt(request.getParameter("instrunction" + j));
			 		}
			 		
			 		String splInstrunctionpTab="";
			 		if(request.getParameter("splInstrunction" + j)!=null && !request.getParameter("splInstrunction" + j).equals("")){
			 			splInstrunctionpTab = request.getParameter("splInstrunction" + j);
			 		}
			 		
			 		Integer route=0;
			 		if(request.getParameter("route" + j)!=null && !request.getParameter("route" + j).equals("")){
			 			route = Integer.parseInt(request.getParameter("route" + j));
			 		}
			 		
			 		float actualTotalAfterMix=0.0f;
			 		if(request.getParameter("mixable" + j)!=null && request.getParameter("mixable" + j).equalsIgnoreCase("Y")){
			 			
			 			if(request.getParameter("actualTotalAfterMix" + j)!=null && !request.getParameter("actualTotalAfterMix" + j).equals("")){
			 				actualTotalAfterMix = Float.parseFloat(request.getParameter("actualTotalAfterMix" + j));
				 		}
			 			
			 		}
			 		
			 		float total=0.0f;
			 		if(request.getParameter("total" + j)!=null && !request.getParameter("total" + j).equals("")){
			 			total = Float.parseFloat(request.getParameter("total" + j));
			 		}
			 		
			 		if(request.getParameter("prescription_availableStatus" + j)!=null && !request.getParameter("prescription_availableStatus" + j).equals("")){
		 				prescription_availableStatus = request.getParameter("prescription_availableStatus" + j);
			 		}else{
			 			prescription_availableStatus = null;
			 		}
			 		prescription_availableStatusList.add(prescription_availableStatus);
			 		pvmsNoList.add(pvmsArr[i]);
			 		frequencyList.add(frequencyId);
					dosageList.add(dosage);
					actualTotalAfterMixList.add(actualTotalAfterMix); // added by amit das in 19-11-2016
					totalList.add(total);
					noOfDaysList.add(noOfDays);
					
					spLinstrunctionList.add(splInstrunctionpTab);
					instrunctionList.add(instrunction);
					routes.add(route);
					
				}
				j++;
			}
			
			int hospitalId=0;
			if(session.getAttribute("hospitalId")!=null){
				hospitalId=(Integer)session.getAttribute("hospitalId");
			}
			int userId=0;
			if(session.getAttribute("userId")!=null){
				userId=(Integer) session.getAttribute("userId");
			}
			
			map.put("userId", userId);
			map.put("hospitalId", hospitalId);
			map.put("prescription_availableStatusList", prescription_availableStatusList);
			map.put("parkPrescriptions", parkPrescriptions);
			map.put("pvmsNoList", pvmsNoList);

			map.put("frequenciesList", frequencyList);
			map.put("dosageList", dosageList);
			map.put("noOfDaysList", noOfDaysList);
			map.put("routes", routes);
			map.put("instrunctionsList", instrunctionList);
			map.put("spLinstrunctionList", spLinstrunctionList);
			map.put("totalList", totalList);
			map.put("actualTotalAfterMixList", actualTotalAfterMixList);
			map.put("prescriptionNo", generatePrecriptionNo(hinId));
			box.put("visitId", visitId);
			map.put("box", box);
			map = opdHandlerService.patientDischargeAndAdmit(map);
			if ((Integer) map.get("flag") > 0) {
				map.put("msg", "Observation saved successfully.");
			}
			jsp = "observation_ward.jsp";
			map.put("contentJsp", jsp);
			return new ModelAndView("index", "map", map);
		}
		
		public List<OpdAntenatalCardTrimester> getOpdAntenatalCardTrimester(HttpServletRequest request){
			LOGGER.info("getOpdAntenatalCardTrimester calling ");
			List<OpdAntenatalCardTrimester> antCardTrimeList=new ArrayList<OpdAntenatalCardTrimester>();
			int hdb=0,hdb1=0,hdb2=0,hdb3=0,weight=0;
			String ftdate="",gaWeeks=null,gaDays=null,bpSystolics=null,bpDiastolics=null,pvTrimes=null,paTrimes=null,urinAlbumin=null;
			Date trimesDate=null;
			//govind code 5-8
			int ftCount=0,stCount=0,ttCount=0,f4tCount=0;//govind code 5-8
			
			//govind code 5-8
			if (request.getParameter("ftCount") != null
					&& (!request.getParameter("ftCount").equals(""))) {
				ftCount = Integer.parseInt(request.getParameter("ftCount"));
			}
		
			if (request.getParameter("stCount") != null
					&& (!request.getParameter("stCount").equals(""))) {
				stCount = Integer.parseInt(request.getParameter("stCount"));
			}
		
			if (request.getParameter("ttCount") != null
					&& (!request.getParameter("ttCount").equals(""))) {
				ttCount = Integer.parseInt(request.getParameter("ttCount"));
			}
	
			if (request.getParameter("f4tCount") != null
					&& (!request.getParameter("f4tCount").equals(""))) {
				f4tCount = Integer.parseInt(request.getParameter("f4tCount"));
			}
			//govind code 5-8 end
			if(ftCount==1){
			if (request.getParameter("hdb") != null
					&& (!request.getParameter("hdb").equals(""))) {
				hdb = Integer.parseInt(request.getParameter("hdb"));//first trimester total data count
				antCardTrimeList=getTrimester(request, antCardTrimeList, hdb, 1, "ft");
			}
			}
			if(stCount==1){
			if (request.getParameter("hdb1") != null
					&& (!request.getParameter("hdb1").equals(""))) {
				hdb1 = Integer.parseInt(request.getParameter("hdb1"));//second trimester total data count
				antCardTrimeList=getTrimester(request, antCardTrimeList, hdb1, 2, "st");
			}
			}
			if(ttCount==1){
			if (request.getParameter("hdb2") != null
					&& (!request.getParameter("hdb2").equals(""))) {
				hdb2 = Integer.parseInt(request.getParameter("hdb2"));//third trimester total data count
				antCardTrimeList=getTrimester(request, antCardTrimeList, hdb2, 3, "tt");
			}
			}
			if(f4tCount==1){
			if (request.getParameter("hdb3") != null
					&& (!request.getParameter("hdb3").equals(""))) {
				hdb3 = Integer.parseInt(request.getParameter("hdb3"));//fourth trimester total data count
				antCardTrimeList=getTrimester(request, antCardTrimeList, hdb3, 4, "f4t");
			}
			}
				
			return antCardTrimeList;
		}
		
		public List<OpdAntenatalCardTrimester> getTrimester(HttpServletRequest request,List<OpdAntenatalCardTrimester> antCardTrimeList,
				int hdb,int type,String trimType){
			BigDecimal weight= new BigDecimal(0);
			String ftdate="",gaWeeks=null,gaDays=null,bpSystolics=null,bpDiastolics=null,pvTrimes=null,paTrimes=null,urinAlbumin=null;
			Date trimesDate=null;
			OpdAntenatalCardTrimester antCardTrime=null;
			String cvs="",respSystem="",antFtdate="",antFtAdvise="";
			//OpdAntenatalCardTrimester antCardTrime=new OpdAntenatalCardTrimester();
			for(int u=0;u<=hdb;u++){
				 ftdate=gaWeeks=gaDays=bpSystolics=bpDiastolics=pvTrimes=paTrimes=urinAlbumin=null;		
				 cvs=respSystem=antFtdate=antFtAdvise="";
				if (request.getParameter(trimType+"date"+u) != null
						&& (!request.getParameter(trimType+"date"+u).equals(""))) {
					ftdate = request.getParameter(trimType+"date"+u);
					trimesDate=HMSUtil.convertStringTypeDateToDateType(ftdate);
				}
				if (request.getParameter(trimType+"GA1"+u) != null
						&& (!request.getParameter(trimType+"GA1"+u).equals(""))) {
					gaWeeks = request.getParameter(trimType+"GA1"+u);
				}
				if (request.getParameter(trimType+"GA2"+u) != null
						&& (!request.getParameter(trimType+"GA2"+u).equals(""))) {
					gaDays = request.getParameter(trimType+"GA2"+u);
				}				
				if (request.getParameter(trimType+"systolic"+u) != null
						&& (!request.getParameter(trimType+"systolic"+u).equals(""))) {
					bpSystolics = request.getParameter(trimType+"systolic"+u);
				}
				if (request.getParameter(trimType+"diastolic"+u) != null
						&& (!request.getParameter(trimType+"diastolic"+u).equals(""))) {
					bpDiastolics = request.getParameter(trimType+"diastolic"+u);
				}
				if (request.getParameter(trimType+"PA"+u) != null
						&& (!request.getParameter(trimType+"PA"+u).equals(""))) {
					paTrimes = request.getParameter(trimType+"PA"+u);
				}
				
				if (request.getParameter(trimType+"PA"+u) != null
						&& (!request.getParameter(trimType+"PA"+u).equals(""))) {
					paTrimes = request.getParameter(trimType+"PA"+u);
				}
				
				
				if (request.getParameter(trimType+"Weight"+u) != null
						&& (!request.getParameter(trimType+"Weight"+u).equals(""))) {
					weight = new BigDecimal(request.getParameter(trimType+"Weight"+u));
				}				
			
												
				if(trimesDate!=null && gaWeeks!=null && gaDays!=null && bpSystolics!=null
						&& bpDiastolics!=null && paTrimes!=null && weight.compareTo(new BigDecimal(0))>0){
				antCardTrime=new OpdAntenatalCardTrimester();
					
				antCardTrime.setTrimesDate(trimesDate);
				antCardTrime.setGaWeeks(gaWeeks);
				antCardTrime.setGaDays(gaDays);
				antCardTrime.setBpSystolics(bpSystolics);
				antCardTrime.setBpDiastolics(bpDiastolics);
				antCardTrime.setPaTrimes(paTrimes);
				antCardTrime.setWeight(weight);
				antCardTrime.setTrimesterType(type);	

				if(trimType.equals("ft")){
					if (request.getParameter(trimType+"PV"+u) != null
							&& (!request.getParameter(trimType+"PV"+u).equals(""))) {
						pvTrimes = request.getParameter(trimType+"PV"+u);
						antCardTrime.setPvTrimes(pvTrimes);
					}
					
				}else{
					if (request.getParameter(trimType+"UrinAl"+u) != null
							&& (!request.getParameter(trimType+"UrinAl"+u).equals(""))) {
						urinAlbumin = request.getParameter(trimType+"UrinAl"+u);
						antCardTrime.setUrinAlbumin(urinAlbumin);
					}
					
				}
				
				//govind code 20-8
				if(type==1){
					
				if (request.getParameter("ftCVS") != null
						&& (!request.getParameter("ftCVS").equals(""))) {
					cvs = request.getParameter("ftCVS");
					antCardTrime.setCvs(cvs);
				}
				
				if (request.getParameter("ftRespSys") != null
						&& (!request.getParameter("ftRespSys").equals(""))) {
					respSystem = request.getParameter("ftRespSys");
					antCardTrime.setRespSystem(respSystem);
				}
				
				if (request.getParameter("ftSubDate") != null
						&& (!request.getParameter("ftSubDate").equals(""))) {
					antFtdate = request.getParameter("ftSubDate");
					antCardTrime.setAntFtdae(HMSUtil.convertStringTypeDateToDateType(antFtdate));
					
				}
				
				if (request.getParameter("ftAdvise") != null
						&& (!request.getParameter("ftAdvise").equals(""))) {
					antFtAdvise = request.getParameter("ftAdvise");
					antCardTrime.setFtAdvice(antFtAdvise);
				}
				}
				//govind code 20-8
				
				antCardTrimeList.add(antCardTrime);
				}
				
				ftdate="";gaWeeks=null;gaDays=null;bpSystolics=null;bpDiastolics=null;pvTrimes=null;paTrimes=null;urinAlbumin=null;
				trimesDate=null;weight=new BigDecimal(0);
			}
			
			return antCardTrimeList;
		}
		
		//code added By rajdeo
		@SuppressWarnings("unchecked")
		public ModelAndView showDeaddictionCentreJsp(HttpServletRequest request,
				HttpServletResponse response) {

			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();	
			HttpSession session = request.getSession();
			int hinId = 0;
			int visitId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			if(request.getParameter("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			int deptId = 0;
			if(session.getAttribute("deptId") != null){
			deptId = (Integer) session.getAttribute("deptId");
			}
			requestParametersMap.put("hinId", hinId);
			requestParametersMap.put("visitId", visitId);
			requestParametersMap.put("deptId", deptId);			
			
			map=opdHandlerService.showDeaddictionCentreJsp(requestParametersMap);
			String jsp = "deaddiction_centre";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		//code added by rajdeo
		@SuppressWarnings("unchecked")
		public ModelAndView showPsychogeriatricClinicJsp(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
					
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();	
			HttpSession session = request.getSession();
			int hinId = 0;
			int visitId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			if(request.getParameter("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			int deptId = 0;
			if(session.getAttribute("deptId") != null){
			deptId = (Integer) session.getAttribute("deptId");
			}
			requestParametersMap.put("hinId", hinId);
			requestParametersMap.put("visitId", visitId);
			requestParametersMap.put("deptId", deptId);			
			
			map=opdHandlerService.showPsychogeriatricClinicJsp(requestParametersMap);
			map.put("hinId", hinId);
			String jsp = "PsychogeriatricClinic";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		public void checkMappedCharge(HttpServletRequest request,HttpServletResponse response) throws IOException {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			String chargeName=request.getParameter("chargeName");
			map.put("chargeName",chargeName);
			int departmentId=0;
			if (session.getAttribute("deptId") != null) {
				departmentId = (Integer) session.getAttribute("deptId");
				map.put("departmentId", departmentId);
			}
			map = opdHandlerService.checkMappedCharge(map);
			int count=(Integer)map.get("count");
			int chargecodeId=0;
			if(map.get("chargecodeId")!=null){
				 chargecodeId=(Integer)map.get("chargecodeId");
			}	 
			PrintWriter  out=response.getWriter();
			if(count>0)
				out.write("success|"+chargecodeId);
			else
				out.write("failed|0");
		}
		

		private List<OpdAntcardMenstrualHistry> getOpdAntCardMensHistory(
				HttpServletRequest request) {
			List<OpdAntcardMenstrualHistry> antCardMenstHistList=new ArrayList<OpdAntcardMenstrualHistry>();
			int count=0,hdbMH=0;
			Long regulartyCycle=null,frequency=null,volume=null,plScore=null;
			String mhDateStr=null,mhTime=null,lmpDateStr=null,pmpDateStr=null,
					cycleDuration=null,duration=null,characterstic=null,assoctComplain=null;
			Date mhDate=null,lmpDate=null,pmpDate=null;
			
			if (request.getParameter("hdbMH") != null
					&& (!request.getParameter("hdbMH").equals(""))) {
				hdbMH = Integer.parseInt(request.getParameter("hdbMH"));
			}
			
			
		
			for(int u=0;u<=hdbMH;u++){				
				if (request.getParameter("mhDate"+u) != null
						&& (!request.getParameter("mhDate"+u).equals(""))) {
					mhDateStr = request.getParameter("mhDate"+u);
					mhDate=HMSUtil.convertStringTypeDateToDateType(mhDateStr);
					count=count+1;
				}
				if (request.getParameter("mhTime"+u) != null
						&& (!request.getParameter("mhTime"+u).equals(""))) {
					mhTime = request.getParameter("mhTime"+u);
					count=count+1;
				}
				if (request.getParameter("plScore"+u) != null
						&& (!request.getParameter("plScore"+u).equals(""))) {
					plScore = Long.parseLong(request.getParameter("plScore"+u));
					count=count+1;
				}
				if (request.getParameter("lmpDate"+u) != null
						&& (!request.getParameter("lmpDate"+u).equals(""))) {
					lmpDateStr = request.getParameter("lmpDate"+u);
					lmpDate=HMSUtil.convertStringTypeDateToDateType(lmpDateStr);
					count=count+1;
				}
				if (request.getParameter("pmpDate"+u) != null
						&& (!request.getParameter("pmpDate"+u).equals(""))) {
					pmpDateStr = request.getParameter("pmpDate"+u);
					pmpDate=HMSUtil.convertStringTypeDateToDateType(pmpDateStr);
					count=count+1;
				}
				if (request.getParameter("regulartyCycle"+u) != null
						&& (!request.getParameter("regulartyCycle"+u).equals(""))) {
					regulartyCycle = Long.parseLong(request.getParameter("regulartyCycle"+u));
					count=count+1;
				}
				if (request.getParameter("cycleDuration"+u) != null
						&& (!request.getParameter("cycleDuration"+u).equals(""))) {
					cycleDuration = request.getParameter("cycleDuration"+u);
					count=count+1;
				}
				if (request.getParameter("frequency"+u) != null
						&& (!request.getParameter("frequency"+u).equals(""))) {
					frequency = Long.parseLong(request.getParameter("frequency"+u));
					count=count+1;
				}
				if (request.getParameter("duration"+u) != null
						&& (!request.getParameter("duration"+u).equals(""))) {
					duration = request.getParameter("duration"+u);
					count=count+1;
				}
				if (request.getParameter("volume"+u) != null
						&& (!request.getParameter("volume"+u).equals(""))) {
					volume = Long.parseLong(request.getParameter("volume"+u));
					count=count+1;
				}
				if (request.getParameter("characterstic"+u) != null
						&& (!request.getParameter("characterstic"+u).equals(""))) {
					characterstic = request.getParameter("characterstic"+u);
					count=count+1;
				}
				if (request.getParameter("assoctComplain"+u) != null
						&& (!request.getParameter("assoctComplain"+u).equals(""))) {
					assoctComplain = request.getParameter("assoctComplain"+u);
					count=count+1;
				}
				
				if(count==12){
					OpdAntcardMenstrualHistry antCardMenstHist=new OpdAntcardMenstrualHistry();
					
					antCardMenstHist.setMenstHistDate(mhDate);
					antCardMenstHist.setMenstHistTime(mhTime);
					antCardMenstHist.setMenstHistPl(plScore);
					antCardMenstHist.setLmpDate(lmpDate);
					antCardMenstHist.setPmpDate(pmpDate);
					antCardMenstHist.setRegulrCycle(regulartyCycle);
					antCardMenstHist.setCycleDuration(cycleDuration);
					antCardMenstHist.setFrequency(frequency);
					antCardMenstHist.setDuration(duration);
					antCardMenstHist.setVolume(volume);
					antCardMenstHist.setCharStict(characterstic);
					antCardMenstHist.setAssocCompl(assoctComplain);
					
					antCardMenstHistList.add(antCardMenstHist);
					
				}
			}
			
			return antCardMenstHistList;
		}
		
		@SuppressWarnings("unchecked")
		public ModelAndView showENTExaminationJsp(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int visitId = 0;
			if(request.getParameter("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				box.put("visitId", visitId);
			}
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				box.put("hinId", hinId);
			}
			map = opdHandlerService.showENTExaminationJsp(box);
			String jsp = "EntExamination";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView showDermatologyLeprosyProformaJsp(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();	
			HttpSession session = request.getSession();
			int hinId = 0;
			int visitId = 0;
			int deptId = 0;
			int patientAge=0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			if(request.getParameter("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			if( session.getAttribute("deptId") != null )
			{
				deptId = (Integer) session.getAttribute("deptId");
			}
			if(request.getParameter("patientAge") != null){
				patientAge = Integer.parseInt(request.getParameter("patientAge"));
			}
			
			requestParametersMap.put("hinId", hinId);
			requestParametersMap.put("deptId", deptId);
			map=opdHandlerService.showDermatologyLeprosyProformaJsp(requestParametersMap);	
			String jsp = "dermatology_leprosy_proforma";
			map.put("patientAge", patientAge);
			map.put("hinId", hinId);
			map.put("visitId", visitId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		// added by amit das on 07-09-2016
		@SuppressWarnings("unchecked")
		public ModelAndView getEpisodeDetails(HttpServletRequest request,HttpServletResponse response) {

			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			map = opdHandlerService.getPatientEpisodeDetails(box);
			
			String jsp = "patientEpisodeDetail";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		// added by amit das on 08-09-2016
		@SuppressWarnings("unchecked")
		public ModelAndView getEpisodeList(HttpServletRequest request,HttpServletResponse response) {

			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			String hinNo = box.get("hin_no");
			map = opdHandlerService.getPatientEpisodeList(hinNo);
			
			String jsp = "responseForPatientEpisodes";
			map.put("contentJsp", jsp);
			map.put("title", title);
			//map.put("patientEpisodeList", patientEpisodeList);
			return new ModelAndView(jsp, "map", map);
		}
		
//added by govind on 15-9-2016
		public ModelAndView updatePrescriptionTamplate(HttpServletRequest request,HttpServletResponse response){
			Map<String, Object> map = new HashMap<String, Object>();
			try{
				session=request.getSession();
				Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
				Integer userId=(Integer) session.getAttribute(USER_ID);
				Integer deptId=(Integer) session.getAttribute(DEPT_ID);
				HttpSession session = request.getSession();
				Box box=HMSUtil.getBox(request);
				box.put(HOSPITAL_ID, hospitalId);
				box.put(USER_ID, userId);
				box.put(DEPT_ID, deptId);
				
				map.put("hospitalId", hospitalId);
				
				map=opdHandlerService.updatePrescriptionTamplate(box);
				}
			catch(Exception e){
					e.printStackTrace();
				}
			    jsp = "opdtreatmentTemplate";
			    map.put("contentJsp", jsp);
				return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView deletePrescriptionTamplate(HttpServletRequest request,HttpServletResponse response){
			Map<String, Object> map = new HashMap<String, Object>();
			try{
				Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
				Integer userId=(Integer) session.getAttribute(USER_ID);
				Integer deptId=(Integer) session.getAttribute(DEPT_ID);
				Box box=HMSUtil.getBox(request);
				box.put(HOSPITAL_ID, hospitalId);
				box.put(USER_ID, userId);
				box.put(DEPT_ID, deptId);
				map.put("hospitalId", hospitalId);		
				map=opdHandlerService.deletePrescriptionTamplate(box);
				}
			catch(Exception e){
					e.printStackTrace();
				}
			    jsp = "opd_responseForPrescriptionTemplate";
			    map.put("contentJsp", jsp);
				return new ModelAndView(jsp, "map", map);
		}

		public ModelAndView showMedicineTempleJsp(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			map = opdHandlerService.getMedicineTemplateDetails(box);
			String jsp = "medicineTemplate";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView showOrthopedicJsp(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();			
			int hinId = 0;
			int visitId=0;
			String summary = "";
			if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			if(request.getParameter(VISIT_ID) != null){
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));				
			}
			requestParametersMap.put("visitId", visitId);
			requestParametersMap.put("hinId", hinId);
			map=opdHandlerService.showOrthopedicJsp(requestParametersMap);
			//Added by Arbind on 03-01-2018
			if(request.getParameter("Summary") != null) {
				summary = (String) request.getParameter("Summary");
			}
			String jsp = "";
			if(summary.equals("Summary"))
				jsp = "response_orthopedics_summary";
			else
				jsp = "orthopedics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		//added by swarup 13/11/2017-begin
				public ModelAndView showAudiologicalExaminationJsp(HttpServletRequest request,HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					Map<String, Object> requestParametersMap1 = new HashMap<String, Object>();	
					List<Visit> patientList = new ArrayList<Visit>();
					 	
					int hinId = 0;
					int visitId=0;
					String patientName = null;
					
					if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
						 patientName = request.getParameter("patientName");
						 requestParametersMap1.put("patientName", patientName);
					}
					
					if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
						hinId = Integer.parseInt(request.getParameter("hinId"));
						
					}
					if(request.getParameter(VISIT_ID) != null){
						visitId = Integer.parseInt(request.getParameter(VISIT_ID));	
						
					}
					
					requestParametersMap1.put("patientName", patientName);
					requestParametersMap1.put("visitId", visitId);
					requestParametersMap1.put("hinId", hinId);
					map=opdHandlerService.showAudiologicalExaminationJsp(requestParametersMap1);	
					
					String jsp = "audiologicalExaminationTemplateJsp";
					map.put("contentJsp", jsp);
					map.put("title", title);
					return new ModelAndView(jsp, "map", map);
					
				}
				
				//ended--
				
				
				//Added by abhishek  24-11-2017  
				public ModelAndView showNephrologyCaseSheetJsp(HttpServletRequest request,HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					Map<String, Object> reqParaMap = new HashMap<String, Object>();	
					List<Visit> patientList = new ArrayList<Visit>();
					HttpSession session = request.getSession();
					Box box = HMSUtil.getBox(request);	
					int hinId = 0;
					int visitId=0;
					String patientName = null;
				 	 	if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
						hinId = Integer.parseInt(request.getParameter("hinId"));
			 		}
				 	
					if(request.getParameter("visitId") != null){
						visitId = Integer.parseInt(request.getParameter("visitId"));	
				 	}
					
				 	reqParaMap.put("visitId", visitId);
					reqParaMap.put("hinId", hinId);
					map=opdHandlerService.showNephrologyCaseSheetJsp(reqParaMap);	
			
					String jsp = "nephroCaseSheet";
					map.put("contentJsp", jsp);
					map.put("title", title);
					return new ModelAndView(jsp, "map", map);
			 	}
		
	// added by Amit Das on 02-11-2016
	public ModelAndView showIPDepartmentMappingJsp(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		box.put("hospitalId", (Integer) session.getAttribute("hospitalId"));

		map = opdHandlerService.getIpDeapartmentMappings(box);

		jsp = "ipDepartmentMapping" + ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	// added by Amit Das on 02-11-2016
	public ModelAndView addIpDepartmentsMapping(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		mapForDs.put("hospitalId", (Integer) session.getAttribute("hospitalId"));

		if (request.getParameter("displayName") != null
				&& !request.getParameter("displayName").trim().equals(""))
			mapForDs.put("displayName", request.getParameter("displayName"));

		if (request.getParameterValues("departmentIds") != null
				&& !request.getParameterValues("departmentIds").equals("")) {
			String[] departmentIdStr = request
					.getParameterValues("departmentIds");
			List<Integer> departmentIdsList = new ArrayList<Integer>();
			for (int j = 0; j < departmentIdStr.length; j++) {
				departmentIdsList.add(Integer.parseInt((departmentIdStr[j])));
			}
			mapForDs.put("departmentIdsList", departmentIdsList);
		}

		map = opdHandlerService.addIpDepartmentsMapping(mapForDs);

		jsp = "ipDepartmentMapping" + ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	// added by Amit Das on 02-11-2016
	public ModelAndView editIpDepartmentsMapping(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		mapForDs.put("hospitalId", (Integer) session.getAttribute("hospitalId"));

		mapForDs.put("tokenDisplayIpId",
				request.getParameter("tokenDisplayIpId"));

		if (request.getParameter("displayName") != null
				&& !request.getParameter("displayName").trim().equals(""))
			mapForDs.put("displayName", request.getParameter("displayName"));

		if (request.getParameterValues("departmentIds") != null
				&& !request.getParameterValues("departmentIds").equals("")) {
			String[] departmentIdStr = request
					.getParameterValues("departmentIds");
			List<Integer> departmentIdsList = new ArrayList<Integer>();
			for (int j = 0; j < departmentIdStr.length; j++) {
				departmentIdsList.add(Integer.parseInt((departmentIdStr[j])));
			}
			mapForDs.put("departmentIdsList", departmentIdsList);
		}

		map = opdHandlerService.editIpDepartmentsMapping(mapForDs);

		jsp = "ipDepartmentMapping" + ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}

	// added by Amit Das on 02-11-2016
	public ModelAndView deleteIpDepartmentsMapping(HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDs = new HashMap<String, Object>();
		HttpSession session = request.getSession();

		if (request.getParameter("displayName") != null
				&& !request.getParameter("displayName").trim().equals(""))
			mapForDs.put("displayName", request.getParameter("displayName"));

		mapForDs.put("hospitalId", (Integer) session.getAttribute("hospitalId"));

		mapForDs.put("tokenDisplayIpId",
				request.getParameter("tokenDisplayIpId"));

		map = opdHandlerService.deleteIpDepartmentsMapping(mapForDs);

		jsp = "ipDepartmentMapping" + ".jsp";
		map.put("contentJsp", jsp);

		return new ModelAndView("index", "map", map);
	}
				public ModelAndView showRespiratoryClinicJsp(HttpServletRequest request,HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					Box box = HMSUtil.getBox(request);
					int hinId = 0;
					if(request.getParameter("hinId") != null){
						hinId = Integer.parseInt(request.getParameter("hinId"));
						box.put("hinId", hinId);
					}
					int visitId=0;
					
					if(request.getParameter("visitId")!= null){
						visitId = Integer.parseInt(request.getParameter("visitId"));
						box.put("visitId",visitId);
					}
					map = opdHandlerService.showRespiratoryClinicJsp(box); 
					String jsp = "pediatric_respiratory_clinic";
					map.put("contentJsp", jsp);
					map.put("title", title);
					return new ModelAndView(jsp, "map", map);
				}
				
				public ModelAndView showDermatologyGeneralProformaJsp(HttpServletRequest request,HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					Map<String, Object> requestParametersMap = new HashMap<String, Object>();	
					List<OpdGeneralProformaHeader> dermogeneralProformaHeadersList = new ArrayList<OpdGeneralProformaHeader>();
					HttpSession session = request.getSession();
					int hinId = 0;
					int visitId = 0;
					int patientAge=0;
					String recallFlag="No";
					if(request.getParameter("hinId") != null){
						hinId = Integer.parseInt(request.getParameter("hinId"));
					}
					if(request.getParameter("visitId") != null){
						visitId = Integer.parseInt(request.getParameter("visitId"));
					}
					if(request.getParameter("patientAge") != null){
						patientAge = Integer.parseInt(request.getParameter("patientAge"));
					}
					int deptId = 0;
					if(session.getAttribute("deptId") != null){
					deptId = (Integer) session.getAttribute("deptId");
					}
					requestParametersMap.put("hinId", hinId);
					requestParametersMap.put("visitId", visitId);
					requestParametersMap.put("deptId", deptId);
					map.put("hinId", hinId);
					map.put("visitId", visitId);
					
					map=opdHandlerService.showDermatologyGeneralProformaJsp(requestParametersMap);	
					if (map.get("dermogeneralProformaHeadersList") != null)
				       {
						 dermogeneralProformaHeadersList = (List<OpdGeneralProformaHeader>) map.get("dermogeneralProformaHeadersList");			
				       }
					if(dermogeneralProformaHeadersList.size() > 0)
					{
						recallFlag = "Yes";
					}
					map.put("patientAge",patientAge);
					map.put("recallFlag",recallFlag);
					String jsp = "dermatologyGeneralProforma";
					map.put("contentJsp", jsp);
					map.put("title", title);
					return new ModelAndView(jsp, "map", map);
				}
				
				
		 		/*addedd by swarup 04-01-2017*/
				public ModelAndView showDermatologySpecialitySummaryJsp(HttpServletRequest request,HttpServletResponse response) {
					HttpSession session = request.getSession();
					Map<String, Object> map = new HashMap<String, Object>();
					Map<String, Object> map4 = new HashMap<String, Object>();
					Map<String, Object> map5 = new HashMap<String, Object>();
					//Map<String, Object> requestParametersMap = new HashMap<String, Object>();	
					
					int hinId = 0;
					int visitId=0;
					String summary = "";
					if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
						hinId = Integer.parseInt(request.getParameter("hinId"));
					}
					if(request.getParameter(VISIT_ID) != null){
						visitId = Integer.parseInt(request.getParameter(VISIT_ID));				
					}
					 int deptId =0;
					    if(session.getAttribute("deptId")!=null){
					     deptId = (Integer) session.getAttribute("deptId");
					     map.put("deptId", deptId);
					    }
					map.put("visitId", visitId);
					map.put("hinId", hinId);
					
			 		  map4 = opdHandlerService.showDermatologyGeneralProformaJsp(map);
				 	List<Object[]> generalProformaHeadersList = new ArrayList<Object[]>();
					List<Object[]> firstLesionList = new ArrayList<Object[]>();
					List<Object[]> secondLesionList = new ArrayList<Object[]>();
					List<Object[]> findingLesionList = new ArrayList<Object[]>();
		 			
					if(map4.get("generalProformaHeadersList") != null){
						generalProformaHeadersList =(List)map4.get("generalProformaHeadersList");
						 map.put("generalProformaHeadersList", generalProformaHeadersList);
						}
			 		if(map4.get("firstLesionList") != null){
						firstLesionList =(List)map4.get("firstLesionList");
						 map.put("firstLesionList", firstLesionList);
					}
					if(map4.get("secondLesionList") != null){
						secondLesionList =(List)map4.get("secondLesionList");
						 map.put("secondLesionList", secondLesionList);
					}
					if(map4.get("findingLesionList") != null){
						findingLesionList =(List)map4.get("findingLesionList");
						 map.put("findingLesionList", findingLesionList);
					}
						
					if(request.getParameter("Summary") != null) {
						summary = (String) request.getParameter("Summary");
					}
					
					//summary for leprosy
					map5 = opdHandlerService.showDermatologyLeprosyProformaJsp(map);
					List<Object[]> previousComplaintListLeprosy = new ArrayList<Object[]>();
					List<Object[]> historyList = new ArrayList<Object[]>();
					List<Object[]> opdDermLpsyProExm = new ArrayList<Object[]>();
					List<Object[]> opdDermLpsyProNerveExm = new ArrayList<Object[]>();
					
					if(map5.get("previousComplaintListLeprosy") != null){
						previousComplaintListLeprosy =(List)map5.get("previousComplaintListLeprosy");
						 map.put("previousComplaintListLeprosy", previousComplaintListLeprosy);
					}
					if(map5.get("historyList") != null){
						historyList =(List)map5.get("historyList");
						 map.put("historyList", historyList);
					}
					if(map5.get("opdDermLpsyProExm") != null){
						opdDermLpsyProExm =(List)map5.get("opdDermLpsyProExm");
						 map.put("opdDermLpsyProExm", opdDermLpsyProExm);
					}
				 	if(map5.get("opdDermLpsyProNerveExm") != null){
						opdDermLpsyProNerveExm =(List)map5.get("opdDermLpsyProNerveExm");
						 map.put("opdDermLpsyProNerveExm", opdDermLpsyProNerveExm);
					}
		 			String jsp = "";
				//	if(summary.equals("Summary"))
						jsp = "response_dermatology_summary";
					 
					map.put("contentJsp", jsp);
					map.put("title", title);
					map.put("deptId", deptId);
					return new ModelAndView(jsp, "map", map);
				} 
					
		 	 	
				public void showPatientSpecialityReportForPreviousVisit(HttpServletRequest request, HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					HttpSession session = request.getSession();
					Map<String, Object> parameters = new HashMap<String, Object>();
					Map<String, Object> detailsMap = new HashMap<String, Object>();
					Box box = HMSUtil.getBox(request);
					int visitId = 0;
					String specialityTemplateName = null;
					String reportName = null;
					int opdPatientDetailId = 0;
					if(request.getParameter("visitId")!= null){
						visitId = Integer.parseInt(request.getParameter("visitId"));
						box.put("visitId", visitId);
					}
					if(request.getParameter("opdPatientDetailId")!= null){
						opdPatientDetailId = Integer.parseInt(request.getParameter("opdPatientDetailId"));
						box.put("opdPatientDetailId", opdPatientDetailId);
					}
					
					int hospitalId = 0;
					if(request.getParameter("hospitalId")!=null){
						hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
					}else{
						hospitalId =(Integer) session.getAttribute("hospitalId");
					}
					box.put("hospitalId", hospitalId);
					map = opdHandlerService.getSpecialityTemplateName(box);
					
					
					if(map.get("templateName") != null){
						specialityTemplateName = (String)map.get("templateName");
					}
					
					
				if(specialityTemplateName != null){
					if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("GLAUCOMA")){
						reportName="OphthalmologyGlaucoma";
					}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("RETINA")){
						reportName="OphthalmologyRetina";
					}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Case Record")){
						reportName="OphthalmologyCaseRecord";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Child And Adolescent")){
						reportName="childAndAdolescent";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Oncology")){
						reportName="oncology";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Holistic And Psychromatic Clinic")){
						reportName="holisticAndPsychromaticClin";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Sucide Prevention")){
						reportName="sucidePrevention";
					}
			
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("STD Case Records")){
						reportName="stdCaseRecords";
					}

					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Vesiculo-bullous disorders")){
						reportName="vesiculoBullousDisorders";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Paediatric Case Record")){
						reportName="paediatric_case_record";
					}
					
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Neonatology Unit")){
						reportName="paediatric_neonatology_unit";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Donor Evaluation")){
						reportName="donor_evaluation";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Recipient Evaluation")){
						reportName="recipent_evaluation";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Psychogeriatric Clinic")){
						reportName="psychogeriatricClinic";
					}	
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Deaddiction Centre")){
						reportName="deaddictionCentre";
					}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Orthopaedics")){
						reportName="orthopedic_op";
					}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("ENT Examination")){
						reportName="ent_examination";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Antenatal Card")){
						reportName="AntenatalCard"; //Added by Arbind on 25-04-2017
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("General Medicine")){
						reportName="medicine";
					}else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Leprosy Performa")){
						reportName="leprosyProforma";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Respiratory Clinic")){
						reportName="respiratoryClinic";
						}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("General Proforma")){
						reportName="generalProforma";
					}
					else if(specialityTemplateName!=null && specialityTemplateName.equalsIgnoreCase("Nephrology Case Sheet")){
						reportName="Nephrology_Case_Sheet_Report";
					}

					detailsMap = opdHandlerService.getConnectionForReport();
					
					parameters.put("opdPatientDetailId", opdPatientDetailId);
					parameters.put("opdvid", visitId);
					parameters.put("hospitalId", hospitalId);
					parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
							"/Reports/"));
					try {
						
						HMSUtil.generateReport(reportName, parameters,
								(Connection) detailsMap.get("conn"), response,
								getServletContext());

					} catch (IllegalStateException e) {
						e.printStackTrace();
					}
				}
			}

		// New Antenatal Card added by Arbind on 13-12-2016

		@SuppressWarnings("unchecked")
		public Map<String,Object> addAntenatalCardForTemplate(HttpServletRequest request) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			Map<String, Object> infoMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			List<OpdAntenatalCardTrimester> antCardTrimeList=new ArrayList<OpdAntenatalCardTrimester>();
			List<OpdAntenatalCardPregnancy> antCardPregList=new ArrayList<OpdAntenatalCardPregnancy>();
			List<OpdAntenatalCardMedicalHistory> antCardMedHistList=new ArrayList<OpdAntenatalCardMedicalHistory>();
			List<ExternalAdmissionDetails> ipAdmissioDetailsList=new ArrayList<ExternalAdmissionDetails>();
			List<OpdAntenatalUsg> usgReportFirstTrimList=new ArrayList<OpdAntenatalUsg>();
			List<OpdAntenatalUsg> usgReportFirstTrimListWeek14=new ArrayList<OpdAntenatalUsg>();
			List<OpdAntenatalUsg> usgReportSecondTrimList=new ArrayList<OpdAntenatalUsg>();
			List<OpdAntenatalUsg> usgReportThirdTrimList=new ArrayList<OpdAntenatalUsg>();
			
			Map<String, Object> firstTrimListWeek10Date1=new HashMap<String, Object>();
			Map<String, Object> firstTrimListWeek10Date2=new HashMap<String, Object>();
			Map<String, Object> firstTrimListWeek10Date3=new HashMap<String, Object>();
			
			Map<String, Object> firstTrimListWeek14Date1=new HashMap<String, Object>();
			Map<String, Object> firstTrimListWeek14Date2=new HashMap<String, Object>();
			Map<String, Object> firstTrimListWeek14Date3=new HashMap<String, Object>();
			
			int hinId = 0;
			int visitId = 0;

			int para = 0, abortions = 0, ectopic = 0, vesicular = 0, mtp = 0, liveBirth = 0, iud = 0, stillBirth = 0, nnd = 0;
			Date lmp = null;
			Date edd = null;
			Date scannedEdc = null;
			Date edcDate = null;
			int menarche = 0;
			String gravida = "", cycle = "", days = "", cycle1="", days1="", cycle2="", days2="", cycle3="", days3="";
			String years="", months="", consanguineous="", degree="", infertility="", factor="", infertilityDetails="";
			String year = "", pregnancyOutcome="", placeDelivery="", deliveryOutcome="", sex="", antenatal="", intraPartum="", postPartum="", bloodTransfusion="", medicalDisord="";
			int age = 0,  noOfPregnancy=0; String previousGestationalAge = "";String placeOfDeliveryOthers = ""; String preTermValue = "";
			double birthWeight = 0;
			String comorbidity="", comChronicDisease="", comOtherDisease="", comYears="", comMonths="", comRemarks="";
			String infections="",infectionYears="",infectionMonths="",infectionRemarks="",infectionOther="";
			String pastSurgeryName="",pastSurgeryYear="",pastSurgeryHospital="",pastSurgeryRemarks="";
			String surgicalHistory="", familyHistory="", personalHistory="";
			String height = "", weight = "", bmi="", bmiStatus="", breast = "", nipple = "", thyriod="";
			int waist=0,hip=0;
			Date tetanusOnestDoseDate = null;
			Date tetanusTwondDoseDate = null;
			String referredFromPrivate="";
			String referredFromPrivateValue = "";
			String maritalStatus = "";

			String date = "";
			String time = "";
			
			Date nextVisitOn = new Date();
			int exist=0,antCardId=0,AntCount=0,pmhCount=0;
			
			Box box = HMSUtil.getBox(request);	
			HttpSession session = request.getSession();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");
			int departmentId = (Integer) session.getAttribute("deptId");
			int hospitalId = (Integer) session.getAttribute("hospitalId");
			 String templateName = "";
			 if (request.getParameter("templateName") != null && (!request.getParameter("templateName").equals(""))) {
				 templateName = request.getParameter("templateName");
				 infoMap.put("templateName", templateName);
				}
		
			if (request.getParameter(GRAVIDA) != null
					&& (!request.getParameter(GRAVIDA).equals(""))) {
				gravida = request.getParameter(GRAVIDA);
			}
			if (request.getParameter(PARA) != null
					&& (!request.getParameter(PARA).equals(""))) {
				para = Integer.parseInt(request.getParameter(PARA));
			}
			if (request.getParameter(ABORTIONS) != null
					&& (!request.getParameter(ABORTIONS).equals(""))) {
				abortions = Integer.parseInt(request.getParameter(ABORTIONS));
			}
			if ((request.getParameter(ECTOPIC) != null)
					&& (!request.getParameter(ECTOPIC).equals(""))) {
				ectopic = Integer.parseInt(request.getParameter(ECTOPIC));
			}
			if ((request.getParameter(VESICULAR) != null)
					&& (!request.getParameter(VESICULAR).equals(""))) {
				vesicular = Integer.parseInt(request.getParameter(VESICULAR));
			}
			if ((request.getParameter(MTP) != null)
					&& (!request.getParameter(MTP).equals(""))) {
				mtp = Integer.parseInt(request.getParameter(MTP));
			}
			if (request.getParameter(LIVE) != null
					&& (!request.getParameter(LIVE).equals(""))) {
				liveBirth = Integer.parseInt(request.getParameter(LIVE));
			}
			if (request.getParameter(IUD) != null
					&& (!request.getParameter(IUD).equals(""))) {
				iud = Integer.parseInt(request.getParameter(IUD));
			}
			if (request.getParameter(STILLBIRTH) != null
					&& (!request.getParameter(STILLBIRTH).equals(""))) {
				stillBirth = Integer.parseInt(request.getParameter(STILLBIRTH));
			}
			if (request.getParameter(NND) != null
					&& (!request.getParameter(NND).equals(""))) {
				nnd = Integer.parseInt(request.getParameter(NND));
			}
			if (request.getParameter(LMP) != null
					&& !(request.getParameter(LMP).equals(""))) {
				lmp = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(LMP));
			}
			if (request.getParameter(EDD) != null
					&& !(request.getParameter(EDD).equals(""))) {
				edd = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(EDD));
			}
			if (request.getParameter(SCANNED_EDC) != null
					&& !(request.getParameter(SCANNED_EDC).equals(""))) {
				scannedEdc = HMSUtil.dateFormatterDDMMYYYY(request.getParameter(SCANNED_EDC));
			}
			if (request.getParameter("edcDate") != null
					&& !(request.getParameter("edcDate").equals(""))) {
				edcDate = HMSUtil.dateFormatterDDMMYYYY(request.getParameter("edcDate"));
			}
			String gestationalAgeWeeks ="";
			if (request.getParameter("gestationalAgeWeeks") != null && !(request.getParameter("gestationalAgeWeeks").equals(""))) {
				gestationalAgeWeeks =request.getParameter("gestationalAgeWeeks");
			}
			String gestationalAgeDays ="";
			if (request.getParameter("gestationalAgeDays") != null && !(request.getParameter("gestationalAgeDays").equals(""))) {
				gestationalAgeDays =request.getParameter("gestationalAgeDays");
			}
			

			if (request.getParameter(MENARCHE) != null
					&& (!request.getParameter(MENARCHE).equals(""))) {
				menarche = Integer.parseInt(request.getParameter(MENARCHE));
			}
			if (request.getParameter(CYCLE) != null) {
				cycle = request.getParameter(CYCLE);
			}
			//ANC Changes
			//IP Admission related changes
			int ipAdmissionCount=0;
			if (request.getParameter("ipAdmissionCount") != null
					&& (!request.getParameter("ipAdmissionCount").equals(""))) {
				ipAdmissionCount = Integer.parseInt(request.getParameter("ipAdmissionCount"));
			}
			String dateOfAdmission="";
			String iPNo="";
			String IPDiagnosis="";
			String IPManagement="";
			String IPAdvice="";
			String dateOfDischarge="";
			if(ipAdmissionCount >= 0){
				for(int cnt=0;cnt<=ipAdmissionCount;cnt++){
					if (request.getParameter("DateofAdmission"+cnt) != null
							&& (!request.getParameter("DateofAdmission"+cnt).equals(""))) {
						dateOfAdmission = request.getParameter("DateofAdmission"+cnt);
					}
					
					if (request.getParameter("IPNo"+cnt) != null
							&& (!request.getParameter("IPNo"+cnt).equals(""))) {
						iPNo = request.getParameter("IPNo"+cnt);
					}
					
					if (request.getParameter("IPDiagnosis"+cnt) != null
							&& (!request.getParameter("IPDiagnosis"+cnt).equals(""))) {
						IPDiagnosis = request.getParameter("IPDiagnosis"+cnt);
					}
					
					if (request.getParameter("IPManagement"+cnt) != null
							&& (!request.getParameter("IPManagement"+cnt).equals(""))) {
						IPManagement = request.getParameter("IPManagement"+cnt);
					}
					
					if (request.getParameter("IPAdvice"+cnt) != null
							&& (!request.getParameter("IPAdvice"+cnt).equals(""))) {
						IPAdvice = request.getParameter("IPAdvice"+cnt);
					}
					if (request.getParameter("DateofDischarge"+cnt) != null
							&& (!request.getParameter("DateofDischarge"+cnt).equals(""))) {
						dateOfDischarge = request.getParameter("DateofDischarge"+cnt);
					}
					
					if(dateOfAdmission !=null && !dateOfAdmission.equals(""))
					{
						ExternalAdmissionDetails admissionDetails = new ExternalAdmissionDetails();
						admissionDetails.setDateOfAdmission(dateOfAdmission);
						admissionDetails.setIpNo(iPNo);
						admissionDetails.setDiagnosis(IPDiagnosis);
						admissionDetails.setManagement(IPManagement);
						admissionDetails.setAdvice(IPAdvice);
						admissionDetails.setDateOfDischarge(dateOfDischarge);
						ipAdmissioDetailsList.add(admissionDetails);
					}
					
					dateOfAdmission=null;iPNo=null;IPDiagnosis=null;IPManagement=null;IPAdvice=null;dateOfDischarge=null;
				}
			}
			infoMap.put("ipAdmissioDetailsList", ipAdmissioDetailsList);
			// IP Admission related changes end
			
			
			String cycleFlow = "";
			if (request.getParameter("cycleFlow") != null) {
				cycleFlow = request.getParameter("cycleFlow");
			}			
			String ocps= "No";
			if (null!= request.getParameter("ocps") && request.getParameter("ocps").equalsIgnoreCase("y")) {
				ocps = "Yes";
			}
			String ppiucd = "No";
			if (null != request.getParameter("ppiucd") && request.getParameter("ppiucd").equalsIgnoreCase("y")) {
				ppiucd = "Yes";
			}
			String tubalLigation="No";
			if (null != request.getParameter("tubalLigation") && request.getParameter("tubalLigation").equalsIgnoreCase("y")) {
				tubalLigation = "Yes";
			}
			String vasectomy="No";
			if (null != request.getParameter("vasectomy") && request.getParameter("vasectomy").equalsIgnoreCase("y")) {
				vasectomy = "Yes";
			}
			String condom="No";
			if (null != request.getParameter("condom") && request.getParameter("condom").equalsIgnoreCase("y")) {
				condom = "Yes";
			}
			String intervalIUCD="NO";
			if (null != request.getParameter("intervalIucd") &&  request.getParameter("intervalIucd").equalsIgnoreCase("y")) {
				intervalIUCD = "Yes";
			}
			String fpLam="No";
			if (null != request.getParameter("fplam") && request.getParameter("fplam").equalsIgnoreCase("y")) {
				fpLam = "Yes";
			}
			String fpNone="";
			if (null != request.getParameter("fpnone") && request.getParameter("fpnone").equalsIgnoreCase("y")) {
				fpNone = "None";
			}
			//ANC Changes end
			if (request.getParameter(DAYS) != null) {
				days = request.getParameter(DAYS);
			}
			if (request.getParameter(CYCLE1) != null) {
				cycle1 = request.getParameter(CYCLE1);
			}
			if (request.getParameter(DAYS1) != null) {
				days1 = request.getParameter(DAYS1);
			}
			if (request.getParameter(CYCLE2) != null) {
				cycle2 = request.getParameter(CYCLE2);
			}
			if (request.getParameter(DAYS2) != null) {
				days2 = request.getParameter(DAYS2);
			}
			if (request.getParameter(CYCLE3) != null) {
				cycle3 = request.getParameter(CYCLE3);
			}
			if (request.getParameter(DAYS3) != null) {
				days3 = request.getParameter(DAYS3);
			}

			if (request.getParameter(YEARS) != null) {
				years = request.getParameter(YEARS);
			}
			if (request.getParameter(MONTHS) != null) {
				months = request.getParameter(MONTHS);
			}
			if (request.getParameter("maritalStatus") != null) {
				maritalStatus = request.getParameter("maritalStatus");
			}
			String durationOfMarriageYear = "";
			if (request.getParameter("durationOfMarriageYear") != null) {
				durationOfMarriageYear = request.getParameter("durationOfMarriageYear");
			}
			String durationOfMarriageMonth = "";
			if (request.getParameter("durationOfMarriageMonth") != null) {
				durationOfMarriageMonth = request.getParameter("durationOfMarriageMonth");
			}
			String marritalHistoryRemarks = "";
			if (request.getParameter("marritalHistoryRemarks") != null) {
				marritalHistoryRemarks = request.getParameter("marritalHistoryRemarks");
			}
			if (request.getParameter("consanguineousYes") != null
					&& (!request.getParameter("consanguineousYes").equals(""))) {
				consanguineous =request.getParameter("consanguineousYes");
			}
			if (request.getParameter("referredFromPrivate") != null
					&& (!request.getParameter("referredFromPrivate").equals(""))) {
				referredFromPrivate =request.getParameter("referredFromPrivate");
			}
			
			if (request.getParameter("referredFromPrivateValue") != null
					&& (!request.getParameter("referredFromPrivateValue").equals(""))) {
				referredFromPrivateValue =request.getParameter("referredFromPrivateValue");
			}
			if (request.getParameter("degree") != null
					&& (!request.getParameter("degree").equals(""))) {
				degree =request.getParameter("degree");
			}
			if (request.getParameter("infertilityYes") != null
					&& (!request.getParameter("infertilityYes").equals(""))) {
				infertility =request.getParameter("infertilityYes");
			}
			if (request.getParameter("factor") != null
					&& (!request.getParameter("factor").equals(""))) {
				factor =request.getParameter("factor");
			}
			if (request.getParameter(INFERTILITY_DETAILS) != null) {
				infertilityDetails = request.getParameter(INFERTILITY_DETAILS);
			}
			String pastSurgicalHistoryRadio = "";
			if (request.getParameter("pastSurgicalHistoryRadio") != null) {
				pastSurgicalHistoryRadio = request.getParameter("pastSurgicalHistoryRadio");
			}
			
			if (request.getParameter("pastSurgHist") != null) {
				surgicalHistory = request.getParameter("pastSurgHist");
			}
			if (request.getParameter("familyHist") != null) {
				familyHistory = request.getParameter("familyHist");
			}
			if (request.getParameter("personalHist") != null) {
				personalHistory = request.getParameter("personalHist");
			}
			String otherImmunizationDetail = "";
			if (request.getParameter("otherImmunizationDetail") != null) {
				otherImmunizationDetail = request.getParameter("otherImmunizationDetail");
			}

			if (request.getParameter("existAnte") != null
				&& (!request.getParameter("existAnte").equals(""))) {
				exist = Integer.parseInt(request.getParameter("existAnte"));
			}
					
					
			if (request.getParameter("antCardId") != null
				&& (!request.getParameter("antCardId").equals(""))) {
				antCardId = Integer.parseInt(request.getParameter("antCardId"));
			}
					
			if (request.getParameter("AntCount") != null
				&& (!request.getParameter("AntCount").equals(""))) {
				AntCount = Integer.parseInt(request.getParameter("AntCount"));
			}
			if (request.getParameter("pmhCount") != null
				&& (!request.getParameter("pmhCount").equals(""))) {
				pmhCount = Integer.parseInt(request.getParameter("pmhCount"));
			}
					
					
			if (request.getParameter(HIN_ID) != null) {
				hinId = Integer.parseInt(request.getParameter(HIN_ID));
			}
			if (!request.getParameter(VISIT_ID).equals("")) {
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));
			}
			if (!request.getParameter("visitSessionId").equals("")) {
				int visitSessionId = Integer.parseInt(request.getParameter("visitSessionId"));
				infoMap.put("visitSessionId", visitSessionId);
				
			}
			if (!request.getParameter("totalHospitalVisit").equals("")) {
				int totalHospitalVisit = Integer.parseInt(request.getParameter("totalHospitalVisit"));
				infoMap.put("totalHospitalVisit", totalHospitalVisit);
				
			}
			
			if (request.getParameter("bloodGroupName") != null	&& !request.getParameter("bloodGroupName").equals("")) {
				String bloodGroupValue = request.getParameter("bloodGroupName");
				infoMap.put("bloodGroupValue", bloodGroupValue);
			}
			
			
			if (request.getParameter("bloodStatus") != null	&& !request.getParameter("bloodStatus").equals("")) {
				String bloodGroupStatus = request.getParameter("bloodStatus");
				infoMap.put("bloodGroupStatus", bloodGroupStatus);
			}
			
			/*if (request.getParameter("verbalBloodStatus") != null	&& !request.getParameter("verbalBloodStatus").equals("")) {
				String verbalBloodStatus = request.getParameter("verbalBloodStatus");
				infoMap.put("verbalBloodStatus", verbalBloodStatus);
			}*/
								
					if (request.getParameter(NIPPLE) != null) {
						nipple = request.getParameter(NIPPLE);
					}
					if (request.getParameter(BREAST) != null) {
						breast = request.getParameter(BREAST);
					}
					
					if (request.getParameter("weightValue") != null) {
						weight = request.getParameter("weightValue");
						infoMap.put("weight", weight);
					}
					
					if (request.getParameter("heightValue") != null) {
						height = request.getParameter("heightValue");
						infoMap.put("height", height);
					}
					if (request.getParameter("bmiValue") != null) {
						bmi = request.getParameter("bmiValue");
						infoMap.put("bmi", bmi);
					}
				
					if (request.getParameter("bmicat") != null) {
						bmiStatus = request.getParameter("bmicat");
					}
					if (request.getParameter(THYROID) != null) {
						thyriod = request.getParameter(THYROID);
					}
					String pallorGenExam = "";
					if (request.getParameter("pallorGenExam") != null) {
						pallorGenExam = request.getParameter("pallorGenExam");
					}
					String icterusGenExam = "";
					if (request.getParameter("icterusGenExam") != null) {
						icterusGenExam = request.getParameter("icterusGenExam");
					}
					String cyanosisGenExam = "";
					if (request.getParameter("cyanosisGenExam") != null) {
						cyanosisGenExam = request.getParameter("cyanosisGenExam");
					}
					String clubbing = "";
					if (request.getParameter("ancClubbing") != null && !request.getParameter("ancClubbing").equals("")) {
						clubbing = request.getParameter("ancClubbing");
					}
					String lymphadenopathyGenExam = "";
					if (request.getParameter("lymphadenopathyGenExam") != null) {
						lymphadenopathyGenExam = request.getParameter("lymphadenopathyGenExam");
					}
					String lymphadenopathyGenExamValue = "";
					if (request.getParameter("lymphadenopathyGenExamValue") != null) {
						lymphadenopathyGenExamValue = request.getParameter("lymphadenopathyGenExamValue");
					}
					String edemaGenExam = "";
					if (request.getParameter("edemaGenExam") != null) {
						edemaGenExam = request.getParameter("edemaGenExam");
					}
					String refferedHospital = "";
					if (request.getParameter("refferedHospital") != null) {
						refferedHospital = request.getParameter("refferedHospital");
					}
					String refferedGA = "";
					if (request.getParameter("refferedGA") != null) {
						refferedGA = request.getParameter("refferedGA");
					}
					
					String spine = "";
					if (request.getParameter("spine") != null) {
						spine = request.getParameter("spine");
					}
					String gait = "";
					if (request.getParameter("gait") != null) {
						gait = request.getParameter("gait");
					}
					if (request.getParameter("waistValue") != null && !request.getParameter("waistValue").equals("")) {
						waist = Integer.parseInt(request.getParameter("waistValue"));
					}
					if (request.getParameter("hipValue") != null && !request.getParameter("hipValue").equals("")) {
						hip = Integer.parseInt(request.getParameter("hipValue"));
					}
					
					String cvsGenExam = null;
					if (request.getParameter("cvsGenExam") != null && !request.getParameter("cvsGenExam").equals("")) {
						cvsGenExam = request.getParameter("cvsGenExam");
					}
					
					String otherGeneralEamination = "";
					if (request.getParameter("otherGeneralEamination") != null) {
						otherGeneralEamination = request.getParameter("otherGeneralEamination");
					}
					
					if (request.getParameter(TETANUS_ONE_DOSE_DATE) != null
							&& !(request.getParameter(TETANUS_ONE_DOSE_DATE).equals(""))) {
						tetanusOnestDoseDate = HMSUtil.dateFormatterDDMMYYYY(request
								.getParameter(TETANUS_ONE_DOSE_DATE));
						infoMap.put("tetanusOnestDoseDate", tetanusOnestDoseDate);
					}
					if (request.getParameter(TETANUS_TWO_DOSE_DATE) != null
							&& !(request.getParameter(TETANUS_TWO_DOSE_DATE).equals(""))) {
						tetanusTwondDoseDate = HMSUtil.dateFormatterDDMMYYYY(request
								.getParameter(TETANUS_TWO_DOSE_DATE));
						infoMap.put("tetanusTwondDoseDate", tetanusTwondDoseDate);
					}
					String otherTTDetails = "";
					if (request.getParameter("otherTTDetails") != null && (!request.getParameter("otherTTDetails").equals(""))) {
						otherTTDetails = request.getParameter("otherTTDetails");
					}

					if (request.getParameter(MEDICAL_DISORDER) != null
							&& (!request.getParameter(MEDICAL_DISORDER).equals(""))) {
						medicalDisord = request.getParameter(MEDICAL_DISORDER);
					}
					String obstetricComplications = "";
					if (request.getParameter("obstetricComplications") != null && (!request.getParameter("obstetricComplications").equals(""))) {
						obstetricComplications = request.getParameter("obstetricComplications");
					}
					String obstetricValues = "";
					if (request.getParameter("obstetricValues") != null && (!request.getParameter("obstetricValues").equals(""))) {
						obstetricValues = request.getParameter("obstetricValues");
					}
					
					Users user = (Users) session.getAttribute("users");
					int empId = 0;
					if(session.getAttribute("empId") != null){
						empId =(Integer) session.getAttribute("empId");
					}
					int userId = user.getId();
					OpdAntenatalCard antenatalCard =null;
					OpdAntenatalCardPregnancy antCardPregnancy = null;
					OpdAntenatalCardMedicalHistory antCardMedicalHistory = null;
					
					try {
						
						int opdhdb=0;
						if (request.getParameter("opdhdb") != null
								&& (!request.getParameter("opdhdb").equals(""))) {
							opdhdb = Integer.parseInt(request.getParameter("opdhdb"));
						}
						int pmhhdb=0;
						if (request.getParameter("pmhhdb") != null
								&& (!request.getParameter("pmhhdb").equals(""))) {
							pmhhdb = Integer.parseInt(request.getParameter("pmhhdb"));
						}
						
						
						int ancInfCount=0;
						if (request.getParameter("ancInfCount") != null
								&& (!request.getParameter("ancInfCount").equals(""))) {
							ancInfCount = Integer.parseInt(request.getParameter("ancInfCount"));
						}
						
						int pastSurgeryCount=0;
						if (request.getParameter("surgeryRowsCount") != null
								&& (!request.getParameter("surgeryRowsCount").equals(""))) {
							pastSurgeryCount = Integer.parseInt(request.getParameter("surgeryRowsCount"));
						}

						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						

						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						infoMap.put("masHospital", masHospital); 
						

						Patient patient = new Patient();
						patient.setId(hinId);
						infoMap.put("patient", patient); 
						
						

						Visit visit = new Visit();
						visit.setId(visitId);
						
						Map<Integer, OpdAntenatalCardPregnancy> prevPregnancyDt = null;
						OpdAntenatalCardPregnancy antenatalCardHashMap =null;
						int prevTotal = 0;
						if(request.getParameter("prevTotal")!=null && !request.getParameter("prevTotal").isEmpty())
							prevTotal =Integer.parseInt(request.getParameter("prevTotal"));
						if(session.getAttribute("prevPregnancyDt")!=null){
							prevPregnancyDt = (Map<Integer, OpdAntenatalCardPregnancy>) session.getAttribute("prevPregnancyDt");}
						/*if(opdhdb >= 0){
							for(int op=0;op<=opdhdb;op++){*/
						if(prevPregnancyDt!=null && prevPregnancyDt.size() >0){
						  for(Map.Entry<Integer, OpdAntenatalCardPregnancy> prevPreg : prevPregnancyDt.entrySet()){
							  if(prevTotal<=prevPreg.getKey()){
								int count=0;
								antenatalCardHashMap = prevPreg.getValue();
								/*if (request.getParameter(YEAR+op) != null
										&& !(request.getParameter(YEAR+op).equals(""))) {
									year = request.getParameter(YEAR+op);
									count = 1;
								}*/
								
								if (!antenatalCardHashMap.getAge().equals("")) {
									noOfPregnancy = antenatalCardHashMap.getNoOfPregnancy();
									count = 1;
								}
								if (!antenatalCardHashMap.getAge().equals("")) {
									age = antenatalCardHashMap.getAge();
									count = 1;
								}
								if (antenatalCardHashMap.getPregnancyOutcome() != null) {
									pregnancyOutcome = antenatalCardHashMap.getPregnancyOutcome();
									count = 1;
								}
								if (antenatalCardHashMap.getPregnancyOutcomePreTermValue()!= null) {
									preTermValue = antenatalCardHashMap.getPregnancyOutcomePreTermValue();
									count = 1;
								}
								
								if (antenatalCardHashMap.getPlaceDelivery() != null) {
									placeDelivery = antenatalCardHashMap.getPlaceDelivery();
									count = 1;
								}
								
									placeOfDeliveryOthers = antenatalCardHashMap.getPlaceOfDeliveryOthersValue();
									
	
								if (antenatalCardHashMap.getDeliveryOutcome()!=null) {
									deliveryOutcome = antenatalCardHashMap.getDeliveryOutcome();
									count = 1;
								}
								
								if (antenatalCardHashMap.getSex()!= null) {
									sex = antenatalCardHashMap.getSex();
									count = 1;
								}
								if (antenatalCardHashMap.getPreviousGestationalAge() != null) {
									previousGestationalAge = antenatalCardHashMap.getPreviousGestationalAge();
									count = 1;
								}
								if (!antenatalCardHashMap.getBirthWeight().equals("")) {
									birthWeight = antenatalCardHashMap.getBirthWeight();
									count = 1;
								}
								if (antenatalCardHashMap.getAntenatal() != null) {
									antenatal =antenatalCardHashMap.getAntenatal();
									count = 1;
								}
								if (antenatalCardHashMap.getIntraPartum() != null) {
									intraPartum = antenatalCardHashMap.getIntraPartum();
									count = 1;
								}
								if (antenatalCardHashMap.getPostPartum()!= null) {
									postPartum = antenatalCardHashMap.getPostPartum();
									count = 1;
								}
								if (antenatalCardHashMap.getBloodTransfusion() != null) {
									bloodTransfusion = antenatalCardHashMap.getBloodTransfusion();
									count = 1;
								}
								

								if(count == 1) {
									antCardPregnancy = new OpdAntenatalCardPregnancy();
									antCardPregnancy.setYear(year);
									antCardPregnancy.setAge(age);
									antCardPregnancy.setNoOfPregnancy(noOfPregnancy);
									antCardPregnancy.setPregnancyOutcome(pregnancyOutcome);
									if(pregnancyOutcome!=null && pregnancyOutcome.equalsIgnoreCase("Pre Term")){
										antCardPregnancy.setPregnancyOutcomePreTermValue(preTermValue);
									}
									antCardPregnancy.setPlaceDelivery(placeDelivery);
									if(placeDelivery.equalsIgnoreCase("Others")){
										antCardPregnancy.setPlaceOfDeliveryOthersValue(placeOfDeliveryOthers);
									}
									antCardPregnancy.setDeliveryOutcome(deliveryOutcome);
									antCardPregnancy.setSex(sex);
									antCardPregnancy.setPreviousGestationalAge(previousGestationalAge);
									antCardPregnancy.setBirthWeight(birthWeight);
									antCardPregnancy.setAntenatal(antenatal);
									antCardPregnancy.setIntraPartum(intraPartum);
									antCardPregnancy.setPostPartum(postPartum);
									antCardPregnancy.setBloodTransfusion(bloodTransfusion);
									
									antCardPregList.add(antCardPregnancy);
								}
								year = null; pregnancyOutcome=null; placeDelivery=null; deliveryOutcome=null; sex=null; antenatal=null; intraPartum=null; postPartum=null; bloodTransfusion=null;
								age = 0; birthWeight = 0;
						  }
							}
						  session.removeAttribute("prevPregnancyDt");
						}
						
						if(pmhhdb >= 0){
							for(int op=0;op<=pmhhdb;op++){
								if (request.getParameter(COMORBIDITY+op) != null
										&& (!request.getParameter(COMORBIDITY+op).equals(""))) {
									comorbidity = request.getParameter(COMORBIDITY+op);
								}
								if (request.getParameter(COM_CHRONIC_DISEASE+op) != null
										&& (!request.getParameter(COM_CHRONIC_DISEASE+op).equals(""))) {
									comChronicDisease = request.getParameter(COM_CHRONIC_DISEASE+op);
								}
								if (request.getParameter(COM_OHTER_DISEASE+op) != null
										&& (!request.getParameter(COM_OHTER_DISEASE+op).equals(""))) {
									comOtherDisease = request.getParameter(COM_OHTER_DISEASE+op);
								}
								if (request.getParameter(COM_YEARS+op) != null
										&& (!request.getParameter(COM_YEARS+op).equals(""))) {
									comYears = request.getParameter(COM_YEARS+op);
								}
								if (request.getParameter(COM_MONTHS+op) != null
										&& (!request.getParameter(COM_MONTHS+op).equals(""))) {
									comMonths = request.getParameter(COM_MONTHS+op);
								}
								if (request.getParameter(COM_REMARKS+op) != null
										&& (!request.getParameter(COM_REMARKS+op).equals(""))) {
									comRemarks = request.getParameter(COM_REMARKS+op);
								}

								if(comorbidity != null && !comorbidity.equals("")) {
									antCardMedicalHistory = new OpdAntenatalCardMedicalHistory();
									antCardMedicalHistory.setComorbidity(comorbidity);
									antCardMedicalHistory.setChronicDisease(comChronicDisease);
									antCardMedicalHistory.setOtherDisease(comOtherDisease);
									antCardMedicalHistory.setYears(comYears);
									antCardMedicalHistory.setMonths(comMonths);
									antCardMedicalHistory.setRemarks(comRemarks);
									
									antCardMedHistList.add(antCardMedicalHistory);
								}
								comorbidity=null; comChronicDisease=null; comOtherDisease=null; comYears=null; comMonths=null; comRemarks=null;
							}
						}
						
						/*Jyotish Changes*/
						if(ancInfCount >= 0){
							for(int op=0;op<=ancInfCount;op++){
								if (request.getParameter("ancInfection"+op) != null
										&& (!request.getParameter("ancInfection"+op).equals(""))) {
									infections = request.getParameter("ancInfection"+op);
								}
								
								if (request.getParameter("infectYear"+op) != null
										&& (!request.getParameter("infectYear"+op).equals(""))) {
									infectionYears = request.getParameter("infectYear"+op);
								}
								if (request.getParameter("infectMonth"+op) != null
										&& (!request.getParameter("infectMonth"+op).equals(""))) {
									infectionMonths = request.getParameter("infectMonth"+op);
								}
								if (request.getParameter("infectRemarks"+op) != null
										&& (!request.getParameter("infectRemarks"+op).equals(""))) {
									infectionRemarks = request.getParameter("infectRemarks"+op);
								}
								if (request.getParameter("infectOthers"+op) != null
										&& (!request.getParameter("infectOthers"+op).equals(""))) {
									infectionOther = request.getParameter("infectOthers"+op);
								}

								if(infections != null && !infections.equals("")) {
									OpdAntenatalCardMedicalHistory antCardInfection = new OpdAntenatalCardMedicalHistory();
									antCardInfection.setInfection(infections);
									antCardInfection.setInfectionYears(infectionYears);
									antCardInfection.setInfectionMonths(infectionMonths);
									antCardInfection.setInfectionRemarks(infectionRemarks);
									antCardInfection.setInfectionOthers(infectionOther);
									
									antCardMedHistList.add(antCardInfection);
								}
								infections=null; infectionYears=null; infectionMonths=null; infectionRemarks=null;infectionOther=null;
							}
						}
						
						/*Jyotish changes*/
						//Past surgery changes below
						
						if(pastSurgeryCount >= 0){
							for(int op=0;op<=pastSurgeryCount;op++){
								if (request.getParameter("pastSurgeryName"+op) != null
										&& (!request.getParameter("pastSurgeryName"+op).equals(""))) {
									pastSurgeryName = request.getParameter("pastSurgeryName"+op);
								}
								
								if (request.getParameter("pastSurgeryYear"+op) != null
										&& (!request.getParameter("pastSurgeryYear"+op).equals(""))) {
									pastSurgeryYear = request.getParameter("pastSurgeryYear"+op);
								}
								
								if (request.getParameter("pastSurgeryHostpital"+op) != null
										&& (!request.getParameter("pastSurgeryHostpital"+op).equals(""))) {
									pastSurgeryHospital = request.getParameter("pastSurgeryHostpital"+op);
								}
								
								if (request.getParameter("pastSurgeryRemarks"+op) != null
										&& (!request.getParameter("pastSurgeryRemarks"+op).equals(""))) {
									pastSurgeryRemarks = request.getParameter("pastSurgeryRemarks"+op);
								}

								if(pastSurgeryName != null && !pastSurgeryName.equals("")) {
									OpdAntenatalCardMedicalHistory antCardPastSurgery = new OpdAntenatalCardMedicalHistory();
									antCardPastSurgery.setPastSurgeryName(pastSurgeryName);
									antCardPastSurgery.setPastSurgeryYears(pastSurgeryYear);
									antCardPastSurgery.setPastSurgeryHospital(pastSurgeryHospital);
									antCardPastSurgery.setPastSurgeryRemarks(pastSurgeryRemarks);
									
									antCardMedHistList.add(antCardPastSurgery);
								}
								pastSurgeryName=null; pastSurgeryYear=null; pastSurgeryHospital=null; pastSurgeryRemarks=null;
							}
						}
						
						
						
						/*------------------------------First trimster--------------------------------------------*/
						List<OpdAntenatalUsg> usgFirstTrimListWeeks10= new ArrayList<OpdAntenatalUsg>();
						Map<String, Object> map1 = new HashMap<String, Object>();
						Map<String, Object> map2 = new HashMap<String, Object>();
						
						String[] paraList = new String[] {"Date", "Mean SAC Diameter","Yolk SAC","Fetal Pole","Fetal Heart","Crown Rump Length","Scan EDC","Remarks"}; 
						
						String[] paraListSecondGrid = new String[] {"Date", "CRL","NT","NB","GA","Scan EDC","Cx Length","Impression","Remarks"};
						
						map1 = opdHandlerService.getAntenatalCard2(visitId,hinId,box);
						if (map1.get("usgFirstTrimList1") != null) {
							usgFirstTrimListWeeks10 = (List) map1.get("usgFirstTrimList1");
					
						}
						
						List<OpdAntenatalUsg> usgFirstTrimusgParameterValue1List = new ArrayList<OpdAntenatalUsg>();
						if (map1.get("usgFirstTrimusgParameterValue1List") != null) {
							usgFirstTrimusgParameterValue1List = (List) map1.get("usgFirstTrimusgParameterValue1List");
					
						}
						
						
						String usgFlag="";
						
						if(request.getParameter("usgFlag") != null && (!request.getParameter("usgFlag").equals("")))
						{
							usgFlag=request.getParameter("usgFlag");
						}
						if(usgFlag == null || usgFlag.equals(""))
							usgFlag="Single";
						
						int firstTrimFirstVisitFlag=0;
						
						if(request.getParameter("firstTrimFirstVisitFlag") != null && (!request.getParameter("firstTrimFirstVisitFlag").equals("")))
						{
							firstTrimFirstVisitFlag=Integer.parseInt(request.getParameter("firstTrimFirstVisitFlag"));
						}
						
							 // if(usgFirstTrimusgParameterValue1List.size()<=0){
						  if(firstTrimFirstVisitFlag == 1){
							if(request.getParameter("usgFirstTrimFirstV1") != null && (!request.getParameter("usgFirstTrimFirstV1").equals("")))
									{
							for(int i=1;i<=8;i++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
									  opdAntenatalUsg.setUsgParameter(paraList[i-1]);
									  if (request.getParameter("usgFirstTrimFirstV"+i) != null && (!request.getParameter("usgFirstTrimFirstV"+i).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue1(request.getParameter("usgFirstTrimFirstV"+i));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlag);
									    opdAntenatalUsg.setVisitFlag("First");
										opdAntenatalUsg.setTrimister("First");
										opdAntenatalUsg.setFirstTrimWeeks("Week10");
										usgReportFirstTrimList.add(opdAntenatalUsg); 
										
									  if(usgFlag.equalsIgnoreCase("Twins") || usgFlag.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraList[i-1]);
									  if (request.getParameter("usgFirstTrimTwinsFirstV"+i) != null && (!request.getParameter("usgFirstTrimTwinsFirstV"+i).equals(""))) {
										  opdAntenatalUsgTwins.setUsgParameterValue1(request.getParameter("usgFirstTrimTwinsFirstV"+i));							 
										}
									  opdAntenatalUsgTwins.setUsgFlag(usgFlag);
									  opdAntenatalUsgTwins.setVisitFlag("First");
									  opdAntenatalUsgTwins.setTrimister("First");
									  opdAntenatalUsgTwins.setFirstTrimWeeks("Week10");
									  usgReportFirstTrimList.add(opdAntenatalUsgTwins); 
									  }
									  if(usgFlag.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraList[i-1]);
										  if (request.getParameter("usgFirstTrimTripletsFirstV"+i) != null && (!request.getParameter("usgFirstTrimTripletsFirstV"+i).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue1(request.getParameter("usgFirstTrimTripletsFirstV"+i));							 
										}
										  
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlag);
										  opdAntenatalUsgTriplets.setVisitFlag("First");
										  opdAntenatalUsgTriplets.setTrimister("First");
										  opdAntenatalUsgTriplets.setFirstTrimWeeks("Week10");
										  usgReportFirstTrimList.add(opdAntenatalUsgTriplets); 
									  }
							
								  
							}
							}	
						}	
						
						//Second Visit-----
							  
						List<OpdAntenatalUsg> usgFirstTrimusgParameterValue2List = new ArrayList<OpdAntenatalUsg>();
						if (map1.get("usgFirstTrimusgParameterValue2List") != null) {
							usgFirstTrimusgParameterValue2List = (List) map1.get("usgFirstTrimusgParameterValue2List");
					
						}
							 
						int firstTrimSecondVisitFlag=0;
						
						if(request.getParameter("firstTrimSecondVisitFlag") != null && (!request.getParameter("firstTrimSecondVisitFlag").equals("")))
						{
							firstTrimSecondVisitFlag=Integer.parseInt(request.getParameter("firstTrimSecondVisitFlag"));
						}
						
						//if(usgFirstTrimusgParameterValue1List.size()> 0 && usgFirstTrimusgParameterValue2List.size()<=0){
							if(firstTrimSecondVisitFlag == 1){
								if(request.getParameter("usgFirstTrimSecondV1") != null && (!request.getParameter("usgFirstTrimSecondV1").equals("")))
								 {
							for(int i=1;i<=8;i++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
									  opdAntenatalUsg.setUsgParameter(paraList[i-1]);
									  if (request.getParameter("usgFirstTrimSecondV"+i) != null && (!request.getParameter("usgFirstTrimSecondV"+i).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue2(request.getParameter("usgFirstTrimSecondV"+i));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlag);
									    opdAntenatalUsg.setVisitFlag("Second");
										opdAntenatalUsg.setTrimister("First");
										opdAntenatalUsg.setFirstTrimWeeks("Week10");
										usgReportFirstTrimList.add(opdAntenatalUsg); 
									  if(usgFlag.equalsIgnoreCase("Twins") || usgFlag.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraList[i-1]);
										  if (request.getParameter("usgFirstTrimTwinsSecondV"+i) != null && (!request.getParameter("usgFirstTrimTwinsSecondV"+i).equals(""))) {
											  opdAntenatalUsgTwins.setUsgParameterValue2(request.getParameter("usgFirstTrimTwinsSecondV"+i));							 
										}
										  
										  opdAntenatalUsgTwins.setUsgFlag(usgFlag);
										  opdAntenatalUsgTwins.setVisitFlag("Second");
										  opdAntenatalUsgTwins.setTrimister("First");
										  opdAntenatalUsgTwins.setFirstTrimWeeks("Week10");
										  usgReportFirstTrimList.add(opdAntenatalUsgTwins);
									  }
									  if(usgFlag.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraList[i-1]);
										  if (request.getParameter("usgFirstTrimTripletsSecondV"+i) != null && (!request.getParameter("usgFirstTrimTripletsSecondV"+i).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue2(request.getParameter("usgFirstTrimTripletsSecondV"+i));							 
										}
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlag);
										  opdAntenatalUsgTriplets.setVisitFlag("Second");
										  opdAntenatalUsgTriplets.setTrimister("First");
										  opdAntenatalUsgTriplets.setFirstTrimWeeks("Week10");
										  usgReportFirstTrimList.add(opdAntenatalUsgTriplets);
									  }
							
								   
							}
							 }
							 }
						
						
						/// Third visit
							
							int firstTrimThirdVisitFlag=0;
							
							if(request.getParameter("firstTrimThirdVisitFlag") != null && (!request.getParameter("firstTrimThirdVisitFlag").equals("")))
							{
								firstTrimThirdVisitFlag=Integer.parseInt(request.getParameter("firstTrimThirdVisitFlag"));
							}
							 
						List<OpdAntenatalUsg> usgFirstTrimusgParameterValue3List = new ArrayList<OpdAntenatalUsg>();
						if (map1.get("usgFirstTrimusgParameterValue3List") != null) {
							usgFirstTrimusgParameterValue3List = (List) map1.get("usgFirstTrimusgParameterValue3List");
					
						}
							// if(usgFirstTrimusgParameterValue1List.size()> 0 && usgFirstTrimusgParameterValue2List.size() > 0 && usgFirstTrimusgParameterValue3List.size()<=0){
						 if(firstTrimThirdVisitFlag == 1){	
						if(request.getParameter("usgFirstTrimThirdV1") != null && (!request.getParameter("usgFirstTrimThirdV1").equals("")))
								 {
							for(int i=1;i<=8;i++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
								 
								 
									  opdAntenatalUsg.setUsgParameter(paraList[i-1]);
									  if (request.getParameter("usgFirstTrimThirdV"+i) != null && (!request.getParameter("usgFirstTrimThirdV"+i).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue3(request.getParameter("usgFirstTrimThirdV"+i));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlag);
										opdAntenatalUsg.setTrimister("First");
										opdAntenatalUsg.setVisitFlag("Third");
										opdAntenatalUsg.setFirstTrimWeeks("Week10");
										usgReportFirstTrimList.add(opdAntenatalUsg); 
									  
									  if(usgFlag.equalsIgnoreCase("Twins") || usgFlag.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraList[i-1]);
										  if (request.getParameter("usgFirstTrimTwinsThirdV"+i) != null && (!request.getParameter("usgFirstTrimTwinsThirdV"+i).equals(""))) {
											  opdAntenatalUsgTwins.setUsgParameterValue3(request.getParameter("usgFirstTrimTwinsThirdV"+i));							 
										}
										  opdAntenatalUsgTwins.setUsgFlag(usgFlag);
										  opdAntenatalUsgTwins.setTrimister("First");
										  opdAntenatalUsgTwins.setVisitFlag("Third");
										  opdAntenatalUsgTwins.setFirstTrimWeeks("Week10");
										  usgReportFirstTrimList.add(opdAntenatalUsgTwins); 
									  }
									  if(usgFlag.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraList[i-1]);
										  if (request.getParameter("usgFirstTrimTripletsThirdV"+i) != null && (!request.getParameter("usgFirstTrimTripletsThirdV"+i).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue3(request.getParameter("usgFirstTrimTripletsThirdV"+i));							 
										}
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlag);
										  opdAntenatalUsgTriplets.setTrimister("First");
										  opdAntenatalUsgTriplets.setVisitFlag("Third");
										  opdAntenatalUsgTriplets.setFirstTrimWeeks("Week10");
										  usgReportFirstTrimList.add(opdAntenatalUsgTriplets); 
									  }
							
								    
							}	
							 }
							 }
					  //USG reports 10-14 weeks
						 
						 String firstTrimSecondGridFirstVisitFlag="";
							
							if(request.getParameter("firstTrimSecondGridFirstVisitFlag") != null && (!request.getParameter("firstTrimSecondGridFirstVisitFlag").equals("")))
							{
								firstTrimSecondGridFirstVisitFlag=request.getParameter("firstTrimSecondGridFirstVisitFlag");
							}
							 
							   List<OpdAntenatalUsg> usgFirstTrimGrid2ListFirstVisit = new ArrayList<OpdAntenatalUsg>();
								if (map1.get("usgFirstTrimGrid2DateListFirstVisit") != null) {
									usgFirstTrimGrid2ListFirstVisit = (List) map1.get("usgFirstTrimGrid2DateListFirstVisit");
							
								}
							 String usgFlagGrid2="";
								
								if(request.getParameter("usgFlagSecondGrid") != null && (!request.getParameter("usgFlagSecondGrid").equals("")))
								{
									usgFlagGrid2=request.getParameter("usgFlagSecondGrid");
								}
								if(usgFlagGrid2 == null || usgFlagGrid2.equals(""))
									usgFlagGrid2="Single";
								
								
								//First Visit
								//if(usgFirstTrimGrid2ListFirstVisit.size()<=0){
									if(firstTrimSecondGridFirstVisitFlag.equalsIgnoreCase("SecondGrid")){
									if(request.getParameter("usgFirstTrimGrid2FirstV1") != null && (!request.getParameter("usgFirstTrimGrid2FirstV1").equals("")))
									{
									for(int i=1;i<=9;i++){
										  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
											  opdAntenatalUsg.setUsgParameter(paraListSecondGrid[i-1]);
											  if (request.getParameter("usgFirstTrimGrid2FirstV"+i) != null && (!request.getParameter("usgFirstTrimGrid2FirstV"+i).equals(""))) {
												opdAntenatalUsg.setUsgParameterValue1(request.getParameter("usgFirstTrimGrid2FirstV"+i));							 
											}
											  
											  opdAntenatalUsg.setUsgFlag(usgFlagGrid2);
											  opdAntenatalUsg.setVisitFlag("First");
											  opdAntenatalUsg.setTrimister("First");
											  opdAntenatalUsg.setFirstTrimWeeks("Week10-14");
											  usgReportFirstTrimListWeek14.add(opdAntenatalUsg);
											   
												
											  if(usgFlagGrid2.equalsIgnoreCase("Twins") || usgFlagGrid2.equalsIgnoreCase("Triplets")){
												  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
												  opdAntenatalUsgTwins.setUsgParameter(paraListSecondGrid[i-1]);
											  if (request.getParameter("usgFirstTrimGrid2TwinsFirstV"+i) != null && (!request.getParameter("usgFirstTrimGrid2TwinsFirstV"+i).equals(""))) {
												  opdAntenatalUsgTwins.setUsgParameterValue1(request.getParameter("usgFirstTrimGrid2TwinsFirstV"+i));							 
												}
											  opdAntenatalUsgTwins.setUsgFlag(usgFlagGrid2);
											  opdAntenatalUsgTwins.setVisitFlag("First");
											  opdAntenatalUsgTwins.setTrimister("First");
											  opdAntenatalUsgTwins.setFirstTrimWeeks("Week10-14");
											  usgReportFirstTrimListWeek14.add(opdAntenatalUsgTwins);
											  }
											  if(usgFlagGrid2.equalsIgnoreCase("Triplets")){
												  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
												  opdAntenatalUsgTriplets.setUsgParameter(paraListSecondGrid[i-1]);
												  if (request.getParameter("usgFirstTrimGrid2TripletsFirstV"+i) != null && (!request.getParameter("usgFirstTrimGrid2TripletsFirstV"+i).equals(""))) {
													  opdAntenatalUsgTriplets.setUsgParameterValue1(request.getParameter("usgFirstTrimGrid2TripletsFirstV"+i));							 
												}
												  
													
													
												  
												  opdAntenatalUsgTriplets.setUsgFlag(usgFlagGrid2);
												  opdAntenatalUsgTriplets.setVisitFlag("First");
												  opdAntenatalUsgTriplets.setTrimister("First");
												  opdAntenatalUsgTriplets.setFirstTrimWeeks("Week10-14");
												  usgReportFirstTrimListWeek14.add(opdAntenatalUsgTriplets);
											  }
									
										  
									}
									}	
								}
					  
								
				//Second Visit
									
									String firstTrimSecondGridSecondVisitFlag="";
									
									if(request.getParameter("firstTrimSecondGridSecondVisitFlag") != null && (!request.getParameter("firstTrimSecondGridSecondVisitFlag").equals("")))
									{
										firstTrimSecondGridSecondVisitFlag=request.getParameter("firstTrimSecondGridSecondVisitFlag");
									}

								   List<OpdAntenatalUsg> usgFirstTrimGrid2ListSecondVisit = new ArrayList<OpdAntenatalUsg>();
									if (map1.get("usgFirstTrimGrid2DateListSecondVisit") != null) {
										usgFirstTrimGrid2ListSecondVisit = (List) map1.get("usgFirstTrimGrid2DateListSecondVisit");
								
									}
								
								// if(usgFirstTrimGrid2ListFirstVisit.size()>0 && usgFirstTrimGrid2ListSecondVisit.size()<=0){
									if(firstTrimSecondGridSecondVisitFlag.equalsIgnoreCase("SecondGrid")){
									if(request.getParameter("usgFirstTrimGrid2SecondV1") != null && (!request.getParameter("usgFirstTrimGrid2SecondV1").equals("")))
									{
									for(int i=1;i<=9;i++){
										  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
											  opdAntenatalUsg.setUsgParameter(paraListSecondGrid[i-1]);
											  if (request.getParameter("usgFirstTrimGrid2SecondV"+i) != null && (!request.getParameter("usgFirstTrimGrid2SecondV"+i).equals(""))) {
												opdAntenatalUsg.setUsgParameterValue2(request.getParameter("usgFirstTrimGrid2SecondV"+i));							 
											}
											  
											  opdAntenatalUsg.setUsgFlag(usgFlagGrid2);
											  opdAntenatalUsg.setVisitFlag("Second");
											  opdAntenatalUsg.setTrimister("First");
											  opdAntenatalUsg.setFirstTrimWeeks("Week10-14");
											  usgReportFirstTrimListWeek14.add(opdAntenatalUsg);
											   
												
											  if(usgFlagGrid2.equalsIgnoreCase("Twins") || usgFlagGrid2.equalsIgnoreCase("Triplets")){
												  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
												  opdAntenatalUsgTwins.setUsgParameter(paraListSecondGrid[i-1]);
											  if (request.getParameter("usgFirstTrimGrid2TwinsSecondV"+i) != null && (!request.getParameter("usgFirstTrimGrid2TwinsSecondV"+i).equals(""))) {
												  opdAntenatalUsgTwins.setUsgParameterValue2(request.getParameter("usgFirstTrimGrid2TwinsSecondV"+i));							 
												}
											  opdAntenatalUsgTwins.setUsgFlag(usgFlagGrid2);
											  opdAntenatalUsgTwins.setVisitFlag("Second");
											  opdAntenatalUsgTwins.setTrimister("First");
											  opdAntenatalUsgTwins.setFirstTrimWeeks("Week10-14");
											  usgReportFirstTrimListWeek14.add(opdAntenatalUsgTwins);
											  }
											  if(usgFlagGrid2.equalsIgnoreCase("Triplets")){
												  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
												  opdAntenatalUsgTriplets.setUsgParameter(paraListSecondGrid[i-1]);
												  if (request.getParameter("usgFirstTrimGrid2TripletsSecondV"+i) != null && (!request.getParameter("usgFirstTrimGrid2TripletsSecondV"+i).equals(""))) {
													  opdAntenatalUsgTriplets.setUsgParameterValue2(request.getParameter("usgFirstTrimGrid2TripletsSecondV"+i));							 
												}
												  
													
													
												  
												  opdAntenatalUsgTriplets.setUsgFlag(usgFlagGrid2);
												  opdAntenatalUsgTriplets.setVisitFlag("Second");
												  opdAntenatalUsgTriplets.setTrimister("First");
												  opdAntenatalUsgTriplets.setFirstTrimWeeks("Week10-14");
												  usgReportFirstTrimListWeek14.add(opdAntenatalUsgTriplets);
											  }
									
										  
									}
									}	
								}	
								
								 
								//Third Visit

									String firstTrimSecondGridThirdVisitFlag="";
									
									if(request.getParameter("firstTrimSecondGridThirdVisitFlag") != null && (!request.getParameter("firstTrimSecondGridThirdVisitFlag").equals("")))
									{
										firstTrimSecondGridThirdVisitFlag=request.getParameter("firstTrimSecondGridThirdVisitFlag");
									}
								   List<OpdAntenatalUsg> usgFirstTrimGrid2ListThirdVisit = new ArrayList<OpdAntenatalUsg>();
									if (map1.get("usgFirstTrimGrid2DateListThirdVisit") != null) {
										usgFirstTrimGrid2ListThirdVisit = (List) map1.get("usgFirstTrimGrid2DateListThirdVisit");
								
									}
								
								// if(usgFirstTrimGrid2ListFirstVisit.size()>0 && usgFirstTrimGrid2ListSecondVisit.size()>0 && usgFirstTrimGrid2ListThirdVisit.size() <= 0){
									 if(firstTrimSecondGridThirdVisitFlag.equalsIgnoreCase("SecondGrid")){
									if(request.getParameter("usgFirstGrid2TrimThirdV1") != null && (!request.getParameter("usgFirstGrid2TrimThirdV1").equals("")))
									{
									for(int i=1;i<=9;i++){
										  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
											  opdAntenatalUsg.setUsgParameter(paraListSecondGrid[i-1]);
											  if (request.getParameter("usgFirstGrid2TrimThirdV"+i) != null && (!request.getParameter("usgFirstGrid2TrimThirdV"+i).equals(""))) {
												opdAntenatalUsg.setUsgParameterValue3(request.getParameter("usgFirstGrid2TrimThirdV"+i));							 
											}
											  
											  opdAntenatalUsg.setUsgFlag(usgFlagGrid2);
											  opdAntenatalUsg.setVisitFlag("Third");
											  opdAntenatalUsg.setTrimister("First");
											  opdAntenatalUsg.setFirstTrimWeeks("Week10-14");
											  usgReportFirstTrimListWeek14.add(opdAntenatalUsg);
											   
												
											  if(usgFlagGrid2.equalsIgnoreCase("Twins") || usgFlagGrid2.equalsIgnoreCase("Triplets")){
												  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
												  opdAntenatalUsgTwins.setUsgParameter(paraListSecondGrid[i-1]);
											  if (request.getParameter("usgFirstTrimGrid2TwinsThirdV"+i) != null && (!request.getParameter("usgFirstTrimGrid2TwinsThirdV"+i).equals(""))) {
												  opdAntenatalUsgTwins.setUsgParameterValue3(request.getParameter("usgFirstTrimGrid2TwinsThirdV"+i));							 
												}
											  opdAntenatalUsgTwins.setUsgFlag(usgFlagGrid2);
											  opdAntenatalUsgTwins.setVisitFlag("Third");
											  opdAntenatalUsgTwins.setTrimister("First");
											  opdAntenatalUsgTwins.setFirstTrimWeeks("Week10-14");
											  usgReportFirstTrimListWeek14.add(opdAntenatalUsgTwins);
											  }
											  if(usgFlagGrid2.equalsIgnoreCase("Triplets")){
												  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
												  opdAntenatalUsgTriplets.setUsgParameter(paraListSecondGrid[i-1]);
												  if (request.getParameter("usgFirstTrimGrid2TripletsThirdV"+i) != null && (!request.getParameter("usgFirstTrimGrid2TripletsThirdV"+i).equals(""))) {
													  opdAntenatalUsgTriplets.setUsgParameterValue3(request.getParameter("usgFirstTrimGrid2TripletsThirdV"+i));							 
												}
												  
													
													
												  
												  opdAntenatalUsgTriplets.setUsgFlag(usgFlagGrid2);
												  opdAntenatalUsgTriplets.setVisitFlag("Third");
												  opdAntenatalUsgTriplets.setTrimister("First");
												  opdAntenatalUsgTriplets.setFirstTrimWeeks("Week10-14");
												  usgReportFirstTrimListWeek14.add(opdAntenatalUsgTriplets);
											  }
									
										  
									}
									}	
								}	
										 
					
					  //USG reports 10-14 weeks end
					  
					  
					  /*------------------------------second trimster--------------------------------------------*/
					 String[] paraSecondTrimList = new String[] {"Date", "LMP GA","USG GA","BPD","HC","AC","FL","AFI","Placenta","EBW","CX Length","Anomalies","Impression","Remarks"}; 
						
						map1 = opdHandlerService.getAntenatalCard2(visitId,hinId,box);
						
						List<OpdAntenatalUsg> usgSecondTrimFirstVisitList= new ArrayList<OpdAntenatalUsg>();
						if (map1.get("usgSecondTrimFirstVisitList") != null) {
							usgSecondTrimFirstVisitList = (List) map1.get("usgSecondTrimFirstVisitList");
					
						}
						
						String secondTrimFirstVisitFlag="";
						
						if(request.getParameter("secondTrimFirstVisitFlag") != null && (!request.getParameter("secondTrimFirstVisitFlag").equals("")))
						{
							secondTrimFirstVisitFlag=request.getParameter("secondTrimFirstVisitFlag");
						}
						
						
						String usgFlagSecondTrim="";
						
						if(request.getParameter("usgFlagSecondTrim") != null && (!request.getParameter("usgFlagSecondTrim").equals("")))
						{
							usgFlagSecondTrim=request.getParameter("usgFlagSecondTrim");
						}
						if(usgFlagSecondTrim == null || usgFlagSecondTrim.equals(""))
							usgFlagSecondTrim="Single";
						
							 // if(usgSecondTrimFirstVisitList.size()<=0){
								  if(secondTrimFirstVisitFlag.equalsIgnoreCase("SecondTrim")){
								  if(request.getParameter("usgSecondTrimFirstV1") != null && (!request.getParameter("usgSecondTrimFirstV1").equals(""))){
							for(int j=1;j<=14;j++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
									  opdAntenatalUsg.setUsgParameter(paraSecondTrimList[j-1]);
									  if (request.getParameter("usgSecondTrimFirstV"+j) != null && (!request.getParameter("usgSecondTrimFirstV"+j).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue1(request.getParameter("usgSecondTrimFirstV"+j));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlagSecondTrim);
									    opdAntenatalUsg.setVisitFlag("First");
										opdAntenatalUsg.setTrimister("Second");
										usgReportSecondTrimList.add(opdAntenatalUsg); 
										
									  if(usgFlagSecondTrim.equalsIgnoreCase("Twins") || usgFlagSecondTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraSecondTrimList[j-1]);
									  if (request.getParameter("usgSecondTrimTwinsFirstV"+j) != null && (!request.getParameter("usgSecondTrimTwinsFirstV"+j).equals(""))) {
										  opdAntenatalUsgTwins.setUsgParameterValue1(request.getParameter("usgSecondTrimTwinsFirstV"+j));							 
										}
									  opdAntenatalUsgTwins.setUsgFlag(usgFlagSecondTrim);
									  opdAntenatalUsgTwins.setVisitFlag("First");
									  opdAntenatalUsgTwins.setTrimister("Second");
									  usgReportSecondTrimList.add(opdAntenatalUsgTwins); 
									  }
									  if(usgFlagSecondTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraSecondTrimList[j-1]);
										  if (request.getParameter("usgSecondTrimTripletsFirstV"+j) != null && (!request.getParameter("usgSecondTrimTripletsFirstV"+j).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue1(request.getParameter("usgSecondTrimTripletsFirstV"+j));							 
										}
										  
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlagSecondTrim);
										  opdAntenatalUsgTriplets.setVisitFlag("First");
										  opdAntenatalUsgTriplets.setTrimister("Second");
										  usgReportSecondTrimList.add(opdAntenatalUsgTriplets); 
									  }
							
								  
							}
							}	
							  }	
						
						//Second Visit-----
							  List<OpdAntenatalUsg>  usgSecondTrimSecondVisitList= new ArrayList<OpdAntenatalUsg>();
								if (map1.get("usgSecondTrimSecondVisitList") != null) {
									usgSecondTrimSecondVisitList = (List) map1.get("usgSecondTrimSecondVisitList");
								}
								
								String secondTrimSecondVisitFlag="";
								
								if(request.getParameter("secondTrimSecondVisitFlag") != null && (!request.getParameter("secondTrimSecondVisitFlag").equals("")))
								{
									secondTrimSecondVisitFlag=request.getParameter("secondTrimSecondVisitFlag");
								}
								
							// if(usgSecondTrimFirstVisitList.size()> 0 && usgSecondTrimSecondVisitList.size()<=0){
								 if(secondTrimSecondVisitFlag.equalsIgnoreCase("SecondTrim")){
								 if(request.getParameter("usgSecondTrimSecondV1") != null && (!request.getParameter("usgSecondTrimSecondV1").equals(""))){
							for(int j=1;j<=14;j++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
									  opdAntenatalUsg.setUsgParameter(paraSecondTrimList[j-1]);
									  if (request.getParameter("usgSecondTrimSecondV"+j) != null && (!request.getParameter("usgSecondTrimSecondV"+j).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue2(request.getParameter("usgSecondTrimSecondV"+j));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlagSecondTrim);
									    opdAntenatalUsg.setVisitFlag("Second");
										opdAntenatalUsg.setTrimister("Second");
										usgReportSecondTrimList.add(opdAntenatalUsg); 
									  if(usgFlagSecondTrim.equalsIgnoreCase("Twins") || usgFlagSecondTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraSecondTrimList[j-1]);
										  if (request.getParameter("usgSecondTrimTwinsSecondV"+j) != null && (!request.getParameter("usgSecondTrimTwinsSecondV"+j).equals(""))) {
											  opdAntenatalUsgTwins.setUsgParameterValue2(request.getParameter("usgSecondTrimTwinsSecondV"+j));							 
										}
										  
										  opdAntenatalUsgTwins.setUsgFlag(usgFlagSecondTrim);
										  opdAntenatalUsgTwins.setVisitFlag("Second");
										  opdAntenatalUsgTwins.setTrimister("Second");
										  usgReportSecondTrimList.add(opdAntenatalUsgTwins);
									  }
									  if(usgFlagSecondTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraSecondTrimList[j-1]);
										  if (request.getParameter("usgSecondTrimTripletsSecondV"+j) != null && (!request.getParameter("usgSecondTrimTripletsSecondV"+j).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue2(request.getParameter("usgSecondTrimTripletsSecondV"+j));							 
										}
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlagSecondTrim);
										  opdAntenatalUsgTriplets.setVisitFlag("Second");
										  opdAntenatalUsgTriplets.setTrimister("Second");
										  usgReportSecondTrimList.add(opdAntenatalUsgTriplets);
									  }
							
								   
								}
							 }
						}
						
						
						/// Third visit
							 List<OpdAntenatalUsg>  usgSecondTrimThirdVisitList= new ArrayList<OpdAntenatalUsg>();
								if (map1.get("usgSecondTrimThirdVisitList") != null) {
									usgSecondTrimThirdVisitList = (List) map1.get("usgSecondTrimThirdVisitList");
								}
								
								String secondTrimThirdVisitFlag="";
								
								if(request.getParameter("secondTrimThirdVisitFlag") != null && (!request.getParameter("secondTrimThirdVisitFlag").equals("")))
								{
									secondTrimThirdVisitFlag=request.getParameter("secondTrimThirdVisitFlag");
								}
								
							 //if(usgSecondTrimFirstVisitList.size()> 0 && usgSecondTrimSecondVisitList.size() > 0 && usgSecondTrimThirdVisitList.size()<=0){
								
								 if(secondTrimThirdVisitFlag.equalsIgnoreCase("SecondTrim")){
								 if(request.getParameter("usgSecondTrimThirdV1") != null && (!request.getParameter("usgSecondTrimThirdV1").equals(""))){
							for(int j=1;j<=14;j++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
								 
								 
									  opdAntenatalUsg.setUsgParameter(paraSecondTrimList[j-1]);
									  if (request.getParameter("usgSecondTrimThirdV"+j) != null && (!request.getParameter("usgSecondTrimThirdV"+j).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue3(request.getParameter("usgSecondTrimThirdV"+j));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlagSecondTrim);
										opdAntenatalUsg.setTrimister("Second");
										opdAntenatalUsg.setVisitFlag("Third");
										usgReportSecondTrimList.add(opdAntenatalUsg); 
									  
									  if(usgFlagSecondTrim.equalsIgnoreCase("Twins") || usgFlagSecondTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraSecondTrimList[j-1]);
										  if (request.getParameter("usgSecondTrimTwinsThirdV"+j) != null && (!request.getParameter("usgSecondTrimTwinsThirdV"+j).equals(""))) {
											  opdAntenatalUsgTwins.setUsgParameterValue3(request.getParameter("usgSecondTrimTwinsThirdV"+j));							 
										}
										  opdAntenatalUsgTwins.setUsgFlag(usgFlagSecondTrim);
										  opdAntenatalUsgTwins.setTrimister("Second");
										  opdAntenatalUsgTwins.setVisitFlag("Third");
										  usgReportSecondTrimList.add(opdAntenatalUsgTwins); 
									  }
									  if(usgFlagSecondTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraSecondTrimList[j-1]);
										  if (request.getParameter("usgSecondTrimTripletsThirdV"+j) != null && (!request.getParameter("usgSecondTrimTripletsThirdV"+j).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue3(request.getParameter("usgSecondTrimTripletsThirdV"+j));							 
										}
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlagSecondTrim);
										  opdAntenatalUsgTriplets.setTrimister("Second");
										  opdAntenatalUsgTriplets.setVisitFlag("Third");
										  usgReportSecondTrimList.add(opdAntenatalUsgTriplets); 
									  }
							
							} 
							}	
							 }
		
						
						
						
						/*------------------------------third trimster--------------------------------------------*/
						String[] paraThirdTrimList = new String[] {"Date", "LMP GA","USG GA","BPD","HC","AC","FL","AFI","Placenta","EBW","BPP","Doppler","Impression","Remarks"}; 
						
						map1 = opdHandlerService.getAntenatalCard2(visitId,hinId,box);
						
						
						
						List<OpdAntenatalUsg> usgThirdTrimFirstVisitList= new ArrayList<OpdAntenatalUsg>();
						if (map1.get("usgThirdTrimFirstVisitList") != null) {
							usgThirdTrimFirstVisitList = (List) map1.get("usgThirdTrimFirstVisitList");
					
						}
						String thirdTrimFirstVisitFlag="";
						
						if(request.getParameter("thirdTrimFirstVisitFlag") != null && (!request.getParameter("thirdTrimFirstVisitFlag").equals("")))
						{
							thirdTrimFirstVisitFlag=request.getParameter("thirdTrimFirstVisitFlag");
						}
						
						String usgFlagThirdTrim="";
						
						if(request.getParameter("usgFlagThirdTrim") != null && (!request.getParameter("usgFlagThirdTrim").equals("")))
						{
							usgFlagThirdTrim=request.getParameter("usgFlagThirdTrim");
						}
						if(usgFlagThirdTrim == null || usgFlagThirdTrim.equals(""))
							usgFlagThirdTrim="Single";
						
							//  if(usgThirdTrimFirstVisitList.size()<=0){
						     if(thirdTrimFirstVisitFlag.equalsIgnoreCase("ThirdTrim")){
								  if(request.getParameter("usgThirdTrimFirstV1") != null && (!request.getParameter("usgThirdTrimFirstV1").equals(""))){
							for(int k=1;k<=14;k++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
									  opdAntenatalUsg.setUsgParameter(paraThirdTrimList[k-1]);
									  if (request.getParameter("usgThirdTrimFirstV"+k) != null && (!request.getParameter("usgThirdTrimFirstV"+k).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue1(request.getParameter("usgThirdTrimFirstV"+k));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlagThirdTrim);
									    opdAntenatalUsg.setVisitFlag("First");
										opdAntenatalUsg.setTrimister("Third");
										usgReportThirdTrimList.add(opdAntenatalUsg); 
										
									  if(usgFlagThirdTrim.equalsIgnoreCase("Twins") || usgFlagThirdTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraThirdTrimList[k-1]);
									  if (request.getParameter("usgThirdTrimTwinsFirstV"+k) != null && (!request.getParameter("usgThirdTrimTwinsFirstV"+k).equals(""))) {
										  opdAntenatalUsgTwins.setUsgParameterValue1(request.getParameter("usgThirdTrimTwinsFirstV"+k));							 
										}
									  opdAntenatalUsgTwins.setUsgFlag(usgFlagThirdTrim);
									  opdAntenatalUsgTwins.setVisitFlag("First");
									  opdAntenatalUsgTwins.setTrimister("Third");
									  usgReportThirdTrimList.add(opdAntenatalUsgTwins); 
									  }
									  if(usgFlagThirdTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraThirdTrimList[k-1]);
										  if (request.getParameter("usgThirdTrimTripletsFirstV"+k) != null && (!request.getParameter("usgThirdTrimTripletsFirstV"+k).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue1(request.getParameter("usgThirdTrimTripletsFirstV"+k));							 
										}
										  
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlagThirdTrim);
										  opdAntenatalUsgTriplets.setVisitFlag("First");
										  opdAntenatalUsgTriplets.setTrimister("Third");
										  usgReportThirdTrimList.add(opdAntenatalUsgTriplets); 
									  }
							
								  
							}
							}	
							  }	
						
						//Second Visit-----
							  List<OpdAntenatalUsg> usgThirdTrimSecondVisitList= new ArrayList<OpdAntenatalUsg>();
								if (map1.get("usgThirdTrimSecondVisitList") != null) {
									usgThirdTrimSecondVisitList = (List) map1.get("usgThirdTrimSecondVisitList");
								}
								
								String thirdTrimSecondVisitFlag="";
								
								if(request.getParameter("thirdTrimSecondVisitFlag") != null && (!request.getParameter("thirdTrimSecondVisitFlag").equals("")))
								{
									thirdTrimSecondVisitFlag=request.getParameter("thirdTrimSecondVisitFlag");
								}
								
							// if(usgThirdTrimFirstVisitList.size()> 0 && usgThirdTrimSecondVisitList.size()<=0){
								if(thirdTrimSecondVisitFlag.equalsIgnoreCase("ThirdTrim")){
								 if(request.getParameter("usgThirdTrimSecondV1") != null && (!request.getParameter("usgThirdTrimSecondV1").equals(""))){
							for(int k=1;k<=14;k++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
									  opdAntenatalUsg.setUsgParameter(paraThirdTrimList[k-1]);
									  if (request.getParameter("usgThirdTrimSecondV"+k) != null && (!request.getParameter("usgThirdTrimSecondV"+k).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue2(request.getParameter("usgThirdTrimSecondV"+k));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlagThirdTrim);
									    opdAntenatalUsg.setVisitFlag("Second");
										opdAntenatalUsg.setTrimister("Third");
										usgReportThirdTrimList.add(opdAntenatalUsg); 
									  if(usgFlagThirdTrim.equalsIgnoreCase("Twins") || usgFlagThirdTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraThirdTrimList[k-1]);
										  if (request.getParameter("usgThirdTrimTwinsSecondV"+k) != null && (!request.getParameter("usgThirdTrimTwinsSecondV"+k).equals(""))) {
											  opdAntenatalUsgTwins.setUsgParameterValue2(request.getParameter("usgThirdTrimTwinsSecondV"+k));							 
										}
										  
										  opdAntenatalUsgTwins.setUsgFlag(usgFlagThirdTrim);
										  opdAntenatalUsgTwins.setVisitFlag("Second");
										  opdAntenatalUsgTwins.setTrimister("Third");
										  usgReportThirdTrimList.add(opdAntenatalUsgTwins);
									  }
									  if(usgFlagThirdTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraThirdTrimList[k-1]);
										  if (request.getParameter("usgThirdTrimTripletsSecondV"+k) != null && (!request.getParameter("usgThirdTrimTripletsSecondV"+k).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue2(request.getParameter("usgThirdTrimTripletsSecondV"+k));							 
										}
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlagThirdTrim);
										  opdAntenatalUsgTriplets.setVisitFlag("Second");
										  opdAntenatalUsgTriplets.setTrimister("Third");
										  usgReportThirdTrimList.add(opdAntenatalUsgTriplets);
									  }
							
								   
								}
							 }
						}
						
						
						/// Third visit
							 List<OpdAntenatalUsg> usgThirdTrimThirdVisitList= new ArrayList<OpdAntenatalUsg>();
								if (map1.get("usgThirdTrimThirdVisitList") != null) {
									usgThirdTrimThirdVisitList = (List) map1.get("usgThirdTrimThirdVisitList");
								}
								
								String thirdTrimThirdVisitFlag="";
								
								if(request.getParameter("thirdTrimThirdVisitFlag") != null && (!request.getParameter("thirdTrimThirdVisitFlag").equals("")))
								{
									thirdTrimThirdVisitFlag=request.getParameter("thirdTrimThirdVisitFlag");
								}
								
							// if(usgThirdTrimFirstVisitList.size()> 0 && usgThirdTrimSecondVisitList.size() > 0 && usgThirdTrimThirdVisitList.size()<=0){
								 if(thirdTrimThirdVisitFlag.equalsIgnoreCase("ThirdTrim")){
								 if(request.getParameter("usgThirdTrimThirdV1") != null && (!request.getParameter("usgThirdTrimThirdV1").equals(""))){
							for(int k=1;k<=14;k++){
								  OpdAntenatalUsg opdAntenatalUsg = new OpdAntenatalUsg();
								 
								 
									  opdAntenatalUsg.setUsgParameter(paraThirdTrimList[k-1]);
									  if (request.getParameter("usgThirdTrimThirdV"+k) != null && (!request.getParameter("usgThirdTrimThirdV"+k).equals(""))) {
										opdAntenatalUsg.setUsgParameterValue3(request.getParameter("usgThirdTrimThirdV"+k));							 
									}
									    opdAntenatalUsg.setUsgFlag(usgFlagThirdTrim);
										opdAntenatalUsg.setTrimister("Third");
										opdAntenatalUsg.setVisitFlag("Third");
										usgReportThirdTrimList.add(opdAntenatalUsg); 
									  
									  if(usgFlagThirdTrim.equalsIgnoreCase("Twins") || usgFlagThirdTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTwins = new OpdAntenatalUsg();
										  opdAntenatalUsgTwins.setUsgParameter(paraThirdTrimList[k-1]);
										  if (request.getParameter("usgThirdTrimTwinsThirdV"+k) != null && (!request.getParameter("usgThirdTrimTwinsThirdV"+k).equals(""))) {
											  opdAntenatalUsgTwins.setUsgParameterValue3(request.getParameter("usgThirdTrimTwinsThirdV"+k));							 
										}
										  opdAntenatalUsgTwins.setUsgFlag(usgFlagThirdTrim);
										  opdAntenatalUsgTwins.setTrimister("Third");
										  opdAntenatalUsgTwins.setVisitFlag("Third");
										  usgReportThirdTrimList.add(opdAntenatalUsgTwins); 
									  }
									  if(usgFlagThirdTrim.equalsIgnoreCase("Triplets")){
										  OpdAntenatalUsg opdAntenatalUsgTriplets = new OpdAntenatalUsg();
										  opdAntenatalUsgTriplets.setUsgParameter(paraThirdTrimList[k-1]);
										  if (request.getParameter("usgThirdTrimTripletsThirdV"+k) != null && (!request.getParameter("usgThirdTrimTripletsThirdV"+k).equals(""))) {
											  opdAntenatalUsgTriplets.setUsgParameterValue3(request.getParameter("usgThirdTrimTripletsThirdV"+k));							 
										}
										  opdAntenatalUsgTriplets.setUsgFlag(usgFlagThirdTrim);
										  opdAntenatalUsgTriplets.setTrimister("Third");
										  opdAntenatalUsgTriplets.setVisitFlag("Third");
										  usgReportThirdTrimList.add(opdAntenatalUsgTriplets); 
									  }
							
							} 
							}	
							 }
					  
					  
						int count=0;
						if(AntCount==1 && exist==1){
							
							antenatalCard = new OpdAntenatalCard();
							count=1;
						}
						if(exist==0 && AntCount==0){
							
							antenatalCard = new OpdAntenatalCard();
							count=1;
						}
						if(exist==0 && AntCount==1){
							
							antenatalCard = new OpdAntenatalCard();
							count=1;
						}
					
						/*if(exist!=1){*/
						antenatalCard = new OpdAntenatalCard();
						if(request.getParameter("opdAntenatalCardId")!=null)
							antenatalCard.setId(Integer.parseInt(request.getParameter("opdAntenatalCardId")));
							
						antenatalCard.setHospital(masHospital);
						antenatalCard.setHin(patient);
						antenatalCard.setVisit(visit);
						antenatalCard.setDepartment(masDepartment);
						antenatalCard.setLastChgTime(time);
						antenatalCard.setLastChgBy(userId);
						antenatalCard.setStatus("y");
						antenatalCard.setLastChgDate(HMSUtil
								.convertStringTypeDateToDateType(date));

						antenatalCard.setAbortions(abortions);
						antenatalCard.setVesicular(vesicular);
						antenatalCard.setMtp(mtp);
						antenatalCard.setIud(iud);
						antenatalCard.setStillBirth(stillBirth);
						antenatalCard.setNnd(nnd);
						antenatalCard.setScannedEdc(scannedEdc);
						antenatalCard.setEdcDate(edcDate);
						antenatalCard.setEctopic(ectopic);
						antenatalCard.setEdd(edd);
						
						antenatalCard.setGravida1(gravida);
						antenatalCard.setLive(liveBirth);
						
						antenatalCard.setLmp(lmp);
						if(request.getParameter("UnknownLmpStatus")!=null)
						  antenatalCard.setUnknownLmpStatus("y");
						else
						  antenatalCard.setUnknownLmpStatus("n");
						antenatalCard.setMenarche(menarche);
						antenatalCard.setCycle(cycle);
						antenatalCard.setCycleFlow(cycleFlow);
						antenatalCard.setDays(days);
						antenatalCard.setCycle1(cycle1);
						antenatalCard.setDays1(days1);
						antenatalCard.setCycle2(cycle2);
						antenatalCard.setDays2(days2);
						antenatalCard.setCycle3(cycle3);
						antenatalCard.setDays3(days3);
						antenatalCard.setMaritalStatus(maritalStatus);
						antenatalCard.setAgeYear(years);
						antenatalCard.setAgeMonth(months);
						antenatalCard.setConsanguineous(consanguineous);
						antenatalCard.setDegree(degree);
						antenatalCard.setInfertility(infertility);
						antenatalCard.setFactor(factor);
						antenatalCard.setInfertilityDetails(infertilityDetails);
						antenatalCard.setOcpS(ocps);
						antenatalCard.setPpiucd(ppiucd);
						antenatalCard.setTubalLigation(tubalLigation);
						antenatalCard.setVasectomy(vasectomy);
						antenatalCard.setCondom(condom);
						antenatalCard.setIntervalIucd(intervalIUCD);
						antenatalCard.setLam(fpLam);
						antenatalCard.setNone(fpNone);					
						antenatalCard.setNextVisitOn(nextVisitOn);
						antenatalCard.setPara(para);
						antenatalCard.setMedicalDisord(medicalDisord);
						antenatalCard.setObstetricComplications(obstetricComplications);
						if(!obstetricValues.equals("")){
							antenatalCard.setObstetricValues(obstetricValues);
						}
						if(pastSurgicalHistoryRadio != null && pastSurgicalHistoryRadio.equalsIgnoreCase("Yes")){
							antenatalCard.setSurgicalHistoryRadio(pastSurgicalHistoryRadio);
							antenatalCard.setSurgicalHistory(surgicalHistory);
						}else{
							antenatalCard.setSurgicalHistoryRadio(pastSurgicalHistoryRadio);
						}
						
						
						/*if (request.getParameter("dateUsgReport") != null && (!request.getParameter("dateUsgReport").equals(""))) {
							antenatalCard.setDateUsgReport(request.getParameter("dateUsgReport"));
						}
						
						if (request.getParameter("dateUsgOne") != null && (!request.getParameter("dateUsgOne").equals(""))) {
							antenatalCard.setDateUsgOne(HMSUtil.convertStringTypeDateToDateType(request.getParameter("dateUsgOne")));
						}
						
						if (request.getParameter("dateUsgTwo") != null && (!request.getParameter("dateUsgTwo").equals(""))) {
							antenatalCard.setDateUsgTwo(HMSUtil.convertStringTypeDateToDateType(request.getParameter("dateUsgTwo")));
						}
						
						if (request.getParameter("dateUsgThree") != null && (!request.getParameter("dateUsgThree").equals(""))) {
							antenatalCard.setDateUsgThree(HMSUtil.convertStringTypeDateToDateType(request.getParameter("dateUsgThree")));
						}
						
						
						
						if (request.getParameter("lmpGaUsgReport") != null && (!request.getParameter("lmpGaUsgReport").equals(""))) {
							antenatalCard.setLmpGaUsgReport(request.getParameter("lmpGaUsgReport"));
						}
						
						if (request.getParameter("lmpGaOne") != null && (!request.getParameter("lmpGaOne").equals(""))) {
							antenatalCard.setLmpGaOne(request.getParameter("lmpGaOne"));
						}
						
						if (request.getParameter("lmpGaTwo") != null && (!request.getParameter("lmpGaTwo").equals(""))) {
							antenatalCard.setLmpGaTwo(request.getParameter("lmpGaTwo"));
						}
						
						if (request.getParameter("lmpGaThree") != null && (!request.getParameter("lmpGaThree").equals(""))) {
							antenatalCard.setLmpGaThree(request.getParameter("lmpGaThree"));
						}
						
					
						if (request.getParameter("usgGaUsgReport") != null && (!request.getParameter("usgGaUsgReport").equals(""))) {
							antenatalCard.setUsgGaUsgReport(request.getParameter("usgGaUsgReport"));
						}
						
						if (request.getParameter("usgGaOne") != null && (!request.getParameter("usgGaOne").equals(""))) {
							antenatalCard.setUsgGaOne(request.getParameter("usgGaOne"));
						}
						
						if (request.getParameter("usgGaTwo") != null && (!request.getParameter("usgGaTwo").equals(""))) {
							antenatalCard.setUsgGaTwo(request.getParameter("usgGaTwo"));
						}
						
						if (request.getParameter("usgGaThree") != null && (!request.getParameter("usgGaThree").equals(""))) {
							antenatalCard.setUsgGaThree(request.getParameter("usgGaThree"));
						}
						
						
						
						if (request.getParameter("afiUsgReport") != null && (!request.getParameter("afiUsgReport").equals(""))) {
							antenatalCard.setAfiUsgReport(request.getParameter("afiUsgReport"));
						}
						
						if (request.getParameter("afiOne") != null && (!request.getParameter("afiOne").equals(""))) {
							antenatalCard.setAfiOne(request.getParameter("afiOne"));
						}
						
						if (request.getParameter("afiTwo") != null && (!request.getParameter("afiTwo").equals(""))) {
							antenatalCard.setAfiTwo(request.getParameter("afiTwo"));
						}
						
						if (request.getParameter("afiThree") != null && (!request.getParameter("afiThree").equals(""))) {
							antenatalCard.setAfiThree(request.getParameter("afiThree"));
						}
						
						
						if (request.getParameter("bppUsgReport") != null && (!request.getParameter("bppUsgReport").equals(""))) {
							antenatalCard.setBppUsgReport(request.getParameter("bppUsgReport"));
						}
						
						if (request.getParameter("bppOne") != null && (!request.getParameter("bppOne").equals(""))) {
							antenatalCard.setBppOne(request.getParameter("bppOne"));
						}
					
						if (request.getParameter("bppTwo") != null && (!request.getParameter("bppTwo").equals(""))) {
							antenatalCard.setBppTwoUsg(request.getParameter("bppTwo"));
						}
						
						if (request.getParameter("bppThree") != null && (!request.getParameter("bppThree").equals(""))) {
							antenatalCard.setBppThree(request.getParameter("bppThree"));
						}
						
						
						
						if (request.getParameter("bpdUsgReport") != null && (!request.getParameter("bpdUsgReport").equals(""))) {
							antenatalCard.setBpdUsgReport(request.getParameter("bpdUsgReport"));
						}
						
						if (request.getParameter("bpdOne") != null && (!request.getParameter("bpdOne").equals(""))) {
							antenatalCard.setBpdOne(request.getParameter("bpdOne"));
						}
						
						if (request.getParameter("bpdTwo") != null && (!request.getParameter("bpdTwo").equals(""))) {
							antenatalCard.setBppTwo(request.getParameter("bpdTwo"));
						}
						
						if (request.getParameter("bpdThree") != null && (!request.getParameter("bpdThree").equals(""))) {
							antenatalCard.setBpdThree(request.getParameter("bpdThree"));
						}
						
						
						if (request.getParameter("flUsgReport") != null && (!request.getParameter("flUsgReport").equals(""))) {
							antenatalCard.setFlUsgReport(request.getParameter("flUsgReport"));
						}
						
						if (request.getParameter("flOne") != null && (!request.getParameter("flOne").equals(""))) {
							antenatalCard.setFlOne(request.getParameter("flOne"));
						}
						
						if (request.getParameter("flTwo") != null && (!request.getParameter("flTwo").equals(""))) {
							antenatalCard.setFlTwo(request.getParameter("flTwo"));
						}
						
						if (request.getParameter("flThree") != null && (!request.getParameter("flThree").equals(""))) {
							antenatalCard.setFlThree(request.getParameter("flThree"));
						}
						
					
						if (request.getParameter("acUsgReport") != null && (!request.getParameter("acUsgReport").equals(""))) {
							antenatalCard.setAcUsgReport(request.getParameter("acUsgReport"));
						}
						
						if (request.getParameter("acOne") != null && (!request.getParameter("acOne").equals(""))) {
							antenatalCard.setAcOne(request.getParameter("acOne"));
						}
						
						if (request.getParameter("acTwo") != null && (!request.getParameter("acTwo").equals(""))) {
							antenatalCard.setAcTwo(request.getParameter("acTwo"));
						}
						
						if (request.getParameter("acThree") != null && (!request.getParameter("acThree").equals(""))) {
							antenatalCard.setAcThree(request.getParameter("acThree"));
						}
						
						
						if (request.getParameter("hcUsgReport") != null && (!request.getParameter("hcUsgReport").equals(""))) {
							antenatalCard.setHcUsgReport(request.getParameter("hcUsgReport"));
						}
						
						if (request.getParameter("hcOne") != null && (!request.getParameter("hcOne").equals(""))) {
							antenatalCard.setHcOne(request.getParameter("hcOne"));
						}
						
						if (request.getParameter("hcTwo") != null && (!request.getParameter("hcTwo").equals(""))) {
							antenatalCard.setHcTwo(request.getParameter("hcTwo"));
						}
						
						if (request.getParameter("hcThree") != null && (!request.getParameter("hcThree").equals(""))) {
							antenatalCard.setHcThree(request.getParameter("hcThree"));
						}
						
						
						if (request.getParameter("ebwUsgReport") != null && (!request.getParameter("ebwUsgReport").equals(""))) {
							antenatalCard.setEbwUsgReport(request.getParameter("ebwUsgReport"));
						}
						
						if (request.getParameter("ebwOne") != null && (!request.getParameter("ebwOne").equals(""))) {
							antenatalCard.setEbwOne(request.getParameter("ebwOne"));
						}
						
						if (request.getParameter("ebwTwo") != null && (!request.getParameter("ebwTwo").equals(""))) {
							antenatalCard.setEbwTwo(request.getParameter("ebwTwo"));
						}
						
						if (request.getParameter("ebwThree") != null && (!request.getParameter("ebwThree").equals(""))) {
							antenatalCard.setEbwThree(request.getParameter("ebwThree"));
						}
						
					
						if (request.getParameter("dopplerUsgReport") != null && (!request.getParameter("dopplerUsgReport").equals(""))) {
							antenatalCard.setDopplerUsgReport(request.getParameter("dopplerUsgReport"));
						}
						
						if (request.getParameter("dopplerOne") != null && (!request.getParameter("dopplerOne").equals(""))) {
							antenatalCard.setDopplerOne(request.getParameter("dopplerOne"));
						}
						
						if (request.getParameter("dopplerTwo") != null && (!request.getParameter("dopplerTwo").equals(""))) {
							antenatalCard.setDopplerTwo(request.getParameter("dopplerTwo"));
						}
						
						if (request.getParameter("dopplerThree") != null && (!request.getParameter("dopplerThree").equals(""))) {
							antenatalCard.setDopplerThree(request.getParameter("dopplerThree"));
						}
						
						if (request.getParameter("usgRemarks") != null && (!request.getParameter("usgRemarks").equals(""))) {
							antenatalCard.setUsgRemarks(request.getParameter("usgRemarks"));
						}*/
						
						if (request.getParameter("usgFirstTrimRemarks") != null && (!request.getParameter("usgFirstTrimRemarks").equals(""))) {
							antenatalCard.setUsgRemarks(request.getParameter("usgFirstTrimRemarks"));
						}
						if (request.getParameter("usgSecondTrimRemarks") != null && (!request.getParameter("usgSecondTrimRemarks").equals(""))) {
							antenatalCard.setUsgSecondRemarks(request.getParameter("usgSecondTrimRemarks"));
						}
						if (request.getParameter("usgThirdTrimRemarks") != null && (!request.getParameter("usgThirdTrimRemarks").equals(""))) {
							antenatalCard.setUsgThirdRemarks(request.getParameter("usgThirdTrimRemarks"));
						}
						antenatalCard.setSurgicalHistory(surgicalHistory);
						antenatalCard.setFamilyHistory(familyHistory);
						antenatalCard.setPersonalHistory(personalHistory);
						antenatalCard.setOtherImmunizationDetail(otherImmunizationDetail);
						
						
						antenatalCard.setWeight(weight);
						antenatalCard.setHeight(height);
						antenatalCard.setBmi(bmi);
						antenatalCard.setBmiStatus(bmiStatus);
						antenatalCard.setBreast(breast);
						antenatalCard.setNipple(nipple);
						antenatalCard.setThyriod(thyriod);
						
						antenatalCard.setPallor(pallorGenExam);
						antenatalCard.setIcterus(icterusGenExam);
						antenatalCard.setCyanosis(cyanosisGenExam);
						antenatalCard.setClubbing(clubbing);
						antenatalCard.setLymphadenopathy(lymphadenopathyGenExam);
						antenatalCard.setLymphadenopathyValue(lymphadenopathyGenExamValue);
						antenatalCard.setEdema(edemaGenExam);
						antenatalCard.setRefferedHospital(refferedHospital);
						antenatalCard.setRefferedGA(refferedGA);
						antenatalCard.setSpine(spine);
						antenatalCard.setGait(gait);
						antenatalCard.setWaist(waist);
						antenatalCard.setHip(hip);
						
						antenatalCard.setCvsGenExam(cvsGenExam);
						antenatalCard.setOthersGeneralExamination(otherGeneralEamination);
						
						antenatalCard.setTetanusOnestDoseDate(tetanusOnestDoseDate);
						antenatalCard.setTetanusTwondDoseDate(tetanusTwondDoseDate);
						antenatalCard.setOthersTtDetails(otherTTDetails);
						
						antenatalCard.setGestationalAgeWeeks(gestationalAgeWeeks);
						antenatalCard.setGestationalAgeDays(gestationalAgeDays);
						antenatalCard.setDurationOfMarriageYear(durationOfMarriageYear);
						antenatalCard.setDurationOfMarriageMonth(durationOfMarriageMonth);
						antenatalCard.setMarritalHistoryRemarks(marritalHistoryRemarks);
						
						antenatalCard.setReferredFromPrivate(referredFromPrivate);
						antenatalCard.setReferredFromPrivateDetail(referredFromPrivateValue);
						

						String referredDept = "";
						String[] referredToDeptArray = null;
						if (request.getParameterValues(DEPARTMENT_ID) != null) {
							referredToDeptArray = (String[]) request
									.getParameterValues(DEPARTMENT_ID);
							for (int i = 0; i < referredToDeptArray.length; i++) {
								if (i == 0) {
									referredDept = referredToDeptArray[i];
								} else {
									referredDept = referredDept + ","
											+ referredToDeptArray[i];
								}
							}
						}
						infoMap.put("referredDept", referredDept);
						
					/*   }*/
						
					
						infoMap.put("antenatalCard", antenatalCard);
						infoMap.put("antCardPregList", antCardPregList);
						infoMap.put("antCardMedHistList", antCardMedHistList);
						infoMap.put("usgReportFirstTrimList", usgReportFirstTrimList);
						infoMap.put("usgReportFirstTrimListWeek14", usgReportFirstTrimListWeek14);
						infoMap.put("usgReportSecondTrimList", usgReportSecondTrimList);
						infoMap.put("usgReportThirdTrimList", usgReportThirdTrimList);
						infoMap.put("visitId", visitId);
						infoMap.put("hospitalId", hospitalId);
						infoMap.put("departmentId", departmentId);
						
						infoMap.put("referredDepartment", masDepartment);
						
						infoMap.put("hinId", hinId);
						infoMap.put("userId", userId);
						infoMap.put("empId", empId);
						infoMap.put("time", time);
						infoMap.put("date", date);
						infoMap.put("exist", exist);
						infoMap.put("AntCount", AntCount);
						infoMap.put("antCardId", antCardId);
						infoMap.put("count", count);
						
						antCardTrimeList=getOpdAntenatalCardTrimester2(request);
						
						
						
						infoMap.put("antCardTrimeList", antCardTrimeList);
						
					}

					catch (Exception e) {
						e.printStackTrace();
					}
					
					/*boolean successfullyAdded = false;
					successfullyAdded = opdHandlerService.addAntenatalCard2(infoMap);

					if (successfullyAdded) {
						message = "Antenatal Card has been done Successfully..";
					} else {
						message = "Antenatal Card has not been done Successfully..";
					}

					try {
						map = opdHandlerService.getAntenatalCard2(visitId);

					} catch (Exception e) {
						e.printStackTrace();
					}
					jsp = "messageOBG";
					title = "Add Antenatal Card";
					map.put("visitId", visitId);
					map.put("message", message);
					map.put("contentJsp", jsp);*/

					return infoMap;
				}


				public ModelAndView showAntenatalCardJsp2(HttpServletRequest request,HttpServletResponse response) {
						Box box = HMSUtil.getBox(request);
						HttpSession session = request.getSession();
						int visitId = Integer.parseInt(request.getParameter("visitId"));
						int hinId=0;
						String templateFlag="Antenatal Card";
						box.put("templateFlag", templateFlag);
						if(request.getParameter("hinId") != null){
							hinId = Integer.parseInt(request.getParameter("hinId"));
						}
						if (session.getAttribute("deptId") != null)
							box.put("departmentId",(Integer) session.getAttribute("deptId"));
						map = opdHandlerService.getAntenatalCard2(visitId,hinId,box);
		       
						jsp = ANTENATAL_CARD_JSP2;
						title = "Antenatal Card List";
						map.put("visitId", visitId);
						map.put("contentJsp", jsp);
						map.put("title", title);
						return new ModelAndView(jsp, "map", map);

				}

				public ModelAndView viewAntenatalCard2(HttpServletRequest request,
						HttpServletResponse response) {
					Map<String, Object> map = new HashMap<String, Object>();
					Map<String, Object> parameterMap = new HashMap<String, Object>();

					int visitNo = 0;
					int hinId = 0;
					String flag = "";
					int currentVisitId = 0;
					String viewScreen = "";
					String backButtonUrl = "";
					if (request.getParameter(VISIT_NUMBER) != null) {
						visitNo = Integer.parseInt(request.getParameter(VISIT_NUMBER));
						parameterMap.put("visitNo", visitNo);
					}
					if (request.getParameter(HIN_ID) != null) {
						hinId = Integer.parseInt(request.getParameter(HIN_ID));
						parameterMap.put("hinId", hinId);
					}
					if (request.getParameter("flag") != null) {
						flag = request.getParameter("flag");
						parameterMap.put("flag", flag);
					}

					if (request.getParameter("currentVisitId") != null) {
						currentVisitId = Integer.parseInt(request
								.getParameter("currentVisitId"));
					}
					if (request.getParameter("viewScreen") != null) {
						viewScreen = request.getParameter("viewScreen");
					}
					if (viewScreen.equals("no")) {
						backButtonUrl = "opd?method=showAntenatalCardJsp&visitId="
								+ currentVisitId;
					} else if (viewScreen.equals("yes")) {
						int deptId = 0;
						int visitNoForJsp = 0;
						if (request.getParameter("deptId") != null) {
							deptId = Integer.parseInt(request.getParameter("deptId"));
						}
						if (request.getParameter("visitNoForJsp") != null) {
							visitNoForJsp = Integer.parseInt(request
									.getParameter("visitNoForJsp"));
						}
						backButtonUrl = "opd?method=showPatientPreviousVisit&hinId="
								+ hinId + "&deptId=" + deptId + "&visitNo=" + visitNoForJsp;
					}
					map = opdHandlerService.viewAntenatalCard(parameterMap);
					map.put("currentVisitId", currentVisitId);
					map.put("backButtonUrl", backButtonUrl);
					String jsp = "";
					jsp = "viewAntenatalCard";
					jsp += ".jsp";
					map.put("contentJsp", jsp);

					return new ModelAndView("index", "map", map);

				}

				public ModelAndView updateAntenatalCard2(HttpServletRequest request,
						HttpServletResponse response) {

					Map<String, Object> map = new HashMap<String, Object>();

					boolean saved = false;
					Box box = HMSUtil.getBox(request);


					int visitId = Integer.parseInt(request.getParameter("visitId"));
					map = opdHandlerService.updateAntenatalCard(box);
					saved = (Boolean) map.get("saved");
					String message = "";
					if (saved) {
						message = "Antenatal Card updated Successfully.";
					} else {
						message = "Some Problem Occured.";
					}
					map.put("visitId", visitId);
					jsp = "messageAntenatalCard";
					map.put("message", message);
					map.put("title", title);
					return new ModelAndView(jsp, "map", map);

				}

				public List<OpdAntenatalCardTrimester> getOpdAntenatalCardTrimester2(HttpServletRequest request){
					List<OpdAntenatalCardTrimester> antCardTrimeList=new ArrayList<OpdAntenatalCardTrimester>();
					int hdb=0,hdb1=0,hdb2=0;
					
					if (request.getParameter("hdb") != null
							&& (!request.getParameter("hdb").equals(""))) {
						hdb = Integer.parseInt(request.getParameter("hdb"));//first trimester total data count
						antCardTrimeList=getTrimester2(request, antCardTrimeList, hdb, 1, "ft");
					}
					if (request.getParameter("hdb1") != null
							&& (!request.getParameter("hdb1").equals(""))) {
						hdb1 = Integer.parseInt(request.getParameter("hdb1"));//second trimester total data count
						antCardTrimeList=getTrimester2(request, antCardTrimeList, hdb1, 2, "st");
					}
					if (request.getParameter("hdb2") != null
							&& (!request.getParameter("hdb2").equals(""))) {
						hdb2 = Integer.parseInt(request.getParameter("hdb2"));//third trimester total data count
						antCardTrimeList=getTrimester2(request, antCardTrimeList, hdb2, 3, "tt");
					}
						
					return antCardTrimeList;
				}
				
				public List<OpdAntenatalCardTrimester> getTrimester2(HttpServletRequest request,List<OpdAntenatalCardTrimester> antCardTrimeList,
						int hdb,int type,String trimType){
					BigDecimal weight=new BigDecimal(0);
					int fhs=0,flag=1;
					String fh = "";
					String ftdate="",gaWeeks=null,gaDays=null,bpSystolics=null,bpDiastolics=null,pvTrimes=null,paTrimes=null,urinAlbumin=null;
					String pallor=null,odemia=null,systemicExamin=null,obstetricRiskMeasure=null;
					Date trimesDate=null;
					OpdAntenatalCardTrimester antCardTrime=null;
					String cvs="",respSystem="",antFtdate="",antFtAdvise="";
					String  othersFirstTrimster = "";
					String generalExamination = "";
					String localExamination = "";
					String othersTrim = "";
					
					for(int u=0;u<=hdb;u++){
									
						if (request.getParameter(trimType+"date"+u) != null
								&& (!request.getParameter(trimType+"date"+u).equals(""))) {
							ftdate = request.getParameter(trimType+"date"+u);
							trimesDate=HMSUtil.convertStringTypeDateToDateType(ftdate);
						}
						if (request.getParameter(trimType+"GA1"+u) != null
								&& (!request.getParameter(trimType+"GA1"+u).equals(""))) {
							gaWeeks = request.getParameter(trimType+"GA1"+u);
						}
						if (request.getParameter(trimType+"GA2"+u) != null
								&& (!request.getParameter(trimType+"GA2"+u).equals(""))) {
							gaDays = request.getParameter(trimType+"GA2"+u);
						}				
						if (request.getParameter(trimType+"systolic"+u) != null
								&& (!request.getParameter(trimType+"systolic"+u).equals(""))) {
							bpSystolics = request.getParameter(trimType+"systolic"+u);
						}
						if (request.getParameter(trimType+"diastolic"+u) != null
								&& (!request.getParameter(trimType+"diastolic"+u).equals(""))) {
							bpDiastolics = request.getParameter(trimType+"diastolic"+u);
						}
						if (request.getParameter(trimType+"PA"+u) != null
								&& (!request.getParameter(trimType+"PA"+u).equals(""))) {
							paTrimes = request.getParameter(trimType+"PA"+u);
						}
						
						if (request.getParameter(trimType+"PA"+u) != null
								&& (!request.getParameter(trimType+"PA"+u).equals(""))) {
							paTrimes = request.getParameter(trimType+"PA"+u);
						}
						
						
						if (request.getParameter(trimType+"Weight"+u) != null
								&& (!request.getParameter(trimType+"Weight"+u).equals(""))) {
							weight = new BigDecimal(request.getParameter(trimType+"Weight"+u));
						}
						if (request.getParameter(trimType+"Pallor"+u) != null
								&& (!request.getParameter(trimType+"Pallor"+u).equals(""))) {
							pallor = request.getParameter(trimType+"Pallor"+u);
						}
						if (request.getParameter(trimType+"Odemia"+u) != null
								&& (!request.getParameter(trimType+"Odemia"+u).equals(""))) {
							odemia = request.getParameter(trimType+"Odemia"+u);
						}
						if (request.getParameter(trimType+"SystemicExam"+u) != null
								&& (!request.getParameter(trimType+"SystemicExam"+u).equals(""))) {
							systemicExamin = request.getParameter(trimType+"SystemicExam"+u);
						}
						if (request.getParameter(trimType+"ObsRi"+u) != null
								&& (!request.getParameter(trimType+"ObsRi"+u).equals(""))) {
							obstetricRiskMeasure = request.getParameter(trimType+"ObsRi"+u);
						}
						if (request.getParameter(trimType+"Fhs"+u) != null
								&& (!request.getParameter(trimType+"Fhs"+u).equals(""))) {
							fhs = Integer.parseInt(request.getParameter(trimType+"Fhs"+u));
						}
						if (request.getParameter(trimType+"Fh"+u) != null
								&& (!request.getParameter(trimType+"Fh"+u).equals(""))) {
							fh = request.getParameter(trimType+"Fh"+u);
						}
						if (request.getParameter(trimType+"GeneralExaminationTrim"+u) != null
								&& (!request.getParameter(trimType+"GeneralExaminationTrim"+u).equals(""))) {
							generalExamination = request.getParameter(trimType+"GeneralExaminationTrim"+u);
						}
						
						if (request.getParameter(trimType+"LocalExaminationTrim"+u) != null
								&& (!request.getParameter(trimType+"LocalExaminationTrim"+u).equals(""))) {
							localExamination = request.getParameter(trimType+"LocalExaminationTrim"+u);
						}
						
						if (request.getParameter(trimType+"othersTrim"+u) != null
								&& (!request.getParameter(trimType+"othersTrim"+u).equals(""))) {
							othersTrim = request.getParameter(trimType+"othersTrim"+u);
						}
						if(trimesDate!=null || gaWeeks!=null || gaDays!=null || bpSystolics!=null
								|| bpDiastolics!=null || paTrimes!=null || weight.compareTo(new BigDecimal(0))>0){
						antCardTrime=new OpdAntenatalCardTrimester();
							
						antCardTrime.setTrimesDate(trimesDate);
						antCardTrime.setGaWeeks(gaWeeks);
						antCardTrime.setGaDays(gaDays);
						antCardTrime.setBpSystolics(bpSystolics);
						antCardTrime.setBpDiastolics(bpDiastolics);
						antCardTrime.setPaTrimes(paTrimes);
						antCardTrime.setWeight(weight);
						antCardTrime.setPallor(pallor);
						antCardTrime.setOdemia(odemia);
						antCardTrime.setSystemicExamin(systemicExamin);
						antCardTrime.setObstetricRiskMeasure(obstetricRiskMeasure);
						antCardTrime.setFhs(fhs);
						antCardTrime.setFh(fh);
						antCardTrime.setTrimesterType(type);
						antCardTrime.setGeneralExamination(generalExamination);
						antCardTrime.setLocalExamination(localExamination);
						antCardTrime.setOthers(othersTrim);

						if(trimType.equals("ft")){
							if (request.getParameter(trimType+"PV"+u) != null
									&& (!request.getParameter(trimType+"PV"+u).equals(""))) {
								pvTrimes = request.getParameter(trimType+"PV"+u);
								antCardTrime.setPvTrimes(pvTrimes);
							}
							
						}else{
							if (request.getParameter(trimType+"UrinAl"+u) != null
									&& (!request.getParameter(trimType+"UrinAl"+u).equals(""))) {
								urinAlbumin = request.getParameter(trimType+"UrinAl"+u);
								antCardTrime.setUrinAlbumin(urinAlbumin);
							}
							
						}
						
						if(type==1 && flag==1){
							flag=0;
							
						if (request.getParameter("ftCVS") != null
								&& (!request.getParameter("ftCVS").equals(""))) {
							cvs = request.getParameter("ftCVS");
							antCardTrime.setCvs(cvs);
						}
						
						if (request.getParameter("ftRespSys") != null
								&& (!request.getParameter("ftRespSys").equals(""))) {
							respSystem = request.getParameter("ftRespSys");
							antCardTrime.setRespSystem(respSystem);
						}
						
						if (request.getParameter("ftOthersFirstTrimster") != null
								&& (!request.getParameter("ftOthersFirstTrimster").equals(""))) {
							othersFirstTrimster = request.getParameter("ftOthersFirstTrimster");
							antCardTrime.setOthersFirstTrimster(othersFirstTrimster);
						}
						
						if (request.getParameter("ftSubDate") != null
								&& (!request.getParameter("ftSubDate").equals(""))) {
							antFtdate = request.getParameter("ftSubDate");
							antCardTrime.setAntFtdae(HMSUtil.convertStringTypeDateToDateType(antFtdate));
							
						}
						
						if (request.getParameter("ftAdvise") != null
								&& (!request.getParameter("ftAdvise").equals(""))) {
							antFtAdvise = request.getParameter("ftAdvise");
							antCardTrime.setFtAdvice(antFtAdvise);
						}
						}
						
						antCardTrimeList.add(antCardTrime);
						}
						
						ftdate="";gaWeeks=null;gaDays=null;bpSystolics=null;bpDiastolics=null;pvTrimes=null;paTrimes=null;urinAlbumin=null;
						trimesDate=null;weight=new BigDecimal(0);
					}
					
					return antCardTrimeList;
				}
				// ----------------------------------------Antenatal Card Report

				@SuppressWarnings({ "unchecked", "unchecked" })
				public ModelAndView showAntenatalCardReport(
						HttpServletRequest request, HttpServletResponse response) {
					Map<String, Object> detailsMap = new HashMap<String, Object>();
					Map<String, Object> parameters = new HashMap<String, Object>();
					HttpSession session = null;
					session = request.getSession();
					int hinId = 0, hospitalId = 0; int visitId = 0;
					if (request.getParameter(HIN_ID) != null
								&& !(request.getParameter(HIN_ID).equals(""))) {
							hinId = Integer.parseInt(request.getParameter(HIN_ID));
					}
					if (request.getParameter("visitId") != null
							&& !(request.getParameter("visitId").equals(""))) {
						visitId = Integer.parseInt(request.getParameter("visitId"));
				}
					if (session.getAttribute(HOSPITAL_ID) != null) {
						hospitalId=(Integer)session.getAttribute(HOSPITAL_ID);
					}
					
					detailsMap = opdHandlerService.getConnectionForReport();
					
					parameters.put("hinId", hinId);
					parameters.put("opdvid", visitId);
					parameters.put("hospitalId", hospitalId);
					parameters.put("SUBREPORT_DIR", getServletContext().getRealPath("/Reports/"));
					try {
						String reportName="";
						reportName="AntenatalCard";
						HMSUtil.generateReport(reportName, parameters,
								(Connection) detailsMap.get("conn"), response,
								getServletContext());
					} catch (IllegalStateException e) {
						e.printStackTrace();
					}
					return null;
				}
				public ModelAndView showPatientLabResult(
						HttpServletRequest request, HttpServletResponse response) {

					Box box = HMSUtil.getBox(request);
					int visitId = Integer.parseInt(request.getParameter("visitId"));
					int hinId = Integer.parseInt(request.getParameter("hinId"));

					box.put("visitId", visitId);
					box.put("hinId", hinId);

					map = opdHandlerService.showPatientLabResult(box);
					
					jsp = "patientLabResultPopup";

					title = "Patient Previous Visit";
					map.put("contentJsp", jsp);
					map.put("title", title);
					map.put("hinId", hinId);
					return new ModelAndView(jsp, "map", map);

				}
				public ModelAndView displayLabTest(
						HttpServletRequest request, HttpServletResponse response) {

					Box box = HMSUtil.getBox(request);
					int visitId = Integer.parseInt(request.getParameter("visitId"));
					int hinId = Integer.parseInt(request.getParameter("hinId"));
					box.put("visitId", visitId);
					box.put("hinId", hinId);
					map = opdHandlerService.displayLabTest(box);
					
					jsp = "patientLabResultPopup";

					title = "Patient Previous Visit";
					map.put("contentJsp", jsp);
					map.put("title", title);
					map.put("hinId", hinId);
					return new ModelAndView(jsp, "map", map);

				}
				
				
// added by Amit Das on 19-01-2017
 public void checkForExistingDisplayName(
		HttpServletRequest request, HttpServletResponse response) {

	Box box = HMSUtil.getBox(request);
	boolean result = false;
	
	map = opdHandlerService.checkForExistingDisplayName(box);
	
	if(map.get("tokenDisplayList")!=null){
		result = true;
	}
	
	try {
		response.getWriter().write(result+"");
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

}
				
//added by Amit Das on 19-01-2017
		public ModelAndView getServiceCenters(HttpServletRequest request,
					HttpServletResponse response) {
				Map<String, Object> map = new HashMap<String, Object>();
				Box box = HMSUtil.getBox(request);
				HttpSession session = request.getSession();
				box.put("hospitalId", (Integer)session.getAttribute("hospitalId"));

				map = opdHandlerService.getServiceCenters(box);
				
				jsp = "responseForServiceCenters";
				map.put("contentJsp", jsp);
					
				return new ModelAndView(jsp, "map", map);
		}
			
		public void getQueueListParticularDoctor(HttpServletRequest request,
				HttpServletResponse response) throws IOException {
			Box box = HMSUtil.getBox(request);
			Map<String, Object> map = new HashMap<String, Object>();
			int hospitalId=0;
			String displayName = null;
			
			String displayDepartmentTypeName = null;
			int deptId=0,doctId=0;
			String tokenNo="",oldTokenNo="",tokenStatus="N",NewtokenNo="";
			String cTokenStatus="";
			String count=null;
			if(request.getParameter("count")!=null){
				count =	request.getParameter("count");
				map.put("count", count);
			}
			if (request.getParameter(HOSPITAL_ID) != null) {
				hospitalId = Integer.parseInt(request.getParameter(HOSPITAL_ID));
				box.put("hospitalId", hospitalId);	
			}
			if(request.getParameter("doctId")!=null){
				doctId =Integer.parseInt(request.getParameter("doctId"));
				map.put("doctId", doctId);
			}
			if(request.getParameter("deptId")!=null){
				deptId =Integer.parseInt(request.getParameter("deptId"));
				map.put("deptId", deptId);
			}
			
			if(request.getParameter("OldtokenNo")!=null){
				oldTokenNo =request.getParameter("OldtokenNo");
			}
			if(request.getParameter("NewtokenNo")!=null){
				NewtokenNo =request.getParameter("NewtokenNo");
			}
			if(request.getParameter("tokenStatus")!=null){
				tokenStatus =request.getParameter("tokenStatus");
			}
			List<Object[]> queueList = new ArrayList<Object[]>();
			List<Integer> oldTokenList = new ArrayList<Integer>();
			map = opdHandlerService.getQueueListParticularDoctor(box);
			
			if(map.get("queueList")!=null){
				queueList=(List<Object[]>)map.get("queueList"); 
				if(queueList.size()>0){
					Object[] objects  = queueList.get(0);
					tokenNo = ((Integer)objects[0]).toString();
					cTokenStatus = (String)objects[1];					
					
				}
			}
			
			if(map.get("oldTokenList")!=null){
				oldTokenList=(List<Integer>)map.get("oldTokenList"); 
				if(oldTokenList.size()>0){
					oldTokenNo = Integer.toString(oldTokenList.get(0));
				}
			}
			
			
			StringBuffer sb = new StringBuffer();
			sb.append("<item>");
			
					sb.append("<tokenNumber>" + tokenNo
							+ "</tokenNumber>");
					sb.append("<oldTokenNumber>" + oldTokenNo
							+ "</oldTokenNumber>");
					sb.append("<tokenStatus>" + tokenStatus
							+ "</tokenStatus>");
				
			sb.append("</item>");
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
			try {
				response.getWriter().write(
						"<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<items>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</items>");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		public ModelAndView getOPTokenList(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			int userId=0; 
			int hospitalId=0;
			String flag = null;
			String displayName = null;
			
			String displayDepartmentTypeName = null;
			int deptId=0;
			if(request.getParameter("displayName")!=null){
				displayName = request.getParameter("displayName");
				mapForDS.put("displayName",displayName);
				
			}
			int empId =0;
		    if(session.getAttribute("userId")!=null){
		      empId =(Integer) session.getAttribute("userId");
		      map.put("docId", empId);
		    }
			if(session.getAttribute("deptId")!=null){
				deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
				}
			if(session.getAttribute("hospitalId")!=null){
				hospitalId = (Integer)session.getAttribute("hospitalId");
				mapForDS.put("hospitalId", hospitalId);	
			}else if (map.get("hospitalId") != null) {
				hospitalId = (Integer)map.get("hospitalId");
				mapForDS.put("hospitalId", hospitalId);	
			}
			
			if (session.getAttribute("userId") != null) {
				userId = (Integer)session.getAttribute("userId");
				mapForDS.put("userId", userId);	
			}
			
			if(request.getParameter("flag")!=null){
				flag =	request.getParameter("flag");
				mapForDS.put("flag", flag);
			}
			
			Users users = (Users)session.getAttribute("users");
		    if(users!=null){
		    	empId=users.getEmployee().getId();
		    	mapForDS.put("docId", empId);
		    }
		   
		    Map<Integer,String> newTokenNoMap=new HashMap<Integer,String>();
		    Map<Integer,String> oldTokenNoMap=new HashMap<Integer,String>();
		    Map<Integer,String> tokenStatusMap=new HashMap<Integer,String>();
		    int totCount=0;
		    if(request.getParameter("totCount")!=null && !request.getParameter("totCount").equals("")){
	    		totCount=Integer.parseInt(request.getParameter("totCount"));
	    	}
		    for(int i=0;i<totCount;i++)
		    {
		    	if(request.getParameter("NewtokenNo"+i)!=null && !request.getParameter("NewtokenNo"+i).equals("")){
		    		newTokenNoMap.put(i, request.getParameter("NewtokenNo"+i));
		    	}
		    	if(request.getParameter("OldtokenNo"+i)!=null && !request.getParameter("OldtokenNo"+i).equals("")){
		    		oldTokenNoMap.put(i, request.getParameter("OldtokenNo"+i));
		    	}
		    	if(request.getParameter("tokenStatus"+i)!=null && !request.getParameter("tokenStatus"+i).equals("")){
		    		tokenStatusMap.put(i, request.getParameter("tokenStatus"+i));
		    	}
		    }
				
			map = opdHandlerService.getWaitingQueue(mapForDS);
			jsp = "token_Display";

			title = "Token Number";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("newTokenNoMap", newTokenNoMap);
			map.put("oldTokenNoMap", oldTokenNoMap);
			map.put("tokenStatusMap", tokenStatusMap);
			return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView getOPWaitingListRefresh(HttpServletRequest request,
				HttpServletResponse response) {
			int deptId = 0;
			HttpSession session = request.getSession();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			Map<String, Object> map = new HashMap<String, Object>();
			
			int tokeNo=0;
			String patientName;
			String uhid;
			int opd_DepartmentId=0;
			int hospitalId=0;
			int searchFlag=0;
			String flag="";
			mapForDS.put("forOPClinnic", true);
			if(request.getParameter("flag")!=null){
				flag=request.getParameter("flag");
				mapForDS.put("flag",flag);
			}
			if(request.getParameter("searchFlag")!=null){
				searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
				mapForDS.put("searchFlag",searchFlag);
			}
			
			if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
				tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
				mapForDS.put("tokenNo",tokeNo);
			}
			if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
				patientName = request.getParameter("patientName");
				mapForDS.put("patientName", patientName);
			}
			if(request.getParameter("uhid")!=null){
				uhid = request.getParameter("uhid");
				mapForDS.put("uhid", uhid);
			}
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			
			Integer userId=null;
			if(session.getAttribute(USER_ID)!=null){
				userId = (Integer) session.getAttribute(USER_ID);
				mapForDS.put("userId", userId);
			}
			
			
			
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				session.setAttribute("deptId", deptId);
				mapForDS.put("deptId", deptId);
			} else {
				if(session.getAttribute("deptId")!=null){
				deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
				}
			}
			
			String title = request.getParameter("title");
			mapForDS.put("hospitalId", hospitalId);
			
			mapForDS.put("opClinicalWaitinList", true);

			
			map = opdHandlerService.getWaitingPatientList(mapForDS);
			String deptName =(String)map.get("deptName");
			
			ServletContext context=getServletContext();
			Map contextMaps=null;
			contextMaps =(Map) context.getAttribute("contextMap");
			if(contextMaps!=null && contextMaps.size()>0 && contextMaps.get("patientStatus")!=null && (Boolean)contextMaps.get("patientStatus")==true){
			    if(mapForDS.get("hospitalId").equals(contextMaps.get("hospitalId")) 
			    		&& mapForDS.get("deptId").equals(contextMaps.get("deptId"))){
			    
			    	contextMaps.put("patientStatus", contextMaps.get("patientStatus"));
			    	contextMaps.put("VisitId", contextMaps.get("VisitId"));
			    	contextMaps.put("uhidNum", contextMaps.get("uhidNum"));
			    	context.setAttribute("contextMaps", contextMaps);
			    	map.put("contextMaps",contextMaps);
			    	Map mm=(Map) map.get("contextMaps");
			    }
		    }
			
			session.setAttribute("deptName", deptName);
			if(request.getParameter("newOP")!=null){
				jsp = "op_clinical_waiting_list_new_div";
			}else if(request.getParameter("newOPD")!=null){
				jsp = "op_clinical_waiting_list_new_detail_div";
			}else
				jsp = "op_clinical_waiting_list_div";
			title = "Waiting Patient List";
			map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("flag", flag);
			map.put("searchFlag",searchFlag);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView getPreConsultingListRefresh(HttpServletRequest request,
				HttpServletResponse response) {
			int deptId = 0;
			HttpSession session = request.getSession();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			Map<String, Object> map = new HashMap<String, Object>();
			int tokeNo=0;
			String patientName;
			String uhid;
			int hospitalId=0;
			int searchFlag=0;
			
			String [] departmentIdlist = {"0"};
			List<Integer> serviceCentreList = new ArrayList();
			Map<Integer, Integer> searchSelectedDeptIdlist = new HashMap<Integer, Integer>();
			
			if(request.getParameter("searchFlag")!=null){
				searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
				mapForDS.put("searchFlag",searchFlag);
			}
			if(request.getParameter("opd_Departments")!=null && !request.getParameter("opd_Departments").equals("")) {
				
				departmentIdlist = request.getParameter("opd_Departments").split(",");

				for(int i = 0 ; i< departmentIdlist.length ; i++) {
					serviceCentreList.add(new Integer(departmentIdlist[i])); 
					searchSelectedDeptIdlist.put(Integer.parseInt(departmentIdlist[i]),Integer.parseInt( departmentIdlist[i]));
				}
				session.setAttribute("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
				mapForDS.put("serviceCentreList", serviceCentreList);
			}
			if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("")){
				tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
				mapForDS.put("tokenNo",tokeNo);
			}
			if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("") ){
				patientName = request.getParameter("patientName");
				mapForDS.put("patientName", patientName);
			}
			if(request.getParameter("uhid")!=null){
				uhid = request.getParameter("uhid");
				mapForDS.put("uhid", uhid);
			}
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
			}
			int empId=0;
			if(session.getAttribute("userId")!=null){
			      empId =(Integer) session.getAttribute("userId");
			      mapForDS.put("userId", empId);
			 }
			
			String title = request.getParameter("title");
			mapForDS.put("hospitalId", hospitalId);
			
			mapForDS.put("opNursingWaitinList", true);
			
			map = opdHandlerService.getWaitingPatientList(mapForDS);
			String deptName =(String)map.get("deptName");
			
			session.setAttribute("deptName", deptName);
			jsp = "nurse_waiting_List_div";
			title = "Nurse Patient List";
			//map.put("searchDeptId", opd_DepartmentId);
			map.put("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
			map.put("deptId", deptId);
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView getOPNursingCareWaitingListRefresh(HttpServletRequest request,HttpServletResponse response){
			Map<String, Object> map = new HashMap<String, Object>();
			try{
				HttpSession session = request.getSession();
				String [] departmentIdlist = {"0"};
				List<Integer> serviceCentreList = new ArrayList();
				Map<Integer, Integer> searchSelectedDeptIdlist = new HashMap<Integer, Integer>();

				//Changed by Arbind on 17-05-2017 for multiple department
				/*int opd_DepartmentId=0;
				if(request.getParameter("opd_Department")!=null && !request.getParameter("opd_Department").equals("")){
					opd_DepartmentId = Integer.parseInt(request.getParameter("opd_Department"));
					map.put("opd_Department",opd_DepartmentId);
				}*/
				if(request.getParameter("opd_Departments")!=null && !request.getParameter("opd_Departments").equals("")) {
					departmentIdlist = request.getParameter("opd_Departments").split(",");

					for(int i = 0 ; i< departmentIdlist.length ; i++) {
						serviceCentreList.add(new Integer(departmentIdlist[i])); 
						searchSelectedDeptIdlist.put(Integer.parseInt(departmentIdlist[i]),Integer.parseInt( departmentIdlist[i]));
					}
					session.setAttribute("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
					map.put("serviceCentreList", serviceCentreList);
				}
				Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
				if(session.getAttribute("deptId")!=null){
					int deptId = (Integer) session.getAttribute("deptId");
					map.put("deptId", deptId);
				}
				Date FromDateId=new Date();
				if (request.getParameter("FromDateId") != null	|| request.getParameter("FromDateId") != "") {
					 FromDateId = HMSUtil.convertStringTypeDateToDateType(request.getParameter("FromDateId"));
					map.put("FromDateId",FromDateId);
				}
				Date ToDateId=new Date();
				if (request.getParameter("ToDateId") != null	|| request.getParameter("ToDateId") != "") {
					ToDateId = HMSUtil.convertStringTypeDateToDateType(request.getParameter("ToDateId"));
					map.put("ToDateId",ToDateId);
				}

				map=opdHandlerService.getOPNursingCareWaitingList(map);
				
				map.put("FromDateId", FromDateId);
				map.put("ToDateId", ToDateId);
				map.put("searchSelectedDeptIdlist", searchSelectedDeptIdlist);
				}
			catch(Exception e){
					e.printStackTrace();
				}
			    jsp = "op_nursingcare_waiting_list_div";
			    map.put("contentJsp", jsp);
			    return new ModelAndView(jsp, "map", map);
		}
		
		
		
		public void getTokenDisplayXML(HttpServletRequest request,
				HttpServletResponse response) throws IOException {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			int userId=0; 
			int hospitalId=0;
			String flag = null;
			String displayName = null;
			
			String displayDepartmentTypeName = null;
			int deptId=0;
			if(request.getParameter("displayName")!=null){
				displayName = request.getParameter("displayName");
				mapForDS.put("displayName",displayName);
				
			}
			int empId =0;
		    if(session.getAttribute("userId")!=null){
		      empId =(Integer) session.getAttribute("userId");
		      map.put("docId", empId);
		    }
			if(session.getAttribute("deptId")!=null){
				deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
				}
			if(request.getParameter("hospitalId")!=null && !request.getParameter("hospitalId").equals("")){
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
				mapForDS.put("hospitalId", hospitalId);	
			}
			if (session.getAttribute("userId") != null) {
				userId = (Integer)session.getAttribute("userId");
				mapForDS.put("userId", userId);	
			}
			
			if(request.getParameter("flag")!=null){
				flag =	request.getParameter("flag");
				mapForDS.put("flag", flag);
			}
			
			Users users = (Users)session.getAttribute("users");
		    if(users!=null){
		    	empId=users.getEmployee().getId();
		    	mapForDS.put("docId", empId);
		    }
		   String filePath="";
		    if(request.getParameter("filePath")!=null){
		    	filePath =	request.getParameter("filePath");
			}		
		    List<QueueManagment> queueList =new ArrayList<QueueManagment>();
		    List<Users> usersList =new ArrayList<Users>();
		    
				//map = opdHandlerService.getTokenXML(mapForDS);
			
			if(map.get("currentqueueList")!=null){
				queueList=(List<QueueManagment>)map.get("currentqueueList");
			}
			if(map.get("userList")!=null){
				usersList=(List<Users>)map.get("userList");
			}
			StringBuffer sb = new StringBuffer();
			/*if(queueList.size()>0){
				String counter="0";
					for(QueueManagment que:queueList){
						for(Users user:usersList){
							if(user.getEmployee().getId()==que.getDocotor().getId()){
								if(user.getCurrentCounter()!=null){
									if(user.getCurrentCounter().getCounterNo()!=null){
								        counter=user.getCurrentCounter().getCounterNo();
									}
								}
							}
						}
							sb.append("<item>");							
							sb.append("<Hospital_ID>" + que.getHospital().getId()
									+ "</Hospital_ID>");
							sb.append("<Doctor_ID>" + que.getDocotor().getId()
									+ "</Doctor_ID>");
//							sb.append("<employee_name>" + que.getDocotor().getFirstName()
//									+ "</employee_name>");
							sb.append("<Dept_ID>" + que.getDepartment().getId()
									+ "</Dept_ID>");
//							sb.append("<department_name>" + que.getDepartment().getDepartmentName()
//									+ "</department_name>");
							sb.append("<Token_No>" + que.getTokenNo()
									+ "</Token_No>");
							sb.append("<Counter>" + counter
									+ "</Counter>");
						
					sb.append("</item>");
												
					}
				
			}*/
			response.setContentType("text/xml");
			response.setHeader("Cache-Control", "no-cache");
			try {
				response.getWriter().write(
						"<?xml version='1.0' encoding='ISO-8859-1'?>");
				response.getWriter().write("<items>");
				response.getWriter().write(sb.toString());
				response.getWriter().write("</items>");
				
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		
		public ModelAndView bookCounterForDoctor(HttpServletRequest request,HttpServletResponse response){
				Map<String, Object> map = new HashMap<String, Object>();
				Box box = HMSUtil.getBox(request);
				map=opdHandlerService.bookCounterForDoctor(box);
				StringBuffer sb = new StringBuffer();
				sb.append("<item>");
				if(map.get("msg")!=null){
					sb.append("<msg>" + map.get("msg") + "</msg>");
				}
				sb.append("</item>");
				response.setContentType("text/xml");
				response.setHeader("Cache-Control", "no-cache");
				
				try {
					response.getWriter().write(
							"<?xml version='1.0' encoding='ISO-8859-1'?>");
					response.getWriter().write("<items>");
					response.getWriter().write(sb.toString());
					response.getWriter().write("</items>");
				} catch (Exception e) {
					e.printStackTrace();
				}
			    return null;
		}

		
		
		@SuppressWarnings("unused")
		public ModelAndView showOralMedicine(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp="";
			title = "Oral Medicine";
			jsp="oralMedicine";
			map.put("contentJsp", jsp);
			map.put("title", title);
		    return new ModelAndView(jsp, "map", map);
			
		}
		
		public ModelAndView showPreAssessmentClinic(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp="";
			jsp = "preAssessmentClinic";
			title = "Pre Assessment Clinic";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);

		}
		
		//added by govind 2017-05-25

		public ModelAndView submitOutsideLab(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session=request.getSession();
			String jsp="";
			int orderId=0,chargeId=0;            
            Box box = HMSUtil.getBox(request);
            
            
			map=opdHandlerService.submitOutsideLab(box);
			
			jsp = "messageForOpd";
			title = "Pre Assessment Clinic";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);

		}
		//added by govind 2017-05-25 end
		
		
		//
		

		
		public ModelAndView showMaxillofacialTraumaProforma(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			
			String jsp = "maxillofacialTraumaProforma";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
	
		
		public ModelAndView showCaseRecordOfPeriodontics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "caseRecordOfPeriodontics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}		

		public ModelAndView showOralAndMaxillofacialSurgery(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			map=opdHandlerService.showOralAndMaxillofacialSurgery();
			String jsp = "oralSurgery";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}	
		
		public ModelAndView showImplantPlanning(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "implantPlanning";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView showRemovablePartialProsthodontics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "removablePartialProsthodontics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView showFixedProsthodontics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "fixedProsthodontics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		public ModelAndView showEndodontics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "endodonticsCase";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView showDiagnosticRecordProsthodontics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "diagnosticRecordProsthodontics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView showMaxillofacialProsthesis(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "maxillofacialProsthesis";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		public ModelAndView showOralMedicinePathology(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "oralMedicinePathology";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		public ModelAndView showCommunityOralHealthCaseHistory(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "communityOralHealthCaseHistory";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView showPedodonticsVitalStatistics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "pedodonticsVitalStatistics";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		
		public ModelAndView showPgCaseRecordOrthodontics(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			String jsp = "orthodontics_PgCaseRecord";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView submitNursingDetails(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session  = request.getSession();
			Box box=HMSUtil.getBox(request);
			int skip=0;
			int forNext=0;
			int  referred_tokenNo=0;
			String reffered_department_name="";
			int hinId=0;
			if (request.getParameter("hinId")!=null && !request.getParameter("hinId").equals("")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				mapForDS.put("hinId",hinId);
			}
			int departmentId=0;
			if(request.getParameter("departmentId")!=null){
				departmentId = Integer.parseInt(request.getParameter("departmentId"));
				mapForDS.put("departmentId",departmentId);
			}
			int visitId=0;
			if(request.getParameter("visitId")!=null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				mapForDS.put("visitId", visitId);
			}
			int hospitalId=0;
			if(request.getParameter("hospitalId")!=null){
				hospitalId = Integer.parseInt(request.getParameter("hospitalId"));
				mapForDS.put("hospitalId", hospitalId);
			}
			String hospitalName="";
			if(request.getParameter("hospitalName")!=null){
				hospitalName = request.getParameter("hospitalName");
				mapForDS.put("hospitalName", hospitalName);
			}
			int userId=0;
			Users users=null;
			if(session!=null){
				users = (Users)session.getAttribute("users");
				mapForDS.put("userId",users.getEmployee().getId());
			}
			  int empId=0;
			  if(session!=null){
				  empId= (Integer)session.getAttribute("empId");
				  mapForDS.put("empId", users.getEmployee().getId());
			  }
			 
			String doctorName="";
			if(request.getParameter("refereddoctor")!=null){
				doctorName = request.getParameter("refereddoctor");
				mapForDS.put("doctorName", doctorName);
			}
			if (request.getParameter("admissionDate") != null && !request.getParameter("admissionDate").equals("")) {
				Date admissionDate =HMSUtil.convertStringTypeDateToDateType(request.getParameter("admissionDate"));
				mapForDS.put("referralDate", admissionDate);
				
				
				String referVisitDate=request.getParameter("admissionDate");
				try{
					Date referalTillDate=HMSUtil.addDaysToDate(referVisitDate, 14);
					mapForDS.put("referalTillDate", referalTillDate);
				}catch(Exception e){
					e.printStackTrace();
				}	
			}
			String referralCase="No";
			String referType="Internal";
			String admissionAdvised="n";
			boolean episodeCloseCheck=false;
			int referral=0;
			int refereddoctor=0;
			String submitFrom="5";
			boolean submitData = false;
			if(doctorName!=""){
				referralCase="Yes";
				referral=1;
				mapForDS.put("referral", referral);
				mapForDS.put("referralCase", referralCase);
				mapForDS.put("referType", referType);
				mapForDS.put("referdepartment", departmentId);
				mapForDS.put("fromDepartment", departmentId);
				mapForDS.put("refereddoctor", users.getEmployee().getId());
				mapForDS.put("referdTo", null);
				mapForDS.put("admissionAdvised", admissionAdvised);
				mapForDS.put("episodeCloseCheck", episodeCloseCheck);
				
				mapForDS.put("submitFrom", submitFrom);
				map=opdHandlerService.submitOPDPatientDetails(mapForDS);
		    	  if(null !=map.get("ref_token_No")){
		    		  map.put("referred_tokenNo", (Integer)map.get("ref_token_No"));
		    		  referred_tokenNo=(Integer)map.get("ref_token_No");
		    	  }
		    	 
		    	  if(null !=map.get("ref_department_name")){
		    		  map.put("referred_department_name", (String)map.get("ref_department_name"));
		    		  reffered_department_name=(String)map.get("ref_department_name");
		    	  }
			
					 Map<String, Object> mapForSpeciality = null;
					// mapForSpeciality =	opdHandlerService.saveSpeciality(mapForDS,box); // added by amit das on 22-07-2016
					//mapForSpeciality =	opdHandlerService.saveSpecialityTemplateDetails(mapForDS,box); 
						OpdPatientDetails opdPatientDetails =null;
						if(map.get("opdPatientDetails")!=null){
							opdPatientDetails=(OpdPatientDetails)map.get("opdPatientDetails");
							mapForDS.put("opdPatientDetails", opdPatientDetails);
							
							box.put("opdPatientDetailId", opdPatientDetails.getId());
							map.put("opdId", opdPatientDetails.getId());
						}
						 Map<String, Object> mapForNicuCaseRecord = null;
						 if(box.getString("nicuFlag").equalsIgnoreCase("NicuCaseRecord")){
							mapForNicuCaseRecord =	opdHandlerService.saveNicuCaseRecord(mapForDS,box); // added by amit das on 22-07-2016
						}
						 if(submitFrom.equals("3"))
							{message = "Patient Parked.";}
						else
							{message = "Patient Details Submitted.";}
						String mesaage1="";
						
						jsp = "op_nursingcare_waiting_list.jsp";

						title = "Waiting Patient List";
						
						map.put("message",message);
						if(null !=opdPatientDetails && null !=opdPatientDetails.getId()){
						map.put("opdId",opdPatientDetails.getId());
						}
						submitData = true; 
						 
						 
						 map.put("referred_tokenNo", referred_tokenNo);
						 map.put("reffered_department_name", reffered_department_name);

							
						    map.put("contentJsp", jsp);
							map.put("title", title);
							session.removeAttribute("token");
							return new ModelAndView("index", "map", map);
						 
						 
						 
				
			}
			else{
				
			}
			
			
			
			
			
			String jsp = "orthodontics_PgCaseRecord";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		public ModelAndView referBackNursingPatientToOpd(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session  = request.getSession();
			int hinId=0;
			if (request.getParameter("hinId")!=null && !request.getParameter("hinId").equals("")) {
				hinId = Integer.parseInt(request.getParameter("hinId"));
				mapForDS.put("hinId",hinId);
			}
			int visitId=0;
			if(request.getParameter("visitId")!=null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				mapForDS.put("visitId",visitId);
			}
			
			map=opdHandlerService.referBackNursingPatientToOpd(mapForDS);
			
			int flag=(Integer)map.get("flag");
		     if(flag==1){
		    	 
		    	 map.put("msg", "Patient Refer Back Successfully...."); 
		     }
			
		
		
			jsp = "op_nursingcare_waiting_list.jsp";
			 map.put("contentJsp", jsp);
				map.put("title", title);
				return new ModelAndView("index", "map", map);
		}
		
		public ModelAndView showTaperdMedicine(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			HttpSession session  = request.getSession();
			Box box=HMSUtil.getBox(request);
			int row=0,taperHdb=0;
			String taperedEdit=null,type="OP";
			if(box.get("row")!=null){
				row=box.getInt("row");
			}
			if(box.get("taperedEdit")!=null){
				taperedEdit=box.getString("taperedEdit");
			}
			if(box.get("taperedMedicineHdb")!=null){
				taperHdb=box.getInt("taperedMedicineHdb");
			}
			Integer itemId=0;
			if(box.get("nomenclature")!=null){
				itemId=box.getInt("nomenclature");
			}
			if(box.get("type")!=null){
				type=box.getString("type");
			}
			List<TaperedMedicineUtil> taperUtilList=new ArrayList<TaperedMedicineUtil>();
			for(int i=1;i<=taperHdb;i++){
				TaperedMedicineUtil tap=new TaperedMedicineUtil();
				if(box.get("taperedItemId"+row+"_"+i)!=null){
					Integer itemId2=box.getInt("taperedItemId"+row+"_"+i);
					if(itemId.equals(itemId2)){
					tap.setItemId(box.getInt("taperedItemId"+row+"_"+i));
				if(box.get("taperedFrequency"+row+"_"+i)!=null){
					tap.setFrequency(box.getInt("taperedFrequency"+row+"_"+i));
				}
				if(box.get("taperedDosage"+row+"_"+i)!=null){
					tap.setDosage(box.getString("taperedDosage"+row+"_"+i));
				}
				if(box.get("taperedDosageCount"+row+"_"+i)!=null){
					tap.setDosageCount(new BigDecimal(box.getString("taperedDosageCount"+row+"_"+i)));
				}
				if(box.get("taperedDuration"+row+"_"+i)!=null){
					tap.setDuration(box.getInt("taperedDuration"+row+"_"+i));
				}
				if(box.get("total"+row+"_"+i)!=null){
					tap.setTotal(new BigDecimal(box.getString("total"+row+"_"+i)));
				}
				taperUtilList.add(tap);
				}
			  }
			}
			map=opdHandlerService.showTaperdMedicine(box);
			String jsp ="taperedMedicine";
			if(type.equals("IP")){
			jsp = "taperedMedicineIP";
			}
			else if(type.equals("OT")){
				jsp = "taperedMedicineOT";
			}
			else{
			jsp = "taperedMedicine";
			}
			map.put("row",row);
			map.put("taperedEdit",taperedEdit);
			map.put("taperUtilList",taperUtilList);
			//map.put("contentJsp", jsp);
			return new ModelAndView(jsp, "map", map);
		}
		public synchronized ModelAndView printResultValidationLabForSpeciality(HttpServletRequest request,
				HttpServletResponse response) {
			Map<String, Object> requestParameters = new HashMap<String, Object>();
			Map<String, Object> detailsMap1 = new HashMap<String, Object>();
			Map<String, Object> map = new HashMap<String, Object>();
			List<DgResultEntryDetail> dgResultdetailList = new ArrayList<DgResultEntryDetail>();
			Map<String, Object> resultDetailsMap = new HashMap<String, Object>();
			List<Map<String, Object>> resultDetailsMapList = new ArrayList<Map<String, Object>>();

			String query = "";
			int srn = 0;
			String src = "";
			int id = 0;
			String crit = "";
			String deptName = "";
			int deptId = 0;
			int investigationId = 0;
			session = request.getSession();
			if (session.getAttribute("deptName") != null) {
				deptName = (String) session.getAttribute("deptName");
			}
			if (session.getAttribute("deptId") != null) {
				deptId = Integer.parseInt("" + session.getAttribute("deptId"));
			}
			if(session.getAttribute(HOSPITAL_ID)!=null){
				requestParameters.put(HOSPITAL_ID, Integer.parseInt(""+session.getAttribute(HOSPITAL_ID)));
			}

			Map<String, Object> dataMap = new HashMap<String, Object>();
			dataMap=hospitalDetailsMasterHandlerService.getHospitalList(requestParameters);
			 //dataMap = getHospitalParameterDetails(request);
			 List<MasHospital> masHospitalList=(List<MasHospital>)dataMap.get("masHospitalList");
			 if(masHospitalList.size()>0){
				 map.put("hospitalAddress", (String) masHospitalList.get(0).getAddress());
				 map.put("hospitalName", (String) masHospitalList.get(0).getHospitalName());
				  
			 }  

			try {
				if (request.getParameter("counta") != null) {
					srn = Integer.parseInt(request.getParameter("counta"));
				}
				if (request.getParameter("investigationId") != null) {
					investigationId = Integer.parseInt(request.getParameter("investigationId"));
				}
				
				src = ("parent");
				if ((request.getParameter(src) != null)
						&& !(request.getParameter(src).equals(""))) {
					requestParameters.put("orderNo", request.getParameter(src));
					requestParameters.put("investigationId", investigationId);
					detailsMap1 = opdHandlerService.getAllValidatedTestForLabOrderNoWise(requestParameters);

					map.put("detailsMap1", detailsMap1);
					map.put("deptName", deptName);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			return new ModelAndView("finalResultPrintForLab", "map", map);
		}
		
		public ModelAndView printNicuCaseRecord(HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
	
	
	int opdPatientDetailId=0;
	
	if(request.getParameter("opdPatientDetailId")!= null){
		opdPatientDetailId = Integer.parseInt(request.getParameter("opdPatientDetailId"));
		mapForDS.put("opdPatientDetailId",opdPatientDetailId);
	}
	int visitId=0;
	
	if(request.getParameter("visitId")!= null){
		visitId = Integer.parseInt(request.getParameter("visitId"));
		mapForDS.put("visitId",visitId);
	}
	int hospitalId = 0;
	if(request.getParameter("hospitalId")!=null){
		hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
	}else{
		hospitalId =(Integer) session.getAttribute("hospitalId");
		mapForDS.put("hospitalId",hospitalId);
	}
	
	map=opdHandlerService.printNicuCaseRecord(mapForDS);
	jsp = "print_nicu_case_record_paediatrics";
	return new ModelAndView(jsp, "map", map);

}


		public ModelAndView printHeightWeightGraph(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			parameters = opdHandlerService.printHeightWeightGraph(requestParametersMap);
			parameters.put("hinId", hinId);
			HMSUtil.generateReport("pediatric_chart", parameters,
					(Connection) parameters.get("conn"), response,
					getServletContext());

		return null;
	}
		
		public ModelAndView printHeightWeightHeadCircumferenceGraph(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			parameters = opdHandlerService.printHeightWeightHeadCircumferenceGraph(requestParametersMap);
			parameters.put("hinId", hinId);
			HMSUtil.generateReport("pediatric_chart", parameters,
					(Connection) parameters.get("conn"), response,
					getServletContext());

		return null;
	}
		
		
		public ModelAndView printWeightPercentiles(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			parameters = opdHandlerService.printWeightPercentiles(requestParametersMap);
			parameters.put("hinId", hinId);
			HMSUtil.generateReport("pediatric_chart", parameters,
					(Connection) parameters.get("conn"), response,
					getServletContext());

		return null;
	}
		
		public ModelAndView printHeightPercentiles(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			parameters = opdHandlerService.printHeightPercentiles(requestParametersMap);
			parameters.put("hinId", hinId);
			HMSUtil.generateReport("pediatric_chart", parameters,
					(Connection) parameters.get("conn"), response,
					getServletContext());

		return null;
	}
		
		
		public ModelAndView printHeadCircumferencePercentiles(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			parameters = opdHandlerService.printHeadCircumferencePercentiles(requestParametersMap);
			parameters.put("hinId", hinId);
			HMSUtil.generateReport("pediatric_chart", parameters,
					(Connection) parameters.get("conn"), response,
					getServletContext());

		return null;
	}
		
		
		public ModelAndView printGrowthRecord(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> parameters = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			
			int hinId = 0;
			if(request.getParameter("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			parameters = opdHandlerService.printGrowthRecord(requestParametersMap);
			parameters.put("hinId", hinId);
			HMSUtil.generateReport("pediatric_chart", parameters,
					(Connection) parameters.get("conn"), response,
					getServletContext());

		return null;
	}
		public ModelAndView showOutSideResultEntryForAntenatal(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Box box = HMSUtil.getBox(request);
			int hinId = 0;
			int visitId = 0;
			String from = "";
			int deptId = 0;
			int hospitalId= 0;
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				box.put("deptId", deptId);
			}
			if(request.getParameterValues("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			
			if(request.getParameterValues("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			if(request.getParameterValues("from") != null){
				from = request.getParameter("from");
			}
			String templateFlag = "";
			if(request.getParameterValues("templateFlag") != null){
				templateFlag = request.getParameter("templateFlag");
			}
			
			
			box.put("from", from);
			
			requestParametersMap.put("hinId", hinId);
			requestParametersMap.put("visitId", visitId);
			requestParametersMap.put("hospitalId", hospitalId);
			requestParametersMap.put("deptId", deptId);
			requestParametersMap.put("templateFlag", templateFlag);
			
			map=opdHandlerService.showOutSideResultEntryDermotology(requestParametersMap);
			map.putAll(opdHandlerService.getTemplate(box));
			map.putAll(opdHandlerService.showPatientLabResult(box));
			jsp="external_lab_report_antenatal";
			return new ModelAndView(jsp, "map", map);
	}
		
		
		public ModelAndView showOutSideResultEntryDermotology(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Box box = HMSUtil.getBox(request);
			int hinId = 0;
			int visitId = 0;
			String from = "";
			int deptId = 0;
			int hospitalId= 0;
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			if (session.getAttribute("deptId") != null) {
				deptId = (Integer) session.getAttribute("deptId");
				box.put("deptId", deptId);
			}
			if(request.getParameterValues("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
			}
			
			if(request.getParameterValues("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			if(request.getParameterValues("from") != null){
				from = request.getParameter("from");
			}
			String templateFlag = "";
			if(request.getParameterValues("templateFlag") != null){
				templateFlag = request.getParameter("templateFlag");
			}
			
			
			box.put("from", from);
			
			requestParametersMap.put("hinId", hinId);
			requestParametersMap.put("visitId", visitId);
			requestParametersMap.put("hospitalId", hospitalId);
			requestParametersMap.put("deptId", deptId);
			requestParametersMap.put("templateFlag", templateFlag);
			
			map=opdHandlerService.showOutSideResultEntryDermotology(requestParametersMap);
			map.putAll(opdHandlerService.getTemplate(box));
			map.putAll(opdHandlerService.showPatientLabResult(box));
			jsp="external_lab_report_dermotology";
			return new ModelAndView(jsp, "map", map);
	}
		
		/*swarup
		 * public ModelAndView saveOutSideResultEntryForAntenatal(HttpServletRequest request,HttpServletResponse response) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			List <ExternalLabReport> testList = new ArrayList<ExternalLabReport>();
			int visitId = 0;
			if(request.getParameterValues(VISIT_ID) != null){
				visitId = Integer.parseInt(request.getParameter(VISIT_ID));
				requestParametersMap.put("visitId", visitId);
			}
			int hinId = 0;
			if(request.getParameterValues(HIN_ID) != null){
				hinId = Integer.parseInt(request.getParameter(HIN_ID));
				requestParametersMap.put("hinId", hinId);
			}
			
			int length = Integer.parseInt(request.getParameter("count"));
			for(int i=0; i<length; i++)
			{
				ExternalLabReport externalLabReport = new ExternalLabReport();
				MasHospital hospital = new MasHospital();
				hospital.setId((Integer) session.getAttribute("hospitalId"));
				Patient patient = new Patient();
				patient.setId(hinId);
				Visit visit = new Visit();
				visit.setId(visitId);
				externalLabReport.setTestName(request.getParameter("testName"+i).trim());
				externalLabReport.setTestResult(request.getParameter("testResult"+i).trim());
				externalLabReport.setHospital(hospital);
				externalLabReport.setHin(patient);
				externalLabReport.setVisit(visit);
				testList.add(externalLabReport);								
				
			}		
			requestParametersMap.put("testList", testList);
			map=opdHandlerService.saveOutSideResultEntryForAntenatal(requestParametersMap);	
		    map.putAll(opdHandlerService.showOutSideResultEntryForAntenatal(requestParametersMap));
		    String message = "";
		    if((Boolean) map.get("saved"))
		    {
		    	message = "Data saved Successfuly";
		    }else
		   message = "Try Again..!";
		    map.put("message", message);
		    map.put("saved", (Boolean) map.get("saved"));
			//jsp="external_lab_test_window";
		    jsp="external_lab_report_antenatal"; 
			return new ModelAndView(jsp, "map", map);
			
		}*/
		
		public ModelAndView saveOutSideResultEntryForAntenatal(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			List <ExternalLabReportCommon> testList = new ArrayList<ExternalLabReportCommon>();
			int visitId = 0;
			if(request.getParameterValues("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				requestParametersMap.put("visitId", visitId);
			}
			int hinId = 0;
			if(request.getParameterValues("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			int length = Integer.parseInt(request.getParameter("hiddenValueDermotology"));
			String templateName="";
			
			templateName = request.getParameter("templateFlag").trim();
			 
			for(int i=0; i<length; i++)
			{
				ExternalLabReportCommon externalLabReport = new ExternalLabReportCommon();
				MasHospital hospital = new MasHospital();
				hospital.setId((Integer) session.getAttribute("hospitalId"));
				Patient patient = new Patient();
				patient.setId(hinId);
				Visit visit = new Visit();
				visit.setId(visitId);
				if(request.getParameter("testResult"+i).trim() != null && !request.getParameter("testResult"+i).equals("")){
				if(request.getParameter("chargeCodeNameDermotology"+i).trim() != null && !request.getParameter("chargeCodeNameDermotology"+i).equals("")){
				String testName=request.getParameter("chargeCodeNameDermotology"+i).trim();
				String [] testNameFinal = testName.split("\\[");
				externalLabReport.setTestName(testNameFinal[0].trim());
				}
				externalLabReport.setTestResult(request.getParameter("testResult"+i).trim());
				if(request.getParameter("testDate"+i) != null && !request.getParameter("testDate"+i).equals("")){
				String tDate=request.getParameter("testDate"+i);
				Date testDate=HMSUtil.convertStringTypeDateToDateType(tDate);
				externalLabReport.setTestDate(testDate);
				}
				externalLabReport.setHospital(hospital);
				externalLabReport.setHin(patient);
				externalLabReport.setVisit(visit);
				externalLabReport.setTemplateName(templateName);
				externalLabReport.setHospital(hospital);
				
				testList.add(externalLabReport);								
				}
			}		
			requestParametersMap.put("testList", testList);
			map=opdHandlerService.saveOutSideResultEntryForAntenatal(requestParametersMap);				
		    String message = "";
		    if((Boolean) map.get("saved"))
		    {
		    	message = "Data saved Successfuly";
		    }else
		   message = "Try Again..!";
		    map.put("message", message);
		    map.put("saved", (Boolean) map.get("saved"));
			jsp="external_lab_report_antenatal";
			return new ModelAndView(jsp, "map", map);
			
		}
		
		
		public ModelAndView showContactLensTempleJsp(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			map = opdHandlerService.getMedicineTemplateDetails(box);
			String jsp = "contactLensTemplate";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		public ModelAndView showNewOPWaitingList(HttpServletRequest request,HttpServletResponse response) {

			int deptId = 0;
			HttpSession session = request.getSession();
			Map<String, Object> mapForDS = new HashMap<String, Object>();
			Map<String, Object> map = new HashMap<String, Object>();
			
			int tokeNo=0;
			String patientName;
			String uhid;
			int opd_DepartmentId=0;
			int hospitalId=0;
			int searchFlag=0;
			String flag="";
			String fromTempate="opConsultationLite";
			mapForDS.put("forOPClinnic", true);
			mapForDS.put("fromTempate", fromTempate);
			if(request.getParameter("flag")!=null){
				flag=request.getParameter("flag");
				mapForDS.put("flag",flag);
			}
			if(request.getParameter("searchFlag")!=null){
				searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
				mapForDS.put("searchFlag",searchFlag);
			}
			
			if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
				tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
				mapForDS.put("tokenNo",tokeNo);
			}
			if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
				patientName = request.getParameter("patientName");
				mapForDS.put("patientName", patientName);
			}
			if(request.getParameter("uhid")!=null){
				uhid = request.getParameter("uhid");
				mapForDS.put("uhid", uhid);
				
			}
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			}
			
			Integer userId=null;
			if(session.getAttribute(USER_ID)!=null){
				userId = (Integer) session.getAttribute(USER_ID);
				mapForDS.put("userId", userId);
			}
				
			
			
			if (request.getParameter("deptId") != null) {
				deptId = Integer.parseInt(request.getParameter("deptId"));
				session.setAttribute("deptId", deptId);
				mapForDS.put("deptId", deptId);
			} else {
				if(session.getAttribute("deptId")!=null){
				deptId = (Integer) session.getAttribute("deptId");
				mapForDS.put("deptId", deptId);
				}
			}
			
			String title = request.getParameter("title");
			mapForDS.put("hospitalId", hospitalId);
			
			mapForDS.put("opClinicalWaitinList", true);

			
			map = opdHandlerService.getWaitingPatientList(mapForDS);
			String deptName =(String)map.get("deptName");
					ServletContext context=getServletContext();
					Map contextMaps=null;
					contextMaps =(Map) context.getAttribute("contextMap");
					if(contextMaps!=null && contextMaps.size()>0 && contextMaps.get("patientStatus")!=null && (Boolean)contextMaps.get("patientStatus")==true){
					    if(mapForDS.get("hospitalId").equals(contextMaps.get("hospitalId")) 
					    		&& mapForDS.get("deptId").equals(contextMaps.get("deptId"))){
					    
					    	contextMaps.put("patientStatus", contextMaps.get("patientStatus"));
					    	contextMaps.put("VisitId", contextMaps.get("VisitId"));
					    	contextMaps.put("uhidNum", contextMaps.get("uhidNum"));
					    	context.setAttribute("contextMaps", contextMaps);
					    	map.put("contextMaps",contextMaps);
					    	Map mm=(Map) map.get("contextMaps");
					    }
				    }
			session.setAttribute("deptName", deptName);
			String jsp=null;
			if(searchFlag>0){
				jsp = "op_clinical_search_list_new_lite.jsp";
			}else{
				jsp = "op_clinical_waiting_list_new.jsp";
			}
			
			title = "Waiting Patient List";
			map.put("deptId", deptId);
			map.put("opdType",request.getParameter("opdType"));
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("flag", flag);
			map.put("searchFlag", searchFlag);
			return new ModelAndView("index", "map", map);
		
		}
		
		public ModelAndView showNewOPDDetailScreen(HttpServletRequest request,HttpServletResponse response) {
	
		    HttpSession session = request.getSession(); 
		    Map<String, Object> map = new HashMap<String, Object>();
		    Map<String, Object> map2 = new HashMap<String, Object>();
		    Map<String, Object> map3 = new HashMap<String, Object>();
		    List<Visit> visitTokenList = new ArrayList<Visit>();
		    List<MasDepartment> masDepartmentList = null;
		    String loggedInDeptName =  null;
		    int visitId =0;
		    int districtId=0;
		    int hospitalId=0;
		    int hospitalTypeId = 0;
		    if(session.getAttribute("districtId")!=null){
		    	districtId = (Integer) session.getAttribute("districtId");
		        map.put("districtId", districtId);
		       }
		    if(session.getAttribute("hospitalTypeId")!=null){
		    	hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
		        map.put("hospitalTypeId", hospitalTypeId);
		       }
		    
		    if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
		    if(request.getParameter("visitId")!=null){
		      visitId =Integer.parseInt(request.getParameter("visitId"));
		      map.put("visitId", visitId);
		    }
		    int deptId =0;
		    if(session.getAttribute("deptId")!=null){
		     deptId = (Integer) session.getAttribute("deptId");
		     map.put("deptId", deptId);
		    }
		    int empId =0;
		    if(session.getAttribute("userId")!=null){
		      empId =(Integer) session.getAttribute("userId");
		      map.put("docId", empId);
		      map.put("userId", empId);
		    }
		    int empDeptId =0;
		    if(session.getAttribute("empDeptId")!=null){
		    	empDeptId =(Integer) session.getAttribute("empDeptId");
		      map.put("empDeptId", empDeptId);
		    }
		    
		    int token  =0;
		    if(request.getParameter("token")!=null){
		     String tokens=	request.getParameter("token");
		     token =Integer.parseInt(tokens.split("/")[1].trim());        
		    }
		    
		    int skip  =0;
		    if(request.getParameter("skip")!=null){
		    	if( Integer.parseInt(request.getParameter("skip"))!=0){
		    		skip= Integer.parseInt(request.getParameter("skip"));
		        	map.put("skip", skip);
		    	}
		    }
		    if(request.getParameter("skipped")!=null){
		    	map.put("skipped", request.getParameter("skipped"));
		    }
		    
		    if(request.getParameter("searchFlag")!=null){
		    	map.put("searchFlag", request.getParameter("searchFlag"));
		    }
		    
		    map = opdHandlerService.getPatientDetails(map);
			List patientDataList = (List) map.get("patientDataList");
		    List<MasDiet> dietList =(List)map.get("dietDataList");
		    List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
		    storeBrandList = (List)map.get("storeBrandList");
		    
		   if(map.get("masDepartmentList")!=null){
		    	masDepartmentList = (List<MasDepartment>) map.get("masDepartmentList");
		    	if(masDepartmentList.size()>0){
		    		loggedInDeptName = 	masDepartmentList.get(0).getDepartmentName();
		    	}
		    }
		    
		    if(patientDataList!=null && patientDataList.size()>0){
		    	Visit visit = (Visit) patientDataList.get(0);
			    int visitNo = visit.getVisitNo();
			    int hinId = visit.getHin().getId();
			    map.put("visitNo", visitNo);
			    map.put("hinId", hinId);
			    map.put("token", token);
			    map = opdHandlerService.getOPDDetails(map);
		    }
		    if(map.get("patientStatus")!=null && (Boolean)map.get("patientStatus")==true){
		    	ServletContext context=getServletContext(); 
		    	Map contextMap=new HashMap(); 
		    	contextMap.put("uhidNum", map.get("uhidNum"));
		    	contextMap.put("patientStatus", map.get("patientStatus"));
		    	contextMap.put("visitId", map.get("visitId"));
		    	contextMap.put("deptId", map.get("deptId"));
		    	contextMap.put("hospitalId", map.get("hospitalId"));
		    	
		    	contextMap.put("token", map.get("token"));
		    	contextMap.put("pvisitDate", map.get("pvisitDate"));
		    	contextMap.put("districtId", map.get("districtId"));
		    	contextMap.put("docId", map.get("docId"));
		    	  
			    context.setAttribute("contextMap", contextMap);
		    }
		    	
		    if(map.get("openStatus")!=null && (Boolean)map.get("openStatus"))
		   	{
		    	map.put("opClinicalWaitinList", true);
		   			map = opdHandlerService.getWaitingPatientList(map);
		   			map.put("openMsg", "Record already opened. Please try again after 5 Minuts.");
		   			String openMsg= "Case Sheet already opened. Please try again after 5 Minutes.";
		   			try {
		   				LOGGER.info("OP Screen -Case sheet already opened with in 5 Min");
						response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList&openMsg"+openMsg);
					} catch (IOException e) {
						
						e.printStackTrace();
					}
		   			jsp = "op_clinical_waiting_list.jsp";
		   			map.put("contentJsp", jsp);
		   			map.put("title", title);
		   			return new ModelAndView("index", "map", map);
		   	}
		      map = opdHandlerService.showDepartmentSpeciality(map);
		      opdHandlerService.displayCurrentPatientToken(map);
		      map.put("patientDataList", patientDataList);
		      map.put("dietDataList", dietList);
		      map.put("storeBrandList", storeBrandList);
		      if(patientDataList!=null && patientDataList.size()==0 && skip==1){
		      	try{
		      		response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList");
		      	}catch(Exception e){
		      		e.printStackTrace();
		      	}
		      }
		      //added by govind 20-01-2017
		      String orderNo="";
		      int OrderId=0;
		      Box box = HMSUtil.getBox(request);
		      if(patientDataList.size()>0){
		    	Visit visit=(Visit)patientDataList.get(0);
				box.put("visitId", visit.getId());
				box.put("hinId", visit.getHin().getId());

				map2 = opdHandlerService.showPatientLabResult(box);
				if(map2.get("orderNo")!=null){
					orderNo=map2.get("orderNo").toString();
				}
				if(map2.get("OrderId")!=null){
					OrderId=(Integer)map2.get("OrderId");
				}
		      }
		      map.put("orderNo", orderNo);
		      map.put("OrderId", OrderId);
		      //added by govind 20-01-2017 end
		      if(patientDataList!=null && patientDataList.size()>0){
		    	Visit visit = (Visit) patientDataList.get(0);
			    box.put("hinId", visit.getHin().getId());
			    map3 = opdHandlerService.getClinicalSummaryDetail(box);
		    }
		      	List<Object[]>previousDetailList = new ArrayList<Object[]>();
				List<Object[]>previousPrescriptionList = new ArrayList<Object[]>();
				List<Object[]>previousInvestigationList = new ArrayList<Object[]>();
				List<Object[]>previousDiagnosisList = new ArrayList<Object[]>();
				List<Object[]>previousProcedureList = new ArrayList<Object[]>();
				
				if(map3.get("previousDetailList") != null){
					previousDetailList =(List)map3.get("previousDetailList");
					 map.put("previousDetailList", previousDetailList);
				}
				if(map3.get("previousPrescriptionList") != null){
					previousPrescriptionList =(List)map3.get("previousPrescriptionList");
					 map.put("previousPrescriptionList", previousPrescriptionList);
				}
				if(map3.get("previousInvestigationList") != null){
					previousInvestigationList =(List)map3.get("previousInvestigationList");
					 map.put("previousInvestigationList", previousInvestigationList);
				}
				if(map3.get("previousDiagnosisList") != null){
					previousDiagnosisList =(List)map3.get("previousDiagnosisList");
					 map.put("previousDiagnosisList", previousDiagnosisList);
				}
				if(map3.get("previousProcedureList") != null){
					previousProcedureList =(List)map3.get("previousProcedureList");
					 map.put("previousProcedureList", previousProcedureList);
				}
			    map.put("patientDataList", patientDataList);
			    map.put("dietDataList", dietList);
			    map.put("storeBrandList", storeBrandList);
			    
				String jsp = "opd_detail.jsp";
			
		      map.put("deptId", deptId);
		      map.put("contentJsp", jsp);
		      map.put("title", title);
		      map.put("loggedInDeptName", loggedInDeptName);
		      return new ModelAndView("index", "map", map);
		 
		}
		
		@SuppressWarnings({"unchecked"})
		public void submitFormForMedicineCaseSheetReport(
				HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			int visiNo = 0;
			String serviceNo = "";
			String hinNo = "";
			int visitId = 0;
			String patientDetailsStatus=null;
			if (request.getParameter("visiNo") != null) {
				visiNo = Integer.parseInt(request
						.getParameter("visiNo"));
			}
			
			if(request.getParameter("visitId")!= null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
			}
			
			if(request.getParameter("patientDetailsStatus")!= null){
				patientDetailsStatus = request.getParameter("patientDetailsStatus");
			}
			
			
			if(request.getParameter("secondOpinionVisitId")!= null && !request.getParameter("secondOpinionVisitId").equals("")){
				visitId = Integer.parseInt(request.getParameter("secondOpinionVisitId"));
			}
			if (request.getParameter("patientEharIdUhid") != null && !request.getParameter("patientEharIdUhid").equals("")) {
				hinNo = request.getParameter("patientEharIdUhid");
			}
			
			if (request.getParameter("hinNo") != null) {
				hinNo = request.getParameter("hinNo");
			}else {
				hinNo=opdHandlerService.getHinNo(visitId);
			}
			
			
			
			HttpSession session = request.getSession();
			int hospitalId = 0;
			if(request.getParameter("hospitalId")!=null){
				hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
			}else{
				hospitalId =(Integer) session.getAttribute("hospitalId");
			}
			Map<String, Object> detailsMap = new HashMap<String, Object>();

			detailsMap = opdHandlerService.getConnectionForReport();
			Map<String, Object> parameters = new HashMap<String, Object>();
			
			parameters.put("visitId", visitId);
			parameters.put("hospitalId", hospitalId);
			parameters.put("visitNo", visiNo);
			parameters.put("serviceNo", serviceNo);
			parameters.put("hin_no", hinNo);
			parameters.put("SUBREPORT_DIR", getServletContext().getRealPath(
					"/Reports/"));
			try {
				
				String reportName="";
				String formatType = request.getParameter("reportFormat");
				if(patientDetailsStatus==null || patientDetailsStatus.equalsIgnoreCase("y")){
					reportName="medicalCaseSheetnewforstorageOPD_specialty";
				}else{
					reportName="medicalCaseSheetnewforstorageOPD2";
				}

				if(formatType!=null && formatType.equalsIgnoreCase("html"))
				HMSUtil.generateHTMLReport(reportName, parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());
				else
				HMSUtil.generateReport(reportName, parameters,
						(Connection) detailsMap.get("conn"), response,
						getServletContext());

			} catch (IllegalStateException e) {
				e.printStackTrace();
			}
		}
		
		@SuppressWarnings("unchecked")
		public ModelAndView showGynecologyCaseSheetJsp(HttpServletRequest request,
				HttpServletResponse response) {
			Box box = HMSUtil.getBox(request);
			Map<String, Object> map = new HashMap<String, Object>();
			int hinId = 0;
			if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				box.put("hinId",hinId);
			}	
			int visitId=0;
			
			if(request.getParameter("visitId")!= null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				box.put("visitId",visitId);
			}
			jsp = "gynecologyCaseSheetSpeciality";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("hinId", hinId);
			return new ModelAndView(jsp, "map", map);
		}
		
		
		public ModelAndView saveOutSideResultEntryForDermotology(HttpServletRequest request,HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			HttpSession session = request.getSession();
			Map<String, Object> requestParametersMap = new HashMap<String, Object>();
			List <ExternalLabReportCommon> testList = new ArrayList<ExternalLabReportCommon>();
			int visitId = 0;
			if(request.getParameterValues("visitId") != null){
				visitId = Integer.parseInt(request.getParameter("visitId"));
				requestParametersMap.put("visitId", visitId);
			}
			int hinId = 0;
			if(request.getParameterValues("hinId") != null){
				hinId = Integer.parseInt(request.getParameter("hinId"));
				requestParametersMap.put("hinId", hinId);
			}
			int hospitalId = 0;
			if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
			int length = Integer.parseInt(request.getParameter("hiddenValueDermotology"));
			String templateName="";
			templateName = request.getParameter("templateFlag").trim();
			List testNameList = new ArrayList();
			List <Integer> investigationIdList = new ArrayList <Integer>();
			List testResultList = new ArrayList();
			List testDateList = new ArrayList();
			List testTimeList = new ArrayList();
			List resultStatList = new ArrayList();
			List investigationType = new ArrayList();
			List<Integer> subInvsetigationIdList = new ArrayList<Integer>();
			
			for(int i=1; i<length; i++)
			{
				if(request.getParameter("chargeCodeNameDermotology"+i) != null && !request.getParameter("chargeCodeNameDermotology"+i).equals("")){
				
					String testName=request.getParameter("chargeCodeNameDermotology"+i);

					String [] testNameFinal = testName.split("\\[");
					testNameList.add(testNameFinal[0].trim());

					int index1 = testName.lastIndexOf("[");
					int index2 = testName.lastIndexOf("]");
					if(index1>=0 ){
						index1++;
						investigationIdList.add(Integer.parseInt(testName.substring(index1,	index2)));
					}else {
						investigationIdList.add(0);
					}
				}else{System.out.println("in else");
						investigationIdList.add(0);
						testNameList.add("");
				}
				
				if(request.getParameter("subInvestigationId"+i)!=null){
					subInvsetigationIdList.add(Integer.parseInt(request.getParameter("subInvestigationId"+i)));
				}else{
					subInvsetigationIdList.add(0);
				}
				if(request.getParameter("testResult"+i)!=null && !request.getParameter("testResult"+i).equals("")){
					testResultList.add(request.getParameter("testResult"+i));
				}else{
					testResultList.add("");
				}
				String resultStatus="";
				if(request.getParameter("resultStatus"+i)!=null && request.getParameter("resultStatus"+i).equalsIgnoreCase("y")){
					
					resultStatList.add("Abnormal");
				}else{
					resultStatList.add("Normal");
				}
				
				testDateList.add(request.getParameter("testDate"+i));
				testTimeList.add(request.getParameter("testTime"+i));
												
			}		
			requestParametersMap.put("testNameList", testNameList);
			requestParametersMap.put("subInvsetigationIdList", subInvsetigationIdList);
			requestParametersMap.put("investigationIdList", investigationIdList);
			requestParametersMap.put("testResultList", testResultList);
			requestParametersMap.put("resultStatList", resultStatList);
			requestParametersMap.put("testDateList", testDateList);
			requestParametersMap.put("testTimeList", testTimeList);
			requestParametersMap.put("hospitalId", hospitalId);
			requestParametersMap.put("hinId", hinId);
			requestParametersMap.put("visitId", visitId);
			requestParametersMap.put("templateName", templateName);
			map=opdHandlerService.saveOutSideResultEntryForDermotology(requestParametersMap);	
			
		    //map.putAll(opdHandlerService.saveOutSideResultEntryForDermotology(requestParametersMap));
		    String message = "";
		    if((Boolean) map.get("saved"))
		    {
		    	message = "Data saved Successfuly";
		    }else
		   message = "Try Again..!";
		    map.put("message", message);
		    map.put("saved", (Boolean) map.get("saved"));
			jsp="external_lab_report_dermotology";
			return new ModelAndView(jsp, "map", map);
			
		}
		
		//Added by Arbind on 29-11-2017
		@SuppressWarnings("unused")
		public ModelAndView showPhototherapyProforma(HttpServletRequest request, HttpServletResponse response) {
			Map<String, Object> map = new HashMap<String, Object>();
			Box box = HMSUtil.getBox(request);
			int hinId = 0;
			if(null != box.get("hinId")){
				hinId = box.getInt("hinId");
			}
			int visitId = 0;
			if(null != box.get("visitId")){
				visitId = box.getInt("visitId");
			}
			String  tempLateName = "";
			if(null != box.getString("tempLateName")){
				tempLateName = box.getString("tempLateName");
			}
			map = opdHandlerService.getPhototherapyProformaDetails(box);
			String jsp="";
			title = "Phototherapy Proforma";
			jsp="phototherapyProforma";
			map.put("contentJsp", jsp);
			map.put("title", title);
			map.put("hinId", hinId);
			map.put("visitId", visitId);
			map.put("tempLateName", tempLateName);
		    return new ModelAndView(jsp, "map", map);
			
		}
	 
		public ModelAndView showOpdLiteJsp(HttpServletRequest request, HttpServletResponse response) {

		    HttpSession session = request.getSession(); 
		    Map<String, Object> map = new HashMap<String, Object>();
		    Map<String, Object> map2 = new HashMap<String, Object>();
		    Map<String, Object> map3 = new HashMap<String, Object>();
		    Map<String, Object> investigatonMap;
		    List<Visit> visitTokenList = new ArrayList<Visit>();
		    List<Object[]> fixedInvestigationList;
		    List<MasDepartment> masDepartmentList = null;
		    String loggedInDeptName =  null;
		    int visitId =0;
		    int districtId=0;
		    int hospitalId=0;
		    int hospitalTypeId = 0;
		    String fromTempate="opConsultationLite";
		    map.put("fromTempate", fromTempate);
		    if(session.getAttribute("districtId")!=null){
		    	districtId = (Integer) session.getAttribute("districtId");
		        map.put("districtId", districtId);
		       }
		    if(session.getAttribute("hospitalTypeId")!=null){
		    	hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
		        map.put("hospitalTypeId", hospitalTypeId);
		       }
		    
		    if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				map.put("hospitalId", hospitalId);
			}
		    if(request.getParameter("visitId")!=null){
		      visitId =Integer.parseInt(request.getParameter("visitId"));
		      map.put("visitId", visitId);
		    }
		    int deptId =0;
		    if(session.getAttribute("deptId")!=null){
		     deptId = (Integer) session.getAttribute("deptId");
		     map.put("deptId", deptId);
		    }
		    int empId =0;
		    if(session.getAttribute("userId")!=null){
		      empId =(Integer) session.getAttribute("userId");
		      map.put("docId", empId);
		      map.put("userId", empId);
		    }
		    int empDeptId =0;
		    if(session.getAttribute("empDeptId")!=null){
		    	empDeptId =(Integer) session.getAttribute("empDeptId");
		      map.put("empDeptId", empDeptId);
		    }
		    
		    int token  =0;
		    if(request.getParameter("token")!=null){
		     String tokens=	request.getParameter("token");
		     token =Integer.parseInt(tokens.split("/")[1].trim());        
		    }
		    
		    int skip  =0;
		    if(request.getParameter("skip")!=null){
		    	if( Integer.parseInt(request.getParameter("skip"))!=0){
		    		skip= Integer.parseInt(request.getParameter("skip"));
		        	map.put("skip", skip);
		    	}
		    }
		    if(request.getParameter("nextFlag")!=null){
		    	if( Integer.parseInt(request.getParameter("nextFlag"))!=0){
		    		map.put("nextFlag", Integer.parseInt(request.getParameter("nextFlag")));
		    	}
		    }
		    
		    if(request.getParameter("skipped")!=null){
		    	map.put("skipped", request.getParameter("skipped"));
		    }
		    
		    if(request.getParameter("searchFlag")!=null){
		    	map.put("searchFlag", request.getParameter("searchFlag"));
		    }
		    
		    map = opdHandlerService.getPatientDetails(map);
			List patientDataList = (List) map.get("patientDataList");
		    List<MasDiet> dietList =(List)map.get("dietDataList");
		    List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
		    storeBrandList = (List)map.get("storeBrandList");
		    
		   if(map.get("masDepartmentList")!=null){
		    	masDepartmentList = (List<MasDepartment>) map.get("masDepartmentList");
		    	if(masDepartmentList.size()>0){
		    		loggedInDeptName = 	masDepartmentList.get(0).getDepartmentName();
		    	}
		    }
		    
		    if(patientDataList!=null && patientDataList.size()>0){
		    	Visit visit = (Visit) patientDataList.get(0);
			    int visitNo = visit.getVisitNo();
			    int hinId = visit.getHin().getId();
			    map.put("visitNo", visitNo);
			    map.put("hinId", hinId);
			    map.put("token", token);
			    map = opdHandlerService.getOPDDetails(map);
		    }
		    if(map.get("patientStatus")!=null && (Boolean)map.get("patientStatus")==true){
		    	ServletContext context=getServletContext(); 
		    	Map contextMap=new HashMap(); 
		    	contextMap.put("uhidNum", map.get("uhidNum"));
		    	contextMap.put("patientStatus", map.get("patientStatus"));
		    	contextMap.put("visitId", map.get("visitId"));
		    	contextMap.put("deptId", map.get("deptId"));
		    	contextMap.put("hospitalId", map.get("hospitalId"));
		    	
		    	contextMap.put("token", map.get("token"));
		    	contextMap.put("pvisitDate", map.get("pvisitDate"));
		    	contextMap.put("districtId", map.get("districtId"));
		    	contextMap.put("docId", map.get("docId"));
		    	  
			    context.setAttribute("contextMap", contextMap);
		    }
		    	
		    if(map.get("openStatus")!=null && (Boolean)map.get("openStatus"))
		   	{
		    	map.put("opClinicalWaitinList", true);
		   			map = opdHandlerService.getWaitingPatientList(map);
		   			map.put("openMsg", "Record already opened. Please try again after 5 Minutes.");
		   			String openMsg= "Case Sheet already opened. Please try again after 5 Minutes.";
		   			try {
		   				LOGGER.info("OP Lite Screen -Case sheet already opened with in 5 Min");
						response.sendRedirect("/hms/hms/opd?method=showNewOPWaitingList&openMsg="+openMsg);
					} catch (IOException e) {
						e.printStackTrace();
					}
		   			jsp = "op_clinical_waiting_list.jsp";
		   			map.put("contentJsp", jsp);
		   			map.put("title", title);
		   			return new ModelAndView("index", "map", map);
		   	}
		      map = opdHandlerService.showDepartmentSpeciality(map);
		      if(request.getParameter("recall")!=null){
		        	map.put("recall", request.getParameter("recall"));
		        }
		      opdHandlerService.displayCurrentPatientToken(map);
		      
		      investigatonMap = opdHandlerService.getFixedInvestigations();
			    
			  fixedInvestigationList = (List<Object[]>) investigatonMap.get("fixedInvestigationList");
		      
			  map.put("patientDataList", patientDataList);
		      map.put("dietDataList", dietList);
		      map.put("storeBrandList", storeBrandList);
		      if(patientDataList!=null && patientDataList.size()==0 && skip==1){
		      	try{
		      		response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList");
		      	}catch(Exception e){
		      		e.printStackTrace();
		      	}
		      }
		      //added by govind 20-01-2017
		      String orderNo="";
		      int OrderId=0;
		      Box box = HMSUtil.getBox(request);
		      if(patientDataList.size()>0){
		    	Visit visit=(Visit)patientDataList.get(0);
				box.put("visitId", visit.getId());
				box.put("hinId", visit.getHin().getId());

				map2 = opdHandlerService.showPatientLabResult(box);
				if(map2.get("orderNo")!=null){
					orderNo=map2.get("orderNo").toString();
				}
				if(map2.get("OrderId")!=null){
					OrderId=(Integer)map2.get("OrderId");
				}
		      }
		      map.put("orderNo", orderNo);
		      map.put("OrderId", OrderId);
		      //added by govind 20-01-2017 end
		      if(patientDataList!=null && patientDataList.size()>0){
		    	Visit visit = (Visit) patientDataList.get(0);
			    box.put("hinId", visit.getHin().getId());
			    map3 = opdHandlerService.getClinicalSummaryDetail(box);
		    }
		      	List<Object[]>previousDetailList = new ArrayList<Object[]>();
				List<Object[]>previousPrescriptionList = new ArrayList<Object[]>();
				List<Object[]>previousInvestigationList = new ArrayList<Object[]>();
				List<Object[]>previousDiagnosisList = new ArrayList<Object[]>();
				List<Object[]>previousProcedureList = new ArrayList<Object[]>();
				
				if(map3.get("previousDetailList") != null){
					previousDetailList =(List)map3.get("previousDetailList");
					 map.put("previousDetailList", previousDetailList);
				}
				if(map3.get("previousPrescriptionList") != null){
					previousPrescriptionList =(List)map3.get("previousPrescriptionList");
					 map.put("previousPrescriptionList", previousPrescriptionList);
				}
				if(map3.get("previousInvestigationList") != null){
					previousInvestigationList =(List)map3.get("previousInvestigationList");
					 map.put("previousInvestigationList", previousInvestigationList);
				}
				if(map3.get("previousDiagnosisList") != null){
					previousDiagnosisList =(List)map3.get("previousDiagnosisList");
					 map.put("previousDiagnosisList", previousDiagnosisList);
				}
				if(map3.get("previousProcedureList") != null){
					previousProcedureList =(List)map3.get("previousProcedureList");
					 map.put("previousProcedureList", previousProcedureList);
				}
			    map.put("patientDataList", patientDataList);
			    map.put("dietDataList", dietList);
			    map.put("storeBrandList", storeBrandList);
			    map.put("fixedInvestigationList", fixedInvestigationList);
			      
		      
		      String jsp = "opLite";
		      jsp += ".jsp";
		      title = "Patient Details";
		      map.put("deptId", deptId);
		      map.put("contentJsp", jsp);
		      map.put("title", title);
		      map.put("loggedInDeptName", loggedInDeptName);
		      return new ModelAndView("index", "map", map);
		}	
		
 
		//Added by swarup 02-12-2017
		public ModelAndView showFamilyPlanningGynecologyJsp(HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> famPlanGynMap = new HashMap<String, Object>();	
		List<Visit> patientList = new ArrayList<Visit>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		HttpSession session = request.getSession(); 	
		int hinId = 0;
		int visitId=0;
		String patientName = null;
		int hospitalId=0;
		
		 if(session.getAttribute(HOSPITAL_ID)!=null){
				hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
				famPlanGynMap.put("hospitalId", hospitalId);
				 
		}
		 
		/*if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
			 patientName = request.getParameter("patientName");
			 famPlanGynMap.put("patientName", patientName);
		}*/
		
		if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
			hinId = Integer.parseInt(request.getParameter("hinId"));
			
		}
		if(request.getParameter("visitId") != null){
			visitId = Integer.parseInt(request.getParameter("visitId"));	
		}
		
		/*if(map.get("doctorList") != null){
			doctorList = (List)map.get("doctorList");
			 
		}
		
		if(doctorList.size()>0){
			map.put("doctorList", doctorList);
		}
		*/
		/*if(map.get("patientList") != null){
			patientList = (List)map.get("patientList");
			 
		}
		
		if(patientList.size()>0){
			map.put("patientList", patientList);
		}*/
		 
		//famPlanGynMap.put("patientList",patientList);
		famPlanGynMap.put("doctorList",doctorList);
		famPlanGynMap.put("patientName", patientName);
		famPlanGynMap.put("visitId", visitId);
		famPlanGynMap.put("hinId", hinId);
		map=opdHandlerService.showFamilyPlanningGynecologyJsp(famPlanGynMap);	
		
		String jsp = "familyPlanningGynecology";
		map.put("contentJsp", jsp);
		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
		}
		
public void checkForBlockedMedicine(HttpServletRequest request,HttpServletResponse response) throws IOException{
	
	Map<String,Object> map=new HashMap<String,Object>();
	Map<String,Object> dataMap=new HashMap<String,Object>();
	
	String medicineName="";
	
	if(request.getParameter("val")!=null){
		medicineName=request.getParameter("val");
	}
	int visitId=0;
	if(request.getParameter("visitId")!=null){
		visitId=Integer.parseInt(request.getParameter("visitId"));
	}
	dataMap.put("medicineName", medicineName);
	dataMap.put("visitId", visitId);
	map=opdHandlerService.checkForBlockedMedicine(dataMap);
	
	Gson gsonObj = new Gson();
	String jsonResponse = gsonObj.toJson(map);
	PrintWriter out=response.getWriter();
	out.print(jsonResponse);
	
	
}

public void unBlockMedicine(HttpServletRequest request,HttpServletResponse response){
	int medicineTableId=0;
	if(request.getParameter("medicineTableId")!=null){
		medicineTableId=Integer.parseInt(request.getParameter("medicineTableId"));
		opdHandlerService.unBlockMedicine(medicineTableId);
		
	}
}
	 
	


@SuppressWarnings("unchecked")
public ModelAndView showGeneralPsychiatricCaseRecord(HttpServletRequest request,
		HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	Map<String, Object> map = new HashMap<String, Object>();
	int hinId = 0;
	if(request.getParameter("hinId") != null && !request.getParameter("hinId").equals("")){
		hinId = Integer.parseInt(request.getParameter("hinId"));
		box.put("hinId",hinId);
	}	
	int visitId=0;
	
	if(request.getParameter("visitId")!= null){
		visitId = Integer.parseInt(request.getParameter("visitId"));
		box.put("visitId",visitId);
	}
	map = opdHandlerService.showGeneralPsychiatricCaseRecord(box); 
	jsp = "generalPsychiatricCaseRecord";
	map.put("contentJsp", jsp);
	map.put("title", title);
	map.put("hinId", hinId);
	return new ModelAndView(jsp, "map", map);
}

public ModelAndView getLabInvestigationTemplateDemotology(HttpServletRequest request,HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();
	try{
		session=request.getSession();
		Integer hospitalId=(Integer) session.getAttribute(HOSPITAL_ID);
		Integer userId=(Integer) session.getAttribute(USER_ID);
		Integer deptId=(Integer) session.getAttribute(DEPT_ID);
		HttpSession session = request.getSession();
		Box box=HMSUtil.getBox(request);
		String templateName=request.getParameter("templateName");
		box.put(HOSPITAL_ID, hospitalId);
		box.put(USER_ID, userId);
		box.put(DEPT_ID, deptId);
		map.put("hospitalId", hospitalId);
		map=opdHandlerService.getLabInvestigationTemplate(box);
		map.put("hinId", Integer.parseInt(box.get("hinId")));
		map.put("departmentCode", box.get("departmentCode"));
		map.put("templateName", templateName);
		}
		catch(Exception e){
			e.printStackTrace();
		}
	    jsp = "opd_responseForLabInvestigationTemplateDemotology";
	    map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
}

public ModelAndView showOutSideLabResultEntry(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> requestParametersMap = new HashMap<String, Object>();			
	int hinId = 0;
	if(request.getParameterValues("hinId") != null){
		hinId = Integer.parseInt(request.getParameter("hinId"));
	}
	requestParametersMap.put("hinId", hinId);
	map=opdHandlerService.showOutSideLabResultEntry(requestParametersMap);	
	jsp="external_lab_report_dermotology";
	return new ModelAndView(jsp, "map", map);
}

	public ModelAndView showPatientDetailOPDLite(HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> map2 = new HashMap<String, Object>();
		Map<String, Object> map3 = new HashMap<String, Object>();
		Map<String, Object> map4 = new HashMap<String, Object>();
		List<Visit> visitTokenList = new ArrayList<Visit>();
		List<MasDepartment> masDepartmentList = null;
		String loggedInDeptName = null;
		int visitId = 0;
		int districtId = 0;
		int hospitalId = 0;
		int hospitalTypeId = 0;
		if (session.getAttribute("districtId") != null) {
			districtId = (Integer) session.getAttribute("districtId");
			map.put("districtId", districtId);
		}
		if (session.getAttribute("hospitalTypeId") != null) {
			hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
			map.put("hospitalTypeId", hospitalTypeId);
		}

		if (session.getAttribute(HOSPITAL_ID) != null) {
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
		}
		if (request.getParameter("visitId") != null) {
			visitId = Integer.parseInt(request.getParameter("visitId"));
			map.put("visitId", visitId);
		}
		int deptId = 0;
		if (session.getAttribute("deptId") != null) {
			deptId = (Integer) session.getAttribute("deptId");
			map.put("deptId", deptId);
		}
		int empId = 0;
		if (session.getAttribute("userId") != null) {
			empId = (Integer) session.getAttribute("userId");
			map.put("docId", empId);
			map.put("userId", empId);
		}
		int empDeptId = 0;
		if (session.getAttribute("empDeptId") != null) {
			empDeptId = (Integer) session.getAttribute("empDeptId");
			map.put("empDeptId", empDeptId);
		}

		int token = 0;
		if (request.getParameter("token") != null) {
			String tokens = request.getParameter("token");
			token = Integer.parseInt(tokens.split("/")[1].trim());
		}

		int skip = 0;
		if (request.getParameter("skip") != null) {
			if (Integer.parseInt(request.getParameter("skip")) != 0) {
				skip = Integer.parseInt(request.getParameter("skip"));
				map.put("skip", skip);
			}
		}

		map = opdHandlerService.getPatientDetails(map);
		String departmentCode = null;
		List patientDataList = (List) map.get("patientDataList");
		List<MasDiet> dietList = (List) map.get("dietDataList");
		List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
		storeBrandList = (List) map.get("storeBrandList");

		if (map.get("masDepartmentList") != null) {
			masDepartmentList = (List<MasDepartment>) map
					.get("masDepartmentList");
			if (masDepartmentList.size() > 0) {
				loggedInDeptName = masDepartmentList.get(0).getDepartmentName();
				departmentCode = masDepartmentList.get(0).getDepartmentCode();
			}
		}

		if (patientDataList != null && patientDataList.size() > 0) {
			Visit visit = (Visit) patientDataList.get(0);
			int visitNo = visit.getVisitNo();
			int hinId = visit.getHin().getId();
			map.put("visitNo", visitNo);
			map.put("hinId", hinId);
			map.put("token", token);
			map = opdHandlerService.getOPDDetails(map);
		}
		if (map.get("patientStatus") != null
				&& (Boolean) map.get("patientStatus") == true) {
			ServletContext context = getServletContext();
			Map contextMap = new HashMap();
			contextMap.put("uhidNum", map.get("uhidNum"));
			contextMap.put("patientStatus", map.get("patientStatus"));
			contextMap.put("visitId", map.get("visitId"));
			contextMap.put("deptId", map.get("deptId"));
			contextMap.put("hospitalId", map.get("hospitalId"));

			contextMap.put("token", map.get("token"));
			contextMap.put("pvisitDate", map.get("pvisitDate"));
			contextMap.put("districtId", map.get("districtId"));
			contextMap.put("docId", map.get("docId"));

			context.setAttribute("contextMap", contextMap);
		}

		if (map.get("openStatus") != null && (Boolean) map.get("openStatus")) {
			map.put("opClinicalWaitinList", true);
			map = opdHandlerService.getWaitingPatientList(map);
			map.put("openMsg",
					"Record already opened. Please try again after 5 Minuts.");
			jsp = "op_clinical_waiting_list.jsp";
			map.put("contentJsp", jsp);
			map.put("title", title);
			return new ModelAndView("index", "map", map);
		}
		map = opdHandlerService.showDepartmentSpeciality(map);
		opdHandlerService.displayCurrentPatientToken(map);
		map.put("patientDataList", patientDataList);
		map.put("dietDataList", dietList);
		map.put("storeBrandList", storeBrandList);
		if (patientDataList != null && patientDataList.size() == 0 && skip == 1) {
			try {
				response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// added by govind 20-01-2017
		String orderNo = "";
		int OrderId = 0;
		Box box = HMSUtil.getBox(request);
		if (patientDataList.size() > 0) {
			Visit visit = (Visit) patientDataList.get(0);
			box.put("visitId", visit.getId());
			box.put("hinId", visit.getHin().getId());
			box.put("deptId", visit.getDepartment().getId());
			
			map2 = opdHandlerService.showPatientLabResult(box);
			if (map2.get("orderNo") != null) {
				orderNo = map2.get("orderNo").toString();
			}
			if (map2.get("OrderId") != null) {
				OrderId = (Integer) map2.get("OrderId");
			}
		}
		map.put("orderNo", orderNo);
		map.put("OrderId", OrderId);
		// added by govind 20-01-2017 end
		if (patientDataList != null && patientDataList.size() > 0) {
			Visit visit = (Visit) patientDataList.get(0);
			box.put("hinId", visit.getHin().getId());
			map3 = opdHandlerService.getClinicalSummaryDetail(box);
			map4 = opdHandlerService.showDermatologyGeneralProformaJsp(box);
			
		}
		List<Object[]> previousDetailList = new ArrayList<Object[]>();
		List<Object[]> previousPrescriptionList = new ArrayList<Object[]>();
		List<Object[]> previousInvestigationList = new ArrayList<Object[]>();
		List<Object[]> previousDiagnosisList = new ArrayList<Object[]>();
		List<Object[]> previousProcedureList = new ArrayList<Object[]>();
		List<Object[]> generalProformaHeadersList = new ArrayList<Object[]>();
		List<Object[]> firstLesionList = new ArrayList<Object[]>();
		List<Object[]> secondLesionList = new ArrayList<Object[]>();
		List<Object[]> findingLesionList = new ArrayList<Object[]>();

		if (map3.get("previousDetailList") != null) {
			previousDetailList = (List) map3.get("previousDetailList");
			map.put("previousDetailList", previousDetailList);
		}
		if (map3.get("previousPrescriptionList") != null) {
			previousPrescriptionList = (List) map3
					.get("previousPrescriptionList");
			map.put("previousPrescriptionList", previousPrescriptionList);
		}
		if (map3.get("previousInvestigationList") != null) {
			previousInvestigationList = (List) map3
					.get("previousInvestigationList");
			map.put("previousInvestigationList", previousInvestigationList);
		}
		if (map3.get("previousDiagnosisList") != null) {
			previousDiagnosisList = (List) map3.get("previousDiagnosisList");
			map.put("previousDiagnosisList", previousDiagnosisList);
		}
		if (map3.get("previousProcedureList") != null) {
			previousProcedureList = (List) map3.get("previousProcedureList");
			map.put("previousProcedureList", previousProcedureList);
		}
		if (map4.get("generalProformaHeadersList") != null) {
			generalProformaHeadersList = (List) map4
					.get("generalProformaHeadersList");
			map.put("generalProformaHeadersList", generalProformaHeadersList);
		}

		if (map4.get("firstLesionList") != null) {
			firstLesionList = (List) map4.get("firstLesionList");
			map.put("firstLesionList", firstLesionList);
		}
		if (map4.get("secondLesionList") != null) {
			secondLesionList = (List) map4.get("secondLesionList");
			map.put("secondLesionList", firstLesionList);
		}
		if (map4.get("findingLesionList") != null) {
			findingLesionList = (List) map4.get("findingLesionList");
			map.put("findingLesionList", findingLesionList);
		}
		
		
		map.put("patientDataList", patientDataList);
		map.put("dietDataList", dietList);
		map.put("storeBrandList", storeBrandList);

		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("loggedInDeptName", loggedInDeptName);

		String jsp = "knowPatientPopUp";
		return new ModelAndView(jsp, "map", map);
	}
	public Map<String, Object> getMLCFromRefered(){
		Map<String, Object> map = new HashMap<String, Object>();
		
		map = opdHandlerService.getMLCFromRefered();
		return map;
		
	}
	
	public ModelAndView htmlTemplateRpt(HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();

		String specialityTemplateName="";
		if(request.getParameter("specialityTemplateName")!= null){
			specialityTemplateName = request.getParameter("specialityTemplateName");
			mapForDS.put("specialityTemplateName",specialityTemplateName);
		}
		int visitId=0;

		if(request.getParameter("visitId")!= null){
			visitId = Integer.parseInt(request.getParameter("visitId"));
			mapForDS.put("visitId",visitId);
		}
		int hospitalId = 0;
		if(request.getParameter("hospitalId")!=null){
			hospitalId =Integer.parseInt(request.getParameter("hospitalId"));
		}else{
			hospitalId =(Integer) session.getAttribute("hospitalId");
			mapForDS.put("hospitalId",hospitalId);
		}
		map=opdHandlerService.htmlTemplateRpt(mapForDS);
		jsp = "htmlTemplateRpt";
		return new ModelAndView(jsp, "map", map);

}
	public ModelAndView showOpdDetailJsp(HttpServletRequest request, HttpServletResponse response) {

	    HttpSession session = request.getSession(); 
	    Map<String, Object> map = new HashMap<String, Object>();
	    Map<String, Object> map2 = new HashMap<String, Object>();
	    Map<String, Object> map3 = new HashMap<String, Object>();
	    Map<String, Object> investigatonMap;
	    List<Visit> visitTokenList = new ArrayList<Visit>();
	    List<Object[]> fixedInvestigationList;
	    List<MasDepartment> masDepartmentList = null;
	    String loggedInDeptName =  null;
	    int visitId =0;
	    int districtId=0;
	    int hospitalId=0;
	    int hospitalTypeId = 0;
	    String fromTempate="opConsultationDetailed";
	    map.put("fromTempate", fromTempate);
	    if(session.getAttribute("districtId")!=null){
	    	districtId = (Integer) session.getAttribute("districtId");
	        map.put("districtId", districtId);
	       }
	    if(session.getAttribute("hospitalTypeId")!=null){
	    	hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
	        map.put("hospitalTypeId", hospitalTypeId);
	       }
	    
	    if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
		}
	    if(request.getParameter("visitId")!=null){
	      visitId =Integer.parseInt(request.getParameter("visitId"));
	      map.put("visitId", visitId);
	    }
	    int deptId =0;
	    if(session.getAttribute("deptId")!=null){
	     deptId = (Integer) session.getAttribute("deptId");
	     map.put("deptId", deptId);
	    }
	    int empId =0;
	    if(session.getAttribute("userId")!=null){
	      empId =(Integer) session.getAttribute("userId");
	      map.put("docId", empId);
	      map.put("userId", empId);
	    }
	    int empDeptId =0;
	    if(session.getAttribute("empDeptId")!=null){
	    	empDeptId =(Integer) session.getAttribute("empDeptId");
	      map.put("empDeptId", empDeptId);
	    }
	    
	    int token  =0;
	    if(request.getParameter("token")!=null){
	     String tokens=	request.getParameter("token");
	     token =Integer.parseInt(tokens.split("/")[1].trim());        
	    }
	    
	    int skip  =0;
	    if(request.getParameter("skip")!=null){
	    	if( Integer.parseInt(request.getParameter("skip"))!=0){
	    		skip= Integer.parseInt(request.getParameter("skip"));
	        	map.put("skip", skip);
	    	}
	    }
	    
	    if(request.getParameter("nextFlag")!=null){
	    	if( Integer.parseInt(request.getParameter("nextFlag"))!=0){
	    		map.put("nextFlag", Integer.parseInt(request.getParameter("nextFlag")));
	    	}
	    }
	    if(request.getParameter("skipped")!=null){
	    	map.put("skipped", request.getParameter("skipped"));
	    }
	    
	    if(request.getParameter("searchFlag")!=null){
	    	map.put("searchFlag", request.getParameter("searchFlag"));
	    }
	    map = opdHandlerService.getPatientDetails(map);
		List patientDataList = (List) map.get("patientDataList");
	    List<MasDiet> dietList =(List)map.get("dietDataList");
	    List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
	    storeBrandList = (List)map.get("storeBrandList");
	    
	   if(map.get("masDepartmentList")!=null){
	    	masDepartmentList = (List<MasDepartment>) map.get("masDepartmentList");
	    	if(masDepartmentList.size()>0){
	    		loggedInDeptName = 	masDepartmentList.get(0).getDepartmentName();
	    	}
	    }
	    
	    if(patientDataList!=null && patientDataList.size()>0){
	    	Visit visit = (Visit) patientDataList.get(0);
		    int visitNo = visit.getVisitNo();
		    int hinId = visit.getHin().getId();
		    map.put("visitNo", visitNo);
		    map.put("hinId", hinId);
		    map.put("token", token);
		    map = opdHandlerService.getOPDDetails(map);
	    }
	    if(map.get("patientStatus")!=null && (Boolean)map.get("patientStatus")==true){
	    	ServletContext context=getServletContext(); 
	    	Map contextMap=new HashMap(); 
	    	contextMap.put("uhidNum", map.get("uhidNum"));
	    	contextMap.put("patientStatus", map.get("patientStatus"));
	    	contextMap.put("visitId", map.get("visitId"));
	    	contextMap.put("deptId", map.get("deptId"));
	    	contextMap.put("hospitalId", map.get("hospitalId"));
	    	
	    	contextMap.put("token", map.get("token"));
	    	contextMap.put("pvisitDate", map.get("pvisitDate"));
	    	contextMap.put("districtId", map.get("districtId"));
	    	contextMap.put("docId", map.get("docId"));
	    	  
		    context.setAttribute("contextMap", contextMap);
	    }
	    	
	    if(map.get("openStatus")!=null && (Boolean)map.get("openStatus"))
	   	{
	    	map.put("opClinicalWaitinList", true);
	   			map = opdHandlerService.getWaitingPatientList(map);
	   			map.put("openMsg", "Record already opened. Please try again after 5 Minuts.");
	   			String openMsg= "Case Sheet already opened. Please try again after 5 Minutes.";
	   			try {
	   				LOGGER.info("OP Detail Case sheet already opened with in 5 Min");
					response.sendRedirect("/hms/hms/opd?method=showNewOPDetailWaitingList&openMsg="+openMsg);
				} catch (IOException e) {
					
					e.printStackTrace();
				}
	   			jsp = "op_clinical_waiting_list.jsp";
	   			map.put("contentJsp", jsp);
	   			map.put("title", title);
	   			return new ModelAndView("index", "map", map);
	   	}
	      map = opdHandlerService.showDepartmentSpeciality(map);
	      if(request.getParameter("recall")!=null){
	        	map.put("recall", request.getParameter("recall"));
	        }
	      opdHandlerService.displayCurrentPatientToken(map);
	      
	      investigatonMap = opdHandlerService.getFixedInvestigations();
		    
		  fixedInvestigationList = (List<Object[]>) investigatonMap.get("fixedInvestigationList");
	      
		  map.put("patientDataList", patientDataList);
	      map.put("dietDataList", dietList);
	      map.put("storeBrandList", storeBrandList);
	      if(patientDataList!=null && patientDataList.size()==0 && skip==1){
	      	try{
	      		response.sendRedirect("/hms/hms/opd?method=getOPClinicalWaitingList");
	      	}catch(Exception e){
	      		e.printStackTrace();
	      	}
	      }
	      //added by govind 20-01-2017
	      String orderNo="";
	      int OrderId=0;
	      Box box = HMSUtil.getBox(request);
	      if(patientDataList.size()>0){
	    	Visit visit=(Visit)patientDataList.get(0);
			box.put("visitId", visit.getId());
			box.put("hinId", visit.getHin().getId());

			map2 = opdHandlerService.showPatientLabResult(box);
			if(map2.get("orderNo")!=null){
				orderNo=map2.get("orderNo").toString();
			}
			if(map2.get("OrderId")!=null){
				OrderId=(Integer)map2.get("OrderId");
			}
	      }
	      map.put("orderNo", orderNo);
	      map.put("OrderId", OrderId);
	      //added by govind 20-01-2017 end
	      if(patientDataList!=null && patientDataList.size()>0){
	    	Visit visit = (Visit) patientDataList.get(0);
		    box.put("hinId", visit.getHin().getId());
		    map3 = opdHandlerService.getClinicalSummaryDetail(box);
	    }
	      	List<Object[]>previousDetailList = new ArrayList<Object[]>();
			List<Object[]>previousPrescriptionList = new ArrayList<Object[]>();
			List<Object[]>previousInvestigationList = new ArrayList<Object[]>();
			List<Object[]>previousDiagnosisList = new ArrayList<Object[]>();
			List<Object[]>previousProcedureList = new ArrayList<Object[]>();
			
			if(map3.get("previousDetailList") != null){
				previousDetailList =(List)map3.get("previousDetailList");
				 map.put("previousDetailList", previousDetailList);
			}
			if(map3.get("previousPrescriptionList") != null){
				previousPrescriptionList =(List)map3.get("previousPrescriptionList");
				 map.put("previousPrescriptionList", previousPrescriptionList);
			}
			if(map3.get("previousInvestigationList") != null){
				previousInvestigationList =(List)map3.get("previousInvestigationList");
				 map.put("previousInvestigationList", previousInvestigationList);
			}
			if(map3.get("previousDiagnosisList") != null){
				previousDiagnosisList =(List)map3.get("previousDiagnosisList");
				 map.put("previousDiagnosisList", previousDiagnosisList);
			}
			if(map3.get("previousProcedureList") != null){
				previousProcedureList =(List)map3.get("previousProcedureList");
				 map.put("previousProcedureList", previousProcedureList);
			}
		    map.put("patientDataList", patientDataList);
		    map.put("dietDataList", dietList);
		    map.put("storeBrandList", storeBrandList);
		    map.put("fixedInvestigationList", fixedInvestigationList);
		      
	      
	      String jsp = "opDetailed";
	      jsp += ".jsp";
	      title = "Patient Details";
	      map.put("deptId", deptId);
	      map.put("contentJsp", jsp);
	      map.put("title", title);
	      map.put("loggedInDeptName", loggedInDeptName);
	      return new ModelAndView("index", "map", map);
	}
	
	public ModelAndView getOPClinicalWaitingLists(HttpServletRequest request,	HttpServletResponse response) {
		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		
		int tokeNo=0;
		String patientName;
		String uhid;
		int opd_DepartmentId=0;
		int hospitalId=0;
		int searchFlag=0;
		String flag="";
		mapForDS.put("forOPClinnic", true);
		if(request.getParameter("flag")!=null){
			flag=request.getParameter("flag");
			mapForDS.put("flag",flag);
		}
		if(request.getParameter("searchFlag")!=null){
			searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag",searchFlag);
		}
		
		if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo",tokeNo);
		}
		if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if(request.getParameter("uhid")!=null){
			uhid = request.getParameter("uhid");
			mapForDS.put("uhid", uhid);
			
		}
		if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		
		Integer userId=null;
		if(session.getAttribute(USER_ID)!=null){
			userId = (Integer) session.getAttribute(USER_ID);
			mapForDS.put("userId", userId);
		}
			
		
		
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
			}
		}
		
		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		
		mapForDS.put("opClinicalWaitinList", true);

		
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		String deptName =(String)map.get("deptName");
		// start added by Om tripathi 10/08/2017
				ServletContext context=getServletContext();
				Map contextMaps=null;
				contextMaps =(Map) context.getAttribute("contextMap");
				if(contextMaps!=null && contextMaps.size()>0 && contextMaps.get("patientStatus")!=null && (Boolean)contextMaps.get("patientStatus")==true){
				    if(mapForDS.get("hospitalId").equals(contextMaps.get("hospitalId")) 
				    		&& mapForDS.get("deptId").equals(contextMaps.get("deptId"))){
				    
				    	contextMaps.put("patientStatus", contextMaps.get("patientStatus"));
				    	contextMaps.put("VisitId", contextMaps.get("VisitId"));
				    	contextMaps.put("uhidNum", contextMaps.get("uhidNum"));
				    	context.setAttribute("contextMaps", contextMaps);
				    	map.put("contextMaps",contextMaps);
				    	Map mm=(Map) map.get("contextMaps");
				    }
			    }
		//end Added by Om Tripathi 10/08/2017
		session.setAttribute("deptName", deptName);
		String jsp = "op_clinical_waiting_list.jsp";
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("flag", flag);
		map.put("searchFlag", searchFlag);
		return new ModelAndView("index", "map", map);
		}
	
	public ModelAndView showNewOPDetailWaitingList(HttpServletRequest request,HttpServletResponse response) {

		int deptId = 0;
		HttpSession session = request.getSession();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		
		int tokeNo=0;
		String patientName;
		String uhid;
		int opd_DepartmentId=0;
		int hospitalId=0;
		int searchFlag=0;
		String flag="";
		String fromTempate="opConsultationDetailed";
		mapForDS.put("forOPClinnic", true);
		mapForDS.put("fromTempate", fromTempate);
		if(request.getParameter("flag")!=null){
			flag=request.getParameter("flag");
			mapForDS.put("flag",flag);
		}
		if(request.getParameter("searchFlag")!=null){
			searchFlag=Integer.parseInt(request.getParameter("searchFlag"));
			mapForDS.put("searchFlag",searchFlag);
		}
		
		if(request.getParameter("tokenNo")!=null && !request.getParameter("tokenNo").equals("") ){
			tokeNo = Integer.parseInt(request.getParameter("tokenNo"));
			mapForDS.put("tokenNo",tokeNo);
		}
		if(request.getParameter("patientName")!=null && !request.getParameter("patientName").equals("")){
			patientName = request.getParameter("patientName");
			mapForDS.put("patientName", patientName);
		}
		if(request.getParameter("uhid")!=null){
			uhid = request.getParameter("uhid");
			mapForDS.put("uhid", uhid);
			
		}
		if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
		}
		
		Integer userId=null;
		if(session.getAttribute(USER_ID)!=null){
			userId = (Integer) session.getAttribute(USER_ID);
			mapForDS.put("userId", userId);
		}
			
		
		
		if (request.getParameter("deptId") != null) {
			deptId = Integer.parseInt(request.getParameter("deptId"));
			session.setAttribute("deptId", deptId);
			mapForDS.put("deptId", deptId);
		} else {
			if(session.getAttribute("deptId")!=null){
			deptId = (Integer) session.getAttribute("deptId");
			mapForDS.put("deptId", deptId);
			}
		}
		
		String title = request.getParameter("title");
		mapForDS.put("hospitalId", hospitalId);
		
		mapForDS.put("opClinicalWaitinList", true);

		
		map = opdHandlerService.getWaitingPatientList(mapForDS);
		String deptName =(String)map.get("deptName");
				ServletContext context=getServletContext();
				Map contextMaps=null;
				contextMaps =(Map) context.getAttribute("contextMap");
				if(contextMaps!=null && contextMaps.size()>0 && contextMaps.get("patientStatus")!=null && (Boolean)contextMaps.get("patientStatus")==true){
				    if(mapForDS.get("hospitalId").equals(contextMaps.get("hospitalId")) 
				    		&& mapForDS.get("deptId").equals(contextMaps.get("deptId"))){
				    
				    	contextMaps.put("patientStatus", contextMaps.get("patientStatus"));
				    	contextMaps.put("VisitId", contextMaps.get("VisitId"));
				    	contextMaps.put("uhidNum", contextMaps.get("uhidNum"));
				    	context.setAttribute("contextMaps", contextMaps);
				    	map.put("contextMaps",contextMaps);
				    	Map mm=(Map) map.get("contextMaps");
				    }
			    }map.put("opdetail", "Y");
		session.setAttribute("deptName", deptName);
		String jsp=null;
		if(searchFlag>0){
			 jsp = "op_clinical_search_list_new_detail.jsp";
		}else{
			jsp = "op_clinical_waiting_list_new_detail.jsp";
		}
		
		title = "Waiting Patient List";
		map.put("deptId", deptId);
		map.put("opdType",request.getParameter("opdType"));
		map.put("contentJsp", jsp);
		map.put("title", title);
		map.put("flag", flag);
		map.put("searchFlag", searchFlag);
		return new ModelAndView("index", "map", map);
	
	}
	
	public ModelAndView setVisitUptoTimeOfDoctor(HttpServletRequest request,HttpServletResponse response) {
	  ModelAndView modelAndView = null;
	  String waitingListType = "";
	  Box box = HMSUtil.getBox(request);
	  if(request.getParameter("waitingListType") != null){
		  waitingListType = request.getParameter("waitingListType");
	  }
	  opdHandlerService.setVisitUptoTimeOfDoctor(box);
	  if(waitingListType.equalsIgnoreCase("opLite")){
		  modelAndView=showNewOPWaitingList(request, response);
	  }else if(waitingListType.equalsIgnoreCase("opDetail")){
		  modelAndView=showNewOPDetailWaitingList(request, response);
	  }else{
		  modelAndView = getOPClinicalWaitingList(request, response);
	  }
	  return modelAndView;
	}

	
	public ModelAndView showDrWiseWaitingQueueTokenJsp(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> mapForDS = new HashMap<String, Object>();
		HttpSession session = request.getSession();
		int hospitalId=0;
		int hospitalTypeId=0;
		int departmentId=0;
		String flag = null;
		String displayName = null; 
		String displayDepartmentTypeName = null; 

		if(request.getParameter("displayName")!=null){
			displayName = request.getParameter("displayName");
			mapForDS.put("displayName",displayName); 
		}
		
	
		
		if(request.getParameter("flag")!=null){
			flag =	request.getParameter("flag");
			mapForDS.put("flag", flag);
		}
		
				
		map = opdHandlerService.getDisplayDepartmentType(mapForDS);
		
		if(map.get("departmentTypeName")!=null){
			displayDepartmentTypeName = (String)map.get("departmentTypeName");
		
			if(displayDepartmentTypeName!=null && displayDepartmentTypeName.equalsIgnoreCase("OP Clinic")){
				
				if (map.get("hospitalId") != null) {
					hospitalId = (Integer)map.get("hospitalId");
					mapForDS.put("hospitalId", hospitalId);
					
				}
				if (map.get("hospitalTypeId") != null) {
					hospitalTypeId = (Integer)map.get("hospitalTypeId");
						
				}
				if (map.get("departmentId") != null) {
					departmentId = (Integer)map.get("departmentId");
						
				}
					
				map = opdHandlerService.getDrWiseWaitingQueue(mapForDS);
			} 
		}
		jsp = "tokenDisplayDrWise";
		
		map.put("hospitalId", hospitalId);
		map.put("hospitalTypeId", hospitalTypeId);
		map.put("departmentId", departmentId);
		map.put("flag", flag);
		map.put("displayName",displayName); 
		title = "Token Number";
		map.put("contentJsp", jsp);

		map.put("title", title);
		return new ModelAndView(jsp, "map", map);
	}

	
	public ModelAndView storePrevPregnancyDetatls(HttpServletRequest request,HttpServletResponse response){
		Map<String, Object> map = new HashMap<String, Object>();
		Box box=HMSUtil.getBox(request);
		String departmentCode =null;
		String opdType = box.get("opdType");
		try{
			HttpSession session = request.getSession();
			int counter = box.getInt("counter");
			int total = box.getInt("totalPreDt");
			int prevTotal = box.getInt("prevTotal");
			boolean existsCounter = false;
			Map<Integer, OpdAntenatalCardPregnancy> prevPregnancyDt = null;
			if(session.getAttribute("prevPregnancyDt")!=null && total!=0){
				prevPregnancyDt = (Map<Integer, OpdAntenatalCardPregnancy>) session.getAttribute("prevPregnancyDt");
			   if(prevPregnancyDt.get(counter)!=null)
				   existsCounter=true;
		    }
			else
				prevPregnancyDt = new HashMap<Integer, OpdAntenatalCardPregnancy>();
			if(!box.getString("displayOnly").equals("y")){
			OpdAntenatalCardPregnancy oacp = new OpdAntenatalCardPregnancy();
			oacp.setAge(box.getInt("ageUnit"));
		
			String[] pregnancyOutcomeArray = null;
			if (request.getParameterValues("snomedList") != null) {
				pregnancyOutcomeArray = (String[]) request.getParameterValues("snomedList");
			}
			
			oacp.setPregnancyOutcome(box.get ("pregnancyOutcome"));
			
			
			
		//	if(box.get("pregnancyOutcome").equalsIgnoreCase("Pre Term")){
				if(box.get("pregnancyOutcome").contains("Pre Term")){
				oacp.setPregnancyOutcomePreTermValue(box.get("preTermValue"));
			}
			oacp.setPlaceDelivery(box.get("placeOfDelivery"));
			if(box.get("placeOfDelivery").equalsIgnoreCase("Others")){
				oacp.setPlaceOfDeliveryOthersValue(box.get("placeOfDeliveryOthers"));
			}
			oacp.setNoOfPregnancy(box.getInt("noOfPregnancy"));
			oacp.setDeliveryOutcome(box.get("deliveryOutcome"));
			oacp.setSex(box.get("sex"));
			oacp.setPreviousGestationalAge(box.get("previousGestationalAge"));
			oacp.setBirthWeight(box.getDouble("birthWeight"));
			oacp.setAntenatal(box.get("antenatal"));
			oacp.setIntraPartum( box.get("intraPartum"));
			oacp.setPostPartum(box.get("postPartum"));
			oacp.setBloodTransfusion(box.get("BloodTransfusion"));
			oacp.setRemarks(box.get("remarkforPrePreg"));
			prevPregnancyDt.put(counter,oacp);
			counter++;
			}
			
			     map = opdHandlerService.getmasAdministrativeSexList();
     			session.setAttribute("prevPregnancyDt", prevPregnancyDt);
				map.put("existsCounter", existsCounter);
				map.put("counter", counter);
				map.put("displayOnly", box.getString("displayOnly"));
				map.put("prevPregnancyDt", prevPregnancyDt);
				map.put("total", total);
				map.put("prevTotal",prevTotal);
				
				for (Map.Entry<Integer, OpdAntenatalCardPregnancy> prevPreg : prevPregnancyDt.entrySet())
				{
					OpdAntenatalCardPregnancy val = prevPreg.getValue();
				}
			}
			catch(Exception e){
				e.printStackTrace();
			}
		
		
			jsp = "opd_responseForPreviousPregnancy";
		    
		    map.put("contentJsp", jsp);
		return new ModelAndView(jsp, "map", map);
	}
	

public ModelAndView trimesterExamPopup(HttpServletRequest request,HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();
	try{
		   HttpSession session = request.getSession();
			Box box=HMSUtil.getBox(request);

			map.put("val",request.getParameter("val"));
			map.put("fieldId",request.getParameter("fieldId"));
			map.put("fieldText",request.getParameter("fieldText"));
			map.put("counter",box.getInt("counter"));
			map.put("trimesterNo",request.getParameter("trimesterNo"));
			
		}
	catch(Exception e){
			e.printStackTrace();
		}
		jsp = "opd_responseForTrimesterExamination";
	    
	    map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
 }


public ModelAndView caseSheetHTML(HttpServletRequest request,HttpServletResponse response){
	 HttpSession session = request.getSession(); 
	    Map<String, Object> map = new HashMap<String, Object>();
	    Map<String, Object> map2 = new HashMap<String, Object>();
	    Map<String, Object> map3 = new HashMap<String, Object>();
	    Map<String, Object> map4 = new HashMap<String, Object>();
	    Map<String, Object> map5 = new HashMap<String, Object>();
	    Map<String, Object> map6 = new HashMap<String, Object>();
	    Map<String, Object> map7 = new HashMap<String, Object>();
	    Map<String, Object> map8 = new HashMap<String, Object>();
	    
	    List<Visit> visitTokenList = new ArrayList<Visit>();
	    List<MasDepartment> masDepartmentList = null;
	    String loggedInDeptName =  null;
	    List<OpdPatientHistory> preOpdPatientHistoryList = null;
	    int visitId =0;
	    int districtId=0;
	    int hospitalId=0;
	    int hospitalTypeId = 0;
	    if(session.getAttribute("districtId")!=null){
	    	districtId = (Integer) session.getAttribute("districtId");
	        map.put("districtId", districtId);
	       }
	    if(session.getAttribute("hospitalTypeId")!=null){
	    	hospitalTypeId = (Integer) session.getAttribute("hospitalTypeId");
	        map.put("hospitalTypeId", hospitalTypeId);
	       }
	    
	    if(session.getAttribute(HOSPITAL_ID)!=null){
			hospitalId = (Integer) session.getAttribute(HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
		}
	    if(request.getParameter("visitId")!=null){
	      visitId =Integer.parseInt(request.getParameter("visitId"));
	      map.put("visitId", visitId);
	    }
	    int deptId =0;
	    if(session.getAttribute("deptId")!=null){
	     deptId = (Integer) session.getAttribute("deptId");
	     map.put("deptId", deptId);
	    }
	    int empId =0;
	    if(session.getAttribute("userId")!=null){
	      empId =(Integer) session.getAttribute("userId");
	      map.put("docId", empId);
	      map.put("userId", empId);
	    }
	    int empDeptId =0;
	    if(session.getAttribute("empDeptId")!=null){
	    	empDeptId =(Integer) session.getAttribute("empDeptId");
	      map.put("empDeptId", empDeptId);
	    }
	    
	    int token  =0;
	    if(request.getParameter("token")!=null){
	     String tokens=	request.getParameter("token");
	     token =Integer.parseInt(tokens.split("/")[1].trim());        
	    }
	    
	    int skip  =0;
	    if(request.getParameter("skip")!=null){
	    	if( Integer.parseInt(request.getParameter("skip"))!=0){
	    		skip= Integer.parseInt(request.getParameter("skip"));
	        	map.put("skip", skip);
	    	}
	    }
	    
	    if(request.getParameter("skipped")!=null){
	    	map.put("skipped", request.getParameter("skipped"));
	    }
	    
	    if(request.getParameter("searchFlag")!=null){
	    	map.put("searchFlag", request.getParameter("searchFlag"));
	    }
	    
	    
	    
	    map = opdHandlerService.getPatientDetails(map);
	    
	jsp = "opd_caseshhetHTMLFormat";
	    
	    map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
 }

public ModelAndView printBMIChart(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> parameters = new HashMap<String, Object>();
	Map<String, Object> requestParametersMap = new HashMap<String, Object>();
	
	int hinId = 0;
	if(request.getParameter("hinId") != null){
		hinId = Integer.parseInt(request.getParameter("hinId"));
		requestParametersMap.put("hinId", hinId);
	}
	parameters = opdHandlerService.printBMIChart(requestParametersMap);
	parameters.put("hinId", hinId);
	HMSUtil.generateReport("pediatric_chart", parameters,
			(Connection) parameters.get("conn"), response,
			getServletContext());

return null;
}


public ModelAndView prescriptionHTML(HttpServletRequest request,HttpServletResponse response){
    HttpSession session = request.getSession();
       Map<String, Object> map = new HashMap<String, Object>();
       Map<String, Object> requestMap = new HashMap<String, Object>();
    
 
       int visitId=0;
       String forms = "";
       if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
    	   visitId =Integer.parseInt(request.getParameter("visitId"));
       }
       requestMap.put("visitId", visitId);
       if(request.getParameter("forms")!=null && !request.getParameter("forms").equals("")) {
    	   forms = request.getParameter("forms");
       }
    
	map = opdHandlerService.getprescriptionListHTML(requestMap);
    jsp = "opd_prescription_html";
    map.put("contentJsp", jsp);
    map.put("forms", forms);
   return new ModelAndView(jsp, "map", map);

  }


public ModelAndView investigationHTML(HttpServletRequest request,HttpServletResponse response){
    HttpSession session = request.getSession();
       Map<String, Object> map = new HashMap<String, Object>();
       Map<String, Object> requestMap = new HashMap<String, Object>();
    
 
       int visitId=0;
       
       if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){

       visitId =Integer.parseInt(request.getParameter("visitId"));

}
 requestMap.put("visitId", visitId);
    
	map = opdHandlerService.getInvestigationionHTML(requestMap);
    jsp = "investigation_html";
    map.put("contentJsp", jsp);
   return new ModelAndView(jsp, "map", map);

  }

public void transferToCommonPool(HttpServletRequest request,HttpServletResponse response) throws IOException{
	
	Map<String,Object> map=new HashMap<String,Object>();
	Map<String,Object> dataMap=new HashMap<String,Object>();
	HttpSession session = request.getSession();
	Box box = HMSUtil.getBox(request);
	if (session.getAttribute("deptId") != null) {
		box.put("departmentId", (Integer) session.getAttribute("deptId"));
	}
	if (session.getAttribute("hospitalId") != null) {
		box.put("hospitalId", (Integer) session.getAttribute("hospitalId"));
	}
	if (session.getAttribute("empId") != null) {
		box.put("employeeId", (Integer) session.getAttribute("empId"));
	}
	map=opdHandlerService.transferToCommonPool(box);
	String result = (String)map.get("result");
	response.getWriter().write(result);
	
}



public ModelAndView showHemoDialysis(HttpServletRequest request,HttpServletResponse response){
    Map<String, Object> map = new HashMap<String, Object>();
    Map<String, Object> requestMap = new HashMap<String, Object>();
    int visitId=0;
    int hinId = 0;
    
    if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){
    visitId =Integer.parseInt(request.getParameter("visitId")); 
    }
    
	   if(request.getParameter("hinId") != null){
		hinId = Integer.parseInt(request.getParameter("hinId"));
	   }

 requestMap.put("hinId", hinId);   
 requestMap.put("visitId", visitId);
 
	map = opdHandlerService.showHemoDialysis(requestMap);
 jsp = "hemoDialysis";
 map.put("contentJsp", jsp);
return new ModelAndView(jsp, "map", map);

}

public Map<String,Object> getHemoDialysis(HttpServletRequest request) {
	Map<String, Object> map = new HashMap<String, Object>();
	
	String dialDate = "";
	if(request.getParameter("dialDate") != null && !request.getParameter("dialDate").equals("")){
		dialDate = request.getParameter("dialDate");
	}
	
	int hdNo =0;
	if (request.getParameter("hdNo") != null && !(request.getParameter("hdNo").equals(""))) {
		hdNo =Integer.parseInt(request.getParameter("hdNo"));
	}
	
	String dialysisAccess1="";
	if (request.getParameter("dialysis_access1") != null && !(request.getParameter("dialysis_access1").equals(""))) {
		dialysisAccess1 =request.getParameter("dialysis_access1");
	}
	
	String dialysisAccess2="";
	if (request.getParameter("dialysis_access2") != null && !(request.getParameter("dialysis_access2").equals(""))) {
		dialysisAccess2 =request.getParameter("dialysis_access2");
	}
	
	BigDecimal preHdWeight =new BigDecimal(0);;
	if (request.getParameter("preHdWeight") != null && !(request.getParameter("preHdWeight").equals(""))) {
		String s = request.getParameter("preHdWeight");
		preHdWeight =new BigDecimal(s).setScale(2);
	}
	
	BigDecimal postHdWeight =new BigDecimal(0);;
	if (request.getParameter("postHdWeight") != null && !(request.getParameter("postHdWeight").equals(""))) {
		String s = request.getParameter("postHdWeight");
		postHdWeight =new BigDecimal(s).setScale(2);
	}
	
	BigDecimal weightGain =new BigDecimal(0);;
	if (request.getParameter("weightGain") != null && !(request.getParameter("weightGain").equals(""))) {
		String s = request.getParameter("weightGain");
		weightGain =new BigDecimal(s).setScale(2);
	}
	String heparinDose="";
	if (request.getParameter("heparinDose") != null && !(request.getParameter("heparinDose").equals(""))) {
		heparinDose =request.getParameter("heparinDose");
	}
	
	int bloodFlowRate =0;
	if (request.getParameter("bloodFlowRate") != null && !(request.getParameter("bloodFlowRate").equals(""))) {
		bloodFlowRate =Integer.parseInt(request.getParameter("bloodFlowRate"));
	}
	
	int dialysateFlowRate =0;
	if (request.getParameter("dialysateFlowRate") != null && !(request.getParameter("dialysateFlowRate").equals(""))) {
		dialysateFlowRate =Integer.parseInt(request.getParameter("dialysateFlowRate"));
	}
	
	int ktV =0;
	if (request.getParameter("ktV") != null && !(request.getParameter("ktV").equals(""))) {
		ktV =Integer.parseInt(request.getParameter("ktV"));
	}
	
	int urr =0;
	if (request.getParameter("urr") != null && !(request.getParameter("urr").equals(""))) {
		urr =Integer.parseInt(request.getParameter("urr"));
	}
	
	int uf =0;
	if (request.getParameter("uf") != null && !(request.getParameter("uf").equals(""))) {
		uf =Integer.parseInt(request.getParameter("uf"));
	}
	
	String nextDialysisDate = "";
	if(request.getParameter("nextDialysisDate") != null && !request.getParameter("nextDialysisDate").equals("")){
		nextDialysisDate = request.getParameter("nextDialysisDate");
	}
	
	String nextDialysisTime="";
	if (request.getParameter("nextDialysisTime") != null && !(request.getParameter("nextDialysisTime").equals(""))) {
		nextDialysisTime =request.getParameter("nextDialysisTime");
	}
	
	String eventsComplications="";
	if (request.getParameter("events_complications") != null && !(request.getParameter("events_complications").equals(""))) {
		eventsComplications =request.getParameter("events_complications");
	}
	
	String vitalCurrentDateAndTime="";
	if (request.getParameter("vitalCurrentDateAndTime") != null && !(request.getParameter("vitalCurrentDateAndTime").equals(""))) {
		vitalCurrentDateAndTime =request.getParameter("vitalCurrentDateAndTime");
	}
	
	String vitalSystolic="";
	if (request.getParameter("vitalSystolic") != null && !(request.getParameter("vitalSystolic").equals(""))) {
		vitalSystolic =request.getParameter("vitalSystolic");
	}
	
	String vitalDiastolic="";
	if (request.getParameter("vitalDiastolic") != null && !(request.getParameter("vitalDiastolic").equals(""))) {
		vitalDiastolic =request.getParameter("vitalDiastolic");
	}
	String vitalBp = "";
	if(vitalSystolic !=null && !vitalSystolic.equals("") && vitalDiastolic !=null && !vitalDiastolic.equals("")){
	vitalBp = vitalSystolic + "/" + vitalDiastolic;
	}
	
	int vitalPulse=0;
	if (request.getParameter("vitalPulse") != null && !(request.getParameter("vitalPulse").equals(""))) {
		vitalPulse =Integer.parseInt(request.getParameter("vitalPulse"));
	}
	
	BigDecimal vitalTemperature =new BigDecimal(0);;
	if (request.getParameter("vitalTemperature") != null && !(request.getParameter("vitalTemperature").equals(""))) {
		String s = request.getParameter("vitalTemperature");
		vitalTemperature =new BigDecimal(s).setScale(1);
	}
	
	map.put("vitalTemperature", vitalTemperature);
	map.put("vitalPulse", vitalPulse);
	map.put("vitalBp", vitalBp);
	map.put("vitalCurrentDateAndTime", vitalCurrentDateAndTime);
	map.put("dialDate", dialDate);
	map.put("hdNo", hdNo);
	map.put("dialysisAccess1", dialysisAccess1);
	map.put("dialysisAccess2", dialysisAccess2);
	map.put("preHdWeight", preHdWeight);
	map.put("postHdWeight", postHdWeight);
	map.put("weightGain", weightGain);
	map.put("heparinDose", heparinDose);
	map.put("bloodFlowRate", bloodFlowRate);
	map.put("dialysateFlowRate", dialysateFlowRate);
	
	map.put("ktV", ktV);
	map.put("urr", urr);
	map.put("uf", uf);
	
	map.put("nextDialysisDate", nextDialysisDate);
	map.put("nextDialysisTime", nextDialysisTime);
	map.put("eventsComplications", eventsComplications);
	
	return map;
	
	
}

public ModelAndView getVitalDetails(HttpServletRequest request,HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> infoMap = new HashMap<String, Object>();
	int hinId=0;
	 if(request.getParameter("hinId") != null){
	   		hinId = Integer.parseInt(request.getParameter("hinId"));
	   	   }
	infoMap.put("hinId", hinId);
	map=opdHandlerService.getVitalDetails(infoMap);
	jsp="hemoVitalDetail";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp,"map",map);
}

public ModelAndView getpatientDetailsHemoDialysis(HttpServletRequest request,HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> infoMap = new HashMap<String, Object>();
	int hinId=0;
	 if(request.getParameter("hinId") != null){
	   		hinId = Integer.parseInt(request.getParameter("hinId"));
	   	   }
	infoMap.put("hinId", hinId);
	map=opdHandlerService.getVitalDetails(infoMap);
	jsp="hemoPatientDetail";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp,"map",map);
}

public ModelAndView getDoctorSpecificPatientList(HttpServletRequest request,HttpServletResponse response){
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> mapForDS = new HashMap<String, Object>();
	HttpSession session = request.getSession();
	int hospitalId = 0;
	int deptId = 0;
	int userId = 0;
	
	if (session.getAttribute("hospitalId") != null) {
		hospitalId = (Integer)session.getAttribute("hospitalId");
		mapForDS.put("hospitalId", hospitalId);	
	}
	if(session.getAttribute("deptId")!=null){
		 deptId = (Integer) session.getAttribute("deptId");
		mapForDS.put("deptId", deptId);
	}
	if (session.getAttribute("userId") != null) {
		userId = (Integer)session.getAttribute("userId");
		mapForDS.put("userId", userId);	
	}
	
	map=opdHandlerService.getDoctorSpecificPatientList(mapForDS);
	jsp="doctorSpecificPatients";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp,"map",map);
}

public ModelAndView showPlannedLeaveCommonPoolJsp(HttpServletRequest request,HttpServletResponse response){
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	Map<String,Object> map=new HashMap<String,Object>();
	
	return new ModelAndView("planned_leave_common_pool","map",map);
}

public ModelAndView getSubParameterDetails(HttpServletRequest request, HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> generalMap = new HashMap<String, Object>();
	int rowVal = Integer.parseInt(request.getParameter("rowVal"));
	String chargeCodeNameWithId = request.getParameter("chargeCodeNameDermotology"+ rowVal);
	int hinId = Integer.parseInt(request.getParameter("hinId"));
	int index1 = chargeCodeNameWithId.lastIndexOf("[");
	int index2 = chargeCodeNameWithId.lastIndexOf("]");
	String chargeCodeName = "";
	if(index1>0){
		 chargeCodeName = chargeCodeNameWithId.trim().substring(0, index1);
	}
	//generalMap.put("chargeCodeName", chargeCodeName);
	generalMap.put("chargeCodeName", chargeCodeName);
	generalMap.put("rowVal", rowVal);
	map = opdHandlerService.getSubParameterDetails(generalMap);
	jsp = "responseForExternalLabSubParameter";
	map.put("contentJsp", jsp);
	return new ModelAndView(jsp, "map", map);
}
public ModelAndView fillChargeCodeDermatology(HttpServletRequest request,
		HttpServletResponse response) {
	HttpSession session = request.getSession();
	String rowVal = request.getParameter("rowVal");
	String chargeCodeNameWithId = request.getParameter("chargeCodeNameDermotology"+ rowVal);
	int hinId = Integer.parseInt(request.getParameter("hinId"));
	int index1 = chargeCodeNameWithId.lastIndexOf("[");
	int index2 = chargeCodeNameWithId.lastIndexOf("]");
	String chargeCodeName = "";
	if(index1>0){
		 chargeCodeName = chargeCodeNameWithId.trim().substring(0, index1);
	}
	

	map = opdHandlerService.getChargeCodeValue(chargeCodeName,hinId);

	jsp = OPD_RESPONSE_FOR_CHARGE_CODE_NAME_JSP;

	title = "Patient Investigation Details";
	map.put("rowVal", rowVal);
	map.put("contentJsp", jsp);
	map.put("title", title);
	return new ModelAndView(jsp, "map", map);

}

public  ModelAndView displaySubParameterResult(HttpServletRequest request,HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Box box = HMSUtil.getBox(request);
	map= opdHandlerService.displaySubParameterResult(box);
	return new ModelAndView("externalLabSubParameterResult", "map", map);
}

public ModelAndView antenatalHTMLReport(HttpServletRequest request,HttpServletResponse response){
    HttpSession session = request.getSession();
      Map<String, Object> map = new HashMap<String, Object>();
       Map<String, Object> requestMap = new HashMap<String, Object>();
    
 
       int visitId=0;
       int hinId=0;
       
       if(request.getParameter("visitId")!=null && !request.getParameter("visitId").equals("")){

       visitId =Integer.parseInt(request.getParameter("visitId"));
       }
       if(request.getParameter("hinId")!=null && !request.getParameter("hinId").equals("")){
    	   hinId =Integer.parseInt(request.getParameter("hinId"));
}
 requestMap.put("visitId", visitId);
 requestMap.put("hinId", hinId);
    
	map = opdHandlerService.printANCHtml(requestMap);
    jsp = "antenatalCardHtmlReport";
    map.put("contentJsp", jsp);
   return new ModelAndView(jsp, "map", map);

  }
public void getImageData(HttpServletRequest request,
		HttpServletResponse response) {
	Map<String, Object> map = new HashMap<String, Object>();
	Map<String, Object> generalMap = new HashMap<String, Object>();
	String imageData = "";
	String imgName = "";
	int visitId = 0;
	Box box = HMSUtil.getBox(request);
	if(request.getParameter("imageName")!=null){
		imgName = request.getParameter("imageName");
	}
	//System.out.println("imgName==="+imgName);
	box.put("imgName", imgName);
	if(request.getParameter("visitId")!=null){
		visitId =Integer.parseInt(request.getParameter("visitId"));
	}

		if(request.getParameter("result") != null){
	    	imageData= request.getParameter("result");
	    }
	   // map = opdHandlerService.updateImageFileName(box);
	    //System.out.println("imageData==111==="+imageData);
	    String base64Image = imageData.split(",")[1];
	    byte[] imageBytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(base64Image);
	   // System.out.println("imageBytes=="+imageBytes);
	   // for(int i=1;i<=3;i++){
	    try {
			BufferedImage img = ImageIO.read(new ByteArrayInputStream(imageBytes));
			 File imgFile = new File(getServletContext().getRealPath("/specialityImage") +"/"+imgName+ ".png"); 
			 //System.out.println("img-111-------"+img);
		     //System.out.println("imgFile-111-------"+imgFile);
		     ImageIO.write(img, "png", imgFile);  
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
 }
public ModelAndView viewENTExaminationImages(HttpServletRequest request,HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	map = opdHandlerService.viewENTExaminationImages(box);
	return new ModelAndView("viewENTImages", "map", map);
}
public ModelAndView displayDateWiseENTImages(HttpServletRequest request,HttpServletResponse response) {
	Box box = HMSUtil.getBox(request);
	map = opdHandlerService.displayDateWiseENTImages(box);
	return new ModelAndView("viewENTImages", "map", map);
}


   public ModelAndView showFamilyTreeEntryJsp(HttpServletRequest request,HttpServletResponse response){
	Box box = HMSUtil.getBox(request);
	HttpSession session = request.getSession();
	  Map<String, Object> requestMap = new HashMap<String, Object>();
	Map<String,Object> map=new HashMap<String,Object>();
	
	 Set<String> uniqueMem = new HashSet<>();
	 requestMap.put("hinId", request.getParameter("hinId"));
	 map = opdHandlerService.getFamilyTreeDetails(requestMap);
	return new ModelAndView("family_tree_entry","map",map);
}
   
   

public ModelAndView showFamilyTree(HttpServletRequest request,HttpServletResponse response){
	
	Map<String,Object> map=new HashMap<String,Object>();
	 JSONObject jsnObj = new JSONObject();
	 JSONArray  nodes = new JSONArray();
	 map.put("hinId", request.getParameter("hinId"));
	 map = opdHandlerService.getFamilyTreeDetails(map);
	 List<Ft> ftlist = (List<Ft>) map.get("ftlist");
	 int selfId = 0;
	 for(Ft ft: ftlist)
	 {
		 if(selfId==0 && ft.getRel().getId()==20)
			 selfId = ft.getId();

		 jsnObj = new JSONObject();
		 try{
		 jsnObj.put("key", ft.getId());
		 jsnObj.put("n", ft.getRel().getRelName());
		 jsnObj.put("name", ft.getRelName());
		 jsnObj.put("diag", ft.getDiagnosis()!=null?ft.getDiagnosis():"");
		 jsnObj.put("status", ft.getStatus());
		 jsnObj.put("s", ft.getGender());
		 if(ft.getFather()!=null)
		 jsnObj.put("f", ft.getFather().getId());
		 if(ft.getMother()!=null)
			 jsnObj.put("m", ft.getMother().getId());
		 if(ft.getSpouse()!=null)
			 jsnObj.put(ft.getGender().equals("F")?"vir":"ux", ft.getSpouse().getId());
		 nodes.put(jsnObj);
		 }
		 catch(Exception e)
		 {
			 e.printStackTrace();
		 }
	 }
	
	 map.put("nodes", nodes);
	 map.put("patientFTId", selfId);
	 return new ModelAndView("fTree","map",map);
}
	public ModelAndView submitFamilyTree(HttpServletRequest request,HttpServletResponse response){ 
		Box box = HMSUtil.getBox(request);
		HttpSession session = request.getSession();
		Map<String,Object> map=new HashMap<String,Object>();
		map.put("box", box);
		 map = opdHandlerService.submitFamilyTreeMembers(map);
		 return new ModelAndView("family_tree_entry","map",map);
}

	public void checkForDuplicateExternalTest(HttpServletRequest request,HttpServletResponse response) throws IOException{ 
		
		Map<String,Object> map=new HashMap<String,Object>();
		int hinId = Integer.parseInt(request.getParameter("hinId"));
		map.put("hinId", hinId);
		String templateName = request.getParameter("templateName");
		String testName = request.getParameter("testName");
		map.put("templateName", templateName);
		map.put("testName", testName);
		String testDate = request.getParameter("testdate");
		map.put("testDate", testDate);
		map = opdHandlerService.checkForDuplicateExternalTest(map);
	    //jsp = "external_lab_report_dermotology";
	    String isExist = "";
		
		if(map!=null && map.get("isExist") != null){
			isExist=(String)map.get("isExist");
			}
		response.setContentType("text/html");
	    PrintWriter out = response.getWriter();

	    out.println(isExist);
	  // return new ModelAndView(jsp, "map", map);
}	
	
	
}

