package jkt.hms.opd.dataservice;

import static jkt.hms.util.RequestConstants.*;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.URL;
import java.net.URLDecoder;
import java.nio.ByteBuffer;
import java.sql.Connection;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;

import jkt.hms.adt.dataservice.RegistrationDataService;
//import jkt.hms.masters.business.Diagnosispro;
import jkt.hms.masters.business.*;
import jkt.hms.masters.dataservice.BillingMasterDataService;
import jkt.hms.snomed.SNOMEDAgentUtil;
import jkt.hms.snomed.SuffixCount;
import jkt.hms.util.Box;
import jkt.hms.util.ComparatorForLabTestDate;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.ImmunizationUtil;
import jkt.hms.util.QueueManagmentDetails;
import jkt.hms.util.SMSHTTPSPostClient;
import jkt.hms.util.TaperedMedicineUtil;
import jkt.hms.util.UsgDetails;
import jkt.hrms.masters.business.MasQualification;
import net.sf.jasperreports.renderers.JFreeChartRenderer;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Transaction;
import org.hibernate.classic.Session;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Hour;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleInsets;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import ca.uhn.hl7v2.DefaultHapiContext;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.hoh.api.DecodeException;
import ca.uhn.hl7v2.hoh.api.EncodeException;
import ca.uhn.hl7v2.hoh.api.IReceivable;
import ca.uhn.hl7v2.hoh.api.ISendable;
import ca.uhn.hl7v2.hoh.api.MessageMetadataKeys;
import ca.uhn.hl7v2.hoh.hapi.api.MessageSendable;
import ca.uhn.hl7v2.hoh.hapi.client.HohClientSimple;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.model.v22.group.ORU_R01_ORDER_OBSERVATION;
import ca.uhn.hl7v2.model.v22.message.ACK;
import ca.uhn.hl7v2.model.v22.message.ADT_A01;
import ca.uhn.hl7v2.model.v22.message.ORM_O01;
import ca.uhn.hl7v2.model.v22.message.ORU_R01;
import ca.uhn.hl7v2.model.v22.segment.BLG;
import ca.uhn.hl7v2.model.v22.segment.MSH;
import ca.uhn.hl7v2.model.v22.segment.OBR;
import ca.uhn.hl7v2.model.v22.segment.OBX;
import ca.uhn.hl7v2.model.v22.segment.ORC;
import ca.uhn.hl7v2.model.v22.segment.PID;
import ca.uhn.hl7v2.model.v22.segment.PV1;
import ca.uhn.hl7v2.parser.EncodingNotSupportedException;
import ca.uhn.hl7v2.parser.GenericParser;
import ca.uhn.hl7v2.parser.Parser;
import ca.uhn.hl7v2.parser.PipeParser;


@SuppressWarnings("unused")
public class OPDDataServiceImpl extends HibernateDaoSupport implements
		OPDDataService {
	
	private BillingMasterDataService billingMasterDataService = null;
	
	private RegistrationDataService registrationDataService= null;
	
	private static final Logger logger = org.apache.log4j.Logger.getLogger(OPDDataServiceImpl.class);


	// ----------------------------showSurgeryRequisitionJspFromPatientList1--------------methods
	// written by
	// Vikas---------------------------------

	public RegistrationDataService getRegistrationDataService() {
		return registrationDataService;
	}

	public void setRegistrationDataService(
			RegistrationDataService registrationDataService) {
		this.registrationDataService = registrationDataService;
	}

	public BillingMasterDataService getBillingMasterDataService() {
		return billingMasterDataService;
	}

	public void setBillingMasterDataService(
			BillingMasterDataService billingMasterDataService) {
		this.billingMasterDataService = billingMasterDataService;
	}

	@Override
	public Map<String, Object> transferToCommonPool(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<>();
		Date currentDate = new Date();
		int employeeId = box.getInt("employeeId");
		int departmentId = box.getInt("departmentId");
		int hospitalId = box.getInt("hospitalId");
		String resultStr = "failure";
		Criteria criteria = null;
		List<Integer> maxDisplayAfterNoList  = null;
		List<HospitalDoctorUnitM> unitList = null;
		List<Integer> drList = null;
		List<QueueManagment> queueList = null;
		List<Users> userList = null;
		List<QueueManagment> nextQueueList = null;
		List<MasDepartment> masDepartmentList = null;
		int empDepartmentId = 0;
		int maxDisplayAfterNo = 0;
		int counterId = 0;
		Visit visit = null;
		Users users = null;
		MasServiceCentreCounter serviceCentreCounter = null;
		MasEmployee employee = null;
		int result = 0;
		int resultForDoctor = 0;
		int transferToCommonCount = 0;
		Date fromDate = currentDate;
		Date toDate = currentDate;
		boolean dateFlag = false;
		
		if(box.get("fromDate")!=null && box.get("toDate")!=null && box.get("fromDate")!="" && box.get("toDate")!=""){
			dateFlag = true;
			fromDate = HMSUtil.convertStringTypeDateToDateType (box.getString("fromDate"));
			toDate = HMSUtil.convertStringTypeDateToDateType(box.getString("toDate"));
		}
		
		
		try{
		if(employeeId!=0){

			/*Query query1 = session
					.createQuery("update Users set AvailableToday = :availableStatus where Employee.Id = :employeeId"); 
			query1.setParameter("availableStatus", "n");
			query1.setParameter("employeeId", employeeId);
			resultForDoctor = query1.executeUpdate();
			*/
			
			criteria =session.createCriteria(Users.class)
					.add(Restrictions.eq("Employee.Id",employeeId));
			
			userList =	criteria.list();
			if(userList!=null && userList.size()>0){
				users = userList.get(0);
				users.setAvailableToday("n");
					if (users.getCurrentCounter() != null) {
						serviceCentreCounter = users.getCurrentCounter();
						serviceCentreCounter.setStatus("y");
						users.setCurrentCounter(null);
						session.update(users);
						session.update(serviceCentreCounter);
					}
			}
			
			
			/*employee =	(MasEmployee)session.get(MasEmployee.class, employeeId);
			users	=	employee.getUsers().iterator().next();
			if(users!=null){
				session.refresh(users);
				users.setAvailableToday("n");
				serviceCentreCounter = 	users.getCurrentCounter();
				serviceCentreCounter.setStatus("y");
				users.setCurrentCounter(null);
				session.update(users);
				session.update(serviceCentreCounter);
				
			}*/
			
			criteria =session.createCriteria(MasInstituteDepartment.class)
					.setProjection(Projections.property("Department"))
					.add(Restrictions.eq("Institute.Id",hospitalId))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.add(Restrictions.eq("Department.Id",departmentId));

			masDepartmentList=criteria.list();
			
			if(masDepartmentList!=null && masDepartmentList.size()>0){
				empDepartmentId = masDepartmentList.get(0).getEmpDept().getId();
			}
			
						
			String unitDay=HMSUtil.getDayOfWeek().toLowerCase();
			criteria = session.createCriteria(HospitalDoctorUnitM.class)
					.createAlias("EmpDept", "EmpDept")
					.createAlias("Hospital", "Hospital")
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq(((String) unitDay.subSequence(0,1)).toUpperCase()+unitDay.substring(1),"y"))
					.add(Restrictions.eq("EmpDept.Id", empDepartmentId));
			unitList = criteria.list();

			if(unitList!=null && unitList.size() > 0){
				criteria = session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM").add(Restrictions.eq("UnitM.Id", unitList.get(0).getId())).add(Restrictions.eq("UnitM.Status", "y").ignoreCase())
						.createAlias("Employee", "emp",CriteriaSpecification.LEFT_JOIN).createAlias("emp.Users", "u").createAlias("u.CurrentCounter", "cc").createAlias("u.Department", "d")
						.add(Restrictions.eq("u.AvailableToday", "y").ignoreCase()).addOrder(Order.asc("cc.CounterNo")).add(Restrictions.eq("d.Id", departmentId)).add(Restrictions.isNotNull("cc.CounterNo"))
						.add(Restrictions.eq("u.LoginStatus", "y").ignoreCase()).add(Restrictions.eq("Status", "y").ignoreCase()).add(Restrictions.eq("u.Status", "y").ignoreCase())
						.add(Restrictions.ne("emp.Id", employeeId)).setProjection(Projections.projectionList().add(Projections.property("emp.Id")));
				drList = criteria.list();
			}
			
			if(drList!=null && drList.size()>0){
				
					 criteria = session.createCriteria(QueueManagment.class)
							 .createAlias("Visit", "v")
							//.add(Restrictions.eq("LsCngDate", currentDate))
							 .add(Restrictions.between("LsCngDate", fromDate, toDate))
							.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.eq("Department.Id", departmentId));
					 
					 if(dateFlag)
						 criteria = criteria.add(Restrictions.or(Restrictions.in("AssignedDoctorId", drList), Restrictions.in("InitialDr.Id", drList)));
					 else
						 criteria.add(Restrictions.in("AssignedDoctorId", drList));
					 

					 criteria =	criteria.setProjection(Projections.projectionList().add(Projections.max("v.DisplayAfterNo")));
						
					 maxDisplayAfterNoList = criteria.list();
				if(maxDisplayAfterNoList!=null && maxDisplayAfterNoList.size()>0){
					if(maxDisplayAfterNoList.get(0)!=null) 
							maxDisplayAfterNo =	maxDisplayAfterNoList.get(0);
				}
				
			}	
			logger.info(" max DisplayAfterNo of assigned dr : "+maxDisplayAfterNo);
		String[] tokenStatusArray = {"C","c","P","p","A","a"};
			
		/* if(maxDisplayAfterNo>0){
			 criteria = session.createCriteria(QueueManagment.class)
					 .createAlias("Visit", "v")
					.add(Restrictions.eq("LsCngDate", currentDate))
					.add(Restrictions.not(Restrictions.in("TokenStatus", tokenStatusArray)))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", departmentId))
					.add(Restrictions.ge("v.DisplayAfterNo", maxDisplayAfterNo)) .add(Restrictions.isNull("AssignedDoctorId"))
					.addOrder(Order.asc("v.DisplayAfterNo"));	
			 nextQueueList = criteria.list();
			 
		} */
			
		criteria = session.createCriteria(QueueManagment.class)
				 .createAlias("Visit", "v")
				.add(Restrictions.or(Restrictions.eq("AssignedDoctorId", employeeId), Restrictions.eq("Docotor.Id", employeeId)))
				 //.add(Restrictions.eq("AssignedDoctorId", employeeId))
				//.add(Restrictions.eq("LsCngDate",currentDate))
				 .add(Restrictions.between("LsCngDate", fromDate, toDate))
				.add(Restrictions.ne("v.VisitStatus","C").ignoreCase())
				.add(Restrictions.ne("TokenStatus","c").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Department.Id", departmentId))
				.addOrder(Order.asc("v.DisplayAfterNo"));	
		queueList = criteria.list();
		
		
		
		if(queueList!=null && queueList.size()>0){
			for(QueueManagment queueManagment : queueList){
				
				queueManagment = (QueueManagment)session.get(QueueManagment.class, queueManagment.getId());
				visit =	queueManagment.getVisit();
				logger.info("Drs token no : "+visit.getTokenNo()+" Display after no : "+visit.getDisplayAfterNo());
				queueManagment.setInitialDr(null);
				queueManagment.setAssignedDoctorId(null);
				
				if(queueManagment.getTransferToCommonPoolCount()!=null)
					transferToCommonCount =	queueManagment.getTransferToCommonPoolCount();
				
				queueManagment.setTransferToCommonPoolCount(transferToCommonCount+1);
				visit.setOpenat("");
				if(maxDisplayAfterNo>0 && queueManagment.getLsCngDate().equals(currentDate)){
					maxDisplayAfterNo++;
					logger.info("New Display after no for Drs token : "+visit.getTokenNo()+" is "+maxDisplayAfterNo);
					visit.setDisplayAfterNo(maxDisplayAfterNo);
					visit.setLastDisplayAfterNo(maxDisplayAfterNo);
					
				}
				session.update(queueManagment);
				session.update(visit);
				session.flush();
				result++;
				
				Date today=new Date();
				Date visitDate=queueManagment.getVisit().getVisitDate();
				
				if(!DateUtils.isSameDay(today, visitDate)){
						
						if(queueManagment.getHin().getMobileNumber()!=null && queueManagment.getHin().getMobileNumber()!=""){
							String mobileNumber=queueManagment.getHin().getMobileNumber();
							DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyy");
							String consultDate = dateFormat.format(queueManagment.getVisit().getVisitDate());
							String hospitalName=queueManagment.getHospital().getShortName();
							
							String message="The doctor requested for your appointment in "+hospitalName+" on "+consultDate+" is not available. Your visit will be facilitated by other available doctor.";
							
							SMSHTTPSPostClient.sendSingleSMS(mobileNumber, message);
						}
				}
				
				
			}
			
			if(result==queueList.size()){
				resultStr = "success";
			}
		}
		
		
		/* if(nextQueueList!=null && nextQueueList.size()>0){
			for(QueueManagment queueManagment : nextQueueList){
				visit =	queueManagment.getVisit();
				if(maxDisplayAfterNo>0){
					maxDisplayAfterNo++;
					logger.info("New Display after no for unassigned token : "+visit.getTokenNo()+" is "+maxDisplayAfterNo);
					visit.setDisplayAfterNo(maxDisplayAfterNo);
					visit.setLastDisplayAfterNo(maxDisplayAfterNo);
				}
				session.update(visit);
		}
		} */
		session.flush();
			
		/*Query query = session
				.createQuery("update QueueManagment set InitialDr = :doctorId, AssignedDoctorId = :doctorId"
						+ " where (AssignedDoctorId = :assignedDocotorId or Docotor.Id = :assignedDocotorId) and LsCngDate = :date  and TokenStatus = :tokenStatus and Department.Id = :departmentId and Hospital.Id = :hospitalId");
		query.setParameter("doctorId", null);
		query.setParameter("assignedDocotorId", employeeId);
		query.setParameter("date", currentDate);
		query.setParameter("departmentId", departmentId);
		query.setParameter("hospitalId", hospitalId);
		query.setParameter("tokenStatus", "w");
		int result = query.executeUpdate();*/
			
		 }
		} catch(Exception e){
			resultStr = "failure";
			e.printStackTrace();
			logger.info("Error occured in transferToCommonPool !"+e.getMessage());
		}
		
		map.put("result", resultStr);
		return map;
	}
	
	@SuppressWarnings({ "unused", "unchecked" })
	public Map<String, Object> getWaitingPatientList(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List<Visit> patientList = new ArrayList<Visit>();
		List<Visit> otherNextPatientList =  new ArrayList<Visit>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasServiceCentreCounter> serviceCentreCounterList = null;
		
		List<MasDepartment>departmentList=new ArrayList<MasDepartment>();
		List<MasInstituteDepartment>instituteDepartmentList = new ArrayList<MasInstituteDepartment>();
		List<HospitalDoctorUnitM> unitList = null;
		MasHospital masHospital = null; // added by amit das on 19-04-2017
		int deptId = 0;
		int hospitalId=0;
		
		String flag="";
		int searchFlag=0;
		int tokenNo=0;
		String patientName="";
		String search = null;
		String uhid="";
		//int opd_DepartmentId=0;
		String [] departmentIdlist = {"0"};
		List<Integer> serviceCentreList = new ArrayList();
		List serviceCentreIdList = new ArrayList();
		
		if(mapForDS.get("searchFlag")!=null && !mapForDS.get("searchFlag").toString().trim().equals("")){
			searchFlag=Integer.parseInt(mapForDS.get("searchFlag")+"");
		}
		if((Boolean)mapForDS.get("forOPClinnic")==null){
			//Changed by Arbind on 08-05-2017
			/*if(mapForDS.get("opd_Department")!=null){
				opd_DepartmentId =(Integer) mapForDS.get("opd_Department");
			}*/
			if(null !=mapForDS.get("serviceCentreList")){
				serviceCentreList = (List<Integer>)mapForDS.get("serviceCentreList");
				for(Integer i : serviceCentreList) {
					serviceCentreIdList.add(i);
				}
			}
		}
		
		if(mapForDS.get("tokenNo")!=null){
			tokenNo =(Integer) mapForDS.get("tokenNo");
		}
		if(mapForDS.get("patientName")!=null){
			patientName =(String) mapForDS.get("patientName");
		}
		if(mapForDS.get("uhid")!=null){
			uhid =(String) mapForDS.get("uhid");
		}
		if(mapForDS.get("flag")!=null){
			flag =(String) mapForDS.get("flag");
		}
		
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		if (mapForDS.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDS.get("hospitalId");
		}
		
		String fromTemplate=null;
		if (mapForDS.get("fromTempate") != null) {
			fromTemplate = (String) mapForDS.get("fromTempate");
		}
		int hinId = 0;
		int visitId = 0;
		String hinNo = "";
		int visitNo = 0;
		int assignedPatients = 0;
		int freePatients = 0;
		Integer userId = null;
		String deptName = "";
		int forNext = 0; // added by amit das on 18-08-2017
		String newTime = null; // added by amit das on 10-02-2017
		int shifingNumber = 0; // added by amit das on 09-02-2017
		int displayAfterNo = 0; // added by amit das on 24-07-2017
		int displayAfterNoOld = 0; // added by amit das on 24-07-2017
		List<Visit> visitLists= null; // added by amit das on 10-02-2017
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		Date date = new Date();
		String category = "Doctor";
		int empDepartmentId = 0;
		int noOfDoctorsInUnit = 0;
		
			MasEmployee employee=null;
			String empCatName="";
			
			
			if(mapForDS.get("skip")!=null)
				 forNext = (Integer)mapForDS.get("skip");
			
			if(mapForDS.get("userId")!=null){
			 userId=(Integer)mapForDS.get("userId");
				
				/*Users users=(Users) hbt.load(Users.class, userId);*/
				/*Users users=(Users) session.createCriteria(Users.class)
						.createAlias("Hospital", "hospitalId")
						.add(Restrictions.eq("Id", userId))
						.add(Restrictions.eq("hospitalId.Id", hospitalId)).list().get(0);
						employee=users.getEmployee();
				*/
				List<MasEmployee> employeeList = session.createCriteria(MasEmployee.class).createAlias("Users", "u").add(Restrictions.eq("u.Id", userId))
						.createAlias("u.Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).list();
				
				if(employeeList.size()>0)
					employee = employeeList.get(0);
				
				if(employee!=null && employee.getEmpCategory()!=null){
				empCatName=employee.getEmpCategory().getEmpCategoryName();
				}
			}
			
			
			/*
			 * Added By ritu for session wise waiting list
			 * 
			 */
			

			Date currentSessionTime=new Date();
			SimpleDateFormat parser = new SimpleDateFormat("hh:mm a");
			String ct=parser.format(currentSessionTime);
			Date cur = null;
			int currentSessionId = 0;
			try {
				cur = parser.parse(ct);
				List<Object[]> currentSessionList = new ArrayList<Object[]>();
				currentSessionList = session.createCriteria(MasSession.class).add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("FromTime")).add(Projections.property("ToTime"))).list();
				if(currentSessionList.size()==0){
					currentSessionList = session.createCriteria(MasSession.class).add(Restrictions.eq("Status", "y").ignoreCase())
							.add(Restrictions.isNull("Department")).add(Restrictions.eq("Hospital.Id", hospitalId)).setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("FromTime")).add(Projections.property("ToTime"))).list();
					
				}
				if(currentSessionList.size() > 0){
					for(Object[] obj : currentSessionList){
					Date fromTime = parser.parse((String)obj[1]);
					Date toTime = parser.parse((String)obj[2]);
					if(cur.after(fromTime) && cur.before(toTime)){
						currentSessionId = (Integer)obj[0];
					}
					}
				}
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
			List<Object> objectList = new ArrayList<Object>();
			List<Object> visitList = new ArrayList<Object>();
			if (mapForDS.get("hinId") != null && (Integer) mapForDS.get("hinId") > 0) {
				hinId = (Integer) mapForDS.get("hinId");
				if (hinId != 0) {
					objectList = session.createCriteria(Patient.class)
							.setProjection(Projections.projectionList()
							.add(Projections.property("HinNo"),"HinNo"))
							.add(Restrictions.eq("Id",hinId)).list();
				}
			}
			if (objectList != null && objectList.size() > 0) {
				hinNo = (String) objectList.get(0);
			}

			if (mapForDS.get("visitId") != null	&& (Integer) mapForDS.get("visitId") > 0 && forNext == 1) {
				visitId = (Integer) mapForDS.get("visitId");
				visitList =session.createCriteria(Visit.class)
						   .setProjection(Projections.projectionList()
						   .add(Projections.property("VisitNo"),"VisitNo"))
						   .add(Restrictions.eq("Id",visitId))
						 //  .add(Restrictions.or(Restrictions.eq("FromTemplate", fromTemplate), Restrictions.eq("FromTemplate", null)))						
						   .add(Restrictions.eq("Hospital.Id",hospitalId)).list();
				
				//shifting patient in case of next patient or not show :start
				
					Visit visit=(Visit)hbt.load(Visit.class,visitId);
					int opcount = 0;
					String acutalVisitTime = visit.getOpVisitTime();
					if(visit.getDisplayAfterNo()!=null){
						displayAfterNo = visit.getDisplayAfterNo(); // added by amit das on 21-07-2017
						logger.info("Display After No of token "+visit.getTokenNo()+ " :"+displayAfterNo);
						displayAfterNoOld = displayAfterNo;
					}
					
					if(visit.getOpCallCount()!=null){
						opcount = visit.getOpCallCount();
						opcount = opcount+1;
					}else{
						opcount = opcount+1;
					}
					visit.setOpCallCount(opcount);
					
					
					departmentList =session.createCriteria(MasInstituteDepartment.class)
							.setProjection(Projections.property("Department"))
							.add(Restrictions.eq("Institute.Id",hospitalId))
							.add(Restrictions.eq("Status","y").ignoreCase())
							.add(Restrictions.eq("Department.Id",deptId)).list();

					if(departmentList!=null && departmentList.size()>0){
						empDepartmentId = departmentList.get(0).getEmpDept().getId();
					}
								
					String unitDay=HMSUtil.getDayOfWeek().toLowerCase();
					unitList = session.createCriteria(HospitalDoctorUnitM.class)
							.createAlias("EmpDept", "EmpDept")
							.createAlias("Hospital", "Hospital")
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.eq(((String) unitDay.subSequence(0,1)).toUpperCase()+unitDay.substring(1),"y"))
							.add(Restrictions.eq("EmpDept.Id", empDepartmentId)).list();
					
					if(unitList!=null && unitList.size() > 0){
						noOfDoctorsInUnit = session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM").add(Restrictions.eq("UnitM.Id", unitList.get(0).getId())).add(Restrictions.eq("UnitM.Status", "y").ignoreCase())
								.createAlias("Employee", "emp",CriteriaSpecification.LEFT_JOIN).createAlias("emp.Users", "u").createAlias("u.CurrentCounter", "cc").createAlias("u.Department", "d")
								.add(Restrictions.eq("u.AvailableToday", "y").ignoreCase()).addOrder(Order.asc("cc.CounterNo")).add(Restrictions.eq("d.Id", deptId)).add(Restrictions.isNotNull("cc.CounterNo"))
								.add(Restrictions.eq("u.LoginStatus", "y").ignoreCase()).add(Restrictions.eq("Status", "y").ignoreCase()).add(Restrictions.eq("u.Status", "y").ignoreCase())
								.setProjection(Projections.projectionList().add(Projections.property("emp.Id"))).list().size();
					}
					
					
					
					// added by amit das on 09-02-2017
					if(opcount==1){
						shifingNumber = noOfDoctorsInUnit*5;
						//shifingNumber = 10;
						//shifingNumber = 5;
						//shifingNumber = 3;
					}/*else if(opcount==2){
						shifingNumber = 15;
						//shifingNumber = 10;
//						shifingNumber = 5;
					}else if(opcount==3){
						shifingNumber = 20;
						//shifingNumber = 15;
//						shifingNumber = 10;
					}*/
					logger.info("Shift Number : "+shifingNumber);	
					
					Criteria shiftCriteria	= session.createCriteria(QueueManagment.class).createAlias("Visit", "v")
												.add(Restrictions.eq("LsCngDate", new Date())).add(Restrictions.eq("Department.Id", deptId));
					shiftCriteria.add(Restrictions.ne("TokenStatus", "c").ignoreCase());
					shiftCriteria.add(Restrictions.ne("TokenStatus", "a").ignoreCase());
					shiftCriteria.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.ne("v.Id", visitId))
					.add(Restrictions.ge("v.DisplayAfterNo", displayAfterNo));
					//.add(Restrictions.or(Restrictions.eq("FromTemplate", fromTemplate), Restrictions.eq("FromTemplate", null)))	; //added by amit das on 24-07-2017
/*
					if(visit.getDoctor()!=null)
						shiftCriteria.add(Restrictions.or(Restrictions.eq("Docotor.Id", visit.getDoctor().getId()),Restrictions.eq("AssignedDoctorId", visit.getDoctor().getId())));
					else
						shiftCriteria.add(Restrictions.isNull("Docotor.Id")).add(Restrictions.isNull("AssignedDoctorId"));
					
					*/
					shiftCriteria.add(Restrictions.isNull("AssignedDoctorId"));
					
					//if(opcount<4)
					if(opcount<2)
						shiftCriteria.addOrder(Order.asc("v.DisplayAfterNo")).setMaxResults(shifingNumber); // added by amit das on 09-02-2017
					else
						shiftCriteria.addOrder(Order.asc("v.DisplayAfterNo")); // added by amit das on 09-02-2017	

					
					shiftCriteria.setProjection(Projections.property("Visit"));
					
					if(shiftCriteria.list().size()>0){
						visitLists=shiftCriteria.list();
						
					
						Visit vst=visitLists.get(visitLists.size()-1);
						displayAfterNo = vst.getDisplayAfterNo();
						visit.setDisplayAfterNo(displayAfterNo+1);
						visit.setOpenat(""); 
						logger.info("New Display after no of token "+visit.getTokenNo()+" : "+displayAfterNo);
						visit.setLastDisplayAfterNo(displayAfterNo+1);  
						displayAfterNoOld = displayAfterNo+1;
						//visit.setOpVisitTime(newTime);
						hbt.saveOrUpdate(visit);
						QueueManagment queueManagment =	(QueueManagment) session.createCriteria(QueueManagment.class).add(Restrictions.eq("Visit.Id", visit.getId())).list().get(0);
						if(visit.getDoctor()==null || queueManagment.getDocotor().getId()!=visit.getDoctor().getId()){
							queueManagment.setAssignedDoctorId(null);
							queueManagment.setDocotor(null);
							queueManagment.setInitialDr(null);
							queueManagment.setTokenStatus("w");
							queueManagment.setPatientSpecialCategory("");
							hbt.update(queueManagment);
						}
							
						//tx.commit();
						
					// added by amit das on 04-08-2017	
						/* shiftCriteria = session.createCriteria(QueueManagment.class).createAlias("Visit", "v")
									.add(Restrictions.eq("LsCngDate", new Date())).add(Restrictions.eq("Department.Id", deptId));
					shiftCriteria.add(Restrictions.ne("TokenStatus", "c").ignoreCase());
					shiftCriteria.add(Restrictions.ne("TokenStatus", "a").ignoreCase());
					shiftCriteria.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.ne("v.Id", visitId))
					.add(Restrictions.ge("v.DisplayAfterNo", displayAfterNoOld));
					//.add(Restrictions.or(Restrictions.eq("FromTemplate", fromTemplate), Restrictions.eq("FromTemplate", null)))	; //added by amit das on 24-07-2017	
					shiftCriteria.addOrder(Order.asc("v.DisplayAfterNo"));
					
					//if(visit.getDoctor()!=null)
						// shiftCriteria.add(Restrictions.or(Restrictions.eq("Docotor.Id", visit.getDoctor().getId()),Restrictions.eq("AssignedDoctorId", visit.getDoctor().getId())));
					// else
						// shiftCriteria.add(Restrictions.isNull("Docotor.Id")).add(Restrictions.isNull("AssignedDoctorId"));
					
					shiftCriteria.add(Restrictions.isNull("AssignedDoctorId"));
					
					
					shiftCriteria.setProjection(Projections.property("Visit"));
					visitLists=shiftCriteria.list();
					if(visitLists.size()>0){
						for(int i=0;i<visitLists.size();i++){
							Visit vstt =visitLists.get(i);
							displayAfterNo = vstt.getDisplayAfterNo();
							vstt.setDisplayAfterNo(displayAfterNo+1); 
							vstt.setLastDisplayAfterNo(displayAfterNo+1); 
							hbt.saveOrUpdate(vstt);
						}
					} */ 
					// ended by amit das on 04-08-2017		
						
					} else {
						shiftCriteria	= session.createCriteria(QueueManagment.class).createAlias("Visit", "v")
										.add(Restrictions.eq("LsCngDate", new Date())).add(Restrictions.eq("Department.Id", deptId));
						 				shiftCriteria.add(Restrictions.ne("TokenStatus", "c").ignoreCase());
						 				shiftCriteria.add(Restrictions.ne("TokenStatus", "a").ignoreCase());
						 				shiftCriteria.add(Restrictions.eq("Hospital.Id", hospitalId))
						 				.add(Restrictions.ne("v.Id", visitId))
						 				.add(Restrictions.ge("v.DisplayAfterNo", displayAfterNo))
						 				.setProjection(Projections.property("Visit"));
		
						if(shiftCriteria.list().size()>0){
							visitLists=shiftCriteria.list();
							Visit vst=visitLists.get(visitLists.size()-1);
							displayAfterNo = vst.getDisplayAfterNo();
							visit.setDisplayAfterNo(displayAfterNo+1);  
							visit.setLastDisplayAfterNo(displayAfterNo+1);  
							displayAfterNoOld = displayAfterNo+1;
							hbt.saveOrUpdate(visit);
							QueueManagment queueManagment =	(QueueManagment) session.createCriteria(QueueManagment.class).add(Restrictions.eq("Visit.Id", visit.getId())).list().get(0);
							if(visit.getDoctor()==null  || queueManagment.getDocotor().getId()!=visit.getDoctor().getId()){
								queueManagment.setAssignedDoctorId(null);
								queueManagment.setDocotor(null);
								queueManagment.setInitialDr(null);
								queueManagment.setTokenStatus("w");
								queueManagment.setPatientSpecialCategory("");
								hbt.update(queueManagment);
							 }
						}					
					}
					// added by amit das on 10-02-2017
				   /* shiftCriteria= session.createCriteria(Visit.class).add(Restrictions.eq("VisitDate", new Date())).add(Restrictions.eq("Department.Id", deptId));
					shiftCriteria.add(Restrictions.ne("VisitStatus", "c").ignoreCase());
					shiftCriteria.add(Restrictions.ne("VisitStatus", "a").ignoreCase());
					shiftCriteria.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.ne("Id", visitId))
					.add(Restrictions.ge("OpVisitTime", newTime));
					
					
					
					shiftCriteria.addOrder(Order.asc("OpVisitTime")); // added by amit das on 09-02-2017
					shiftCriteria.addOrder(Order.asc("TokenNo"));
					visitLists = shiftCriteria.list();
					if(visitList!=null && visitList.size()>0){
						for(Visit incVisit : visitLists){
							newTime = HMSUtil.addNewTimeToTime(incVisit.getOpVisitTime(),0,0,1);
							incVisit.setOpVisitTime(newTime);
							hbt.update(incVisit);
						}
					}*/
					
					
					
					hbt.saveOrUpdate(visit);
					
				//shifting patient in case of next patient or not show :end
			}
			
			Criteria parkCriteria=null;
			List<DgResultEntryDetail> parkPatientList=new ArrayList<DgResultEntryDetail>();
			/*parkCriteria=session.createCriteria(DgResultEntryDetail.class)
					.add(Restrictions.eq("ResultDetailStatus", "A").ignoreCase())
					.add(Restrictions.eq("Validated", "V").ignoreCase())
					.createAlias("ResultEntry", "resultEntry")
					.add(Restrictions.eq("resultEntry.ResultStatus", "A").ignoreCase())
					.add(Restrictions.eq("resultEntry.Verified", "V").ignoreCase())
					.createAlias("resultEntry.SampleCollectionHeader", "sampleHeader")
					.add(Restrictions.eq("sampleHeader.OrderStatus", "A").ignoreCase())
					.createAlias("sampleHeader.Hospital", "hosp")
					.add(Restrictions.eq("hosp.Id", hospitalId))
					.createAlias("sampleHeader.Order", "orderHd")
					.createAlias("orderHd.Hospital", "dgHospital")
					.add(Restrictions.eq("dgHospital.Id", hospitalId))
					
					.add(Restrictions.eq("orderHd.OrderStatus", "A").ignoreCase())
					.createAlias("orderHd.Visit", "visit")
					.add(Restrictions.eq("visit.VisitDate", new Date()))
					.add(Restrictions.isNull("visit.ResultEntryStatus"))
					.add(Restrictions.eq("visit.VisitStatus", "P").ignoreCase());
			parkPatientList=parkCriteria.list();*/
			
			
			int parkPatientVisitId=0;
			if(null !=parkPatientList && parkPatientList.size()>0){
				
				
				Criteria shiftCriteria= session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitDate", new Date())).add(Restrictions.eq("Department.Id", deptId));
						//.add(Restrictions.or(Restrictions.eq("FromTemplate", fromTemplate), Restrictions.eq("FromTemplate", null)))	;
				
				shiftCriteria.add(Restrictions.ne("VisitStatus", "c").ignoreCase());
				shiftCriteria.add(Restrictions.ne("VisitStatus", "a").ignoreCase());
				
				shiftCriteria.add(Restrictions.eq("Hospital.Id", hospitalId))
				.addOrder(Order.asc("OpVisitTime")).setMaxResults(3)
				.addOrder(Order.asc("TokenNo"));
				
				
				List<Integer> parkVistList=new ArrayList<Integer>();
				int tempvisitId=0;
				for(DgResultEntryDetail dgresult:parkPatientList){
					if(tempvisitId !=dgresult.getResultEntry().getSampleCollectionHeader().getOrder().getVisit().getId()){
					parkPatientVisitId=dgresult.getResultEntry().getSampleCollectionHeader().getOrder().getVisit().getId();
					parkVistList.add(dgresult.getResultEntry().getSampleCollectionHeader().getOrder().getVisit().getId());
					tempvisitId=dgresult.getResultEntry().getSampleCollectionHeader().getOrder().getVisit().getId();
					}
					
					List<Visit> parklist=shiftCriteria.list();
					

					
					if(parkVistList.size()>0){
						for(Integer v:parkVistList){
						visitLists=shiftCriteria.list();
						
						Visit vst=visitLists.get(visitLists.size()-1);
						
						
						String opVisitTime=vst.getOpVisitTime();
						
						newTime=HMSUtil.addNewTimeToTime(opVisitTime,0,0,1);
						
						Visit visit=(Visit)hbt.load(Visit.class,v);
						
					//	visit.setOpVisitTime(newTime);
						visit.setResultEntryStatus("c");
						hbt.saveOrUpdate(visit);
						
					}
					}
				}
			}
			tx.commit();
			if (visitList != null && visitList.size() > 0) {
				visitNo = (Integer) visitList.get(0);
			}
			hospitalId = (Integer) mapForDS.get("hospitalId");
			Criteria criteria = session.createCriteria(QueueManagment.class)
					.createAlias("Visit", "v")
					//.createAlias("v.Doctor", "docotor",CriteriaSpecification.LEFT_JOIN)
					.createAlias("InitialDr", "docotor",CriteriaSpecification.LEFT_JOIN)
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("LsCngDate", date));
			if(searchFlag!=1){
			
				criteria.createAlias("docotor.Users", "u")
					.add(Restrictions.eq("u.AvailableToday", "y").ignoreCase())
							.add(Restrictions.eq("u.LoginStatus", "y").ignoreCase())
					.createAlias("u.CurrentCounter", "cc").add(Restrictions.isNotNull("cc.CounterNo"));
			}
					//.add(Restrictions.or(Restrictions.eq("v.FromTemplate", fromTemplate), Restrictions.eq("v.FromTemplate", null)))	;
                   //.addOrder(Order.asc("TokenNo")); //commented by amit das on 13-07-20171
					if(flag.equalsIgnoreCase("p")){
						criteria.add(Restrictions.eq("TokenStatus", "p").ignoreCase());
					}else{
						criteria.add(Restrictions.ne("TokenStatus", "c").ignoreCase());
						criteria.add(Restrictions.ne("TokenStatus", "a").ignoreCase());
						
						if(searchFlag!=1)
							criteria.add(Restrictions.ne("TokenStatus", "p").ignoreCase());
					}
					criteria.add(Restrictions.eq("Hospital.Id", hospitalId));
					
					
				//	criteria.addOrder(Order.asc("PriorityNumber"))
						//.addOrder(Order.asc("VisitTime"))
				//	.addOrder(Order.asc("TotalHospitalVisit"));
						
						
				if((Boolean)mapForDS.get("opClinicalWaitinList")!=null && (Boolean)mapForDS.get("opClinicalWaitinList"))
				{	
					if(mapForDS.get("skip")!=null){
						criteria.add(Restrictions.ne("v.Id", visitId));
						//.add(Restrictions.or(Restrictions.eq("v.FromTemplate", fromTemplate), Restrictions.eq("v.FromTemplate", null)))	;
					}
					criteria.add(Restrictions.eq("dept.Id", deptId));
					//.add(Restrictions.eq("dType.DepartmentTypeCode", depCode))
					
				}
				//added by govind 28-9-2016
				/*criteria= session.createCriteria(Visit.class).createAlias("Doctor", "docotor")
						.add(Restrictions.eq("VisitDate", new Date()))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("Department.Id", deptId));	
				if(employee.getId()!=null){
					criteria.add(Restrictions.or(Restrictions.isNull("docotor.Id"), Restrictions.eq("docotor.Id", employee.getId())));
				}
				//added by govind 28-9-2016 end
*/				
				if(searchFlag==1){
					criteria.createAlias("Hin", "hin");
					//Commented by Arbind on 08-05-2017
					/*if((Boolean)mapForDS.get("forOPClinnic")==null){
						if(opd_DepartmentId!=0){
							criteria.add(Restrictions.eq("dept.Id", opd_DepartmentId));
						}
					}*/
					
					if(tokenNo!=0){
						criteria.add(Restrictions.eq("TokenNo", tokenNo));
					}
					if(patientName!=null  && !patientName.equals("")){
						criteria.add(Restrictions.or
										(Restrictions.or(Restrictions.like("hin.PFirstName", "%"+patientName+"%").ignoreCase(), Restrictions.like("hin.PMiddleName", "%"+patientName+"%").ignoreCase())
														,Restrictions.like("hin.PLastName", "%"+patientName+"%").ignoreCase()
										)
									);
					}
					if(uhid!=null && !uhid.equals(""))
					{
						criteria.add(Restrictions.like("hin.HinNo", "%"+uhid+"%"));
					}else{
						if(employee!=null)
							criteria = criteria.add(Restrictions.or(Restrictions.or(Restrictions.eq("docotor.Id",employee.getId()),Restrictions.eq("AssignedDoctorId",employee.getId())), Restrictions.and(Restrictions.isNull("AssignedDoctorId"), Restrictions.isNull("docotor.Id"))));
						else
							criteria = criteria.add(Restrictions.and(Restrictions.isNull("AssignedDoctorId"), Restrictions.isNull("docotor.Id")));
						
						//criteria = criteria.add(Restrictions.ne("TokenStatus","C").ignoreCase());//Added By OM Tripathi 18/01/2018
					
					}
					
				}else{
				
				if(employee!=null){
					if(employee.getId()!=null){
						// criteria.add(Restrictions.or(Restrictions.isNull("DoctorName"), Restrictions.eq("docotor.Id", employee.getId())));
						criteria.add(Restrictions.eq("AssignedDoctorId", employee.getId()));
						
					}
				}
					
				criteria.setMaxResults(3);
				}
				//Added by Arbind on 08-05-2017
				if((Boolean)mapForDS.get("forOPClinnic")==null){
					if(serviceCentreIdList != null && serviceCentreIdList.size()>0 ){
						criteria.add(Restrictions.in("dept.Id", serviceCentreIdList));
					}
				}
				if(currentSessionId!=0){
					criteria.createAlias("v.VisitSession", "vs");
					criteria.add(Restrictions.eq("vs.Id", currentSessionId));
				}	
					
				//criteria.addOrder(Order.asc("OpVisitTime")); //commented by amit das on 22-07-2017
				criteria.addOrder(Order.asc("v.DisplayAfterNo")); //added by amit das on 22-07-2017
				criteria.addOrder(Order.asc("v.TokenNo")); //added by amit das on 22-07-2017
				criteria.setProjection(Projections.projectionList().add(Projections.property("Visit")));
				//.add(Restrictions.or(Restrictions.eq("v.FromTemplate", fromTemplate), Restrictions.eq("v.FromTemplate", null)))	;
				
				patientList=criteria.list();
		//	}
				
			if(patientList!=null && patientList.size()>0) {	
			criteria = session
					.createCriteria(QueueManagment.class)
					.createAlias("Visit", "v")
					.createAlias("InitialDr", "docotor",
							CriteriaSpecification.LEFT_JOIN)
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("LsCngDate", date));
			criteria.add(Restrictions.ne("TokenStatus", "c").ignoreCase())
					.add(Restrictions.ne("TokenStatus", "a").ignoreCase())
					.add(Restrictions.ne("TokenStatus", "p").ignoreCase())
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("dept.Id", deptId));
			
			if (employee != null)
				criteria = criteria.add(Restrictions.or(Restrictions.eq(
						"docotor.Id", employee.getId()), Restrictions.and(
						Restrictions.isNull("AssignedDoctorId"),
						Restrictions.isNull("docotor.Id"))));
			else
				criteria = criteria.add(Restrictions.and(
						Restrictions.isNull("AssignedDoctorId"),
						Restrictions.isNull("docotor.Id")));
			
			criteria.add(Restrictions.not(Restrictions.in("Visit", patientList)));
			if (currentSessionId != 0) {
				criteria.createAlias("v.VisitSession", "vs");
				criteria.add(Restrictions.eq("vs.Id", currentSessionId));
			}
			criteria.addOrder(Order.asc("v.DisplayAfterNo"))
					.addOrder(Order.asc("v.TokenNo"))
					.setProjection(
							Projections.projectionList().add(
									Projections.property("Visit")));
			criteria.setMaxResults(7);
			otherNextPatientList = criteria.list();
			}		
					

			if (employee != null) {
				if (employee.getId() != null) {
					/*criteria = session
							.createCriteria(Visit.class)
							.createAlias("Doctor", "docotor",
									CriteriaSpecification.LEFT_JOIN)
							.createAlias("Department", "dept")
							.add(Restrictions.eq("VisitDate", date))
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.eq("dept.Id", deptId));
					*/
					criteria = session
							.createCriteria(QueueManagment.class)
							.createAlias("Department", "dept")
							.add(Restrictions.eq("LsCngDate", date))
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.eq("dept.Id", deptId));
					
					
					if((Boolean)mapForDS.get("forOPClinnic")==null){
						if(serviceCentreIdList != null && serviceCentreIdList.size()>0 ){
							criteria= criteria.add(Restrictions
									.in("dept.Id", serviceCentreIdList));
						}
					}
					criteria = criteria.add(Restrictions.eq("Docotor.Id",
											employee.getId())).add(Restrictions.eq("InitialDr.Id", employee.getId()));
					criteria = criteria.add(Restrictions.ne("TokenStatus","C").ignoreCase()).add(Restrictions.ne("TokenStatus", "a").ignoreCase()).add(Restrictions.ne("TokenStatus", "x").ignoreCase());
					
					assignedPatients = criteria.list().size();
				}
			}
			criteria = session
					.createCriteria(QueueManagment.class)
					.createAlias("Visit", "visit")
					.createAlias("visit.Doctor", "docotor",
							CriteriaSpecification.LEFT_JOIN)
					.createAlias("visit.Department", "dept")
					.add(Restrictions.eq("LsCngDate", date))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("dept.Id", deptId));
					//.add(Restrictions.or(Restrictions.eq("visit.FromTemplate", fromTemplate), Restrictions.isNull("visit.FromTemplate")))	;
			if((Boolean)mapForDS.get("forOPClinnic")==null){
				if(serviceCentreIdList != null && serviceCentreIdList.size()>0 ){
					criteria= criteria.add(Restrictions
							.in("dept.Id", serviceCentreIdList));
				}
			}
			    criteria = criteria.add(Restrictions.isNull("AssignedDoctorId"));
				criteria = criteria.add(Restrictions.isNull("InitialDr.Id"));
				//criteria = criteria.add(Restrictions.isEmpty("docotor.Id"));
				//criteria = criteria.add(Restrictions.ne("docotor.Id",employee.getId()));
				criteria = criteria.add(Restrictions.ne("TokenStatus","C").ignoreCase()).add(Restrictions.ne("TokenStatus", "a").ignoreCase()).add(Restrictions.ne("TokenStatus", "x").ignoreCase());//Added By OM Tripathi 16/01/2018
			freePatients = criteria.list().size();
			

			List<OpdPatientSecondOpinion>opdPSList=session.createCriteria(OpdPatientSecondOpinion.class)
													.createAlias("Visit", "visit")
													.add(Restrictions.eq("visit.VisitDate", new Date())).add(Restrictions.eq("OpinoinStatus", "c").ignoreCase())
													//.add(Restrictions.or(Restrictions.eq("visit.FromTemplate", fromTemplate), Restrictions.eq("visit.FromTemplate", null)))
													.add(Restrictions.eq("visit.VisitStatus", "o").ignoreCase()).list();
			
			doctorList = session
					.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empCategory")
					.createAlias("Department", "dept")
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("empCategory.EmpCategoryName",	category)).add(Restrictions.eq("dept.Id", deptId))
					.list();
			
			deptName = getDepartmentNameFromId(deptId);
			departmentList=	session.createCriteria(MasDepartment.class)
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.eq("DepartmentType.Id", 1))
						.addOrder(Order.asc("DepartmentName")).list();
			
			// added by amit das on 19-04-2016
			//Changed by Arbind on 13-12-2017
			//serviceCentreCounterList = session.createCriteria(MasServiceCentreCounter.class).add(Restrictions.eq("Status","y").ignoreCase()).add(Restrictions.eq("Department.Id",deptId)).add(Restrictions.eq("Hospital.Id",hospitalId)).list();
			serviceCentreCounterList = session.createQuery("from MasServiceCentreCounter as mscc where mscc.Hospital.Id = '"
					+ hospitalId + "' and mscc.Department.Id = '" + deptId + "' and lower(mscc.Status) = 'y' "
					+ "order by (case when (CounterNo between '1' and '99999') then cast(CounterNo as integer) end), CounterNo").list(); 
			
			serviceCentreCounterList.addAll(session.createCriteria(Users.class).createAlias("CurrentCounter", "c")
					.createAlias("c.Hospital", "h").createAlias("c.Department", "d").setProjection(Projections.property("CurrentCounter"))
					.add(Restrictions.eq("Id", userId)).add(Restrictions.eq("h.Id", hospitalId)).add(Restrictions.eq("d.Id", deptId)).add(Restrictions.isNotNull("CurrentCounter")).list());
			
			
			masHospital = (MasHospital) session.get(MasHospital.class, hospitalId);
			
			
			/*List<OpdPatientHistory>preOpdpastIllhistory=new ArrayList<OpdPatientHistory>();
			  preOpdpastIllhistory=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("Hin.Id",hinId)).addOrder(Order.asc("LastChgDate")).list();
					if(preOpdpastIllhistory.size()>0){
						map.put("preOpdPatientHistoryList", preOpdpastIllhistory);
						OpdPatientHistory opdh=preOpdpastIllhistory.get(0);
			}	*/
			instituteDepartmentList = session.createCriteria(MasInstituteDepartment.class)
					.createAlias("Department", "dep")
					.createAlias("dep.DepartmentType", "depType")
					.add(Restrictions.eq("Institute.Id", hospitalId))
					.add(Restrictions.eq("depType.DepartmentTypeCode", "CR").ignoreCase())
					.add(Restrictions.eq("Status", "y")).list();
			map.put("opdPSList", opdPSList);
			map.put("departmentList", departmentList);
			map.put("patientList", patientList);
			map.put("otherNextPatientList", otherNextPatientList);
			map.put("deptName", deptName);
			map.put("employee", employee);
			map.put("hinNo", hinNo);
			map.put("visitNo", visitNo);
			map.put("visitId", visitId);
			map.put("assignedPatients", assignedPatients);
			map.put("freePatients", freePatients);
			map.put("serviceCentreCounterList", serviceCentreCounterList); // added by amit das on 19-04-2017
			map.put("userId", userId); // added by amit das on 19-04-2017
			map.put("masHospital", masHospital); // added by amit das on 19-04-2017
			if(!flag.equals("p")){
			map.put("tokeNo", tokenNo);
			map.put("patientName", patientName);
			map.put("uhid", uhid);
			}
			map.put("instituteDepartmentList", instituteDepartmentList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchWaitingPatientList(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();

		// String serviceNo = "";
		String hinNo = "";
		String employeeName = "";
		// String serviceTypeName="";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		String deptName = "";
		Date currentDate = null;
		int deptId = 0;
		Session session = (Session) getSession();

		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		/*
		 * if(mapForDS.get("serviceNo") != null){ serviceNo =
		 * (String)mapForDS.get("serviceNo"); }
		 */
		if (mapForDS.get("hinNo") != null) {
			hinNo = (String) mapForDS.get("hinNo");
		}
		/*
		 * if(mapForDS.get("serviceTypeName") != null){ serviceTypeName =
		 * (String)mapForDS.get("serviceTypeName"); }
		 */
		if (mapForDS.get("patientFName") != null) {
			patientFName = (String) mapForDS.get("patientFName");
		}
		if (mapForDS.get("patientMName") != null) {
			patientMName = (String) mapForDS.get("patientMName");
		}
		if (mapForDS.get("patientLName") != null) {
			patientLName = (String) mapForDS.get("patientLName");
		}
		if (mapForDS.get("currentDate") != null) {
			currentDate = (Date) mapForDS.get("currentDate");
		}
		try {
			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Department", "dept")
					.add(Restrictions.eq("dept.Id", deptId))
					.createAlias("Hin", "hin")
					.add(Restrictions.eq("VisitDate", currentDate));

			deptName = getDepartmentNameFromId(deptId);

			if (hinNo.equals("")) {
				/*
				 * if(!serviceTypeName.equals("") ){ crit =
				 * crit.createAlias("hin.ServiceType",
				 * "masService").add(Restrictions
				 * .eq("masService.ServiceTypeName", serviceTypeName)); }
				 * if(!serviceNo.equals("") ){ crit =
				 * crit.add(Restrictions.eq("hin.ServiceNo", serviceNo)); }
				 */
				if (!patientFName.equals("")) {
					crit = crit.add(Restrictions.like("hin.PFirstName",
							patientFName + "%"));
				}
				if (!patientMName.equals("")) {
					crit = crit.add(Restrictions.like("hin.PMiddleName",
							patientMName + "%"));
				}
				if (!patientLName.equals("")) {
					crit = crit.add(Restrictions.like("hin.PLastName",
							patientLName + "%"));
				}
			} else {
				crit = crit.add(Restrictions.eq("hin.HinNo", hinNo));
			}
			patientList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deptName", deptName);
		map.put("patientList", patientList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientDetails(Map map) {
		Session session = null;
		session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasDiet> dietDataList = new ArrayList<MasDiet>();
		List<MasBloodGroup> bloodGroupList = new ArrayList<MasBloodGroup>();
		List<MasStoreBrand> storeBrandList = new ArrayList<MasStoreBrand>();
		List<OpdPatientDetails>preOpdPatientDetails=new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory>preOpdPatientHistory=new ArrayList<OpdPatientHistory>();
		List<OpdPatientHistory>preOpdpastIllhistory=new ArrayList<OpdPatientHistory>();
		List<MasDepartment>wardDepartment=new ArrayList<MasDepartment>();
		List<MasDepartment> masDepartmentList=new ArrayList<MasDepartment>();
		List<OpdPatientSecondOpinion> secondpoinionList=new ArrayList<OpdPatientSecondOpinion>();
		List<PhMemberSurvey> phMemberSurveyList =new ArrayList<PhMemberSurvey>();
		List<PhAncSurvey> maxPhAncSurveyList =new ArrayList<PhAncSurvey>();
		List<PhAncSurvey> phAncSurveyList =new ArrayList<PhAncSurvey>();
		List<BabyDetails> babyDetailList = new ArrayList<BabyDetails>();
		List<Patient> babyHinIdList = new ArrayList<Patient>();
		List<DeliveryDetails> deliveryDetailsList = new ArrayList<DeliveryDetails>();
		List<PhFpReg>maxPhFpRegList = new ArrayList<PhFpReg>();
		List<PhFpReg>phFpRegList = new ArrayList<PhFpReg>();
		List<PhFpRegDetail>phFpRegDetailList = new ArrayList<PhFpRegDetail>();
		//added by govind 17-9-2016
		List<Patient> patientList = new ArrayList<Patient>();
		List<PhProbablePregnancy> phProbablePregnancyList = null; // added by amit das on 13-06-2016
		List<PhDiseaseRegistration> phNCDRegList = new ArrayList<PhDiseaseRegistration>();//added by Arbind 15-11-2017
		List<PhDiseaseRegistrationScreening> phNCDRegScreeningList = new ArrayList<PhDiseaseRegistrationScreening>();
		List<PhDiseaseRegistrationFollow>phdfollowup=new ArrayList<PhDiseaseRegistrationFollow>();
		List<PhRevisedNationalTuberculosisScreening> phRNTCPRegScreeningList = new ArrayList<PhRevisedNationalTuberculosisScreening>();
		Visit lastVisit=new Visit();
		List<OpdSurgeryHeader> opdSurgeryHdrList = new ArrayList<OpdSurgeryHeader>();
		OpdSurgeryHeader opdSurgeryHeader=new OpdSurgeryHeader();
		OpdSurgeryDetail opdSurgeryDetail=new OpdSurgeryDetail(); 
		
		int visitId=0;
		int hospitalId=0,skip=0,deptId=0,userId=0;
		if (map.get("visitId") != null) {
			visitId = (Integer) map.get("visitId");
		}
		if (map.get("skip") != null) {
			skip = (Integer) map.get("skip");
		}
		if (map.get("hospitalId") != null) {
			hospitalId = (Integer) map.get("hospitalId");
		}
		if (map.get("deptId") != null) {
			deptId = (Integer) map.get("deptId");
		}
		if (map.get("docId") != null) {
			userId = (Integer) map.get("docId");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		try {
			//Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			dietDataList = session.createCriteria(MasDiet.class).list();
			bloodGroupList = session.createCriteria(MasBloodGroup.class).add(Restrictions.eq("Status", "y")).list();
			storeBrandList = session.createCriteria(MasStoreBrand.class).setMaxResults(1).list();
			Criteria crt=session.createCriteria(Visit.class);
				if(skip==1){
					crt.add(Restrictions.ne("Id", visitId))
					   .add(Restrictions.eq("Department.Id", deptId))
					   .add(Restrictions.ne("VisitStatus", "c").ignoreCase())
					   .add(Restrictions.ne("VisitStatus", "s").ignoreCase())
					   .add(Restrictions.eq("Hospital.Id", hospitalId))
					   .add(Restrictions.eq("VisitDate", new Date()))
					   .addOrder(Order.asc("PriorityNumber"))
					   .addOrder(Order.asc("TokenNo"));
				}else{
					crt.add(Restrictions.eq("Id", visitId)).addOrder(Order.desc("VisitDate"));
				}
				
			patientDataList =crt.list();

			int depWard =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "warddepartmenttype"));
			
			/*wardDepartment=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
										.createAlias("Department","dep")
										.add(Restrictions.eq("dep.DepartmentType.Id",depWard))
										.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")))
										.list();*/
			// commented by amit das on 20-05-2016
			 // added by amit das on 20-05-2016
			wardDepartment=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
					.createAlias("Department","dep")
					.add(Restrictions.eq("dep.DepartmentType.Id",depWard)).add(Restrictions.or(Restrictions.eq("dep.PaywardCheck","n").ignoreCase(), Restrictions.isNull("dep.PaywardCheck")))
					.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")))
					.list();
			
			
			masDepartmentList	=session.createCriteria(MasDepartment.class).add(Restrictions.eq("Id", deptId))
					.list();
			if(patientDataList.size()>0){
				/*Added By Srikanth 14-12-2017 Start*/
				List<Visit> lastVisitList=new ArrayList<Visit>();
				lastVisitList=session.createCriteria(Visit.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("Hin.Id", patientDataList.get(0).getHin().getId()))
						.addOrder(Order.desc("VisitDate")).list();
				
				if(lastVisitList.size()>1){
					lastVisit=lastVisitList.get(1);
					opdSurgeryHdrList=session.createCriteria(OpdSurgeryHeader.class)
							.add(Restrictions.eq("Visit.Id", lastVisit.getId())).list();
					if(opdSurgeryHdrList.size()>0){
						opdSurgeryHeader=opdSurgeryHdrList.get(0);
						List<OpdSurgeryDetail> surgeryDetailsList=new ArrayList<OpdSurgeryDetail>();
						surgeryDetailsList=session.createCriteria(OpdSurgeryDetail.class)
								.add(Restrictions.eq("OpdSurgery.Id", opdSurgeryHeader.getId())).list();
						//opdSurgeryDetail=(OpdSurgeryDetail)session.load(OpdSurgeryDetail.class, opdSurgeryHeader.getId());
						if(surgeryDetailsList.size()>0){
							for(OpdSurgeryDetail detail:surgeryDetailsList){
								if(detail.getPacRequest()!=null && detail.getPacRequest().equalsIgnoreCase("y")){
									map.put("opdSurgeryDtl", detail);
								}
							}
						}
						List<OtPreAnesthesiaDetails> otDetailsList=new ArrayList<OtPreAnesthesiaDetails>();
						OtPreAnesthesiaDetails otPreAnesthesiaDetails=new OtPreAnesthesiaDetails();
						otDetailsList=session.createCriteria(OtPreAnesthesiaDetails.class)
								.add(Restrictions.eq("Visit.Id",lastVisit.getId())).list();
						if(otDetailsList.size()>0){
							otPreAnesthesiaDetails=otDetailsList.get(0);
							map.put("otPreAnesthesiaDetails", otPreAnesthesiaDetails);
						}
						map.put("previousVisit", lastVisit);
						map.put("opdSurgeryHdr", opdSurgeryHeader);
						
					}
				}
				/*Added By Srikanth 14-12-2017 End*/
					Patient patient=patientDataList.get(0).getHin();
					preOpdPatientDetails=session.createCriteria(OpdPatientDetails.class).add(Restrictions.eq("Visit", patientDataList.get(0))).list();
					if(preOpdPatientDetails.size()>0){
						map.put("preOpdPatientDetails", preOpdPatientDetails.get(0));
						preOpdPatientHistory=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("OpdPatientDetails",preOpdPatientDetails.get(0))).list();
						if(preOpdPatientHistory.size()>0){
							map.put("preOpdPatientHistory", preOpdPatientHistory.get(0));
						}
					} 
					//Added by Arbind on 22-01-2018 start
					else {
						List<Visit> preVisitList=new ArrayList<Visit>();
						preVisitList=session.createCriteria(Visit.class)
								//.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Hin.Id", patientDataList.get(0).getHin().getId()))
								.addOrder(Order.desc("VisitDate"))
								.addOrder(Order.desc("VisitTime")).list();
						if(preVisitList.size()>1){
							preOpdPatientDetails=session.createCriteria(OpdPatientDetails.class).add(Restrictions.eq("Visit.Id", preVisitList.get(1).getId())).list();
							if(preOpdPatientDetails.size()>0){
								map.put("preOpdPatientDetails", preOpdPatientDetails.get(0));
								preOpdPatientHistory=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("OpdPatientDetails",preOpdPatientDetails.get(0))).list();
								if(preOpdPatientHistory.size()>0){
									map.put("preOpdPatientHistory", preOpdPatientHistory.get(0));
								}
							}
						}
					}

					int hinId = 0;
					if(patient != null) {
						hinId = patient.getId();
					}
					List<OpdPatientAllergyT> patientPreviousAllergy = session.createCriteria(OpdPatientAllergyT.class)
													.createAlias("OpdPatientAllergy", "alm")
													.add(Restrictions.eq("alm.Hin.Id", hinId))
													.add(Restrictions.eq("alm.Status", "y").ignoreCase()).list();
					String allergyStr="";
					for(OpdPatientAllergyT dic:patientPreviousAllergy){
						if(allergyStr.equals("")){
							allergyStr=dic.getAllergen();
						}else{
							allergyStr=allergyStr+"\n"+dic.getAllergen();
						}
					}
					map.put("allergyStr", allergyStr);
					//Added by Arbind on 22-01-2018 end
				 
				if(patient.getSex().getAdministrativeSexCode()!=null && patient.getSex().getAdministrativeSexCode().equalsIgnoreCase("f")){
					  List<OpdPatientDetails>phisioOPD= session.createCriteria(OpdPatientDetails.class)
							  .createAlias("Visit", "visit")
							  .add(Restrictions.eq("visit.Hin",patient))
							  .add(Restrictions.between("ConsultationDate", HMSUtil.getPreviousDate(Calendar.WEEK_OF_MONTH,-41),new Date()))
							  .list();
					  if(phisioOPD!=null && phisioOPD.size()>0){
						  OpdPatientDetails opd1=phisioOPD.get(0);
						  if(opd1!=null && opd1.getPregnancy()!=null && opd1.getPregnancy().equalsIgnoreCase("y")){
							  map.put("patient_pregnancy_status", opd1.getPregnancy());
							  map.put("patient_pregnancy_period", opd1.getPragnancyPeriod());
						  }
					  }
					  
					  int memberId = 0;
					  int phAncSurveyId = 0;
						if(patient.getMember()!= null){
							memberId = (Integer)patient.getMember().getId();
						}
						phMemberSurveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("Id", memberId)).list();
						
						// added by amit das on 13-09-2016
					 if(phMemberSurveyList!=null && phMemberSurveyList.size()>0)	
						 phProbablePregnancyList =	(List<PhProbablePregnancy>)session.createCriteria(PhProbablePregnancy.class).add(Restrictions.eq("MemberId", phMemberSurveyList.get(0).getMemberId())).list();
						
						
					if(phMemberSurveyList.size()>0){
						maxPhAncSurveyList = session.createCriteria(PhAncSurvey.class).add(Restrictions.eq("MemberId", phMemberSurveyList.get(0).getMemberId().longValue()))
														.setProjection(Projections.max("Id")).list();
						
						
						if(maxPhAncSurveyList.size()>0 && maxPhAncSurveyList.get(0)!= null){
							//phAncSurveyId = (Integer)maxPhAncSurveyList.get(0).getId();
							phAncSurveyList = session.createCriteria(PhAncSurvey.class).add(Restrictions.eq("Id", maxPhAncSurveyList.get(0))).list();
						}
						maxPhFpRegList = session.createCriteria(PhFpReg.class).add(Restrictions.eq("WifeId", phMemberSurveyList.get(0).getMemberId().toString()))
								.setProjection(Projections.max("Id")).list();
						
						if(maxPhFpRegList.size()>0 && maxPhFpRegList.get(0)!= null){
							phFpRegList = session.createCriteria(PhFpReg.class).add(Restrictions.eq("Id", maxPhFpRegList.get(0))).list();
							
							if(phFpRegList.size()>0){
								
								phFpRegDetailList = session.createCriteria(PhFpRegDetail.class).add(Restrictions.eq("RegId", phFpRegList.get(0).getRegId())).list();
							}
						}
						
					}
					
					babyHinIdList = session.createCriteria(Patient.class).add(Restrictions.eq("MotherHinNo", patient.getHinNo())).list();
					if(babyHinIdList.size()>0){
						int babyHinId = babyHinIdList.get(0).getId();
						babyDetailList = session.createCriteria(BabyDetails.class).add(Restrictions.eq("BabyHin.Id", babyHinId)).list();
					}
					deliveryDetailsList = session.createCriteria(DeliveryDetails.class).add(Restrictions.eq("Hin.Id", patient.getId())).list();
					
					if(phAncSurveyList.size()>0){
						PhAncSurvey phAncSurvey = phAncSurveyList.get(0);
						 String lmpDate =HMSUtil.convertDateToStringWithoutTime(phAncSurvey.getLmpDate())+" "+time;
							String curDate = currentDate+" "+time;
							SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy HH:mm");  
							Date d1 = null;
							Date d2 = null;
							 try {
							    d1 = format.parse(lmpDate);
							    d2 = format.parse(curDate);
						} catch (ParseException e) {
						    e.printStackTrace();
						}    
							 long diff = d2.getTime() - d1.getTime();
							 long diffdays = diff / (24 * 60 * 60 * 1000);
							 long diffWeeks = diffdays / 7;
							 map.put("diffWeeks",diffWeeks);
					}	
				}else{//added by govind 19-9-2016
					  int memberId = 0;
					  String immunization_status="";
					  int phAncSurveyId = 0;
						if(patient.getMember()!= null){
							 memberId = (Integer)patient.getMember().getId();
							 
						}
						phMemberSurveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("Id", memberId)).list();
						for(PhMemberSurvey phms:phMemberSurveyList){
							immunization_status=phms.getImmunizationStatus();
						}
						if(immunization_status!=null){
						if(immunization_status.equalsIgnoreCase("Partially Immunized")||immunization_status.equalsIgnoreCase("Unimmunized")){
						     map.put("immunization_status", "true");
						}
						}	
				}
				//Added by Arbind on 15-11-2017
				List<Object[]> fpisList = new ArrayList<Object[]>();
				List<Object[]> diseaseScreening = new ArrayList<Object[]>();
				if(phMemberSurveyList != null && phMemberSurveyList.size() > 0) {
					Long memberId = phMemberSurveyList.get(0).getMemberId();
					String member=String.valueOf(memberId);
					Long surveyId=(long)phMemberSurveyList.get(0).getId();
					/*String qry= "select * from ph_fpis_registration as fpis "
							+ "left join ph_ecr_registration as ecr on fpis.member_id=ecr.member2_id or  fpis.member_id=ecr.member1_id "
							+ "where fpis.member_id="+memberId;
							
			fpisList=session.createSQLQuery(qry).list();*/
					String qry1= "select * from ph_disease_registration_screening as pdrs "
							+ "left outer join ph_disease_registration_details as prd "
							+ "on prd.disease_reg_id=pdrs.reg_followup_id where  pdrs.member_id= "+memberId;
							
			diseaseScreening=(List)session.createSQLQuery(qry1).list();
			if(diseaseScreening.size()>0){
			map.put("diseaseScreening",diseaseScreening);	
			}else{
				map.put("diseaseScreening",diseaseScreening);	
			}
			if(fpisList.size()>0){
			map.put("chkFpisList","true");	
			}else{
				map.put("chkFpisList","false");	
			}
					phNCDRegList = session.createCriteria(PhDiseaseRegistration.class)
							.add(Restrictions.eq("MemberId", memberId))
							.add(Restrictions.eq("DiseaseType", "ncd").ignoreCase()).list();
					phNCDRegScreeningList=session.createCriteria(PhDiseaseRegistrationScreening.class)
							.add(Restrictions.eq("MemberId", memberId))
							.add(Restrictions.eq("SuspectedNcd", "Yes").ignoreCase())
							.add(Restrictions.or(Restrictions.isNull("CheckedStatus"), Restrictions.eq("CheckedStatus",""))).list();
					phdfollowup= session.createCriteria(PhDiseaseRegistrationFollow.class)
                            .add(Restrictions.eq("FollowupType", "NCDF").ignoreCase())
                            .add(Restrictions.ne("Complications", "Select").ignoreCase())
                            .add(Restrictions.eq("MemberId", member))
                            .add(Restrictions.or(Restrictions.isNull("CheckedStatus"), Restrictions.eq("CheckedStatus","")))
                            .list();
					
					String qry2= "select * from ph_revised_national_tuberculosis_screening as ph"
							+ " where member_id ="+memberId+ " and checked_status is null";
					
					phRNTCPRegScreeningList=(List)session.createSQLQuery(qry2).list();
					
					/*phRNTCPRegScreeningList=session.createCriteria(PhRevisedNationalTuberculosisScreening.class)
							.createAlias("Member", "mem")
							.add(Restrictions.eq("mem.MemberId", surveyId))
							.add(Restrictions.isNull("CheckedStatus")).list();*/
					if(phRNTCPRegScreeningList != null && phRNTCPRegScreeningList.size() > 0){
						map.put("rntcpPatient", "true");
					}else{
						map.put("rntcpPatient", "false");
					}
					
					if((phNCDRegScreeningList != null && phNCDRegScreeningList.size() > 0)||(phdfollowup != null && phdfollowup.size() > 0)){
						map.put("ncdPatient", "true");
						if(phNCDRegScreeningList != null && phNCDRegScreeningList.size() > 0){
                        String weightNcd="";
                        String hightNcd="";
						String ncdType="";
						for(PhDiseaseRegistrationScreening pdrs: phNCDRegScreeningList){
								weightNcd=pdrs.getWeight();
								hightNcd=pdrs.getHeight().toString();
								ncdType=pdrs.getFollowUpType();
								map.put("weightNcd", weightNcd);
								map.put("hightNcd", hightNcd);
								map.put("ncdType", ncdType);
							}
						}
					}else
					{
						map.put("ncdPatient", "false");	
					}
					map.put("memberId", memberId);
				}
				  preOpdpastIllhistory=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("Hin",patient)).addOrder(Order.asc("LastChgDate")).list();
						if(preOpdpastIllhistory.size()>0){
							map.put("preOpdPatientHistoryList", preOpdpastIllhistory);
							
				 }	
				
				// added by amit das on 06-09-2016
				if(patient!=null){
					List<PatientEpisode> patientEpisodeList =	getPatientEpisodeList(patient.getHinNo());
					map.put("patientEpisodeList", patientEpisodeList);
				}
				
				if(patient!=null){
					List<Patient> bloodGroupValueList =	new ArrayList<Patient>();
					bloodGroupValueList = session.createCriteria(Patient.class).add(Restrictions.idEq(patient.getId())).list();
					if(bloodGroupValueList.size()>0){
						if(bloodGroupValueList.get(0).getBloodGroupValue() != null && !bloodGroupValueList.get(0).getBloodGroupValue().equals("")){
							String bloodGroupValue = bloodGroupValueList.get(0).getBloodGroupValue();
							map.put("bloodGroupValue", bloodGroupValue);
						}
						if(bloodGroupValueList.get(0).getConfirmedStatus() != null && !bloodGroupValueList.get(0).getConfirmedStatus().equals("")){
							String bloodGroupStatus = bloodGroupValueList.get(0).getConfirmedStatus();
							map.put("bloodGroupStatus", bloodGroupStatus);
						}
					 }
					}
				
				Date dob = patientDataList.get(0).getHin().getDateOfBirth();
				
			if(HMSUtil.getCurrentAgeByDoB(dob) <=12){
				ChildExpectedWtHtChart childExpectedHW = null;
				int i=0;
		        int patientAgeInDays = HMSUtil.caluclateDaysByDOB(patientDataList.get(0).getHin().getDateOfBirth());
			    List<ChildExpectedWtHtChart> ChildExpectedWtHtChartList =
					session.createCriteria(ChildExpectedWtHtChart.class).createAlias("ChildGender", "g")
					.add(Restrictions.eq("g.Id",patientDataList.get(0).getHin().getSex().getId())).addOrder(Order.asc("ChildAgeInDays")).list();
			  
				  for(ChildExpectedWtHtChart list: ChildExpectedWtHtChartList)
				  {
					  if(list.getChildAgeInDays()>=patientAgeInDays)
					  {
						  map.put("childExpectedHW", list);
						  break;
					  }
					  i++;
				  }
					
			  }
			}
			
			/*Query query = session.createSQLQuery(
					"select s.stock_code from stock s where s.stock_code = :stockCode")
					.setParameter("stockCode", "7277");
			List result=null;
			if(null !=query.list())
			 result = query.list();*/
					
				
			secondpoinionList=session.createCriteria(OpdPatientSecondOpinion.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.VisitStatus","o").ignoreCase())
					.add(Restrictions.eq("visit.VisitDate", new Date()))
					.add(Restrictions.eq("visit.Id", visitId))
					.add(Restrictions.eq("OpinoinStatus", "c").ignoreCase()).list();
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}
		if(patientDataList.size()>0){
			map.put("patient", patientDataList.get(0).getHin());
		}
		map.put("secondpoinionList", secondpoinionList);
		map.put("storeBrandList", storeBrandList);
		map.put("patientDataList", patientDataList);
		map.put("dietDataList", dietDataList);
		map.put("bloodGroupList", bloodGroupList);
		map.put("wardDepartment",wardDepartment);
		map.put("masDepartmentList",masDepartmentList);
		map.put("phAncSurveyList",phAncSurveyList);
		map.put("deliveryDetailsList",deliveryDetailsList);
		map.put("babyDetailList",babyDetailList);
		map.put("phFpRegDetailList",phFpRegDetailList);
		map.put("phMemberSurveyList",phMemberSurveyList);//added by govind 17-9-2016
		map.put("phProbablePregnancyList", phProbablePregnancyList); // added by amit das on 13-09-2016
		map.put("phNCDRegList", phNCDRegList);
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getICDList(Map map) {
		List<MasIcd> itemList = new ArrayList<MasIcd>();
		List<DiseasesIcdMapping> diseaseIcdMapList = new ArrayList<DiseasesIcdMapping>();
		Session session = (Session) getSession();
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String str = "%" + map.get("autoHint") + "%";
			/*
			 * String query = "from MasIcd as icd where icd.IcdName like '" +
			 * str + "' and Status='T'"; Query q = session.createQuery(query);
			 */
			if(map.get("icdCode")!=null){
				String icdCode = (String) map.get("icdCode");
				Criteria criteria = session.createCriteria(MasIcd.class, "icd")
						.add(Restrictions.eq("icd.IcdCode", icdCode).ignoreCase())
						.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
				List<MasIcd>mList=criteria.list();
				if(mList.size()>0){
					map.put("icd", mList.get(0));
				}
				diseaseIcdMapList=session.createCriteria(DiseasesIcdMapping.class).createAlias("IcdCode", "icd").add(Restrictions.eq("icd.IcdCode", icdCode)).list();
				if(diseaseIcdMapList.size()>0){
					DiseasesIcdMapping disMap=diseaseIcdMapList.get(0);
					map.put("otherpregister", "pr");
				}
			}else{
				Criteria criteria = session.createCriteria(MasIcd.class, "icd")
						.add(Restrictions.like("icd.IcdName", str).ignoreCase())
						.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
				criteria.setMaxResults(100);
				itemList = criteria.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOPDDetails(Map map) {
		Session session = null;
		session = (Session) getSession();
	/*	List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();*/
		List<OpdTemplate> templateListForInvestigation = new ArrayList<OpdTemplate>();
		List<OpdTemplate> templateListForInvestigationInstituteWise = new ArrayList<OpdTemplate>();
		List<OpdTemplate> templateListForInvestigationDoctorWise =new ArrayList<OpdTemplate>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<Visit> listOfPreviousVisit3 = new ArrayList<Visit>();
		List<Visit> listOfPreviousVisit2 = new ArrayList<Visit>();
		List<Visit> listOfPreviousVisit1 = new ArrayList<Visit>();
		List<OpdPatientDetails> listOfOpd3 = new ArrayList<OpdPatientDetails>();
		List<OpdPatientDetails> listOfOpd2 = new ArrayList<OpdPatientDetails>();
		List<OpdPatientDetails> listOfOpd1 = new ArrayList<OpdPatientDetails>();

		List<MasAllergyProduct> allergyProductsList = new ArrayList<MasAllergyProduct>();
		List<MasSeverityCode> saverityCodesList = new ArrayList<MasSeverityCode>();
		List<RouteOfAdministration> routeOfAdministrationList = new ArrayList<RouteOfAdministration>();
		List<MasInstructionMaster> masInstructionMasterList = new ArrayList<MasInstructionMaster>();
		List<MasDepartment> wardDepartment = new ArrayList<MasDepartment>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();

		List<MasDistrict> masDistricts = new ArrayList<MasDistrict>();
//		List<MasHospital> masHospitals = new ArrayList<MasHospital>();
		List<Object[]> masHospitals = new ArrayList<Object[]>();

		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<MedicoLegalDetails>mlcList = new ArrayList<MedicoLegalDetails>();
		List<MasStoreOutItem> masStoreOutItemsList = new ArrayList<MasStoreOutItem>();
		int deptId =0;
		int visitNo = 0;
		int hinId = 0;
		int token = 0;
		int userId =0;
		int hospitalId=0;
		int visitId=0;
		int districtId=0;
		int hospitalTypeId = 0;
		String uhidNo="";
		String fromTemplate="";
		String deptName= "";
		if(map.get("districtId")!=null){
			districtId =(Integer) map.get("districtId");
		}
		if(map.get("hospitalTypeId")!=null){
			hospitalTypeId =(Integer) map.get("hospitalTypeId");
		}
		if(map.get("deptName")!=null){
			deptName =(String) map.get("deptName");
		}
		
		if(map.get("hospitalId")!=null){
			hospitalId =(Integer) map.get("hospitalId");
		}
		
		if(map.get("deptId")!=null){
			deptId = (Integer) map.get("deptId");
		}
		if(map.get("visitNo")!=null){
			visitNo = (Integer) map.get("visitNo");
		}
		if(map.get("hinId")!=null){
			 hinId = (Integer) map.get("hinId");
		}
		if(map.get("deptId")!=null){
			token = (Integer) map.get("token");
		}
		
		if(map.get("visitId")!=null){
			visitId =(Integer) map.get("visitId");
		}
		if(map.get("docId")!=null){
			userId =(Integer) map.get("docId");
		}
		
		if(map.get("fromTempate")!=null){
			fromTemplate = (String)map.get("fromTempate");
		}
		
		boolean saved = false;
		List<Object[]> phDiseaseRegistrationFollowList = new ArrayList<Object[]>();
		String[] hospitalTypeNotIncludeList = {"BS","MHU","MHU-O","MHU-T","MHU-D","Admn","BSC","BB","TI","SON","DrW","Store","RU","PPU","ACC","AWC","WH-KMSCL","Lab-Pvt","RC-Pvt","DC-Pvt","MS-Pvt","PHL"};
		
		try {
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			saved = true;
			String dept = "Consultation Room";
			List<TempTableComorbidity>comorbidities=session.createCriteria(TempTableComorbidity.class).add(Restrictions.ne("AddEditTime", new Date())).list();
			hbt.deleteAll(comorbidities);
			
			
			allergyProductsList = session
					.createCriteria(MasAllergyProduct.class)
					.add(Restrictions.eq("Status", "y".toLowerCase())
							.ignoreCase()).list();
			saverityCodesList = session
					.createCriteria(MasSeverityCode.class)
					.add(Restrictions.eq("Status", "y".toLowerCase())
							.ignoreCase()).list();
			routeOfAdministrationList = session
					.createCriteria(RouteOfAdministration.class)
					.add(Restrictions.eq("Status", "y".toLowerCase())
							.ignoreCase()).addOrder(Order.asc("OrderNo")).list();
			masInstructionMasterList = session
					.createCriteria(OpdInstructionTreatment.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			
			masStoreOutItemsList = session.createCriteria(MasStoreOutItem.class)
					.add(Restrictions.eq("Status", "Y").ignoreCase()).list();
			
			int StateId =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "stateId"));
			masDistricts = session.createCriteria(MasDistrict.class)
					.add(Restrictions.eq("State.Id", StateId))
					.add(Restrictions.eq("Status", "Y").ignoreCase())
					.list();
			
			masHospitals = session.createCriteria(MasHospital.class)
					.add(Restrictions.eq("District.Id", districtId))
					//.add(Restrictions.eq("HospitalType.Id", hospitalTypeId))
					.add(Restrictions.ne("Id", hospitalId))
					.add(Restrictions.eq("Status", "Y").ignoreCase())
					.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("HospitalName")).add(Projections.property("HospitalType.Id")))
					.addOrder(Order.asc("HospitalName")).list();
			
			int depWard =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "warddepartmenttype".trim()));
			/*wardDepartment=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
										.createAlias("Department","dep")
										.add(Restrictions.eq("dep.DepartmentType.Id",depWard))
										.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")))
										.list();*/
			// commented by amit das on 20-05-2016
			// added by amit das on 20-05-2016
			wardDepartment=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
					.createAlias("Department","dep")
					.add(Restrictions.eq("dep.DepartmentType.Id",depWard)).add(Restrictions.or(Restrictions.eq("dep.PaywardCheck","n").ignoreCase(), Restrictions.isNull("dep.PaywardCheck")))
					.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")))
					.list();

			int departmentTpeId =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "departmentTpeId"));
			deptList =session.createCriteria(MasInstituteDepartment.class)
					.createAlias("Department","dep")
					.add(Restrictions.eq("Institute.Id", hospitalId))
					.add(Restrictions.eq("dep.DepartmentType.Id", 1))
					.add(Restrictions.eq("Status", 'y').ignoreCase())
					.setProjection(Projections.property("Department"))
					.addOrder(Order.asc("dep.DepartmentName"))
					.list();
			
			/*templateList = session.createCriteria(OpdTemplate.class)
					.createAlias("Department", "dept")
					.add(Restrictions.eq("dept.Id", deptId)).list();*/
			
			/*templateListForInvestigation = session.createCriteria(OpdTemplate.class).createAlias("Department", "dept")
												.add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNull("Hospital.Id")).add(Restrictions.isNull("templateLocal")).list();
			
			
			templateListForInvestigationInstituteWise = session.createCriteria(OpdTemplate.class)
								.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.isNull("templateLocal")).list();
			
			templateListForInvestigation.addAll(templateListForInvestigationInstituteWise);*/ 
			
				// Added By Om Tripathi for default personal template selection   13/1/2018
						templateListForInvestigation = session.createCriteria(OpdTemplate.class)
								//.createAlias("Department", "dept")
								/*.add(Restrictions.eq("dept.Id", deptId))*/
								.add(Restrictions.eq("templateLocal", userId))
								.add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("Status","y").ignoreCase())
								.list();
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			// hospitalTypeList = session.createCriteria(MasHospitalType.class).add(Restrictions.eq("Status", "y").ignoreCase()).addOrder(Order.asc("HospitalTypeName")).list();
			
			hospitalTypeList = session.createCriteria(MasHospitalType.class).add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.not(Restrictions.in("InstituteTypeShortName", hospitalTypeNotIncludeList))).addOrder(Order.asc("HospitalTypeName")).list();
			List<Visit> lastVisit = new ArrayList<Visit>();
			lastVisit = getSession().createQuery("FROM Visit visit WHERE visit.Id != "+visitId+" and visit.Hin = "+ hinId + " and (visit.VisitStatus!='W' or visit.VisitStatus!='w') ORDER BY visit.Id desc").setMaxResults(3).list();
			
			Patient patient=(Patient)hbt.load(Patient.class, hinId);
			String majorHealthIssue="";
			if(patient != null && patient.getMember()!=null && patient.getMember().getMajorHealthIssue() != null &&  !patient.getMember().getMajorHealthIssue().equals("")){
				majorHealthIssue=patient.getMember().getMajorHealthIssue();
			}
			
			
			
			OpdPatientDetails opdPatientDetails = null;
			String lastEncounterDetail = "";
			Calendar cal = Calendar.getInstance();
	        cal.add(Calendar.DAY_OF_MONTH, 14);
		    Date twoWeekLaterDate = cal.getTime();
		    int opdPatientIdForMLC=0;
		    int referredVisit=0;
		    List<OpdPatientDetails> list=null;
			for (Visit visit : lastVisit) {
				int lastVisitId=0;
				lastVisitId = visit.getId();
				uhidNo=visit.getHin().getHinNo();
				
				list=session.createCriteria(OpdPatientDetails.class)
						.createAlias("Visit","vis")
						.add(Restrictions.eq("vis.Hin.Id", hinId))
						.add(Restrictions.ge("ReferTillDate", new Date()))
						.list();
				if(list.size()>0){
					opdPatientIdForMLC = list.get(0).getId();
					opdPatientDetails=list.get(0);
					referredVisit=opdPatientDetails.getVisit().getId();
				}else{
					List<OpdPatientDetails> opdList=session.createCriteria(OpdPatientDetails.class).createAlias("Visit","vis").add(Restrictions.eq("vis.Id", visitId)).list();
					if(opdList.size()>0){
						opdPatientDetails=opdList.get(0);
					}	
				}
				if(opdPatientIdForMLC != 0){
					mlcList = session.createCriteria(MedicoLegalDetails.class).add(Restrictions.eq("OpdPatientDetail.Id", opdPatientIdForMLC)).list();
				}
				
				List<DischargeIcdCode> dischargeIcdCodeLast3Visit = new ArrayList<DischargeIcdCode>();
				dischargeIcdCodeLast3Visit = session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("Visit.Id", lastVisitId)).list();
				lastEncounterDetail += HMSUtil.convertDateToStringTypeDateOnly(visit.getVisitDate());
				lastEncounterDetail += ", "+ visit.getDepartment().getDepartmentName();
				//added by govind 16-03-2017
				String otherDiag=null;
				int lastVisitIdForEncounterDetails = 0;
				if (dischargeIcdCodeLast3Visit.size() == 0) {					
					List<OpdPatientDetails> otherDiagList=session.createCriteria(OpdPatientDetails.class).createAlias("Visit","vis").add(Restrictions.eq("vis.Id", lastVisitId)).list();
					if(otherDiagList.size()>0){
						OpdPatientDetails opd=otherDiagList.get(0);
						lastVisitIdForEncounterDetails = opd.getVisit()!=null?opd.getVisit().getId():0;
						if(opd.getInitialDiagnosis()!=null){
							otherDiag =opd.getInitialDiagnosis();
						}
					}
					//if(otherDiag!=null){
					if(lastVisitIdForEncounterDetails!=0){
						// lastEncounterDetail+=", "+otherDiag+" "+System.getProperty("line.separator");
						if(otherDiag!=null) {
							lastEncounterDetail += ", " +(otherDiag!=null?otherDiag:"")+" "+System.getProperty("line.separator");
						}else {
							lastEncounterDetail += ", Patient visit complete" +(otherDiag!=null?otherDiag:"")+" "+System.getProperty("line.separator");
						}
					}else{
						lastEncounterDetail += ", Patient visit incomplete" +System.getProperty("line.separator");
					}
				}else{
				
				//added by amit das 12-06-2017
				for (DischargeIcdCode dischargeIcdCode : dischargeIcdCodeLast3Visit) {
					lastEncounterDetail += ", "+ dischargeIcdCode.getIcd().getIcdName();
				}
				
				
				List<OpdPatientDetails> otherDiagList=session.createCriteria(OpdPatientDetails.class).createAlias("Visit","vis").add(Restrictions.eq("vis.Id", lastVisitId)).list();
				if(otherDiagList.size()>0){
					OpdPatientDetails opd=otherDiagList.get(0);
					lastVisitIdForEncounterDetails = opd.getVisit()!=null?opd.getVisit().getId():0;
					if(opd.getInitialDiagnosis()!=null){
						otherDiag =opd.getInitialDiagnosis();
					}
				}
				
				//if(otherDiag!=null)
				if(lastVisitIdForEncounterDetails!=0)
					lastEncounterDetail+=","+(otherDiag!=null?otherDiag:"")+" "+System.getProperty("line.separator");
				else	 //ended by amit das 12-06-2017
					lastEncounterDetail += " "+System.getProperty("line.separator");
				
				
				}
				
			}
			//opdPatientDetails = null;
			List<OpdPatientDetails> listlist=session.createCriteria(OpdPatientDetails.class).createAlias("Visit","vis").add(Restrictions.eq("vis.Id", visitId)).list();
			if(listlist.size()>0){
				opdPatientDetails=listlist.get(0);
				
			}		

			
		//	List<Visit> phlastVisit = new ArrayList<Visit>();
			Visit phlastVisit = new Visit();
			
			///phlastVisit = getSession().createQuery("FROM Visit visit WHERE visit.Id != "+visitId+"); 
				//	phlastVisit = (Visit) getSession().createQuery("FROM Visit visit WHERE visit.Id = "+visitId+" and visit.Hospital.Id ="+hospitalId+"");
				phlastVisit = (Visit)session.load(Visit.class,visitId);
					if(null !=phlastVisit && null !=phlastVisit.getHin())
					uhidNo=phlastVisit.getHin().getHinNo();

			String quryy="select m.name,s.administrative_sex_name,hos.hospital_name,m.uhid_no,prf.follow_date,prf.syndromic_surveillance from ph_disease_registration_follow as prf "
					+ "left join  ph_member_survey as m on m.member_id=cast(prf.member_id as bigint) "
					+ "left join mas_administrative_sex as s on s.administrative_sex_id= m.gender "
					+ "left join mas_hospital as hos on hos.hospital_id =cast(prf.institution_name as int) where  m.uhid_no = :uhidNo and cast(prf.institution_name as int)= :hospId" ;
			
			Query query = session.createSQLQuery(quryy);
			query.setParameter("uhidNo", uhidNo);
			query.setParameter("hospId", hospitalId);
			phDiseaseRegistrationFollowList = query.list();
			
			List<DischargeIcdCode> dischargeIcdCodeLast3Visit = new ArrayList<DischargeIcdCode>();
			dischargeIcdCodeLast3Visit = session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("Visit.Id", visitId)).list();
			map.put("dischargeIcdCodeLast3Visit", dischargeIcdCodeLast3Visit);
			
			
			//patient allergy status :start
			List<OpdPatientAllergyT> patientPreviousAllergy = session.createCriteria(OpdPatientAllergyT.class)
											.createAlias("OpdPatientAllergy", "alm")
											.add(Restrictions.eq("alm.Hin.Id", hinId))
											//.add(Restrictions.eq("Status", "y").ignoreCase())
											.list();
			String allergyStr="";
			for(OpdPatientAllergyT dic:patientPreviousAllergy){
				if(allergyStr.equals("")){
					allergyStr=dic.getAllergen();
				}else{
					allergyStr=allergyStr+"\n"+dic.getAllergen();
				}
			}
			map.put("allergyStr", allergyStr);
			
			
			//patient comorbidity status :start
			List<DischargeIcdCode> comorbidityList = new ArrayList<DischargeIcdCode>();
			
			comorbidityList= session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("Hin.Id", hinId))
											.add(Restrictions.or( Restrictions.isNotNull("ComorbidityStatus"),  Restrictions.eq("ComorbidityStatus", "y").ignoreCase()) )
											//.setProjection(Projections.distinct(Projections.property("Icd")))
											.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			
			
			String comorbidityStr="";
			for(DischargeIcdCode dic:comorbidityList){
				if(comorbidityStr.equals("")){
					if(dic.getSinceMonth() != null){
					comorbidityStr=dic.getIcd().getIcdName()+" :Since Month "+dic.getSinceMonth();
					}else if(dic.getSinceYear() != null){
						comorbidityStr=dic.getIcd().getIcdName()+" :Since Year "+dic.getSinceYear();
					}else{
						comorbidityStr=dic.getIcd().getIcdName();
					}
					
				}else{
					if(dic.getSinceMonth() != null){
					comorbidityStr=comorbidityStr+"\n"+dic.getIcd().getIcdName()+"Since Month  "+dic.getSinceMonth();
					}else if(dic.getSinceYear() != null){
						comorbidityStr=comorbidityStr+"\n"+dic.getIcd().getIcdName()+"Since Year  "+dic.getSinceYear();
					}else{
						comorbidityStr=comorbidityStr+"\n"+dic.getIcd().getIcdName();
					}
					
				}
			}
			map.put("comorbidityStr", comorbidityStr);
		
			
			if(visitId!=0){
				Visit visit=(Visit)hbt.load(Visit.class,visitId);
				if(visit!=null){
					Integer lastOpenBy=visit.getOpenby()!=null ?visit.getOpenby().getId():0;
					String lastOpenAt=visit.getOpenat()!=null && !"".equals(visit.getOpenat())?visit.getOpenat():"";
					if(lastOpenAt!=null && !lastOpenAt.equals("") && lastOpenBy!=0){
						String dateStop = HMSUtil.convertDateToStringOnlyTime(new Date());
						SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
						Date d1 = format.parse(lastOpenAt);
						Date d2 = format.parse(dateStop);
						long diff = d2.getTime() - d1.getTime();
						long diffMinutes = diff / (60 * 1000) % 60;
						if(userId!=lastOpenBy && diffMinutes>=5 && lastOpenBy>0){
							logger.info("lastOpenBy"+lastOpenBy);
								map.put("openStatus",false);
								visit.setOpenby(new Users(userId));
								visit.setOpenat(HMSUtil.convertDateToStringOnlyTime(new Date()));
								hbt.update(visit);
								map.put("patientStatus",true);
								map.put("pvisitDate", visit.getVisitDate());
								map.put("uhidNum", uhidNo);
								map.put("VisitId", visitId);
						}else if(userId==lastOpenBy){
								map.put("openStatus",false);
								visit.setOpenby(new Users(userId));
								visit.setOpenat(HMSUtil.convertDateToStringOnlyTime(new Date()));
								hbt.update(visit);
								map.put("patientStatus",true);
								map.put("pvisitDate", visit.getVisitDate());
								map.put("uhidNum", uhidNo);
								map.put("VisitId", visitId);
						}else if(userId!=lastOpenBy && diffMinutes<=5){
								map.put("openStatus",true);
								map.put("patientStatus",true);
								map.put("pvisitDate", visit.getVisitDate());
								map.put("uhidNum", uhidNo);
								map.put("VisitId", visitId);
						}
					}else{
						logger.info("userId"+userId);
						map.put("openStatus",false);
						visit.setOpenby(new Users(userId));
						visit.setOpenat(HMSUtil.convertDateToStringOnlyTime(new Date()));
						hbt.update(visit); 
						map.put("patientStatus",true);
						map.put("pvisitDate", visit.getVisitDate());
						map.put("uhidNum", uhidNo);
						map.put("VisitId", visitId);
					}
					tx.commit();
				}
			}
			
			/*get partked patient opd details */
			List<PatientPrescriptionDetails> patientPrescriptionDetails= new ArrayList<PatientPrescriptionDetails>();
			List<PatientPrescriptionDetails> patientOtherPrescriptionDetails= new ArrayList<PatientPrescriptionDetails>();
			
			/*patientPrescriptionDetails = session.createCriteria(PatientPrescriptionDetails.class)
					.createAlias("Prescription", "prescription")
					.createAlias("prescription.Hin", "hin")
					.createAlias("prescription.Visit", "visit")
					.add(Restrictions.eq("hin.Id", hinId))
					.add(Restrictions.eq("visit.CurPharVisitStatus", "y").ignoreCase())
					.add(Restrictions.eq("visit.Id", visitId))
					.addOrder(Order.asc("IssuedStatus"))
					.list();*/
			// commented by amit das on 16-09-2016
			
			// added by amit das on 16-09-2016
			PatientPrescriptionDetails prescriptionDetails = null;
			PatientPrescriptionDetails otherPrescriptionDetails = null;
			PatientPrescriptionHeader prescriptionHeader = null;
			MasStoreItem masStoreItem = null;
			MasStoreOutItem masStoreOutItem = null;
			MasFrequency frequency = null;
			MasManufacturer manufacturer = null;
			RouteOfAdministration routeOfAdministration = null;
			OpdInstructionTreatment opdInstructionTreatment = null;
			SQLQuery sqlQuery =	session.createSQLQuery("select * from patient_prescription_details ppd join  patient_prescription_header pph on ppd.prescription_id = pph.prescription_id "+
									"join  patient p on p.hin_id = pph.hin_id join  visit v on v.visit_id = pph.visit_id left join inj_appointment_details iad on iad.prescription_details_id = ppd.id "+
									"where p.hin_id=:hinId and v.visit_id = :visitId and LOWER(v.cur_phar_visit_status) = 'y'  and (immunization_inj = 'n' or immunization_inj is null)");
			
			sqlQuery.setParameter("hinId", hinId);
			sqlQuery.setParameter("visitId", visitId);
			
			List<Object[]> results =	sqlQuery.list();	
			
			if(results!=null && results.size()>0){
				for(Object[]objects : results){
					if(objects[2]!=null){
						prescriptionDetails = new PatientPrescriptionDetails();
						prescriptionDetails.setId((Integer)objects[0]);

						prescriptionHeader = (PatientPrescriptionHeader)session.get(PatientPrescriptionHeader.class, (Integer)objects[1]);
						prescriptionDetails.setPrescription(prescriptionHeader);

						masStoreItem = (MasStoreItem)session.get(MasStoreItem.class, (Integer)objects[2]);
						prescriptionDetails.setItem(masStoreItem);

						prescriptionDetails.setDosage(((BigDecimal)objects[3]).floatValue());

						frequency = (MasFrequency)session.get(MasFrequency.class, (Integer)objects[4]);
						prescriptionDetails.setFrequency(frequency);

						prescriptionDetails.setNoOfDays((Integer)objects[5]);
						prescriptionDetails.setTotal(((BigDecimal)objects[6]).floatValue());
						prescriptionDetails.setType((String)objects[7]);

						if(objects[8]!=null)
							prescriptionDetails.setDispensingPrice(((BigDecimal)objects[8]).floatValue());

						prescriptionDetails.setBrandId((Integer)objects[9]);

						if(objects[10]!=null){
							manufacturer = (MasManufacturer)session.get(MasManufacturer.class, (Integer)objects[10]);
							prescriptionDetails.setManufacturer(manufacturer);
						}

						if(objects[11]!=null)
							prescriptionDetails.setTotalStoreIssuedQty(((BigDecimal)objects[11]).floatValue());

						prescriptionDetails.setIssuedStatus((String)objects[12]);

						if(objects[13]!=null){
							routeOfAdministration =  (RouteOfAdministration)session.get(RouteOfAdministration.class,(Integer)objects[13]);
							prescriptionDetails.setRoute(routeOfAdministration);
						}

						if(objects[14]!=null){
							opdInstructionTreatment = (OpdInstructionTreatment)session.get(OpdInstructionTreatment.class, (Integer)objects[14]);
							prescriptionDetails.setInsrtuction(opdInstructionTreatment);
						}

						prescriptionDetails.setSplInstruction((String)objects[15]);

						if(objects[16]!=null)
							prescriptionDetails.setCurStoreIssuedQty(((BigDecimal)objects[16]).floatValue());

						prescriptionDetails.setReferToEmpanelled((String)objects[17]);
						prescriptionDetails.setNotAvailable((String)objects[18]);

						if(objects[19]!=null)
							prescriptionDetails.setEmpRequestQty(((BigDecimal)objects[19]).floatValue());

						if(objects[20]!=null)
							prescriptionDetails.setEmpIssuedQty(((BigDecimal)objects[20]).floatValue());

						if(objects[21]!=null)
							prescriptionDetails.setTotalEmpIssuedQty(((BigDecimal)objects[21]).floatValue());

						prescriptionDetails.setStartDate((Date)objects[22]);
						prescriptionDetails.setEndDate((Date)objects[23]);
						prescriptionDetails.setNursingStatus((String)objects[25]);
						prescriptionDetails.setNursingTime((String)objects[26]);
						prescriptionDetails.setNursingDate((Date)objects[27]);
						prescriptionDetails.setInjectionStatus((String)objects[28]);
						prescriptionDetails.setInjGivenQty((Long)objects[29]);
						prescriptionDetails.setCt((String)objects[30]);
						patientPrescriptionDetails.add(prescriptionDetails);
					}else if(objects[32]!=null){
						otherPrescriptionDetails = new PatientPrescriptionDetails();
						otherPrescriptionDetails.setId((Integer)objects[0]);
						
						prescriptionHeader = (PatientPrescriptionHeader)session.get(PatientPrescriptionHeader.class, (Integer)objects[1]);
						otherPrescriptionDetails.setPrescription(prescriptionHeader);
						
						masStoreOutItem = (MasStoreOutItem)session.get(MasStoreOutItem.class, (Integer)objects[32]);
						otherPrescriptionDetails.setItemOut(masStoreOutItem);
						
						otherPrescriptionDetails.setDosage(((BigDecimal)objects[3]).floatValue());
						
						frequency = (MasFrequency)session.get(MasFrequency.class, (Integer)objects[4]);
						otherPrescriptionDetails.setFrequency(frequency);
						
						otherPrescriptionDetails.setNoOfDays((Integer)objects[5]);
						otherPrescriptionDetails.setTotal(((BigDecimal)objects[6]).floatValue());
						otherPrescriptionDetails.setType((String)objects[7]);
						
						if(objects[8]!=null)
						otherPrescriptionDetails.setDispensingPrice(((BigDecimal)objects[8]).floatValue());
						
						otherPrescriptionDetails.setBrandId((Integer)objects[9]);
						
						if(objects[10]!=null){
						manufacturer = (MasManufacturer)session.get(MasManufacturer.class, (Integer)objects[10]);
						otherPrescriptionDetails.setManufacturer(manufacturer);
						}
						
						if(objects[11]!=null)
						otherPrescriptionDetails.setTotalStoreIssuedQty(((BigDecimal)objects[11]).floatValue());
						
						otherPrescriptionDetails.setIssuedStatus((String)objects[12]);
						
						if(objects[13]!=null){
						routeOfAdministration =  (RouteOfAdministration)session.get(RouteOfAdministration.class,(Integer)objects[13]);
						otherPrescriptionDetails.setRoute(routeOfAdministration);
						}
						
						if(objects[14]!=null){
						opdInstructionTreatment = (OpdInstructionTreatment)session.get(OpdInstructionTreatment.class, (Integer)objects[14]);
						otherPrescriptionDetails.setInsrtuction(opdInstructionTreatment);
						}
						
						otherPrescriptionDetails.setSplInstruction((String)objects[15]);
						
						if(objects[16]!=null)
						otherPrescriptionDetails.setCurStoreIssuedQty(((BigDecimal)objects[16]).floatValue());
						
						otherPrescriptionDetails.setReferToEmpanelled((String)objects[17]);
						otherPrescriptionDetails.setNotAvailable((String)objects[18]);
						
						if(objects[19]!=null)
						otherPrescriptionDetails.setEmpRequestQty(((BigDecimal)objects[19]).floatValue());
						
						if(objects[20]!=null)
						otherPrescriptionDetails.setEmpIssuedQty(((BigDecimal)objects[20]).floatValue());
						
						if(objects[21]!=null)
						otherPrescriptionDetails.setTotalEmpIssuedQty(((BigDecimal)objects[21]).floatValue());
						
						otherPrescriptionDetails.setStartDate((Date)objects[22]);
						otherPrescriptionDetails.setEndDate((Date)objects[23]);
						otherPrescriptionDetails.setNursingStatus((String)objects[25]);
						otherPrescriptionDetails.setNursingTime((String)objects[26]);
						otherPrescriptionDetails.setNursingDate((Date)objects[27]);
						otherPrescriptionDetails.setInjectionStatus((String)objects[28]);
						otherPrescriptionDetails.setInjGivenQty((Long)objects[29]);
						otherPrescriptionDetails.setCt((String)objects[30]);
						patientOtherPrescriptionDetails.add(otherPrescriptionDetails);
						
					}
				}
			}
			
			if(patientPrescriptionDetails.size()>0)
			{
				List<Integer> prescribedItemId= new ArrayList<>();
				for(PatientPrescriptionDetails pd:patientPrescriptionDetails)
					prescribedItemId.add(pd.getItem().getId());
				
				String departmentCodeForPharmacy=null;
				URL resourcePath = Thread.currentThread().getContextClassLoader()
						.getResource("pharmacy.properties");
				try {
					Properties prop = new Properties();
					prop.load(new FileInputStream(new File(resourcePath.getFile())));
					departmentCodeForPharmacy = prop
							.getProperty("departmentCodeOfpharmacyForOpd");
				} catch (IOException e) {
					e.printStackTrace();
				}
			
				List<StoreItemBatchStock> itemBatchStockList= session.createCriteria(StoreItemBatchStock.class)
						.createAlias("Item", "item")
						.createAlias("Hospital", "h")
						.createAlias("Department", "dept")
						.add(Restrictions.in("item.Id", prescribedItemId))
						.add(Restrictions.eq("dept.DepartmentCode",departmentCodeForPharmacy).ignoreCase())
						.add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
						.add(Restrictions.and(Restrictions.isNotNull("ExpiryDate"),
									Restrictions.ge("ExpiryDate",HMSUtil.convertStringTypeDateToDateType((String)HMSUtil.getCurrentDateAndTime().get("currentDate"))))).list();
				
				
				if(itemBatchStockList.size()>0){
					Set<Integer> availStockItemIdSet = new HashSet<>();
					for(StoreItemBatchStock st:itemBatchStockList)
						availStockItemIdSet.add(st.getItem().getId());
					
					map.put("availStockItemIdSet",availStockItemIdSet);
					}
			}
			
			List<DgOrderdt> dgOrderdts= new ArrayList<DgOrderdt>();
			dgOrderdts = session.createCriteria(DgOrderdt.class)
					.createAlias("Orderhd", "orderhd")
					.createAlias("orderhd.Hin", "hin")
					.createAlias("orderhd.Visit", "visit")
					.add(Restrictions.eq("orderhd.OrderDate", new Date()))
					.add(Restrictions.eq("orderhd.OrderStatus", "p").ignoreCase())
					.add(Restrictions.eq("visit.Id", visitId))
					.add(Restrictions.eq("hin.Id", hinId))
					.addOrder(Order.asc("ChargeCode.Id"))
					.list();
			if(dgOrderdts.size() >0)
			{
				List<Integer>chargeCodeids=new ArrayList<Integer>();
				for(DgOrderdt dt:dgOrderdts){
					chargeCodeids.add(dt.getChargeCode().getId());
				}
				
				if(chargeCodeids.size()>0){
					List<MasHospitalwiseChargecode>msCode=session.createCriteria(MasHospitalwiseChargecode.class).add(Restrictions.in("ChargeCode.Id", chargeCodeids))
							.add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.or(Restrictions.eq("Blocked", "n"), Restrictions.isNull("Blocked")))
							.list();
					
					if(msCode.size()>0){
						Set<Integer>availableInvesStatus=new HashSet<Integer>();
					for(MasHospitalwiseChargecode code:msCode){
						availableInvesStatus.add(code.getChargeCode().getId());
					  }
					map.put("availableInvesStatus", availableInvesStatus);
					}
				}
			}
			List<PatientInvestigationDetails> patientInvestigationDetails= new ArrayList<PatientInvestigationDetails>();
			patientInvestigationDetails = session.createCriteria(PatientInvestigationDetails.class)
					.createAlias("InvestigationHeader","pih")
					.createAlias("pih.Hin", "hin")
					.createAlias("pih.Visit", "visit")
					.add(Restrictions.eq("hin.Id", hinId))
					.add(Restrictions.eq("visit.Id", visitId))
					.addOrder(Order.asc("ChargeCode.Id"))
					.list();
			
			List<DgSampleCollectionDetails> dgSampleCollectionDetails= new ArrayList<DgSampleCollectionDetails>();
			dgSampleCollectionDetails = session.createCriteria(DgSampleCollectionDetails.class)
					.createAlias("SampleCollectionHeader", "sampleCollectionHeader")
					.createAlias("sampleCollectionHeader.Order", "orderhd")
					.createAlias("orderhd.Hin", "hin")
					.createAlias("orderhd.Visit", "visit")
					.add(Restrictions.eq("hin.Id", hinId))
					.add(Restrictions.eq("visit.Id", visitId))
					.add(Restrictions.eq("sampleCollectionHeader.OrderStatus", "P").ignoreCase())
					.addOrder(Order.asc("ChargeCode.Id"))
					.list();
			
			List<OpdPatientAllergyT>opdPatientAllergyTs= new ArrayList<OpdPatientAllergyT>();
			opdPatientAllergyTs = session.createCriteria(OpdPatientAllergyT.class)
					.createAlias("OpdPatientAllergy", "opallergy")
					.add(Restrictions.eq("opallergy.Hin.Id", hinId))
					.add(Restrictions.eq("opallergy.Visit.Id", visitId))
					//.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("Id"))
					.list();
			
			List<ProcedureDetails>procedureDetails= new ArrayList<ProcedureDetails>();
			procedureDetails = session.createCriteria(ProcedureDetails.class)
					.createAlias("ProcedureHeader", "ph")
					.add(Restrictions.eq("ph.Hin.Id", hinId))
					.add(Restrictions.eq("ph.Visit.Id", visitId))
					.addOrder(Order.asc("Id"))
					.list();
			
			List<OpdSurgeryDetail>opdSurgeryDetails= new ArrayList<OpdSurgeryDetail>();
			opdSurgeryDetails = session.createCriteria(OpdSurgeryDetail.class)
					.createAlias("OpdSurgery", "opdSurg")
					.add(Restrictions.eq("opdSurg.Hin.Id", hinId))
					.add(Restrictions.eq("opdSurg.Visit.Id", visitId))
					.addOrder(Order.asc("Id"))
					.list();
			
			/*patient mlc list */
			List<String>patientWiseMlcs= new ArrayList<String>();
			Criteria criteria  =session.createCriteria(PatientWiseMlc.class).createAlias("OpdPatientDetail", "opd")
								.setProjection(Projections.projectionList().add(Projections.property("MlcType")));
			if(referredVisit!=0){
				criteria.add(Restrictions.eq("opd.Visit.Id", referredVisit));
			}else{
				criteria.add(Restrictions.eq("opd.Visit.Id", visitId));
			}
			patientWiseMlcs=criteria.list();
			
			
			int empDeptId = (map.get("empDeptId")!=null)?(Integer)map.get("empDeptId"):0;
			List<DepartmentRefset> deptRefsetList = session.createCriteria(DepartmentRefset.class).add(Restrictions.eq("Department.Id",empDeptId)).list();
			map.put("deptRefsetList", deptRefsetList);
			Object[] selectedStatus = {"V","Y"};
			/*List<DgResultEntryHeader>labResultForLeprosyPerforma = new ArrayList<DgResultEntryHeader>();
			labResultForLeprosyPerforma= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
					.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
					.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();*/
			List<DgResultEntryHeader> internalLabTestList = new ArrayList<DgResultEntryHeader>();
			List<ExternalLabReportCommon> externalLabTestList = new ArrayList();
			internalLabTestList= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")								
					.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
					.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
			
			externalLabTestList =session.createCriteria(ExternalLabReportCommon.class)
				      .createAlias("Hin", "h")
				      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
				      .add(Restrictions.eq("TemplateName", deptName)).add(Restrictions.isNull("SubInvestigation.Id"))
				      .list();
			 
			List<OpdGeneralSurgeryPrevSpeciality> opdGeneralSurgeryPrevSpeciality = new ArrayList<OpdGeneralSurgeryPrevSpeciality>();
			opdGeneralSurgeryPrevSpeciality= session.createCriteria(OpdGeneralSurgeryPrevSpeciality.class).add(Restrictions.eq("Hin.Id",hinId)).list();
			map.put("opdGeneralSurgeryPrevSpeciality", opdGeneralSurgeryPrevSpeciality);
			
			List<MasRelation> relationList = new ArrayList<MasRelation>();
		
			relationList = session
				.createCriteria(MasRelation.class)
				.add(Restrictions.eq("Status", "Y".toLowerCase())
						.ignoreCase()).list();
			
			/*map.put("labResultForLeprosyPerforma",labResultForLeprosyPerforma);*/	
			map.put("relationList",relationList);
			map.put("deptName",deptName);
			map.put("internalLabTestList",internalLabTestList);
			map.put("externalLabTestList",externalLabTestList);	
			map.put("majorHealthIssue", majorHealthIssue);
			map.put("patientWiseMlcs", patientWiseMlcs);
			map.put("opdSurgeryDetails", opdSurgeryDetails);
			map.put("procedureDetails", procedureDetails);
			map.put("opdPatientAllergyTs", opdPatientAllergyTs);
			map.put("dgSampleCollectionDetails", dgSampleCollectionDetails);
			map.put("dgOrderdts", dgOrderdts);
			map.put("patientInvestigationDetails", patientInvestigationDetails);
			map.put("patientPrescriptionDetails", patientPrescriptionDetails);
			map.put("patientOtherPrescriptionDetails", patientOtherPrescriptionDetails);
			map.put("lastEncounterDetail", lastEncounterDetail);
			map.put("opdPatientDetails", opdPatientDetails);
			map.put("mlcList", mlcList);
			map.put("phDiseaseRegistrationFollowList", phDiseaseRegistrationFollowList);
			Date currentDate = new Date();
		} catch (HibernateException e) {
			saved = false;
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("wardDepartment", wardDepartment);
		map.put("masDistricts", masDistricts);
		map.put("masHospitals", masHospitals);
		map.put("allergyProductsList", allergyProductsList);
		map.put("saverityCodesList", saverityCodesList);
		map.put("routeOfAdministrationList", routeOfAdministrationList);
		map.put("masInstructionMasterList", masInstructionMasterList);
		map.put("deptList", deptList);
	//	map.put("templateList", templateList);
		map.put("templateListForInvestigation", templateListForInvestigation);
		map.put("frequencyList", frequencyList);
		map.put("hospitalTypeList", hospitalTypeList);
		map.put("masStoreOutItemsList", masStoreOutItemsList);
		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> showOPDTreatmentRecords(int templateId) {
		Session session = (Session) getSession();
		List<OpdTemplateTreatment> treatmentTemplateList = new ArrayList<OpdTemplateTreatment>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasStoreItem> masStoreList = new ArrayList<MasStoreItem>();

		try {

			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			treatmentTemplateList = session
					.createCriteria(OpdTemplateTreatment.class)
					.createAlias("Template", "template")
					.add(Restrictions.eq("template.Id", templateId))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			frequencyList = session.createCriteria(MasFrequency.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			brandList = session.createCriteria(MasStoreBrand.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			masStoreList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("treatmentTemplateList", treatmentTemplateList);
		map.put("frequencyList", frequencyList);
		map.put("brandList", brandList);
		map.put("masStoreList", masStoreList);
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemListForAutoCompleteOutItem(Map mapForDS) {
		List<MasStoreOutItem> itemList = new ArrayList<MasStoreOutItem>();

		Session session = (Session) getSession();
		int deptId = 0;
		String query = "";
		boolean lastPrescripitionBasedDispensing = false;
		if (mapForDS.get("lastPrescripitionBasedDispensing") != null) {
			lastPrescripitionBasedDispensing = Boolean.parseBoolean(mapForDS
					.get("lastPrescripitionBasedDispensing").toString());
		}
		try {
			String str = "%" + mapForDS.get("autoHint") + "%";
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}
			String screenName=null;
			if (mapForDS.get("screenName") != null) {
				screenName = (String) mapForDS.get("screenName");
			}
			
			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("pharmacy.properties");
			properties.load(resourcePath.openStream());
			String sectionName = properties.getProperty("sectionName");
			String sectionForNursing = "";
			if(properties.getProperty("sectionForNursing")!=null)
				sectionForNursing = properties.getProperty("sectionForNursing");
			
			Criteria criteria = session
					.createCriteria(MasStoreOutItem.class, "mst")
					//.createAlias("Section", "section")
					.add(Restrictions.eq("mst.Status", 'y').ignoreCase())
					.add(Restrictions.like("mst.Nomenclature",
							str.toLowerCase()).ignoreCase())
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.groupProperty("mst.Id"))
									//.add(Projections.groupProperty("mst.PvmsNo"))
									.add(Projections.groupProperty("mst.Nomenclature")));
									//.add(Projections.groupProperty("mst.CommonName")));
			
			if (lastPrescripitionBasedDispensing) {
				//criteria.add(Restrictions.eq("OtcType", "y").ignoreCase());
			}
			
			/*if(screenName!=null){
				criteria.add(Restrictions.like("section.SectionName", sectionName).ignoreCase());
			}else{
				criteria.add(Restrictions.like("section.SectionName", sectionName).ignoreCase());
			}*/
			
			criteria.setFirstResult(0);
			criteria.setMaxResults(10);
			itemList = criteria.list();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		mapForDS.put("itemList", itemList);
		return mapForDS;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemListForAutoComplete(Map mapForDS) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		int deptId = 0;
		String query = "";
		String pharmacyCheck = null;
		boolean lastPrescripitionBasedDispensing = false;
		if (mapForDS.get("lastPrescripitionBasedDispensing") != null) {
			lastPrescripitionBasedDispensing = Boolean.parseBoolean(mapForDS
					.get("lastPrescripitionBasedDispensing").toString());
		}
		
		if (mapForDS.get("pharmacyCheck") != null) {
			pharmacyCheck = mapForDS.get("pharmacyCheck").toString();
					
		}
		try {
			String str = "%" + mapForDS.get("autoHint") + "%";
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}
			String screenName=null;
			if (mapForDS.get("screenName") != null) {
				screenName = (String) mapForDS.get("screenName");
			}
			
			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("pharmacy.properties");
			properties.load(resourcePath.openStream());
			String sectionName = properties.getProperty("sectionName");
			String sectionForNursing = "";
			if(properties.getProperty("sectionForNursing")!=null)
				sectionForNursing = properties.getProperty("sectionForNursing");
			
			Criteria criteria = session
					.createCriteria(MasStoreItem.class, "mst")
					.createAlias("Section", "section")
					.add(Restrictions.eq("mst.Status", 'y').ignoreCase())
					.add(Restrictions.like("mst.Nomenclature",
							str.toLowerCase()).ignoreCase())
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.groupProperty("mst.Id"))
									.add(Projections.groupProperty("mst.PvmsNo"))
									.add(Projections.groupProperty("mst.Nomenclature"))
									.add(Projections.groupProperty("mst.CommonName")));
			
			if (lastPrescripitionBasedDispensing) {
				criteria.add(Restrictions.eq("OtcType", "y").ignoreCase());
			}
			
			if(screenName!=null){
				criteria.add(Restrictions.like("section.SectionName", sectionName).ignoreCase());
				//criteria.add(Restrictions.or(Restrictions.eq("section.SectionName", sectionName).ignoreCase(), Restrictions.like("section.SectionName", sectionForNursing).ignoreCase()) );
			}else{
				criteria.add(Restrictions.like("section.SectionName", sectionName).ignoreCase());
			}
			
			if(pharmacyCheck!=null){
				criteria.createAlias("ItemClass", "ic")
				.add(Restrictions.like("ic.ItemClassCode",pharmacyCheck).ignoreCase());
			}
			criteria.addOrder(Order.asc("mst.Nomenclature"));
			criteria.setFirstResult(0);
			criteria.setMaxResults(10);
			itemList = criteria.list();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		mapForDS.put("itemList", itemList);
		return mapForDS;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemListForAutoCompleteOTC(Map mapForDS) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>(); 
		Session session = (Session) getSession();
		int deptId = 0;
		String query = "";  
		try { 
			Criteria criteria = session
					.createCriteria(MasStoreItem.class, "mst")
					.add(Restrictions.eq("mst.Status", 'y').ignoreCase()) 
					.add(Restrictions.eq("OtcType", "y").ignoreCase()); 
			criteria.setFirstResult(0);
			criteria.setMaxResults(10);
			itemList = criteria.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	public Map<String, Object> getItemListForAutoCompleteIpd(Map mapForDS) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = (Integer) mapForDS.get("deptId");
		Session session = (Session) getSession();
		try {
			String str = "%" + mapForDS.get("autoHint") + "%";
			String query = "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id="
					+ deptId
					+ "  and mst.Status='y' and stock.ClosingStock>0 and  mst.Nomenclature like '"
					+ str + "' group by mst.Id,mst.PvmsNo,mst.Nomenclature";
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public List<MasStoreItem> getItemIdFromPVMS(String pvmsNo) {
		List<MasStoreItem> itemIdList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {
			itemIdList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", pvmsNo)).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return itemIdList;
	}
	
	@SuppressWarnings("unchecked")
	public List<MasStoreOutItem> getItemIdOutFromPVMS(Map<String, Object> map) {
		List<MasStoreOutItem> itemOutList = new ArrayList<MasStoreOutItem>();
		List<MasStoreOutItem> itemOutLists = new ArrayList<MasStoreOutItem>();
		Session session = (Session) getSession();
		String nomenclature = (String)map.get("nomenclatures");
		int hospitalId = (Integer)map.get("hospitalId");
		int deptId = (Integer)map.get("departmentId");
		int userId = (Integer)map.get("userId");
		
		try {
			itemOutList = session.createCriteria(MasStoreOutItem.class)
					.add(Restrictions.eq("Nomenclature", nomenclature)).list();
			if(itemOutList.size()>0){
				MasStoreOutItem masStoreOutItem=new MasStoreOutItem();
				masStoreOutItem = itemOutList.get(0);
				itemOutLists.add((MasStoreOutItem) masStoreOutItem);
			}else{
				
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				
				Map<String, Object> utilMap = new HashMap<String, Object>();
				utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
				String time = (String) utilMap.get("currentTime");
				
				MasStoreOutItem masStoreOutItem = new MasStoreOutItem();
				masStoreOutItem.setNomenclature(nomenclature);
				masStoreOutItem.setCreatedOn(new Date());
				
				Users users = new Users();
				users.setId(userId);
				masStoreOutItem.setCreatedBy(users);
				masStoreOutItem.setLastChgBy(users);
				masStoreOutItem.setLastChgDate(new Date());
				masStoreOutItem.setLastChgTime(time);
				masStoreOutItem.setStatus("Y");
				
				MasDepartment department= new MasDepartment();
				department.setId(deptId);
				masStoreOutItem.setDepartment(department);
				
				MasHospital hospital =new MasHospital();
				hospital.setId(hospitalId);
				masStoreOutItem.setHospital(hospital);
				hbt.save(masStoreOutItem);
				itemOutLists.add(masStoreOutItem);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return itemOutLists;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOPDInvestigationRecords(
			int investigationTemplateId) {
		Session session = (Session) getSession();
		List<OpdTemplateInvestigation> investigationTemplateList = new ArrayList<OpdTemplateInvestigation>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// patientList=session.createQuery("select v from Visit as v where
			// v.VisitDate="+date ).list();
			investigationTemplateList = session
					.createCriteria(OpdTemplateInvestigation.class)
					.createAlias("Template", "template")
					.add(Restrictions
							.eq("template.Id", investigationTemplateId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("investigationTemplateList", investigationTemplateList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getInvestigationListForAutoComplete(Map mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Integer> chargeCodeIdList = new ArrayList<Integer>();
		List<DgMasInvestigation> masInvestigationList = new ArrayList<DgMasInvestigation>();
		try {
			List<Integer> idList = new ArrayList<Integer>();
			idList.add(11);
			idList.add(10);
			idList.add(22);
			idList.add(23);
			idList.add(24);
			idList.add(26);
			idList.add(27);
			Criteria crit;
			// int deptId=(Integer)mapForDS.get("deptId");
			String str = "%" + mapForDS.get("autoHint") + "%";
			String labradiologyCheck=(String)mapForDS.get("labradiologyCheck");
//			if (mapForDS.get("fromOpd") != null) {
				// String chargeType = "SURG";
			
//			
				crit = session						
						.createCriteria(DgMasInvestigation.class)
						.createAlias("ChargeCode", "chargeCode")
						.createAlias("chargeCode.Department", "dept")
						.add(Restrictions.like("chargeCode.ChargeCodeName", str).ignoreCase())
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.eq("chargeCode.Status", "y").ignoreCase())
						.add(Restrictions.in("InvestigationType", new String[]{"s","m","t"}))
						//.createAlias("chargeCode.ChargeType", "chgType")
						// .add(Restrictions.in("chgType.Id", idList))
						// .add(Restrictions.or(Restrictions.eq("chgType.Id",10),
						// (Restrictions.eq("chgType.Id",11))))
						;
						/*crit.setFirstResult(0);
						crit.setMaxResults(10);*/
				if(labradiologyCheck!=null &&  !labradiologyCheck.equalsIgnoreCase("") && labradiologyCheck.equalsIgnoreCase("Lab"))
				{
					crit.add(Restrictions.eq("dept.DepartmentCode", "Lab".toLowerCase()).ignoreCase());
				}
				else if(labradiologyCheck!=null &&  !labradiologyCheck.equalsIgnoreCase("") && labradiologyCheck.equalsIgnoreCase("Radio"))
				{
					crit.add(Restrictions.or(Restrictions.eq("dept.DepartmentCode", "Radio".toLowerCase()).ignoreCase(), Restrictions.eq("dept.DepartmentCode", "CT".toLowerCase()).ignoreCase()));
				}
				else if(labradiologyCheck!=null &&  !labradiologyCheck.equalsIgnoreCase(""))
				{
					Criterion rest1 = Restrictions.or(Restrictions.eq("dept.DepartmentCode", "Radio").ignoreCase(),
							Restrictions.eq("dept.DepartmentCode", "CT".toLowerCase()).ignoreCase());
					
					crit.add(Restrictions.or(rest1,Restrictions.eq("dept.DepartmentCode", "Lab".toLowerCase()).ignoreCase()));

				}
				crit.setProjection(Projections.projectionList().add(Projections.groupProperty("ChargeCode")));
				chargeList = crit.list();
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getChargeCodeValue(String chargeCodeName,
			int hinId) {
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		String chargeCode = "";
		int patienttypeId = 0;
		List<MasDiscount> discountList = new ArrayList<MasDiscount>();
		try {
			if (chargeCodeName != null && !chargeCodeName.equals("")) {
				chargeCodeList = session.createCriteria(MasChargeCode.class)
						.add(Restrictions.eq("ChargeCodeName", chargeCodeName))
						/*
						 * .createAlias("ChargeType", "chgType")
						 * .add(Restrictions
						 * .or(Restrictions.eq("chgType.Id",10),
						 * (Restrictions.eq("chgType.Id",11))))
						 */
						.list();
				chargeCode = (String) chargeCodeList.get(0).getChargeCodeCode();
				map = getChargeCodeDetails(chargeCode, hinId);
				List<Patient> ptList = new ArrayList<Patient>();
				ptList = session.createCriteria(Patient.class)
						.add(Restrictions.eq("Id", hinId)).list();

				for (Patient pt : ptList) {
					if(pt.getPatientType()!=null){
						patienttypeId = pt.getPatientType().getId();
						discountList = session
								.createCriteria(MasDiscount.class)
								.add(Restrictions.eq("PatientType.Id", patienttypeId))
								.createAlias("ChargeCode", "ChargeCode")
								.add(Restrictions.eq("ChargeCode.ChargeCodeName",chargeCodeName).ignoreCase()).list();

					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeCodeList", chargeCodeList);
		map.put("patienttypeId", patienttypeId);
		//
		map.put("discountList", discountList);

		return map;
	}

	/**
	 * Method to get Charge Code details for Billing Servicing
	 * 
	 */
	@SuppressWarnings("unchecked")
	public Map<String, Object> getChargeCodeDetails(String chargeCode, int hinId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		List<Patient> patientList = new ArrayList<Patient>();
		Session session = (Session) getSession();
		try {

			chargeCodeList = session.createCriteria(MasChargeCode.class)
					.add(Restrictions.eq("ChargeCodeCode", chargeCode)).list();
			MasChargeCode masChargeCode = new MasChargeCode();
			masChargeCode = chargeCodeList.get(0);
			int chargeId = masChargeCode.getId();
			int mainChargeId = masChargeCode.getMainChargecode().getId();
			int subChargeId = masChargeCode.getSubChargecode().getId();
			if (hinId != 0) {
				patientList = session.createCriteria(Patient.class)
						.add(Restrictions.eq("Id", hinId)).list();
			}
			if (patientList.size() > 0) {
				Patient patient = (Patient) patientList.get(0);
				int patientTypeId = 0;
				int companyId = 0;
				String regType = "";
				if (patientList.get(0).getPatientType() != null) {
					patientTypeId = patient.getPatientType().getId();
					detailsMap.put("patientTypeId", patientTypeId);
				}
				if (patientList.get(0).getCompany() != null) {
					companyId = patient.getCompany().getId();
					detailsMap.put("companyId", companyId);
				}
				if (patient.getRegistrationType() != null) {
					regType = patient.getRegistrationType();
					detailsMap.put("regType", regType);
				}

			}
			detailsMap.put("chargeId", chargeId);
			detailsMap.put("mainChargeId", mainChargeId);
			detailsMap.put("subChargeId", subChargeId);
			detailsMap.put("billTypeId", 2);
			detailsMap.put("patientCategory", "OP");

			map = getChargeAmountAfterDiscount(detailsMap);
			map.put("chargeId", chargeId);
			map.put("chargeCodeList", chargeCodeList);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getChargeAmountAfterDiscount(
			Map<String, Object> detailsMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasChargeCode> chargeCodeList = new ArrayList<MasChargeCode>();
		List<MasDiscount> discountList = new ArrayList<MasDiscount>();
		List<MasDiscount> criteriaDiscountList = new ArrayList<MasDiscount>();
		Criteria crit = null;
		Session session = (Session) getSession();
		BigDecimal chargeAmountAfterDis = new BigDecimal(0.00);
		int chargeId = 0;
		int patientTypeId = 0;
		int companyId = 0;
		int projectId = 0;
		int mainChargeId = 0;
		int subChargeId = 0;
		int billTypeId = 0;
		String patientCategory = "";
		int roomTypeId = 0;
		String regType = "";

		if (detailsMap.get("chargeId") != null)
			chargeId = (Integer) detailsMap.get("chargeId");

		if (detailsMap.get("patientTypeId") != null)
			patientTypeId = (Integer) detailsMap.get("patientTypeId");

		if (detailsMap.get("companyId") != null)
			companyId = (Integer) detailsMap.get("companyId");

		if (detailsMap.get("projectId") != null)
			companyId = (Integer) detailsMap.get("projectId");

		if (detailsMap.get("mainChargeId") != null)
			mainChargeId = (Integer) detailsMap.get("mainChargeId");

		if (detailsMap.get("subChargeId") != null)
			subChargeId = (Integer) detailsMap.get("subChargeId");

		if (detailsMap.get("billTypeId") != null)
			billTypeId = (Integer) detailsMap.get("billTypeId");

		if (detailsMap.get("roomTypeId") != null)
			roomTypeId = (Integer) detailsMap.get("roomTypeId");

		if (detailsMap.get("patientCategory") != null)
			patientCategory = (String) detailsMap.get("patientCategory");

		if (detailsMap.get("regType") != null)
			regType = (String) detailsMap.get("regType");

		Date currentDate = new Date();
		chargeCodeList = session.createCriteria(MasChargeCode.class)
				.add(Restrictions.idEq(chargeId)).list();

		crit = session.createCriteria(MasDiscount.class)
				.add(Restrictions.le("EffectiveDateFrom", currentDate))
				.createAlias("PatientType", "pt")
				.add(Restrictions.eq("pt.Id", patientTypeId));

		if (companyId != 0) {
			crit = crit.createAlias("Company", "com").add(
					Restrictions.eq("com.Id", companyId));
		}

		criteriaDiscountList = crit.list();
		Criteria criteria = null;
		if (criteriaDiscountList.size() > 0) {
			for (MasDiscount masDiscount : criteriaDiscountList) {
				criteria = session.createCriteria(MasDiscount.class)
						.add(Restrictions.le("EffectiveDateFrom", currentDate))
						.createAlias("PatientType", "pt")
						.add(Restrictions.eq("pt.Id", patientTypeId));

				if (masDiscount.getCompany() != null) {
					criteria = criteria.createAlias("Company", "comp").add(
							Restrictions.eq("comp.Id", companyId));
				}

				if (masDiscount.getBillType() != null) {
					criteria = criteria.createAlias("BillType", "bt").add(
							Restrictions.eq("bt.Id", billTypeId));
				}
				if (masDiscount.getPatientCategory() != null) {
					criteria = criteria.add(Restrictions.eq("PatientCategory",
							patientCategory));
				}
				if (masDiscount.getRoomType() != null) {
					if (roomTypeId > 0) {
						criteria = criteria.createAlias("RoomType", "rt").add(
								Restrictions.eq("rt.Id", roomTypeId));
					}
				}

				if (masDiscount.getChargeCode() != null
						&& masDiscount.getSubChargecode() != null
						&& masDiscount.getMainChargecode() != null) {
					if (subChargeId != 0 && mainChargeId != 0) {
						if (chargeId == masDiscount.getChargeCode().getId()
								&& subChargeId == masDiscount
										.getSubChargecode().getId()
								&& mainChargeId == masDiscount
										.getMainChargecode().getId()) {
							criteria = criteria
									.createAlias("ChargeCode", "cc")
									.add(Restrictions.eq("cc.Id", chargeId))
									.createAlias("SubChargecode", "sc")
									.add(Restrictions.eq("sc.Id", subChargeId))
									.createAlias("MainChargecode", "mc")
									.add(Restrictions.eq("mc.Id", mainChargeId));
						}
					}
				} else if (masDiscount.getChargeCode() == null
						&& masDiscount.getSubChargecode() != null
						&& masDiscount.getMainChargecode() != null) {
					if (subChargeId != 0 && mainChargeId != 0) {
						if (subChargeId == masDiscount.getSubChargecode()
								.getId()
								&& mainChargeId == masDiscount
										.getMainChargecode().getId()) {
							criteria = criteria
									.createAlias("SubChargecode", "sc")
									.add(Restrictions.eq("sc.Id", subChargeId))
									.createAlias("MainChargecode", "mc")
									.add(Restrictions.eq("mc.Id", mainChargeId));
						}
					}
				} else if (masDiscount.getChargeCode() == null
						&& masDiscount.getSubChargecode() == null
						&& masDiscount.getMainChargecode() != null) {
					if (mainChargeId != 0) {
						if (mainChargeId == masDiscount.getMainChargecode()
								.getId()) {
							criteria = criteria.createAlias("MainChargecode",
									"mc").add(
									Restrictions.eq("mc.Id", mainChargeId));

						}
					}
				}
			}
			discountList = criteria.list();
		}

		BigDecimal chargeAmt = new BigDecimal(0.00);
		MasChargeCode masChargeCode = new MasChargeCode();
		if (chargeCodeList.size() > 0) {
			masChargeCode = chargeCodeList.get(0);
			// BigDecimal chargeAmt = new BigDecimal(masChargeCode.getCharge());

			Set<MasChargeCodeRates> chargeSet = new HashSet<MasChargeCodeRates>();
			if (masChargeCode.getMasChargeCodeRates() != null) {
				chargeSet = masChargeCode.getMasChargeCodeRates();
				if (chargeSet.size() > 0) {
					for (MasChargeCodeRates chargeRate : chargeSet) {
						if (currentDate.compareTo(chargeRate
								.getEffectiveFromDate()) >= 0
								&& (chargeRate.getEffectiveToDate() == null || currentDate
										.compareTo(chargeRate
												.getEffectiveToDate()) <= 0)) {
							chargeAmt = chargeRate.getRate();
							break;
						} else {
							if(masChargeCode!=null && masChargeCode.getCharge()!=null){
								chargeAmt = new BigDecimal(masChargeCode.getCharge());
							}
						}

					}

				} else {
					if(masChargeCode!=null && masChargeCode.getCharge()!=null){
						chargeAmt = new BigDecimal(masChargeCode.getCharge());
					}	
				}

			} else {
				if(masChargeCode!=null && masChargeCode.getCharge()!=null){
					chargeAmt = new BigDecimal(masChargeCode.getCharge());
				}
			}
			map.put("rate", chargeAmt);
		}
		/**
		 * For Standard Deduction----------------------------
		 * 
		 */
		BigDecimal stdDeduction = new BigDecimal(0.00);
		if (regType.equalsIgnoreCase("G")) {
			if (masChargeCode.getStdDeductionGen() != null) {
				stdDeduction = masChargeCode.getStdDeductionGen();
			}
		} else if (regType.equalsIgnoreCase("S")) {
			if (masChargeCode.getStdDeductionSpl() != null) {
				stdDeduction = masChargeCode.getStdDeductionSpl();
			}
		}
		BigDecimal chargeAfterSD = new BigDecimal(0.00);
		chargeAfterSD = chargeAmt.subtract(stdDeduction);

		BigDecimal discPercnt = new BigDecimal(0);
		BigDecimal discAmt = new BigDecimal(0);
		String discTypeDB = "";
		if (discountList.size() > 0) {
			BigDecimal fixedValueDB = new BigDecimal(0.00);

			for (MasDiscount discount : discountList) {
				if (discount.getEffectiveDateTo() != null
						&& (discount.getEffectiveDateTo()
								.compareTo(currentDate) < 0)) {
					chargeAmountAfterDis = chargeAfterSD;

				} else {
					if (discount.getChargeCode() != null) {
						if (chargeId == discount.getChargeCode().getId()) {
							if (discount.getDiscountPercentage() != null) {
								discPercnt = discount.getDiscountPercentage();
							}
							if (discount.getDiscountValue() != null) {
								discAmt = discount.getDiscountValue();
							}
							if (discount.getFixedValue() != null) {
								fixedValueDB = discount.getFixedValue();
							}
							discTypeDB = discount.getDiscountType();

							break;
						}
					} else if (discount.getChargeCode() == null
							&& discount.getSubChargecode() != null) {
						if (subChargeId == discount.getSubChargecode().getId()) {
							if (discount.getDiscountPercentage() != null) {
								discPercnt = discount.getDiscountPercentage();
							}
							if (discount.getDiscountValue() != null) {
								discAmt = discount.getDiscountValue();
							}
							if (discount.getFixedValue() != null) {
								fixedValueDB = discount.getFixedValue();
							}
							discTypeDB = discount.getDiscountType();
							break;
						}
					} else if (discount.getChargeCode() == null
							&& discount.getSubChargecode() == null
							&& discount.getMainChargecode() != null) {
						if (mainChargeId == discount.getMainChargecode()
								.getId()) {
							if (discount.getDiscountPercentage() != null) {
								discPercnt = discount.getDiscountPercentage();
							}
							if (discount.getDiscountValue() != null) {
								discAmt = discount.getDiscountValue();
							}
							if (discount.getFixedValue() != null) {
								fixedValueDB = discount.getFixedValue();
							}
							discTypeDB = discount.getDiscountType();
						}
					} else if (discount.getChargeCode() == null
							&& discount.getSubChargecode() == null
							&& discount.getMainChargecode() == null) {
						if (discount.getDiscountPercentage() != null) {
							discPercnt = discount.getDiscountPercentage();
						}
						if (discount.getDiscountValue() != null) {
							discAmt = discount.getDiscountValue();
						}
						if (discount.getFixedValue() != null) {
							fixedValueDB = discount.getFixedValue();
						}
						discTypeDB = discount.getDiscountType();

					}
				}
			}
			if (discPercnt.compareTo(new BigDecimal(0)) > 0) {
				discAmt = chargeAfterSD.multiply(discPercnt).divide(
						new BigDecimal(100), 2, RoundingMode.HALF_UP);
				if (discTypeDB.equalsIgnoreCase("d")) {
					chargeAmountAfterDis = chargeAfterSD.subtract(discAmt);
				} else if (discTypeDB.equalsIgnoreCase("t")) {
					chargeAmountAfterDis = chargeAfterSD.add(discAmt);
					chargeAfterSD = chargeAmountAfterDis; // For Tariff case
					map.put("rate", chargeAmt.add(discAmt));
				}
			} else if (discAmt.compareTo(new BigDecimal(0)) > 0) {
				if (discTypeDB.equalsIgnoreCase("d")) {
					chargeAmountAfterDis = chargeAfterSD.subtract(discAmt);
				} else if (discTypeDB.equalsIgnoreCase("t")) {
					chargeAmountAfterDis = chargeAfterSD.add(discAmt);
					chargeAfterSD = chargeAmountAfterDis;
					map.put("rate", chargeAmt.add(discAmt));
				}
			} else if (fixedValueDB.compareTo(new BigDecimal(0)) > 0) {
				if (discTypeDB.equalsIgnoreCase("f")) {
					chargeAmountAfterDis = fixedValueDB;
				}
			} else {
				chargeAmountAfterDis = chargeAfterSD;
			}
			
		} else {
			chargeAmountAfterDis = chargeAfterSD;
			if (chargeCodeList.size() > 0) {
				if (chargeCodeList.get(0).getDiscountable().equals("y")) {

					if (chargeCodeList.get(0).getDiscountPercentage() != null) {
						discPercnt = chargeCodeList.get(0)
								.getDiscountPercentage();
						discAmt = chargeAfterSD.multiply(discPercnt).divide(
								new BigDecimal(100), 2, RoundingMode.HALF_UP);
					}
				}
			}

			chargeAmountAfterDis = chargeAmountAfterDis.subtract(discAmt);
		}
		if (discTypeDB.equalsIgnoreCase("t")) {
			discAmt = new BigDecimal(0);
		}
		map.put("chargeAfterSD", chargeAfterSD);
		map.put("chargeAmountAfterDis", chargeAmountAfterDis);
		map.put("discPercnt", discPercnt);
		map.put("discAmt", discAmt);
		map.put("stdDeduction", stdDeduction);
		map.put("discTypeDB", discTypeDB);
		return map;
	}


@SuppressWarnings("unchecked")
@Override
public Map<String, Object> getDrWiseWaitingQueue(Map<String, Object> mapForDS) {
	Map<String, Object> map = null;
	HashMap<Users,Integer> userMap = new HashMap<Users, Integer>();

	List<TokenDisplayIp> tokenDisplayIps = null;
	List<Object[]> departmentList = null;
	QueueManagmentDetails queueManagmentDetails = null;
	MasDepartment masDepartment = null;
	MasHospital masHospital = null;
	Session session = null;

	int userId = 0;
	int hospitalId=0;
	Date currentDate = null;
	String flag = null;
	String displayName = null;
	List<HospitalDoctorUnitM> unitList= new ArrayList<>();
	List<Object[]> deptWisecounterList= new ArrayList<>();


	try {
		session = (Session) getSession();
		currentDate = new Date();
		map = new HashMap<String, Object>();

		if(mapForDS.get("hospitalId") != null){
			hospitalId = (Integer) mapForDS.get("hospitalId");	
		}
		if (mapForDS.get("displayName") != null) {
			displayName = (String) mapForDS.get("displayName");
		}
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}


		if(flag!=null && flag.equalsIgnoreCase("open") && displayName!=null && !displayName.trim().equals("")){
			departmentList = session.createCriteria(MasInstituteDepartment.class).createAlias("Department", "d").add(Restrictions.eq("Institute.Id", hospitalId))
					.createAlias("TokenDisplayIp", "ip").add(Restrictions.eq("ip.DisplayName", displayName)).add(Restrictions.eq("Status", "y").ignoreCase())
					.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("d.Id")).add(Projections.property("d.DepartmentName")).add(Projections.property("d.EmpDept.Id")).add(Projections.property("d.DepartmentNameImage"))))
					.list();
			map.put("departmentList", departmentList);

			int empDepartmentId= 0;
			int departmentId = 0;
			int deptWiseArrayCnt = 0;
			for(Object[] department:departmentList){
				deptWiseArrayCnt++;
				if(department[0]!=null){
					departmentId=(Integer)department[0];
				}
				if(department[2]!=null)
					empDepartmentId = (Integer)department[2];



				deptWisecounterList = session.createQuery("select mscc.Id, mscc.CounterNo from MasServiceCentreCounter as mscc where mscc.Hospital.Id = '"
						+ hospitalId + "' and mscc.Department.Id = " + departmentId + " and lower(mscc.Status) = 'b'"
						+ "order by (case when (CounterNo between '1' and '99999') then cast(CounterNo as integer) end), CounterNo").list(); 

				map.put("deptWisecounterList", deptWisecounterList);
				String unitDay=HMSUtil.getDayOfWeek().toLowerCase();

				unitList=session.createCriteria(HospitalDoctorUnitM.class)
						.createAlias("EmpDept", "EmpDept")
						.createAlias("Hospital", "Hospital")
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq(((String) unitDay.subSequence(0,1)).toUpperCase()+unitDay.substring(1),"y"))
						.add(Restrictions.eq("EmpDept.Id", empDepartmentId)).list();

				List<Object[]> drList = new ArrayList<>();
				if(unitList.size() > 0){
					drList = session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM").add(Restrictions.eq("UnitM.Id", unitList.get(0).getId())).add(Restrictions.eq("UnitM.Status", "y").ignoreCase())
							.createAlias("Employee", "emp",CriteriaSpecification.LEFT_JOIN).createAlias("emp.Users", "u").createAlias("u.CurrentCounter", "cc").createAlias("cc.Department", "d")
							.add(Restrictions.eq("u.AvailableToday", "y").ignoreCase()).addOrder(Order.asc("cc.CounterNo")).add(Restrictions.eq("d.Id", departmentId)).add(Restrictions.isNotNull("cc.CounterNo"))
							.add(Restrictions.eq("u.LoginStatus", "y").ignoreCase()).add(Restrictions.eq("Status", "y").ignoreCase()).add(Restrictions.eq("u.Status", "y").ignoreCase())
							.setProjection(Projections.projectionList().add(Projections.property("u.CurrentCounter.Id")).add(Projections.property("emp.Id"))
									.add(Projections.property("emp.FirstName")).add(Projections.property("emp.EmployeeImage")).add(Projections.property("cc.CounterNo")))
									.list();
				
					map.put("drList"+deptWiseArrayCnt, drList);
				}

				String[][] tokens = new String[3][drList.size()];


				String token = "";
				List<QueueManagment> list = new ArrayList<>();
				List tokenInArr =new ArrayList();

				String[] tokenStatusArray = {"C","c","P","p","A","a"};
				
				list = session.createCriteria(QueueManagment.class).createAlias("Hospital", "h").createAlias("Department", "d")
						.createAlias("Visit", "v").add(Restrictions.eq("h.Id", hospitalId)).add(Restrictions.not(Restrictions.in("TokenStatus", tokenStatusArray)))
						.add(Restrictions.eq("d.Id", departmentId)).add(Restrictions.eq("LsCngDate", currentDate))
						.addOrder(Order.asc("v.DisplayAfterNo")).addOrder(Order.asc("v.TokenNo"))
						.list();
				map.put("list", list);

				//SortedSet<String> counterSet = new TreeSet<String>(); 
				List<String> counterSet = new ArrayList<String>(); 
				for(int j=0;j<drList.size();j++)
				{
					Object[] drobj = drList.get(j); 
					counterSet.add((String)drobj[4]);
				}
				for (int i = 0; i < 3; i++) {

					for(int j=0;j<drList.size();j++){
						Object[] drobj = drList.get(j); 
						
						for (int k=0;k<list.size();k++) {
							QueueManagment q = list.get(k);

							token = q.getTokenNo().toString();
							String splCategory = q.getPatientSpecialCategory()!=null?q.getPatientSpecialCategory():"";
							if(tokenInArr!=null && !tokenInArr.contains(token) && tokens[i][j]==null){
								if(q.getAssignedDoctorId()!=null && q.getVisit().getDoctor()!=null && Integer.parseInt(drobj[1].toString()) == q.getAssignedDoctorId()){
									String clr ="";
									String prefix = "";
									if(q.getVisit().getDoctor()!=null){
										clr = "#FF8333";
									}
									
									if(!splCategory.equals("") && (splCategory.equalsIgnoreCase("E") || splCategory.equalsIgnoreCase("S"))){
										prefix = splCategory;
										clr = "#FF3333";		
									}
									if(q.getVisit().getVisitStatus() !=null && q.getVisit().getVisitStatus().equalsIgnoreCase("P")){
										prefix = "P";
									}
									if(q.getVisit().getOpCallCount()!=null && q.getVisit().getOpCallCount()>0 &&  !(splCategory.equalsIgnoreCase("E"))){
										//prefix = "N";
										clr = "#800080";
									}
									if(q.getReferBack()!=null && q.getReferBack().equalsIgnoreCase("y") &&  !(splCategory.equalsIgnoreCase("E"))){
										clr = "#FFC000";
									}
									tokens[i][j] = token+" "+prefix+""+clr;
									tokenInArr.add(token.trim());
									break;
								}else if(q.getAssignedDoctorId()!=null && q.getVisit().getDoctor()==null && Integer.parseInt(drobj[1].toString()) == q.getAssignedDoctorId()){
									String clr ="";
									String prefix = "";
									if(!splCategory.equals("") && (splCategory.equalsIgnoreCase("E") || splCategory.equalsIgnoreCase("S"))){
										prefix = splCategory;
										clr = "#FF3333";		
									}
									if(q.getVisit().getVisitStatus() !=null && q.getVisit().getVisitStatus().equalsIgnoreCase("P")){
										prefix = "P";
									}
									if(q.getVisit().getOpCallCount()!=null && q.getVisit().getOpCallCount()>0 &&  !(splCategory.equalsIgnoreCase("E"))){
									//	prefix = "N";
										clr = "#800080";
									}
									if(q.getReferBack()!=null && q.getReferBack().equalsIgnoreCase("y") &&  !(splCategory.equalsIgnoreCase("E"))){
										clr = "#FFC000";
									}
									tokens[i][j] = token+" "+prefix+""+clr;
									tokenInArr.add(token.trim());
									break;
								}
							}


						}



					}


				}
				map.put("tokens"+deptWiseArrayCnt, tokens);		
				map.put("counterSet"+deptWiseArrayCnt, counterSet);		
			}

		} 
	} catch (Exception e) {
		e.printStackTrace();
	}
	return map;
}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOPDPatientDetails(Map mapForDS) {
		final Map<String,Object> opdPatientData=new HashMap<String,Object>();
		final Map<String,List<Object>> opdPatientDataList=new HashMap<String,List<Object>>();
		Session session = (Session) getSession();
		boolean bool = false;
		Map<String, Object> map = new HashMap<String, Object>();
		List mlcNameList = new ArrayList();
		if(mapForDS.get("mlcNameList") != null){
			mlcNameList = (List)mapForDS.get("mlcNameList");
		}
		int currentPriority=0;
		if(mapForDS.get("currentPriority") != null){
			currentPriority = (Integer)mapForDS.get("currentPriority");
		}
		/*Added By OM Tripathi 25-08-2017*/
		List<Integer> frequencyOutList = (List) mapForDS.get("frequencyOutList");
		List<String> nomenclatureList= (List) mapForDS.get("nomenclatureList");
		List<Integer> itemOutList= (List) mapForDS.get("itemOutList");
		List<Float> dosageOutList = (List) mapForDS.get("dosageOutList");
		List<Float> totalOutList = (List<Float>) mapForDS.get("totalOutList");
		List<Integer> noOfDaysOutList = (List) mapForDS.get("noOfDaysOutList");
		
		List<Date> startDatesOut = (List) mapForDS.get("startDatesOut");
		List<Date> endDatesOut = (List) mapForDS.get("endDatesOut");
		List<Integer> routesOut = (List) mapForDS.get("routesOut");
		
		List<Integer> instrunctionOutList = (List) mapForDS.get("instrunctionOutList");
		List<Integer> unitsList = (List) mapForDS.get("unitsList");
		List<Integer> unitTables = (List) mapForDS.get("unitTables");
		List<String> spinstrunctionOutList = (List) mapForDS.get("spinstrunctionOutList");
		/*Added By OM Tripathi 25-08-2017*/
		
		Integer opdpatientDetailId = (Integer) mapForDS.get("opdpatientDetailId");
		List<String> pvmsNoList = (List<String>) mapForDS.get("pvmsNoList");
		List<Integer> frequencyList = (List) mapForDS.get("frequencyList");
		List<String> ctList =(List)mapForDS.get("ctList");
		List<Float> dosageList = (List) mapForDS.get("dosageList");
		List<Float> totalList = (List<Float>) mapForDS.get("totalList");
		List<Float> actualTotalAfterMixList = (List<Float>) mapForDS.get("actualTotalAfterMixList"); // added by amit das on 19-11-2016
		List<Integer> noOfDaysList = (List) mapForDS.get("noOfDaysList");
		List<Integer> routes = (List) mapForDS.get("routes");
		List<Integer> instrunctions = (List) mapForDS.get("instrunctionsList");
		List<String> spLinstrunctionList = (List) mapForDS.get("spLinstrunctionList");
		
		List<Date> startDates = (List) mapForDS.get("startDatesList");
		List<Date> endDates = (List) mapForDS.get("endDatesList");
		//List<String> dpStatus = (List<String>) mapForDS.get("dpStatusList");
		String diagnosis_status = (String) mapForDS.get("diagnosis_status");
		String prescriptionNo =  (String) mapForDS.get("prescriptionNo");
		String patientdeathStatus =  (String) mapForDS.get("patientdeathStatus");
		
		List<String> chargeCodeIdList = (List) mapForDS.get("chargeCodeIdList");
		List<String> clinicalList = (List) mapForDS.get("clinicalList");
		List<String> availableStatusList = (List) mapForDS.get("availableStatusList");
		List<String> prescription_availableStatusList = (List) mapForDS.get("prescription_availableStatusList");
		List<String> pacRequestList=new ArrayList<String>();

		String[] snomedListArray = (String[]) mapForDS.get("snomedListArray");
		String[] diagnosisIdArray = (String[]) mapForDS.get("diagnosisIdArray");
		String[] comorbidityCheckArray = (String[]) mapForDS.get("comorbidityCheckArray");
		int hinId = (Integer) mapForDS.get("hinId");
		int departmentId = (Integer) mapForDS.get("departmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hospitalId = (Integer) mapForDS.get("hospitalId");
		int forNext=0;
		if(mapForDS.get("forNext")!=null){
		forNext = (Integer) mapForDS.get("forNext");
		}
		String submitForm="";
		if(mapForDS.get("submitFrom")!=null){
			submitForm = (String)mapForDS.get("submitFrom");
		}
		
				Query query = session.createQuery("select PriorityNumber from Visit  where Id="+visitId);
				currentPriority=(Integer)query.uniqueResult();
				
		String hospitalCode = "";
		if(mapForDS.get("hospitalCode")!=null){
			hospitalCode = (String)mapForDS.get("hospitalCode");
		}
		int visitNoTemp=0;

		int pulse = 0;
		if (mapForDS.get("pulse") != null)
			pulse = (Integer) mapForDS.get("pulse");

		Float temperature = 0.0f;
		if (mapForDS.get("temperature") != null)
			temperature = (Float) mapForDS.get("temperature");

		String bp = (String) mapForDS.get("bp");
		float bmi = 0.0f;
		Float respiratoryRate = 0.0f;
		Float spo2 = 0.0f;
		Double height=0.0;
		Double weight=0.0;
		Double headCircumHidden=0.0;
		String pem= null;
		String stunting= null;
		String wasting= null;
		String mac= null;
		
		
		int empId=0;
		Users users=null;
		if (mapForDS.get("height") != null)
			height = (Double) mapForDS.get("height");
		
		if (mapForDS.get("weight") != null)
			weight = (Double) mapForDS.get("weight");
		
		if (mapForDS.get("bmi") != null)
			bmi = (Float) mapForDS.get("bmi");
		if (mapForDS.get("empId") != null)
		 empId = (Integer) mapForDS.get("empId");
		String userName = (String) mapForDS.get("userName");
		if (mapForDS.get("users") != null)
		 users = (Users) mapForDS.get("users");
		
		if (mapForDS.get("respiratoryRate") != null){
			respiratoryRate = (Float) mapForDS.get("respiratoryRate");
		}
		if (mapForDS.get("spo2") != null){
			spo2 = (Float) mapForDS.get("spo2");
		}
		if (mapForDS.get("headCircumHidden") != null){
			headCircumHidden = (Double) mapForDS.get("headCircumHidden");
		}
		if (mapForDS.get("pem") != null){
			pem = (String) mapForDS.get("pem");
		}	
		if (mapForDS.get("stunting") != null){
			stunting = (String) mapForDS.get("stunting");
		}
		if (mapForDS.get("wasting") != null){
			wasting = (String) mapForDS.get("wasting");
		}
		if (mapForDS.get("ped_mac") != null){
			mac = (String) mapForDS.get("ped_mac");
		}
		String consultationTime = (String) mapForDS.get("consultationTime");
		String consultationDate = (String) mapForDS.get("consultationDate");
		Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		String opdRemarks = (String) mapForDS.get("opdRemarks");
		String summaryConsultation = "";
		if(mapForDS.get("summaryConsultation") != null){
			summaryConsultation = (String)mapForDS.get("summaryConsultation");
		}
		String reviewDated = (String) mapForDS.get("reviewDate");
		Date reviewDate=null;
		if(reviewDated!=null && !reviewDated.equals("")){
		reviewDate =HMSUtil.convertStringTypeDateToDateType(reviewDated);
		}
		
		//String lastEncounter = (String) mapForDS.get("lastEncounter");
		String presentComplaintAndHistory = (String) mapForDS.get("presentComplain");
		String clinicalFindings = (String) mapForDS.get("clinicalFindings");		
		String historyOfPastIllness = (String) mapForDS.get("pastIllness");
		String personalHistory = (String) mapForDS.get("personalHistory");
		String familyHistory = (String) mapForDS.get("familyHistory");
		String medicationHistory = (String) mapForDS.get("medicationhistory");
		String surgicalHistory= (String) mapForDS.get("surgicalHistory") ;
		String antenatalHistory = (String)mapForDS.get("antenatalHistory");
		String permorbidPersonality= (String) mapForDS.get("permorbid_personality") ;
		String generalExamination = (String) mapForDS.get("generalExamination");
		String localExamination = (String) mapForDS.get("localExamination");
		String otherDiagnosis = (String) mapForDS.get("otherDiagnosis");
		String systemicExamination = (String) mapForDS.get("systemicExamination");
		String physicalExamination = (String) mapForDS.get("physicalExamination");
		String general_appearance = (String) mapForDS.get("general_appearance");
		String mental_status = (String) mapForDS.get("mental_status");
		String cognitive_function = (String) mapForDS.get("cognitive_function");
		String earExamination = (String) mapForDS.get("earExamination");
		String nosePnsExamination = (String) mapForDS.get("nosePnsExamination");
		String oralCavityThroatExamination = (String) mapForDS.get("oralCavityThroatExamination");
		String neckExamination = (String) mapForDS.get("neckExamination");
		String developmentHistory = (String) mapForDS.get("developmentHistory");
		String dietHistory = (String) mapForDS.get("dietHistory");
		String socioEconomicHistory = (String) mapForDS.get("socioEconomicHistory");
		String pastHistory = (String) mapForDS.get("pastHistory");
		String menstrualHistory = (String) mapForDS.get("menstrualHistory");
		String obstreticHistory = (String) mapForDS.get("obstreticHistory");
		String managementPlan = (String) mapForDS.get("managementPlan");
		//--
		String extraOralExamination = (String) mapForDS.get("extraOralExamination");
		String intraOralExamination = (String) mapForDS.get("intraOralExamination");
		String chairSideInvestigations = (String) mapForDS.get("chairSideInvestigations");
		String orderingProcedure = (String) mapForDS.get("orderingProcedure");
		
		//--
		String provisionalDiagnosisStr = (String) mapForDS.get("provisionalDiagnosis");
		String finalDiagnosisStr = (String) mapForDS.get("finalDiagnosis");
		String[] provisionalDiagArray = null;
		String allDiagnosisStr=provisionalDiagnosisStr+","+finalDiagnosisStr;
		String[] finalDiagArray = null;
		
		if(provisionalDiagnosisStr!=null && !provisionalDiagnosisStr.trim().equals("")){
			provisionalDiagArray = provisionalDiagnosisStr.split(",");
		}
		
		if(finalDiagnosisStr!=null && !finalDiagnosisStr.trim().equals("")){
			finalDiagArray = finalDiagnosisStr.split(",");
		}
		
		String comorbidityHistoryFromSnomed= (String) mapForDS.get("comorbidityHistoryFromSnomed") ;
		String menstrualAndObstetricHistory= (String) mapForDS.get("menstrualAndObstetricHistory");
		String pOrS= (String) mapForDS.get("pOrS") ;
		String cervicalSmear= (String) mapForDS.get("cervicalSmear") ;
		String pOrV= (String) mapForDS.get("pOrV") ;
		String pOrR= (String) mapForDS.get("pOrR") ;
		String procedureDone= (String) mapForDS.get("procedureDone") ;
		
		String treatmentPlan = (String) mapForDS.get("treatmentPlan") ;
		String fromTemplate=(String) mapForDS.get("fromTemplate") ;
		
		List<Integer> allergyType = (List<Integer>) mapForDS.get("allergyType");
		List<String> allergen = (List<String>) mapForDS.get("allergen");
		List<Integer> saverityCodes = (List<Integer>) mapForDS.get("saverityCodes");
		List<String> allergymonth = (List<String>) mapForDS.get("allergymonth");
		List<String> allergyyear = (List<String>) mapForDS.get("allergyyear");
		List<String> allergystatus = (List<String>) mapForDS.get("allergystatus");
		List<String> allergyRemarkList = (List<String>) mapForDS.get("allergyRemarkList");
		Integer userId = (Integer) (mapForDS.get("userId"));
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<Integer> itemList= new ArrayList<Integer>();
		String ncd = (String) mapForDS.get("ncd");
		String geriatric = (String) mapForDS.get("geriatric");
		String phiso_remarks = (String) mapForDS.get("phiso_remarks");
		String preganancy = (String) mapForDS.get("preganancy");
		Integer period = (Integer) mapForDS.get("period");
		String lactation = (String) mapForDS.get("lactation");
		String submitFrom = (String) mapForDS.get("submitFrom");
		String opdType = (String) mapForDS.get("opdType");
		StringBuffer parkPrescriptions = (StringBuffer) mapForDS.get("parkPrescriptions");
		StringBuffer parkInvestigations = (StringBuffer) mapForDS.get("parkInvestigations");
		
		List<Integer> parkPrescriptionIds = (List<Integer>)  mapForDS.get("parkPrescriptionIds");
		Integer pHeaderId = (Integer)  mapForDS.get("pHeaderId");
		
		List<String> parkInvestigationIds = (List<String>)  mapForDS.get("parkInvestigationIds");
		String dhHeaderIds = (String)  mapForDS.get("dhHeaderIds");
		
		
		List<Integer> allergyDetailIds = (List<Integer>)  mapForDS.get("allergyDetailIds");
		Integer allergyHeaderIds = (Integer)  mapForDS.get("allergyHeaderIds");
		
		List<Integer> parkNuringIds = (List<Integer>)  mapForDS.get("parkNuringIds");
		Integer procedureHeaderId  = (Integer)  mapForDS.get("procedureHeaderId");
		
		List<Integer> parkSurgeryIds = (List<Integer>)  mapForDS.get("parkSurgeryIds");
		Integer surgeryHeaderId  = (Integer)  mapForDS.get("surgeryHeaderId");
		
		String[] fixedInvestigationArray = (String[])mapForDS.get("fixedInvestigationArray");
		
		String pharmacyCheckedStatus="";
		if(null !=mapForDS.get("pharmacyCheckedStatus")){
			pharmacyCheckedStatus=(String)  mapForDS.get("pharmacyCheckedStatus");
		}
		
		String labCheckedStatus="";
		if(null !=mapForDS.get("labCheckedStatus")){
			labCheckedStatus=(String)  mapForDS.get("labCheckedStatus");
		}
		
		
		String RadiologyqueueStatus="";
		if(null !=mapForDS.get("RadiologyqueueStatus")){
			RadiologyqueueStatus=(String)  mapForDS.get("RadiologyqueueStatus");
		}
		
		String Sonography="";
		if(null !=mapForDS.get("Sonography")){
			Sonography=(String)  mapForDS.get("Sonography");
		}
		
		String Echo="";
		if(null !=mapForDS.get("Echo")){
			Echo=(String)  mapForDS.get("Echo");
		}
		
		String Ultrasound="";
		if(null !=mapForDS.get("Ultrasound")){
			Ultrasound=(String)  mapForDS.get("Ultrasound");
		}
		String bloodGroupValue = "";
		if(mapForDS.get("bloodGroupValue") != null){
			bloodGroupValue=(String)  mapForDS.get("bloodGroupValue");
		}
		String bloodGroupStatus = "";
		if(mapForDS.get("bloodGroupStatus") != null){
			bloodGroupStatus=(String)  mapForDS.get("bloodGroupStatus");
		}
		//added by govind 25-09-2017
		List<TaperedMedicineUtil> taperUtilList=new ArrayList<TaperedMedicineUtil>();
		if(mapForDS.get("taperUtilList") != null){
			taperUtilList=(List<TaperedMedicineUtil>)  mapForDS.get("taperUtilList");
		}

		//added by govind 25-09-2017 end
		
		int pharmacyDepartmentId=0;
		int labDepartmentId=0;
		int radiologyDepartmentId=0;
		Properties properties = new Properties();
	       URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
	      
	       try
	       {
	               properties.load(resourcePath.openStream());
	       }
	       catch (Exception e)
	       {
	               e.printStackTrace();
	       }
	        pharmacyDepartmentId = Integer.parseInt(properties.getProperty("pharmacyDepartmentId"));
			 labDepartmentId = Integer.parseInt(properties.getProperty("labDepartmentId"));
			 radiologyDepartmentId = Integer.parseInt(properties.getProperty("radiologyDepartmentId"));
			
		
		
		String diagnosisCheck = "";
		if(mapForDS.get("diagnosisCheck") != null){
			diagnosisCheck = (String)mapForDS.get("diagnosisCheck");
		}
		String antStatus = "";
		if(mapForDS.get("antStatus") != null && !mapForDS.get("antStatus").equals("")) {
			antStatus = (String)mapForDS.get("antStatus").toString();
		}
		
		String referralCase = "";
		if(mapForDS.get("referralCase") != null){
			referralCase = (String)mapForDS.get("referralCase");
		}
		
		Visit visitObjectForGlobal=null;
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			int referredByDoctorId = 0;
			int referredDepartmentId = 0;
			int referredHospitalId = 0;
			int referredByDoctor = 0;
			Integer referdistrict = 0;
			String referdTo = "";
			String referType = null;
			String patientAdvise = null;
			String referralNote = null;
			int opsessionId = 0;
			String age ="";
			
			OpdPatientDetails opdPatientDetails =null;
			if(opdpatientDetailId!=null && opdpatientDetailId!=0 && !opdpatientDetailId.equals(0)){
				if(referralCase.equals(""))
					opdPatientDetails=(OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdpatientDetailId);
				else if(referralCase.equalsIgnoreCase("yes")){
					opdPatientDetails = new OpdPatientDetails();
				}
				/*Criteria crt = session.createCriteria(OpdPatientDetails.class).add(Restrictions.isNull("ReferredType"));
				if(crt.list() !=null && crt.list().size()>0){
					opdPatientDetails=(OpdPatientDetails)crt.list().get(0);
				}*/
			}
			else{
				opdPatientDetails= new OpdPatientDetails();
			}
			
			opdPatientDetails.setHeight(height);
			opdPatientDetails.setWeight(weight);
			opdPatientDetails.setHeadCircumference(headCircumHidden);
				
				if(menstrualAndObstetricHistory!=null)
				opdPatientDetails.setMenstrualAndObstetricHistory(menstrualAndObstetricHistory);
				
				if(pOrS!=null)
				opdPatientDetails.setPOrSData(pOrS);
				
				if(cervicalSmear!=null)
				opdPatientDetails.setCervicalSmear(cervicalSmear);
				
				if(pOrV!=null)
				opdPatientDetails.setPOrVData(pOrV);
				
				if(pOrR!=null)
				opdPatientDetails.setPOrRData(pOrR);
				
				if(procedureDone!=null)
				opdPatientDetails.setProcedureDone(procedureDone);
				
				if(treatmentPlan!=null)
				opdPatientDetails.setTreatmentPlan(treatmentPlan);
			   
			if(patientdeathStatus!=null)
			opdPatientDetails.setPatientDeathStatus(!patientdeathStatus.equals("select")?patientdeathStatus:"");
			// added by amit das on 20-05-2016
			if(mapForDS.get("paywardFlag")!=null && ((String)mapForDS.get("paywardFlag")).equals("Y"))
				opdPatientDetails.setPayWardCheckedStatus("Y");
			
			Visit visitObjToUpdate = (Visit) hbt.get(Visit.class, visitId);
			visitObjToUpdate.setFromTemplate(fromTemplate);
			
			visitNoTemp=visitObjToUpdate.getVisitNo();
			
			/*if(visitObjToUpdate!=null && visitObjToUpdate.getVisitSession()!=null)
				opsessionId = visitObjToUpdate.getVisitSession().getId();*/
			
			age = visitObjToUpdate.getAge();
			
			Patient patient = visitObjToUpdate.getHin();
			
			if (mapForDS.get("patient_status") != null) {
				String patient_status = (String) mapForDS.get("patient_status");
				patient.setPatientStatus("Expired");
				opdPatientDetails.setPatientStatus("expire");
			} 
			if (mapForDS.get("mortuaryStatus") != null) {
				String mortuaryStatus = (String) mapForDS.get("mortuaryStatus"); 
				opdPatientDetails.setSiftedForMortuary(mortuaryStatus);
			}
			
			MasDiet diet = new MasDiet();
			opdPatientDetails.setVisit(visitObjToUpdate);
			MasEmployee masEmployee =null;
			if (empId > 0) {
				//masEmployee=(MasEmployee)hbt.load(MasEmployee.class,empId);
				masEmployee=new MasEmployee();
				masEmployee.setId(empId);
				opdPatientDetails.setEmployee(masEmployee);
			}
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(hospitalId);
			
			/*if(mapForDS.get("mcltype")!=null){
				opdPatientDetails.setMlcType((String)mapForDS.get("mcltype"));
			}*/
			/*if(mapForDS.get("mclname")!=null){
				opdPatientDetails.setMlcName((String)mapForDS.get("mclname"));
			}*/
			if(mapForDS.get("policeIntimation")!=null){
				opdPatientDetails.setPoliceIntimation((String)mapForDS.get("policeIntimation"));
			}
			if(mapForDS.get("mlcCheck")!=null){
				opdPatientDetails.setMlcType((String)mapForDS.get("mlcCheck"));
				opdPatientDetails.setMlcStatus("pending");
			}
			MasHospital masHospitalObj1 = new MasHospital();
			masHospitalObj1.setId(hospitalId);
			
			
			opdPatientDetails.setHospital(masHospitalObj1);
			opdPatientDetails.setGeriatricCase(geriatric);
			opdPatientDetails.setPhysiologicalStatusRemarks(phiso_remarks);
			opdPatientDetails.setPregnancy(preganancy);
			opdPatientDetails.setLactation(lactation);
			opdPatientDetails.setPragnancyPeriod(period);

			opdPatientDetails.setGeneralExamination(generalExamination);
			opdPatientDetails.setLocalExamination(localExamination);
			opdPatientDetails.setInitialDiagnosis(otherDiagnosis);
			opdPatientDetails.setSystemicExamination(systemicExamination);
			opdPatientDetails.setCognitiveFunction(cognitive_function);
			opdPatientDetails.setGeneralAppearance(general_appearance);
			opdPatientDetails.setEarExamination(earExamination);
			opdPatientDetails.setNosePnsExamination(nosePnsExamination);
			opdPatientDetails.setOralCavityThroatExamination(oralCavityThroatExamination);
			opdPatientDetails.setNeckExamination(neckExamination);
			opdPatientDetails.setManagementPlan(managementPlan);
			opdPatientDetails.setMentalStatus(mental_status);
			opdPatientDetails.setPulse(pulse);
			opdPatientDetails.setBmi(bmi);
			opdPatientDetails.setRespiratoryRate(respiratoryRate);
			opdPatientDetails.setSpo2(spo2);
			//---
			opdPatientDetails.setExtraOralExamination(extraOralExamination);
			opdPatientDetails.setIntraOralExamination(intraOralExamination);
			opdPatientDetails.setChairSideInvestigations(chairSideInvestigations);
			opdPatientDetails.setOrderingProcedureFindings(orderingProcedure);;
			//--
			opdPatientDetails.setBp(bp);
			if (temperature != null) {
				opdPatientDetails.setTemperature(temperature);
			}
			opdPatientDetails.setPem(pem);
			opdPatientDetails.setStuning(stunting);
			opdPatientDetails.setWasting(wasting);
			opdPatientDetails.setMac(mac);
			opdPatientDetails.setConsultationTime(consultationTime);
			opdPatientDetails.setConsultationDate(consultationDateToInsert);
			
			opdPatientDetails.setOpdDate(date);
			opdPatientDetails.setOpdTime(time);
			opdPatientDetails.setOpdRemarks(opdRemarks);
			if(mapForDS.get("deferredDiagnosis")!=null)
				opdPatientDetails.setDeferredDiagnosis(mapForDS.get("deferredDiagnosis").toString());
			
			
			if(mapForDS.get("opdReview")!=null)
				opdPatientDetails.setReview(mapForDS.get("opdReview").toString());
			if (mapForDS.get("referdTo") != null) {
				referdTo = (String) mapForDS.get("referdTo");
				opdPatientDetails.setReferredType(referdTo);
			}

			if (mapForDS.get("referType") != null) {
				referType = (String) mapForDS.get("referType");
				opdPatientDetails.setReferredType(referType);
				opdPatientDetails.setReferedStatus("y");;
			}

			if (mapForDS.get("patientAdvise") != null) {
				patientAdvise = (String) mapForDS.get("patientAdvise");
				opdPatientDetails.setPatientAdvise(patientAdvise);
			}

			if (mapForDS.get("referralNote") != null) {
				
				String referralNotes = (String) mapForDS.get("referralNote");
				
				opdPatientDetails.setReferralNotes(referralNotes);
			}
				
		if(summaryConsultation != null){
			opdPatientDetails.setSummaryConsultation(summaryConsultation);
		}
		
		if (mapForDS.get("reviewDate") != null) {
			opdPatientDetails.setReviewDate(reviewDate);
		}
		
			Date referralDate = (Date) mapForDS.get("referralDate");
			Date referalTillDate = (Date) mapForDS.get("referalTillDate");
			opdPatientDetails.setReferTillDate(referalTillDate);
			opdPatientDetails.setReferedDate(referralDate);
			
			
			if (clinicalFindings!= null) {
				opdPatientDetails.setClinicalFindings(clinicalFindings);
			}
			

			if (mapForDS.get("referhospital") != null) {
				referredHospitalId = (Integer) mapForDS.get("referhospital");
				masHospitalObj.setId(referredHospitalId);
				opdPatientDetails.setReferredHospital(masHospitalObj);
			}
			if (null != mapForDS.get("referdistrict") && ((Integer) mapForDS.get("referdistrict")) != 0) {
				referdistrict = (Integer) mapForDS.get("referdistrict");
				MasDistrict masDistrict = new MasDistrict(referdistrict);
				opdPatientDetails.setReferedDistrict(masDistrict);
			} else {
				opdPatientDetails.setReferedDistrict(masHospitalObj
						.getDistrict());
			}
			if ( mapForDS.get("referral")!=null && ((Integer) mapForDS.get("referral")) != 0) {
				if (((Integer) mapForDS.get("referdepartment")) != 0) {
					referredDepartmentId = (Integer) mapForDS.get("referdepartment");
					Integer fromDepartment = (Integer) mapForDS.get("fromDepartment");
					MasDepartment referedDepartment = new MasDepartment();
					referedDepartment.setId(referredDepartmentId);
					opdPatientDetails.setReferedDepartment(referedDepartment);
					opdPatientDetails.setReferredDept(new MasDepartment(fromDepartment));
					//opdPatientDetails.setAdmissionWard(referedDepartment);
					
				}
			}else if (mapForDS.get("admissionWard") != null) {
				Integer admissionWard = (Integer) mapForDS.get("admissionWard");
				opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
				//opdPatientDetails.setReferedDepartment(new MasDepartment(admissionWard));
				//opdPatientDetails.setReferredDept(new MasDepartment(admissionWard));
				
				if(mapForDS.get("checkedPaywaradmissionId")!=null){
					opdPatientDetails.setPaywardOtherDept(new MasDepartment((Integer)mapForDS.get("checkedPaywaradmissionId")));
					opdPatientDetails.setPayWardCheckedStatus("Y");
				}
			}

			if ( mapForDS.get("refereddoctor")!=null &&  ((Integer) mapForDS.get("refereddoctor")) != 0) {
				referredByDoctorId = (Integer) mapForDS.get("refereddoctor");
				MasEmployee emp = new MasEmployee();
				emp.setId(referredByDoctorId);
				opdPatientDetails.setReferredDoctor(emp);
			}
			// observation and ward status :start
			

			if (mapForDS.get("admissionAdvised") != null) {
				String admissionAdvised = (String) mapForDS
						.get("admissionAdvised");
				opdPatientDetails.setAdmissionAdvised(admissionAdvised);
			}
			if (mapForDS.get("observationStatus") != null) {
				String observationStatus = (String) mapForDS
						.get("observationStatus");
				opdPatientDetails.setObservationStatus(observationStatus);
			}
			if (mapForDS.get("admissionDate") != null) {
				Date admissionDate = (Date) mapForDS.get("admissionDate");
				opdPatientDetails.setAdmissionDate(admissionDate);
			}
			
			if(submitFrom.equals("3")){
				opdPatientDetails.setParkPresentComplaintHistory(presentComplaintAndHistory);
				opdPatientDetails.setParkFamilyHistory(familyHistory);
				opdPatientDetails.setParkMedicationHistory(medicationHistory);
				opdPatientDetails.setParkPersonalHistory(personalHistory);
				opdPatientDetails.setParkPatientPrescriptions(parkPrescriptions.toString());
				opdPatientDetails.setParkPatientInvestigation(parkInvestigations.toString());
			}
			
			
			if(submitFrom.equals("4")){
				opdPatientDetails.setParkPresentComplaintHistory(presentComplaintAndHistory);
				opdPatientDetails.setParkFamilyHistory(familyHistory);
				opdPatientDetails.setParkMedicationHistory(medicationHistory);
				opdPatientDetails.setParkPersonalHistory(personalHistory);
				opdPatientDetails.setParkPatientPrescriptions(parkPrescriptions.toString());
				opdPatientDetails.setParkPatientInvestigation(parkInvestigations.toString());
			}
			//ph alert and ncd work :15-06-2016
			
			if(!submitFrom.equals("5")){
				if(visitObjToUpdate!=null && !visitObjToUpdate.getVisitStatus().equalsIgnoreCase("w") && opdpatientDetailId==null && opdpatientDetailId==0 &&  opdpatientDetailId.equals(0)){
				if(ncd!=null && !ncd.equals("")){
					opdPatientDetails.setNcdStatus(ncd);
					PhAlert ph=new PhAlert();
					ph.setHin(patient);
					ph.setAlertMessage(diagnosisIdArray.toString());
					PhMemberSurvey memberSurvey=patient.getMember()!=null?patient.getMember():null;
					MasHospital surveyHospital=memberSurvey!=null && memberSurvey.getHospital()!=null?memberSurvey.getHospital():null;
					ph.setMember(memberSurvey);
					ph.setHospital(memberSurvey.getHospital());
					ph.setAlertType("NCD");
					hbt.save(ph);
				}
			}
			}	
			
			
			// added by amit das on 06-09-2016
			int episodeId = 0;
			long episodeNo = 0;
			String snomed = null;
			PatientEpisode patientEpisode = null;
			String episodeName = null;
			boolean episodeCloseCheck =	false;
			
			if(mapForDS.get("episodeCloseCheck")!=null)
				episodeCloseCheck = 	(Boolean)mapForDS.get("episodeCloseCheck");
			
			
			if(mapForDS.get("episodeId")!=null) {
				episodeId = (Integer)mapForDS.get("episodeId");
				patientEpisode = (PatientEpisode)session.get(PatientEpisode.class, episodeId);
				if(patientEpisode!=null)
					opdPatientDetails.setPatientEpisode(patientEpisode);
				
				if(episodeCloseCheck){
					patientEpisode.setEndDate(new Date());
					session.update(patientEpisode);
				}
			}else{
				patientEpisode = new PatientEpisode();
				snomed = (String)mapForDS.get("snomed");
				
				List<PatientEpisode> patientEpisodes = session.createCriteria(PatientEpisode.class).add(Restrictions.eq("HinNo", patient.getHinNo()))
						.addOrder(Order.desc("EpisodeNumber")).setMaxResults(1)
						.list();
				MasDepartment department = 	(MasDepartment)session.get(MasDepartment.class, departmentId);
				
				if(patientEpisodes!=null && patientEpisodes.size()>0)
					episodeNo =	patientEpisodes.get(0).getEpisodeNumber();
				
				episodeNo = episodeNo+1;
				patientEpisode.setHinNo(patient.getHinNo());
				patientEpisode.setEpisodeNumber(episodeNo);
				patientEpisode.setDepartment(department);
				patientEpisode.setStartDate(new Date());
				patientEpisode.setEpisodeDesc(snomed);
				
				if(mapForDS.get("episodeName")!=null){
					episodeName = (String) mapForDS.get("episodeName");
					patientEpisode.setEpisodeName(episodeName);
				}
				
				
				if(episodeCloseCheck)
					patientEpisode.setEndDate(new Date());
				
				session.save(patientEpisode);
				opdPatientDetails.setPatientEpisode(patientEpisode);
			}
			// ended by amit das on 06-09-2016
			
		//--------------code by anamika 16-12-2016
			if(!diagnosisCheck.equals("")){
				opdPatientDetails.setDiagnosisCheck(diagnosisCheck);
			}else{
				opdPatientDetails.setDiagnosisCheck("n");
			}

			/**
			 * Added by Ritu on 25-08-2017
			 */
			int referredSession = 0;
			if( mapForDS.get("referredSession")!= null){
				referredSession = (Integer) mapForDS.get("referredSession");
				if(referredSession !=0){
				MasSession massession = new MasSession();
				massession.setId(referredSession);
				opdPatientDetails.setReferredSession(massession);
				}
			}
			
			
			//Added by Arbind on 25-04-2017
			if(antStatus.equals("y")) {
				opdPatientDetails.setTemplateName("Antenatal Card");
			}
			// observation and ward status :End
			if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") && null !=opdPatientDetails &&
					opdpatientDetailId!=null && opdpatientDetailId!=0 &&  !opdpatientDetailId.equals(0)){
				hbt.update(opdPatientDetails);
			}else{
				hbt.save(opdPatientDetails);
			}
			opdPatientData.put("OpdPatientDetails", opdPatientDetails);
			
			map.put("opdPatientDetails", opdPatientDetails);
			map.put("opdId", opdPatientDetails.getId());
			
			//==================update Patient table for blood group====================
			 if(hinId != 0){
				 Patient pt = (Patient)hbt.load(Patient.class, hinId);
			/*	if(pt.getConfirmedStatus() != null && !pt.getConfirmedStatus().equals("")){
				 if(pt.getConfirmedStatus().equalsIgnoreCase("y")){
				 }
			   }
			   else
			   */ //commentted by Babita
				//if(pt.getConfirmedStatus()== null || pt.getConfirmedStatus().equals("") || pt.getConfirmedStatus().equals("n")){
				   if(bloodGroupValue != null && !bloodGroupValue.equals("")){
					   String bloodGrVal[] = bloodGroupValue.split("#");
					   if(bloodGrVal.length ==2 )
					   {
					   pt.setBloodGroup(new MasBloodGroup(Integer.parseInt(bloodGrVal[0])));
					   pt.setBloodGroupValue(bloodGrVal[1]);
					   pt.setConfirmedStatus("y");
					   }
					   
					   //pt.setBloodGroupValue(bloodGroupValue);
					   
					   
				   }
				  
				 /*  if(bloodGroupStatus != null){
					   pt.setConfirmedStatus(bloodGroupStatus);
				   }*/
				   
//				   if(bloodGroupStatus!=null && bloodGroupStatus.equalsIgnoreCase("y") && bloodGroupValue != null && pt.getMember()!=null){
				   if(bloodGroupValue!=null && pt.getMember()!=null){
					   int memberId =pt.getMember().getId();
					  PhMemberSurvey phMemberSurvey = (PhMemberSurvey)session.get(PhMemberSurvey.class,new Integer(memberId));
					  phMemberSurvey.setBloodGroup(bloodGroupValue);
					  hbt.update(phMemberSurvey);
				   }
				   
				   hbt.update(pt);
				 //}
			   }
			//-------------------code for Patient refer to other department---------------------------
			Map<String, Object> reservedTokenMap = new HashMap<String, Object>();
			Map<Integer, Object> patientWithTokenMap = new HashMap<Integer, Object>();
			List<Visit> duplicateVisitList = new ArrayList<Visit>();
			List<Visit> visitList = new ArrayList<Visit>();
			int visitNo = 0;
			int opHospitalSerialNo=0;
			QueueManagment queueObj=null;
			Integer totalHospitalVisitNo=0;
			int tokenNo=0;
			String onlineRegStatus="";
			int referdepartmentId=0;
			ArrayList<String> serviceCentreList=null;
			Map<String, Object> mapForDs=null;
		if (mapForDS.get("referral")!=null && ((Integer) mapForDS.get("referral")) != 0) {
			if(referType.equalsIgnoreCase("Internal")){
			if (((Integer) mapForDS.get("referdepartment")) != 0) {
			  if(referralDate.equals(date)){
				 // synchronized (this) {
					
				
				  mapForDs=new HashMap<String,Object>();
					referdepartmentId=(Integer)mapForDS.get("referdepartment");
					serviceCentreList=new ArrayList<String>();
					serviceCentreList.add(String.valueOf(referdepartmentId));
					mapForDs.put("departmentIdlist",serviceCentreList);
					
					Visit visitObj = new Visit();
					visitList = session.createCriteria(Visit.class).createAlias("Hospital", "hospitalId")
							.add(Restrictions.eq("hospitalId.Id", hospitalId))
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					
					/*duplicateVisitList = session.createCriteria(Visit.class).createAlias("Hospital", "hospitalId")
							.createAlias("Department", "department").add(Restrictions.eq("department.Id", referdepartmentId))
							.add(Restrictions.eq("hospitalId.Id", hospitalId)).add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("VisitStatus", "w").ignoreCase()).list();
*/
				//queueObj=new QueueManagment();
			/*if(duplicateVisitList.size()>0 && duplicateVisitList != null){
			}else{*/
				if (visitList.size() > 0) {
					for (Visit vist : visitList) {
						visitNo = vist.getVisitNo();
						opHospitalSerialNo=vist.getTotalHospitalVisit();
					}
				//}
				//visitNo = visitNo + 1;
					mapForDs.put("opHospitalSerialNo", opHospitalSerialNo);
				mapForDs.put("currentVisitNo", visitNo);
				mapForDs.put("currentPriority", currentPriority);
				
				//visitObj.setVisitNo(visitNo);
				/*MasDepartment masDept = new MasDepartment();
				masDept.setId(referredDepartmentId);
				visitObj.setDepartment(masDept);
				queueObj.setDepartment(masDept);*/
				
				//visitObj.setPriorityNumber(currentPriority);
				//queueObj.setPriorityNumber(currentPriority);
				
				if (((Integer) mapForDS.get("refereddoctor")) != 0) {
					referredByDoctorId = (Integer) mapForDS.get("refereddoctor");
					/*MasEmployee emp = new MasEmployee();
					emp.setId(referredByDoctorId);
					visitObj.setDoctor(emp);
					queueObj.setDocotor(emp);*/
					mapForDs.put("dutyDoctorId", referredByDoctorId);
				}
				
				
				mapForDs.put("opdreferal", "y");
				mapForDs.put("hinId", hinId);
				mapForDs.put("onlineRegStatus", onlineRegStatus);
				
				//Patient pt=new Patient();
				//pt.setId(hinId);
				//visitObj.setHin(pt);
				//queueObj.setHin(pt);
				//boolean ispreviouesToken=false;
				//Date currDate=new Date();
				
				

				//sssssssssssssssss
				// Method for getting Today's Resevered Queue number of online Appointment of patient based on Hospital and Department
				/*map=registrationDataService.getTotalVistByHospital(hospitalId, referdepartmentId, currDate, hinId,opsessionId);
				if(null !=map.get("ispreviouesToken")){
					ispreviouesToken=(Boolean)map.get("ispreviouesToken");
				}*/
				/*if(null !=map.get("TotaltokenNo")){
					totalHospitalVisitNo=(Integer)map.get("TotaltokenNo");
				}*/
				/*if(!ispreviouesToken){
				totalHospitalVisitNo=totalHospitalVisitNo+1;
				}*/
				/*else{
					totalHospitalVisitNo=totalHospitalVisitNo;
				}*/
				
				//visitObj.setTotalHospitalVisit( (int)totalHospitalVisitNo);
				//queueObj.setTotalHospitalVisit((int)totalHospitalVisitNo);
				
				//reservedTokenMap=registrationDataService.getReseveredTokenNo(referdepartmentId,hospitalId);
				
				//int maxTokenNo = 0;
				/*if(onlineRegStatus.equals("")){
					
					//getTokenNoForRefferalDepartment
				maxTokenNo =registrationDataService.getTokenNoForDepartment(referdepartmentId, hospitalId,opsessionId);
				
				tokenNo = maxTokenNo + 1;
				if(reservedTokenMap.containsKey(String.valueOf(tokenNo))){
					tokenNo = tokenNo + 1; 
				}
				visitObj.setAppointmentType("D");
				}*/
				/*else{
						if(null !=reservedTokenMap.get("patientWithTokenMap")){
							patientWithTokenMap=(Map<Integer,Object>)reservedTokenMap.get("patientWithTokenMap");
							if(null !=patientWithTokenMap.get(hinId))
								tokenNo=(Integer)patientWithTokenMap.get(hinId);
							visitObj.setAppointmentType("A");
							}
						else {
							//maxTokenNo = getTokenNoForRefferalDepartment(departmentId, hospitalId,opsessionId);
						maxTokenNo = registrationDataService.getTokenNoForDepartment(referdepartmentId, hospitalId,opsessionId);

							tokenNo = maxTokenNo + 1;
							visitObj.setAppointmentType("D");
						}
				}*/
				mapForDs.put("hospitalId",hospitalId);
				mapForDs.put("visitDate",new Date());
				mapForDs.put("age",age);
				
				/*MasHospital hospital=new MasHospital();
				hospital.setId(hospitalId);
				visitObj.setHospital(hospital);
				queueObj.setHospital(hospital);*/
				
				//visitObj.setTokenNo(tokenNo);
				//queueObj.setTokenNo(tokenNo);
				/*Users userObj = new Users();
				userObj.setId(userId);
				visitObj.setAddEditBy(userObj);
				visitObj.setAge(age);*/
				//visitObj.setVisitTime(time);
				
				/**
				 * Commented by ritu on 25-08-2017
				 */
				
				/*SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");
	    	    Date now = new Date();
	    	    String timeObj = sdfTime.format(now);
	    	    if(opsessionId != 0){
					MasSession masSession=new MasSession();
					masSession.setId(opsessionId);
					visitObj.setVisitSession(masSession);
					mapForDs.put("opsessionId",opsessionId);

				} */
				/**
				 * Added By ritu on 25-08-2017
				 */
				mapForDs.put("opsessionId", referredSession);
								
				
	    	    // added by amit das on 09-08-2017
	    	    Users userObj = null;
	    		userObj = (Users) session.get(Users.class, userId);
	    		
	    	    
	    	    
	    	    mapForDs.put("referalStatus","y");
	    	    mapForDs.put("visitDate",new Date());
	    	    mapForDs.put("visitTime",time);
	    	    mapForDs.put("hospitalCode",hospitalCode);
	    	    mapForDs.put("userObj", userObj);
	    	    
	    	   // visitObj.setOpVisitTime(timeObj);
			//	visit.setOpVisitTime(HMSUtil.convertDateToStringOnlyTime(new Date()));
	    	   // visitObj.setVisitDate(new Date());
				//queueObj.setLsCngDate(new Date());
				/*visitObj.setStatus("y");
				queueObj.setTokenStatus("w");
				visitObj.setEdStatus("n");
				visitObj.setVisitStatus("w");
				visitObj.setAddEditDate(new Date());
				visitObj.setAddEditTime(time);
				visitObj.setCurPharVisitStatus("Y");
				visitObj.setReferralStatus("y");
				queueObj.setVisit(visitObj);
				hbt.save(visitObj);
				hbt.save(queueObj);*/

	    	    // Added By Dhananjay 18-Feb-17
	    	    Map<String,Object> visitMap=null;
	    	    visitMap=new HashMap<String,Object>();
	    	    
	    	  visitMap=registrationDataService.saveVisitInformation(mapForDs);
	    	  if(null !=visitMap.get("ref_token_No")){
	    		  map.put("ref_token_No", (Integer)visitMap.get("ref_token_No"));

	    	  }
	    	  if(null !=visitMap.get("successfullyAdded")){
	    		  map.put("successfullyAdded",(Boolean)visitMap.get("successfullyAdded"));
	    	  }
	    	  if(null !=visitMap.get("ref_department_name")){
	    		  map.put("ref_department_name", (String)visitMap.get("ref_department_name"));
	    	  }
                if(!submitFrom.equals("5")){
				if(opdPatientDetails.getId() != 0){
					OpdPatientDetails  opdDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetails.getId());
					opdDetails.setReferedStatus("C");
					hbt.update(opdDetails);
				}	
				}
				
			  }
			 }
			}
			
		 }
		}
//----------------------------------------end of code for reffered patient-------------------------------			
			// save for first time in observation ward
			PatientObservation pob=new PatientObservation();
			if(opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				List<PatientObservation> pobs=new ArrayList<PatientObservation>();
				pobs=session.createCriteria(PatientObservation.class).add(Restrictions.eq("OpdPatientDetails", opdPatientDetails)).list();
				if(pobs.size()>0){
					pob=pobs.get(0);
				}
			}
			
			pob.setPulse(pulse);
			pob.setTemperature(temperature);
			pob.setBp(bp);
			pob.setOpdPatientDetails(opdPatientDetails);
			pob.setLastChgBy(users);
			pob.setLastChgDate(date);
			pob.setLastChgTime(time);
			
			if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") &&
					opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				hbt.update(pob);
			}else{
				hbt.save(pob);
			}
			opdPatientData.put("PatientObservation", pob);
			//end
			
			
			OpdPatientHistory patientHistory = new OpdPatientHistory();
			if(opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				List<OpdPatientHistory> opdPatientHistories=new ArrayList<OpdPatientHistory>();
				opdPatientHistories=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("OpdPatientDetails", opdPatientDetails)).list();
				if(opdPatientHistories.size()>0){
					patientHistory=opdPatientHistories.get(0);
				}
				
			}
			List<Integer> hinIdList = session.createCriteria(Visit.class).createAlias("Hin", "hin").add(Restrictions.idEq(visitId))
										.setProjection(Projections.property("hin.Id")).list();
			if(hinIdList.size()>0){
				hinId=(Integer)hinIdList.get(0);
			}
			
			
			MasDepartment md = new MasDepartment();
			md.setId(departmentId);
			patientHistory.setDepartment(md);

			MasHospital mh = new MasHospital();
			mh.setId(hospitalId);
			patientHistory.setHospital(mh);

			Patient p = new Patient();
			p.setId(hinId);
			patientHistory.setHin(p);

			patientHistory.setVisitInpatientId(visitId);

			patientHistory.setLastChgTime(time);
			patientHistory.setLastChgBy(users);

			patientHistory.setStatus("Y");
			patientHistory.setLastChgDate(date);
			patientHistory.setPhysicalExamination(physicalExamination);
			patientHistory.setPresentComplaintHistory(presentComplaintAndHistory);
			patientHistory.setPastIllnessHistory(historyOfPastIllness);
			patientHistory.setPersonalPresentHistory(personalHistory);
			patientHistory.setFamilyPastHistory(familyHistory);
			patientHistory.setMadicationHistory(medicationHistory);
			patientHistory.setComorbidityHistory(comorbidityHistoryFromSnomed);
			patientHistory.setSurgicalHistory(surgicalHistory);
			patientHistory.setAntenatalHistory(antenatalHistory);
			patientHistory.setPermorbidPersonality(permorbidPersonality);
			patientHistory.setDevelopmentHistory(developmentHistory);
			patientHistory.setDietHistory(dietHistory);
			patientHistory.setSocioEconomicHistory(socioEconomicHistory);
			patientHistory.setPastHistory(pastHistory);
			patientHistory.setMenstrualHistory(menstrualHistory);
			patientHistory.setObstreticHistory(obstreticHistory);
			patientHistory.setOpdPatientDetails(opdPatientDetails);
			patientHistory.setIpOpPacStatus("OP");
			if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") &&
					opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				hbt.update(patientHistory);
			}else{
				hbt.save(patientHistory);
			}
			opdPatientData.put("OpdPatientHistory", patientHistory);
			List<QueueManagment> queueList= session.createCriteria(QueueManagment.class).add(Restrictions.eq("Hospital.Id", hospitalId))
									.add(Restrictions.eq("Visit.Id", visitId)).add(Restrictions.eq("Department.Id", departmentId))
									.add(Restrictions.eq("Hin.Id",hinId)).add(Restrictions.eq("LsCngDate", new Date()))
									.setMaxResults(1)
									.list();
			
			QueueManagment queue=new QueueManagment();
			if(queueList!=null && queueList.size()>0){
				queue=queueList.get(0);
				queue.setTokenStatus("C");
				// added by amit das on 21-06-2016
				String currentDate1 = null;
				String currentTime1 = null;
				utilMap = (Map) HMSUtil.getCurrentTime();
				if(utilMap!=null && utilMap.get("currentDate")!=null && utilMap.get("currentTime")!=null){
					currentDate1 = (String) utilMap.get("currentDate");
					currentTime1 = (String) utilMap.get("currentTime");

				queue.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(currentDate1));
				queue.setLastChgTime(currentTime1);
				}
				hbt.update(queue);
			}
		/*	if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") &&
					opdpatientDetailId!=null && !opdpatientDetailId.equals(0)){
				hbt.update(queue);
			}else{
				hbt.save(queue);
			}*/
			opdPatientData.put("QueueManagment", queue);
			// -----------------------------------------------------------------------------------

			// --------------values to be entered in discharge table for
			// diagnosis----------------------comorbidityCheckArray
			Map<String, Integer> comorbidityMap = new HashMap<String, Integer>();
			if (comorbidityCheckArray != null) {
				for (String str : comorbidityCheckArray) {
					comorbidityMap.put(str, Integer.parseInt(str));
				}
			}
			//--------------For Mlc data-------------------------------
			if(mlcNameList.size()>0){
				
				List<String>pMLCs=session.createCriteria(PatientWiseMlc.class)
						.add(Restrictions.eq("OpdPatientDetail", opdPatientDetails))
						.setProjection(Projections.property("MlcType"))
						.list();
				
				for(int i=0;i<mlcNameList.size();i++){
					PatientWiseMlc patientWiseMlc = new PatientWiseMlc();
					patientWiseMlc.setMlcType(mlcNameList.get(i).toString());
					patientWiseMlc.setHin(patient);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					patientWiseMlc.setHospital(masHospital);
					patientWiseMlc.setOpdPatientDetail(opdPatientDetails);
					patientWiseMlc.setStatus("y");
					if(!pMLCs.contains(mlcNameList.get(i).toString()))
						hbt.save(patientWiseMlc);
				 }
			}
			//----------------------------------------------
			Long memberSurveyId=0l;
			int memberId = 0;
			if(opdPatientDetails.getVisit().getHin().getMember()!= null){
				memberId = (Integer)opdPatientDetails.getVisit().getHin().getMember().getId();
				memberSurveyId= (Long)opdPatientDetails.getVisit().getHin().getMember().getMemberId();
			}
			List<PhMemberSurvey>memberSurveyList = new ArrayList<PhMemberSurvey>();
			memberSurveyList = session.createCriteria(PhMemberSurvey.class).add(Restrictions.idEq(memberId)).list();
			int hospitalIdMemberSurvey = 0;
			if(memberSurveyList.size()>0){
				hospitalIdMemberSurvey = memberSurveyList.get(0).getHospital().getId();
			}
			
			//persisting snomed list:rajendra kumar
			List<String> provisionalDiagList = 	null;
			List<String> finalDiagList = 	null;
			
			if(provisionalDiagArray!=null && provisionalDiagArray.length>0)
				provisionalDiagList = Arrays.asList(provisionalDiagArray);
			
			if(finalDiagArray!=null && finalDiagArray.length>0)
				finalDiagList = Arrays.asList(finalDiagArray);
			
			StringBuffer sb=new StringBuffer();
			if(snomedListArray!=null && snomedListArray.length>0){
				for(String str:snomedListArray)
				{
						if(opdType!=null && opdType.equalsIgnoreCase("lite")){
						if(provisionalDiagList!=null && provisionalDiagList.contains(str))
							sb.append(str+",");
						else if(finalDiagList!=null && finalDiagList.contains(str))
							sb.append(str+",");
						}else{
							sb.append(str+",");
						}
				}
				if(sb.length()>0){
					String snomedStr = sb.toString().substring(0, sb.toString().length()-1);
					opdPatientDetails.setSnomedNames(snomedStr);
				}
			}
			if(opdType!=null){
			if(opdType!=null && (opdType.equalsIgnoreCase("lite") || opdType.equalsIgnoreCase("detail") || opdType.equalsIgnoreCase("LP"))){
			OpdPatientDetails opdPatientDetail=null;
			String finalDiag=null;
			String provisional=null;
			List<OpdPatientDetails> opdPatientList= session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "v")
					.add(Restrictions.eq("v.Id", visitId)).add(Restrictions.eq("v.Department.Id", departmentId))
					.add(Restrictions.eq("ConsultationDate", HMSUtil.convertStringTypeDateToDateType(consultationDate))).list();
			if(opdPatientList.size()>0){
				opdPatientDetail=opdPatientList.get(0);
				if(opdPatientDetail!=null && !opdPatientDetail.equals("")){
					 finalDiag = opdPatientDetail.getFinalDiagnosis();
					 provisional = opdPatientDetail.getProvisionalDiagnosis();
				}
			}
			//Remove from below && !snomed.equals(" ") ticket 835
			if(snomed!=null  ){
				if(provisional!=null && !provisional.equals("") && !provisional.equals(" ")){
					opdPatientDetails.setProvisionalDiagnosis(snomed.trim()); //+","+provisional.trim() //Added By Om Tripathi
				}else{
				opdPatientDetails.setProvisionalDiagnosis(snomed.trim());//Added By Om Tripathi
				}
			}
			//Remove from below  && !finalDiagnosis.equals("") && !finalDiagnosis.equals(" ")
			String finalDiagnosis = (String)mapForDS.get("finalDiagnosis");
			if(finalDiagnosis!=null){
				if(finalDiag!=null && !finalDiag.equals("") && !finalDiag.equals(" ")){
					opdPatientDetails.setFinalDiagnosis(finalDiagnosis.trim()); //+","+finalDiag.trim()
				}else{
				opdPatientDetails.setFinalDiagnosis(finalDiagnosis.trim());
				 }
			   }
			  }
			}
			String notifiableStatus=null;
			List<String> finalDiagnosisIds = null;
			Map<Integer,Integer>savedIcdId=new HashMap<Integer,Integer>();
			if(diagnosisIdArray!=null && diagnosisIdArray.length>0){
				finalDiagnosisIds=new ArrayList<String>(Arrays.asList(diagnosisIdArray));
			}
			String name="";
			String icdName="";
			String alertT="";
			String isNcd="False";
			if (diagnosisIdArray != null && diagnosisIdArray.length>0) {
				for (String strDiag : finalDiagnosisIds) {
					Patient patientObj = new Patient();
					patientObj.setId(hinId);
					
					MasIcd masIcd = new MasIcd();
					
					String[] codeAndId=strDiag.split("-");
					
					String[] BothId=codeAndId[0].split("@@@");
					String masIcdId = BothId[0];
					Integer dischargeId=Integer.parseInt(codeAndId[1]);
					if(codeAndId.length==3){
					diagnosis_status = codeAndId[2];
					}
					DischargeIcdCode dischargeIcdCode = null;
					String phAlert = "";
					String alertType = "";
					
					if(!dischargeId.equals(0)){
						dischargeIcdCode = (DischargeIcdCode)hbt.load(DischargeIcdCode.class, dischargeId);
					}else{
						dischargeIcdCode = new DischargeIcdCode();
					}
					
					dischargeIcdCode.setHin(patientObj);
					if (masIcdId != null && !masIcdId.equals("")) {
						Criteria criteria = session.createCriteria(MasIcd.class, "icd").add(Restrictions.eq("icd.IcdCode", masIcdId).ignoreCase())
								.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
						List<MasIcd> mList = criteria.list();
						
						if (mList.size() > 0) {
							int micIcd = mList.get(0).getId();
							masIcd=mList.get(0);
							if(mList.get(0).getPhAlert() != null && mList.get(0).getPhAlert().equalsIgnoreCase("y")){
								
								if(mList.get(0).getAlertType()!= null){
									alertType = mList.get(0).getAlertType();
								}
							}
							
							if(masIcd.getNotifiableDesease()!=null){
								notifiableStatus=masIcd.getNotifiableDesease();
							}
							
							masIcd.setId(micIcd);
							map.put("icd", mList.get(0));
							/*if(memberId != 0 && !alertType.equals("")){
									PhAlert alertToStaff = new PhAlert();
									alertToStaff.setAlertType(alertType);
									if(hospitalIdMemberSurvey != 0){
										MasHospital masHospital = new MasHospital();
										masHospital.setId(hospitalIdMemberSurvey);
										alertToStaff.setHospital(masHospital);
									}
									PhMemberSurvey phMemberSurvey = new PhMemberSurvey();
									phMemberSurvey.setId(memberId); 
									alertToStaff.setMember(phMemberSurvey);
									
									Patient patient2 = new Patient();
									patient2.setId(hinId);
									alertToStaff.setHin(patient2);
									hbt.save(alertToStaff);
							}*/
						}
					}
					dischargeIcdCode.setIcd(masIcd);
					dischargeIcdCode.setAddEditDate(consultationDateToInsert);
					dischargeIcdCode.setAddEditTime(consultationTime);
					dischargeIcdCode.setStatus("Y");
					dischargeIcdCode.setDiagnosisStatus(diagnosis_status);
					dischargeIcdCode.setVisit(visitObjToUpdate);
					dischargeIcdCode.setHospital(new MasHospital(hospitalId));
					if(!dischargeId.equals(0)){
						hbt.update(dischargeIcdCode);
					}else{
						hbt.save(dischargeIcdCode);
					}
					name=masIcd.getIcdName();
					alertT=masIcd.getAlertType();
					if(alertT!=null ){
						if(alertT.equals("NCD")){
						isNcd="True";
						}
					}
					icdName=icdName+","+name+",";
					savedIcdId.put(dischargeIcdCode.getIcd().getId(), dischargeIcdCode.getId());
					
					opdPatientData.put("DischargeIcdCode", dischargeIcdCode);
				}
			}
			
			StringBuffer prescribedMedicin=new StringBuffer();
			if (submitFrom!="5"){
				// added by om tripathi
			/*if(nomenclatureList.size()>0){

				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				if(pHeaderId!=null && pHeaderId!=0 ){
					patientPrescriptionHeader = hbt.load(PatientPrescriptionHeader.class, pHeaderId);
				}else{
					patientPrescriptionHeader = new PatientPrescriptionHeader();
				}
				
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				patientPrescriptionHeader.setHin(patient);
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setVisit(visitObjToUpdate);
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				patientPrescriptionHeader.setDispencingDate(date);
				patientPrescriptionHeader.setOpdPatientDetail(opdPatientDetails);
				
				String pharmacyLabStatus="P";
				PharmacyLabQueue pharmacyLabQueue=saveQueueNoForPharmacy(pharmacyDepartmentId,hospitalId,visitObjToUpdate,pharmacyLabStatus);
				if(null !=pharmacyLabQueue)
				patientPrescriptionHeader.setPharmacyLabQueue(pharmacyLabQueue);
				
				if(pHeaderId!=null && pHeaderId!=0){
					hbt.update(patientPrescriptionHeader);
				}else{
					hbt.save(patientPrescriptionHeader);
				}
				
				opdPatientData.put("PatientPrescriptionHeader", patientPrescriptionHeader);
			}*/
				
				for (int i = 0; i < nomenclatureList.size(); i++) {
					String nomenclatures = (String) nomenclatureList.get(i);
					List<MasStoreOutItem> itemIdListOut = new ArrayList<MasStoreOutItem>();
					Map<String,Object> dataMap = new HashMap<String,Object>();
					dataMap.put("nomenclatures", nomenclatures);
					dataMap.put("hospitalId", hospitalId);
					dataMap.put("departmentId", departmentId);
					dataMap.put("userId", userId);
					itemIdListOut = getItemIdOutFromPVMS(dataMap);
					for (int k = 0; k < itemIdListOut.size(); k++) {
						itemList.add(itemIdListOut.get(k).getId());//
					}
				}
				
			if (pvmsNoList.size() > 0 || nomenclatureList.size()>0) {
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				if(pHeaderId!=null && pHeaderId!=0 ){
					patientPrescriptionHeader = hbt.load(PatientPrescriptionHeader.class, pHeaderId);
				}else{
					patientPrescriptionHeader = new PatientPrescriptionHeader();
				}
				
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				patientPrescriptionHeader.setHin(patient);
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setVisit(visitObjToUpdate);
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				patientPrescriptionHeader.setDispencingDate(date);
				patientPrescriptionHeader.setOpdPatientDetail(opdPatientDetails);
				
				//Start..    Added by Dhananjay 02-Jan-2017
				
				String pharmacyLabStatus="P";
			PharmacyLabQueue pharmacyLabQueue=saveQueueNoForPharmacy(pharmacyDepartmentId,hospitalId,visitObjToUpdate,pharmacyLabStatus);
			if(null !=pharmacyLabQueue)
			patientPrescriptionHeader.setPharmacyLabQueue(pharmacyLabQueue);
				//End
				
				if(pHeaderId!=null && pHeaderId!=0){
					hbt.update(patientPrescriptionHeader);
				}else{
					hbt.save(patientPrescriptionHeader);
				}
				
				opdPatientData.put("PatientPrescriptionHeader", patientPrescriptionHeader);
				
				
				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					List<MasStoreItem> itemIdListNew = new ArrayList<MasStoreItem>();
					itemIdListNew = getItemIdFromPVMS(pvmsNo);
					for (int k = 0; k < itemIdListNew.size(); k++) {
						itemIdList.add(itemIdListNew.get(k).getId());
					}
				}
				int item_class_id=0;
				MasFrequency masFrequency = null;
				MasStoreItem masStoreItem = null;
				MasStoreOutItem masStoreOutItem = null;
				RouteOfAdministration routeOfAdministration = null;
				OpdInstructionTreatment opdInstructionTreatment = null;
				List<Object> opdPatientListObject = new ArrayList<Object>();
				
				String[] durationStr1=null;
				String[] durationStr2=null;
				List<String>durationPrescriptionList=new ArrayList<String>();
				if (mapForDS.get("durationPrescriptionList") != null) {
					durationPrescriptionList =(List<String>) mapForDS.get("durationPrescriptionList");
				}
				
				InjAppointmentDetails injAppointmentDetails=null;
				
				for (int i = 0; i < itemIdList.size(); i++) {
					String[]dayCount=null;
					String mainStr="";
					if(durationPrescriptionList!=null && durationPrescriptionList.size()>i){
						mainStr=(String)durationPrescriptionList.get(i);
						dayCount=mainStr.split(",");
					}
					
					PatientPrescriptionDetails patientPrescriptionDetails=null;
					
					if(parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
						patientPrescriptionDetails	= hbt.load(PatientPrescriptionDetails.class, parkPrescriptionIds.get(i));
						//added by govind 28-03-2017 for duplicate came in recall patient
						Criteria cr=session.createCriteria(InjAppointmentDetails.class)
								.add(Restrictions.eq("PrescriptionDetails.Id", parkPrescriptionIds.get(i)));
						if(cr.list().size()>0){
						injAppointmentDetails=(InjAppointmentDetails)cr.list().get(0);
						}
						//added by govind 28-03-2017 end
					}else{
						patientPrescriptionDetails	= new PatientPrescriptionDetails();
						injAppointmentDetails = new InjAppointmentDetails();//added by govind 28-03-2017 
					}
					
					if (itemIdList != null && itemIdList.size() > 0	&& itemIdList.get(i) != 0)
						masStoreItem = (MasStoreItem)session.load(MasStoreItem.class, itemIdList.get(i));//new MasStoreItem(itemIdList.get(i));
					
					if (frequencyList != null && frequencyList.size() > 0 && frequencyList.get(i) != 0)
						masFrequency = new MasFrequency(frequencyList.get(i));

					if (routes != null && routes.size() > 0	&& routes.get(i) != 0)
						routeOfAdministration = new RouteOfAdministration(routes.get(i));
					
					if (ctList != null && ctList.size() > 0)
						patientPrescriptionDetails.setCt(ctList.get(i));

					if (instrunctions != null && instrunctions.size() > 0	&& instrunctions.get(i) != 0){
						opdInstructionTreatment = new OpdInstructionTreatment(instrunctions.get(i));
					}
					if (noOfDaysList.size() > 0 && noOfDaysList.get(i) != 0	&& noOfDaysList.get(i) != 0){
						patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					}	
					String instruction="";
					if(spLinstrunctionList!=null && spLinstrunctionList.size()>0){
						if(spLinstrunctionList.get(i)!=null){
							String spl[]=spLinstrunctionList.get(i).split(";");
							int length=spl.length;
							if(length>0){
					    		for(int s=0;s<length;s++){
					    			if(s==0){
					    				instruction=instruction+spl[s];
					    			}else{
					    				instruction=instruction+"\n"+spl[s];
					    			}
					    		}
					    	patientPrescriptionDetails.setSplInstruction(instruction);
					    	}else{
						     patientPrescriptionDetails.setSplInstruction(spLinstrunctionList.get(i));
					    	}
						}
					}
					if(masStoreItem!=null){
					prescribedMedicin.append(masStoreItem.getNomenclature()+",");
					patientPrescriptionDetails.setNotAvailable(prescription_availableStatusList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageList.get(i));
					patientPrescriptionDetails.setInsrtuction(opdInstructionTreatment);
					patientPrescriptionDetails.setRoute(routeOfAdministration);
					patientPrescriptionDetails.setType("OP");
					patientPrescriptionDetails.setTotal(totalList.get(i));
					patientPrescriptionDetails.setActualTotal(actualTotalAfterMixList.get(i)); // added by amit das on 19-11-2016
					patientPrescriptionDetails.setStartDate(startDates.get(i));
					patientPrescriptionDetails.setEndDate(endDates.get(i));
					patientPrescriptionDetails.setNursingStatus("n");
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
				    }
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
					/*Properties properties = new Properties();
					URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");*/
					try {
						properties.load(resourcePath.openStream());
						String item_class_code = properties.getProperty("item_class_id");
						item_class_id=Integer.parseInt(item_class_code);
					} catch (Exception e) {
						e.printStackTrace();
					}
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id);
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					
					if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") && parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
						hbt.update(patientPrescriptionDetails);
					}else{
						if(masStoreItem!=null){
						hbt.save(patientPrescriptionDetails);
						for(TaperedMedicineUtil tapUtil:taperUtilList){
							if(tapUtil.getItemId().equals(masStoreItem.getId())){
							TaperedMedicineOp tapered=new TaperedMedicineOp();
							tapered.setPrescription(patientPrescriptionDetails);
							MasFrequency frequency=new MasFrequency();
							frequency.setId(tapUtil.getFrequency());
							MasStoreItem item=new MasStoreItem();
							item.setId(tapUtil.getItemId());
							tapered.setFrequency(frequency);
							tapered.setItem(item);
							tapered.setDosageDetail(tapUtil.getDosage());
							tapered.setDosage(tapUtil.getDosageCount());
							tapered.setNoOfDays(tapUtil.getDuration());
							tapered.setTotal(tapUtil.getTotal());
							hbt.save(tapered);
							}
						}
						
				
						}
					}
					
		opdPatientListObject.add(patientPrescriptionDetails);
		//prevent insulin for nursing station and available in pharmacy only in readonly mod
		if(!submitFrom.equals("3") && !submitFrom.equals("4")){
			if(storeItemList.size()>0){
				List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
				injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
				
				InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
				
				 
				if(injectionRegisterList.size()>0){
					for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
						injectionAppointment.setId(injectionRegisterTemp.getId());
					}
				}else{
					Patient patientInj = new Patient();
					patientInj.setId(hinId);
					injectionAppointment.setHin(patientInj);
					Visit visitInj = new Visit();
					visitInj.setId(visitId);
					injectionAppointment.setVisit(visitInj);
					MasHospital masHospitalInj = new MasHospital();
					masHospitalInj.setId(hospitalId);
					injectionAppointment.setHospital(masHospitalInj);
					
					injectionAppointment.setStatus("p");
					injectionAppointment.setLastChgTime(time);
					Users user = new Users();
					user.setId(userId);
					injectionAppointment.setLastChgBy(user);
					injectionAppointment.setLastChgDate(date);
					injectionAppointment.setPrescription(patientPrescriptionHeader);
					hbt.save(injectionAppointment);
				}
						if(mainStr.equals("")){
							//injAppointmentDetails.setAppointmentTime(time);
							injAppointmentDetails.setInjAppointmentDate(new Date());
							injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
							
							MasFrequency frequency = new MasFrequency();
							frequency.setId(frequencyList.get(i));
							injAppointmentDetails.setFrequency(frequency);
							
							if(routeOfAdministration!=null)
							injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
							
							 
							MasStoreItem item = new MasStoreItem();
							item.setId(itemIdList.get(i));
							
							//Check for insullin method checkForInsulinInjection(itemIdList.get(i)) added by Dhananjay 21/07/2016
							
							if(!checkForInsulinInjection(itemIdList.get(i))){
								
							
							injAppointmentDetails.setItem(item);
							if(routeOfAdministration!=null){
								injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
							}
							injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
							injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
							injAppointmentDetails.setPrescriptionDetails(patientPrescriptionDetails);
							injAppointmentDetails.setStatus("p");
							injAppointmentDetails.setFinalStatus("n");
							hbt.save(injAppointmentDetails);
							}
						}else{
							for(String str:dayCount){
								injAppointmentDetails = new InjAppointmentDetails();
								
								SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
								Calendar cal=Calendar.getInstance();
								Integer nextDate=Integer.parseInt(str.trim());
								Date appointmentDate=null;
								
								if(nextDate==1){
									appointmentDate=new Date();
									injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
									injAppointmentDetails.setInjAppointmentDate(appointmentDate);
									if(mainStr!=null && !mainStr.equals("")){
										injAppointmentDetails.setExceptionalPrescription("y");
									}
								}else{
									if(nextDate>1){
										cal.add(Calendar.DATE, nextDate-1);
									}else{
										cal.add(Calendar.DATE, nextDate);
									}
									
									appointmentDate=HMSUtil.convertStringyyyyMMddTypeToDateType(format.format(cal.getTime()));
									injAppointmentDetails.setNoOfDays(1);
									injAppointmentDetails.setInjAppointmentDate(appointmentDate);
									injAppointmentDetails.setExceptionalPrescription("y");
								}
								
								
								injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
								
								MasFrequency frequency = new MasFrequency();
								frequency.setId(frequencyList.get(i));
								injAppointmentDetails.setFrequency(frequency);
								
								if(routeOfAdministration!=null)
								injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
								
								MasStoreItem item = new MasStoreItem();
								item.setId(itemIdList.get(i));
								injAppointmentDetails.setItem(item);
								if(routeOfAdministration!=null){
									injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
								}
								injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
							
								injAppointmentDetails.setPrescriptionDetails(patientPrescriptionDetails);
								injAppointmentDetails.setStatus("p");
								injAppointmentDetails.setFinalStatus("n");
								hbt.save(injAppointmentDetails);
							}
						}
								
						}
					  }
				//end injectionappointment
				}
				
				opdPatientDataList.put("patientPrescriptionDetailsListObject", opdPatientListObject);
				
				List<Integer> prescriptionIdOutList = new ArrayList<>();
				if(mapForDS.get("prescriptionIdOutList")!=null){
				prescriptionIdOutList = (List<Integer>)mapForDS.get("prescriptionIdOutList");
				}
				if (mapForDS.get("durationPrescriptionList") != null) {
					durationPrescriptionList =(List<String>) mapForDS.get("durationPrescriptionList");
				}
				
				for (int i = 0; i < itemList.size(); i++) {
					masStoreOutItem = new MasStoreOutItem();
					String[]dayCount=null;
					String mainStr="";
					if(durationPrescriptionList!=null && durationPrescriptionList.size()>i){
						mainStr=(String)durationPrescriptionList.get(i);
						dayCount=mainStr.split(",");
					}
					PatientPrescriptionDetails patientPrescriptionDetails=null;
					if (prescriptionIdOutList != null && prescriptionIdOutList.size() > 0 && prescriptionIdOutList.get(i) != 0){
						patientPrescriptionDetails	= hbt.load(PatientPrescriptionDetails.class, prescriptionIdOutList.get(i));}
					else
						patientPrescriptionDetails = new PatientPrescriptionDetails();
					//if (itemOutList != null && itemOutList.size() > 0	&& itemList.get(i) != 0){
						masStoreOutItem = (MasStoreOutItem)session.load(MasStoreOutItem.class, itemList.get(i));
						
					//}
					if (frequencyOutList != null && frequencyOutList.size() > 0 && frequencyOutList.get(i) != 0){
						masFrequency = new MasFrequency(frequencyOutList.get(i));
					}
					if (routesOut != null && routesOut.size() > 0	&& routesOut.get(i) != 0){
						routeOfAdministration = new RouteOfAdministration(routesOut.get(i));
					}
					if (instrunctionOutList != null && instrunctionOutList.size() > 0	&& instrunctionOutList.get(i) != 0){
						opdInstructionTreatment = new OpdInstructionTreatment(instrunctionOutList.get(i));
					}
					if (noOfDaysOutList.size() > 0 && noOfDaysOutList.get(i) != 0	&& noOfDaysOutList.get(i) != 0){
						patientPrescriptionDetails.setNoOfDays(noOfDaysOutList.get(i));
					} 
					
					if(spinstrunctionOutList!=null && spinstrunctionOutList.size()>0){
						patientPrescriptionDetails.setSplInstruction(spinstrunctionOutList.get(i));
					}
					
					//prescribedMedicin.append(masStoreOutItem.getNomenclature()+",");
					if(masStoreOutItem!=null){
					patientPrescriptionDetails.setItemOut(masStoreOutItem);
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageOutList.get(i)); //our list and size
					patientPrescriptionDetails.setInsrtuction(opdInstructionTreatment);
					patientPrescriptionDetails.setRoute(routeOfAdministration);
					patientPrescriptionDetails.setType("OP");
					patientPrescriptionDetails.setTotal(totalOutList.get(i));
					//patientPrescriptionDetails.setActualTotal(actualTotalAfterMixOutList.get(i)); 
					//patientPrescriptionDetails.setStartDate(startDatesOut.get(i));
					//patientPrescriptionDetails.setEndDate(endDatesOut.get(i));
					patientPrescriptionDetails.setNursingStatus("n");
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					}
					if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")){
						hbt.saveOrUpdate(patientPrescriptionDetails); 
					}else{
						try {
							if(masStoreOutItem!=null){
							hbt.saveOrUpdate(patientPrescriptionDetails);
							}
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
						opdPatientListObject.add(patientPrescriptionDetails);
				}
				
				opdPatientDataList.put("patientPrescriptionDetailsListObject", opdPatientListObject);

			}
			// added by om tripathi End
			
		}
			
			
			// Added by dhananjay 28-12-2016
			if(null !=pharmacyCheckedStatus && !pharmacyCheckedStatus.equals("") && pharmacyCheckedStatus.equalsIgnoreCase("y")){
				String pharmacyLabStatus="P";
				PharmacyLabQueue pharmcayQueue=new PharmacyLabQueue();
				pharmcayQueue=saveQueueNoForPharmacy(pharmacyDepartmentId,hospitalId,visitObjToUpdate,pharmacyLabStatus);
				
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				if(pHeaderId!=null && pHeaderId!=0 ){
					patientPrescriptionHeader = hbt.load(PatientPrescriptionHeader.class, pHeaderId);
				}else{
					patientPrescriptionHeader = new PatientPrescriptionHeader();
				}
				
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				patientPrescriptionHeader.setHin(patient);
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setVisit(visitObjToUpdate);
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setPrescriptionDate(consultationDateToInsert);
				patientPrescriptionHeader.setPrescriptionTime(consultationTime);
				patientPrescriptionHeader.setDispencingDate(date);
				patientPrescriptionHeader.setOpdPatientDetail(opdPatientDetails);
				if(null !=pharmcayQueue)
				patientPrescriptionHeader.setPharmacyLabQueue(pharmcayQueue);
				
				if(pHeaderId!=null && pHeaderId!=0){
					hbt.update(patientPrescriptionHeader);
				}else{
					hbt.save(patientPrescriptionHeader);
				}
					
			}
			// End 
			
			//persist prescribed medicin for ph
			
			if(patient.getMember()!= null && (allDiagnosisStr.contains("Diabetes")
					||allDiagnosisStr.contains("diabetes")||allDiagnosisStr.contains("diabetic") 
					||allDiagnosisStr.contains("Diabetic")||allDiagnosisStr.contains("hypertension") 
					||allDiagnosisStr.contains("Hypertension") )){
				PhAlert phAlert = new PhAlert();
				if(hospitalIdMemberSurvey != 0){
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalIdMemberSurvey);
					phAlert.setHospital(masHospital);
				}
				int basicSectionId=0;
				int subSectionId=0;
				List<Object[]> basicAndSubSection = new ArrayList<Object[]>();
				String qry1= "select sub_center_id, basic_section_id from ph_member_survey left outer join ph_house_survey "
						+ " on house_id= house_hold_id where member_id= "+memberSurveyId;
						
				basicAndSubSection=session.createSQLQuery(qry1).list();
				if(basicAndSubSection.size()>0){
					for(Object[] obj:basicAndSubSection ){
						basicSectionId=(Integer)obj[1];
						subSectionId=(Integer)obj[0];
					}
				} 
				PhMemberSurvey phMemberSurvey = new PhMemberSurvey();
				phMemberSurvey.setId(memberId); 
				phAlert.setMember(phMemberSurvey);
				phAlert.setAlertMessage(allDiagnosisStr);
				phAlert.setAlertType("NCD");
				phAlert.setVisitDate(new Date());
				phAlert.setDiagnosisStatus("y");
				phAlert.setStatus("Y");
				phAlert.setSubSectionId(subSectionId);
				phAlert.setBasicSectionId(basicSectionId);
				if( prescribedMedicin!=null ){
				phAlert.setPrescribeMedicin(prescribedMedicin.toString());
				}
				phAlert.setBmi(bmi);
				phAlert.setBp(bp);
				phAlert.setTemperature(temperature);
				phAlert.setHeight(height);
				phAlert.setWeight(weight);
				phAlert.setPulse(pulse);
				phAlert.setHin(patient);
				hbt.save(phAlert);
			
			}
			//Start..   Added by Dhananjay on 03-01-2017 String Echo="";String Ultrasound="";String Sonography="";
			if(null !=labCheckedStatus && !labCheckedStatus.equals("") && labCheckedStatus.equalsIgnoreCase("y") && RadiologyqueueStatus.equals("n")){
				DgOrderhd dgOrderHd=saveOrderBookingforLab(dhHeaderIds,consultationDateToInsert,consultationTime,hospitalId,hinId,
						departmentId,empId,visitObjToUpdate,users);	
				
				String pharmacyLabStatus="L";
				PharmacyLabQueue pharmacyLabQueue=saveQueueNoForPharmacyAndLab(labDepartmentId,hospitalId,visitObjToUpdate, pharmacyLabStatus,dgOrderHd);
				
			}
			
			
			else if(null !=RadiologyqueueStatus && !RadiologyqueueStatus.equals("") && RadiologyqueueStatus.equalsIgnoreCase("y") && labCheckedStatus.equals("n")){
				String LabStatus="R";
				saveOrderBookingforLabAndRadio(dhHeaderIds,consultationDateToInsert,consultationTime,hospitalId,hinId,
						departmentId,empId,visitObjToUpdate,users,labDepartmentId,radiologyDepartmentId,LabStatus);	
				//labDepartmentId				
			}
			
			else if(null !=RadiologyqueueStatus && !RadiologyqueueStatus.equals("") && RadiologyqueueStatus.equalsIgnoreCase("y") 
					&& null !=labCheckedStatus && !labCheckedStatus.equals("") && labCheckedStatus.equalsIgnoreCase("y")){
				
				String LabStatus="B";
				
				saveOrderBookingforLabAndRadio(dhHeaderIds,consultationDateToInsert,consultationTime,hospitalId,hinId,
						departmentId,empId,visitObjToUpdate,users,labDepartmentId,radiologyDepartmentId,LabStatus);	
				//saveQueueNoForPharmacyAndLab(radiologyDepartmentId,hospitalId,visitObjToUpdate, pharmacyRadioStatus);	
				
			}
			
			
			if(fixedInvestigationArray!=null){
				int length = fixedInvestigationArray.length;
				for(int count=0;count<length;count++){
					chargeCodeIdList.add(fixedInvestigationArray[count]);
				}
			}
			
			// End 
			if(submitFrom!="5"){
			if (chargeCodeIdList.size() > 0) {
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				MasEmployee masEmployee2 = new MasEmployee();
				PatientInvestigationHeader patientInvestigationHeader=null;
				String[] idArr=null;
				Integer pInvHdId=0;
				Integer pdgHdid=0;
				Integer pdgSamHdId=0;
				if(dhHeaderIds!=null && !dhHeaderIds.equals("")){
					idArr=dhHeaderIds.split("-");
					pdgHdid=Integer.parseInt(idArr[0]);
					pInvHdId=Integer.parseInt(idArr[1]);
					pdgSamHdId=Integer.parseInt(idArr[2]);
				}
				if(pInvHdId!=null && !pInvHdId.equals(0) ){
					patientInvestigationHeader = hbt.load(PatientInvestigationHeader.class, pInvHdId);
				}else{
					patientInvestigationHeader = new PatientInvestigationHeader();
				}
				
				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				patientInvestigationHeader.setVisit(visitObjToUpdate);
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				
				//patientInvestigationHeader.setOtherInvestigation(otherInvestigation);
				patientInvestigationHeader.setOpdPatientDetail(opdPatientDetails);
				patientInvestigationHeader.setInvestigationDate(consultationDateToInsert);
				patientInvestigationHeader.setInvestigationTime(consultationTime);
				
				if(pInvHdId!=null && !pInvHdId.equals(0)){
					hbt.update(patientInvestigationHeader);
				}else{
					hbt.save(patientInvestigationHeader);
				}
				
				opdPatientData.put("PatientInvestigationHeader", patientInvestigationHeader);
				DgOrderhd dgOrderhd=null;
				if(pdgHdid!=null && !pdgHdid.equals(0) ){
					dgOrderhd =(DgOrderhd) hbt.load(DgOrderhd.class, pdgHdid);
				}else{
					dgOrderhd = new DgOrderhd();
				}
			
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(consultationTime);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId > 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setVisit(visitObjToUpdate);
				
				// dgOrderhd.setCreatedby(userName);
				// dgOrderhd.setCreatedon(consultationDateToInsert);

				String orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLastChgBy(users);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				
				if(pdgHdid!=null && !pdgHdid.equals(0) ){
					hbt.update(dgOrderhd); 
				}else{
					hbt.save(dgOrderhd);
				}
			
				// Added by dhananjay 09-01-2017
				
				
				//String pharmacyLabStatus="P";
			//PharmacyLabQueue pharmacyLabQueue=saveQueueNoForPharmacy(pharmacyDepartmentId,hospitalId,visitObjToUpdate,pharmacyLabStatus);
			//patientPrescriptionHeader.setPharmacyLabQueue(pharmacyLabQueue);
				//End 
				opdPatientData.put("DgOrderhd", dgOrderhd);	
				
				boolean labStatus=false;
				int count = 1;
				BigDecimal totalAmount = new BigDecimal(0);
				BigDecimal charge = new BigDecimal(0.00);

				List<Object> patientInvestigatinDetailsListObject = new ArrayList<Object>();
				List<Object> dgOrderDetailsListObject = new ArrayList<Object>();
				List<Object> dgSampleCollectionDeatilsListObject=new ArrayList<Object>();
				MasChargeCode persistedChargeCode=null;
				for (int i = 0; i < chargeCodeIdList.size(); i++) {
					String idStr=parkInvestigationIds.get(i);
					Integer pInvDtId=0;
					Integer pDtId=0;
					Integer pdgSamDtId=0;
					if(idStr!=null && !idStr.equals("")){
						String[] idArrInv=idStr.split("-");
						pDtId=Integer.parseInt(idArrInv[0]);
						pInvDtId=Integer.parseInt(idArrInv[1]);
						pdgSamDtId=Integer.parseInt(idArrInv[2]);
					}
					
					PatientInvestigationDetails patientInvestigationDetails = null;
					if(pInvDtId!=null && !pInvDtId.equals(0)){
						patientInvestigationDetails	= hbt.load(PatientInvestigationDetails.class, pInvDtId);
					}else{
						patientInvestigationDetails = new PatientInvestigationDetails();
						
					}
					
					
					
					 persistedChargeCode = (MasChargeCode) session.get(MasChargeCode.class,Integer.parseInt(chargeCodeIdList.get(i)));
					String billingStatus = persistedChargeCode.getBillingStatus();
					patientInvestigationDetails.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					patientInvestigationDetails.setChargeCode(masChargeCode);
					patientInvestigationDetails.setClinicalNotes(clinicalList.get(i));
					patientInvestigationDetails.setAvailableStatus(availableStatusList.get(i));
					
					if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
							&& pInvDtId!=null && !pInvDtId.equals(0)){
						hbt.update(patientInvestigationDetails);
					}else{
						hbt.save(patientInvestigationDetails);
					}
					
					patientInvestigatinDetailsListObject.add(patientInvestigationDetails);
					DgOrderdt dgOrderdt=null;
					if(pDtId!=null && !pDtId.equals(0)){
						dgOrderdt	=(DgOrderdt) hbt.load(DgOrderdt.class, pDtId);
						
					}else{
						dgOrderdt = new DgOrderdt();
					}
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(Integer.parseInt(chargeCodeIdList.get(i)));
					dgOrderdt.setChargeCode(masChargeCode);

					dgOrderdt.setOrderQty(1);
					dgOrderdt.setOrderStatus("P");
					String departmentTypeCode = null;
					if(persistedChargeCode.getMainChargecode().getDepartment().getDepartmentType()!=null){
						 departmentTypeCode = persistedChargeCode.getMainChargecode().getDepartment().getDepartmentType().getDepartmentTypeCode();
					}					
					if (departmentTypeCode!=null && departmentTypeCode.equals("DIAG")) {
						dgOrderdt.setPaymentMade("n");
					} else {
						dgOrderdt.setPaymentMade("n");
					}

					totalAmount.add(charge);

					dgOrderdt.setAmount(charge);

					dgOrderdt.setLastChgBy(users);
					dgOrderdt.setLastChgDate(consultationDateToInsert);
					dgOrderdt.setLastChgTime(consultationTime);
					dgOrderdt.setMsgSent("n");
					dgOrderdt.setPacsStatus("n");
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(Integer.parseInt(chargeCodeIdList.get(i)));
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode().getId();
					int subChargeId = masChargeCodeObj.getSubChargecode().getId();
					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					
					if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
							&& pDtId!=null && !pDtId.equals(0)){
						hbt.update(dgOrderdt);
					}else{
						hbt.save(dgOrderdt);
					}
					dgOrderDetailsListObject.add(dgOrderdt);
					
				
				
					DgSampleCollectionHeader collHeader=null;
					if(pdgSamHdId!=null && pdgSamHdId!=0 ){
						collHeader =(DgSampleCollectionHeader) hbt.load(DgSampleCollectionHeader.class, pdgSamHdId);
					}else{
						collHeader = new DgSampleCollectionHeader();
					}
					
					
					if(persistedChargeCode.getDepartment().getDepartmentType().getDepartmentTypeCode().equals("RADIO") && count == 1) {
						if (hinId != 0) {
							Patient patient1 = new Patient();
							patient1.setId(hinId);
							collHeader.setHin(patient1);
						}
						MasDepartment department = new MasDepartment();
						department.setId(persistedChargeCode.getMainChargecode().getDepartment().getId());
						collHeader.setDepartment(department);
						collHeader.setHospital(new MasHospital(hospitalId));
						collHeader.setOrder(dgOrderhd);
						collHeader.setDiagnosisDate(consultationDateToInsert);
						collHeader.setDiagnosisTime(consultationTime);
						collHeader.setOrderStatus("P");
						collHeader.setSampleValidationDate(consultationDateToInsert);
						collHeader.setSampleValidationTime(consultationTime);
						collHeader.setLastChgBy(users);
						collHeader.setLastChgDate(consultationDateToInsert);
						collHeader.setLastChgTime(consultationTime);
						PharmacyLabQueue radioQueue=null;
		//  Added by dhananjay 03-01-2016
						
		if (departmentTypeCode!=null && departmentTypeCode.equals("RADIO") && count == 1) {
		//if(persistedChargeCode.getMainChargecode().getDepartment().getDepartmentType().getDepartmentTypeCode().equals("RADIO") && count == 1){
	String raiodlabcheck="R";
					radioQueue=saveQueueNoForRadio(radiologyDepartmentId,hospitalId,visitObjToUpdate,raiodlabcheck);
							
				}
			//End
						collHeader.setPharmacyLabQueueId(radioQueue);
						if(pdgSamHdId!=null && pdgSamHdId!=0){
							hbt.update(collHeader);
						}else{
							hbt.save(collHeader);
						}
					
						opdPatientData.put("DgSampleCollectionHeader", collHeader);
						count++;
					}
					if (persistedChargeCode.getDepartment().getDepartmentType().getDepartmentTypeCode().equals("RADIO")) {
						DgSampleCollectionDetails collDetails = new DgSampleCollectionDetails();
						if(pdgSamDtId!=null && !pdgSamDtId.equals(0)){
							collDetails	=(DgSampleCollectionDetails) hbt.load(DgSampleCollectionDetails.class, pdgSamDtId);
						}else{
							 collDetails = new DgSampleCollectionDetails();
						}
						
						Criteria c = session.createCriteria(DgSampleCollectionHeader.class).addOrder(Order.desc("Id"));
						c.setFirstResult(0);
						c.setMaxResults(1);
						collDetails.setSampleCollectionHeader(((DgSampleCollectionHeader) c.list().get(0)));
						collDetails.setChargeCode(masChargeCode);
						int subChargecodeId = 0;
						subChargecodeId = dgOrderdt.getSubChargeid().getId();
						MasSubChargecode subChargecode=(MasSubChargecode) hbt.load(MasSubChargecode.class, subChargecodeId);
						String diagNo = generateDiagNumber(persistedChargeCode.getSubChargecode().getId(),hospitalId,dgOrderdt,
								subChargecode.getSubChargecodeCode(),users);
						collDetails.setDiagNo(diagNo);
						collDetails.setCollected("y");
						collDetails.setLastChgBy(users);
						collDetails.setLastChgDate(consultationDateToInsert);
						collDetails.setLastChgTime(time);
						collDetails.setOrderStatus("P");
						collDetails.setSampleCollDatetime(consultationDateToInsert);
						MasMainChargecode maincharge = new MasMainChargecode();
						maincharge.setId(persistedChargeCode.getMainChargecode().getId());
						collDetails.setMaincharge(maincharge);
						MasSubChargecode subCharge = new MasSubChargecode();
						subCharge.setId(persistedChargeCode.getSubChargecode().getId());
						collDetails.setSubcharge(subCharge);
						DgMasInvestigation investigation = new DgMasInvestigation();
						investigation.setId(persistedChargeCode.getId());
						collDetails.setInvestigation(investigation);
						collDetails.setSampleCollDatetime(new Date());
						
						if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
								&& pdgSamDtId!=null && !pdgSamDtId.equals(0)){
							hbt.update(collDetails);
						}else{
							hbt.save(collDetails);
						}
						dgSampleCollectionDeatilsListObject.add(collDetails);
					}
					// Dhananjay 19-jan-2017
					if (departmentTypeCode!=null && departmentTypeCode.equals("DIAG")) {
					// if(persistedChargeCode.getMainChargecode().getDepartment().getDepartmentType().getDepartmentTypeCode().equals("DIAG")){
						labStatus=true;		
						}
					
				}
			//  Added by dhananjay 03-01-2017
				if(labStatus){
					String Labcheck="L";
					saveQueueNoForPharmacyAndLab(labDepartmentId,hospitalId,visitObjToUpdate,Labcheck,dgOrderhd);					
					}
					//End
				
				opdPatientDataList.put("patientInvestigatinDetailsListObject", patientInvestigatinDetailsListObject);
				opdPatientDataList.put("dgOrderDetailsListObject", dgOrderDetailsListObject);
				opdPatientDataList.put("dgSampleCollectionDeatilsListObject", dgSampleCollectionDeatilsListObject);
				dgOrderhd.setNetAmount(totalAmount);
				hbt.update(dgOrderhd);
				
				Map<String,Object> mapForBilling=new HashMap<String, Object>();
				mapForBilling.put(HIN_ID, hinId);
				mapForBilling.put(VISIT_ID, visitId);
				mapForBilling.put(HOSPITAL_ID, hospitalId);
				mapForBilling.put(USER_ID, userId);
				mapForBilling.put("orderId", dgOrderhd.getId());
				//billingMasterDataService.internalBillingForService(mapForBilling);
			}
			
		}
			if(submitFrom!="5"){
			OpdPatientAllergyM opdPatientAllergyM = new OpdPatientAllergyM();
			if(allergyHeaderIds!=null && !allergyHeaderIds.equals(0)){
				opdPatientAllergyM = hbt.load(OpdPatientAllergyM.class, allergyHeaderIds);
			}else{
				opdPatientAllergyM = new OpdPatientAllergyM();
			}
			
			
			opdPatientAllergyM.setHin(new Patient(hinId));
			if (empId > 0) {
				opdPatientAllergyM.setEmployee(new MasEmployee(empId));
			}
			opdPatientAllergyM.setDepartment(new MasDepartment(departmentId));
			opdPatientAllergyM.setHospital(new MasHospital(hospitalId));
			opdPatientAllergyM.setVisit(visitObjToUpdate);
			opdPatientAllergyM.setStatus("Y");
			opdPatientAllergyM.setLastChgBy(users);
			opdPatientAllergyM.setLastChgDate(date);
			opdPatientAllergyM.setLastChgTime(time);
			
			if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
					&& allergyHeaderIds!=null && !allergyHeaderIds.equals(0)){
				hbt.update(opdPatientAllergyM);
			}else{
				hbt.save(opdPatientAllergyM);
			}
			opdPatientData.put("OpdPatientAllergyM", opdPatientAllergyM);
			
			for (int i = 0; i <allergyType.size(); i++) {
				if (allergyType!=null && allergyType.size() > 0 && allergyType.get(i) != null && !allergyType.get(i).equals("")) {

					Integer allergyDetailId= allergyDetailIds.get(i);
					OpdPatientAllergyT opdPatientAllergyT = new OpdPatientAllergyT();
					if(allergyDetailId!=null && !allergyDetailId.equals(0)){
						opdPatientAllergyT = hbt.load(OpdPatientAllergyT.class, allergyDetailId);
					}else{
						opdPatientAllergyT = new OpdPatientAllergyT();
					}
					
					if(allergen!=null && allergen.size()>i)
					opdPatientAllergyT.setAllergen(allergen.get(i));
					
					if(allergyType!=null && allergyType.size()>i)
					opdPatientAllergyT.setAllergy(new MasAllergyProduct(allergyType.get(i)));
					
					if( saverityCodes.size() >0 && saverityCodes.get(i)!=null && saverityCodes.get(i)!=0  && saverityCodes.size()>i)
					opdPatientAllergyT.setSeverity(new MasSeverityCode(saverityCodes.get(i)));
					
					opdPatientAllergyT.setOpdPatientAllergy(opdPatientAllergyM);
					
					if(allergymonth!=null && allergymonth.size()>i)
					opdPatientAllergyT.setFromMonth(allergymonth.get(i));
					
					if(allergyyear!=null && allergyyear.size()>i)
					opdPatientAllergyT.setFromYear(allergyyear.get(i));
					
					if(allergystatus!=null && allergystatus.size()>i){
						if(allergystatus.get(i).equals("0")){
							opdPatientAllergyT.setStatus("n");
						}
						if(allergystatus.get(i).equals("1")){
							opdPatientAllergyT.setStatus("y");
						}
						if(allergystatus.get(i).equals("2")){
							opdPatientAllergyT.setStatus("n");
						}
					}
					if(allergyRemarkList!=null && allergyRemarkList.size()>i)
						opdPatientAllergyT.setAllergyRemarks(allergyRemarkList.get(i));
					
					
					if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
							&& allergyDetailId!=null && !allergyDetailId.equals(0)){
						hbt.update(opdPatientAllergyT);
					}else{
						hbt.save(opdPatientAllergyT);
					}
					
				}
			}
		}
			
			
			if(submitFrom!="5"){
			/*Persisting treatment*/
			List<String>  treatmentProcedureNameList=(List<String>)mapForDS.get("nursingprocedure");
			List<Integer> treatmentFrequencyList=(List<Integer>)mapForDS.get("nursingfrequency");
			List<Integer> treatmentNoOfDaysList=(List<Integer>)mapForDS.get("nursingdays");
			List<String>  treatmentRemarkList=(List<String>)mapForDS.get("nursingremarks");
			List<Integer> treatmentAlertList=(List<Integer>)mapForDS.get("nursingalert");
			
			if(treatmentProcedureNameList.size()>0){
			ProcedureHeader procedureHeader=null;
			if(procedureHeaderId!=null && !procedureHeaderId.equals(0)){
				procedureHeader = hbt.load(ProcedureHeader.class, procedureHeaderId);
			}else{
				procedureHeader = new ProcedureHeader();
			}	
			
			procedureHeader.setHin(new Patient(hinId));
			procedureHeader.setHospital(new MasHospital(hospitalId));
			procedureHeader.setLastChgBy(users);
			procedureHeader.setLastChgDate(new Date());
			procedureHeader.setRequisitionDate(new Date());
			procedureHeader.setOpdPatientDetails(opdPatientDetails);
			procedureHeader.setVisit(visitObjToUpdate);
			procedureHeader.setStatus("n");
			
			if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
					&& procedureHeaderId!=null && !procedureHeaderId.equals(0)){
				hbt.update(procedureHeader);
			}else{
				hbt.save(procedureHeader);
			}
			
			opdPatientData.put("ProcedureHeader", procedureHeader);
			int index=0;
			for(String strId:treatmentProcedureNameList)
			{
				/*int frequencyCount = 0;
				if(treatmentFrequencyList!=null && treatmentFrequencyList.size()>index)
					
				{
					MasFrequency fr= new MasFrequency();
					fr.setId(treatmentFrequencyList.get(index));
					frequencyCount = fr.getFrequencyCount().intValue();
					
				}
				*/
				
				ProcedureDetails procedureDetails=new ProcedureDetails();
				
				Integer procedureDetailsId=parkNuringIds.get(index);
				if(procedureDetailsId!=null && !procedureDetailsId.equals(0)){
					procedureDetails = hbt.load(ProcedureDetails.class, procedureDetailsId);
				}else{
					procedureDetails = new ProcedureDetails();
				}
				Integer nursingId=Integer.parseInt(strId);
				MasNursingCare care=(MasNursingCare)session.load(MasNursingCare.class,nursingId);
				procedureDetails.setProcedure(care);
				procedureDetails.setProcedureHeader(procedureHeader);
				procedureDetails.setStatus("n");
				
				
				// Add by Vinay
				if(treatmentFrequencyList!=null && treatmentFrequencyList.size()>index)
				
				{
					MasFrequency fr= new MasFrequency();
					fr.setId(treatmentFrequencyList.get(index));
					
					procedureDetails.setFrequency(fr);
				}
				
				if(treatmentNoOfDaysList!=null && treatmentNoOfDaysList.size()>index)
					
				{
					procedureDetails.setNoOfDays(treatmentNoOfDaysList.get(index));
				}
				
				procedureDetails.setFinalProcedureStatus("n");
				procedureDetails.setNursingRemarks("");
				procedureDetails.setAppointmentDate(new Date());
				procedureDetails.setBillStatus("p");
				if(treatmentRemarkList!=null && treatmentRemarkList.size()>index)
				procedureDetails.setRemarks(treatmentRemarkList.get(index));
				
				if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
						&& procedureDetailsId!=null && !procedureDetailsId.equals(0)){
					hbt.update(procedureDetails);
				}else{
					hbt.save(procedureDetails);
				}
				index++;
			}
			
			
			}
		
			treatmentProcedureNameList=(List<String>)mapForDS.get("surgeryprocedure");
			List<Date> tentativeDateList =(List<Date>)	mapForDS.get("tentativeDate");
			treatmentRemarkList=(List<String>)mapForDS.get("surgeryremarks");
			pacRequestList=(List<String>)mapForDS.get("pacRequestList");
			/*List<String> phAlertList = new ArrayList<String>();*/
			/*if(mapForDS.get("phAlertList") != null){
				phAlertList = (List<String>)mapForDS.get("phAlertList");
			}
			System.out.println("phAlertList"+phAlertList.size());*/
			
			//List<Integer> parkSurgeryIds = (List<Integer>)  mapForDS.get("parkSurgeryIds");
		
			if (treatmentProcedureNameList!=null && treatmentProcedureNameList.size() > 0) {
				OpdSurgeryHeader opdSurgeryHeader=new OpdSurgeryHeader();
				if(surgeryHeaderId!=null && !surgeryHeaderId.equals(0)){
					opdSurgeryHeader = hbt.load(OpdSurgeryHeader.class, surgeryHeaderId);
				}else{
					opdSurgeryHeader = new OpdSurgeryHeader();
				}	
				
				
				opdSurgeryHeader.setHin(new Patient(hinId));
				opdSurgeryHeader.setHospital(new MasHospital(hospitalId));
				opdSurgeryHeader.setVisit(visitObjToUpdate);
				opdSurgeryHeader.setPatientStatus("OP");
				opdSurgeryHeader.setPrescribedDepartment(new MasDepartment(departmentId));
				opdSurgeryHeader.setBillingStatus("n");
				opdSurgeryHeader.setBookingStatus("pending");
				opdSurgeryHeader.setPacStatus("pending");
				opdSurgeryHeader.setStatus("p");
				if (empId > 0) {
					MasEmployee employee = new MasEmployee();
					employee.setId(empId);
					opdSurgeryHeader.setEmployee(employee);
				}
				opdSurgeryHeader.setRequisitionDate(consultationDateToInsert);
				opdSurgeryHeader.setRequisitionTime(consultationTime);
				
				
				if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
						&& surgeryHeaderId!=null && !surgeryHeaderId.equals(0)){
					hbt.update(opdSurgeryHeader);
				}else{

					int orderNo=0;
					List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
					String transactionSequenceName = "Surgery Requisition No";
					 sequenceNoList = session
		                       .createCriteria(TransactionSequence.class)
		                       .add(Restrictions.eq("TransactionSequenceName",
		                               transactionSequenceName)).list();
		               TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
		                       .get(0);
		               orderNo = transactionSequence
		                       .getTransactionSequenceNumber();
		               orderNo = orderNo + 1;
		               int id = transactionSequence.getId();
		               TransactionSequence transactionSequence2 = (TransactionSequence) hbt
		                       .load(TransactionSequence.class, id);
		               transactionSequence2.setTransactionSequenceNumber(orderNo);
		               hbt.update(transactionSequence2);
		               opdSurgeryHeader.setOrderNo(orderNo);
					
					hbt.save(opdSurgeryHeader);
				}
				opdPatientData.put("OpdSurgeryHeader", opdSurgeryHeader);
				
				for (int i = 0; i < treatmentProcedureNameList.size(); i++) {
						
						Integer parkSurgeryId=parkSurgeryIds.get(i);
						OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
						if(parkSurgeryId!=null && !parkSurgeryId.equals(0)){
							opdSurgeryDetail = hbt.load(OpdSurgeryDetail.class, parkSurgeryId);
						}else{
							opdSurgeryDetail = new OpdSurgeryDetail();
						}
						if(pacRequestList.size()>i){
							opdSurgeryDetail.setPacRequest(pacRequestList.get(i));
						}
						if(treatmentRemarkList !=null && treatmentRemarkList.size()>i)
						opdSurgeryDetail.setRemarks(treatmentRemarkList.get(i));
					/*if(memberId != 0){
						if(phAlertList !=null && phAlertList.size()>i){
							PhAlert phAlert = new PhAlert();
							System.out.println("phAlertList.get(i)====="+phAlertList.get(i));
							phAlert.setAlertType(phAlertList.get(i));
							if(hospitalIdMemberSurvey != 0){
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalIdMemberSurvey);
								phAlert.setHospital(masHospital);
							}
							PhMemberSurvey phMemberSurvey = new PhMemberSurvey();
							phMemberSurvey.setId(memberId); 
							phAlert.setMember(phMemberSurvey);
							
							Patient patient2 = new Patient();
							patient2.setId(hinId);
							phAlert.setHin(patient2);
							hbt.save(phAlert);
						}
						
					}	*/
						if(tentativeDateList!=null && tentativeDateList.size()>i)
						opdSurgeryDetail.setTentativeDate(tentativeDateList.get(i));
						if(treatmentProcedureNameList!=null && treatmentProcedureNameList.size()>i){
							MasChargeCode mcc=new MasChargeCode(Integer.parseInt(treatmentProcedureNameList.get(i)));
							opdSurgeryDetail.setChargeCode(mcc);
						}	
						opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
						if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
								&& parkSurgeryId!=null && !parkSurgeryId.equals(0)){
							hbt.update(opdSurgeryDetail);
						}else{
							hbt.save(opdSurgeryDetail);
						}
						
				}
			}
			}	
			// --------------- values to be updated in visit table to change
			// it's status--------------------
			
			/**
			 * Snomed Data
			 */
			 List<String> snomedIds = new ArrayList<String>();
			 List<String> snomedDescs = new ArrayList<String>();
			 List<String> fieldTypes = new ArrayList<String>();
			 
			 if(mapForDS.get("snomedIds")!=null){
				 snomedIds = ( List<String>)mapForDS.get("snomedIds");
			 }
			 if(mapForDS.get("snomedDescs")!=null){
				 snomedDescs = ( List<String>)mapForDS.get("snomedDescs");
			 }
			 if(mapForDS.get("fieldTypes")!=null){
				 fieldTypes = ( List<String>)mapForDS.get("fieldTypes");
			 }
			 if(snomedIds.size() > 0){
				 for (int j = 0; j < snomedIds.size(); j++) {
					 if((fieldTypes.get(j).equalsIgnoreCase("Present Complaint / History") || fieldTypes.get(j).equalsIgnoreCase("Presenting Complaints & History of Presenting Illness")) && presentComplaintAndHistory.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("History of Past Illness") && historyOfPastIllness.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Personal History") && personalHistory.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Family History") && familyHistory.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Medication History") && medicationHistory.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("General Examination") && generalExamination.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Local Examination") && localExamination.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Systemic Examination") && systemicExamination!=null && systemicExamination.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Provisional Diagnosis") && systemicExamination!=null && systemicExamination.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
					 if(fieldTypes.get(j).equalsIgnoreCase("Final Diagnosis") && systemicExamination!=null && systemicExamination.contains(snomedDescs.get(j))){
						 PatientSnomedDetails patientSnomed =new PatientSnomedDetails();
						 patientSnomed.setSnomedConceptId(snomedIds.get(j));
						 patientSnomed.setSnomedConceptDesc(snomedDescs.get(j));
						 patientSnomed.setFieldType(fieldTypes.get(j));
						 patientSnomed.setVisit(visitObjToUpdate);
						 patientSnomed.setHin(patient);
						 hbt.save(patientSnomed);
					 }
				}
				 
			 }
			
			if (submitFrom.equals("1") || submitFrom.equals("2")|| submitFrom.equals("5")) {
				visitObjToUpdate.setVisitStatus("C");
				visitObjToUpdate.setCurPharVisitStatus("Y");
			} else if (submitFrom.equals("3")) {
				visitObjToUpdate.setVisitStatus("p");
				visitObjToUpdate.setCurPharVisitStatus("Y");
			}
			else if (submitFrom.equals("4")) {
				visitObjToUpdate.setVisitStatus("a");
				visitObjToUpdate.setCurPharVisitStatus("Y");
			}
			if(forNext==1){
				visitObjToUpdate.setOpenat(null);
				visitObjToUpdate.setOpenby(null);
			}
			queue.setTokenStatus(visitObjToUpdate.getVisitStatus());
			if(visitObjToUpdate.getOpCallCount() == null)
				visitObjToUpdate.setOpCallCount(0);
			
			hbt.update(queue);
			hbt.saveOrUpdate(patient);
			hbt.saveOrUpdate(visitObjToUpdate);
			visitObjectForGlobal=visitObjToUpdate;
			
			bool = true; 
			tx.commit();
			if(submitFrom!="5"){
			saveComorbidity(mapForDS,savedIcdId);
			}
			map.put("opdId", opdPatientDetails.getId());
			
		} catch (Exception e) {
			if (tx != null) {
				e.printStackTrace();
				tx.rollback();
			}
			e.printStackTrace();

		}
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		final MasHospital masHospital=(MasHospital)session.get(MasHospital.class, hospitalId); 
		final Visit visitObjectForLean=visitObjectForGlobal;
		//#13- Tech Debt: Comment out the code those are related to Lean server
		/*new Thread(){
			public void run(){
				if(masHospital!=null && masHospital.getServerIp()!=null && !masHospital.getServerIp().trim().equals("") && !masHospital.getServerIp().trim().equals("null") && masHospital.getServerPort()!=null && !masHospital.getServerPort().trim().equals("") && !masHospital.getServerPort().trim().equals("null")){


					makeFileOpdDetailFromLeanToServer(opdPatientData,opdPatientDataList);
				}
				 
				if(visitObjectForLean!=null && masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){
					//update visit to lean server
					Map<String,Object> returnValue=makeFileOpdDetailFromServerToLean(opdPatientData,opdPatientDataList,masHospital);
					OpdPatientDetails opdpatientDetail=(OpdPatientDetails) opdPatientData.get("OpdPatientDetails");
					LeanServerOpdData leanServerOpdData=new LeanServerOpdData();
					String message=(String)returnValue.get("message");
					String ormMessage=(String)returnValue.get("ORMMessage");
					leanServerOpdData.setOpdData(ormMessage);
					leanServerOpdData.setHospitalId(Long.parseLong(masHospital.getId()+""));
					leanServerOpdData.setCentralOpdId(Long.parseLong(opdpatientDetail.getId()+""));
					String isOpdDataSaveToLeanServer="Y";
					if(!"success".equalsIgnoreCase(message)){ 
						 isOpdDataSaveToLeanServer="N";
					} 
					leanServerOpdData.setStatus(isOpdDataSaveToLeanServer); 
					HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false); 
					hbt.save(leanServerOpdData);
					//updateVisitAtLeanServer(visitObjectForLean,masHospital); 
				}
			}
			}.start();*/
		
		map.put("visitNoTemp", visitNoTemp);
		map.put("bool", bool);
		return map;
	}

	@SuppressWarnings("unchecked")
	public int getTransactionSequenceNoForOrderNo() {
		Session session = (Session) getSession();
		List<TransactionSequence> orderNoList = new ArrayList<TransactionSequence>();
		String tableName = "DgOrderhd";

		try {

			Criteria crit = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("Tablename", tableName));
			orderNoList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		TransactionSequence transactionSequence = orderNoList.get(0);
		int orderNo = transactionSequence.getTransactionSequenceNumber();

		return orderNo;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getMasChargeCodeFromChargeId(int chargeId) {
		Session session = (Session) getSession();
		List<MasChargeCode> masChargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			Criteria crit = session.createCriteria(MasChargeCode.class).add(
					Restrictions.eq("Id", chargeId));
			masChargeList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		MasChargeCode masChargeCode = masChargeList.get(0);

		map.put("masChargeCode", masChargeCode);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPreviousPatientVisit(Map mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientPreviousVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();

		int deptId = (Integer) mapForDS.get("deptId");
		int hinId = (Integer) mapForDS.get("hinId");
		// int visitNo = (Integer) mapForDS.get("visitNo");
		int visitId = (Integer) mapForDS.get("visitId");

		try {

			/*
			 * Criteria crit = session.createCriteria(Visit.class)
			 * .createAlias("Hin", "hin") .add(Restrictions.eq("hin.Id", hinId))
			 * .add(Restrictions.eq("Department.Id", deptId))
			 * .add(Restrictions.lt("Id", visitId))
			 * .addOrder(Order.desc("VisitNo")); patientPreviousVisitList =
			 * crit.list(); inpatientList =
			 * session.createCriteria(Inpatient.class
			 * ).add(Restrictions.eq("Hin.Id", hinId)).list();
			 */
			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Hin", "hin")
					.add(Restrictions.eq("hin.Id", hinId))
					.add(Restrictions.eq("VisitStatus", "C"))

					.addOrder(Order.desc("VisitNo"));
			patientPreviousVisitList = crit.list();
			inpatientList = session.createCriteria(Inpatient.class)
					.add(Restrictions.eq("Hin.Id", hinId)).list();

			/*
			 * Code Removed (for loop) By Mukesh Narayan Singh Date 31 Jan 2011
			 */
			/*
			 * for(Visit v :patientPreviousVisitList) { } for(Inpatient
			 * inpatient : inpatientList) { }
			 */
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPreviousVisitList", patientPreviousVisitList);
		map.put("inpatientList", inpatientList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPreviousVisit(Map mapForDS) {
		Session session = (Session) getSession();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<OpdPatientHistory> opdPatientHistoryList = new ArrayList<OpdPatientHistory>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<DgOrderhd> dgOrderhdList = new ArrayList<DgOrderhd>();
		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		int visitId = (Integer) mapForDS.get("visitId");
		int deptId = 0;
		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}
		try {
			dgOrderhdList = session.createCriteria(DgOrderhd.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();

			Criteria crit = session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId));
			patientVisitDataList = crit.list();
			patientDiagnosisList = session
					.createCriteria(DischargeIcdCode.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			List<Visit> vList = new ArrayList<Visit>();
			/*
			 * if (patientDiagnosisList.size() == 0) { vList = (List<Visit>)
			 * session.createCriteria(Visit.class) .add(Restrictions.eq("Id",
			 * visitId)).list(); Visit v = (Visit) vList.get(0); List<Inpatient>
			 * inpatientList = (List<Inpatient>) session
			 * .createCriteria(Inpatient.class) .add(Restrictions.eq("Hin.Id",
			 * v.getHin().getId())) .list(); for (int i = 0; i <
			 * inpatientList.size(); i++) { Inpatient in = (Inpatient)
			 * inpatientList.get(i); patientDiagnosisList = session
			 * .createCriteria(DischargeIcdCode.class) .createAlias("Inpatient",
			 * "inpatient") .add(Restrictions.eq("inpatient.Id", in.getId()))
			 * .list(); } }
			 */

			opdPatientHistoryList = session
					.createCriteria(OpdPatientHistory.class)
					.add(Restrictions.eq("VisitInpatientId", visitId)).list();
			patientPrescHList = session
					.createCriteria(PatientPrescriptionHeader.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (patientPrescHList.size() > 0) {
				PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
						.get(0);
				int presHId = patientPrescriptionHeader.getId();
				patientPrescDList = session
						.createCriteria(PatientPrescriptionDetails.class)
						.createAlias("Prescription", "hId")
						.add(Restrictions.eq("hId.Id", presHId)).list();
			}
			patientInvesHList = session
					.createCriteria(PatientInvestigationHeader.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (patientInvesHList.size() > 0) {
				PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
						.get(0);
				int invesHId = patientInvestigationHeader.getId();
				patientInvesDList = session
						.createCriteria(PatientInvestigationDetails.class)
						.createAlias("InvestigationHeader", "invesHId")
						.add(Restrictions.eq("invesHId.Id", invesHId)).list();
			}

			// ----------list of referred department taken out from opd patient
			// details table--------
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			if (patientVisitDataList != null && patientVisitDataList.size() > 0) {
				opdPatientDetails = (OpdPatientDetails) patientVisitDataList
						.get(0);
				String referredDept = opdPatientDetails.getReferredDept().getDepartmentName();
				if (!referredDept.equals("") && referredDept != null) {
					String[] dept = referredDept.split(",");
					for (int i = 0; i < dept.length; i++) {
						int deptId1 = Integer.parseInt(dept[i]);
						String deptName1 = getDepartmentNameFromId(deptId1);
						deptList.add(deptName1);
					}
				}
				String deptName = getDepartmentNameFromId(deptId);
				deptList.add(deptName);
				// -------------------------------End of code for referred
				// depatment---------------------

				List<Integer> visitMaxIdList = new ArrayList<Integer>();
				List<Integer> visitMinIdList = new ArrayList<Integer>();
				int max = 0;
				int min = 0;

				visitMaxIdList = session.createQuery(
						"select MAX(Id) from Visit where Status='y' and VisitStatus='C' and Hin.Id='"
								+ opdPatientDetails.getVisit().getHin().getId()
								+ "'").list();

				if (visitMaxIdList.size() > 0) {
					max = (Integer) visitMaxIdList.get(0);
					map.put("max", max);
				}
				visitMinIdList = session.createQuery(
						"select MIN(Id) from Visit where Status='y' and VisitStatus='C' and Hin.Id='"
								+ opdPatientDetails.getVisit().getHin().getId()
								+ "'").list();
				if (visitMinIdList.size() > 0) {
					min = (Integer) visitMinIdList.get(0);
					map.put("min", min);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("deptList", deptList);
		map.put("patientVisitDataList", patientVisitDataList);
		map.put("patientDiagnosisList", patientDiagnosisList);
		map.put("patientPrescDList", patientPrescDList);
		map.put("patientInvesDList", patientInvesDList);
		map.put("opdPatientHistoryList", opdPatientHistoryList);
		map.put("dgOrderhdList", dgOrderhdList);

		return map;
	}

	@SuppressWarnings("unused")
	public String getDepartmentNameFromId(int deptId) {
		Session session = (Session) getSession();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		String deptName = null;

		try {

			Criteria crit = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Id", deptId));
			deptList = crit.list();
			if (deptList.size() > 0) {
				MasDepartment masDepartment = deptList.get(0);
				deptName = masDepartment.getDepartmentName();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return deptName;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showPatientPrevoiusPrescription(Map map) {
		
		Session session = (Session) getSession();
		/*List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();*/
		List<PatientPrescriptionDetails> patientPrescriptionList = new ArrayList<PatientPrescriptionDetails>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<RouteOfAdministration> routeOfAdministrationList = new ArrayList<RouteOfAdministration>();
		List<OpdInstructionTreatment> masInstructionMasterList = new ArrayList<OpdInstructionTreatment>();
		/*List<BigDecimal> storeItemBatch = new ArrayList<BigDecimal>();
		List<BigDecimal> storeItemBatch1 = new ArrayList<BigDecimal>();
		/*
		select * from patient_prescription_header where prescription_date ='2015-12-21' order by prescription_date asc 
		select * from patient_prescription_details where prescription_id =321*/
	
		int visitNo = (Integer) map.get("visitNo");
		int hinId = (Integer) map.get("hinId");
		Date previousDate=HMSUtil.convertStringTypeDateToDateType(HMSUtil.getPrevDate(1));
		//added by govind 7-10-2016
		int prescrpId=0;
		routeOfAdministrationList = session
				.createCriteria(RouteOfAdministration.class)
				.add(Restrictions.eq("Status", "y".toLowerCase())
						.ignoreCase()).addOrder(Order.asc("OrderNo")).list();
		masInstructionMasterList = session
				.createCriteria(OpdInstructionTreatment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		List<PatientPrescriptionHeader> presHeaderList= new ArrayList<PatientPrescriptionHeader>();
		try{
			presHeaderList=session.createCriteria(PatientPrescriptionHeader.class)
					.createAlias("Visit", "v")
					.add(Restrictions.eq("v.Hin.Id",hinId))
					//.add(Restrictions.eq("v.VisitNo",visitNo-1))
					.addOrder(Order.desc("PrescriptionDate"))
					.addOrder(Order.desc("PrescriptionTime"))
					.setMaxResults(1)
					.list();
			if(presHeaderList.size()>0){
				PatientPrescriptionHeader prs=presHeaderList.get(0);				
				prescrpId=prs.getId();
			}
			patientPrescriptionList=session.createCriteria(PatientPrescriptionDetails.class)
					.createAlias("Prescription", "ph")
					.createAlias("Item", "msi")
					//.createAlias("ph.Visit", "v")
					//.add(Restrictions.eq("ph.PrescriptionDate",previousDate))Item
					.add(Restrictions.eq("ph.Id",prescrpId))
					.add(Restrictions.isNotNull("msi.Id"))
					//.add(Restrictions.eq("v.Hin.Id",hinId))
					//.add(Restrictions.eq("v.VisitNo",visitNo)) 
					.list();
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		}catch(Exception e){
			e.printStackTrace();
		}
		/*try {
		  
			int visitNoForPrescription = visitNo - 1;
			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Hin", "hin")
					.add(Restrictions.eq("hin.Id", hinId))
					.addOrder(Order.desc("Id"))
					.addOrder(Order.desc("VisitDate"));
			crit.setFirstResult(0);
			crit.setMaxResults(20);
			patientVisitList = crit.list();
			List<Integer> visitIdList = new ArrayList<Integer>();
			if (patientVisitList.size() > 0) {
				for (Visit visit : patientVisitList) {
					visitIdList.add(visit.getId());
				}

				patientPrescriptionHeaderList = session
						.createCriteria(PatientPrescriptionHeader.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.in("visit.Id", visitIdList)).list();

				if (patientPrescriptionHeaderList.size() > 0) {
					List<Integer> prescriptionIdList = new ArrayList<Integer>();
					for (PatientPrescriptionHeader patientPrescriptionHeader : patientPrescriptionHeaderList) {
						prescriptionIdList.add(patientPrescriptionHeader
								.getId());
					}
					if (prescriptionIdList.size() > 0) {
						patientPrescriptionList = session
								.createCriteria(
										PatientPrescriptionDetails.class)
								.createAlias("Prescription", "prescription")
								.add(Restrictions.in("prescription.Id",
										prescriptionIdList))
								.addOrder(Order.desc("prescription.Id")).list();
					}
				}
				if (patientPrescriptionList.size() > 0) {
					for (int i = 0; i < patientPrescriptionList.size(); i++) {
						PatientPrescriptionDetails patientPrescriptionDetail = (PatientPrescriptionDetails) patientPrescriptionList
								.get(i);
						int itemId = (Integer) patientPrescriptionDetail
								.getItem().getId();
						Criteria critt = session
								.createCriteria(StoreItemBatchStock.class)
								.createAlias("Item", "item")
								.add(Restrictions.eq("item.Id", itemId))
								.createAlias("Department", "department")
								.add(Restrictions.eq("department.Id", 35));
						critt.setProjection(Projections.sum("ClosingStock"));
						storeItemBatch1 = critt.list();
						storeItemBatch.addAll(storeItemBatch1);
					}
				}
			}
			Visit visit = patientVisitList.get(0);
			int visitId = visit.getId();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		map.put("storeItemBatch", storeItemBatch);
*/		map.put("frequencyList", frequencyList);
		map.put("patientPrescriptionList", patientPrescriptionList);
		map.put("routeOfAdministrationList", routeOfAdministrationList);
		map.put("masInstructionMasterList", masInstructionMasterList);
		return map;
	}

	public Map<String, Object> showPatientPrevoiusInvestigation(Map mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientVisitList = new ArrayList<Visit>();
		List<PatientInvestigationHeader> patientInvestigationHeaderList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvestigationList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		@SuppressWarnings("unused")
		int visitNo = (Integer) mapForDS.get("visitNo");
		int hinId = (Integer) mapForDS.get("hinId");

		try {
			int visitNoForInvestigation = visitNo - 1;
			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Hin", "hin")
					.add(Restrictions.eq("hin.Id", hinId))
					.add(Restrictions.eq("VisitNo", visitNoForInvestigation));
			patientVisitList = crit.list();
			/*
			 * Code Null and size check Code By Mukesh Narayan Singh Date 25 Jan
			 * 2011
			 */
			if (patientVisitList.size() > 0 && patientVisitList != null) {

				Visit visit = patientVisitList.get(0);
				int visitId = visit.getId();

				patientInvestigationHeaderList = session
						.createCriteria(PatientInvestigationHeader.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				if (patientInvestigationHeaderList.size() > 0) {
					PatientInvestigationHeader patientInvestigationHeader = (PatientInvestigationHeader) patientInvestigationHeaderList
							.get(0);

					int investigationId = patientInvestigationHeader.getId();
					patientInvestigationList = session
							.createCriteria(PatientInvestigationDetails.class)
							.createAlias("InvestigationHeader", "investigation")
							.add(Restrictions.eq("investigation.Id",
									investigationId)).list();
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientInvestigationList", patientInvestigationList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchPatientDetails(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> patientList = new ArrayList<Inpatient>();

		// String serviceNo = "";
		String hinNo = "";

		String patientFName = "";
		String patientMName = "";
		String patientLName = "";

		Session session = (Session) getSession();

		/*
		 * if(mapForDS.get("serviceNo") != null){
		 * 
		 * serviceNo = (String)mapForDS.get("serviceNo");
		 */
		if (mapForDS.get("hinNo") != null) {

			hinNo = (String) mapForDS.get("hinNo");

		}

		if (mapForDS.get("patientFName") != null) {
			patientFName = (String) mapForDS.get("patientFName");
		}
		if (mapForDS.get("patientMName") != null) {
			patientMName = (String) mapForDS.get("patientMName");
		}
		if (mapForDS.get("patientLName") != null) {
			patientLName = (String) mapForDS.get("patientLName");
		}

		String patientStatus = "A";
		// Criteria crit =
		// session.createCriteria(Patient.class).add(Restrictions.not(Expression.eq("PatientStatus",
		// patientStatus)));
		Criteria crit = session.createCriteria(Inpatient.class)
				.add(Restrictions.eq("AdStatus", patientStatus))
				.createAlias("Hin", "p");
		if (hinNo != null && !hinNo.equals("")) {

			crit = crit.add(Restrictions.eq("p.HinNo", hinNo));
		} else {
			/*
			 * if(!serviceNo.equals("") ){ else block===="+serviceNo); crit =
			 * crit.add(Restrictions.eq("p.ServiceNo", serviceNo)); }
			 */

			if (!patientFName.equals("")) {
				crit = crit.add(Restrictions.like("p.PFirstName", patientFName
						+ "%"));
			}
			if (!patientMName.equals("")) {
				crit = crit.add(Restrictions.like("p.PMiddleName", patientMName
						+ "%"));
			}
			if (!patientLName.equals("")) {
				crit = crit.add(Restrictions.like("p.PLastName", patientLName
						+ "%"));
			}
		}
		patientList = crit.list();
		map.put("patientList", patientList);
		return map;

	}

	@SuppressWarnings({ "unused", "unchecked" })
	public Map<String, Object> showSurgeryRequisitionJsp(Map mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientDetailList = new ArrayList<Visit>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Map<String, Object> map = new HashMap<String, Object>();
		String empCategory = "Doctor";
		String departmentType = "Surgical";
		String transactionSequenceName = "Surgery Requisition No";
		int visitId = (Integer) mapForDS.get("visitId");
		int empId = (Integer) mapForDS.get("empId");
		int orderNo = 0;
		String empName = "";
		try {

			Criteria crit = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId));
			patientDetailList = crit.list();
			empList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("Id", empId)).list();
			departmentList = session
					.createCriteria(MasDepartment.class)
					.createAlias("DepartmentType", "deptType")
					.add(Restrictions.eq("deptType.DepartmentTypeName",
							departmentType)).list();
			employeeList = session
					.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empType")
					.add(Restrictions
							.eq("empType.EmpCategoryName", empCategory)).list();
			sequenceNoList = session
					.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionSequenceName",
							transactionSequenceName)).list();
			TransactionSequence transactionSequence = sequenceNoList.get(0);
			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = sequenceNo + 1;
			MasEmployee emp = empList.get(0);
			if (emp.getFirstName() != null) {
				empName = emp.getFirstName();
			}
			if (emp.getMiddleName() != null) {
				empName = empName + " " + emp.getMiddleName();
			}
			if (emp.getLastName() != null) {
				empName = empName + " " + emp.getLastName();
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("empName", empName);
		map.put("patientDetailList", patientDetailList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("orderNo", orderNo);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showAjaxResponseForSurgeryRequisitionJsp(
			Map mapForDS) {
		Session session = (Session) getSession();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();

		Map<String, Object> map = new HashMap<String, Object>();
		String empCategory = "Doctor";

		int departmentId = (Integer) mapForDS.get("departmentId");
		try {
			employeeList = session
					.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empType")
					.createAlias("Department", "dept")
					.add(Restrictions.eq("dept.Id", departmentId))
					.add(Restrictions
							.eq("empType.EmpCategoryName", empCategory)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("departmentId", departmentId);
		map.put("employeeList", employeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSurgeryRequisitionJspForHin(Box box) {
		Session session = (Session) getSession();
//		List<Patient> patientDetailList = new ArrayList<Patient>();
//		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
//		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
//		List<MasEmployee> empList = new ArrayList<MasEmployee>();
//		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		Map<String, Object> map = new HashMap<String, Object>();

//		String transactionSequenceName = "Surgery Requisition No";
//		String departmentType = "Surgical";
//		List<Visit> visitList = new ArrayList<Visit>();
		
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<HospitalDoctorUnitM>hospitalDoctorUnitMList=new ArrayList<HospitalDoctorUnitM>();
		String hinNo = box.getString(HIN_NO);
//		int empId = (Integer) mapForDS.get("empId");
		int deptId = box.getInt(DEPT_ID);
		int hospitalId = box.getInt(HOSPITAL_ID);
		int unit=box.getInt("unit");
		String ipNo=box.getString(AD_NO);
		String patientName=box.getString(PATIENT_NAME);
		
		int orderNo = 0;
		// String empName = "";

		/*URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("table_constant.properties");
		// URL myURL= get getResource("/WEB-INF/commonFile.properties");
		String mas_department_type_cstr = null;
		try {
			Properties prop = new Properties();
			prop.load(new FileInputStream(new File(resourcePath.getFile())));
			transactionSequenceName = prop
					.getProperty("transaction_sequenc_surgery_requisition_no");
			departmentType = prop.getProperty("mas_department_type_surgical");

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
*/
		try {
			
			hospitalDoctorUnitMList=session.createCriteria(HospitalDoctorUnitM.class)
					   .add(Restrictions.eq("Status","y").ignoreCase())
					   .add(Restrictions.eq("Hospital.Id", hospitalId))
					   .list();
			
			
			
			
			
			Criteria crit = session.createCriteria(Inpatient.class,"ip")
					.createAlias("ip.Department", "dp")
					.createAlias("ip.Hin", "hin")
					.createAlias("ip.Hospital", "hospital")
					.add(Restrictions.eq("ip.AdStatus", "a").ignoreCase())
					.add(Restrictions.eq("dp.Id", deptId))
					.add(Restrictions.eq("hospital.Id", hospitalId));
			
			if(!hinNo.equals(""))
			{
				crit.add(Restrictions.eq("hin.HinNo", hinNo));
			}
			if(!ipNo.equals(""))
			{
				crit.add(Restrictions.eq("ip.AdNo", ipNo));
			}
			if(!patientName.equals(""))
			{
				
				patientName = patientName.replaceAll("  ", "%");
				patientName.trim();
				patientName = patientName.replaceAll(" ", "%").toLowerCase();
				Criterion rest1 = Restrictions.or(
						Restrictions.like("hin.PFirstName",
								"%" + patientName + "%").ignoreCase(),
						Restrictions.like("hin.PMiddleName",
								"%" + patientName + "%").ignoreCase());
				rest1 = Restrictions.or(rest1,
						Restrictions
								.like("hin.PLastName", "%" + patientName + "%")
								.ignoreCase());
				crit = crit.add(rest1);
				
			}
			
			inpatientList=crit.list();
			
			//added by govind 14-10-2016
			
			List<OpdSurgeryDetail> surgeryDetailList=new ArrayList<OpdSurgeryDetail>();
			if(inpatientList.size()>0){
				Inpatient inpatient=inpatientList.get(0);
								
				surgeryDetailList=session.createCriteria(OpdSurgeryDetail.class)
						.createAlias("OpdSurgery", "OpdSurgeryHeader")
				          .createAlias("OpdSurgeryHeader.Inpatient", "ip")
				          .add(Restrictions.eq("ip.Id", inpatient.getId()))
				         .add(Restrictions.eq("OpdSurgeryHeader.Hospital.Id", hospitalId)).list();
				
				map.put("surgeryDetailList", surgeryDetailList);
			}
			//added by govind 14-10-2016 end
			
			
//					.add(
//					Restrictions.eq("HinNo", hinNo));

//			Criteria crit = session.createCriteria(Patient.class).add(
//					Restrictions.eq("HinNo", hinNo));
//			patientDetailList = crit.list();
//			empList = session.createCriteria(MasEmployee.class)
//					.add(Restrictions.eq("Id", empId))
//					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
//			departmentList = session
//					.createCriteria(MasDepartment.class)
//					.createAlias("DepartmentType", "deptType")
//					.add(Restrictions.eq("deptType.DepartmentTypeName",
//							departmentType)).list();
//			sequenceNoList = session
//					.createCriteria(TransactionSequence.class)
//					.add(Restrictions.eq("TransactionSequenceName",
//							transactionSequenceName)).list();
//			doctorList = session.createCriteria(MasEmployee.class)
//					.createAlias("EmpCategory", "empCat")
//					.add(Restrictions.eq("empCat.EmpCategoryCode", "01"))
//					.add(Restrictions.eq("Status", "Y"))
//					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
//			visitList = session.createCriteria(Visit.class)
//					.createAlias("Hin", "p")
//					.add(Restrictions.eq("p.HinNo", hinNo))
//					.add(Restrictions.eq("Hospital.Id", hospitalId))
//					.addOrder(Order.desc("Id")).list();
//
//			TransactionSequence transactionSequence = sequenceNoList.get(0);
//			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
//			orderNo = sequenceNo + 1;
			// MasEmployee masEmployee = (MasEmployee) empList.get(0);
			//
			// if (masEmployee.getFirstName() != null) {
			// empName = masEmployee.getFirstName();
			// }
			// if (masEmployee.getMiddleName() != null) {
			// empName = empName + " " + masEmployee.getMiddleName();
			// }
			// if (masEmployee.getLastName() != null) {
			// empName = empName + " " + masEmployee.getLastName();
			// }
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		// map.put("empName", empName);
//		map.put("patientDetailList", patientDetailList);
//		map.put("departmentList", departmentList);
//		map.put("orderNo", orderNo);
//
//		map.put("doctorList", doctorList);
//		map.put("visitList", visitList);
		map.put("inpatientList", inpatientList);
		map.put("hospitalDoctorUnitMList",hospitalDoctorUnitMList);
		return map;
	}

	public Map<String, Object> getEmployeeIdFromUserName(String userName) {
		Session session = (Session) getSession();
		String employeeName = "";
		int employeeId = 0;
		List<Users> userList = new ArrayList<Users>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			userList = session.createCriteria(Users.class)
					.add(Restrictions.eq("UserName", userName)).list();
			Users users = userList.get(0);
			employeeId = users.getEmployee().getId();
			if (users.getEmployee() != null) {

				if (users.getEmployee().getFirstName() != null) {
					employeeName = users.getEmployee().getFirstName();
				}
				if (users.getEmployee().getMiddleName() != null) {
					employeeName = "" + users.getEmployee().getMiddleName();
				}
				if (users.getEmployee().getLastName() != null) {
					employeeName = "" + users.getEmployee().getLastName();
				}
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("employeeName", employeeName);
		map.put("employeeId", employeeId);

		return map;
	}

	@SuppressWarnings("unchecked")
	public boolean submitSurgeryRequisitionDetails(Map mapForDS) {

		boolean succesfullyAdded = false;
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		List chargeCodeList = (List) mapForDS.get("chargeCodeList");
		int surgicalDepartmentId = (Integer) mapForDS.get("deptId");
		int prescribedDepartmentId = (Integer) mapForDS
				.get("prescribedDepartmentId");
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");
		String userName = (String) mapForDS.get("userName");
		String requisitionDate = (String) mapForDS.get("requisitionDate");
		String requisitionTime = (String) mapForDS.get("requisitionTime");
		String transactionSequenceName = "Surgery Requisition No";
		Session session = (Session) getSession();
		MasHospital hospital;
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			sequenceNoList = session
					.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionSequenceName",
							transactionSequenceName)).list();
			TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
					.get(0);
			int orderNo = transactionSequence.getTransactionSequenceNumber();
			orderNo = orderNo + 1;
			int id = transactionSequence.getId();

			TransactionSequence transactionSequence2 = (TransactionSequence) hbt
					.load(TransactionSequence.class, id);
			transactionSequence2.setTransactionSequenceNumber(orderNo);
			hbt.update(transactionSequence2);

			OpdSurgeryHeader opdSurgeryHeader = new OpdSurgeryHeader();
			opdSurgeryHeader.setOrderNo(orderNo);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdSurgeryHeader.setHin(patient);

			Visit visit = (Visit) hbt.get(Visit.class, visitId);
			hospital = visit.getHospital();
			
			opdSurgeryHeader.setHospital(hospital);
			opdSurgeryHeader.setVisit(visit);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(surgicalDepartmentId);
			opdSurgeryHeader.setSurgicalDept(masDepartment);
			MasDepartment masDepartmentObj = new MasDepartment();
			masDepartmentObj.setId(prescribedDepartmentId);
			opdSurgeryHeader.setPrescribedDepartment(masDepartmentObj);

			Date date = HMSUtil
					.convertStringTypeDateToDateType(requisitionDate);
			opdSurgeryHeader.setRequisitionDate(date);
			opdSurgeryHeader.setRequisitionTime(requisitionTime);
			opdSurgeryHeader.setPatientStatus(HMSUtil
					.getValuesFromPropertiesFile("table_constant.properties",
							"patient_Status"));
			opdSurgeryHeader.setPacStatus(HMSUtil.getValuesFromPropertiesFile(
					"table_constant.properties", "pac_Status"));
			opdSurgeryHeader.setBookingStatus(HMSUtil
					.getValuesFromPropertiesFile("table_constant.properties",
							"bil_Status"));
			opdSurgeryHeader.setBillingStatus("n");
			/*
			 * method created for getting employee id and name from username.
			 * "getEmployeeIdFromUserName(userName)"
			 */
			Map<String, Object> map = getEmployeeIdFromUserName(userName);
			int employeeId = (Integer) map.get("employeeId");
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(employeeId);
			opdSurgeryHeader.setEmployee(masEmployee);

			hbt.save(opdSurgeryHeader);

			int chargeCodeId = 0;
			for (int i = 0; i < chargeCodeList.size(); i++) {
				chargeCodeId = (Integer) chargeCodeList.get(i);

				OpdSurgeryDetail opdSurgeryDetail = new OpdSurgeryDetail();
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				MasChargeCode masChargeCode = new MasChargeCode();
				masChargeCode.setId(chargeCodeId);
				opdSurgeryDetail.setChargeCode(masChargeCode);
				hbt.save(opdSurgeryDetail);
			}

			succesfullyAdded = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		} finally {
			// --------Session Closing----------
			session.close();
		}

		return succesfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitSurgeryRequisitionDetailsForInpatient(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean succesfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setCheckWriteOperations(false);
		hbt.setFlushModeName("FLUSH_EAGER");
		Session session = (Session)getSession();
		Transaction tx= null;
		int orderNo=0;
		try {
			Map<String,Object> utilMap = new HashMap<String,Object>();
			Map<String,Object> mapForDS= new HashMap<String,Object>();
			mapForDS.put("userId", box.getInt("userId"));
			mapForDS.put("userName", box.getString("userName"));
			mapForDS.put("hospitalId", box.getInt("hospitalId"));
			utilMap = (Map)HMSUtil.getCurrentDateAndTime();
			String currentTime = (String)utilMap.get("currentTime");
			String currentDate = (String)utilMap.get("currentDate");

			tx = session.beginTransaction();
			
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("empId"));
			
			MasHospital masHospitalObj = new MasHospital();
			masHospitalObj.setId(box.getInt("hospitalId"));
			
			MasDepartment md=new MasDepartment();
			md.setId(box.getInt(DEPT_ID));
			
		int proscedurehiddenValue = box.getInt("procCount");
		String proscedureName = "";
		for (int l = 1; l <= proscedurehiddenValue; l++) {
			if( box.getString("surgeryradio"+l)!=null &&  !box.getString("surgeryradio"+l).equals(""))
			{
				OpdSurgeryHeader opdSurgeryHeader=new OpdSurgeryHeader();	
				if(box.getInt(INPATIENT_ID+l)!=0){
					Inpatient inpatient = new Inpatient();
					inpatient.setId(box.getInt(INPATIENT_ID+l));
					opdSurgeryHeader.setInpatient(inpatient);
				}				
			 Patient p=new Patient();
			 p.setId(box.getInt(HIN_ID+l));
			List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
			
			opdSurgeryHeader.setHin(p);
			opdSurgeryHeader.setEmployee(masEmployee);
			opdSurgeryHeader.setPrescribedDepartment(md);
			opdSurgeryHeader.setHospital(masHospitalObj);
			opdSurgeryHeader.setRequisitionDate(HMSUtil.dateFormatterDDMMYYYY(currentDate));
			opdSurgeryHeader.setRequisitionTime(currentTime);
			opdSurgeryHeader.setPatientStatus("InPatient");
			
			opdSurgeryHeader.setPacStatus(box.getString("pacstatus"+l));
			
			opdSurgeryHeader.setBookingStatus("Pending");
			opdSurgeryHeader.setBillingStatus("n");
			opdSurgeryHeader.setStatus("P");
			 String transactionSequenceName = "Surgery Requisition No";
			 sequenceNoList = session
                        .createCriteria(TransactionSequence.class)
                        .add(Restrictions.eq("TransactionSequenceName",
                                transactionSequenceName)).list();
                TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList
                        .get(0);
                orderNo = transactionSequence
                        .getTransactionSequenceNumber();
                orderNo = orderNo + 1;
                int id = transactionSequence.getId();
                TransactionSequence transactionSequence2 = (TransactionSequence) hbt
                        .load(TransactionSequence.class, id);
                transactionSequence2.setTransactionSequenceNumber(orderNo);
                hbt.update(transactionSequence2);
                opdSurgeryHeader.setOrderNo(orderNo);
                hbt.save(opdSurgeryHeader);
                
                OpdSurgeryDetail opdSurgeryDetail=new OpdSurgeryDetail();
				MasChargeCode masChargeCode=new MasChargeCode();
				masChargeCode.setId(box.getInt("procedureId"+l));
				opdSurgeryDetail.setChargeCode(masChargeCode);
				opdSurgeryDetail.setOpdSurgery(opdSurgeryHeader);
				opdSurgeryDetail.setStatus("P");
				if(box.getString("pacstatus"+l).equalsIgnoreCase("pending")){
					opdSurgeryDetail.setPacRequest("y");
				}
				//opdSurgeryDetail.setTentativeDate(HMSUtil.dateFormatterDDMMYYYY(box.getString("tentativeDate"+l)));
				//opdSurgeryDetail.setRemarks(box.getString("procRemarks"+i));
				hbt.save(opdSurgeryDetail);
				
//----------------------------------------------------------------------------				
				
				if(box.getInt("visitId")!=0){
					OpdPatientDetails OpdPatientDetails=new OpdPatientDetails();
				Visit visit=new Visit();
				visit.setId(box.getInt("visitId"));
				OpdPatientDetails.setVisit(visit);
				OpdPatientDetails.setHospital(masHospitalObj);
				OpdPatientDetails.setConsultationDate(new Date());
				OpdPatientDetails.setConsultationTime(currentTime);
				OpdPatientDetails.setOpdDate(new Date());
				OpdPatientDetails.setOpdTime(currentTime);
				if(box.getString("arname")!=null){
					OpdPatientDetails.setAdmissionAdvised(box.getString("arname"));
				}
				if(box.getString("arname")!=null){
					OpdPatientDetails.setAdmissionDate(HMSUtil.convertStringTypeDateToDateType((box.getString("arname"))));
				}
				if(box.getString("ward")!=null){
					MasDepartment md21=new MasDepartment();
					md21.setId(Integer.parseInt(box.getString("ward")));
					OpdPatientDetails.setAdmissionWard(md21);
					
				}
				
				hbt.save(OpdPatientDetails);
				}
		}
		
		}
		succesfullyAdded = true;
		tx.commit();
	} catch (Exception e) {
		if (tx != null) {
			tx.rollback();
		}
		e.printStackTrace();
		succesfullyAdded = false;
	}

	finally {
		// --------Session Closing----------
		session.close();
	}
		map.put("bool", succesfullyAdded);
		map.put("orderNo", orderNo);
		return map;
	}

	public Map<String, Object> getIcdWithIcdCode(Map mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasIcd> masIcdList = new ArrayList<MasIcd>();
		String icdCode = "";
		Session session = (Session) getSession();
		if (mapForDS.get("icdCode") != null) {
			icdCode = mapForDS.get("icdCode").toString().trim();
		}

		masIcdList = (List<MasIcd>) session.createCriteria(MasIcd.class)
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("IcdCode", icdCode)).list();
		map.put("masIcdList", masIcdList);
		return map;
	}

	// -----------------------------------------End of methods by
	// Vikas---------------------------------

	/**
	 * --------------------------------------------Methods For OPD Ophthamology
	 * By Ritu-------------------------
	 * 
	 */

	public Map<String, Object> submitOphthalmologyDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hospitalId = 0;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphthalmology opdOphthalmology = new OpdOphthalmology();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			opdOphthalmology.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			opdOphthalmology.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			opdOphthalmology.setHospital(hospital);

			opdOphthalmology
					.setDecreasedVision(box.getString(DECREASED_VISION));
			opdOphthalmology.setRedness(box.getString(REDNESS));
			opdOphthalmology.setDischarge(box.getString(DISCHARGE));
			opdOphthalmology.setPain(box.getString(PAIN));
			opdOphthalmology.setFloaterTraumaEpiphora(box
					.getString(FLOATER_TRAUMA_EPIPHORA));

			if (box.getString(READING) != null) {
				opdOphthalmology.setReading(box.getString(READING));
			}
			if (box.getString(DRIVING) != null) {
				opdOphthalmology.setDriving(box.getString(DRIVING));
			}
			if (box.getString(COOKING) != null) {
				opdOphthalmology.setCooking(box.getString(COOKING));
			}
			if (box.getString(PERSONAL_HYGIENE) != null) {
				opdOphthalmology.setPersonalHygiene(box
						.getString(PERSONAL_HYGIENE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(CAD) != null) {
				opdOphthalmology.setCad(box.getString(CAD));
			}

			if (box.getString(DM) != null) {
				opdOphthalmology.setDm(box.getString(DM));
			}
			if (box.getString(HTN) != null) {
				opdOphthalmology.setHtn(box.getString(HTN));
			}
			if (box.getString(BA) != null) {
				opdOphthalmology.setBa(box.getString(BA));
			}
			if (box.getString(AUTOIMMUNE) != null) {
				opdOphthalmology.setAutoimmune(box.getString(AUTOIMMUNE));
			}
			if (box.getString(AMBULATORY) != null) {
				opdOphthalmology.setAmbulatry(box.getString(AMBULATORY));
			}
			if (box.getString(OTHERS) != null) {
				opdOphthalmology.setOthers(box.getString(OTHERS));
			}

			opdOphthalmology.setDistanceRe(box.getString(DISTANCE_RE));
			opdOphthalmology.setDistanceLe(box.getString(DISTANCE_LE));
			opdOphthalmology.setDistancePh(box.getString(DISTANCE_PH));
			opdOphthalmology.setNearRe(box.getString(NEAR_RE));
			opdOphthalmology.setNearLe(box.getString(NEAR_LE));
			opdOphthalmology.setNearPh(box.getString(NEAR_PH));
			opdOphthalmology.setRefractionRe(box.getString(REFRACTION_RE));
			opdOphthalmology.setRefractionLe(box.getString(REFRACTION_LE));
			opdOphthalmology.setRefractionPh(box.getString(REFRACTION_PH));
			opdOphthalmology.setAcceptanceDistanceRe(box
					.getString(ACCEPTANCE_DISTANCE_RE));
			opdOphthalmology.setAcceptanceDistanceLe(box
					.getString(ACCEPTANCE_DISTANCE_LE));
			opdOphthalmology.setAcceptanceDistancePh(box
					.getString(ACCEPTANCE_DISTANCE_PH));
			opdOphthalmology.setAcceptanceNearRe(box
					.getString(ACCEPTANCE_NEAR_RE));
			opdOphthalmology.setAcceptanceNearLe(box
					.getString(ACCEPTANCE_NEAR_LE));
			opdOphthalmology.setAcceptanceNearPh(box
					.getString(ACCEPTANCE_NEAR_PH));
			opdOphthalmology.setConvergence(box.getString(CONVERGENCE));
			opdOphthalmology.setColorVision(box.getString(COLOR_VISION));
			opdOphthalmology.setOcularMovement(box.getString(OCULAR_MOVEMENTS));
			opdOphthalmology.setLids(box.getString(LIDS));
			opdOphthalmology.setConjunctiva(box.getString(CONJUNCTIVA));
			opdOphthalmology.setCorneaAcRe(box.getString(CORNEA_AC_RE));
			opdOphthalmology.setCorneaAcLe(box.getString(CORNEA_AC_LE));

			opdOphthalmology
					.setAntChamberDepthLe(box.getString(ANT_CHAMBER_LE));
			opdOphthalmology
					.setAntChamberDepthRe(box.getString(ANT_CHAMBER_RE));
			opdOphthalmology.setCellsFlareLe(box.getString(CELLS_FLARE_LE));
			opdOphthalmology.setCellsFlareRe(box.getString(CELLS_FLARE_RE));
			opdOphthalmology.setPxfNviLe(box.getString(PXF_NVI_LE));
			opdOphthalmology.setPxfNviRe(box.getString(PXF_NVI_RE));

			if (box.getString(DIRECT) != null) {
				opdOphthalmology.setPupilReactionDirect(box.getString(DIRECT));
			}
			if (box.getString(CONSENSNAL) != null) {
				opdOphthalmology.setPupilReactionConsensnal(box
						.getString(CONSENSNAL));
			}
			if (box.getString(RAPD) != null) {
				opdOphthalmology.setPupilReactionRapd(box.getString(RAPD));
			}

			opdOphthalmology.setGonioscopyRe(box.getString(GONIOSCOPY_RE));
			opdOphthalmology.setGonioscopyLe(box.getString(GONIOSCOPY_LE));
			opdOphthalmology.setIopRe(box.getString(IOP_RE));
			opdOphthalmology.setIopLe(box.getString(IOP_LE));
			opdOphthalmology.setDilationRe(box.getString(DILATION_RE));
			opdOphthalmology.setDilationLe(box.getString(DILATION_LE));
			opdOphthalmology.setLensRe(box.getString(LENS_RE));
			opdOphthalmology.setLensLe(box.getString(LENS_LE));
			opdOphthalmology.setFundusRe(box.getString(FUNDUS_RE));
			opdOphthalmology.setFundusLe(box.getString(FUNDUS_LE));

			opdOphthalmology.setLastChgBy(userName);
			opdOphthalmology.setLastChgDate(date);
			opdOphthalmology.setLastChgTime(time);

			hbt.save(opdOphthalmology);
			saved = true;

		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		
		

		OpdOphRetinalHeader retinalHeader = new OpdOphRetinalHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			retinalHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			retinalHeader.setVisit(visit);

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			retinalHeader.setHospital(hospital);

			retinalHeader.setRightEye(box.getString(RIGHT_EYE));
			retinalHeader.setLeftEye(box.getString(LEFT_EYE));
			retinalHeader.setRetinalLaserDate(date);

			retinalHeader.setLastChgBy(userName);
			retinalHeader.setLastChgDate(date);
			retinalHeader.setLastChgTime(time);

			hbt.save(retinalHeader);

			Vector eye = box.getVector(EYE);
			Vector power = box.getVector(POWER);
			Vector duration = box.getVector(DURATION);
			Vector noOfSpots = box.getVector(NO_OF_SPOTS);
			Vector laserType = box.getVector(LASER_TYPE);
			Vector doctorName = box.getVector(DOCTOR_NAME);
			Vector sign = box.getVector(SIGN);

			for (int i = 0; i < power.size(); i++) {
				OpdOphRetinalDetails retinalDetails = new OpdOphRetinalDetails();
				if (power.get(i) != null && !power.get(i).equals("")) {

					retinalDetails.setOphRetinalHeader(retinalHeader);
					retinalDetails.setEye(eye.get(i).toString());
					retinalDetails.setPower(power.get(i).toString());
					retinalDetails.setDuration(duration.get(i).toString());
					retinalDetails.setNoOfSpots(noOfSpots.get(i).toString());
					retinalDetails.setLaserType(laserType.get(i).toString());
					retinalDetails.setDoctorName(doctorName.get(i).toString());
					retinalDetails.setSign(sign.get(i).toString());
					retinalDetails.setLastChgBy(userName);
					retinalDetails.setLastChgDate(date);
					retinalDetails.setLastChgTime(time);

					hbt.save(retinalDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		
		OpdOphFollowUp ophFollowUp = new OpdOphFollowUp();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			ophFollowUp.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			ophFollowUp.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			ophFollowUp.setHospital(hospital);

			ophFollowUp.setAntSegmentRe(box.getString(ANT_SEGMENT_RE));
			ophFollowUp.setAntSegmentLe(box.getString(ANT_SEGMENT_LE));
			ophFollowUp.setIop(box.getString(IOP));
			ophFollowUp.setFundusRe(box.getString(FUNDUS_RE));
			ophFollowUp.setFundusLe(box.getString(FUNDUS_LE));
			ophFollowUp.setAdv(box.getString(ADV));
			ophFollowUp.setFollowUpDate(date);
			ophFollowUp.setLastChgBy(userName);
			ophFollowUp.setLastChgDate(date);
			ophFollowUp.setLastChgTime(time);

			hbt.save(ophFollowUp);
			saved = true;
		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		
		OpdOphDiagnosisHeader diagnosisHeader = new OpdOphDiagnosisHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			diagnosisHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			diagnosisHeader.setVisit(visit);

			if (box.getInt(ANESTHESIA_ID) != 0) {
				MasAnesthesia anesthesia = new MasAnesthesia();
				anesthesia.setId(box.getInt(ANESTHESIA_ID));
				diagnosisHeader.setAnesthesia(anesthesia);
			}

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			diagnosisHeader.setHospital(hospital);

			diagnosisHeader.setOcular(box.getString(OCULAR));
			diagnosisHeader.setSystemic(box.getString(SYSTEMIC));
			diagnosisHeader.setPlan1(box.getString(PLAN));
			diagnosisHeader.setRightEyeSurgery(box.getString(RIGHT_EYE));
			diagnosisHeader.setLeftEyeSurgery(box.getString(LEFT_EYE));

			if (box.getString(NEXT_REVIEW_DATE) != null
					&& !box.getString(NEXT_REVIEW_DATE).equals("")) {
				diagnosisHeader.setNextReviewDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(NEXT_REVIEW_DATE)));
			}

			diagnosisHeader.setLastChgBy(userName);
			diagnosisHeader.setLastChgDate(date);
			diagnosisHeader.setLastChgTime(time);

			hbt.save(diagnosisHeader);

			Vector medicine = box.getVector(MEDICINE);
			Vector uom = box.getVector(UOM);
			Vector frequency = box.getVector(FREQUENCY);
			Vector eye = box.getVector(EYE);

			for (int i = 0; i < medicine.size(); i++) {
				OpdOphDiagnosisDetails diagnosisDetails = new OpdOphDiagnosisDetails();
				if (medicine.get(i) != null && !medicine.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(Integer.valueOf(frequency.get(i)
							.toString()));

					diagnosisDetails.setMedicine(medicine.get(i).toString());
					diagnosisDetails.setDrugType(uom.get(i).toString());
					diagnosisDetails.setEye(eye.get(i).toString());
					diagnosisDetails.setFrequency(masFrequency);
					diagnosisDetails.setOphDiagnosisHeader(diagnosisHeader);
					diagnosisDetails.setLastChgBy(userName);
					diagnosisDetails.setLastChgDate(date);
					diagnosisDetails.setLastChgTime(time);
					hbt.save(diagnosisDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientOphthalmologyDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphthalmology> ophthalmologyList = new ArrayList<OpdOphthalmology>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				ophthalmologyList = session
						.createCriteria(OpdOphthalmology.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophthalmologyList", ophthalmologyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getFrequencyList() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<MasAnesthesia> anesthesiaList = new ArrayList<MasAnesthesia>();
		Session session = (Session) getSession();

		try {
			frequencyList = session.createCriteria(MasFrequency.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			anesthesiaList = session.createCriteria(MasAnesthesia.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			map.put("frequencyList", frequencyList);
			map.put("anesthesiaList", anesthesiaList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map<String, Object> submitOphthalmologyDiagnosis(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphDiagnosisHeader diagnosisHeader = new OpdOphDiagnosisHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			diagnosisHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			diagnosisHeader.setVisit(visit);

			if (box.getInt(ANESTHESIA_ID) != 0) {
				MasAnesthesia anesthesia = new MasAnesthesia();
				anesthesia.setId(box.getInt(ANESTHESIA_ID));
				diagnosisHeader.setAnesthesia(anesthesia);
			}

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			diagnosisHeader.setHospital(hospital);

			diagnosisHeader.setOcular(box.getString(OCULAR));
			diagnosisHeader.setSystemic(box.getString(SYSTEMIC));
			diagnosisHeader.setPlan1(box.getString(PLAN));
			diagnosisHeader.setRightEyeSurgery(box.getString(RIGHT_EYE));
			diagnosisHeader.setLeftEyeSurgery(box.getString(LEFT_EYE));

			if (box.getString(NEXT_REVIEW_DATE) != null
					&& !box.getString(NEXT_REVIEW_DATE).equals("")) {
				diagnosisHeader.setNextReviewDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(NEXT_REVIEW_DATE)));
			}

			diagnosisHeader.setLastChgBy(userName);
			diagnosisHeader.setLastChgDate(date);
			diagnosisHeader.setLastChgTime(time);

			hbt.save(diagnosisHeader);

			Vector medicine = box.getVector(MEDICINE);
			Vector uom = box.getVector(UOM);
			Vector frequency = box.getVector(FREQUENCY);
			Vector eye = box.getVector(EYE);

			for (int i = 0; i < medicine.size(); i++) {
				OpdOphDiagnosisDetails diagnosisDetails = new OpdOphDiagnosisDetails();
				if (medicine.get(i) != null && !medicine.get(i).equals("")) {
					MasFrequency masFrequency = new MasFrequency();
					masFrequency.setId(Integer.valueOf(frequency.get(i)
							.toString()));

					diagnosisDetails.setMedicine(medicine.get(i).toString());
					diagnosisDetails.setDrugType(uom.get(i).toString());
					diagnosisDetails.setEye(eye.get(i).toString());
					diagnosisDetails.setFrequency(masFrequency);
					diagnosisDetails.setOphDiagnosisHeader(diagnosisHeader);
					diagnosisDetails.setLastChgBy(userName);
					diagnosisDetails.setLastChgDate(date);
					diagnosisDetails.setLastChgTime(time);
					hbt.save(diagnosisDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyDiagnosisDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphDiagnosisHeader> ophDiagnosisList = new ArrayList<OpdOphDiagnosisHeader>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
				map.put("patientDataList", visitList);

			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				ophDiagnosisList = session
						.createCriteria(OpdOphDiagnosisHeader.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophDiagnosisList", ophDiagnosisList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitOphthalmologyRetinal(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphRetinalHeader retinalHeader = new OpdOphRetinalHeader();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));
			retinalHeader.setHin(patient);

			Visit visit = new Visit();
			visit.setId(box.getInt(VISIT_ID));
			retinalHeader.setVisit(visit);

			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			retinalHeader.setHospital(hospital);

			retinalHeader.setRightEye(box.getString(RIGHT_EYE));
			retinalHeader.setLeftEye(box.getString(LEFT_EYE));
			retinalHeader.setRetinalLaserDate(date);

			retinalHeader.setLastChgBy(userName);
			retinalHeader.setLastChgDate(date);
			retinalHeader.setLastChgTime(time);

			hbt.save(retinalHeader);

			Vector eye = box.getVector(EYE);
			Vector power = box.getVector(POWER);
			Vector duration = box.getVector(DURATION);
			Vector noOfSpots = box.getVector(NO_OF_SPOTS);
			Vector laserType = box.getVector(LASER_TYPE);
			Vector doctorName = box.getVector(DOCTOR_NAME);
			Vector sign = box.getVector(SIGN);

			for (int i = 0; i < power.size(); i++) {
				OpdOphRetinalDetails retinalDetails = new OpdOphRetinalDetails();
				if (power.get(i) != null && !power.get(i).equals("")) {

					retinalDetails.setOphRetinalHeader(retinalHeader);
					retinalDetails.setEye(eye.get(i).toString());
					retinalDetails.setPower(power.get(i).toString());
					retinalDetails.setDuration(duration.get(i).toString());
					retinalDetails.setNoOfSpots(noOfSpots.get(i).toString());
					retinalDetails.setLaserType(laserType.get(i).toString());
					retinalDetails.setDoctorName(doctorName.get(i).toString());
					retinalDetails.setSign(sign.get(i).toString());
					retinalDetails.setLastChgBy(userName);
					retinalDetails.setLastChgDate(date);
					retinalDetails.setLastChgTime(time);

					hbt.save(retinalDetails);
				}
			}
			saved = true;
		} catch (DataAccessException e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyRetinalDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphRetinalHeader> ophRetinalList = new ArrayList<OpdOphRetinalHeader>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				ophRetinalList = session
						.createCriteria(OpdOphRetinalHeader.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophRetinalList", ophRetinalList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> submitOphthalmologyFollowUp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hospitalId = 0;
		String userName = "";

		userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		OpdOphFollowUp ophFollowUp = new OpdOphFollowUp();

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			int visitId = box.getInt(VISIT_ID);
			Visit visit = new Visit();
			visit.setId(visitId);
			ophFollowUp.setVisit(visit);

			int hinId = box.getInt(HIN_ID);
			Patient patient = new Patient();
			patient.setId(hinId);
			ophFollowUp.setHin(patient);

			hospitalId = box.getInt("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			ophFollowUp.setHospital(hospital);

			ophFollowUp.setAntSegmentRe(box.getString(ANT_SEGMENT_RE));
			ophFollowUp.setAntSegmentLe(box.getString(ANT_SEGMENT_LE));
			ophFollowUp.setIop(box.getString(IOP));
			ophFollowUp.setFundusRe(box.getString(FUNDUS_RE));
			ophFollowUp.setFundusLe(box.getString(FUNDUS_LE));
			ophFollowUp.setAdv(box.getString(ADV));
			ophFollowUp.setFollowUpDate(date);
			ophFollowUp.setLastChgBy(userName);
			ophFollowUp.setLastChgDate(date);
			ophFollowUp.setLastChgTime(time);

			hbt.save(ophFollowUp);
			saved = true;
		} catch (Exception e) {
			saved = false;
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOphthalmologyFollowUpDetails(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOphFollowUp> ophFollowUpList = new ArrayList<OpdOphFollowUp>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				ophFollowUpList = session.createCriteria(OpdOphFollowUp.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("ophFollowUpList", ophFollowUpList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * -------------------------------------------- End of methods by
	 * Ritu-------------------------
	 */

	/**
	 * --------------------------------------------Start of Methods For By
	 * Mansi-------------------------
	 * 
	 */
	// ................................... Patient Allergic Drugs
	// ............................
	@SuppressWarnings("unchecked")
	public Map<String, Object> getItemList(Map<String, Object> map) {
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {
			String str = (String) map.get("autoHint") + "%";
			String query = "";
			int visitId = 0;

			if (map.get("visitId") != null) {
				visitId = (Integer) map.get("visitId");
			}

			searchPatientAllergicDrugsHdList = session
					.createCriteria(PatientAllergicDrugsHd.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();

			if (searchPatientAllergicDrugsHdList.size() > 0) {
				PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
						.get(0);
				int id = patientAllergicDrugsHd.getId();
				searchPatientAllergicDrugsDtList = session
						.createCriteria(PatientAllergicDrugsDt.class)
						.createAlias("PatientAllergicDrugsHd",
								"patientAllergicDrugsHd")
						.add(Restrictions.eq("patientAllergicDrugsHd.Id", id))
						.list();
				if (searchPatientAllergicDrugsDtList.size() > 0) {
					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo,sib.Id FROM MasStoreItem as sib where sib.Id NOT IN (select dt.Item.Id from PatientAllergicDrugsDt as dt)  and sib.Nomenclature like '"
							+ str + "'";

					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo,sib.Id FROM MasStoreItem as sib where sib.Id NOT IN (select dt.Item.Id from PatientAllergicDrugsDt as dt)  and sib.Nomenclature like '"
							+ str + "'";
				} else {
					query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo from MasStoreItem as sib where sib.Nomenclature like '"
							+ str + "'";
				}

			} else {

				// query =
				// "from MasStoreItem as mst where mst.Nomenclature like '"
				// + str + "'";

				// itemList =
				// (List<MasStoreItem>)session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",
				// str)).list();

				// Query q = session.createQuery(query);
				// q.setFirstResult(0);
				// q.setMaxResults(10);
				// itemList = q.list();

				query = "SELECT DISTINCT(sib.Nomenclature),sib.PvmsNo from MasStoreItem as sib where sib.Nomenclature like '"
						+ str + "'";

				Query q = session.createQuery(query);
				// q.setFirstResult(0);
				// q.setMaxResults(10);
				itemList = q.list();
				Iterator itr = itemList.iterator();
				while (itr.hasNext()) {
					Object[] pair = (Object[]) itr.next();
					@SuppressWarnings("unused")
					String nomenclature = (String) pair[0];

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> fillItemsInGrid(Map<String, Object> map) {

		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			String str = (String) map.get("pvmsNo") + "%";
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", str));
			itemList = c.list();
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPatientAllergicDrugs(
			Map<String, Object> infoMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		PatientAllergicDrugsHd patientAllergicDrugshd = new PatientAllergicDrugsHd();
		List itemList = new ArrayList();
		int itemIdFromRequest = 0;
		int patientAllergicDrugshdId = 0;
		List specialInstructionList = new ArrayList();
		boolean success = false;
		int userId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("patientAllergicDrugshd") != null) {
			patientAllergicDrugshd = (PatientAllergicDrugsHd) infoMap
					.get("patientAllergicDrugshd");
		}

		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
		}
		if (infoMap.get("patientAllergicDrugshdId") != null) {

			itemIdFromRequest = (Integer) infoMap
					.get("patientAllergicDrugshdId");

		}
		if (infoMap.get("specialInstruction") != null) {
			specialInstructionList = (List) infoMap.get("specialInstruction");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		searchPatientAllergicDrugsHdList = test(visitId);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (searchPatientAllergicDrugsHdList.size() == 0) {

				if (infoMap.get("headerStored") != null) {
					if (!infoMap.get("headerStored").equals("yes")) {
						hbt.save(patientAllergicDrugshd);
						patientAllergicDrugshdId = patientAllergicDrugshd
								.getId();
						map.put("patientAllergicDrugshdId",
								patientAllergicDrugshdId);

					}
				}
			} else {
				int headerId = 0;
				for (PatientAllergicDrugsHd patientAllergicDrugsHd2 : searchPatientAllergicDrugsHdList) {
					headerId = patientAllergicDrugsHd2.getId();
					patientAllergicDrugshd.setId(headerId);
				}

			}

			if (infoMap.get("itemList") != null) {
				itemList = (List) infoMap.get("itemList");
				if (itemList.size() > 0) {
					for (int i = 0; i < itemList.size(); i++) {
						PatientAllergicDrugsDt patientAllergicDrugsdt = new PatientAllergicDrugsDt();
						MasStoreItem masStoreItem = new MasStoreItem();
						if (itemList.get(i) != null) {
							int itemId = Integer.parseInt("" + itemList.get(i));
							masStoreItem.setId(itemId);
							patientAllergicDrugsdt.setItem(masStoreItem);

							patientAllergicDrugsdt
									.setSpecialInstruction(specialInstructionList
											.get(i).toString());
							patientAllergicDrugsdt.setLastChgBy(userId);
							patientAllergicDrugsdt.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							patientAllergicDrugsdt.setLastChgTime(time);
							patientAllergicDrugsdt.setStatus("y");
							if (infoMap.get("headerStored").equals("yes")) {

								PatientAllergicDrugsHd patientAllergicDrugsHd = new PatientAllergicDrugsHd();
								patientAllergicDrugsHd.setId(itemIdFromRequest);
								patientAllergicDrugsdt
										.setPatientAllergicDrugsHd(patientAllergicDrugsHd);

							} else {
								patientAllergicDrugsdt
										.setPatientAllergicDrugsHd(patientAllergicDrugshd);
							}
						}
						hbt.save(patientAllergicDrugsdt);

						Visit visitObjToUpdate = (Visit) hbt.load(Visit.class,
								visitId);
						visitObjToUpdate.setVisitStatus("w");
						hbt.update(visitObjToUpdate);

						OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

						opdPatientDetails.setReferredDept(referredDepartment);

						MasHospital masHospital = (MasHospital) hbt.load(
								MasHospital.class, hospitalId);
						opdPatientDetails.setHospital(masHospital);

						opdPatientDetails.setVisit(visitObjToUpdate);
						hbt.save(opdPatientDetails);

					}
				}
			}
			success = true;
			map.put("success", success);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	private List<PatientAllergicDrugsHd> test(int visitId) {
		Session session = (Session) getSession();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		try {
			searchPatientAllergicDrugsHdList = session
					.createCriteria(PatientAllergicDrugsHd.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return searchPatientAllergicDrugsHdList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getItem() {
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		try {
			List lst = new ArrayList();
			lst.add("LABORATORY");
			lst.add("RADIOLOGY");
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y")).list();

			if (itemList.size() > 0) {
				detailsMap.put("itemList", itemList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientAllergicDrugs(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		try {
			searchPatientAllergicDrugsHdList = session
					.createCriteria(PatientAllergicDrugsHd.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (searchPatientAllergicDrugsHdList.size() > 0) {
				PatientAllergicDrugsHd patientAllergicDrugsHd = (PatientAllergicDrugsHd) searchPatientAllergicDrugsHdList
						.get(0);
				int id = patientAllergicDrugsHd.getId();
				searchPatientAllergicDrugsDtList = session
						.createCriteria(PatientAllergicDrugsDt.class)
						.createAlias("PatientAllergicDrugsHd",
								"patientAllergicDrugsHd")
						.add(Restrictions.eq("patientAllergicDrugsHd.Id", id))
						.list();
				map.put("searchPatientAllergicDrugsHdList",
						searchPatientAllergicDrugsHdList);
				map.put("searchPatientAllergicDrugsDtList",
						searchPatientAllergicDrugsDtList);
				patientDataList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("Id", visitId)).list();

			} else {

				patientDataList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("Id", visitId)).list();

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("patientDataList", patientDataList);

		return map;
	}

	// ................................... Patient
	// History............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getOpdTemplateDepartmentWise(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();

		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("patientDataList", patientDataList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPatientHistory(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdPatientHistory> patientHistoryList = new ArrayList<OpdPatientHistory>();
		Map<String, Object> map = new HashMap<String, Object>();
		patientHistoryList = session.createCriteria(OpdPatientHistory.class)
				.add(Restrictions.eq("VisitInpatientId", visitId)).list();

		if (patientHistoryList.size() > 0) {
			map.put("patientHistoryList", patientHistoryList);
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} else {
			try {
				patientDataList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("Id", visitId)).list();

			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addPatientHistory(Map<String, Object> infoMap) {
		OpdPatientHistory patientHistory = new OpdPatientHistory();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("patientHistory") != null) {
			patientHistory = (OpdPatientHistory) infoMap.get("patientHistory");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");
		
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(patientHistory);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("w");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPatientHistory(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdPatientHistory> patientHistoryList = new ArrayList<OpdPatientHistory>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				patientHistoryList = session
						.createCriteria(OpdPatientHistory.class)
						.add(Restrictions.eq("VisitInpatientId", visitId))
						.list();
				map.put("patientHistoryList", patientHistoryList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ................................Pediatric Vaccination Plan
	// .............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPediatricVaccinationPlanJsp(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdVaccinMst> opdVaccinMstList = new ArrayList<OpdVaccinMst>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			opdVaccinMstList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.OpdVaccinMst as mi where mi.Status = 'y'");
			opdVaccinationPlanList = session
					.createCriteria(OpdVaccinationPlan.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdVaccinMstList", opdVaccinMstList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPediatricVaccinationPlan(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String vacinationType = "";
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			vacinationType = box.getString(VACCINE_TYPE);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			String referredDept = (String) box.get("referredDept").toString();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector vanniceId = box.getVector(VACCINE_ID);
			Vector vaccinDate = box.getVector(VACCINE_DATE);
			Vector vaccinCompleteDate = box.getVector(COMPLETION_DATE);
			Vector remarks = box.getVector(REMARKS);

			for (int i = 0; i < vanniceId.size(); i++) {

				OpdVaccinationPlan vaccinationPlanObj = new OpdVaccinationPlan();
				if (vanniceId.get(i) != null && !vanniceId.get(i).equals("")) {
					OpdVaccinMst vaccin = new OpdVaccinMst();
					if (vanniceId.get(i) != null
							&& !vanniceId.get(i).equals("")) {
						vaccin.setId(Integer.parseInt(vanniceId.get(i)
								.toString()));
						vaccinationPlanObj.setVaccin(vaccin);
					}
					if (remarks.get(i) != null && !remarks.get(i).equals("")) {
						vaccinationPlanObj.setRemarks((String) remarks.get(i));
					}

					if (vaccinDate.get(i) != null
							&& !vaccinDate.get(i).equals("")) {
						vaccinationPlanObj
								.setVaccinDate(HMSUtil
										.convertStringTypeDateToDateType((String) vaccinDate
												.get(i)));
					}

					if (vaccinCompleteDate.get(i) != null
							&& !vaccinCompleteDate.get(i).equals("")) {
						vaccinationPlanObj
								.setVaccinCompleteDate(HMSUtil
										.convertStringTypeDateToDateType((String) vaccinCompleteDate
												.get(i)));
					}
					vaccinationPlanObj.setDepartment(masDepartment);
					vaccinationPlanObj.setHospital(masHospital);
					vaccinationPlanObj.setHin(patient);
					vaccinationPlanObj.setVisit(visit);
					vaccinationPlanObj.setDob(HMSUtil
							.convertStringTypeDateToDateType(dob));

					vaccinationPlanObj.setVacinationType(vacinationType);
					vaccinationPlanObj.setStatus("y");
					vaccinationPlanObj.setLastChgDate(date);
					vaccinationPlanObj.setLastChgTime(time);
					Users users=new Users();
					users.setId(userId);
					vaccinationPlanObj.setLastChgBy(users);

					hbt.save(vaccinationPlanObj);

					Visit visitObjToUpdate = (Visit) hbt.load(Visit.class,
							visitId);
					visitObjToUpdate.setVisitStatus("C");
					hbt.update(visitObjToUpdate);

					OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

					opdPatientDetails.setReferredDept(masDepartment);

					MasHospital masHospitalob = (MasHospital) hbt.load(
							MasHospital.class, hospitalId);
					opdPatientDetails.setHospital(masHospitalob);

					opdPatientDetails.setVisit(visitObjToUpdate);
					hbt.save(opdPatientDetails);

				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updatePediatricVaccinationPlan(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String vacinationType = "";
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			vacinationType = box.getString(VACCINE_TYPE);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector vacinationId = box.getVector(VACCINATION_ID);
			Vector vanniceId = box.getVector(VACCINE_ID);
			Vector vaccinDate = box.getVector(VACCINE_DATE);
			Vector vaccinCompleteDate = box.getVector(COMPLETION_DATE);
			Vector remarks = box.getVector(REMARKS);
			for (int i = 0; i < vacinationId.size(); i++) {

				OpdVaccinationPlan vaccinationPlanObj = new OpdVaccinationPlan();
				if (vacinationId.get(i) != null
						&& !vacinationId.get(i).equals("")) {
					int vId = Integer.parseInt(vacinationId.get(i).toString());
					vaccinationPlanObj = (OpdVaccinationPlan) getHibernateTemplate()
							.load(OpdVaccinationPlan.class, vId);
					if (vanniceId.get(i) != null
							&& !vanniceId.get(i).equals("")) {
						OpdVaccinMst vaccin = new OpdVaccinMst();
						if (vanniceId.get(i) != null
								&& !vanniceId.get(i).equals("")) {
							vaccin.setId(Integer.parseInt(vanniceId.get(i)
									.toString()));
							vaccinationPlanObj.setVaccin(vaccin);
						}
						if (remarks.get(i) != null
								&& !remarks.get(i).equals("")) {
							vaccinationPlanObj.setRemarks((String) remarks
									.get(i));
						}

						if (vaccinDate.get(i) != null
								&& !vaccinDate.get(i).equals("")) {
							vaccinationPlanObj
									.setVaccinDate(HMSUtil
											.convertStringTypeDateToDateType((String) vaccinDate
													.get(i)));
						}

						if (vaccinCompleteDate.get(i) != null
								&& !vaccinCompleteDate.get(i).equals("")) {
							vaccinationPlanObj
									.setVaccinCompleteDate(HMSUtil
											.convertStringTypeDateToDateType((String) vaccinCompleteDate
													.get(i)));
						}
						vaccinationPlanObj.setDepartment(masDepartment);
						vaccinationPlanObj.setHospital(masHospital);
						vaccinationPlanObj.setHin(patient);
						vaccinationPlanObj.setVisit(visit);
						vaccinationPlanObj.setDob(HMSUtil
								.convertStringTypeDateToDateType(dob));

						vaccinationPlanObj.setVacinationType(vacinationType);
						vaccinationPlanObj.setStatus("y");
						vaccinationPlanObj.setLastChgDate(date);
						vaccinationPlanObj.setLastChgTime(time);
						Users users=new Users();
						users.setId(userId);
						vaccinationPlanObj.setLastChgBy(users);

						hbt.update(vaccinationPlanObj);
					}
				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	// ................................... Pediatric Case Sheet
	// ............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> getPediatricCaseSheet(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			opdVaccinationPlanList = session
					.createCriteria(OpdVaccinationPlan.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdVaccinationPlanList.size() > 0) {
				map.put("opdVaccinationPlanList", opdVaccinationPlanList);
			}
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("employeeList", employeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getImmunizationCardDetail(int visitId, int hinId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<ImmunizationCardMaster> immunizationCardList = new ArrayList<ImmunizationCardMaster>();
		List<ImmunizationCardDetail> cardDetailsList = new ArrayList<ImmunizationCardDetail>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

			cardDetailsList = session
					.createCriteria(ImmunizationCardDetail.class)
					.createAlias("VisitId", "visit")
					.add(Restrictions.eq("visit.Hin.Id", hinId)).list();
			immunizationCardList = session.createCriteria(
					ImmunizationCardMaster.class).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (cardDetailsList != null || cardDetailsList.size() > 0) {
			map.put("cardDetailsList", cardDetailsList);
		}
		map.put("patientDataList", patientDataList);
		map.put("immunizationCardList", immunizationCardList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addPediatricCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		String dob = "";
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int referedBy = 0;
		Float heightInCmChild;
		Float heightInCmFather;
		Float heightInCmMother;
		String age = "";
		String clinicalNote = "";
		Float rdPercentile;
		String remarks = "";
		Float thPercentile;
		int ht = 0;
		int wt = 0;
		int hc = 0;
		Float bmi;
		Float ofc;
		Float rr;
		try {

			visitId = box.getInt(VISIT_ID);
			hinId = box.getInt(HIN_ID);
			dob = box.getString(DATE_OF_BIRTH);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");
			heightInCmChild = box.getFloat(HEIGHT_IN_CM_CHILD);
			heightInCmFather = box.getFloat(HEIGHT_IN_CM_FATHER);
			heightInCmMother = box.getFloat(HEIGHT_IN_CM_MOTHER);
			age = box.getString(AGE);
			clinicalNote = box.getString(CLINICAL_NOTE);
			rdPercentile = box.getFloat(RD_PERCENDTILE);
			referedBy = box.getInt(EMPLOYEE_ID);
			remarks = box.getString(REMARKS_TEMP);
			thPercentile = box.getFloat(TH_PERCENDTILE);
			wt = box.getInt("kgS");
			ht = box.getInt("htcS");
			hc = box.getInt(HIV);
			bmi = box.getFloat("bmiS");
			ofc = box.getFloat(OFC);
			rr = box.getFloat(RR);
			String referredDept = (String) box.get("referredDept").toString();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(referedBy);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			OpdCaseSheet caseSheetObj = new OpdCaseSheet();
			caseSheetObj.setDepartment(masDepartment);
			caseSheetObj.setHin(patient);
			caseSheetObj.setVisit(visit);
			caseSheetObj.setHospital(masHospital);
			caseSheetObj.setHeightInCmChild(heightInCmChild);
			caseSheetObj.setHeightInCmFather(heightInCmFather);
			caseSheetObj.setHeightInCmMother(heightInCmMother);
			caseSheetObj.setAge(age);
			caseSheetObj.setClinicalNote(clinicalNote);
			caseSheetObj.setRdPercentile(rdPercentile);
			caseSheetObj.setRemarks(remarks);
			caseSheetObj.setThPercentile(thPercentile);
			caseSheetObj.setStatus("y");
			caseSheetObj.setLastChgDate(date);
			caseSheetObj.setLastChgTime(time);
			caseSheetObj.setLastChgBy(userId);

			if (dob != "" || dob != null) {
				caseSheetObj.setDob(HMSUtil
						.convertStringTypeDateToDateType(dob));
			} else {
				caseSheetObj.setDob(null);
			}
			if (referedBy != 0) {
				caseSheetObj.setReferedBy(masEmployee);
			} else {
				caseSheetObj.setReferedBy(null);
			}
			caseSheetObj.setHc(hc);
			caseSheetObj.setBmi(bmi);
			caseSheetObj.setHt(ht);
			caseSheetObj.setWt(wt);

			caseSheetObj.setOfc(ofc);
			caseSheetObj.setRr(rr);

			hbt.save(caseSheetObj);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPediatricCaseSheet(
			Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdCaseSheet> opdCaseSheetList = new ArrayList<OpdCaseSheet>();
		List<OpdVaccinationPlan> opdVaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdCaseSheetList = session.createCriteria(OpdCaseSheet.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				opdVaccinationPlanList = session
						.createCriteria(OpdVaccinationPlan.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				if (opdVaccinationPlanList.size() > 0) {
					map.put("opdVaccinationPlanList", opdVaccinationPlanList);
				}

				map.put("opdCaseSheetList", opdCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ................................... OBG .............................

	@SuppressWarnings("unchecked")
	public Map<String, Object> showOBGJsp(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdObg> opdObgList = new ArrayList<OpdObg>();
		List<MasOccupation> masOccupationList = new ArrayList<MasOccupation>();
		List<MasReligion> masReligionList = new ArrayList<MasReligion>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

			opdObgList = session.createCriteria(OpdObg.class)
					.createAlias("Visit", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			if (opdObgList.size() > 0) {
				map.put("opdObgList", opdObgList);
			}
			masOccupationList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasOccupation as mm where mm.Status = 'y'");
			masReligionList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasReligion as mm where mm.Status = 'y'");
			if (masOccupationList.size() > 0) {
				map.put("masOccupationList", masOccupationList);
			}
			if (masReligionList.size() > 0) {
				map.put("masReligionList", masReligionList);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addOBGOne(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		// Part One
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String educationHusband = "";
		String educationWife = "";
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		String accommodationType = "";
		String privacy = "";
		String infertilityPrimaryYrs = "";
		String infertilitySecondaryYrs = "";

		String hypomenorroheaYrs = "";
		String hypomenorrohea = "";
		String oligomenorrhoeaYrs = "";
		String oligomenorrhoea = "";
		String galactorrhoeaYrs = "";
		String galactorrhoea = "";
		String hirsutismYrs = "";
		String leucorrhoea = "";
		String backaches = "";
		String pruritisValue = "";

		String dysmenorrhoea = "";
		String menarcheYrs = "";
		String pastMC = "";
		String presentMC = "";
		String lmp = "";
		String pmpOne = "";

		String pmpTwo = "";
		String diagnosticScopy = "";
		String tubalSurgery = "";
		String exploratoryLap = "";
		String operativeScopy = "";

		// Part Two
		String diabetesPersonal = "";
		String diabetesFamily = "";
		String hypertensionPersonal = "";
		String hypertensionFamily = "";
		String tuberculosisPersonal = "";
		String tuberculosisFamily = "";
		String pulmonaryPersonal = "";
		String pulmonaryFamily = "";
		String abdominalPersonal = "";
		String abdominalFamily = "";
		String thyroidPersonal = "";
		String thyroidFamily = "";
		String othersPersonal = "";
		String othersFamily = "";
		String normalDelivery = "";
		String ectopic = "";
		String prematureDelivery = "";
		int abortion = 0;
		String dyspareunia = "";
		String awareness = "";
		String tryingToConceiveFor = "";
		String frequencyOfIC = "";
		int generalApperanceHeight = 0;
		int generalApperanceWidth = 0;
		String secondarySexualCharacters = "";
		String neckLymphGlands = "";
		String thyroid = "";
		String cvs = "";
		String bp = "";
		String rs = "";
		String cns = "";
		int pulse = 0;

		// Part Three
		String hairDistribution = "";
		String breastDevelopment = "";
		String galaactorrhoeaEndoriceStatus = "";
		String obesity = "";
		String pigmentationAbodominalStriae = "";
		String acne = "";
		String othersEndoriceStatus = "";
		String psClitoris = "";
		String psMajopra = "";
		String psMinora = "";
		String pvClitoris = "";
		String pvMajopra = "";
		String pvMinora = "";
		String hemoglobin = "";
		String pelvisEndosocopyUterus = "";
		String bloodGroupHusband = "";
		String bloodGroupWife = "";
		String bloodSugarHusband = "";
		String bloodSugarWife = "";
		String vdrlHusband = "";
		String vdrlWife = "";
		String urineAnalysis = "";
		String hivHusband = "";
		String hivWife = "";
		String HbsAgHusband = "";
		String HbsAgWife = "";

		// part Four

		String secretory = "";
		String dating = "";
		String proliferative = "";
		int dayOfCycle = 0;
		String dateobg = "";
		String overiesLeftEndosocopy = "";
		String tubesLeftEndosocopy = "";
		String overiesRightEndoscopy = "";
		String tubesRightEndosocopy = "";
		String pelvisEndosocopy = "";
		String uterusHysterosaliagography = "";
		String cornualOpening = "";
		String endometrical = "";
		String tubesLeft = "";
		String tubesRight = "";
		String uterus = "";
		String dhesWife = "";
		String dhesHusband = "";
		String tThreeWife = "";
		String tFourHusband = "";
		String tThreeHusband = "";
		String tFourWife = "";
		String TSHHusband = "";
		String TSHWife = "";
		String sProlactinWife = "";
		String sProlactinHusband = "";
		String FSHWife = "";
		String FSHHusband = "";
		String LHWife = "";
		String LHHusband = "";
		String sTestosteroneWife = "";
		String sTestosteroneHusband = "";
		String tlc = "";
		String dlc = "";
		String esr = "";
		String specification = "";
		String referredDept = (String) box.get("referredDept").toString();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		MasDepartment masDepartment = new MasDepartment();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			accommodationType = box.getString(ACCOMMODATION_TYPE);
			educationHusband = box.getString(EDUCATION_HUSBAND);
			educationWife = box.getString(EDUCATION_WIFE);
			privacy = box.getString(PRIVACY);
			infertilityPrimaryYrs = box.getString(INFERTILITY_PRIMARY_YRS);
			infertilitySecondaryYrs = box.getString(INFERTILITY_SECONDARY_YRS);
			hypomenorroheaYrs = box.getString(HYPOMENRROHEA_YRS);
			hypomenorrohea = box.getString(HYPOMENRROHEA);
			oligomenorrhoeaYrs = box.getString(OLIGOMEORRHOEA_YRS);
			oligomenorrhoea = box.getString(OLIGOMEORRHOEA);
			galactorrhoeaYrs = box.getString(GALACTORRHOEA_YRS);
			galactorrhoea = box.getString(GALACTORRHOEA);
			hirsutismYrs = box.getString(HIRSUTISM_YRS);
			leucorrhoea = box.getString(LEUCORRHOEA);
			backaches = box.getString(BACKACHES);
			pruritisValue = box.getString(PRURITIS_VALUE);
			dysmenorrhoea = box.getString(DYSMENORRHOEA);
			menarcheYrs = box.getString(MENARCHE_YRS);
			pastMC = box.getString(PAST_MC);
			presentMC = box.getString(PRESENT_MC);
			lmp = box.getString(LMP);
			pmpOne = box.getString(PMP_ONE);
			pmpTwo = box.getString(PMP_TWO);
			diagnosticScopy = box.getString(DIAGNOSTIC_SCOPY);
			tubalSurgery = box.getString(TUBAL_SURFERY);
			exploratoryLap = box.getString(EXPLORATORY_LAP);
			operativeScopy = box.getString(OPERATIVE_SCOPY);
			diabetesPersonal = box.getString(DIABETES_PERSONAL);
			diabetesFamily = box.getString(DIABETES_FAMILY);
			hypertensionPersonal = box.getString(HYPERTENSION_PERSONAL);
			;
			hypertensionFamily = box.getString(HYPERTENSION_FAMILY);
			tuberculosisPersonal = box.getString(TUBERCULOSIS_PERSONAL);
			tuberculosisFamily = box.getString(TUBERCULOSIS_FAMILY);
			pulmonaryPersonal = box.getString(PULMONARY_PERSONAL);
			pulmonaryFamily = box.getString(PULMONARY_FAMILY);
			abdominalPersonal = box.getString(ABDOMINAL_PERSONAL);
			abdominalFamily = box.getString(ABDOMINAL_FAMILY);
			thyroidPersonal = box.getString(THYROID_PERSONAL);
			thyroidFamily = box.getString(THYROID_FAMILY);
			othersPersonal = box.getString(OTHERS_PERSONAL);
			othersFamily = box.getString(OTHERS_FAMILY);
			normalDelivery = box.getString(NORMAL_DELIVERY);
			ectopic = box.getString(ECTOPIC);
			prematureDelivery = box.getString(prematureDelivery);
			abortion = box.getInt(ABORTION);
			dyspareunia = box.getString(DYSPAREUNIA);
			awareness = box.getString(AWARENESS);
			tryingToConceiveFor = box.getString(TRYING_TO_CONCERIVE_FOR);
			frequencyOfIC = box.getString(FREQUENCY_OF_IC);
			generalApperanceHeight = box.getInt(GENERNAL_APPERANCE_HEIGHT);
			generalApperanceWidth = box.getInt(GENERNAL_APPERANCE_WIDTH);
			secondarySexualCharacters = box
					.getString(SECONDARY_SEXUAL_CHARACTERS);
			neckLymphGlands = box.getString(NECK_LYMPH_GLANDS);
			thyroid = box.getString(THYROID);
			cvs = box.getString(CVS);
			bp = box.getString(B_P);
			rs = box.getString(RS);
			cns = box.getString(CNS);
			pulse = box.getInt(PULSE);

			// Part Three
			hairDistribution = box.getString(HAIR_DISTRIBUTION);
			breastDevelopment = box.getString(BREAST_DEDVELOPMENT);
			galaactorrhoeaEndoriceStatus = box
					.getString(GALACTORRHOEA_ENDORICE_STATUS);
			obesity = box.getString(OBESITY);
			pigmentationAbodominalStriae = box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE);
			acne = box.getString(ACNE);
			othersEndoriceStatus = box.getString(OTHERS_ENDORICE_STATUS);
			psClitoris = box.getString(P_S_CLITORIS);
			psMajopra = box.getString(P_S_MAJOPRA);
			psMinora = box.getString(P_S_MINORA);
			pvClitoris = box.getString(P_V_CLITORIS);
			pvMajopra = box.getString(P_V_MAJOPRA);
			pvMinora = box.getString(P_V_MINORA);
			hemoglobin = box.getString(HEMOGLOBIN);
			pelvisEndosocopyUterus = box.getString(PELVIS_ENDOSCOPY_UTERUS);
			bloodGroupHusband = box.getString(BLOOD_GROUP_HUSBAND);
			bloodGroupWife = box.getString(BLOOD_GROUP_WIFE);
			bloodSugarHusband = box.getString(BLOOD_SUGAR_HUSBAND);
			bloodSugarWife = box.getString(BLOOD_SUGAR_WIFE);
			vdrlHusband = box.getString(VDRL_HUSBAND);
			vdrlWife = box.getString(VDRL_WIFE);
			urineAnalysis = box.getString(URINE_ANALYSIS);
			specification = box.getString(SPECIFICATION);
			hivHusband = box.getString(HIV_HUSBAND);
			hivWife = box.getString(HIV_WIFE);
			HbsAgHusband = box.getString(HBSAG_HUSBAND);
			HbsAgWife = box.getString(HBSAG_WIFE);

			// part Four

			secretory = box.getString(SECRETORY);
			dating = box.getString(DATING);
			proliferative = box.getString(PROLIFERATIVE);
			dayOfCycle = box.getInt(DAYS_OF_CYCLE);
			dateobg = box.getString(DATE_OBG);
			overiesLeftEndosocopy = box.getString(OVERIES_LEFT_ENDOSCOPY);
			tubesLeftEndosocopy = box.getString(TUBES_LEFT_ENDOSCOPY);
			overiesRightEndoscopy = box.getString(OVERIES_RIGHT_ENDOSCOPY);
			tubesRightEndosocopy = box.getString(TUBES_RIGHT_ENDOSCOPY);
			pelvisEndosocopy = box.getString(PELVIS_ENDOSCOPY);
			uterusHysterosaliagography = box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY);
			cornualOpening = box.getString(CORNUAL_OPENING);
			endometrical = box.getString(ENDOMETRICAL);
			tubesLeft = box.getString(TUBES_LEFT);
			tubesRight = box.getString(TUBES_RIGHT);
			uterus = box.getString(UTERUS);
			dhesWife = box.getString(DHES_WIFE);
			dhesHusband = box.getString(DHES_HUSBAND);
			tThreeWife = box.getString(T_THREE_WIFE);
			tFourHusband = box.getString(T_FOUR_HUSBAND);
			tThreeHusband = box.getString(T_THREE_HUSBAND);
			tFourWife = box.getString(T_FOUR_WIFE);
			TSHHusband = box.getString(TSH_HUSBAND);
			TSHWife = box.getString(TSH_WIFE);
			sProlactinWife = box.getString(S_PROLACTIN_WIFE);
			sProlactinHusband = box.getString(S_PROLACTIN_WIFE);
			FSHWife = box.getString(FSHWife);
			FSHHusband = box.getString(FSH_HUSBAND);
			LHWife = box.getString(LH_WIFE);
			LHHusband = box.getString(LH_HUSBAND);
			sTestosteroneWife = box.getString(S_TESTOSTERONE_WIFE);
			sTestosteroneHusband = box.getString(S_TESTOSTERONE_HUSBAND);
			tlc = box.getString(TLC);
			dlc = box.getString(DLC);
			esr = box.getString(ESR);
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			occpationHusband = box.getInt(OCCUPATION_HUSBAND);
			occpationWife = box.getInt(OCCUPATION_WIFE);
			religionHusband = box.getInt(RELIGION_HUSBAND);
			religionWife = box.getInt(RELIGION_WIFE);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			MasOccupation masOccupationHusband = new MasOccupation();
			masOccupationHusband.setId(occpationHusband);

			MasOccupation masOccupationWife = new MasOccupation();
			masOccupationWife.setId(occpationWife);

			MasReligion masReligionHusband = new MasReligion();
			masReligionHusband.setId(religionHusband);

			MasReligion masReligionWife = new MasReligion();
			masReligionWife.setId(religionWife);

			OpdObg opdObg = new OpdObg();
			// part 1

			if (box.getInt("departmentId") != 0) {
				opdObg.setDepartment(masDepartment);
			}
			if (box.getInt(HIN_ID) != 0) {
				opdObg.setHin(patient);
			}
			if (box.getInt(VISIT_ID) != 0) {
				opdObg.setVisit(visit);
			}

			if (box.getInt(OCCUPATION_HUSBAND) != 0) {
				opdObg.setOccupationHusband(masOccupationHusband);
			}
			if (box.getInt(OCCUPATION_WIFE) != 0) {
				opdObg.setOccupationWife(masOccupationWife);
			}
			if (box.getInt(RELIGION_HUSBAND) != 0) {
				opdObg.setReligionHusband(masReligionHusband);
			}
			if (box.getInt(RELIGION_WIFE) != 0) {
				opdObg.setReligionWife(masReligionWife);

			}
			if (box.getInt(HOSPITAL_ID) != 0) {
				opdObg.setHospital(masHospital);
			}

			opdObg.setEducationHusband(educationHusband);
			opdObg.setEducationWife(educationWife);
			opdObg.setTypeOfAccommodation(accommodationType);
			opdObg.setInfertilityPrimaryYrs(infertilityPrimaryYrs);
			opdObg.setInfertilitySecondaryYrs(infertilitySecondaryYrs);
			opdObg.setHypomenorroheaYrs(hypomenorroheaYrs);
			opdObg.setHypomenorrohea(hypomenorrohea);
			opdObg.setOligomenorrhoea(oligomenorrhoea);
			opdObg.setOligomenorrhoeaYrs(oligomenorrhoeaYrs);
			opdObg.setPrivacy(privacy);
			opdObg.setGalactorrhoea(galactorrhoea);
			opdObg.setGalactorrhoeaYrs(galactorrhoeaYrs);
			opdObg.setHirsutismYrs(hirsutismYrs);
			opdObg.setLeucorrhoea(leucorrhoea);
			opdObg.setBackaches(backaches);
			opdObg.setPruritisValue(pruritisValue);
			opdObg.setDysmenorrhoea(dysmenorrhoea);
			opdObg.setMenarcheYrs(menarcheYrs);
			opdObg.setPastMc(pastMC);
			opdObg.setPresentMc(presentMC);
			opdObg.setLmp(lmp);
			opdObg.setPmpOne(pmpOne);
			opdObg.setPmpTwo(pmpTwo);
			opdObg.setDiagnosticScopy(diagnosticScopy);
			opdObg.setTubalSurgery(tubalSurgery);
			opdObg.setExploratoryLaparotomy(exploratoryLap);
			opdObg.setOperativeScopy(operativeScopy);
			opdObg.setStatus("y");
			opdObg.setLastChgDate(date);
			opdObg.setLastChgTime(time);
			opdObg.setLastChgBy(userId);
			// part 2
			opdObg.setDiabetesPersonal(diabetesPersonal);
			opdObg.setDiabetesFamily(diabetesFamily);
			opdObg.setHypertensionPersonal(hypertensionPersonal);
			opdObg.setHypertensionFamily(hypertensionFamily);
			opdObg.setTuberculosisPersonal(tuberculosisPersonal);
			opdObg.setTuberculosisFamily(tuberculosisFamily);
			opdObg.setPulmonaryFamily(pulmonaryFamily);
			opdObg.setPulmonaryPersonal(pulmonaryPersonal);
			opdObg.setAbdominalFamily(abdominalFamily);
			opdObg.setAbdominalPersonal(abdominalPersonal);
			opdObg.setThyroidFamily(thyroidFamily);
			opdObg.setThyroidPersonal(thyroidPersonal);
			opdObg.setOthersFamily(othersFamily);
			opdObg.setOthersPersonal(othersPersonal);
			opdObg.setNormalDelivery(normalDelivery);
			opdObg.setPrematureDeliveryBabyAliveDead(prematureDelivery);
			opdObg.setEctopic(ectopic);
			opdObg.setAAbortion(abortion);
			opdObg.setDyspareunia(dyspareunia);
			opdObg.setAwarenessOfFertilePeriod(awareness);
			opdObg.setTryingToConceiveFor(tryingToConceiveFor);
			opdObg.setFrequencyOfIc(frequencyOfIC);
			opdObg.setGeneralAppearanceHeight(generalApperanceHeight);
			opdObg.setGeneralAppearanceWeight(generalApperanceWidth);
			opdObg.setSecondarySexualCharacters(secondarySexualCharacters);
			opdObg.setNeckLymphGlands(neckLymphGlands);
			opdObg.setThyroid(thyroid);
			opdObg.setCVS(cvs);
			opdObg.setBP(bp);
			opdObg.setPulse(pulse);
			opdObg.setRs(rs);
			opdObg.setCns(cns);

			// part 3
			opdObg.setHairDistribution(hairDistribution);
			opdObg.setBreastDevelopment(breastDevelopment);
			opdObg.setObesity(obesity);
			opdObg.setPigmentationAbdominalStriae(pigmentationAbodominalStriae);
			opdObg.setAcne(acne);
			opdObg.setOthers(othersEndoriceStatus);
			opdObg.setPSClitoris(psClitoris);
			opdObg.setPSLabiaMajopra(psMajopra);
			opdObg.setPSLabiaMinora(psMinora);
			opdObg.setPVClitoris(pvClitoris);
			opdObg.setPVLabiaMajopra(pvMajopra);
			opdObg.setPVLabiaMinora(pvMinora);
			opdObg.setHemoglobin(hemoglobin);
			opdObg.setTlc(tlc);
			opdObg.setDlc(dlc);
			opdObg.setEsr(esr);
			opdObg.setBloodGroupHusband(bloodGroupHusband);
			opdObg.setBloodGroupWife(bloodGroupWife);
			opdObg.setBloodSugarHusband(bloodSugarHusband);
			opdObg.setBloodSugarWife(bloodSugarWife);
			opdObg.setVdrlHusband(vdrlHusband);
			opdObg.setVdrlWife(vdrlWife);
			opdObg.setUrineAnalysis(urineAnalysis);
			opdObg.setSpecification(specification);
			opdObg.setHivHusband(hivHusband);
			opdObg.setHivWife(hivWife);
			opdObg.setHbsagHusband(HbsAgHusband);
			opdObg.setHbsagWife(HbsAgWife);

			// ---- part four
			opdObg.setTFourHusband(tFourHusband);
			opdObg.setTFourWife(tFourWife);
			opdObg.setTThreeHusband(tThreeHusband);
			opdObg.setTThreeWife(tThreeWife);
			opdObg.setTshHusband(TSHHusband);
			opdObg.setTshWife(TSHWife);
			opdObg.setSProlactinHusband(sProlactinHusband);
			opdObg.setSProlactinWife(sProlactinWife);
			opdObg.setDhesHusband(dhesHusband);
			opdObg.setDhesWife(dhesWife);
			opdObg.setTubesL(tubesLeftEndosocopy);
			opdObg.setTubesR(tubesRightEndosocopy);
			opdObg.setTubesLeft(tubesLeft);
			opdObg.setTubesRight(tubesRight);
			opdObg.setOvariesL(overiesLeftEndosocopy);
			opdObg.setOvariesR(overiesRightEndoscopy);
			opdObg.setUterus(uterus);
			opdObg.setUterusHysterosaliagography(uterusHysterosaliagography);
			opdObg.setEndometricalCavity(endometrical);
			opdObg.setCornualOpenings(cornualOpening);
			opdObg.setDating(dating);
			opdObg.setDaysOfCycle(dayOfCycle);
			opdObg.setSecretory(secretory);
			opdObg.setProliferative(proliferative);

			opdObg.setFshHusband(FSHHusband);
			opdObg.setFshWife(FSHWife);

			opdObg.setLhHusband(LHHusband);
			opdObg.setLhWife(LHWife);

			opdObg.setSTestosteroneHusband(sTestosteroneHusband);
			opdObg.setSTestosteroneWife(sTestosteroneWife);

			if (!box.getString(DATE_OBG).equals("")) {
				opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
						.getString(DATE_OBG)));
			}

			opdObg.setPelvisEndosocopy(pelvisEndosocopy);
			opdObg.setPelvisEndosocopyUterus(pelvisEndosocopyUterus);

			opdObg.setEndocrineStatusGalactorrhoea(galaactorrhoeaEndoriceStatus);
			opdObg.setStatus("y");
			opdObg.setLastChgDate(date);
			opdObg.setLastChgTime(time);
			opdObg.setLastChgBy(userId);
			hbt.save(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			departmentId = box.getInt("departmentId");
			masDepartment.setId(departmentId);
			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> updateOBG(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		int hospitalId = 0;
		int obgId = 0;
		visitId = box.getInt(VISIT_ID);
		hinId = box.getInt(HIN_ID);
		obgId = box.getInt(OBG_ID);
		userId = box.getInt("userId");
		departmentId = box.getInt("departmentId");
		occpationHusband = box.getInt(OCCUPATION_HUSBAND);
		occpationWife = box.getInt(OCCUPATION_WIFE);
		religionHusband = box.getInt(RELIGION_HUSBAND);
		religionWife = box.getInt(RELIGION_WIFE);

		hospitalId = box.getInt("hospitalId");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Patient patient = new Patient();
		patient.setId(hinId);

		Visit visit = new Visit();
		visit.setId(visitId);

		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);

		MasOccupation masOccupationHusband = new MasOccupation();
		masOccupationHusband.setId(occpationHusband);

		MasOccupation masOccupationWife = new MasOccupation();
		masOccupationWife.setId(occpationWife);

		MasReligion masReligionHusband = new MasReligion();
		masReligionHusband.setId(religionHusband);

		MasReligion masReligionWife = new MasReligion();
		masReligionWife.setId(religionWife);

		OpdObg opdObg = (OpdObg) getHibernateTemplate()
				.get(OpdObg.class, obgId);
		if (box.getInt(OBG_ID) != 0) {
			opdObg.setId(box.getInt(OBG_ID));
		}
		if (box.getInt("departmentId") != 0) {
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(departmentId);
			opdObg.setDepartment(masDepartment);
		}
		if (box.getInt(HIN_ID) != 0) {
			opdObg.setHin(patient);
		}
		if (box.getInt(VISIT_ID) != 0) {
			opdObg.setVisit(visit);
		}

		if (box.getInt(OCCUPATION_HUSBAND) != 0) {
			opdObg.setOccupationHusband(masOccupationHusband);
		}
		if (box.getInt(OCCUPATION_WIFE) != 0) {
			opdObg.setOccupationWife(masOccupationWife);
		}
		if (box.getInt(RELIGION_HUSBAND) != 0) {
			opdObg.setReligionHusband(masReligionHusband);
		}
		if (box.getInt(RELIGION_WIFE) != 0) {
			opdObg.setReligionWife(masReligionWife);

		}
		if (box.getInt(HOSPITAL_ID) != 0) {
			opdObg.setHospital(masHospital);
		}

		if (!box.getString(EDUCATION_HUSBAND).equals("")) {
			opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
		}
		if (!box.getString(EDUCATION_WIFE).equals("")) {
			opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
		}
		if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
			opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
		}
		if (!box.getString(OPERATIVE_SCOPY).equals("")) {
			opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
		}
		if (!box.getString(EXPLORATORY_LAP).equals("")) {
			opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
		}
		if (!box.getString(TUBAL_SURFERY).equals("")) {
			opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
		}
		if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
			opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
		}
		if (!box.getString(PMP_TWO).equals("")) {
			opdObg.setPmpTwo(box.getString(PMP_TWO));
		}
		if (!box.getString(PMP_ONE).equals("")) {
			opdObg.setPmpOne(box.getString(PMP_ONE));
		}
		if (!box.getString(LMP).equals("")) {
			opdObg.setLmp(box.getString(LMP));
		}
		if (!box.getString(PRESENT_MC).equals("")) {
			opdObg.setPresentMc(box.getString(PRESENT_MC));
		}
		if (!box.getString(PAST_MC).equals("")) {
			opdObg.setPastMc(box.getString(PAST_MC));
		}
		if (!box.getString(MENARCHE_YRS).equals("")) {
			opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
		}
		if (!box.getString(DYSMENORRHOEA).equals("")) {
			opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
		}
		if (!box.getString(PRURITIS_VALUE).equals("")) {
			opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
		}
		if (!box.getString(BACKACHES).equals("")) {
			opdObg.setBackaches(box.getString(BACKACHES));
		}
		if (!box.getString(LEUCORRHOEA).equals("")) {
			opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
		}
		if (!box.getString(HIRSUTISM_YRS).equals("")) {
			opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
		}
		if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
			opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
		}
		if (!box.getString(GALACTORRHOEA).equals("")) {
			opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
		}
		if (!box.getString(PRIVACY).equals("")) {
			opdObg.setPrivacy(box.getString(PRIVACY));
		}
		if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
			opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
		}
		if (!box.getString(OLIGOMEORRHOEA).equals("")) {
			opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
		}
		if (!box.getString(HYPOMENRROHEA).equals("")) {
			opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
		}
		if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
			opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
		}
		if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
			opdObg.setInfertilitySecondaryYrs(box
					.getString(INFERTILITY_SECONDARY_YRS));
		}
		if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
			opdObg.setInfertilityPrimaryYrs(box
					.getString(INFERTILITY_PRIMARY_YRS));
		}

		// part 2
		if (!box.getString(DIABETES_PERSONAL).equals("")) {
			opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
		}
		if (!box.getString(DIABETES_FAMILY).equals("")) {
			opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
		}
		if (!box.getString(CNS).equals("")) {
			opdObg.setCns(box.getString(CNS));
		}
		if (!box.getString(RS).equals("")) {
			opdObg.setRs(box.getString(RS));
		}
		if (box.getInt(PULSE) != 0) {
			opdObg.setPulse(box.getInt(PULSE));
		}
		if (!box.getString(B_P).equals("")) {
			opdObg.setBP(box.getString(B_P));
		}
		if (!box.getString(CVS).equals("")) {
			opdObg.setCVS(box.getString(CVS));
		}
		if (!box.getString(THYROID).equals("")) {
			opdObg.setThyroid(box.getString(THYROID));
		}
		if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
			opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
		}
		if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
			opdObg.setSecondarySexualCharacters(box
					.getString(SECONDARY_SEXUAL_CHARACTERS));
		}
		if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
			opdObg.setGeneralAppearanceWeight(box
					.getInt(GENERNAL_APPERANCE_WIDTH));
		}
		if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
			opdObg.setGeneralAppearanceHeight(box
					.getInt(GENERNAL_APPERANCE_HEIGHT));
		}
		if (!box.getString(FREQUENCY_OF_IC).equals("")) {
			opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
		}
		if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
			opdObg.setTryingToConceiveFor(box
					.getString(TRYING_TO_CONCERIVE_FOR));
		}
		if (!box.getString(AWARENESS).equals("")) {
			opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
		}
		if (!box.getString(DYSPAREUNIA).equals("")) {
			opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
		}
		if (box.getInt(ABORTION) != 0) {
			opdObg.setAAbortion(box.getInt(ABORTION));
		}
		if (!box.getString(ECTOPIC).equals("")) {
			opdObg.setEctopic(box.getString(ECTOPIC));
		}
		if (!box.getString(PREMATURE_DELIVERY).equals("")) {
			opdObg.setPrematureDeliveryBabyAliveDead(box
					.getString(PREMATURE_DELIVERY));
		}
		if (!box.getString(NORMAL_DELIVERY).equals("")) {
			opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
		}
		if (!box.getString(OTHERS_PERSONAL).equals("")) {
			opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
		}
		if (!box.getString(OTHERS_FAMILY).equals("")) {
			opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
		}
		if (!box.getString(THYROID_PERSONAL).equals("")) {
			opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
		}
		if (!box.getString(THYROID_FAMILY).equals("")) {
			opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
		}
		if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
			opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
		}
		if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
			opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
		}
		if (!box.getString(PULMONARY_PERSONAL).equals("")) {
			opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
		}
		if (!box.getString(PULMONARY_FAMILY).equals("")) {
			opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
			opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
			opdObg.setTuberculosisPersonal(box.getString(TUBERCULOSIS_PERSONAL));
		}
		if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
			opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
		}
		if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
			opdObg.setHypertensionPersonal(box.getString(HYPERTENSION_PERSONAL));
		}
		// part 3
		if (!box.getString(HBSAG_WIFE).equals("")) {
			opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
		}
		if (!box.getString(HBSAG_HUSBAND).equals("")) {
			opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
		}
		if (!box.getString(HIV_WIFE).equals("")) {
			opdObg.setHivWife(box.getString(HIV_WIFE));
		}
		if (!box.getString(HIV_HUSBAND).equals("")) {
			opdObg.setHivHusband(box.getString(HIV_HUSBAND));
		}
		if (!box.getString(URINE_ANALYSIS).equals("")) {
			opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
		}
		if (!box.getString(SPECIFICATION).equals("")) {
			opdObg.setSpecification(box.getString(SPECIFICATION));
		}

		if (!box.getString(VDRL_WIFE).equals("")) {
			opdObg.setVdrlWife(box.getString(VDRL_WIFE));
		}
		if (!box.getString(VDRL_HUSBAND).equals("")) {
			opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
		}
		if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
			opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
		}
		if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
			opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
		}
		if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
			opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
		}
		if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
			opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
		}
		if (!box.getString(ESR).equals("")) {
			opdObg.setEsr(box.getString(ESR));
		}
		if (!box.getString(DLC).equals("")) {
			opdObg.setDlc(box.getString(DLC));
		}
		if (!box.getString(TLC).equals("")) {
			opdObg.setTlc(box.getString(TLC));
		}
		if (!box.getString(HEMOGLOBIN).equals("")) {
			opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
		}
		if (!box.getString(P_V_MINORA).equals("")) {
			opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
		}
		if (!box.getString(P_V_MAJOPRA).equals("")) {
			opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
		}
		if (!box.getString(P_V_CLITORIS).equals("")) {
			opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
		}
		if (!box.getString(P_S_MINORA).equals("")) {
			opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
		}
		if (!box.getString(P_S_MAJOPRA).equals("")) {
			opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
		}
		if (!box.getString(P_S_CLITORIS).equals("")) {
			opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
		}
		if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
			opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
		}
		if (!box.getString(ACNE).equals("")) {
			opdObg.setAcne(box.getString(ACNE));
		}
		if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
			opdObg.setPigmentationAbdominalStriae(box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE));
		}
		if (!box.getString(OBESITY).equals("")) {
			opdObg.setObesity(box.getString(OBESITY));
		}
		if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
			opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
		}
		if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
			opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
		}

		// ---- part four
		if (!box.getString(PROLIFERATIVE).equals("")) {
			opdObg.setProliferative(box.getString(PROLIFERATIVE));
		}
		if (!box.getString(SECRETORY).equals("")) {
			opdObg.setSecretory(box.getString(SECRETORY));
		}
		if (box.getInt(DAYS_OF_CYCLE) != 0) {
			opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
		}

		if (!box.getString(DATING).equals("")) {
			opdObg.setDating(box.getString(DATING));
		}
		if (!box.getString(CORNUAL_OPENING).equals("")) {
			opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
		}

		if (!box.getString(ENDOMETRICAL).equals("")) {
			opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
		}

		if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
			opdObg.setUterusHysterosaliagography(box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
		}

		if (!box.getString(UTERUS).equals("")) {
			opdObg.setUterus(box.getString(UTERUS));
		}

		if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_RIGHT).equals("")) {
			opdObg.setTubesRight(box.getString(TUBES_RIGHT));
		}

		if (!box.getString(TUBES_LEFT).equals("")) {
			opdObg.setTubesLeft(box.getString(TUBES_LEFT));
		}

		if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
		}
		if (!box.getString(T_FOUR_HUSBAND).equals("")) {
			opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
		}

		if (!box.getString(T_FOUR_WIFE).equals("")) {
			opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
		}

		if (!box.getString(T_THREE_HUSBAND).equals("")) {
			opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setTThreeWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setDhesWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_HUSBAND).equals("")) {
			opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
		}

		if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
			opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
		}

		if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
			opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
		}

		if (!box.getString(TSH_WIFE).equals("")) {
			opdObg.setTshWife(box.getString(TSH_WIFE));
		}

		if (!box.getString(TSH_HUSBAND).equals("")) {
			opdObg.setTshHusband(box.getString(TSH_HUSBAND));
		}

		if (!box.getString(FSH_HUSBAND).equals("")) {
			opdObg.setFshHusband(box.getString(FSH_HUSBAND));
		}

		if (!box.getString(FSH_WIFE).equals("")) {
			opdObg.setFshWife(box.getString(FSH_WIFE));
		}
		if (!box.getString(LH_HUSBAND).equals("")) {
			opdObg.setLhHusband(box.getString(LH_HUSBAND));
		}

		if (!box.getString(LH_WIFE).equals("")) {
			opdObg.setLhWife(box.getString(LH_WIFE));
		}

		if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
			opdObg.setSTestosteroneHusband(box
					.getString(S_TESTOSTERONE_HUSBAND));
		}

		if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
			opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
		}

		if (!box.getString(DATE_OBG).equals("")) {
			opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DATE_OBG)));
		}

		if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
			opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
		}
		if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
			opdObg.setPelvisEndosocopyUterus(box
					.getString(PELVIS_ENDOSCOPY_UTERUS));
		}

		if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
			opdObg.setEndocrineStatusGalactorrhoea(box
					.getString(GALACTORRHOEA_ENDORICE_STATUS));
		}
		opdObg.setStatus("y");
		opdObg.setLastChgDate(date);
		opdObg.setLastChgTime(time);
		opdObg.setLastChgBy(userId);
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.saveOrUpdate(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addOrUpdateOBGJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int obgId = 0;
		int occpationHusband = 0;
		int occpationWife = 0;
		int religionHusband = 0;
		int religionWife = 0;
		String referredDept = (String) box.get("referredDept").toString();
		visitId = box.getInt(VISIT_ID);
		hinId = box.getInt(HIN_ID);
		obgId = box.getInt(OBG_ID);
		userId = box.getInt("userId");
		departmentId = box.getInt("departmentId");
		occpationHusband = box.getInt(OCCUPATION_HUSBAND);
		occpationWife = box.getInt(OCCUPATION_WIFE);
		religionHusband = box.getInt(RELIGION_HUSBAND);
		religionWife = box.getInt(RELIGION_WIFE);
		hospitalId = box.getInt("hospitalId");
		MasDepartment masDepartment = new MasDepartment();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Patient patient = new Patient();
		patient.setId(hinId);

		Visit visit = new Visit();
		visit.setId(visitId);

		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);

		MasOccupation masOccupationHusband = new MasOccupation();
		masOccupationHusband.setId(occpationHusband);

		MasOccupation masOccupationWife = new MasOccupation();
		masOccupationWife.setId(occpationWife);

		MasReligion masReligionHusband = new MasReligion();
		masReligionHusband.setId(religionHusband);

		MasReligion masReligionWife = new MasReligion();
		masReligionWife.setId(religionWife);

		OpdObg opdObg = (OpdObg) getHibernateTemplate()
				.get(OpdObg.class, obgId);
		if (box.getInt(OBG_ID) != 0) {
			opdObg.setId(box.getInt(OBG_ID));
		}
		if (box.getInt("departmentId") != 0) {
			masDepartment.setId(departmentId);
			opdObg.setDepartment(masDepartment);
		}
		if (box.getInt(HIN_ID) != 0) {
			opdObg.setHin(patient);
		}
		if (box.getInt(VISIT_ID) != 0) {
			opdObg.setVisit(visit);
		}
		if (box.getInt(OCCUPATION_HUSBAND) != 0) {
			opdObg.setOccupationHusband(masOccupationHusband);
		}
		if (box.getInt(OCCUPATION_WIFE) != 0) {
			opdObg.setOccupationWife(masOccupationWife);
		}
		if (box.getInt(RELIGION_HUSBAND) != 0) {
			opdObg.setReligionHusband(masReligionHusband);
		}
		if (box.getInt(RELIGION_WIFE) != 0) {
			opdObg.setReligionWife(masReligionWife);

		}
		if (box.getInt(HOSPITAL_ID) != 0) {
			opdObg.setHospital(masHospital);
		}

		if (!box.getString(EDUCATION_HUSBAND).equals("")) {
			opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
		}
		if (!box.getString(EDUCATION_WIFE).equals("")) {
			opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
		}
		if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
			opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
		}
		if (!box.getString(OPERATIVE_SCOPY).equals("")) {
			opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
		}
		if (!box.getString(EXPLORATORY_LAP).equals("")) {
			opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
		}
		if (!box.getString(TUBAL_SURFERY).equals("")) {
			opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
		}
		if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
			opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
		}
		if (!box.getString(PMP_TWO).equals("")) {
			opdObg.setPmpTwo(box.getString(PMP_TWO));
		}
		if (!box.getString(PMP_ONE).equals("")) {
			opdObg.setPmpOne(box.getString(PMP_ONE));
		}
		if (!box.getString(LMP).equals("")) {
			opdObg.setLmp(box.getString(LMP));
		}
		if (!box.getString(PRESENT_MC).equals("")) {
			opdObg.setPresentMc(box.getString(PRESENT_MC));
		}
		if (!box.getString(PAST_MC).equals("")) {
			opdObg.setPastMc(box.getString(PAST_MC));
		}
		if (!box.getString(MENARCHE_YRS).equals("")) {
			opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
		}
		if (!box.getString(DYSMENORRHOEA).equals("")) {
			opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
		}
		if (!box.getString(PRURITIS_VALUE).equals("")) {
			opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
		}
		if (!box.getString(BACKACHES).equals("")) {
			opdObg.setBackaches(box.getString(BACKACHES));
		}
		if (!box.getString(LEUCORRHOEA).equals("")) {
			opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
		}
		if (!box.getString(HIRSUTISM_YRS).equals("")) {
			opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
		}
		if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
			opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
		}
		if (!box.getString(GALACTORRHOEA).equals("")) {
			opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
		}
		if (!box.getString(PRIVACY).equals("")) {
			opdObg.setPrivacy(box.getString(PRIVACY));
		}
		if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
			opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
		}
		if (!box.getString(OLIGOMEORRHOEA).equals("")) {
			opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
		}
		if (!box.getString(HYPOMENRROHEA).equals("")) {
			opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
		}
		if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
			opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
		}
		if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
			opdObg.setInfertilitySecondaryYrs(box
					.getString(INFERTILITY_SECONDARY_YRS));
		}
		if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
			opdObg.setInfertilityPrimaryYrs(box
					.getString(INFERTILITY_PRIMARY_YRS));
		}

		// part 2
		if (!box.getString(DIABETES_PERSONAL).equals("")) {
			opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
		}
		if (!box.getString(DIABETES_FAMILY).equals("")) {
			opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
		}
		if (!box.getString(CNS).equals("")) {
			opdObg.setCns(box.getString(CNS));
		}
		if (!box.getString(RS).equals("")) {
			opdObg.setRs(box.getString(RS));
		}
		if (box.getInt(PULSE) != 0) {
			opdObg.setPulse(box.getInt(PULSE));
		}
		if (!box.getString(B_P).equals("")) {
			opdObg.setBP(box.getString(B_P));
		}
		if (!box.getString(CVS).equals("")) {
			opdObg.setCVS(box.getString(CVS));
		}
		if (!box.getString(THYROID).equals("")) {
			opdObg.setThyroid(box.getString(THYROID));
		}
		if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
			opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
		}
		if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
			opdObg.setSecondarySexualCharacters(box
					.getString(SECONDARY_SEXUAL_CHARACTERS));
		}
		if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
			opdObg.setGeneralAppearanceWeight(box
					.getInt(GENERNAL_APPERANCE_WIDTH));
		}
		if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
			opdObg.setGeneralAppearanceHeight(box
					.getInt(GENERNAL_APPERANCE_HEIGHT));
		}
		if (!box.getString(FREQUENCY_OF_IC).equals("")) {
			opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
		}
		if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
			opdObg.setTryingToConceiveFor(box
					.getString(TRYING_TO_CONCERIVE_FOR));
		}
		if (!box.getString(AWARENESS).equals("")) {
			opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
		}
		if (!box.getString(DYSPAREUNIA).equals("")) {
			opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
		}
		if (box.getInt(ABORTION) != 0) {
			opdObg.setAAbortion(box.getInt(ABORTION));
		}
		if (!box.getString(ECTOPIC).equals("")) {
			opdObg.setEctopic(box.getString(ECTOPIC));
		}
		if (!box.getString(PREMATURE_DELIVERY).equals("")) {
			opdObg.setPrematureDeliveryBabyAliveDead(box
					.getString(PREMATURE_DELIVERY));
		}
		if (!box.getString(NORMAL_DELIVERY).equals("")) {
			opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
		}
		if (!box.getString(OTHERS_PERSONAL).equals("")) {
			opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
		}
		if (!box.getString(OTHERS_FAMILY).equals("")) {
			opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
		}
		if (!box.getString(THYROID_PERSONAL).equals("")) {
			opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
		}
		if (!box.getString(THYROID_FAMILY).equals("")) {
			opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
		}
		if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
			opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
		}
		if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
			opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
		}
		if (!box.getString(PULMONARY_PERSONAL).equals("")) {
			opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
		}
		if (!box.getString(PULMONARY_FAMILY).equals("")) {
			opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
			opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
		}
		if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
			opdObg.setTuberculosisPersonal(box.getString(TUBERCULOSIS_PERSONAL));
		}
		if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
			opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
		}
		if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
			opdObg.setHypertensionPersonal(box.getString(HYPERTENSION_PERSONAL));
		}
		// part 3
		if (!box.getString(HBSAG_WIFE).equals("")) {
			opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
		}
		if (!box.getString(HBSAG_HUSBAND).equals("")) {
			opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
		}
		if (!box.getString(HIV_WIFE).equals("")) {
			opdObg.setHivWife(box.getString(HIV_WIFE));
		}
		if (!box.getString(HIV_HUSBAND).equals("")) {
			opdObg.setHivHusband(box.getString(HIV_HUSBAND));
		}
		if (!box.getString(URINE_ANALYSIS).equals("")) {
			opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
		}
		if (!box.getString(SPECIFICATION).equals("")) {
			opdObg.setSpecification(box.getString(SPECIFICATION));
		}
		if (!box.getString(VDRL_WIFE).equals("")) {
			opdObg.setVdrlWife(box.getString(VDRL_WIFE));
		}
		if (!box.getString(VDRL_HUSBAND).equals("")) {
			opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
		}
		if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
			opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
		}
		if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
			opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
		}
		if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
			opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
		}
		if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
			opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
		}
		if (!box.getString(ESR).equals("")) {
			opdObg.setEsr(box.getString(ESR));
		}
		if (!box.getString(DLC).equals("")) {
			opdObg.setDlc(box.getString(DLC));
		}
		if (!box.getString(TLC).equals("")) {
			opdObg.setTlc(box.getString(TLC));
		}
		if (!box.getString(HEMOGLOBIN).equals("")) {
			opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
		}
		if (!box.getString(P_V_MINORA).equals("")) {
			opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
		}
		if (!box.getString(P_V_MAJOPRA).equals("")) {
			opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
		}
		if (!box.getString(P_V_CLITORIS).equals("")) {
			opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
		}
		if (!box.getString(P_S_MINORA).equals("")) {
			opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
		}
		if (!box.getString(P_S_MAJOPRA).equals("")) {
			opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
		}
		if (!box.getString(P_S_CLITORIS).equals("")) {
			opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
		}
		if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
			opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
		}
		if (!box.getString(ACNE).equals("")) {
			opdObg.setAcne(box.getString(ACNE));
		}
		if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
			opdObg.setPigmentationAbdominalStriae(box
					.getString(PIGMENTATION_ABODOMINAL_STRIAE));
		}
		if (!box.getString(OBESITY).equals("")) {
			opdObg.setObesity(box.getString(OBESITY));
		}
		if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
			opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
		}
		if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
			opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
		}

		// ---- part four
		if (!box.getString(PROLIFERATIVE).equals("")) {
			opdObg.setProliferative(box.getString(PROLIFERATIVE));
		}
		if (!box.getString(SECRETORY).equals("")) {
			opdObg.setSecretory(box.getString(SECRETORY));
		}
		if (box.getInt(DAYS_OF_CYCLE) != 0) {
			opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
		}

		if (!box.getString(DATING).equals("")) {
			opdObg.setDating(box.getString(DATING));
		}
		if (!box.getString(CORNUAL_OPENING).equals("")) {
			opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
		}

		if (!box.getString(ENDOMETRICAL).equals("")) {
			opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
		}

		if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
			opdObg.setUterusHysterosaliagography(box
					.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
		}

		if (!box.getString(UTERUS).equals("")) {
			opdObg.setUterus(box.getString(UTERUS));
		}

		if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_RIGHT).equals("")) {
			opdObg.setTubesRight(box.getString(TUBES_RIGHT));
		}

		if (!box.getString(TUBES_LEFT).equals("")) {
			opdObg.setTubesLeft(box.getString(TUBES_LEFT));
		}

		if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
			opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
		}

		if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
			opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
		}
		if (!box.getString(T_FOUR_HUSBAND).equals("")) {
			opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
		}

		if (!box.getString(T_FOUR_WIFE).equals("")) {
			opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
		}

		if (!box.getString(T_THREE_HUSBAND).equals("")) {
			opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setTThreeWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_WIFE).equals("")) {
			opdObg.setDhesWife(box.getString(DHES_WIFE));
		}

		if (!box.getString(DHES_HUSBAND).equals("")) {
			opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
		}

		if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
			opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
		}

		if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
			opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
		}

		if (!box.getString(TSH_WIFE).equals("")) {
			opdObg.setTshWife(box.getString(TSH_WIFE));
		}

		if (!box.getString(TSH_HUSBAND).equals("")) {
			opdObg.setTshHusband(box.getString(TSH_HUSBAND));
		}

		if (!box.getString(FSH_HUSBAND).equals("")) {
			opdObg.setFshHusband(box.getString(FSH_HUSBAND));
		}

		if (!box.getString(FSH_WIFE).equals("")) {
			opdObg.setFshWife(box.getString(FSH_WIFE));
		}
		if (!box.getString(LH_HUSBAND).equals("")) {
			opdObg.setLhHusband(box.getString(LH_HUSBAND));
		}

		if (!box.getString(LH_WIFE).equals("")) {
			opdObg.setLhWife(box.getString(LH_WIFE));
		}

		if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
			opdObg.setSTestosteroneHusband(box
					.getString(S_TESTOSTERONE_HUSBAND));
		}

		if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
			opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
		}

		if (!box.getString(DATE_OBG).equals("")) {
			opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DATE_OBG)));
		}

		if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
			opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
		}
		if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
			opdObg.setPelvisEndosocopyUterus(box
					.getString(PELVIS_ENDOSCOPY_UTERUS));
		}

		if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
			opdObg.setEndocrineStatusGalactorrhoea(box
					.getString(GALACTORRHOEA_ENDORICE_STATUS));
		}
		opdObg.setStatus("y");
		opdObg.setLastChgDate(date);
		opdObg.setLastChgTime(time);
		opdObg.setLastChgBy(userId);

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.saveOrUpdate(opdObg);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			departmentId = box.getInt("departmentId");
			masDepartment.setId(departmentId);
			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showENTJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	public Map<String, Object> addEnt(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String otorrhora = "";
		String hearingLoss = "";
		String otalgia = "";
		String sneezing = "";
		String epistaxis = "";
		String facialPain = "";
		String odynophagia = "";
		String hoarseness = "";
		String othersEnt = "";
		String dysphagia = "";
		String rhinorrhoea = "";

		String tftLeAbc = "";

		String tftReAbc = "";
		String tftLeWeber = "";
		String tftReWeber = "";
		String tftLeTenTwoFour = "";
		String tftReTenTwoFour = "";
		String tftLeFiveOneTwo = "";
		String tftReFiveOneTwo = "";
		String tftLeTwoFiveSix = "";
		String tftReTwoFiveSix = "";
		int ffhLeCv = 0;
		int ffhReCv = 0;
		int ffhLeFw = 0;
		int ffhReFw = 0;
		int ptaLeAbGap = 0;
		int ptaReAbGap = 0;
		int ptaLeBc = 0;
		int ptaReBc = 0;
		int ptaReAc = 0;
		int ptaLeAc = 0;
		String impedenceAudiometryEarRe = "";
		String impedenceAudiometryEarLe = "";
		String postRhinoscopyRe = "";
		String postRhinoscopyLe = "";
		String oralCavity = "";
		String oroPharynx = "";
		String idlThroat = "";
		String antRhinoscopyRe = "";
		String antRhinoscopyLe = "";
		String externalNasalFrameworkRe = "";
		String externalNasalFrameworkLe = "";
		String noCerebellarSign = "";
		String noSpontaneousRe = "";
		String noSpontaneousLe = "";
		String rombergRe = "";
		String rombergLe = "";
		String fistualtestRe = "";
		String fistualtestLe = "";
		String generalExamination = "";
		String prePostRe = "";
		String prePostLe = "";
		String eacRe = "";
		String eacLe = "";
		String tmRe = "";
		String tmLe = "";
		String surgery = "";
		String postOp = "";
		String advice = "";
		String neck = "";
		String nasalObstructions = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		MasDepartment masDepartment = new MasDepartment();
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			userId = box.getInt("userId");
			departmentId = box.getInt("departmentId");
			hospitalId = box.getInt("hospitalId");

			otorrhora = box.getString(OTORRHOEA);
			sneezing = box.getString(SNEEZING);
			epistaxis = box.getString(EPISTAXIS);
			facialPain = box.getString(FACIAL_PAIN);
			odynophagia = box.getString(ODYNOPHAGIA);
			hoarseness = box.getString(HOARSENESS);
			othersEnt = box.getString(OTHERS_ENT);
			dysphagia = box.getString(DYSPHAGIA);
			rhinorrhoea = box.getString(RHINORRHOEA);
			hearingLoss = box.getString(HEARING_LOSS);
			otalgia = box.getString(OTALGIA);
			tftReAbc = box.getString(ABC_RE);
			tftLeAbc = box.getString(ABC_LE);
			tftLeWeber = box.getString(TFT_LE_WEDER);
			tftReWeber = box.getString(TFT_RE_WEDER);
			tftLeTenTwoFour = box.getString(TFT_LE_TEN_TWO_FOUR);
			tftReTenTwoFour = box.getString(TFT_RE_TEN_TWO_FOUR);
			tftLeFiveOneTwo = box.getString(TFT_LE_FIVE_ONE_TWO);
			tftReFiveOneTwo = box.getString(TFT_RE_FIVE_ONE_TWO);
			tftLeTwoFiveSix = box.getString(TFT_LE_TWO_FIVE_SIX);
			tftReTwoFiveSix = box.getString(TFT_RE_TWO_FIVE_SIX);
			ffhLeCv = box.getInt(FFH_CV_LE);
			ffhReCv = box.getInt(FFH_CV_RE);
			ffhLeFw = box.getInt(FFH_FW_LE);
			ffhReFw = box.getInt(FFH_FW_RE);
			ptaLeAbGap = box.getInt(PTA_AB_GAP_LE);
			ptaReAbGap = box.getInt(PTA_AB_GAP_RE);
			ptaLeBc = box.getInt(PTA_BC_LE);
			ptaReBc = box.getInt(PTA_BC_RE);
			ptaReAc = box.getInt(PTA_AC_RE);
			ptaLeAc = box.getInt(PTA_AC_LE);
			impedenceAudiometryEarRe = box.getString(IMPLEDANCE_AUDIOMEETRY_RE);
			impedenceAudiometryEarLe = box.getString(IMPLEDANCE_AUDIOMEETRY_LE);
			postRhinoscopyRe = box.getString(POST_RHINOSCOPY_RE);
			postRhinoscopyLe = box.getString(POST_RHINOSCOPY_LE);
			oralCavity = box.getString(ORAL_CAVITY);
			oroPharynx = box.getString(ORAL_PHATYNX);
			idlThroat = box.getString(IDL);
			antRhinoscopyRe = box.getString(ANT_RHINOSCOPY_RE);
			antRhinoscopyLe = box.getString(ANT_RHINOSCOPY_LE);
			externalNasalFrameworkRe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_RE);
			externalNasalFrameworkLe = box
					.getString(EXTERNAL_NASAL_FRAMEWORK_LE);
			noCerebellarSign = box.getString(NO_CEREBELLAR);
			noSpontaneousRe = box.getString(NO_SPONTSNEOUS_RE);
			noSpontaneousLe = box.getString(NO_SPONTSNEOUS_LE);
			rombergRe = box.getString(ROMBERG_RE);
			rombergLe = box.getString(ROMBERG_LE);
			fistualtestLe = box.getString(FISTULA_LE);
			fistualtestRe = box.getString(FISTULA_RE);
			generalExamination = box.getString(GENERAL_EXAMINATION);
			prePostRe = box.getString(PRE_POST_RE);
			prePostLe = box.getString(PRE_POST_LE);
			eacRe = box.getString(EAC_RE);
			eacLe = box.getString(EAC_LE);
			tmRe = box.getString(TM_RE);
			tmLe = box.getString(TM_LE);
			surgery = box.getString(SURGERY);
			postOp = box.getString(POST_OP);
			advice = box.getString(ADVICE);
			neck = box.getString(NECK);
			nasalObstructions = box.getString(NASAL_OBSTRUCTIONS);
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdEnt opdEnt = new OpdEnt();

			opdEnt.setDepartment(masDepartment);
			opdEnt.setHin(patient);
			opdEnt.setVisit(visit);
			opdEnt.setHospital(masHospital);

			opdEnt.setAdvice(advice);
			opdEnt.setNeck(neck);
			opdEnt.setDysphagia(dysphagia);
			opdEnt.setEpistaxis(epistaxis);
			opdEnt.setFacialPain(facialPain);
			opdEnt.setHearingLoss(hearingLoss);
			opdEnt.setHoarseness(hoarseness);
			opdEnt.setNasalObstructions(nasalObstructions);
			opdEnt.setOdynophagia(odynophagia);
			opdEnt.setOtalgia(otalgia);
			opdEnt.setPostOp(postOp);
			opdEnt.setOtorrhora(otorrhora);
			opdEnt.setOthersEnt(othersEnt);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setSneezing(sneezing);
			opdEnt.setSurgery(surgery);
			opdEnt.setAntRhinoscopyLe(antRhinoscopyLe);
			opdEnt.setAntRhinoscopyRe(antRhinoscopyRe);
			opdEnt.setEacLe(eacLe);
			opdEnt.setEacRe(eacRe);
			opdEnt.setExternalNasalFrameworkLe(externalNasalFrameworkLe);
			opdEnt.setExternalNasalFrameworkRe(externalNasalFrameworkRe);
			opdEnt.setFfhLeCv(ffhLeCv);
			opdEnt.setFfhLeFw(ffhLeFw);
			opdEnt.setFfhReFw(ffhReFw);
			opdEnt.setFfhReCv(ffhReCv);
			opdEnt.setFistualtestLe(fistualtestLe);
			opdEnt.setFistualtestRe(fistualtestRe);
			opdEnt.setGeneralExamination(generalExamination);
			opdEnt.setIdlThroat(idlThroat);
			opdEnt.setImpedenceAudiometryEarLe(impedenceAudiometryEarLe);
			opdEnt.setImpedenceAudiometryEarRe(impedenceAudiometryEarRe);
			opdEnt.setNoCerebellarSign(noCerebellarSign);
			opdEnt.setNoSpontaneousLe(noSpontaneousLe);
			opdEnt.setNoSpontaneousRe(noSpontaneousRe);
			opdEnt.setOralCavity(oralCavity);
			opdEnt.setOroPharynx(oroPharynx);
			opdEnt.setPostOp(postOp);
			opdEnt.setPostRhinoscopyLe(postRhinoscopyLe);
			opdEnt.setPostRhinoscopyRe(postRhinoscopyRe);
			opdEnt.setPrePostLe(prePostLe);
			opdEnt.setPrePostRe(prePostRe);
			opdEnt.setPtaLeAbGap(ptaLeAbGap);
			opdEnt.setPtaLeAc(ptaLeAc);
			opdEnt.setPtaReAc(ptaReAc);
			opdEnt.setPtaLeBc(ptaLeBc);
			opdEnt.setPtaReAbGap(ptaReAbGap);
			opdEnt.setPtaReBc(ptaReBc);
			opdEnt.setRhinorrhoea(rhinorrhoea);
			opdEnt.setRombergLe(rombergLe);
			opdEnt.setRombergRe(rombergRe);
			opdEnt.setTftLeAbc(tftLeAbc);
			opdEnt.setTftLeFiveOneTwo(tftLeFiveOneTwo);
			opdEnt.setTftLeTenTwoFour(tftLeTenTwoFour);
			opdEnt.setTftLeTwoFiveSex(tftLeTwoFiveSix);
			opdEnt.setTftLeWeber(tftLeWeber);
			opdEnt.setTftReAbc(tftReAbc);
			opdEnt.setTftReFiveOneTwo(tftReFiveOneTwo);
			opdEnt.setTftReTenTwoFour(tftReTenTwoFour);
			opdEnt.setTftReTwoFiveSex(tftReTwoFiveSix);
			opdEnt.setTftReWeber(tftReWeber);
			opdEnt.setTmLe(tmLe);
			opdEnt.setTmRe(tmRe);

			opdEnt.setStatus("y");
			opdEnt.setLastChgDate(date);
			opdEnt.setLastChgTime(time);
			opdEnt.setLastChgBy(userId);

			hbt.save(opdEnt);

			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			
			departmentId = box.getInt("departmentId");
			masDepartment.setId(departmentId);
			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);

			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewEnt(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdEnt> entList = new ArrayList<OpdEnt>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				entList = session.createCriteria(OpdEnt.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("entList", entList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGONE(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				obgList = session.createCriteria(OpdObg.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGTWO(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				obgList = session.createCriteria(OpdObg.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGTHREE(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				obgList = session.createCriteria(OpdObg.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewOBGFOUR(Map<String, Object> parameterMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdObg> obgList = new ArrayList<OpdObg>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();

		try {
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}
			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				obgList = session.createCriteria(OpdObg.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("obgList", obgList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ......................................Report...................................

	@SuppressWarnings("unchecked")
	public List<Object> getHinNoList(String visitId) {
		Session session = (Session) getSession();
		List<Object> patientList = new ArrayList<Object>();

		try {

			patientList = session
					.createCriteria(Patient.class)
					.add(Restrictions.eq("Visits.Id", Integer.parseInt(visitId)))
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return patientList;
	}

	@SuppressWarnings("unchecked")
	public List<Object> getVisitNoList(Map<String, Object> detailsMap) {
		@SuppressWarnings("unchecked")
		Session session = (Session) getSession();
		// String serviceNo = "";
		String hinNo = "";
		/*
		 * if(detailsMap.get("serviceNo") != null){ serviceNo =
		 * (String)detailsMap.get("serviceNo"); }
		 */
		if (detailsMap.get("hinNo") != null) {
			hinNo = (String) detailsMap.get("hinNo");
		}
		List<Object> vistList = new ArrayList<Object>();

		try {
			/*
			 * if(!serviceNo.equals("")){ Criteria crit =
			 * session.createCriteria(Visit.class).createAlias("Hin",
			 * "p").add(Restrictions.eq("p.ServiceNo", serviceNo));
			 * vistList=crit.list(); //vistList =
			 * getHibernateTemplate().find("from Visit v join v.Hin as p where
			 * p.ServiceNo = '"+serviceNo+"'"); }
			 */
			if (!hinNo.equals("")) {
				Criteria crit = session.createCriteria(Visit.class)
						.createAlias("Hin", "p")
						.add(Restrictions.eq("p.HinNo", hinNo));
				vistList = crit.list();
				// vistList = getHibernateTemplate().find("from Visit v join
				// v.Hin as p where p.HinNo = '"+hinNo+"'");
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return vistList;

	}

	@SuppressWarnings("deprecation")
	public Map<String, Object> getConnectionForReport() {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Connection con = session.connection();
		map.put("conn", con);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyDepartmentWiseReportJsp(Map<String,Object> map) {

		//Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		//List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		try {
			//Commented by Arbind on 27-02-2017
			/*searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");*/
			//Added by Arbind on 27-02-2017
			int hospitalId = (Integer) map.get("hospitalId");
			searchMasDepartmentList = session.createCriteria(MasInstituteDepartment.class)
			.setProjection(Projections.property("Department"))
			.add(Restrictions.eq("Institute.Id",hospitalId))
			.add(Restrictions.eq("Status","y").ignoreCase())
			.createAlias("Department", "dep")
			.createAlias("dep.DepartmentType","DepartmentType")
			.add(Restrictions.eq("DepartmentType.Id",1))
			.add(Restrictions.eq("dep.VisitApplicable","y").ignoreCase())
			.addOrder(Order.asc("dep.DepartmentName"))
			.list();
			/*searchMasEmployeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as emp where emp.EmpCategory.Id='1'");*/

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		//map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDInvestigationsReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int i = 1;
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		try {

			searchMasDepartmentList = session.createCriteria(
					MasDepartment.class).list();
			searchMasEmployeeList = session.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "emp")
					.add(Restrictions.eq("emp.Id", i)).list();

			// searchMasDepartmentList = getHibernateTemplate().find(
			// "from jkt.hms.masters.business.MasDepartment");
			// searchMasEmployeeList = getHibernateTemplate()
			// .find("from jkt.hms.masters.business.MasEmployee as emp where emp.EmpCategory.Id='1'");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasEmployeeList", searchMasEmployeeList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDPrescriptionsReportJsp(Map<String, Object> map) {
		//Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		//List<MasEmployee> searchMasEmployeeList = new ArrayList<MasEmployee>();
		List<Object[]> empSCMappingStringList = new ArrayList<Object[]>();

		Session session = (Session) getSession();
		 URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
	        Properties prop = new Properties();
	        
	        try {
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
			} catch (Exception e1) {
				
				e1.printStackTrace();
			} 
	       int  empcategoryId =Integer.parseInt(prop.getProperty("empcategoryId"));
		try {
			//Commented by Arbind on 27-02-2017
			/*searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");*/
			//Added by Arbind on 27-02-2017
			int hospitalId = (Integer) map.get("hospitalId");
			int deptId=(Integer)map.get("deptId");
			
			// Commented by dhananjay 16-Mar-17 
			
			searchMasDepartmentList = session.createCriteria(MasInstituteDepartment.class)
			.setProjection(Projections.property("Department"))
			.add(Restrictions.eq("Institute.Id",hospitalId))
			.add(Restrictions.eq("Status","y").ignoreCase())
			.createAlias("Department", "dep")
			.createAlias("dep.DepartmentType","DepartmentType")
			.add(Restrictions.eq("DepartmentType.Id",1))
			.add(Restrictions.eq("dep.VisitApplicable","y").ignoreCase())
			.addOrder(Order.asc("dep.DepartmentName"))
			.list();
			/*searchMasEmployeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as emp where emp.EmpCategory.Id='1' and emp.Hospital='"+hospitalId+"'");
*/

			empSCMappingStringList = session.createCriteria(EmpScMapping.class)
					.createAlias("Employee", "i").createAlias("i.EmpCategory", "empCategory")
					.createAlias("Hospital", "hospital")
					.createAlias("Department", "dept")
					.add(Restrictions.eq("dept.Id",deptId))
					.add(Restrictions.eq("empCategory.Id",empcategoryId))
					.addOrder(Order.asc("i.EmployeeName"))
					.add(Restrictions.eq("hospital.Id", hospitalId))
						.setProjection(Projections.projectionList().add(Projections.property("i.Id")).add(Projections.property("Id"))
								.add(Projections.property("i.EmployeeName")).add(Projections.property("dept.Id"))).list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("searchMasDepartmentList", searchMasDepartmentList);
		//map.put("searchMasEmployeeList", searchMasEmployeeList);
		map.put("empSCMappingStringList", empSCMappingStringList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDailyOPDRankCategoryReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<MasRankCategory> searchMasRankList = new ArrayList<MasRankCategory>();
		try {
			searchMasDepartmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			searchMasRankList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasRankCategory ");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasDepartmentList", searchMasDepartmentList);
		map.put("searchMasRankList", searchMasRankList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> viewPatientAllergicDrug(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<PatientAllergicDrugsHd> searchPatientAllergicDrugsHdList = new ArrayList<PatientAllergicDrugsHd>();
		List<PatientAllergicDrugsDt> searchPatientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			// code commented by shailesh
			// if(flag.equals("prev")){
			// visitNoForView = visitNo-1;
			// }else if(flag.equals("next")){
			// visitNoForView = visitNo+1;
			// }else{
			// visitNoForView = visitNo;
			// }
			// if(visitNoForView != 0){
			// visitList =
			// session.createCriteria(Visit.class).add(Restrictions.eq("VisitNo",
			// visitNoForView)).createAlias("Hin",
			// "hin").add(Restrictions.eq("hin.Id", hinId)).list();
			// }
			//
			// if(visitList.size() > 0){
			// visit = visitList.get(0);
			// int visitId = visit.getId();
			// detailsMap = getPatientDetails(visitId);
			// searchPatientAllergicDrugsHdList =
			// session.createCriteria(PatientAllergicDrugsHd.class).createAlias("Visit",
			// "visit").add(Restrictions.eq("visit.Id", visitId)).list();
			// if(searchPatientAllergicDrugsHdList.size() > 0)
			// {
			// PatientAllergicDrugsHd
			// patientAllergicDrugsHd=(PatientAllergicDrugsHd)searchPatientAllergicDrugsHdList.get(0);
			// int id=patientAllergicDrugsHd.getId();
			// searchPatientAllergicDrugsDtList=session.createCriteria(PatientAllergicDrugsDt.class).createAlias("PatientAllergicDrugsHd",
			// "patientAllergicDrugsHd").add(Restrictions.eq("patientAllergicDrugsHd.Id",
			// id)).list();
			// }
			searchPatientAllergicDrugsDtList = session
					.createCriteria(PatientAllergicDrugsDt.class)
					.createAlias("PatientAllergicDrugsHd", "hd")

					.add(Restrictions.eq("hd.Hin.Id", hinId)).list();
			map.put("searchPatientAllergicDrugsHdList",
					searchPatientAllergicDrugsHdList);
			map.put("searchPatientAllergicDrugsDtList",
					searchPatientAllergicDrugsDtList);
			map.put("detailsMap", detailsMap);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ---------------------------------- Cardiology Department Details
	// ------------------------------------

	public boolean addCardiologyDepartmentDetails(Map<String, Object> infoMap) {
		OpdCardiologyDepartmentDetails cardiologyDepartmentDetails = new OpdCardiologyDepartmentDetails();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("cardiologyDepartmentDetails") != null) {
			cardiologyDepartmentDetails = (OpdCardiologyDepartmentDetails) infoMap
					.get("cardiologyDepartmentDetails");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment  referredDepartment = (MasDepartment) infoMap.get("referredDepartment");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(cardiologyDepartmentDetails);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			
			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getCardiologyDepartmentDetails(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewCardiologyDepartmentDetails(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdCardiologyDepartmentDetails> opdCardiologyDepartmentDetailsList = new ArrayList<OpdCardiologyDepartmentDetails>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdCardiologyDepartmentDetailsList = session
						.createCriteria(OpdCardiologyDepartmentDetails.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdCardiologyDepartmentDetailsList",
						opdCardiologyDepartmentDetailsList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// -------------------------------- Gastro-Enterology
	// Endoscopy----------------------------

	public boolean addGastroEnterologyEndoscopy(Map<String, Object> infoMap) {
		OpdGastroEnterologyEndoscopy gastroEnterologyEndoscopy = new OpdGastroEnterologyEndoscopy();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gastroEnterologyEndoscopy") != null) {
			gastroEnterologyEndoscopy = (OpdGastroEnterologyEndoscopy) infoMap
					.get("gastroEnterologyEndoscopy");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gastroEnterologyEndoscopy);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getGastroEnterologyEndoscopy(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Integer> gastroEnterologyEndoscopyList = new ArrayList<Integer>();
		Map<String, Object> map = new HashMap<String, Object>();
		int maxNo = 0;
		String repNo = "";
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			gastroEnterologyEndoscopyList = getHibernateTemplate()
					.find("select max(odee.Id) from jkt.hms.masters.business.OpdGastroEnterologyEndoscopy as odee");
			if (gastroEnterologyEndoscopyList.get(0) != null) {
				maxNo = gastroEnterologyEndoscopyList.get(0);
				repNo = String.valueOf(maxNo + 1);
			} else {
				repNo = String.valueOf(1);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("reportNo", repNo);
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewGastroEnterologyEndoscopy(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int hinId = 0;
		int visitNo = 0;
		int max = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGastroEnterologyEndoscopy> opdGastroEnterologyEndoscopyList = new ArrayList<OpdGastroEnterologyEndoscopy>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdGastroEnterologyEndoscopyList = session
						.createCriteria(OpdGastroEnterologyEndoscopy.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGastroEnterologyEndoscopyList",
						opdGastroEnterologyEndoscopyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// -------------------------------- Gastro-Enterology
	// Colonoscopy----------------------------

	public boolean addGastroEnterologyColonoscopy(Map<String, Object> infoMap) {
		OpdGastroEnterologyColonoscopy gastroEnterologyColonoscopy = new OpdGastroEnterologyColonoscopy();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gastroEnterologyColonoscopy") != null) {
			gastroEnterologyColonoscopy = (OpdGastroEnterologyColonoscopy) infoMap
					.get("gastroEnterologyColonoscopy");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment  referredDepartment=(MasDepartment) infoMap.get("referredDepartment");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gastroEnterologyColonoscopy);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getGastroEnterologyColonoscopy(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Integer> gastroEnterologyColonoscopyList = new ArrayList<Integer>();
		Map<String, Object> map = new HashMap<String, Object>();
		int maxNo = 0;
		String repNo = "";
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as emp where emp.Status='y' and emp.EmpCategory.Id='1'");
			gastroEnterologyColonoscopyList = getHibernateTemplate()
					.find("select max(odee.Id) from jkt.hms.masters.business.OpdGastroEnterologyColonoscopy as odee");
			if (gastroEnterologyColonoscopyList.get(0) != null) {
				maxNo = gastroEnterologyColonoscopyList.get(0);
				repNo = String.valueOf(maxNo + 1);
			} else {
				repNo = String.valueOf(1);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("reportNo", repNo);
		map.put("employeeList", employeeList);
		map.put("patientDataList", patientDataList);
		return map;
	}

	public Map<String, Object> viewGastroEnterologyColonoscopy(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGastroEnterologyColonoscopy> opdGastroEnterologyColonoscopyList = new ArrayList<OpdGastroEnterologyColonoscopy>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdGastroEnterologyColonoscopyList = session
						.createCriteria(OpdGastroEnterologyColonoscopy.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGastroEnterologyColonoscopyList",
						opdGastroEnterologyColonoscopyList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean addAntenatalCard(Map<String, Object> infoMap) {
		OpdAntenatalCard antenatalCard = new OpdAntenatalCard();
		List<OpdAntenatalCardTrimester> antCardTrimeList=new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntcardMenstrualHistry> menstrHistList=new ArrayList<OpdAntcardMenstrualHistry>();
		boolean successfullyAdded = false;
		int visitId = 0,hinId=0,userId=0,exist=0,antCardId=0,AntCount=0,SomeField=0,count=0;
		int hospitalId = 0;
		String time=null,date=null, referredDept,usgDetails="";
		Date tetanusOnestDoseDate = null, tetanusTwondDoseDate=null; // added by amit das on 08-08-2016
		MasDepartment referredDepartment=null;
		PhAlert alert = null; // added by amit das on 08-08-2016
		MasHospital hospital = null; // added by amit das on 08-08-2016
		Patient patient = null; // added by amit das on 08-08-2016
		Long lstBy=null;
		if (infoMap.get("antenatalCard") != null) {
			antenatalCard = (OpdAntenatalCard) infoMap.get("antenatalCard");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		//govind code 
		if (infoMap.get("referredDept") != null) {
		    referredDept = (String) infoMap.get("referredDept").toString();
		}
		if (infoMap.get("referredDepartment") != null) {
	         referredDepartment = (MasDepartment) infoMap.get("referredDepartment");
		}
		//govind code end
		if (infoMap.get("antCardTrimeList") != null) {
			antCardTrimeList = (List<OpdAntenatalCardTrimester>) infoMap.get("antCardTrimeList");
		}
		
		if (infoMap.get("menstrHistList") != null) {
			menstrHistList = (List<OpdAntcardMenstrualHistry>) infoMap.get("menstrHistList");
		}
		
		if (infoMap.get("hinId") != null) {
			hinId = (Integer) infoMap.get("hinId");
		}
		if (infoMap.get("userId") != null) {
			userId = (Integer) infoMap.get("userId");
			String st=""+userId;
			lstBy=Long.parseLong(st);
			
		}
		if (infoMap.get("time") != null) {
			time = (String) infoMap.get("time");
		}
		if (infoMap.get("date") != null) {
			date = (String) infoMap.get("date");
		}
//govind code
		
		// added by amit das on 08-08-2016
		if(infoMap.get("tetanusOnestDoseDate")!=null)
			tetanusOnestDoseDate = (Date)infoMap.get("tetanusOnestDoseDate");
		
		// added by amit das on 08-08-2016
		if(infoMap.get("tetanusOnestDoseDate")!=null)
			tetanusTwondDoseDate = (Date)infoMap.get("tetanusTwondDoseDate");
		
		// added by amit das on 08-08-2016
		if(infoMap.get("patient")!=null)
			patient = (Patient)infoMap.get("patient");
				
		// added by amit das on 08-08-2016
		if(infoMap.get("masHospital")!=null)
			hospital = (MasHospital)infoMap.get("masHospital");	
		
	
	    exist = (Integer)infoMap.get("exist");
	
	    if (infoMap.get("AntCount") != null
				&& (!infoMap.get("AntCount").equals(""))) {
			AntCount = (Integer)infoMap.get("AntCount");
		}
	    if (infoMap.get("count") != null
				&& (!infoMap.get("count").equals(""))) {
			count = (Integer)infoMap.get("count");
		}
		
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
				
			if(count==1){				
			   hbt.save(antenatalCard);
			   antCardId=antenatalCard.getId();
			   
			   // added by amit das on 08-08-2016
			   if(patient!=null){
			    alert = new PhAlert();
			   	alert.setHin(patient);
			   	alert.setHospital(hospital);
			   	alert.setAlertType("ANC");
			   	alert.setMember(patient.getMember());
			   	alert.setTt1(tetanusOnestDoseDate);
			   	alert.setTt2(tetanusTwondDoseDate);
			   	hbt.save(alert);
			   }
			   
			}else{
				if (infoMap.get("antCardId") != null) {
					antCardId = (Integer) infoMap.get("antCardId");
				}
				
			}
			//if(exist==1){
				if (infoMap.get("usgDeatil") != null && !infoMap.get("usgDeatil").equals("")) {
					usgDetails = (String) infoMap.get("usgDeatil");
				
				org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
				hbt1.setFlushModeName("FLUSH_EAGER");
				hbt1.setCheckWriteOperations(false);
				OpdAntenatalCard op = (OpdAntenatalCard) hbt1.load(OpdAntenatalCard.class, antCardId);
				op.setUsgDetail(usgDetails);
				op.setTetanusOnestDoseDate(tetanusOnestDoseDate);  // added by amit das on 08-08-2016
				op.setTetanusTwondDoseDate(tetanusTwondDoseDate); // added by amit das on 08-08-2016
				hbt1.update(op);
				
				
				  // added by amit das on 08-08-2016
				   if(patient!=null){
				    alert = new PhAlert();
				   	alert.setHin(patient);
				   	alert.setHospital(hospital);
				   	alert.setAlertType("ANC");
				   	alert.setMember(patient.getMember());
				   	alert.setTt1(tetanusOnestDoseDate);
				   	alert.setTt2(tetanusTwondDoseDate);
				   	hbt.save(alert);
				   }
				
				}
		//	}
			//govind code
			
			if(antCardTrimeList.size()>0){
				
			   for(OpdAntenatalCardTrimester opdAntTrim:antCardTrimeList){				
				  
				   opdAntTrim.setDepartment(referredDepartment);

				   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
				   antenatalCard1.setId(antCardId);
				   opdAntTrim.setAntenatalCard(antenatalCard1);
				   
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					opdAntTrim.setHospital(masHospital);

					patient = new Patient();
					patient.setId(hinId);
					opdAntTrim.setHin(patient);

					Visit visit = new Visit();
					visit.setId(visitId);
					opdAntTrim.setVisit(visit);
				  		   
					opdAntTrim.setLastChgBy(userId);
					opdAntTrim.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(date));;
					opdAntTrim.setLastChgTime(time); 
					
				org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.save(opdAntTrim);
				
			  }
		}//govind code end
			
			//added by govind 30-8-2016
			if(menstrHistList.size()>0){
				   for(OpdAntcardMenstrualHistry opdAntMH:menstrHistList){				
					  
					   opdAntMH.setDepartment(referredDepartment);

					   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
					   antenatalCard1.setId(antCardId);
					   opdAntMH.setOpdAntenatalCard(antenatalCard1);

						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdAntMH.setHospital(masHospital);
						
						patient = new Patient();
						patient.setId(hinId);
						opdAntMH.setHin(patient);

						Visit visit = new Visit();
						visit.setId(visitId);
						opdAntMH.setVisit(visit);
					  		
						opdAntMH.setLastChgBy(lstBy);
						opdAntMH.setLastChgDate(HMSUtil
								.convertStringTypeDateToDateType(date));;
						opdAntMH.setLastChgTime(time); 
						
					org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					hbt.save(opdAntMH);
					
				  }
			}
			//govind code end


		/*	Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);*/

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getAntenatalCard(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List opdAntenatalCardList = new ArrayList();
		List<MasAdministrativeSex> sexList = new ArrayList<MasAdministrativeSex>();
		List<OpdAntenatalCard> opdAntenatalCardList1= new ArrayList<OpdAntenatalCard>();//govind code
		List<UsgDetails> usgDetailList= new ArrayList<UsgDetails>();
		List<MasBloodGroup> bloodGroupList = new ArrayList<MasBloodGroup>();
		Map<String, Object> map = new HashMap<String, Object>();
		 //added by amit das on 08-08-2016
		PhMemberSurvey phMember = null;
		Criteria criteria  = null;
		List<PhAncTerminationM> phAncTerminationMList  = null;
		List<PhAncSurvey> phAncSurveyList = null;
		List<OpdVaccinMst> opdVaccinMstList = null;
		Calendar c = Calendar.getInstance();
		Date lmpDate = null;
		String tt1Date =  null;
		String tt2Date =  null;
		int minimumDays = 0;
		int maximumDays = 0;
		// ended by amitdas on 08-08-2016
		
		//govind code 5-8
		int hinId=0;
		List<OpdAntenatalCardTrimester> opdAntenatalCardTrim1= new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntenatalCardTrimester> opdAntenatalCardTrim2= new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntenatalCardTrimester> opdAntenatalCardTrim3= new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntenatalCardTrimester> opdAntenatalCardTrim4= new ArrayList<OpdAntenatalCardTrimester>();
		
		List<OpdAntcardMenstrualHistry> menstrHistList= new ArrayList<OpdAntcardMenstrualHistry>();
		int exist=0;
		//govind code end
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			// "select emp, max(emp.Id) from OpdAntenatalCard as emp where emp.Status='y' group by emp.Id,emp")
			opdAntenatalCardList = session
					.createQuery(
							"select emp, emp.Id from OpdAntenatalCard as emp where emp.Status='y'")
					.list();
			
			sexList = session.createCriteria(MasAdministrativeSex.class)
					.addOrder(Order.asc("AdministrativeSexName"))
					.add(Restrictions.eq("Status", "Y").ignoreCase()).list();
			
			if (opdAntenatalCardList.size() > 0) {
				Iterator iterator = opdAntenatalCardList.iterator();
				while (iterator.hasNext()) {
					Object[] pair = (Object[]) iterator.next();
					OpdAntenatalCard opdAntenatalCard = (OpdAntenatalCard) pair[0];
					int max = (Integer) pair[1];
					map.put("opdAntenatalCardList", opdAntenatalCardList);
				}

			}
			bloodGroupList = session.createCriteria(MasBloodGroup.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			
			if(patientDataList.size()>0){
			Visit visit=(Visit)patientDataList.get(0);
			hinId=visit.getHin().getId();
			phMember = visit.getHin().getMember(); // added by amit das on 08-08-2016
			}
			
			
			//govind code
			opdAntenatalCardList1 = session.createCriteria(OpdAntenatalCard.class)
					.add(Restrictions.eq("Status", "Y").ignoreCase())
					.add(Restrictions.eq("Hin.Id", hinId)).addOrder(Order.asc("Id")).list();//end code
			
			String usgStr="",usgSplt[];
			if(opdAntenatalCardList1.size()>0){
				exist=1;
				for(OpdAntenatalCard op:opdAntenatalCardList1){
					Visit vi=op.getVisit();
					if(visitId==vi.getId()){
						//exist=1;
					}
					if(!op.getUsgDetail().equals("")){
						usgStr=op.getUsgDetail();
						usgSplt=usgStr.split(";");
						for(int i=0;i<usgSplt.length;i++){
							String temp1[];
							UsgDetails usg=new UsgDetails();
							temp1=usgSplt[i].split(",");
							usg.setSno(i);
							usg.setUsgDate(temp1[1]);
							usg.setUsgDetail(temp1[2]);							
							usgDetailList.add(usg);							
						}
					}
					
				}
			}
			
			
			opdAntenatalCardTrim1 = session.createCriteria(OpdAntenatalCardTrimester.class)
					.add(Restrictions.eq("trimesterType", 1))
					.add(Restrictions.eq("Hin.Id", hinId)).list();
			opdAntenatalCardTrim2 = session.createCriteria(OpdAntenatalCardTrimester.class)
					.add(Restrictions.eq("trimesterType", 2))
					.add(Restrictions.eq("Hin.Id", hinId)).list();
			opdAntenatalCardTrim3 = session.createCriteria(OpdAntenatalCardTrimester.class)
					.add(Restrictions.eq("trimesterType", 3))
					.add(Restrictions.eq("Hin.Id", hinId)).list();
			opdAntenatalCardTrim4 = session.createCriteria(OpdAntenatalCardTrimester.class)
					.add(Restrictions.eq("trimesterType", 4))
					.add(Restrictions.eq("Hin.Id", hinId)).list(); 			
			//added by govind 30-8-2016
			menstrHistList = session.createCriteria(OpdAntcardMenstrualHistry.class)
					.add(Restrictions.eq("Hin.Id", hinId)).list();
			//added by govind 30-8-2016 end 
			
			// added by amit das on 08-08-2016
			if(phMember!=null){
			criteria = session.createCriteria(OpdVaccinMst.class).createAlias("MasStoreItem", "msi").add(Restrictions.ilike("msi.Nomenclature", "tetanus", MatchMode.ANYWHERE));
			opdVaccinMstList =		criteria.list();
			if(opdVaccinMstList!=null && opdVaccinMstList.size()>0){
				 minimumDays = 	opdVaccinMstList.get(0).getVaccinDuration();
				 maximumDays = 	opdVaccinMstList.get(0).getVaccinToDays();
			}
					
			criteria = session.createCriteria(PhAncSurvey.class)
					.add(Restrictions.eq("MemberId",  phMember.getMemberId()));
			phAncSurveyList = 	criteria.list();
			if(phAncSurveyList!=null){
				for(PhAncSurvey phAncSurvey : phAncSurveyList){
					criteria = session.createCriteria(PhAncTerminationM.class).add(Restrictions.eq("AncRegId", phAncSurvey.getAncRegId()).ignoreCase());
					phAncTerminationMList = criteria.list();
					if(phAncTerminationMList==null || phAncTerminationMList.size()==0){
						lmpDate =	phAncSurvey.getLmpDate();
						break;
					}
				}
			}
			
			
			if(lmpDate!=null){
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				c.setTime(lmpDate);
				c.add(Calendar.DATE, minimumDays);
				tt1Date = sdf.format(c.getTime());
				c.setTime(lmpDate);
				c.add(Calendar.DATE, maximumDays);
				tt2Date = sdf.format(c.getTime());
			}
	
			}
			// end of code by amit das on 08-08-2016
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("sexList", sexList);	
		
		
		map.put("opdAntenatalCardList1", opdAntenatalCardList1);

		map.put("opdAntenatalCardTrim1", opdAntenatalCardTrim1);
		map.put("opdAntenatalCardTrim2", opdAntenatalCardTrim2);
		map.put("opdAntenatalCardTrim3", opdAntenatalCardTrim3);
		map.put("opdAntenatalCardTrim4", opdAntenatalCardTrim4);
		map.put("exist",exist);
		map.put("usgDetailList",usgDetailList);
		map.put("menstrHistList",menstrHistList);
		map.put("bloodGroupList",bloodGroupList);
		map.put("tetanusOneDoseDate",tt1Date);
		map.put("tetanusTwoDoseDate",tt2Date);
		
		return map;
	}

	public Map<String, Object> viewAntenatalCard(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdAntenatalCard> opdAntenatalCardList = new ArrayList<OpdAntenatalCard>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdAntenatalCardList = session
						.createCriteria(OpdAntenatalCard.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdAntenatalCardList", opdAntenatalCardList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> updateAntenatalCard(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;
		/*
		 * int hinId = 0; int visitId = 0; int userId=0; int departmentId=0; int
		 * hospitalId = 0;
		 */
		try {

			/*
			 * visitId = box.getInt(VISIT_ID); hinId = box.getInt(HIN_ID);
			 * userId = box.getInt("userId"); departmentId =
			 * box.getInt("departmentId"); hospitalId =
			 * box.getInt("hospitalId");
			 */
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			/*
			 * Patient patient = new Patient(); patient.setId(hinId);
			 * 
			 * 
			 * Visit visit = new Visit(); visit.setId(visitId);
			 * 
			 * MasDepartment masDepartment = new MasDepartment();
			 * masDepartment.setId(departmentId);
			 * 
			 * MasHospital masHospital = new MasHospital();
			 * masHospital.setId(hospitalId);
			 */

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector id = box.getVector(ANTENATAL_CARD_ID);
			Vector fhsFmEdit = box.getVector(FHS_FM_EDIT);
			Vector urineEdit = box.getVector(URINE_EDIT);
			Vector hbGmsEdit = box.getVector(HB_GMS_EDIT);
			for (int i = 0; i < id.size(); i++) {

				OpdAntenatalCard antenatalCardObj = new OpdAntenatalCard();
				if (id.get(i) != null && !id.get(i).equals("")) {
					int aId = Integer.parseInt(id.get(i).toString());
					antenatalCardObj = (OpdAntenatalCard) getHibernateTemplate()
							.load(OpdAntenatalCard.class, aId);

					if (fhsFmEdit.get(i) != null
							&& !fhsFmEdit.get(i).equals("")) {
						antenatalCardObj.setFhsFm((String) fhsFmEdit.get(i));
					}
					if (urineEdit.get(i) != null
							&& !urineEdit.get(i).equals("")) {
						antenatalCardObj.setUrine((String) urineEdit.get(i));
					}
					if (hbGmsEdit.get(i) != null
							&& !hbGmsEdit.get(i).equals("")) {
						antenatalCardObj.setHbGms((String) hbGmsEdit.get(i));
					}

					/*
					 * antenatalCardObj.setDepartment(masDepartment);
					 * antenatalCardObj.setHospital(masHospital);
					 * antenatalCardObj.setHin(patient);
					 * antenatalCardObj.setVisit(visit);
					 * antenatalCardObj.setLastChgBy(userId);
					 */
					antenatalCardObj.setStatus("y");
					antenatalCardObj.setLastChgDate(date);
					antenatalCardObj.setLastChgTime(time);

					hbt.update(antenatalCardObj);

				}
			}

			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;

	}

	public Map<String, Object> getAntenatalCardEdit(int aId, int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<OpdAntenatalCard> opdAntenatalCardList = new ArrayList<OpdAntenatalCard>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			opdAntenatalCardList = session
					.createCriteria(OpdAntenatalCard.class)
					.add(Restrictions.eq("Id", aId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("opdAntenatalCardList", opdAntenatalCardList);
		return map;
	}

	public Map<String, Object> getGravidagramHTN(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramHTN(Map<String, Object> infoMap) {
		OpdGravidagramHtn gravidagramHtn = new OpdGravidagramHtn();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramHtn") != null) {
			gravidagramHtn = (OpdGravidagramHtn) infoMap.get("gravidagramHtn");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramHtn);
/*
			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);*/

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramHTN(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramHtn> opdGravidagramHtnList = new ArrayList<OpdGravidagramHtn>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdGravidagramHtnList = session
						.createCriteria(OpdGravidagramHtn.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramHtnList", opdGravidagramHtnList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getGravidagramGestationalDiabitiesOne(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramGestationalDiabitiesOne(
			Map<String, Object> infoMap) {
		OpdGravidagramGestationalDiabitiesOne gravidagramGestationalDiabitiesOne = new OpdGravidagramGestationalDiabitiesOne();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramGestationalDiabitiesOne") != null) {
			gravidagramGestationalDiabitiesOne = (OpdGravidagramGestationalDiabitiesOne) infoMap
					.get("gravidagramGestationalDiabitiesOne");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramGestationalDiabitiesOne);

			/*Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);*/

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramGestationalDiabitiesOne(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramGestationalDiabitiesOne> opdGravidagramGestationalDiabitiesOneList = new ArrayList<OpdGravidagramGestationalDiabitiesOne>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdGravidagramGestationalDiabitiesOneList = session
						.createCriteria(
								OpdGravidagramGestationalDiabitiesOne.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramGestationalDiabitiesOneList",
						opdGravidagramGestationalDiabitiesOneList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getGravidagramGestationalDiabitiesTwo(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}

	public boolean addGravidagramGestationalDiabitiesTwo(
			Map<String, Object> infoMap) {
		OpdGravidagramGestationalDiabitiesTwo gravidagramGestationalDiabitiesTwo = new OpdGravidagramGestationalDiabitiesTwo();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("gravidagramGestationalDiabitiesTwo") != null) {
			gravidagramGestationalDiabitiesTwo = (OpdGravidagramGestationalDiabitiesTwo) infoMap
					.get("gravidagramGestationalDiabitiesTwo");
		}
		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(gravidagramGestationalDiabitiesTwo);

			/*Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("C");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);
*/
			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewGravidagramGestationalDiabitiesTwo(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGravidagramGestationalDiabitiesTwo> opdGravidagramGestationalDiabitiesTwoList = new ArrayList<OpdGravidagramGestationalDiabitiesTwo>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdGravidagramGestationalDiabitiesTwoList = session
						.createCriteria(
								OpdGravidagramGestationalDiabitiesTwo.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGravidagramGestationalDiabitiesTwoList",
						opdGravidagramGestationalDiabitiesTwoList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ------------------------Mehod For Generate to Order
	// Number-----------------
	/*
	 * public String generateOrderNumber() { Map<String, Object> map = new
	 * HashMap<String, Object>(); List<TransactionSequence> orderSeqNoList = new
	 * ArrayList<TransactionSequence>(); Map<String, Object> utilMap = new
	 * HashMap<String, Object>(); utilMap = (Map<String, Object>)
	 * HMSUtil.getCurrentDateAndTime(); String date = "";
	 * 
	 * Session session = (Session) getSession(); String orderSeqNo = ""; date =
	 * (String) utilMap.get("currentDate"); String currentyear = ""; String
	 * currentYear = date.substring(date.lastIndexOf("/") + 1); String
	 * lastOrderNo = ""; String lastOrderYear = ""; List<DgOrderhd> orderNoList
	 * = new ArrayList<DgOrderhd>(); orderNoList = session.createQuery(
	 * "select hd from DgOrderhd hd where hd.Id =(select max(Id) from DgOrderhd)"
	 * ).list(); if(orderNoList.size()>0){ DgOrderhd dgOrderhd = new
	 * DgOrderhd(); dgOrderhd =(DgOrderhd)orderNoList.get(0); lastOrderNo =
	 * dgOrderhd.getOrderNo();
	 * 
	 * StringTokenizer str = new StringTokenizer(lastOrderNo, "/"); while
	 * (str.hasMoreTokens()) {
	 * 
	 * lastOrderYear = str.nextToken();
	 * 
	 * } } else if (lastOrderYear.equals("")) { lastOrderYear = currentYear; }
	 * try { orderSeqNoList = session.createCriteria(TransactionSequence.class)
	 * .add(Restrictions.eq("TransactionPrefix", "ON")).list(); } catch
	 * (HibernateException e) { e.printStackTrace(); }
	 * 
	 * HibernateTemplate hbt = getHibernateTemplate();
	 * hbt.setFlushModeName("FLUSH_EAGER"); hbt.setCheckWriteOperations(false);
	 * 
	 * if (orderSeqNoList.size() > 0) { for (TransactionSequence
	 * transactionSequence : orderSeqNoList) { TransactionSequence obj =
	 * (TransactionSequence) orderSeqNoList .get(0); int id = obj.getId(); int
	 * seqNo = 0; if (currentYear.equals(lastOrderYear)) { seqNo =
	 * obj.getTransactionSequenceNumber(); } else { seqNo = 0; }
	 * TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
	 * .load(TransactionSequence.class, id);
	 * transactionSequenceObj.setTransactionSequenceNumber(seqNo + 1); ++seqNo;
	 * hbt.update(transactionSequenceObj); hbt.refresh(transactionSequenceObj);
	 * 
	 * orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo)); orderSeqNo =
	 * orderSeqNo.concat("/").concat( String.valueOf(lastOrderYear)); } } else
	 * if (orderSeqNoList.size() == 0) { TransactionSequence tsObj = new
	 * TransactionSequence(); tsObj.setStatus("y");
	 * tsObj.setTablename("DgOrderhd"); tsObj.setTransactionPrefix("ON");
	 * tsObj.setTransactionSequenceName("Order No");
	 * tsObj.setTransactionSequenceNumber(0);
	 * 
	 * hbt.save(tsObj); } if (orderSeqNo.trim().equals("1/1".trim()) ||
	 * orderSeqNo.trim().equals("1/".trim())) { orderSeqNo = "1/" +
	 * Integer.toString(Calendar.getInstance() .get(Calendar.YEAR)); } return
	 * orderSeqNo; }
	 */

	public Map<String, Object> addOncosurgeryCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String cityScan = "";
		String others = "";
		String biopsyNo = "";
		String fancNo = "";
		String clinicalDiagnosis = "";
		String tumour = "";
		String lx = "";
		String mets = "";
		String operationFindingsOthers = "";
		String operationDateProcedure = "";
		String hpe = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		MasDepartment masDepartment = new MasDepartment();
		departmentId = box.getInt("departmentId");
		try {
			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			hospitalId = box.getInt("hospitalId");

			cityScan = box.getString(CITY_SCAN);
			others = box.getString(OTHERS);
			biopsyNo = box.getString(BIOSPSY_NO);
			fancNo = box.getString(FANC_NO);
			clinicalDiagnosis = box.getString(CLINICAL_DIAGNOSIS);
			tumour = box.getString(TUMOUR);
			lx = box.getString(LX);
			mets = box.getString(METS);
			operationFindingsOthers = box.getString(OPERATION_FINDINGS_OTHERS);
			operationDateProcedure = box.getString(OPERATION_DATE_PROCEDURE);
			hpe = box.getString(HPE);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOncosurgeryCaseSheet opdOncosurgeryCaseSheet = new OpdOncosurgeryCaseSheet();

			opdOncosurgeryCaseSheet.setDepartment(masDepartment);
			opdOncosurgeryCaseSheet.setHin(patient);
			opdOncosurgeryCaseSheet.setVisit(visit);
			opdOncosurgeryCaseSheet.setHospital(masHospital);

			opdOncosurgeryCaseSheet.setBiopsyNo(biopsyNo);
			opdOncosurgeryCaseSheet.setCityScan(cityScan);
			opdOncosurgeryCaseSheet.setClinicalDiagnosis(clinicalDiagnosis);
			opdOncosurgeryCaseSheet.setFancNo(fancNo);
			opdOncosurgeryCaseSheet.setHpe(hpe);
			opdOncosurgeryCaseSheet.setLx(lx);
			opdOncosurgeryCaseSheet
					.setOperationDateProcedure(operationDateProcedure);
			opdOncosurgeryCaseSheet.setMets(mets);
			opdOncosurgeryCaseSheet
					.setOperationFindingsOthers(operationFindingsOthers);
			opdOncosurgeryCaseSheet.setOthers(others);
			opdOncosurgeryCaseSheet.setTumour(tumour);

			opdOncosurgeryCaseSheet.setStatus("y");
			opdOncosurgeryCaseSheet.setLastChgDate(date);
			opdOncosurgeryCaseSheet.setLastChgTime(time);
			opdOncosurgeryCaseSheet.setLastChgBy(userName);

			hbt.save(opdOncosurgeryCaseSheet);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showOncosurgeryCaseSheetJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	public Map<String, Object> viewOncosurgeryCaseSheet(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOncosurgeryCaseSheet> oncosurgeryCaseSheetList = new ArrayList<OpdOncosurgeryCaseSheet>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				oncosurgeryCaseSheetList = session
						.createCriteria(OpdOncosurgeryCaseSheet.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/*----------------------------------------Urology Case Sheet----------------------------------------------*/

	public Map<String, Object> addUrologyCaseSheet(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String symptomme = "";
		String haeTotal = "";
		String haeTeriminal = "";
		String haeInitial = "";
		String haeClots = "";
		String uretericLeft = "";
		String uretericRight = "";
		String hypogastricPain = "";
		String bonePain = "";
		String dysuriaPain = "";
		String perinalRectal = "";

		String lFrequency = "";
		String lHesitanvy = "";
		String lNocturia = "";
		String lStraining = "";
		String lUrgency = "";
		String lSenseComEva = "";
		String lUrgeIncon = "";
		String lIntermittency = "";
		String lDribbling = "";
		String calculariaCheck = "";
		String calcularia = "";

		String chyluriaCheck = "";
		String chyluria = "";
		String erectileDysfunctionCheck = "";
		String erectileDysfunction = "";
		String haemospermia = "";
		String prematureEjaculation = "";
		String retrogradeEjaculation = "";
		String anejaculationEjaculation = "";

		String stressIncontinence = "";
		String urgeIncontinence = "";
		String totalIncontinence = "";
		String overflowIncontinence = "";
		String acuteUrinaryCheck = "";
		String acuteUrinary = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		MasDepartment masDepartment = new MasDepartment();
		departmentId = box.getInt("departmentId");
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			
			hospitalId = box.getInt("hospitalId");

			symptomme = box.getString(SYMPTOMME);
			haeTotal = box.getString(HAE_TOTAL);
			haeTeriminal = box.getString(HAE_TERIMINAL);
			haeInitial = box.getString(HAE_INITIAL);
			haeClots = box.getString(HAE_CLOTS);
			uretericLeft = box.getString(URETERIC_LEFT);
			uretericRight = box.getString(URETERIC_RIGHT);
			hypogastricPain = box.getString(HYPOGASTRIC_PAIN);
			bonePain = box.getString(BONE_PAIN);
			dysuriaPain = box.getString(DYSURIA_PAIN);
			perinalRectal = box.getString(PERINAL_RECTAL);

			lFrequency = box.getString(L_FREQUENCY);
			lHesitanvy = box.getString(L_HESITANVY);
			lNocturia = box.getString(L_NOCTURIA);
			lStraining = box.getString(L_STRAINING);
			lUrgency = box.getString(L_URGENCY);
			lSenseComEva = box.getString(L_SENSE_COM_EVA);
			lUrgeIncon = box.getString(L_URGE_INCON);
			lIntermittency = box.getString(L_INTERMITTENCY);
			lDribbling = box.getString(L_DRIBBLING);
			calculariaCheck = box.getString(CALCULARIA_CHECK);
			calcularia = box.getString(CALCULARIA);

			chyluriaCheck = box.getString(CHYLURIA_CHECK);
			chyluria = box.getString(CHYLURIA);
			erectileDysfunctionCheck = box
					.getString(ERECTILE_DYSFUNCTION_CHECK);
			erectileDysfunction = box.getString(ERECTILE_DYSFUNCTION);
			haemospermia = box.getString(HAEMOSPERMIA);
			prematureEjaculation = box.getString(PREMATUREEJACULATION);
			retrogradeEjaculation = box.getString(RETROGRADE_EJACULATION);
			anejaculationEjaculation = box.getString(ANEJACULATION_EJACULATION);

			stressIncontinence = box.getString(STRESS_INCONTINENCE);
			urgeIncontinence = box.getString(URGE_INCONTINENCE);
			totalIncontinence = box.getString(TOTAL_INCONTINENCE);
			overflowIncontinence = box.getString(OVERFLOW_INCONTINENCE);
			acuteUrinaryCheck = box.getString(ACUTE_URINARY_CHECK);
			acuteUrinary = box.getString(ACUTE_URINARY);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdUrology opdUrology = new OpdUrology();

			opdUrology.setDepartment(masDepartment);
			opdUrology.setHin(patient);
			opdUrology.setVisit(visit);
			opdUrology.setHospital(masHospital);

			opdUrology.setAcuteUrinary(acuteUrinary);
			opdUrology.setAcuteUrinaryCheck(acuteUrinaryCheck);
			opdUrology.setAnejaculationEjaculation(anejaculationEjaculation);
			opdUrology.setBonePain(bonePain);
			opdUrology.setCalcularia(calcularia);
			opdUrology.setCalculariaCheck(calculariaCheck);
			opdUrology.setChyluria(chyluria);
			opdUrology.setChyluriaCheck(chyluriaCheck);
			opdUrology.setDysuriaPain(dysuriaPain);
			opdUrology.setErectileDysfunction(erectileDysfunction);
			opdUrology.setErectileDysfunctionCheck(erectileDysfunctionCheck);
			opdUrology.setHaeClots(haeClots);
			opdUrology.setHaeInitial(haeInitial);
			opdUrology.setHaemospermia(haemospermia);
			opdUrology.setHaeTeriminal(haeTeriminal);
			opdUrology.setHaeTotal(haeTotal);
			opdUrology.setHypogastricPain(hypogastricPain);
			opdUrology.setLDribbling(lDribbling);
			opdUrology.setLFrequency(lFrequency);
			opdUrology.setLHesitanvy(lHesitanvy);
			opdUrology.setLIntermittency(lIntermittency);
			opdUrology.setLNocturia(lNocturia);
			opdUrology.setLSenseComEva(lSenseComEva);
			opdUrology.setLStraining(lStraining);
			opdUrology.setLUrgeIncon(lUrgeIncon);
			opdUrology.setLUrgency(lUrgency);
			opdUrology.setOverflowIncontinence(overflowIncontinence);
			opdUrology.setPerinalRectal(perinalRectal);
			opdUrology.setPrematureejaculation(prematureEjaculation);
			opdUrology.setRetrogradeEjaculation(retrogradeEjaculation);
			opdUrology.setStressIncontinence(stressIncontinence);
			opdUrology.setSymptomme(symptomme);
			opdUrology.setTotalIncontinence(totalIncontinence);
			opdUrology.setUretericLeft(uretericLeft);
			opdUrology.setUretericRight(uretericRight);
			opdUrology.setUrgeIncontinence(urgeIncontinence);
			opdUrology.setStatus("y");
			opdUrology.setLastChgDate(date);
			opdUrology.setLastChgTime(time);
			opdUrology.setLastChgBy(userName);

			hbt.save(opdUrology);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showUrologyCaseSheetJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	public Map<String, Object> viewUrologyCaseSheet(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdUrology> oncosurgeryCaseSheetList = new ArrayList<OpdUrology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				oncosurgeryCaseSheetList = session
						.createCriteria(OpdUrology.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryCaseSheetList", oncosurgeryCaseSheetList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> addOncosurgery(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean saved = false;

		int hinId = 0;
		int visitId = 0;
		int departmentId = 0;
		int hospitalId = 0;
		String medicalOnco = "";
		String surgeryOnco = "";
		String stageA = "";
		String stageB = "";
		String stageM = "";
		String stageN = "";
		String stageT = "";
		String remarks = "";
		String rt = "";
		String stageNor = "";

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String referredDept = (String) box.get("referredDept").toString();
		MasDepartment masDepartment = new MasDepartment();
		departmentId = box.getInt("departmentId");
		try {

			visitId = box.getInt("visitId");
			hinId = box.getInt("hinId");
			
			hospitalId = box.getInt("hospitalId");

			medicalOnco = box.getString(MEDICAL);
			surgeryOnco = box.getString(SURGERY);
			remarks = box.getString(REMARKS);
			rt = box.getString(RT);
			stageNor = box.getString(STAGE_NOR);
			stageA = box.getString(STAGE_A);
			stageB = box.getString(STAGE_B);
			stageN = box.getString(STAGE_N);
			stageT = box.getString(STAGE_T);
			stageM = box.getString(STAGE_M);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			String userName = "";
			userName = box.getString("userName");
			Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
			Patient patient = new Patient();
			patient.setId(hinId);

			Visit visit = new Visit();
			visit.setId(visitId);

			
			masDepartment.setId(departmentId);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);

			OpdOncology opdOncosurgery = new OpdOncology();

			opdOncosurgery.setDepartment(masDepartment);
			opdOncosurgery.setHin(patient);
			opdOncosurgery.setVisit(visit);
			opdOncosurgery.setHospital(masHospital);

			opdOncosurgery.setMedicalOnco(medicalOnco);
			opdOncosurgery.setRemarks(remarks);
			opdOncosurgery.setRt(rt);
			opdOncosurgery.setStageA(stageA);
			opdOncosurgery.setStageB(stageB);
			opdOncosurgery.setStageM(stageM);
			opdOncosurgery.setStageN(stageN);
			opdOncosurgery.setStageT(stageT);
			opdOncosurgery.setSurgeryOnco(surgeryOnco);
			opdOncosurgery.setStageNor(stageNor);
			opdOncosurgery.setOpdDate(date);
			opdOncosurgery.setOpdTime(time);
			opdOncosurgery.setStatus("y");
			opdOncosurgery.setLastChgDate(date);
			opdOncosurgery.setLastChgTime(time);
			opdOncosurgery.setLastChgBy(userName);

			hbt.save(opdOncosurgery);
			saved = true;
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		try {
			Visit visitStatus = (Visit) getHibernateTemplate().load(
					Visit.class, visitId);
			visitStatus.setVisitStatus("C");
			hbt.update(visitStatus);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(masDepartment);

			MasHospital masHospitalob = (MasHospital) hbt.load(
					MasHospital.class, hospitalId);
			opdPatientDetails.setHospital(masHospitalob);

			opdPatientDetails.setVisit(visitStatus);
			hbt.save(opdPatientDetails);
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("saved", saved);
		return map;
	}

	public Map<String, Object> showOncosurgeryJsp(int visitId) {

		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	public Map<String, Object> viewOncosurgery(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdOncology> oncosurgeryList = new ArrayList<OpdOncology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				oncosurgeryList = session.createCriteria(OpdOncology.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("oncosurgeryList", oncosurgeryList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> viewVistPreNext1(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		// int visitId=(Integer)parameterMap.get("visitId");
		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {

			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				map = getPatientDetails(map);

				try {

					Criteria crit = session
							.createCriteria(OpdPatientDetails.class)
							.createAlias("Visit", "visit")
							.add(Restrictions.eq("visit.Id", visitId));
					patientVisitDataList = crit.list();
					patientDiagnosisList = session
							.createCriteria(DischargeIcdCode.class)
							.createAlias("Visit", "visit")
							.add(Restrictions.eq("visit.Id", visitId)).list();
					patientPrescHList = session
							.createCriteria(PatientPrescriptionHeader.class)
							.createAlias("Visit", "visit")
							.add(Restrictions.eq("visit.Id", visitId)).list();
					if (patientPrescHList.size() > 0) {
						PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
								.get(0);
						int presHId = patientPrescriptionHeader.getId();
						patientPrescDList = session
								.createCriteria(
										PatientPrescriptionDetails.class)
								.createAlias("Prescription", "hId")
								.add(Restrictions.eq("hId.Id", presHId)).list();
					}
					patientInvesHList = session
							.createCriteria(PatientInvestigationHeader.class)
							.createAlias("Visit", "visit")
							.add(Restrictions.eq("visit.Id", visitId)).list();
					if (patientInvesHList.size() > 0) {
						PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
								.get(0);
						int invesHId = patientInvestigationHeader.getId();
						patientInvesDList = session
								.createCriteria(
										PatientInvestigationDetails.class)
								.createAlias("InvestigationHeader", "invesHId")
								.add(Restrictions.eq("invesHId.Id", invesHId))
								.list();
					}

					// ----------list of referred department taken out from opd
					// patient details table--------

					OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
							.get(0);
					String referredDept = opdPatientDetails.getReferredDept().getDepartmentName();
					if (!referredDept.equals("") && referredDept != null) {
						String[] dept = referredDept.split(",");
						for (int i = 0; i < dept.length; i++) {
							int deptId = Integer.parseInt(dept[i]);
							String deptName = getDepartmentNameFromId(deptId);
							deptList.add(deptName);
						}
					}
					// -------------------------------End of code for referred
					// depatment---------------------
				} catch (HibernateException e) {
					e.printStackTrace();
				}
				map.put("deptList", deptList);
				map.put("patientVisitDataList", patientVisitDataList);
				map.put("patientDiagnosisList", patientDiagnosisList);
				map.put("patientPrescDList", patientPrescDList);
				map.put("patientInvesDList", patientInvesDList);
				map.put("map", map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> viewVistPreNext(Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdPatientDetails> patientVisitDataList = new ArrayList<OpdPatientDetails>();
		List<DischargeIcdCode> patientDiagnosisList = new ArrayList<DischargeIcdCode>();
		List<PatientPrescriptionHeader> patientPrescHList = new ArrayList<PatientPrescriptionHeader>();
		List<PatientPrescriptionDetails> patientPrescDList = new ArrayList<PatientPrescriptionDetails>();
		List<PatientInvestigationHeader> patientInvesHList = new ArrayList<PatientInvestigationHeader>();
		List<PatientInvestigationDetails> patientInvesDList = new ArrayList<PatientInvestigationDetails>();
		Map<String, Object> map = new HashMap<String, Object>();

		List deptList = new ArrayList<String>();
		@SuppressWarnings("unused")
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (mapForDS.get("visitNo") != null) {
			visitNo = (Integer) mapForDS.get("visitNo");
		}
		if (mapForDS.get("hinId") != null) {
			hinId = (Integer) mapForDS.get("hinId");
		}
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = (Integer) mapForDS.get("visitId");
				// int visitId = visit.getId();
				// map = getPatientDetails(visitId);
				Criteria crit = session.createCriteria(OpdPatientDetails.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId));
				patientVisitDataList = crit.list();
				patientDiagnosisList = session
						.createCriteria(DischargeIcdCode.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				patientPrescHList = session
						.createCriteria(PatientPrescriptionHeader.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				if (patientPrescHList.size() > 0) {
					PatientPrescriptionHeader patientPrescriptionHeader = patientPrescHList
							.get(0);
					int presHId = patientPrescriptionHeader.getId();
					patientPrescDList = session
							.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "hId")
							.add(Restrictions.eq("hId.Id", presHId)).list();
				}
				patientInvesHList = session
						.createCriteria(PatientInvestigationHeader.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				if (patientInvesHList.size() > 0) {
					PatientInvestigationHeader patientInvestigationHeader = patientInvesHList
							.get(0);
					int invesHId = patientInvestigationHeader.getId();
					patientInvesDList = session
							.createCriteria(PatientInvestigationDetails.class)
							.createAlias("InvestigationHeader", "invesHId")
							.add(Restrictions.eq("invesHId.Id", invesHId))
							.list();
				}

				// ----------list of referred department taken out from opd
				// patient details table--------

				OpdPatientDetails opdPatientDetails = (OpdPatientDetails) patientVisitDataList
						.get(0);
				String referredDept = opdPatientDetails.getReferredDept().getDepartmentName();
				if (!referredDept.equals("") && referredDept != null) {
					String[] dept = referredDept.split(",");
					for (int i = 0; i < dept.length; i++) {
						int deptId = Integer.parseInt(dept[i]);
						String deptName = getDepartmentNameFromId(deptId);
						deptList.add(deptName);
					}
				}
			}
		}// -------------------------------End of code for referred
			// depatment---------------------
		catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("deptList", deptList);
		map.put("patientVisitDataList", patientVisitDataList);
		map.put("patientDiagnosisList", patientDiagnosisList);
		map.put("patientPrescDList", patientPrescDList);
		map.put("patientInvesDList", patientInvesDList);

		return map;
	}

	public Map<String, Object> showPatientPreviousHinNumber(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> patientPreviousVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		String hinNo = (String) mapForDS.get("hinNo");
		// int visitNo=(Integer)mapForDS.get("visitNo");
		try {

			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Hin", "hin")
					.add(Restrictions.eq("hin.HinNo", hinNo))
					.addOrder(Order.desc("VisitNo"))
					.add(Restrictions.eq("VisitStatus", "C"));
			patientPreviousVisitList = crit.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientPreviousVisitList", patientPreviousVisitList);

		return map;
	}

	public Map<String, Object> viewPreviousNextVisit(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Visit> visitList = new ArrayList<Visit>();
		int visitId = (Integer) mapForDS.get("visitId");
		int hinId = (Integer) mapForDS.get("hinId");

		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<Integer> visitMinIdList = new ArrayList<Integer>();
		int max = 0;

		String flag = "";
		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		visitMaxIdList = session.createQuery(
				"select MAX(Id) from Visit where Status='y' and VisitStatus='C' and Hin.Id='"
						+ hinId + "'").list();

		if (visitMaxIdList.size() > 0) {
			max = (Integer) visitMaxIdList.get(0);
			mapForDS.put("max", max);
		}
		visitMinIdList = session.createQuery(
				"select MIN(Id) from Visit where Status='y' and VisitStatus='C' and Hin.Id='"
						+ hinId + "'").list();
		if (visitMinIdList.size() > 0) {
			int min = (Integer) visitMinIdList.get(0);
			mapForDS.put("min", min);
		}
		if (flag.equals("prev")) {
			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Hin", "p")
					.add(Restrictions.eq("p.Id", hinId))
					.add(Restrictions.eq("VisitStatus", "C"))
					.addOrder(Order.asc("Id"));
			visitList = crit.list();
		}
		if (flag.equals("next")) {
			Criteria crit = session.createCriteria(Visit.class)
					.createAlias("Hin", "p")
					.add(Restrictions.eq("p.Id", hinId))
					.add(Restrictions.eq("VisitStatus", "C"))
					.addOrder(Order.desc("Id"));
			visitList = crit.list();
		}

		mapForDS.put("visitList", visitList);

		return mapForDS;

	}

	public boolean addOpdTemplateDepartmentWise(Map<String, Object> infoMap) {
		OpdTemplateDepartmentWise opdTemplateDepartmentWise = new OpdTemplateDepartmentWise();
		boolean successfullyAdded = false;
		int visitId = 0;
		int hospitalId = 0;
		if (infoMap.get("opdTemplateDepartmentWise") != null) {
			opdTemplateDepartmentWise = (OpdTemplateDepartmentWise) infoMap
					.get("opdTemplateDepartmentWise");
		}

		if (infoMap.get("visitId") != null) {
			visitId = (Integer) infoMap.get("visitId");
		}

		if (infoMap.get("hospitalId") != null) {
			hospitalId = (Integer) infoMap.get("hospitalId");
		}
		String referredDept = (String) infoMap.get("referredDept").toString();
		MasDepartment referredDepartment = (MasDepartment) infoMap.get("referredDepartment");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(opdTemplateDepartmentWise);

			Visit visitObjToUpdate = (Visit) hbt.load(Visit.class, visitId);
			visitObjToUpdate.setVisitStatus("w");
			hbt.update(visitObjToUpdate);

			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();

			opdPatientDetails.setReferredDept(referredDepartment);

			MasHospital masHospital = (MasHospital) hbt.load(MasHospital.class,
					hospitalId);
			opdPatientDetails.setHospital(masHospital);

			opdPatientDetails.setVisit(visitObjToUpdate);
			hbt.save(opdPatientDetails);

			successfullyAdded = true;
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> viewOpdTemplateDepartmentWise(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdTemplateDepartmentWise> opdTemplateDepartmentWiseList = new ArrayList<OpdTemplateDepartmentWise>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdTemplateDepartmentWiseList = session
						.createCriteria(OpdTemplateDepartmentWise.class)
						.createAlias("Visit", "v")
						.add(Restrictions.eq("v.Id", visitId)).list();
				map.put("opdTemplateDepartmentWiseList",
						opdTemplateDepartmentWiseList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> viewOpdTemplateDepartmentWisePreNext(
			Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;
		int max = 0;
		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		List<OpdTemplateDepartmentWise> opdTemplateDepartmentWiseList = new ArrayList<OpdTemplateDepartmentWise>();

		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}

			if (flag.equals("prev")) {

				visitNoForView = visitNo - 1;

			}

			else if (flag.equals("next")) {

				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}

			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0 && visitList != null) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				map.put("visitId", visitId);
				detailsMap = getPatientDetails(map);
				opdTemplateDepartmentWiseList = session
						.createCriteria(OpdTemplateDepartmentWise.class)
						.createAlias("Visit", "v")
						.add(Restrictions.eq("v.Id", visitId)).list();
				map.put("opdTemplateDepartmentWiseList",
						opdTemplateDepartmentWiseList);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	/**
	 * --------------------------------------------End of Methods For By
	 * Mansi-------------------------
	 * 
	 */

	/** start of methods by abha * */

	public Map<String, Object> viewGynaecology(Map<String, Object> parameterMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> detailsMap = new HashMap<String, Object>();

		int hinId = 0;
		int visitNo = 0;
		String flag = "";
		int visitNoForView = 0;

		Visit visit = new Visit();
		List<Visit> visitList = new ArrayList<Visit>();
		List<OpdGynaecology> opdGynaecologyist = new ArrayList<OpdGynaecology>();
		List<Integer> visitMaxIdList = new ArrayList<Integer>();
		int max = 0;
		if (parameterMap.get("visitNo") != null) {
			visitNo = (Integer) parameterMap.get("visitNo");
		}
		if (parameterMap.get("hinId") != null) {
			hinId = (Integer) parameterMap.get("hinId");
		}
		if (parameterMap.get("flag") != null) {
			flag = (String) parameterMap.get("flag");
		}
		Session session = (Session) getSession();
		try {
			visitMaxIdList = session.createQuery(
					"select MAX(Id) from Visit where Status='y' and Hin.Id='"
							+ hinId + "'").list();

			if (visitMaxIdList.size() > 0) {
				max = (Integer) visitMaxIdList.get(0);
				map.put("max", max);
			}
			if (flag.equals("prev")) {
				visitNoForView = visitNo - 1;
			} else if (flag.equals("next")) {
				visitNoForView = visitNo + 1;
			} else {
				visitNoForView = visitNo;
			}
			if (visitNoForView != 0) {
				visitList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("VisitNo", visitNoForView))
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId)).list();
			}

			if (visitList.size() > 0) {
				visit = visitList.get(0);
				int visitId = visit.getId();
				parameterMap.put("visitId", visitId);
				detailsMap = getPatientDetails(parameterMap);
				opdGynaecologyist = session
						.createCriteria(OpdGynaecology.class)
						.createAlias("Visit", "visit")
						.add(Restrictions.eq("visit.Id", visitId)).list();
				map.put("opdGynaecologyist", opdGynaecologyist);
				map.put("detailsMap", detailsMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public boolean submitComplaints(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float primaryInfertility = 0;
		float secondaryInfertility = 0;
		float hypomenorrhoea = 0;
		float oligomenorrhoea = 0;
		float hisrsutism = 0;
		float galactorrhoea = 0;
		String backache = "";
		String pruritisVulvae = "";
		String dysmenorrhoea = "";
		String leucorrhoea = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		primaryInfertility = (Float) map.get("primaryInfertility");
		secondaryInfertility = (Float) map.get("secondaryInfertility");
		hypomenorrhoea = (Float) map.get("hypomenorrhoea");
		oligomenorrhoea = (Float) map.get("oligomenorrhoea");
		hisrsutism = (Float) map.get("hisrsutism");
		galactorrhoea = (Float) map.get("galactorrhoea");
		backache = (String) map.get("backache");
		pruritisVulvae = (String) map.get("pruritisVulvae");
		dysmenorrhoea = (String) map.get("dysmenorrhoea");
		leucorrhoea = (String) map.get("leucorrhoea");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setPrimaryInfertility(primaryInfertility);
				opdGynaecology1.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology1.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology1.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology1.setGalactorrhoea(galactorrhoea);
				opdGynaecology1.setHisrsutism(hisrsutism);
				opdGynaecology1.setLeucorrhoea(leucorrhoea);
				opdGynaecology1.setPruritisVulvae(pruritisVulvae);
				opdGynaecology1.setBackache(backache);
				opdGynaecology1.setDysmenorrhoea(dysmenorrhoea);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setPrimaryInfertility(primaryInfertility);
				opdGynaecology.setSecondaryInfertility(secondaryInfertility);
				opdGynaecology.setHypomenorrhoea(hypomenorrhoea);
				opdGynaecology.setOligomenorrhoea(oligomenorrhoea);
				opdGynaecology.setGalactorrhoea(galactorrhoea);
				opdGynaecology.setHisrsutism(hisrsutism);
				opdGynaecology.setLeucorrhoea(leucorrhoea);
				opdGynaecology.setPruritisVulvae(pruritisVulvae);
				opdGynaecology.setBackache(backache);
				opdGynaecology.setDysmenorrhoea(dysmenorrhoea);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitSystemicExamination(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		String otherSystems = "";
		String gynaecologicalExamination = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		otherSystems = (String) map.get("otherSystems");
		gynaecologicalExamination = (String) map
				.get("gynaecologicalExamination");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setOtherSystems(otherSystems);
				opdGynaecology1
						.setGynaecologicalExamination(gynaecologicalExamination);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setOtherSystems(otherSystems);
				opdGynaecology
						.setGynaecologicalExamination(gynaecologicalExamination);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitGeneralExaminaton(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float height = 0;
		float weight = 0;
		String obesity = "";
		String acne = "";
		String hairDistribution = "";
		String breastDevelopment = "";
		String galactorrhoea = "";
		String pigmentation = "";
		String others = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		height = (Float) map.get("height");
		weight = (Float) map.get("weight");
		obesity = (String) map.get("obesity");
		acne = (String) map.get("acne");
		hairDistribution = (String) map.get("hairDistribution");
		pigmentation = (String) map.get("pigmentation");
		galactorrhoea = (String) map.get("galactorrhoea");
		breastDevelopment = (String) map.get("breastDevelopment");
		others = (String) map.get("others");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setHeight(height);
				opdGynaecology1.setWeight(weight);
				opdGynaecology1.setObesity(obesity);
				opdGynaecology1.setAcne(acne);
				opdGynaecology1.setHairDistribution(hairDistribution);
				opdGynaecology1.setBreastDevelopment(breastDevelopment);
				opdGynaecology1.setGalactorrhoeaText(galactorrhoea);
				opdGynaecology1.setPigmentation(pigmentation);
				opdGynaecology1.setOthers(others);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);

				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setHeight(height);
				opdGynaecology.setWeight(weight);
				opdGynaecology.setObesity(obesity);
				opdGynaecology.setAcne(acne);
				opdGynaecology.setHairDistribution(hairDistribution);
				opdGynaecology.setBreastDevelopment(breastDevelopment);
				opdGynaecology.setGalactorrhoeaText(galactorrhoea);
				opdGynaecology.setPigmentation(pigmentation);
				opdGynaecology.setOthers(others);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitMedicalSurgicalHistory(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		String pastMedicalHistory = "";
		String pastSurgicalHistory = "";
		String familyHistory = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");

		pastMedicalHistory = (String) map.get("pastMedicalHistory");
		pastSurgicalHistory = (String) map.get("pastSurgicalHistory");
		familyHistory = (String) map.get("familyHistory");

		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");

		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology1.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology1.setFamilyHistory(familyHistory);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);

				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setPastMedicalHistory(pastMedicalHistory);
				opdGynaecology.setPastSurgicalHistory(pastSurgicalHistory);
				opdGynaecology.setFamilyHistory(familyHistory);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean submitSocioEconomicHistory(Map<String, Object> map) {
		OpdGynaecology opdGynaecology = new OpdGynaecology();
		List<OpdGynaecology> opdGynaeList = new ArrayList<OpdGynaecology>();
		int visitId = 0;
		int hinId = 0;
		int deptId = 0;
		int hospitalId = 0;
		int gynaeId = 0;
		float menarchy = 0;
		String pastMc = "";
		String presentMc = "";
		String lmp = "";
		String pmp1 = "";
		String pmp2 = "";
		String obstetricHistory = "";
		String dyspareunia = "";
		String fertilePeriod = "";
		String conceive = "";
		String coitusPrWk = "";
		String userName = "";
		Date date = null;
		String time = "";
		visitId = (Integer) map.get("visitId");
		hinId = (Integer) map.get("hinId");
		deptId = (Integer) map.get("deptId");
		hospitalId = (Integer) map.get("hospitalId");
		menarchy = (Float) map.get("menarchy");
		pastMc = (String) map.get("pastMc");
		presentMc = (String) map.get("presentMc");
		lmp = (String) map.get("lmp");
		pmp1 = (String) map.get("pmp1");
		pmp2 = (String) map.get("pmp2");
		obstetricHistory = (String) map.get("obstetricHistory");
		dyspareunia = (String) map.get("dyspareunia");
		fertilePeriod = (String) map.get("fertilePeriod");
		conceive = (String) map.get("conceive");
		coitusPrWk = (String) map.get("coitusPrWk");
		userName = (String) map.get("userName");
		date = (Date) map.get("date");
		time = (String) map.get("time");
		Session session;
		session = (Session) getSession();
		Criteria c = session.createCriteria(OpdGynaecology.class).add(
				Restrictions.eq("Visit.Id", visitId));
		opdGynaeList = c.list();
		boolean successfullyAdded = false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (opdGynaeList.size() > 0) {
				for (OpdGynaecology opd : opdGynaeList) {
					gynaeId = opd.getId();
				}
				OpdGynaecology opdGynaecology1 = (OpdGynaecology) getHibernateTemplate()
						.load(OpdGynaecology.class, gynaeId);
				opdGynaecology1.setMenarchy(menarchy);
				opdGynaecology1.setPastMc(pastMc);
				opdGynaecology1.setPresentMc(presentMc);
				opdGynaecology1.setLmp(lmp);
				opdGynaecology1.setPmp1(pmp1);
				opdGynaecology1.setPmp2(pmp2);
				opdGynaecology1.setObstetricHistory(obstetricHistory);
				opdGynaecology1.setDyspareunia(dyspareunia);
				opdGynaecology1.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology1.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology1.setConceive(conceive);
				opdGynaecology1.setLastChgBy(userName);
				opdGynaecology1.setLastChgDate(date);
				opdGynaecology1.setLastChgTime(time);
				hbt.update(opdGynaecology1);
				hbt.refresh(opdGynaecology1);
			} else {

				opdGynaecology.setMenarchy(menarchy);
				opdGynaecology.setPastMc(pastMc);
				opdGynaecology.setPresentMc(presentMc);
				opdGynaecology.setLmp(lmp);
				opdGynaecology.setPmp1(pmp1);
				opdGynaecology.setPmp2(pmp2);
				opdGynaecology.setObstetricHistory(obstetricHistory);
				opdGynaecology.setDyspareunia(dyspareunia);
				opdGynaecology.setAwarenessFertilePeriod(fertilePeriod);
				opdGynaecology.setFrequencyCoitusWk(coitusPrWk);
				opdGynaecology.setConceive(conceive);
				opdGynaecology.setLastChgBy(userName);
				opdGynaecology.setLastChgDate(date);
				opdGynaecology.setLastChgTime(time);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				opdGynaecology.setHospital(masHospital);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				opdGynaecology.setDepartment(masDepartment);

				if (visitId != 0) {
					Visit visit = new Visit();
					visit.setId(visitId);
					opdGynaecology.setVisit(visit);
				}
				if (hinId != 0) {
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGynaecology.setHin(patient);
				}
				hbt.save(opdGynaecology);
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map<String, Object> showUploadingDocumentsJsp(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			patientDataList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		return map;
	}
	
	public Map<String, Object> submitUploadDocuments(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<UploadDocuments> uploadDocumentsList = new ArrayList<UploadDocuments>();
		String fileName = null;
		String fileExtension = null;
		String patientName = box.getString("patientName");
		String age = box.getString("age");
		String sex = box.getString("sex");
		String hinNo = box.getString("hinNo");
		String address = box.getString("address");
		String hin_no = box.getString("hin_no");

		int hinId = box.getInt(HIN_ID);
		int inpatientId = box.getInt("inpatientId");
		int hospitalId = box.getInt("hospitalId");
		String userName = box.getString("userName");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		
		int uploadCount = box.getInt("uploadCount");
		String uploadURL = box.getString("uploadURL");
		String fileSeparator = box.getString("fileSeparator");
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			 hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			Patient patient=(Patient) hbt.get(Patient.class, hinId);
          
			if(uploadCount>0){
				for (int i = 1; i <= uploadCount; i++) {
					
					if(!box.getString("filename"+i).equals("0"))
					{
					UploadDocuments uploadDocuments = new UploadDocuments();
					File file=null;
					file = new File(uploadURL+fileSeparator+hin_no +fileSeparator+box.getString("filename"+i));

					File f = new File(uploadURL);
					try {
						if (f.exists()) {
							f.delete();
							f.mkdir();
							FileInputStream is = new FileInputStream(file);
							long length = file.length();
							
							if (length > Integer.MAX_VALUE) {
								// File is too large
							}
							// Create the byte array to hold the data
							byte[] bytes = new byte[(int)length];
							int offset = 0;
							int numRead = 0;
							while (offset < bytes.length
									&& (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
								offset += numRead;
							}

							if (offset < bytes.length) {
								throw new IOException("Could not completely read file "+file.getName());
							}
						
							uploadDocuments.setPatientDocument(bytes);
							is.close();
						} else {
							f.mkdir();
							FileInputStream is = new FileInputStream(file);
							long length = file.length();
							//ByteBuffer byteBuff=null;
							//  int modLength=length/
							if (length > Integer.MAX_VALUE) {
								// File is too large
							}
							// Create the byte array to hold the data
							byte[] bytes = new byte[(int)length];
							int offset = 0;
							int numRead = 0;
							while (offset < bytes.length
									&& (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
								offset += numRead;
							}

							if (offset < bytes.length) {
								throw new IOException("Could not completely read file "+file.getName());
							}
							is.close();							
							uploadDocuments.setPatientDocument(bytes);
						}						
						//fileExtension=strToken.nextToken();

					} catch (Exception e) {
						e.printStackTrace();
					}
					
					StringTokenizer strToken = new StringTokenizer(box
							.getString("filename" + i), ".");
					fileName = strToken.nextToken();
					fileExtension = strToken.nextToken();
					patientName=patient.getPFirstName();
					if(patient.getPMiddleName()!= null){
					patientName=patientName+" "+patient.getPMiddleName();
					}
					if(patient.getPLastName()!= null){
					patientName=patientName+" "+patient.getPLastName();
					}
					
					uploadDocuments.setPatientName(patientName);
					uploadDocuments.setSex(patient.getSex().getAdministrativeSexName());
					
					String currentAge = "-";
					try
					{
							 age = patient.getAge();
							try{
								if(!age.equals(""))
								currentAge = HMSUtil.calculateAgeForADT(age,patient.getRegDate());
							}catch(Exception ex){
								ex.printStackTrace();
							}
					}
					catch(Exception exception)
					{
						currentAge="-";
					}
					
					uploadDocuments.setAge(age);
					if (address != null)
						uploadDocuments.setAddress(address);
					
					uploadDocuments.setFileExtension(fileExtension);
					uploadDocuments.setFileName(fileName);

					
						uploadDocuments.setHin(patient);
					if (box.getInt("visitId") != 0) {
						Visit visit= new Visit();
						visit.setId(box.getInt("visitId"));
						uploadDocuments.setVisit(visit);
					}
					if (inpatientId != 0) {
						Inpatient inpatient = new Inpatient();
						inpatient.setId(inpatientId);
						uploadDocuments.setInpatient(inpatient);
					}
					uploadDocuments.setDescription(box.getString("description"+ i));
					uploadDocuments.setUploadDate(date);
					uploadDocuments.setLastChgDate(date);
					uploadDocuments.setLastChgTime(time);
					Users users=new Users();
					users.setId(box.getInt(USER_ID));
					uploadDocuments.setLastChgBy(users);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					uploadDocuments.setHospital(masHospital);
					hbt.save(uploadDocuments);

					//file.delete();
					}
					}// end of 'IF'

			}// end of 'for' loop
		    map.put("dataSaved", true);
		    hbt.flush();
		    hbt.clear();
            }// end of 'try' loop
		catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
			e.printStackTrace();
			map.put("dataSaved", false);
		}
		
		return map;

	}
	
	

	/*public Map<String, Object> submitUploadDocuments(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<UploadDocuments> uploadDocumentsList = new ArrayList<UploadDocuments>();
		String fileName = null;
		String fileExtension = null;
		String patientName = box.getString("patientName");
		String age = box.getString("age");
		String sex = box.getString("sex");
		String hinNo = box.getString("hinNo");
		String address = box.getString("address");
		int hinId = box.getInt("hinId");
		int inpatientId = box.getInt("inpatientId");

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);

		int hospitalId = box.getInt("hospitalId");
		String userName = box.getString("userName");

		Integer userId = Integer.parseInt(box.getString("usersId"));
		Users users = new Users();
		users.setId(userId);

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			// hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			// hbt.setFetchSize(16*1024*1024);
			File file = null;
			for (int i = 1; i <= 5; i++) {
				if (!box.getString("filename" + i).equals("0")) {
					file = new File(box.getString("uploadURL") + "/"
							+ box.getString("filename" + i));
					FileInputStream is = new FileInputStream(file);
					long length = file.length();
					ByteBuffer byteBuff = null;
					// int modLength=length/
					if (length > Integer.MAX_VALUE) {
						// File is too large
					}

					// Create the byte array to hold the data
					byte[] bytes = new byte[(int) length];

					int offset = 0;
					int numRead = 0;
					while (offset < bytes.length
							&& (numRead = is.read(bytes, offset, bytes.length
									- offset)) >= 0) {
						offset += numRead;

					}
					
					 * while (offset < bytes.length && (numRead=is.read(bytes,
					 * offset, )) >= 0) { offset += 1000;
					 * if(offset>bytes.length) offset=offset-bytes.length; }
					 

					if (offset < bytes.length) {
						throw new IOException("Could not completely read file "
								+ file.getName());

					}

					is.close();
					// Close the input stream and return bytes
					StringTokenizer strToken = new StringTokenizer(
							box.getString("filename" + i), ".");

					fileName = strToken.nextToken();
					fileExtension = strToken.nextToken();
					UploadDocuments uploadDocuments = new UploadDocuments();
					String dataInput = new String(bytes);
					uploadDocuments.setPatientDocument(bytes);
					
					// uploadDocuments.setPatientDocument(is.toString());
					uploadDocuments.setPatientName(patientName);
					uploadDocuments.setSex(sex);
					uploadDocuments.setAge(age);
					if (address != null) {
						uploadDocuments.setAddress(address);
					}
					uploadDocuments.setFileExtension(fileExtension);
					uploadDocuments.setFileName(fileName);

					if (hinId != 0) {
						Patient patient = new Patient();
						patient.setId(hinId);
						uploadDocuments.setHin(patient);
					}
					if (inpatientId != 0) {
						Inpatient inpatient = new Inpatient();
						inpatient.setId(inpatientId);
						uploadDocuments.setInpatient(inpatient);
					}
					uploadDocuments.setDescription(box.getString("description"
							+ i));
					uploadDocuments.setUploadDate(date);
					uploadDocuments.setLastChgDate(date);
					uploadDocuments.setLastChgTime(time);
					uploadDocuments.setLastChgBy(users);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					uploadDocuments.setHospital(masHospital);
					hbt.save(uploadDocuments);

					file.delete();
				}// end of 'IF'

			}// end of 'for' loop
		}// end of 'try' loop
		catch (Exception e) {
			e.printStackTrace();
		}
		map.put("dataSaved", true);

		return map;

	}*/
	
	
	/*public Map<String, Object> viewPatientDetails(Map<String, Object> map) {
		Session session = (Session) getSession();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		int visitId = 0;
		int inpatientId=0;
		if(map.get("visitId")!=null){
			visitId = (Integer)map.get("visitId");
		}
		if(map.get(INPATIENT_ID)!=null){
			inpatientId = (Integer)map.get(INPATIENT_ID);
		}
		String inputField = (String) map.get("inputField");
		String flag = (String) map.get("flag");
		String flag1 = (String) map.get("flag1");
		String message = null;
		String destUploadURL = "";
		if(map.get("destUploadURL")!=null && !map.get("destUploadURL").equals(""))
		{
			destUploadURL=(String)map.get("destUploadURL");
		}
		Criteria criteria = null;
		if(inpatientId!=0)
		{
			Inpatient inpatient=(Inpatient)session.load(Inpatient.class,inpatientId);
			map.put("inpatient", inpatient);
			
		}
		
		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("Status", "y")).add(
					Restrictions.eq("HinNo", inputField)).list();

			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(Inpatient.class).add(
					//	Restrictions.eq("Status", "y")).add(
						Restrictions.eq("AdNo", inputField)).list();
			}

			if (visitList.size() == 0 && inpatientList.size() == 0
					&& patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			map.put("patientList", patientList);
			map.put("inpatientList", inpatientList);

		} else if (flag.equals("view") || flag1.equals("viewDocuments")) {
			if(inpatientId!=0)
			{
			String uploadURL = (String) map.get("uploadURL");
			patientList = session.createCriteria(UploadDocuments.class)
					.createAlias("Hin", "p").add(
							Restrictions.eq("p.HinNo", inputField)).add(Restrictions.isNull("Inpatient")).list();
			}
			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(UploadDocuments.class)
						.createAlias("Inpatient", "ip").add(
								Restrictions.eq("ip.Id", inpatientId)).list();
			}
			

			if (inpatientList.size() == 0 && patientList.size() == 0) {
				message = "No record Found !!";
			}
			System.out.println("inpatientList--- "+inpatientList.size());
			map.put("message", message);
			if(patientList.size() > 0){
			map.put("patientList", patientList);
			}
			if(inpatientList.size() > 0){
			map.put("inpatientList", inpatientList);
			}
			*//**
			 * Commented By Ritu as it is not required for view documents
			 *//*
			String[] files = null;
			if (patientList.size() > 0) {
				files = new String[patientList.size()];
				Iterator iterator = patientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					// //System.out.println("filename="+files[counter]);
					try {
						FileOutputStream is = new FileOutputStream(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						is.write(out);
						is.flush(); 
						is.close();
						HMSUtil.copyCompletlyFolder(new File(uploadURL),new File(destUploadURL));
						
					
					} catch (Exception e) {
						e.printStackTrace();
					}
					counter++;
				}

			}
			if (inpatientList.size() > 0) {
				files = new String[inpatientList.size()];
				Iterator iterator = inpatientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					try {
						FileOutputStream is = new FileOutputStream(uploadURL
								 + files[counter]);
						

						is.write(uploadDocuments.getPatientDocument());
						is.flush();
						is.close();
						File srcFile=new File(uploadURL+uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						File destFile = new File(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						
						HMSUtil.copyfile(srcFile , destFile);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					counter++;
				}
			}

		}

		
		 * //System.out.println("IN DATA SERVICE
		 * patientList="+patientList.size()); //System.out.println("IN DATA
		 * SERVICE inpatientList="+inpatientList.size());
		 
		return map;

	}*/
	
	
	public Map<String, Object> viewPatientDetails(Map<String, Object> map) {
		Session session = (Session) getSession();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		int visitId = 0;
		int inpatientId=0;
		if(map.get("visitId")!=null){
			visitId = (Integer)map.get("visitId");
		}
		if(map.get(INPATIENT_ID)!=null){
			inpatientId = (Integer)map.get(INPATIENT_ID);
		}
		String inputField = (String) map.get("inputField");
		String flag = (String) map.get("flag");
		String flag1 = (String) map.get("flag1");
		String message = null;
		String destUploadURL = "";
		if(map.get("destUploadURL")!=null && !map.get("destUploadURL").equals(""))
		{
			destUploadURL=(String)map.get("destUploadURL");
		}
		Criteria criteria = null;
		if(inpatientId!=0)
		{
			Inpatient inpatient=(Inpatient)session.load(Inpatient.class,inpatientId);
			map.put("inpatient", inpatient);
			
		}
		
		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			patientList = session.createCriteria(Patient.class).add(
					Restrictions.eq("Status", "y")).add(
					Restrictions.eq("HinNo", inputField)).list();

			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(Inpatient.class).add(
					//	Restrictions.eq("Status", "y")).add(
						Restrictions.eq("AdNo", inputField)).list();
			}

			if (visitList.size() == 0 && inpatientList.size() == 0
					&& patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			map.put("patientList", patientList);
			map.put("inpatientList", inpatientList);

		} else if (flag.equals("view") || flag1.equals("viewDocuments")) {
			if(inpatientId!=0)
			{
			String uploadURL = (String) map.get("uploadURL");
//			patientList = session.createCriteria(UploadDocuments.class)
//					.createAlias("Hin", "p").add(
//							Restrictions.eq("p.HinNo", inputField))
//							.add(Restrictions.isNull("Inpatient")).list();
//			}
//			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(UploadDocuments.class)
						.createAlias("Inpatient", "ip").add(
								Restrictions.eq("ip.Id", inpatientId)).list();
			}
			
//			for (Inpatient inpatient : inpatientList) {
//				try {
//
//					String content = "This is the content to write into file";
//
//					File file = new File("/users/mkyong/filename.txt");
//
//					// if file doesnt exists, then create it
//					if (!file.exists()) {
//						file.createNewFile();
//					}
//
//					FileWriter fw = new FileWriter(file.getAbsoluteFile());
//					BufferedWriter bw = new BufferedWriter(fw);
//					bw.write(content);
//					bw.close();
//
//					System.out.println("Done");
//
//				} catch (IOException e) {
//					e.printStackTrace();
//				}
//			}
			

			if (inpatientList.size() == 0 && patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			if(patientList.size() > 0){
			map.put("patientList", patientList);
			}
			if(inpatientList.size() > 0){
			map.put("inpatientList", inpatientList);
			}
			/**
			 * Commented By Ritu as it is not required for view documents
			 */
			/*String[] files = null;
			if (patientList.size() > 0) {
				files = new String[patientList.size()];
				Iterator iterator = patientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					// //System.out.println("filename="+files[counter]);
					try {
						FileOutputStream is = new FileOutputStream(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						is.write(out);
						is.flush(); 
						is.close();
						HMSUtil.copyCompletlyFolder(new File(uploadURL),new File(destUploadURL));
						
					
					} catch (Exception e) {
						e.printStackTrace();
					}
					counter++;
				}

			}
			if (inpatientList.size() > 0) {
				files = new String[inpatientList.size()];
				Iterator iterator = inpatientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					try {
						FileOutputStream is = new FileOutputStream(uploadURL
								 + files[counter]);
						

						is.write(uploadDocuments.getPatientDocument());
						is.flush();
						is.close();
						File srcFile=new File(uploadURL+uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						File destFile = new File(destUploadURL
								+ uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						
						HMSUtil.copyfile(srcFile , destFile);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					counter++;
				}
			}*/

		}

		/*
		 * //System.out.println("IN DATA SERVICE
		 * patientList="+patientList.size()); //System.out.println("IN DATA
		 * SERVICE inpatientList="+inpatientList.size());
		 */
		return map;

	}

	/*public Map<String, Object> viewPatientDetails(Map<String, Object> map) {
		Session session = (Session) getSession();

		Map<String, Object> returnMap = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		List<Visit> visitList = new ArrayList<Visit>();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");

		String inputField = (String) map.get("inputField");
		String flag = (String) map.get("flag");
		String flag1 = (String) map.get("flag1");
		String message = null;

		Criteria criteria = null;
		if (flag.equals("upload") && !flag1.equals("viewDocuments")) {
			patientList = session.createCriteria(Patient.class)
					.add(Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("HinNo", inputField)).list();

			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(Inpatient.class)
						.add(Restrictions.eq("Status", "y"))
						.add(Restrictions.eq("AdNo", inputField)).list();
			}

			if (visitList.size() == 0 && inpatientList.size() == 0
					&& patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			map.put("patientList", patientList);
			map.put("inpatientList", inpatientList);

		} else if (flag.equals("view") || flag1.equals("viewDocuments")) {
			String uploadURL = (String) map.get("uploadURL");
			patientList = session.createCriteria(UploadDocuments.class)
					.createAlias("Hin", "p")
					.add(Restrictions.eq("p.HinNo", inputField)).list();

			if (patientList.size() == 0) {
				inpatientList = session.createCriteria(UploadDocuments.class)
						.createAlias("Inpatient", "ip")
						.add(Restrictions.eq("ip.AdNo", inputField)).list();
			}

			if (inpatientList.size() == 0 && patientList.size() == 0) {
				message = "No record Found !!";
			}
			map.put("message", message);
			map.put("patientList", patientList);
			map.put("inpatientList", inpatientList);
			String[] files = null;
			if (patientList.size() > 0) {
				files = new String[patientList.size()];
				Iterator iterator = patientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();

					try {
						FileOutputStream is = new FileOutputStream(uploadURL
								+ "\\" + uploadDocuments.getFileName() + "."
								+ uploadDocuments.getFileExtension());
						is.flush();

						is.write(uploadDocuments.getPatientDocument());

						is.close();
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					counter++;
				}

			}
			if (inpatientList.size() > 0) {
				files = new String[inpatientList.size()];
				Iterator iterator = inpatientList.iterator();
				int counter = 0;
				while (iterator.hasNext()) {
					UploadDocuments uploadDocuments = (UploadDocuments) iterator
							.next();
					files[counter] = uploadDocuments.getFileName() + "."
							+ uploadDocuments.getFileExtension();
					try {
						FileOutputStream is = new FileOutputStream(uploadURL
								+ "\\" + files[counter]);
						is.flush();

						is.write(uploadDocuments.getPatientDocument());

						is.close();
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					counter++;
				}
			}

		}

		
		 * 
		 * patientList="+patientList.size()); SERVICE
		 * inpatientList="+inpatientList.size());
		 
		return map;

	}*/

	public Map<String, Object> checkItem(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = 0;
		int hospitalId=0;;
		if (dataMap.get(HOSPITAL_ID) != null) {
			hospitalId=(Integer)dataMap.get(HOSPITAL_ID);
		}
		if (dataMap.get("visitId") != null) {
			visitId = Integer.parseInt("" + dataMap.get("visitId"));
		}
		String pvmsNo = "";
		if (dataMap.get("pvmsNo") != null) {
			pvmsNo = (String) dataMap.get("pvmsNo");
		}
		String departmentCodeForPharmacy = "";
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("pharmacy.properties");
		try {
			Properties prop = new Properties();
			prop.load(new FileInputStream(new File(resourcePath.getFile())));
			departmentCodeForPharmacy = prop
					.getProperty("departmentCodeOfpharmacyForOpd");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Session session = (Session) getSession();
		List<PatientAllergicDrugsDt> patientAllergicDrugsDtList = new ArrayList<PatientAllergicDrugsDt>();
		patientAllergicDrugsDtList = (List<PatientAllergicDrugsDt>) session
				.createCriteria(PatientAllergicDrugsDt.class)
				.createAlias("PatientAllergicDrugsHd", "pHd")
				.createAlias("pHd.Visit", "v")
				.add(Restrictions.eq("v.Id", visitId))
				.createAlias("Item", "it")
				.add(Restrictions.eq("it.PvmsNo", pvmsNo)).list();
		
		StoreItemBatchStock itemBatchStock=(StoreItemBatchStock) session.createCriteria(StoreItemBatchStock.class)
				.createAlias("Item", "item")
				.createAlias("Hospital", "h")
				.createAlias("Department", "dept")
				.add(Restrictions.eq("item.PvmsNo", pvmsNo))
				.add(Restrictions.eq("dept.DepartmentCode",departmentCodeForPharmacy).ignoreCase())
				.add(Restrictions.eq("h.Id", hospitalId))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
				.add(Restrictions.and(Restrictions.isNotNull("ExpiryDate"),
							Restrictions.ge("ExpiryDate",HMSUtil.convertStringTypeDateToDateType((String)HMSUtil.getCurrentDateAndTime().get("currentDate")))))
						.setMaxResults(1)
						.uniqueResult();
				
				map.put("patientAllergicDrugsDtList", patientAllergicDrugsDtList);
				map.put("itemBatchStock", itemBatchStock);
		return map;
	}
	public String generatePrecriptionNo(int hinId) {
		org.hibernate.Session session = getSession();
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		List<Object> objectList = new ArrayList<Object>();
		String prescriptionNo = "1";
		String qry = "";
		try {
			objectList = (List<Object>) session
					.createSQLQuery(
							"select max(prescription_id)+1  from patient_prescription_header h,patient p where p.hin_id=h.hin_id and p.hin_id="
									+ hinId + " ").list();
					
			if(objectList.size()>0)
			{
				for (Object object : objectList) {
			
				if (object != null) {

					/*
					 * prescriptionNo = Integer.toString((((Double) object)
					 * .intValue()));
					 */
					prescriptionNo = Integer.toString((((Integer) object)
							.intValue()));

				}

			}
		}

			// "+prescriptionNo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return prescriptionNo;
	}

	@SuppressWarnings("unchecked")
	public String generateDiagNumber(int subChargeId, int hospitalId,DgOrderdt dgOrderdt,String subChargeCode,Users users) {
		Integer dgSeqNo = 0;
		String diagSeqNo = "";
		Map<String,Object> utilMap = new HashMap<String,Object>();
		utilMap = (Map)HMSUtil.getCurrentDateAndTime();
		String date = (String)utilMap.get("currentDate");
		String time = (String)utilMap.get("currentTime");
		List<DiagParam> diagSeqNoList = new ArrayList<DiagParam>();
		List<DgSampleCollectionDetails> dgDetailsList = new ArrayList<DgSampleCollectionDetails>();

		Session session = (Session) getSession();

		try {
			diagSeqNoList = session.createCriteria(DiagParam.class)
					.createAlias("SubCharge", "sc").createAlias("Hospital", "hospital")
					.add(Restrictions.eq("hospital.Id", hospitalId))
					.add(Restrictions.eq("sc.Id", subChargeId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		// dgDetailsList =
		// session.createCriteria(DgSampleCollectionDetails.class).add(Restrictions.).list();

		dgDetailsList = getHibernateTemplate()
				.find("select dg from DgSampleCollectionDetails dg where Id = (select max(Id) from DgSampleCollectionDetails)  ");
		String lastDiagNo = "";
		if (dgDetailsList.size() > 0) {
			for (DgSampleCollectionDetails collDetails : dgDetailsList) {
				lastDiagNo = collDetails.getDiagNo();
			}
			if (lastDiagNo == null) {
				lastDiagNo = "";
			}
		}
		String lastMnt = "";
		String lastYr = "";

		
		String currentMonth = date.substring(date.indexOf("/") + 1,
				date.lastIndexOf("/"));
		String currentYear = date.substring(date.lastIndexOf("/") + 1);

		StringTokenizer str = new StringTokenizer(lastDiagNo, "/");

		int id = 0;
		String criteria = "";
		int seqNo = 0;
		String subcharge = "";
		if (diagSeqNoList.size() > 0) {
			for (DiagParam dgParam : diagSeqNoList) {
				id = dgParam.getId();
				seqNo = dgParam.getSeqNo();
				subcharge = dgParam.getSubCharge().getSubChargecodeCode();
				criteria = dgParam.getCriteria();
				dgSeqNo = ++seqNo;
			}
			if (criteria.equalsIgnoreCase("c")) {
				if(null !=subcharge && !subcharge.endsWith("")){
				diagSeqNo = dgSeqNo.toString().concat("/").concat(subcharge)
						.concat("/").concat(currentMonth).concat("/")
						.concat(currentYear);
				}
			} else if (criteria.equalsIgnoreCase("m")) {
				while (str.hasMoreTokens()) {
					str.nextToken();
					str.nextToken();
					if (str.hasMoreTokens()) {
						lastMnt = str.nextToken();
					}
					if (str.hasMoreTokens()) {
						lastYr = str.nextToken();
					}
				}
				if (!lastMnt.equals(currentMonth)
						&& !lastYr.equals(currentYear)) {
					dgSeqNo = 1;
				}
				diagSeqNo = dgSeqNo.toString().concat("/").concat(subcharge)
						.concat("/").concat(currentMonth).concat("/")
						.concat(currentYear);
			} else if (criteria.equalsIgnoreCase("y")) {
				while (str.hasMoreTokens()) {
					str.nextToken();
					if (str.hasMoreTokens()) {
						lastYr = str.nextToken();
					}
				}
				if (!lastYr.equals(currentYear)) {
					dgSeqNo = 1;
				}
				diagSeqNo = dgSeqNo.toString().concat("/").concat(currentYear)
						.concat(subcharge).concat("/").concat(currentMonth)
						.concat("/").concat(currentYear);
			}

			DiagParam diagParam = (DiagParam) hbt.load(DiagParam.class, id);
			diagParam.setSeqNo(dgSeqNo);
			hbt.update(diagParam);

		}else{
			DiagParam dgParam= new DiagParam();
			int subChargecodeId = 0;
			subChargecodeId = dgOrderdt.getSubChargeid().getId();
			
			MasMainChargecode maincharge1 = new MasMainChargecode();
			maincharge1.setId(dgOrderdt.getMainChargecode().getId());
			dgParam.setMainCharge(maincharge1);
			MasSubChargecode subCharge1 = new MasSubChargecode();
			subCharge1.setId(dgOrderdt.getSubChargeid().getId());
			dgParam.setSubCharge(subCharge1);
			
			dgParam.setSeqNo(1);
			dgParam.setPrefix(subChargeCode.substring(0, 2));
			dgParam.setCriteria("C");
			dgParam.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			dgParam.setLastChgTime(time);
			dgParam.setLastChgBy(users);
			if(hospitalId>0){
				MasHospital hospital=new MasHospital();
				hospital.setId(hospitalId);
				dgParam.setHospital(hospital);
			}
			
			hbt.save(dgParam); 
			
			dgSeqNo = 1;
			
			//if (criteria.equalsIgnoreCase("c")) {
				diagSeqNo = dgSeqNo.toString().concat("/").concat(subcharge)
						.concat("/").concat(currentMonth).concat("/")
						.concat(currentYear);
			/*} else if (criteria.equalsIgnoreCase("m")) {
				while (str.hasMoreTokens()) {
					str.nextToken();
					str.nextToken();
					if (str.hasMoreTokens()) {
						lastMnt = str.nextToken();
					}
					if (str.hasMoreTokens()) {
						lastYr = str.nextToken();
					}
				}
				if (!lastMnt.equals(currentMonth)
						&& !lastYr.equals(currentYear)) {
					dgSeqNo = 1;
				}
				diagSeqNo = dgSeqNo.toString().concat("/").concat(subcharge)
						.concat("/").concat(currentMonth).concat("/")
						.concat(currentYear);
			} else if (criteria.equalsIgnoreCase("y")) {
				while (str.hasMoreTokens()) {
					str.nextToken();
					if (str.hasMoreTokens()) {
						lastYr = str.nextToken();
					}
				}
				if (!lastYr.equals(currentYear)) {
					dgSeqNo = 1;
				}
				diagSeqNo = dgSeqNo.toString().concat("/").concat(currentYear)
						.concat(subcharge).concat("/").concat(currentMonth)
						.concat("/").concat(currentYear);
			}*/
		
		}
		return diagSeqNo;
	}

	public Map<String, Object> getDispensingPriceForItem(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> dispensingPriceList = new ArrayList<Object[]>();

		String pvmsNo = "";
		if (dataMap.get("pvmsNo") != null) {
			pvmsNo = (String) dataMap.get("pvmsNo");
		}
		Session session = (Session) getSession();
		dispensingPriceList = session
				.createCriteria(StoreItemBatchStock.class)
				.createAlias("Item", "i")
				.add(Restrictions.eq("i.PvmsNo", pvmsNo))
				.setProjection(
						Projections.projectionList()
								.add(Projections.max("DispencingPrice"))
								.add(Projections.property("i.Id"))
								.add(Projections.groupProperty("i.Id"))).list();

		if (dispensingPriceList.size() > 0) {
			map.put("dispensingPriceList", dispensingPriceList);
		}
		return map;

	}

	public Map<String, Object> getItemBrandName(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> brandList = new ArrayList<Object[]>();
		String pvmsNo = "";
		int itemId = 0;
		String query = "";
		String query2 = "";
		int hospitalId = 0;
		int departmentId = 0;
		if (dataMap.get("pvmsNo") != null) {
			pvmsNo = (String) dataMap.get("pvmsNo");
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = (Integer) dataMap.get("hospitalId");
		}
		if (dataMap.get("departmentId") != null) {
			departmentId = (Integer) dataMap.get("departmentId");
		}
		/*
		 * if (dataMap.get("itemId") != null) { itemId = (Integer)
		 * dataMap.get("itemId"); }
		 */
		Session session = (Session) getSession();
		if (pvmsNo != null && !pvmsNo.equals("")) {
			query = " Select brand.Id , brand.BrandName ,brand.Manufacturer from MasStoreBrand brand , MasStoreItem item where brand.Item.Id = item.Id and item.PvmsNo='"
					+ pvmsNo
					+ "' and item.Department.Id ="
					+ departmentId
					+ " and item.Hospital.Id=" + hospitalId + "";
		}

		brandList = getHibernateTemplate().find(query);
		if (brandList.size() == 0) {
			Criteria criteria2 = session
					.createCriteria(MasStoreBrand.class)
					.setProjection(
							Projections.projectionList()
									.add(Projections.property("Id"))
									.add(Projections.property("BrandName"))
									.add(Projections.property("Manufacturer")))
					.add(Restrictions.eq("Status", "Y").ignoreCase());
			// query2 =
			// " Select brand.Id , brand.BrandName ,brand.Manufacturer from MasStoreBrand brand where brand.Status='Y' ";
			brandList = criteria2.list();
		}

		if (brandList.size() > 0) {
			map.put("brandList", brandList);
		}
		return map;
	}

	public Map<String, Object> getItemBrandManufacturerName(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> brandManufacturerList = new ArrayList<Object[]>();
		int brandId = 0;

		if (dataMap.get("brandId") != null) {
			brandId = (Integer) dataMap.get("brandId");
		}
		Session session = (Session) getSession();
		String query = " Select manu.Id, manu.ManufacturerCode, manu.ManufacturerName,item.Id,item.Nomenclature,item.PvmsNo from MasStoreBrand as mas join mas.Manufacturer as manu join mas.Item as item where mas.Id="
				+ brandId;

		brandManufacturerList = getHibernateTemplate().find(query);

		if (brandManufacturerList.size() > 0) {
			map.put("brandManufacturerList", brandManufacturerList);
		}
		return map;
	}

	public Map<String, Object> getDrugTypeOfItem(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> drugTypeList = new ArrayList<String>();
		String pvmsNo = "";
		if (dataMap.get("pvmsNo") != null) {
			pvmsNo = (String) dataMap.get("pvmsNo");
		}
		Session session = (Session) getSession();
		drugTypeList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", pvmsNo))
				.createAlias("ItemType", "it")
				.setProjection(Projections.property("it.ItemTypeName")).list();
		if (drugTypeList.size() > 0) {
			map.put("drugType", drugTypeList.get(0));
		}
		return map;
	}

	/** end of all methods * */

	public Map<String, Object> getPhysiotherapistList(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> phytherapyList = new ArrayList<MasEmployee>();
		List<MasModularity> modularityList = new ArrayList<MasModularity>();
		List<Visit> visitTokenList = new ArrayList<Visit>();

		List<Visit> patientDataList = new ArrayList<Visit>();
		Session session = (Session) getSession();
		int deptId = 0;
		int visitId = 0;
		int token = 0;
		if (dataMap.get("deptId") != null) {
			deptId = (Integer) dataMap.get("deptId");
		}
		if (dataMap.get("visitId") != null) {
			visitId = (Integer) dataMap.get("visitId");
		}
		if (dataMap.get("token") != null) {
			token = (Integer) dataMap.get("token");
		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Visit visitObject = new Visit();
		visitObject = (Visit) getHibernateTemplate().load(Visit.class, visitId);
		visitObject.setDisplayToken(token);
		visitObject.setTokenStatus("y");
		hbt.update(visitObject);
		phytherapyList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.eq("Department.Id", deptId)).list();
		// modularityList = session.createCriteria(MasModularity.class).list();
		modularityList = getHibernateTemplate().find(
				"from  MasModularity where Status ='y' ");
		patientDataList = session.createCriteria(Visit.class)
				.add(Restrictions.eq("Id", visitId)).list();

		/*
		 * Date currentDate = new Date(); visitTokenList =
		 * session.createCriteria
		 * (Visit.class).add(Restrictions.eq("TokenStatus", "y"))
		 * .add(Restrictions.eq("Department.Id", deptId))
		 * .add(Restrictions.eq("VisitDate", currentDate))
		 * .add(Restrictions.isNotNull("DisplayToken")).list();
		 */
		map.put("phytherapyList", phytherapyList);
		map.put("modularityList", modularityList);
		map.put("patientDataList", patientDataList);
		// map.put("visitTokenList", visitTokenList);
		return map;

	}

	public Map<String, Object> getPhysiotherapistPatientList(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		List<Visit> visitPatientList = new ArrayList<Visit>();

		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		Map<String, Object> map = new HashMap<String, Object>();
		int deptId = (Integer) dataMap.get("deptId");
		int hinId = 0;
		int visitId = 0;
		String pFirstName = "";
		String pMiddleName = "";
		String pLastName = "";
		String hinNo = "";
		String flag = "";
		int visitNo = 0;

		List phyio_therapy_id = new ArrayList();
		String phyio_id = null;
		String deptName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		Date date = new Date();
		String category = "Doctor";
		List<Patient> patientList = new ArrayList<Patient>();
		int patient_hin = 0;
		try {

			if (dataMap.get("hinNo") != null
					&& !dataMap.get("hinNo").equals("")) {
				hinNo = (String) dataMap.get("hinNo");
			}
			if (dataMap.get("hinId") != null) {
				hinId = (Integer) dataMap.get("hinId");
			}
			if (dataMap.get("visitId") != null) {
				visitId = (Integer) dataMap.get("visitId");
			}
			if (dataMap.get("flag") != null && !dataMap.get("flag").equals("")) {
				flag = (String) dataMap.get("flag");
			}
			if (dataMap.get("visitNo") != null
					&& !dataMap.get("visitNo").equals("")) {
				visitNo = (Integer) dataMap.get("visitNo");
			}

			List<Object> objectList = new ArrayList<Object>();
			List<Object> visitList = new ArrayList<Object>();
			if (hinId != 0) {/*
							 * patientList = getHibernateTemplate() .find(
							 * "select patient from jkt.hms.masters.business.MasPhysiotherapyHeader as header join header.Patient as patient where patient.Id ="
							 * + hinId + " and header.VisitId.Id=" + visitId +
							 * "  ");
							 */
			} else {/*
					 * patientList = getHibernateTemplate() .find(
					 * "select patient from jkt.hms.masters.business.MasPhysiotherapyHeader as header join header.Patient as patient"
					 * );
					 */
			}
			Date dateTo = new Date();
			/*
			 * String sqlHinId=""; if(patientList.size()>0){ int counter=0; for
			 * (Patient patient : patientList) { if(counter==0){
			 * sqlHinId=""+patient.getId(); }else{
			 * sqlHinId=" , "+patient.getId(); ++counter; }
			 * 
			 * 
			 * } }
			 */

			// String tdate = HMSUtil.convertDateToStringWithoutTime(dateTo);
			// visitPatientList =
			// getHibernateTemplate().find("select visit from Visit as visit,OpdPatientDetails as o where visit.Id=o.Visit and visit.VisitDate ='"+tdate+"' and o.PhysiotherapyRequiredId='y' ");
			/*
			 * List<String> physiotherapyRequiredId = new ArrayList<String>();
			 * physiotherapyRequiredId.add("c");
			 * physiotherapyRequiredId.add("y");
			 */
			if (visitId != 0) {
				//
				visitPatientList = session
						.createCriteria(Visit.class)
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.createAlias("OpdPatientDetails", "o")
						.createAlias("o.Visit", "v")
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("o.PhysiotherapyRequiredId", "C")
								.ignoreCase())
						.add(Restrictions.lt("Id", visitId))
						// .setProjection( Projections.projectionList()
						// .add( Projections.groupProperty("Id") ))
						.list();
			} else if (flag.equals("p")) {
				//
				visitPatientList = session
						.createCriteria(Visit.class)
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.createAlias("OpdPatientDetails", "o")
						.createAlias("o.Visit", "v")
						.createAlias("Hin", "hin")
						.add(Restrictions.eq("hin.Id", hinId))
						// .add(Restrictions.eq("o.PhysiotherapyRequiredId",
						// "y"))
						// .add(Restrictions.eq("Department.Id", deptId))
						// .add(Restrictions.in("o.PhysiotherapyRequiredId",
						// physiotherapyRequiredId))
						.add(Restrictions.not(Restrictions.eq("VisitNo",
								visitNo))).addOrder(Order.desc("VisitNo"))
						.setMaxResults(10).list();

			} else {
				//
				visitPatientList = session.createCriteria(Visit.class)
						.add(Restrictions.eq("Status", "y").ignoreCase())
						/*
						 * .createAlias("OpdPatientDetails", "o")
						 * .createAlias("o.Visit", "v")
						 * .add(Restrictions.eq("o.PhysiotherapyRequiredId",
						 * "y"))
						 */
						.add(Restrictions.eq("Department.Id", 81))
						.add(Restrictions.eq("VisitDate", dateTo)).list();
				//

			}
			//

			doctorList = session
					.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empCategory")
					.createAlias("Department", "dept")
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("empCategory.EmpCategoryName",
							category)).add(Restrictions.eq("dept.Id", deptId))
					.list();
			deptName = getDepartmentNameFromId(deptId);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("visitPatientList", visitPatientList);
		map.put("doctorList", doctorList);
		map.put("deptName", deptName);
		map.put("hinNo", hinNo);
		map.put("visitNo", visitNo);
		return map;
	}

	public boolean submitOPDPhysiotherapyJsp(Box box) {
		boolean succesfullyAdded = false;
		boolean saved = false;
		List<OpdPatientDetails> opdList = new ArrayList<OpdPatientDetails>();
		Transaction tr = null;
		Session session = (Session) getSession();
		try {
			tr = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			int visitId = 0;

			if (box.getInt(VISIT_ID) != 0) {
				visitId = box.getInt(VISIT_ID);
			}
			int inpatientId = 0;
			if (box.getInt("inpatientId") != 0) {
				inpatientId = box.getInt("inpatientId");
			}

			int hinNo = box.getInt(HIN_NO);

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = (String) utilMap.get("currentDate");
			String time = (String) utilMap.get("currentTime");
			Vector modalityName = box.getVector("modalityNameId");
			Vector remarks = box.getVector("remarksId");
			if (visitId != 0) {
				Visit visitO = new Visit();
				visitO = (Visit) getHibernateTemplate().load(Visit.class,
						visitId);
				visitO.setTokenStatus("n");
				hbt.update(visitO);
			}
			MasPhysiotherapyHeader masHeader = new MasPhysiotherapyHeader();
			Patient p = new Patient();
			p.setId(hinNo);
			masHeader.setPatient(p);
			if (visitId != 0) {
				Visit v = new Visit();
				v.setId(visitId);
				masHeader.setVisitId(v);
			}
			if (inpatientId != 0) {
				Inpatient ip = new Inpatient();
				ip.setId(inpatientId);
				masHeader.setInpatient(ip);
			}
			if (box.getInt("physiotherapistNameId") != 0) {
				MasEmployee me = new MasEmployee();
				me.setId(box.getInt("physiotherapistNameId"));
				masHeader.setPhysiotherapistId(me);
			}
			if (box.getString("hoExaminationId") != null) {
				masHeader.setHoexamination(box.getString("hoExaminationId"));
			}
			if (box.getString("plancaregoalsId") != null) {
				masHeader.setPlanGoals(box.getString("plancaregoalsId"));
			}
			if (box.getString("prognosisReportsId") != null) {
				masHeader.setPrognosisReports(box
						.getString("prognosisReportsId"));
			}
			if (box.getString(USER_NAME) != null) {
				masHeader.setLastChgBy(box.getString(USER_NAME));
			}
			if (HMSUtil.convertStringTypeDateToDateType(currentDate) != null) {
				masHeader.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(currentDate));
			}
			if (time != null) {
				masHeader.setLastChgTime(time);
			}
			if (STATUS_YES != null) {
				masHeader.setStatus(STATUS_YES);
			}
			hbt.save(masHeader);
			hbt.refresh(masHeader);

			for (int i = 0; i < modalityName.size(); i++) {
				MasPhysiotherapyDetail detail = new MasPhysiotherapyDetail();
				if (modalityName.get(i) != null
						&& !modalityName.get(i).equals("")) {

					detail.setMpId(masHeader);
					detail.setModalityCode(modalityName.get(i).toString());
					detail.setModalityRemarks(remarks.get(i).toString());
					detail.setStatus(STATUS_YES);
					detail.setLastChgBy(box.getString(USER_NAME));
					detail.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(currentDate));
					detail.setLastChgTime(time);
					hbt.save(detail);
				}
			}
			//
			opdList = getHibernateTemplate()
					.find("select opdPatientDetails from OpdPatientDetails as opdPatientDetails where opdPatientDetails.Visit="
							+ visitId);
			int opdpatientId = 0;
			if (opdList.size() > 0) {
				opdpatientId = opdList.get(0).getId();
			}
			/*
			 * OpdPatientDetails details = new OpdPatientDetails(); details =
			 * (OpdPatientDetails) getHibernateTemplate().load(
			 * OpdPatientDetails.class, opdpatientId);
			 * details.setPhysiotherapyRequiredId("c"); hbt.update(details);
			 */
			List<Visit> visitList = new ArrayList<Visit>();
			visitList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("id", visitId)).list();
			for (Visit visit2 : visitList) {
				visit2.setStatus("n");
				hbt.update(visit2);
			}

			if (inpatientId != 0) {

				List<IpPhysioReqHeader> headerList = new ArrayList<IpPhysioReqHeader>();
				headerList = session.createCriteria(IpPhysioReqHeader.class)
						.add(Restrictions.eq("InpatientId.Id", inpatientId))
						.list();
				for (IpPhysioReqHeader iph : headerList) {
					iph.setStatus("c");
					hbt.update(iph);
				}
			}
			saved = true;
			tr.commit();
		} catch (Exception e) {
			saved = false;
			tr.rollback();
			e.printStackTrace();

		}
		return saved;
	}

	public Map<String, Object> addImmunizationCard(Box box,
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Transaction tx = null;
		List<Visit> patientList = new ArrayList<Visit>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<Integer> snoList = new ArrayList<Integer>();
		List<String> givendateList = new ArrayList<String>();
		int deptId = (Integer) box.getInt("deptId");
		int hinId = 0;
		int visitId = 0;
		int userId = 0;
		boolean saved = false;
		String hinNo = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		List<ImmunizationCardDetail> cardDetailsList = new ArrayList<ImmunizationCardDetail>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		

		if (dataMap.get("snoList") != null) {
			snoList = (List) dataMap.get("snoList");
		}
		if (dataMap.get("givendateList") != null) {
			givendateList = (List) dataMap.get("givendateList");
		}
		try {
			tx = session.beginTransaction();
			
			cardDetailsList = session
					.createCriteria(ImmunizationCardDetail.class)
					.createAlias("VisitId", "visit")
					.add(Restrictions.eq("visit.Hin.Id", hinId)).list();
			for (int i = 0; i < snoList.size(); i++) {
				ImmunizationCardDetail details = new ImmunizationCardDetail();
				ImmunizationCardMaster master = new ImmunizationCardMaster();
				Visit visit = new Visit();
				master.setIcmId(snoList.get(i));
				details.setIcmId(master);
				if (givendateList.get(i) != "") {
					details.setGivendate(HMSUtil
							.convertStringTypeDateToDateType(givendateList
									.get(i)));
				}
				if (box.getInt("userId") != 0) {
					details.setLastChgBy(String.valueOf(box.getInt("userId")));
				}
				details.setLastChgDate(new Date(currentDate));
				details.setLastChgTime(time);
				details.setStatus(STATUS_YES);
				details.setSerialNo(i + 1);
				if (box.getInt("visitId") != 0) {
					visit.setId(box.getInt("visitId"));
					details.setVisitId(visit);
				}
				if (cardDetailsList.size() > 0) {
					session.update(details);
				} else {
					session.save(details);
				}

			}
			saved = true;
			
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
			saved = false;
			tx.rollback();
		}
		 map.put("saved", saved);
		return map;
	}

	public Map<String, Object> getDepartmentName(Map mapForDS) {
		Map<String, Object> deptMap = new HashMap<String, Object>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		String deptName = "";
		Session session = (Session) getSession();
		int deptId = (Integer) mapForDS.get("deptId");
		try {
			deptList = session.createCriteria(MasDepartment.class).list();
			deptName = getDepartmentNameFromId(deptId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		deptMap.put("deptName", deptName);
		deptMap.put("deptList", deptList);

		return deptMap;
	}

	public Map<String, Object> getTokenNumber(Map tokenMap) {
		int departmentId = 0;
		int num1 = 0;
		int num2 = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTokenDetails> tokenList = new ArrayList<OpdTokenDetails>();
		Session session = (Session) getSession();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		String userName = "";
		if (tokenMap.get("departmentId") != null) {
			departmentId = (Integer) tokenMap.get("departmentId");
		}
		if (tokenMap.get("num1") != null) {
			num1 = (Integer) tokenMap.get("num1");
		}
		if (tokenMap.get("num2") != null) {
			num2 = (Integer) tokenMap.get("num2");
		}
		if (tokenMap.get("userName") != null) {
			userName = (String) tokenMap.get("userName");
		}

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tokenList = session.createCriteria(OpdTokenDetails.class)
					.add(Restrictions.eq("Department.Id", departmentId)).list();
			OpdTokenDetails details = (OpdTokenDetails) hbt.load(
					OpdTokenDetails.class, departmentId);

			for (int i = num1; i <= num2; i++) {
				int OpdTokenDetailsId = 0;
				if (tokenList.size() > 0) {
					OpdTokenDetailsId = tokenList.get(0).getTokenId();
				}

				OpdTokenDetails token = new OpdTokenDetails();

				if (OpdTokenDetailsId > 0) {
					token = (OpdTokenDetails) hbt.load(OpdTokenDetails.class,
							OpdTokenDetailsId);
				}

				MasDepartment department = new MasDepartment();
				department.setId(departmentId);
				token.setDepartment(department);
				// token.setDepartmentId(departmentId);
				token.setTokenNumber(i);
				token.setLastChgBy(userName);
				if (HMSUtil.convertStringTypeDateToDateType(currentDate) != null) {
					token.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(currentDate));
				}
				if (time != null) {
					token.setLastChgTime(time);
				}
				if (STATUS_YES != null) {
					token.setStatus(STATUS_YES);
				}
				hbt.saveOrUpdate(token);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getMasChargeCode() {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasChargeCode> masChargeCodeList = new ArrayList<MasChargeCode>();
		String ChargeCodeCode = "PHAC";
		try {

			masChargeCodeList = session.createCriteria(MasChargeCode.class)
					.add(Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("ChargeCodeCode", ChargeCodeCode))
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("masChargeCodeList", masChargeCodeList);
		return map;
	}

	// ----- By Mansi
	public Map<String, Object> showPreviousSystemPatientPrescriptions(
			Map<String, Object> mapForDS) {

		Session session = (Session) getSession();
		List<Visit> patientList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Treatmentopd> treatmentopdList = new ArrayList<Treatmentopd>();
		String hinId = "";
		Integer hospitalId=0;
		try {
			if (mapForDS.get("hinId") != null) {
				hinId = (String) mapForDS.get("hinId");
				hospitalId= (Integer)mapForDS.get("hospitalId");
				treatmentopdList = session.createCriteria(Treatmentopd.class)
						.add(Restrictions.eq("Regno", hinId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.addOrder(Order.desc("Tdate")).list();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("treatmentopdList", treatmentopdList);
		return map;
	}

	public int getTokenNoForDepartment(int departmentId) {
		List<Integer> tokenNoList = new ArrayList<Integer>();
		int tokenNo = 0;
		Date date = new Date();

		Session session = (Session) getSession();
		// tokenNoList = getHibernateTemplate().find("select max(v.TokenNo) from
		// Visit v join v.Department as dept where dept.Id="+departmentId+" and
		// v.VisitDate="+date);
		tokenNoList = session
				.createCriteria(Visit.class, "v")
				.add(Restrictions.eq("v.VisitDate", date))
				.createAlias("Department", "dept")
				.add(Restrictions.eq("dept.Id", departmentId))
				.setProjection(
						Projections.projectionList().add(
								Projections.max("TokenNo"))).list();
		if (tokenNoList.get(0) != null) {
			tokenNo = tokenNoList.get(0);
		}
		//
		return tokenNo;
	}

	/*@Override
	public Map<String, Object> showPopupTokenJsp(Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<QueueManagment> queueList = new ArrayList<QueueManagment>();
		List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
		List<MasImagesDisplay> videoList = new ArrayList<MasImagesDisplay>();
		
		List<QueueManagment> currentqueueList = new ArrayList<QueueManagment>();
		List<QueueManagment> waitingQueueList = new ArrayList<QueueManagment>(); // added by amit das on 22-06-2016
		Session session = null;
		session = (Session) getSession();
		
		try {
			
			int deptId = 0;
			int hospitalId=0;
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}
			if(mapForDS.get("hospitalId") != null){
				hospitalId = (Integer) mapForDS.get("hospitalId");	
			}
			Date currentDate = new Date();
			
			queueList = session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("Visit", "v")
						.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
						//.addOrder(Order.asc("TokenNo"))
						
						.add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.eq("d.Id", deptId))
						.add(Restrictions.eq("LsCngDate", currentDate))
						.addOrder(Order.asc("OpVisitTime"))
						.addOrder(Order.asc("PriorityNumber"))
						.addOrder(Order.asc("d.Id"))
						.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
						.setFirstResult(0)
						.setMaxResults(1)
						.list();	
			
			currentqueueList = session.createCriteria(QueueManagment.class)
					.createAlias("Hospital", "h")
					.createAlias("Department", "d")
					.createAlias("Visit", "v")
					.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
					//.addOrder(Order.asc("TokenNo"))
					
					.add(Restrictions.eq("h.Id", hospitalId))
					.add(Restrictions.eq("d.Id", deptId))
					.add(Restrictions.eq("LsCngDate", currentDate))
					.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
					.addOrder(Order.asc("OpVisitTime"))
					.addOrder(Order.asc("PriorityNumber"))
					.addOrder(Order.asc("d.Id"))
					.setFirstResult(0)
					.setMaxResults(1)
					.list();
			
			// added by amit das on 22-06-2016 
			if(currentqueueList==null || currentqueueList.size()==0 )
			waitingQueueList = session.createCriteria(QueueManagment.class)
					.createAlias("Hospital", "h")
					.createAlias("Department", "d")
					.createAlias("Visit", "v")
					.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
					//.addOrder(Order.asc("TokenNo"))
					
					.add(Restrictions.eq("h.Id", hospitalId))
					.add(Restrictions.eq("d.Id", deptId))
					.add(Restrictions.eq("LsCngDate", currentDate))
					.addOrder(Order.asc("OpVisitTime"))
					.addOrder(Order.asc("PriorityNumber"))
					.addOrder(Order.asc("d.Id"))
					.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
					.setFirstResult(0)
					.setMaxResults(2)
					.list();	
			
						
			masimgList = session.createCriteria(MasImagesDisplay.class)
						.createAlias("Hospital", "h")
						//.createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId))
						//.add(Restrictions.eq("LastChgDate", currentDate))
						.list();
			
			videoList = session.createCriteria(MasImagesDisplay.class)
					.createAlias("Hospital", "h")
					//.createAlias("Hospital", "h")
					.add(Restrictions.eq("h.Id", hospitalId))
					//.add(Restrictions.isNotNull("Video"))
					
					//.add(Restrictions.eq("LastChgDate", currentDate))
					.list();
			List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();

			masDepartmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.idEq(deptId)).list();
			String deptName = "";
			if (masDepartmentList.size() > 0) {
				for (MasDepartment masDepartment : masDepartmentList) {
					deptName = masDepartment.getDepartmentName();
					System.out.println("deptName>>><<<<"+deptName);
				}
			}
			
			map.put("currentqueueList", currentqueueList);
			map.put("queueList", queueList);
			map.put("waitingQueueList", waitingQueueList); // added by amit das on 22-06-2016
			map.put("masimgList", masimgList);
			map.put("videoList", videoList);
			
			map.put("masDepartmentList", masDepartmentList);
			map.put("deptId", deptId);
			map.put("deptName", deptName);
		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		*//**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 *//*
		
		 * if(session!=null){ session.close(); } }
		 
		return map;
	}*/
	// commented by amit das on 20-06-2016
	// added by amit das on 30-06-2016
	@Override
	public Map<String, Object> showPopupTokenJsp(Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		// List<PatientPrescriptionHeader> patientPrescriptionList = new ArrayList<PatientPrescriptionHeader>();
		List<PharmacyLabQueue> pharmacyLabQueueList = new ArrayList<PharmacyLabQueue>();
		//List<MasImagesDisplay> videoList = new ArrayList<MasImagesDisplay>();
		MasDepartment masDepartment = null;
		MasHospital masHospital =null;
		Session session = null;
		String deptName = "";
		String displayName = null;
		int hospitalId=0;
		List<Integer> deptIds  = new ArrayList<Integer>();; // changed by amit das on 20-01-2017
		try {

			session = (Session) getSession();
			
			if (mapForDS.get("deptId") != null) { // changed by amit das on 20-01-2017
					deptIds.add((Integer) mapForDS.get("deptId"));
			} else if (mapForDS.get("displayName") != null) {
					displayName = (String)mapForDS.get("displayName");
					deptIds =	session.createCriteria(MasInstituteDepartment.class)
							   .createAlias("TokenDisplayIp", "t")
							   .setProjection(Projections.property("Department.Id")).add(Restrictions.eq("t.DisplayName", displayName).ignoreCase()).list();
			}
			
			if(mapForDS.get("hospitalId") != null){
				hospitalId = (Integer) mapForDS.get("hospitalId");	
			}
			
			if(deptIds!= null && deptIds.size()>0){
				masDepartment = 	(MasDepartment)session.get(MasDepartment.class, deptIds.get(0));
			}
			
			
			
			/*patientPrescriptionList=session.createCriteria(PatientPrescriptionHeader.class)
					.createAlias("Hospital", "hospital")
					.createAlias("Visit", "v")
					.createAlias("v.Hin", "h")
					.createAlias("PharmacyLabQueue", "pharmacyLabQueue")
					.add(Restrictions.eq("hospital.Id", hospitalId))
					.add(Restrictions.eq("PrescriptionDate", new Date()))
					.add(Restrictions.eq("v.VisitDate",new Date()))
						.add(Restrictions.eq("h.PatientStatus", "Out Patient"))
						.add(Restrictions.eq("v.CurPharVisitStatus", "y")
								.ignoreCase())
					.add(Restrictions.eq("Status", "P").ignoreCase()).addOrder(Order.asc("pharmacyLabQueue.TokenNo"))
					.list();*/  // commeneted by amit das on 20-01-2017
			
			/*masimgList = session.createCriteria(MasImagesDisplay.class)
						.createAlias("Hospital", "h")
						//.createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId))
						//.add(Restrictions.eq("LastChgDate", currentDate))
						.list();*/
			
			/*videoList = session.createCriteria(MasImagesDisplay.class)
					.createAlias("Hospital", "h")
					//.createAlias("Hospital", "h")
					.add(Restrictions.eq("h.Id", hospitalId))
					//.add(Restrictions.isNotNull("Video"))
					
					//.add(Restrictions.eq("LastChgDate", currentDate))
					.list();*/
			
			//masDepartment = (MasDepartment)session.get(MasDepartment.class, deptId);
			//masHospital = (MasHospital)session.get(MasHospital.class, hospitalId);
			/*if(masDepartment!=null)
				deptName = masDepartment.getDepartmentName();
			*/
			
			
			pharmacyLabQueueList=session.createCriteria(PharmacyLabQueue.class)
					.createAlias("Hospital", "h")
					.createAlias("Department", "d")
					.add(Restrictions.eq("h.Id", hospitalId))
					.add(Restrictions.in("d.Id", deptIds))
					.add(Restrictions.eq("OpdDate", new Date()))
					.add(Restrictions.eq("Status", "P").ignoreCase())
					.addOrder(Order.asc("TokenNo")) 
					.list();  // added by amit das on 20-01-2017
			
			// map.put("patientPrescriptionList", patientPrescriptionList); // commeneted by amit das on 20-01-2017
			
			map.put("pharmacyLabQueueList", pharmacyLabQueueList);  // added by amit das on 20-01-2017
			
			//	map.put("deptId", deptId); // commeneted by amit das on 20-01-2017
			map.put("masDepartment", masDepartment);
			map.put("masHospital", masHospital);
		} catch (Exception e) {
			e.printStackTrace();
		} 
		return map;
	}
	
	@Override
	public Map<String, Object> showToeknDisplayForNurseJsp(Map<String, Object> mapForDS) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = null;
		session = (Session) getSession();

		try {

			List<QueueManagment> queueList = new ArrayList<QueueManagment>();
			List<MasImagesDisplay> masimgList = new ArrayList<MasImagesDisplay>();
			int deptId = 0;
			int hospitalId=0;
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}
			if(mapForDS.get("hospitalId") != null){
				hospitalId = (Integer) mapForDS.get("hospitalId");
				
			}
			Date currentDate = new Date();
			
			queueList = session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
						//.createAlias("Department", "d")
						.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
						.addOrder(Order.asc("TokenNo"))
						.add(Restrictions.eq("h.Id", hospitalId))
						//.add(Restrictions.eq("d.Id", deptId))
						.add(Restrictions.eq("LsCngDate", currentDate))
						
						.setFirstResult(0)
						.setMaxResults(4)
						.list();
			
			
			
			masimgList = session.createCriteria(MasImagesDisplay.class)
						.createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId))
						//.add(Restrictions.eq("LastChgDate", currentDate))
						.list();
			List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();

			masDepartmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.idEq(deptId)).list();
			String deptName = "";
			if (masDepartmentList.size() > 0) {
				for (MasDepartment masDepartment : masDepartmentList) {
					deptName = masDepartment.getDepartmentName();
				}
			}
			map.put("queueList", queueList);
			map.put("masimgList", masimgList);
			map.put("masDepartmentList", masDepartmentList);
			map.put("deptId", deptId);
			map.put("deptName", deptName);
		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		return map;
	}
	
	@Override
	public Map<String, Object> populatMasInstitute(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			int hospitalIdd = (Integer) dataMap.get("hospitalIdd");
			
			/* districtId = Integer.parseInt("" + dataMap.get("districtId")); */
			List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
			Session session = (Session) getSession();
			departmentList=session.createCriteria(MasInstituteDepartment.class)
	                    .setProjection(Projections.property("Department"))
	                    .add(Restrictions.eq("Institute.Id",hospitalIdd))
	                    .add(Restrictions.eq("Status","y").ignoreCase())
	                    .createAlias("Department", "dep")
	                    .addOrder(Order.asc("dep.DepartmentName"))
	                    .list();
			map.put("departmentList", departmentList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	

	public Map<String, Object> showTreatment(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = (String) map1.get("autoHint");
			String srNo = "";
			if (map1.get("srNo") != null) {
				srNo = (String) map1.get("srNo");
			}
			List<Drugdetails> drugDetailList = new ArrayList<Drugdetails>();
			Criteria cri = session.createCriteria(Drugdetails.class).add(
					Restrictions.eq("Genericname", generic_name).ignoreCase());
			if (srNo != "") {
				cri = cri.add(Restrictions.eq("Id", srNo));
			}
			drugDetailList = cri.list();
			map.put("drugDetailList", drugDetailList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> showTreatmentPopUp(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String generic_name = "%" + map1.get("autoHint") + "%";
			List<Drugdetails> drugDetailList = new ArrayList<Drugdetails>();
			Criteria cri = session.createCriteria(Drugdetails.class)
					.add(Restrictions.like("Genericname", generic_name)
							.ignoreCase());
			drugDetailList = cri.list();
			map.put("drugDetailList", drugDetailList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getPhysiotherapyPreviousDetails(
			Map<String, Object> map) {
		Session session = (Session) getSession();
		Map<String, Object> mapData = new HashMap<String, Object>();
		List<MasPhysiotherapyHeader> headerList = new ArrayList<MasPhysiotherapyHeader>();
		List<MasPhysiotherapyDetail> detailList = new ArrayList<MasPhysiotherapyDetail>();
		List<Visit> visitList = new ArrayList<Visit>();
		int visitId = 0;
		int deptId = 0;
		int hinId = 0;
		try {
			if (map.get("deptId") != null) {
				deptId = (Integer) map.get("deptId");
			}
			if (map.get("visitId") != null) {
				visitId = (Integer) map.get("visitId");
			}
			visitList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visitId)).list();
			if (visitList.size() > 0) {
				for (Visit v : visitList) {
					hinId = v.getHin().getId();
				}

			}
			headerList = session.createCriteria(MasPhysiotherapyHeader.class)
					.add(Restrictions.eq("Patient.Id", hinId))
					.createAlias("VisitId", "visit")
					.add(Restrictions.eq("visit.Id", visitId)).list();
			MasPhysiotherapyHeader header = new MasPhysiotherapyHeader();
			if (headerList.size() > 0) {
				header = (MasPhysiotherapyHeader) headerList.get(0);
			}
			detailList = session.createCriteria(MasPhysiotherapyDetail.class)
					.add(Restrictions.eq("MpId.Id", header.getId())).list();

			mapData.put("visitList", visitList);
			mapData.put("headerList", headerList);
			mapData.put("detailList", detailList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapData;

	}

	public Map<String, Object> updateVistToken(Map<String, Object> mapForToken) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = null;
		session = (Session) getSession();

		Transaction tx = null;
		try {

			int visitId = 0;
			int empId = 0;
			if (mapForToken.get("visitId") != null) {
				visitId = (Integer) mapForToken.get("visitId");
			}
			if (mapForToken.get("empId") != null) {
				empId = (Integer) mapForToken.get("empId");
			}

			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<Visit> visitTokenList = new ArrayList<Visit>();
			Date currentDate = new Date();
			visitTokenList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Doctor.Id", empId))
					.add(Restrictions.eq("VisitDate", currentDate)).list();
			if (visitTokenList.size() > 0) {
				for (Visit visit2 : visitTokenList) {
					Visit visit3 = (Visit) hbt
							.load(Visit.class, visit2.getId());
					visit3.setDisplayToken(null);
					hbt.update(visit3);
					hbt.refresh(visit3);
				}
			}
			Visit visit = (Visit) hbt.load(Visit.class, visitId);
			visit.setDisplayToken(visit.getTokenNo());
			hbt.update(visit);
			hbt.refresh(visit);

			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null)
				tx.rollback();
		}
		return map;
	}

	public synchronized String generateOrderNumber() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<TransactionSequence> orderSeqNoList = new ArrayList<TransactionSequence>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = "";

		Session session = (Session) getSession();
		String orderSeqNo = "";
		date = (String) utilMap.get("currentDate");
		String currentyear = "";
		String currentYear = date.substring(date.lastIndexOf("/") + 1);
		String lastOrderNo = "";
		String lastOrderYear = "";
		int seqNo = 1;
		List<DgOrderhd> orderNoList = new ArrayList<DgOrderhd>();
		/*
		 * orderNoList = session.createCriteria(DgOrderhd.class).list(); for
		 * (DgOrderhd dgOrderhd : orderNoList) { lastOrderNo =
		 * dgOrderhd.getOrderNo(); } StringTokenizer str = new
		 * StringTokenizer(lastOrderNo, "/"); while (str.hasMoreTokens()) {
		 * 
		 * lastOrderYear = str.nextToken();
		 * 
		 * }
		 */
		try {
			orderSeqNoList = session.createCriteria(TransactionSequence.class)
					.add(Restrictions.eq("TransactionPrefix", "ON")).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		if (orderSeqNoList.size() > 0) {
			for (TransactionSequence transactionSequence : orderSeqNoList) {
				TransactionSequence obj = (TransactionSequence) orderSeqNoList
						.get(0);
				int id = obj.getId();
				String seqNoStr = obj.getTransactionSequenceNumber().toString();
				lastOrderYear = obj.getMonth().toString();
				if (currentYear.equals(lastOrderYear)) {

					seqNo = Integer.parseInt(seqNoStr);
				} else {
					seqNo = 0;
					lastOrderYear = currentYear;
				}

				seqNo = seqNo + 1;

				TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
						.load(TransactionSequence.class, id);

				// orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo));
				// orderSeqNo =
				// orderSeqNo.concat("/").concat(String.valueOf(lastOrderYear));
				transactionSequenceObj.setTransactionSequenceNumber(seqNo);
				transactionSequenceObj
						.setMonth(Integer.parseInt(lastOrderYear));
				hbt.update(transactionSequenceObj);
				hbt.refresh(transactionSequenceObj);

			}
		} else if (orderSeqNoList.size() == 0) {
			TransactionSequence tsObj = new TransactionSequence();
			tsObj.setStatus("y");
			tsObj.setTablename("DgOrderhd");
			tsObj.setTransactionPrefix("ON");
			tsObj.setTransactionSequenceName("Order No");
			orderSeqNo = orderSeqNo.concat(String.valueOf(seqNo));
			// orderSeqNo =
			// orderSeqNo.concat("/").concat(String.valueOf(currentYear));
			lastOrderYear = currentYear;
			tsObj.setTransactionSequenceNumber(Integer.parseInt(orderSeqNo));
			tsObj.setMonth(Integer.parseInt(currentYear));
			hbt.save(tsObj);
		}
		orderSeqNo = "" + seqNo;
		orderSeqNo = orderSeqNo.concat("/").concat(
				String.valueOf(lastOrderYear));
		return orderSeqNo;
	}

	@Override
	public Map<String, Object> getPhysiotherapistPatientList1(
			Map<String, Object> mapForDS) {

		Session session = (Session) getSession();
		List<Visit> visitPatientList = new ArrayList<Visit>();

		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		Map<String, Object> map = new HashMap<String, Object>();
		// int deptId = (Integer) mapForDS.get("deptId");
		int hinId = 0;
		int visitId = 0;
		String pFirstName = "";
		String pMiddleName = "";
		String pLastName = "";
		String hinNo = "";
		String flag = "";
		int visitNo = 0;

		List phyio_therapy_id = new ArrayList();
		String phyio_id = null;
		String deptName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		Date date = new Date();
		String category = "Doctor";
		List<Patient> patientList = new ArrayList<Patient>();
		int patient_hin = 0;
		try {

			if (mapForDS.get("hinNo") != null
					&& !mapForDS.get("hinNo").equals("")) {
				hinNo = (String) mapForDS.get("hinNo");
			}
			if (mapForDS.get("hinId") != null) {
				hinId = (Integer) mapForDS.get("hinId");
			}
			if (hinId != 0) {
				// patientList =
				// getHibernateTemplate().find("select patient from jkt.hms.masters.business.MasPhysiotherapyHeader as header join header.Patient as patient where patient.Id ="+hinId+" and header.VisitId.Id="+visitId+"  ");
				patientList = session
						.createCriteria(MasPhysiotherapyHeader.class)
						.add(Restrictions.eq("Patient.Id", hinId))
						.addOrder(Order.desc("Id")).list();
			} else {
				// patientList =
				// getHibernateTemplate().find("select patient from jkt.hms.masters.business.MasPhysiotherapyHeader as header join header.Patient as patient");
			}
			Date dateTo = new Date();
			/*
			 * String sqlHinId=""; if(patientList.size()>0){ int counter=0; for
			 * (Patient patient : patientList) { if(counter==0){
			 * sqlHinId=""+patient.getId(); }else{
			 * sqlHinId=" , "+patient.getId(); ++counter; }
			 * 
			 * 
			 * } }
			 */

			// String tdate = HMSUtil.convertDateToStringWithoutTime(dateTo);
			// visitPatientList =
			// getHibernateTemplate().find("select visit from Visit as visit,OpdPatientDetails as o where visit.Id=o.Visit and visit.VisitDate ='"+tdate+"' and o.PhysiotherapyRequiredId='y' ");
			/*
			 * List<String> physiotherapyRequiredId = new ArrayList<String>();
			 * physiotherapyRequiredId.add("c");
			 * physiotherapyRequiredId.add("y");
			 */

			doctorList = session
					.createCriteria(MasEmployee.class)
					.createAlias("EmpCategory", "empCategory")
					.createAlias("Department", "dept")
					.add(Restrictions.eq("empCategory.EmpCategoryName",
							category))
					// .add(Restrictions.eq("dept.Id", deptId))
					.list();
			// deptName = getDepartmentNameFromId(deptId);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("visitPatientList", visitPatientList);
		map.put("doctorList", doctorList);
		map.put("deptName", deptName);
		map.put("hinNo", hinNo);
		map.put("visitNo", visitNo);
		map.put("patientList", patientList);
		return map;
	}

	public Map<String, Object> getPreviousStudentVisit(
			Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		List<Object[]> objList = new ArrayList<Object[]>();
		List<Visit> patientPreviousVisitList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Inpatient> inpatientList = new ArrayList<Inpatient>();
		int hinId = (Integer) mapForDS.get("hinId");
		int studentId = 0;
		String gr_no = "";
		int academicYearId = 0;
		int schoolId = 0;
		String studentName = "";
		List<String> studentList1 = new ArrayList<String>();
		List<Student> studentList = new ArrayList<Student>();
		List<Object[]> diagnosisList = new ArrayList<Object[]>();
		List<Object[]> prescriptionList = new ArrayList<Object[]>();
		try {
			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");
			try {
				properties.load(resourcePath.openStream());
			} catch (Exception e) {
				e.printStackTrace();
			}
			String dbName = properties.getProperty("dbName");

			studentList = session.createCriteria(Student.class)
					.add(Restrictions.eq("Hin", hinId)).list();
			for (Student student : studentList) {
				academicYearId = student.getAcademicYear();
				gr_no = student.getGrNo();
				schoolId = student.getSchool();
			}

			String query = "select opd_date,diagnosis,opd_id from " + dbName
					+ "..shp_opd_main where gr_no=" + gr_no + " and school_id="
					+ schoolId + " and academic_year_id=" + academicYearId;
			// String
			// query="select opd_date,diagnosis from SHPFINAL..shp_opd_main where gr_no=13781 and school_id=1 and academic_year_id=1";
			String queryForStudent = "select student_name from " + dbName
					+ "..shp_mas_student where gr_no=" + gr_no
					+ "and school_id=" + schoolId;

			objList = session.createSQLQuery(query).list();
			studentList1 = session.createSQLQuery(queryForStudent).list();

			for (String name : studentList1) {
				studentName = name;
			}
			inpatientList = session.createCriteria(Inpatient.class)
					.add(Restrictions.eq("Hin.Id", hinId)).list();
			diagnosisList = session.createSQLQuery(query).list();
			int opdId = 0;
			for (Object[] obj : diagnosisList) {
				opdId = (Integer) obj[2];
			}

			String queryForDiagnosis = "select i.nomenclature,dtl.dosage,dtl.no_of_days,f.frequency_name,dtl.total from "
					+ dbName
					+ "..shp_OPD_pres_dtl dtl"
					+ " left outer join mas_store_item i on i.item_id= dtl.item_id"
					+ " left outer join mas_frequency f on f.frequency_id=dtl.frequency_id"
					+ " where opd_id=" + opdId;
			prescriptionList = session.createSQLQuery(queryForDiagnosis).list();

			/*
			 * Code Removed (for loop) By Mukesh Narayan Singh Date 31 Jan 2011
			 */
			/*
			 * for(Visit v :patientPreviousVisitList) { } for(Inpatient
			 * inpatient : inpatientList) { }
			 */
			String queryForMedicine = "";
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objList", objList);
		map.put("gr_no", gr_no);
		map.put("inpatientList", inpatientList);

		map.put("studentName", studentName);
		map.put("studentList1", studentList1);
		map.put("studentList", studentList);

		map.put("diagnosisList", diagnosisList);
		map.put("prescriptionList", prescriptionList);
		return map;
	}

	public Map<String, Object> getstudentDetail(Map<String, Object> detailsMap) {
		List<Object[]> itemIdList = new ArrayList<Object[]>();
		Map<String, Object> map = new HashMap<String, Object>();
		// Map<String, Object> detailsMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int patientTypeId = 0;
		if (detailsMap.get("patientTypeId") != null) {
			patientTypeId = (Integer) detailsMap.get("patientTypeId");
		}
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String dbName = properties.getProperty("dbName");
		try {

			String query = "select school_registration_id,name,address from "
					+ dbName + ".shp_mas_school_registration";

			itemIdList = session.createSQLQuery(query).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemIdList", itemIdList);
		map.put("patientTypeId", patientTypeId);

		return map;
	}

	public Map<String, Object> getstudentDetail1(Map<String, Object> detailsMap) {
		List<Object[]> itemIdList = new ArrayList<Object[]>();
		List<Object[]> itemIdList1 = new ArrayList<Object[]>();
		List<MasTitle> titleList = new ArrayList<MasTitle>();
		List<MasAdministrativeSex> sexList = new ArrayList<MasAdministrativeSex>();
		List<MasReligion> religionList = new ArrayList<MasReligion>();
		Map<String, Object> map = new HashMap<String, Object>();
		// Map<String, Object> detailsMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		String gr_no = "";
		int schoolId = 0;
		if (detailsMap.get("schoolId") != null) {
			schoolId = (Integer) detailsMap.get("schoolId");
		}
		if (detailsMap.get("gr_no") != null) {
			gr_no = (String) detailsMap.get("gr_no");
		}

		try {
			Properties properties = new Properties();
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");
			try {
				properties.load(resourcePath.openStream());
			} catch (Exception e) {
				e.printStackTrace();
			}
			String dbName = properties.getProperty("dbName");

			String query = "select * from " + dbName
					+ "..shp_mas_student where school_id=" + schoolId
					+ " and gr_no=" + gr_no;
			String queryForSchool = "select school_registration_id,name,address from  "
					+ dbName
					+ "..shp_mas_school_registration where school_registration_id="
					+ schoolId;
			itemIdList = session.createSQLQuery(query).list();
			itemIdList1 = session.createSQLQuery(queryForSchool).list();
			titleList = session.createCriteria(MasTitle.class)
					.add(Restrictions.eq("Status", "y")).list();
			sexList = session.createCriteria(MasAdministrativeSex.class)
					.add(Restrictions.eq("Status", "y")).list();
			religionList = session.createCriteria(MasReligion.class).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemIdList", itemIdList);
		map.put("itemIdList1", itemIdList1);
		map.put("gr_no", gr_no);
		map.put("schoolId", schoolId);
		map.put("titleList", titleList);
		map.put("sexList", sexList);
		map.put("religionList", religionList);

		return map;
	}

	@Override
	public Map<String, Object> submitforPhysio(int empId, int deptId, int hinId) {
		Map<String, Object> map = new HashMap<String, Object>();
		//

		Visit visitSaveObjNew2 = new Visit();

		Patient patient = new Patient();
		patient.setId(hinId);
		visitSaveObjNew2.setHin(patient);
		MasDepartment masDepartment = new MasDepartment();
		masDepartment.setId(81);
		visitSaveObjNew2.setDepartment(masDepartment);

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		visitSaveObjNew2.setVisitTime(time);

		int tokenNoTemp = getTokenNoForDepartment(81);

		Session session = (Session) getSession();
		int visitNoTemp = 0;
		List<Visit> visitList = new ArrayList<Visit>();
		visitList = session.createCriteria(Visit.class)
				.add(Restrictions.eq("Hin.Id", hinId))
				.addOrder(Order.desc("Id")).setMaxResults(1).list();

		//
		for (Visit v : visitList) {
			visitNoTemp = v.getVisitNo();
			visitSaveObjNew2.setAge(v.getAge());
			visitSaveObjNew2.setAddEditBy(v.getAddEditBy());
			visitSaveObjNew2.setAddEditDate(v.getAddEditDate());
			visitSaveObjNew2.setComplaint(v.getComplaint());
			visitSaveObjNew2.setCaseType(v.getCaseType());
			visitSaveObjNew2.setVisitDate(v.getVisitDate());
		}

		if (visitNoTemp > 0) {
			visitSaveObjNew2.setVisitNo(visitNoTemp + 1);
		}
		//
		++tokenNoTemp;
		visitSaveObjNew2.setTokenNo(tokenNoTemp);
		//

		/* visitNoTemp = visit.getVisitNo() + 1; */
		visitSaveObjNew2.setVisitNo(visitNoTemp);

		visitSaveObjNew2.setAddEditTime(time);
		visitSaveObjNew2.setStatus("y");
		visitSaveObjNew2.setEdStatus("n");
		if (deptId == 81) {
			visitSaveObjNew2.setStatus("n");
			visitSaveObjNew2.setVisitStatus("p");
		} else {
		}
		visitSaveObjNew2.setAppointmentType("D");
		MasEmployee me = new MasEmployee();
		me.setId(525);
		visitSaveObjNew2.setDoctor(me);

		//
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
		hbt.save(visitSaveObjNew2);

		/*
		 * Patient patient = (Patient) hbt2.load(Patient.class, hinId);
		 * patient.setCurrentVisitNo(visitNoTemp); hbt2.update(patient);
		 */

		map.put("visitNoTemp", visitNoTemp + 1);
		map.put("tokenNoTemp", tokenNoTemp);
		//
		// map.put("deptNameTemp", deptNameTemp);
		return map;
	}

	@Override
	public Map<String, Object> submitforPhysio(int deptId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		employeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("EmpCategory.Id", 1))
				.add(Restrictions.eq("Department.Id", deptId)).list();
		map.put("employeeList", employeeList);
		return map;
	}

	@Override
	public Map<String, Object> showreferralPatientJsp(int deptId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		employeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("EmpCategory.Id", 1))
				// .add(Restrictions.eq("Department.Id", deptId))
				.addOrder(Order.asc("FirstName")).list();
		map.put("employeeList", employeeList);
		return map;
	}

	@Override
	public Map<String, Object> searchPatient(String hinNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Patient> patientList = new ArrayList<Patient>();
		patientList = session.createCriteria(Patient.class)
				.add(Restrictions.eq("HinNo", hinNo))
				// .add(Restrictions.eq("Department.Id", deptId))
				// .addOrder(Order.asc("FirstName"))
				.list();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		employeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("EmpCategory.Id", 1))
				// .add(Restrictions.eq("Department.Id", deptId))
				.addOrder(Order.asc("FirstName")).list();
		//
		//
		map.put("patientList", patientList);
		map.put("employeeList", employeeList);
		return map;
	}

	@Override
	public boolean submitReferalPatient(OpPatientReferral opPatientReferral) {

		boolean successfullyAdded = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		hbt.save(opPatientReferral);
		int opPatientReferralId = 0;
		opPatientReferralId = opPatientReferral.getId();
		Session session = (Session) getSession();
		List<OpPatientReferral> patientList = new ArrayList<OpPatientReferral>();
		patientList = session.createCriteria(OpPatientReferral.class)
				.add(Restrictions.eq("Id", opPatientReferralId)).list();
		for (OpPatientReferral opr : patientList) {
			opr.setReferNo("OP/PatientRefer/" + opPatientReferralId);
			hbt.update(opr);
		}
		successfullyAdded = true;
		return successfullyAdded;
	}

	@Override
	public boolean submitPatientForFitness(PatientFitnessCertificate fitness) {

		boolean successfullyAdded = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		hbt.save(fitness);
		int opPatientReferralId = 0;
		opPatientReferralId = fitness.getId();
		Session session = (Session) getSession();
		List<PatientFitnessCertificate> patientList = new ArrayList<PatientFitnessCertificate>();
		patientList = session.createCriteria(PatientFitnessCertificate.class)
				.add(Restrictions.eq("Id", opPatientReferralId)).list();
		for (PatientFitnessCertificate opr : patientList) {
			opr.setFitnessCertificateNo("NO:RKS/VBCH/Cert/"
					+ opPatientReferralId);
			hbt.update(opr);
		}
		successfullyAdded = true;
		return successfullyAdded;
	}

	@Override
	public Map<String, Object> showWaitingforBillingPhysiotherapyPatientList() {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Visit> patientList = new ArrayList<Visit>();
		patientList = session.createCriteria(Visit.class)
				.add(Restrictions.eq("Status", "n")).list();
		map.put("patientList", patientList);
		//
		return map;
	}

	@Override
	public Map<String, Object> getPatientDetailsForJSSK(
			Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasBankMaster> bankList = new ArrayList<MasBankMaster>();

		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		int hinId = 0;
		Session session = null;
		session = (Session) getSession();
		Criteria crit = null;

		if (mapForDs.get("hinNo") != null) {
			hinNo = (String) mapForDs.get("hinNo");
		}
		if (mapForDs.get("patientFName") != null) {
			patientFName = (String) mapForDs.get("patientFName");
		}
		if (mapForDs.get("patientMName") != null) {
			patientMName = (String) mapForDs.get("patientMName");
		}
		if (mapForDs.get("patientLName") != null) {
			patientLName = (String) mapForDs.get("patientLName");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}
		try {
			crit = session.createCriteria(Patient.class);
			if (hinId == 0) {
				if (!hinNo.equals("")) {
					crit = crit.add(Restrictions.eq("HinNo", hinNo));
				}
				if (!patientFName.equals("")) {
					crit = crit.add(Restrictions.like("PFirstName",
							patientFName + "%"));
				}
				if (!patientMName.equals("")) {
					crit = crit.add(Restrictions.like("PMiddleName",
							patientMName + "%"));
				}
				if (!patientLName.equals("")) {
					crit = crit.add(Restrictions.like("PLastName", patientLName
							+ "%"));
				}
			} else if (hinId != 0) {
				crit = crit.add(Restrictions.idEq(hinId));
			}

			patientList = crit.list();
			bankList = session.createCriteria(MasBankMaster.class)
					.add(Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 13 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		map.put("bankList", bankList);
		map.put("patientDetailsList", patientList);
		return map;
	}

	@Override
	public boolean updateBills(int inpatientId) {
		boolean updated = false;
		List<BlChargeSlipDetail> dtlList = new ArrayList<BlChargeSlipDetail>();
		List<BlChargeSlipMain> mainList = new ArrayList<BlChargeSlipMain>();
		List<Inpatient> ipList = new ArrayList<Inpatient>();
		List<BlReceiptDetails> receiptDtlList = new ArrayList<BlReceiptDetails>();
		List<BlReceiptHeader> hdDtlList = new ArrayList<BlReceiptHeader>();
		Session session = (Session) getSession();
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		// hbt.save(fitness);
		/*
		 * try{ tx = session.beginTransaction();
		 */
		ipList = session.createCriteria(Inpatient.class)
				.add(Restrictions.eq("Id", inpatientId)).list();
		mainList = session.createCriteria(BlChargeSlipMain.class)
				.add(Restrictions.eq("Inpatient.Id", inpatientId)).list();
		hdDtlList = session.createCriteria(BlReceiptHeader.class)
				.add(Restrictions.eq("Inpatient.Id", inpatientId)).list();
		for (BlReceiptHeader hd : hdDtlList) {
			hd.setAmount(new BigDecimal(0));
			hbt.update(hd);
			int hdId = 0;
			hdId = hd.getId();
			receiptDtlList = session.createCriteria(BlReceiptDetails.class)
					.add(Restrictions.eq("ReceiptHeader.Id", hdId)).list();
			for (BlReceiptDetails dtl : receiptDtlList) {
				dtl.setAmount(new BigDecimal(0));
				hbt.update(dtl);
			}
		}
		int mainId = 0;
		//
		//
		for (BlChargeSlipMain main : mainList) {
			main.setChgSlpAmt(new BigDecimal(0));
			main.setOsAmt(new BigDecimal(0));
			main.setNetAmt(new BigDecimal(0));
			hbt.update(main);
			mainId = main.getId();
			dtlList = session.createCriteria(BlChargeSlipDetail.class)
					.add(Restrictions.eq("ChargeSlipMain.Id", mainId)).list();
			//
			for (BlChargeSlipDetail dtl : dtlList) {
				dtl.setAmt(new BigDecimal(0));
				dtl.setNetAmt(new BigDecimal(0));
				dtl.setRate(new BigDecimal(0));
				hbt.update(dtl);
			}

		}
		updated = true;
		/*
		 * catch(Exception e){ e.printStackTrace(); tx.commit(); if (tx !=
		 * null){ tx.rollback(); } }
		 */
		return updated;
	}

	@Override
	public Map<String, Object> searchPatientForMLC(Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasBankMaster> bankList = new ArrayList<MasBankMaster>();

		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		int hinId = 0;
		Session session = null;
		session = (Session) getSession();
		Criteria crit = null;

		if (mapForDs.get("hinNo") != null) {
			hinNo = (String) mapForDs.get("hinNo");
		}
		if (mapForDs.get("patientFName") != null) {
			patientFName = (String) mapForDs.get("patientFName");
		}
		if (mapForDs.get("patientMName") != null) {
			patientMName = (String) mapForDs.get("patientMName");
		}
		if (mapForDs.get("patientLName") != null) {
			patientLName = (String) mapForDs.get("patientLName");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}
		try {
			crit = session.createCriteria(Patient.class);
			if (hinId == 0) {
				if (!hinNo.equals("")) {
					crit = crit.add(Restrictions.eq("HinNo", hinNo));
				}
				if (!patientFName.equals("")) {
					crit = crit.add(Restrictions.like("PFirstName",
							patientFName + "%"));
				}
				if (!patientMName.equals("")) {
					crit = crit.add(Restrictions.like("PMiddleName",
							patientMName + "%"));
				}
				if (!patientLName.equals("")) {
					crit = crit.add(Restrictions.like("PLastName", patientLName
							+ "%"));
				}
			} else if (hinId != 0) {
				crit = crit.add(Restrictions.idEq(hinId));
			}

			patientList = crit.list();
			bankList = session.createCriteria(MasBankMaster.class)
					.add(Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 13 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		map.put("bankList", bankList);
		map.put("patientDetailsList", patientList);
		return map;
	}

	public boolean updateBillsForMLC(int inpatientId) {
		boolean updated = false;
		List<BlChargeSlipDetail> dtlList = new ArrayList<BlChargeSlipDetail>();
		/* List<BlChargeSlipMain>mainList=new ArrayList<BlChargeSlipMain>(); */
		List<Integer> mainList = new ArrayList<Integer>();
		List<Inpatient> ipList = new ArrayList<Inpatient>();
		List<BlReceiptDetails> receiptDtlList = new ArrayList<BlReceiptDetails>();
		List<BlReceiptHeader> hdDtlList = new ArrayList<BlReceiptHeader>();
		Session session = (Session) getSession();
		Transaction tx = null;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		// hbt.save(fitness);
		/*
		 * try{ tx = session.beginTransaction();
		 */
		ipList = session.createCriteria(Inpatient.class)
				.add(Restrictions.eq("Id", inpatientId)).list();
		Date dateOfAdmission = null;
		String timeOfAdmission = "";
		for (Inpatient inpatient : ipList) {
			dateOfAdmission = inpatient.getDateOfAddmission();
			timeOfAdmission = inpatient.getTimeOfAddmission();
		}
		String dateQuery = "select ip.date_of_addmission,dateadd(day,1,ip.date_of_addmission) as date2 from inpatient ip where ip.inpatient_id="
				+ inpatientId;
		List<Object[]> dateList = new ArrayList<Object[]>();
		dateList = session.createSQLQuery(dateQuery).list();
		//
		Date date1 = new Date();
		Date date2 = new Date();

		for (Object[] dt : dateList) {
			date1 = (Date) dt[0];
			date2 = (Date) dt[1];
		}
		//
		//
		String query = "";
		String date = HMSUtil.convertDateToStringTypeDate(date1);
		String date3 = HMSUtil.convertDateToStringTypeDate(date2);
		query = "select main.charge_slip_main_id from bl_charge_slip_main main  where chg_slp_date between '"
				+ date.substring(6, 10).concat("-")
						.concat(date.substring(3, 5)).concat("-")
						.concat(date.substring(0, 2))
				+ "' and '"
				+ date3.substring(6, 10).concat("-")
						.concat(date3.substring(3, 5)).concat("-")
						.concat(date3.substring(0, 2))
				+ "' and chg_slp_time between '"
				+ timeOfAdmission
				+ "' and '"
				+ timeOfAdmission + "'";

		mainList = session.createSQLQuery(query).list();
		hdDtlList = session.createCriteria(BlReceiptHeader.class)
				.add(Restrictions.eq("Inpatient.Id", inpatientId)).list();
		for (BlReceiptHeader hd : hdDtlList) {
			hd.setAmount(new BigDecimal(0));
			hbt.update(hd);
			int hdId = 0;
			hdId = hd.getId();
			receiptDtlList = session.createCriteria(BlReceiptDetails.class)
					.add(Restrictions.eq("ReceiptHeader.Id", hdId)).list();
			for (BlReceiptDetails dtl : receiptDtlList) {
				dtl.setAmount(new BigDecimal(0));
				hbt.update(dtl);
			}
		}
		int mainId = 0;
		//
		//
		for (Integer main : mainList) {
			mainId = main;
			List<BlChargeSlipMain> mainList1 = new ArrayList<BlChargeSlipMain>();
			mainList1 = session.createCriteria(BlChargeSlipMain.class)
					.add(Restrictions.eq("Id", mainId)).list();
			for (BlChargeSlipMain main1 : mainList1) {
				main1.setChgSlpAmt(new BigDecimal(0));
				main1.setOsAmt(new BigDecimal(0));
				main1.setNetAmt(new BigDecimal(0));
				hbt.update(main);
				mainId = main1.getId();
				dtlList = session.createCriteria(BlChargeSlipDetail.class)
						.add(Restrictions.eq("ChargeSlipMain.Id", mainId))
						.list();
				//
				for (BlChargeSlipDetail dtl : dtlList) {
					dtl.setAmt(new BigDecimal(0));
					dtl.setNetAmt(new BigDecimal(0));
					dtl.setRate(new BigDecimal(0));
					hbt.update(dtl);
				}
			}
		}
		updated = true;
		/*
		 * catch(Exception e){ e.printStackTrace(); tx.commit(); if (tx !=
		 * null){ tx.rollback(); } }
		 */
		return updated;
	}
	
	public Map<String, Object> getSnomedCTDetails(Map map) {
		try{
		String query = URLDecoder.decode((String)map.get("term"), "UTF-8");
		ArrayList<SuffixCount> suffixCountList = new SNOMEDAgentUtil().getSuffixCountbyRelationship(query);
			for(SuffixCount sf:suffixCountList){
				map.put("conecpt", sf.getConcepts());
	    	}
	   }catch(Exception e){
			e.printStackTrace();
		}	
		return map;
	}
	public Map<String,Object> savePataientPreConsultationAssessment(Box box, Map mapForDs){
	   Map<String, Object> map = new HashMap<String, Object>();
	   List<Integer> serviceCentreList = new ArrayList<Integer>();
	   List serviceCentreIdList = new ArrayList();
	   try{
		   
		   Session session = (Session) getSession();
		   Transaction tx=session.beginTransaction();
		   HibernateTemplate hbt = getHibernateTemplate();
		   hbt.setFlushModeName("FLUSH_EAGER");
		   hbt.setCheckWriteOperations(false);
		   OpdNursingPatientDetails opdNursingPatientDetails=new OpdNursingPatientDetails();
		   OpdPatientHistory opdPatientHistory=new OpdPatientHistory();
		   OpdPatientDetails opdPatientDetails=new OpdPatientDetails();
		   
		   Map<String,Object> utilMap = new HashMap<String,Object>();
		   utilMap = (Map)HMSUtil.getCurrentDateAndTime();
		   
		   String currentDate = (String)utilMap.get("currentDate");  
		   String currentTime = (String)utilMap.get("currentTime");
		   String consultationDate = (String)utilMap.get("currentDate");
		   String consultationTime = (String)utilMap.get("currentTime");
		   Integer userId = (Integer)utilMap.get("userId");
		   
		    Patient patient=new Patient();
			int visitId =0;
		    int token  =0;
		    int uhid=0;
		    int hin_id=0;

		    String presentComplaintAndHistory="";
		    String historyOfPastIllness="";
		    String personalHistory="";
		    String familyHistory="";
		    String medicationHistory="";
		    
		    int pulse=0;
		    Float temperature=0.0f;
		    int systolicBp=0;
		    int diastolicBp=0;
		    Double weight=0.0;
		    Double height=0.0;
		    int depaId=0;
		    Float bmi=null;
		    int hospitalId=0;
		    int triagePatient=0;
		    int waitingLoc=0;
		    Visit visit=new Visit();
		    int docId=0;
		    boolean nextSkip = false;
		    if(box.get("nextSkip") != null && box.getBoolean("nextSkip") != false) {
		    	if(box.get("token")!=null && (Integer.parseInt(box.get("token")))!=0) {
		            token =Integer.parseInt(box.get("token"));
		            map.put("token", token);
		    	}
		    	if(box.get("visitId")!=null && (Integer.parseInt(box.get("visitId")))!=0) {
		    		visitId =Integer.parseInt(box.get("visitId"));
		    		map.put("visitId", visitId);
		    	}
		    	if(box.get("hostpitalId")!=null && !box.get("hostpitalId").equals(""))
			    {
		    		hospitalId =Integer.parseInt(box.get("hostpitalId"));
		    		map.put("hospitalId", hospitalId);
			    }
		 } else {
		    
		    if(box.get("docId")!=null && !box.get("docId").equals("") && (Integer.parseInt(box.get("docId")))!=0)
		    {
		    	docId =Integer.parseInt(box.get("docId"));
		    }
		    if(box.get("depaId")!=null && (Integer.parseInt(box.get("depaId")))!=0)
		    {
		    	depaId =Integer.parseInt(box.get("depaId"));
		    	opdPatientHistory.setDepartment(new MasDepartment(depaId));
		    	opdNursingPatientDetails.setDepartment(new MasDepartment(depaId));
		    }
		    
		    if(box.get("hostpitalId")!=null && !box.get("hostpitalId").equals(""))
		    {
		      hospitalId =Integer.parseInt(box.get("hostpitalId"));
		      map.put("hospitalId", hospitalId);
		      opdPatientDetails.setHospital(new MasHospital(hospitalId));
		      opdPatientHistory.setHospital(new MasHospital(hospitalId));
		      opdNursingPatientDetails.setHospital(new MasHospital(hospitalId));
		    }
		    if(box.get("visitId")!=null && (Integer.parseInt(box.get("visitId")))!=0)
		    {
		      visitId =Integer.parseInt(box.get("visitId"));
		      map.put("visitId", visitId);
		      visit=(Visit)hbt.get(Visit.class,visitId);
		      visit.setOpenby(null);
		      visit.setOpenat(null);
		      visit.setVisitStatus("n");
		    }
		    
		    /*immediate and urgent shifting process : Start*/
		    Visit visitForIU=new Visit();
		    Criteria criteria=session.createCriteria(Visit.class)
					.add(Restrictions.eq("VisitDate", new Date()))
					.add(Restrictions.eq("Department.Id", depaId))
					.add(Restrictions.ne("VisitStatus", "c").ignoreCase())
					//.add(Restrictions.eq("Doctor.Id", docId))
					.add(Restrictions.eq("Hospital.Id", hospitalId)) 
					.addOrder(Order.asc("OpVisitTime"))
					.addOrder(Order.asc("PriorityNumber"))
					.addOrder(Order.asc("TotalHospitalVisit"));
		    
		    if(box.get("triagePatient")!=null && !box.get("triagePatient").equals("") && box.getInt("triagePatient")!=0 )
		    {
		      triagePatient =Integer.parseInt(box.get("triagePatient"));
		      List<Visit>visitList=criteria.add(Restrictions.isNotNull("Openat")).add(Restrictions.isNotNull("Openby")).list();
		      if(visitList.size()>0){
		    	  visitForIU=visitList.get(0);
		    	  if(visitForIU!=null){
				    	String time=visitForIU.getOpVisitTime();
				    	String newTime= HMSUtil.addNewTimeToTime(time, 0, 0, 1);
				    	visit.setOpVisitTime(newTime);
				    	visit.setTriageCategory(triagePatient);
				    }
		      }
		    }else{
		    	if(box.get("waitingLoc")!=null && !box.get("waitingLoc").equals("") && box.getInt("waitingLoc")!=0 )
			    {
			    	waitingLoc =Integer.parseInt(box.get("waitingLoc"));
			    	List<Visit>visitList=criteria.add(Restrictions.isNull("Openat")).add(Restrictions.isNull("Openby")).setMaxResults(waitingLoc).list();
			    	if(visitList.size()>0){
			    		visitForIU=visitList.get(visitList.size()-1);
				    	if(visitForIU!=null){
					    	String time=visitForIU.getOpVisitTime();
					    	String newTime= HMSUtil.addNewTimeToTime(time, 0, 0, 1);
					    	visit.setOpVisitTime(newTime);
					    	visit.setTriageCategory(triagePatient);
					    	visit.setWaitingPosition(waitingLoc);
				    	}
			    	}
			    	
			    }
		    }
		    
		    
		    						
		    /*immediate and urgent shifting process : End*/
		   			
		    if(box.get("hostpitalId")!=null && !box.get("hostpitalId").equals(""))
		    {
		      hospitalId =Integer.parseInt(box.get("hostpitalId"));
		      map.put("hospitalId", hospitalId);
		      opdPatientDetails.setHospital(new MasHospital(hospitalId));
		      opdPatientHistory.setHospital(new MasHospital(hospitalId));
		      opdNursingPatientDetails.setHospital(new MasHospital(hospitalId));
		    }
		    
		    if(box.get("visitId")!=null && (Integer.parseInt(box.get("visitId")))!=0)
		    {
		      visit.setAddEditDate(new Date());
		      hbt.update(visit);
		      opdPatientDetails.setVisit(visit);
		      opdNursingPatientDetails.setVisit(visit);
		    }
		   
		    if(box.get("token")!=null && (Integer.parseInt(box.get("token")))!=0)
		    {
		            token =Integer.parseInt(box.get("token"));
		            map.put("token", token);
		    }
	
		    if(box.get("hin_id")!=null && Integer.parseInt(box.get("hin_id"))!=0)
		    {
		    	hin_id =Integer.parseInt(box.get("hin_id"));
		    	opdPatientHistory.setHin(new Patient(hin_id));
		    }
		    
		
		    
		    if(box.get("presentComplain")!=null)
		    {
		    	presentComplaintAndHistory =box.get("presentComplain");
		    	opdPatientHistory.setPresentComplaintHistory(presentComplaintAndHistory);
		    	opdNursingPatientDetails.setPresentComplaintHistory(presentComplaintAndHistory);
		    }
		    if(box.get("pastIllness")!=null)
		    {
		    	historyOfPastIllness =box.get("pastIllness");
		    	opdPatientHistory.setPastIllnessHistory(historyOfPastIllness);
		    	opdNursingPatientDetails.setPastIllnessHistory(historyOfPastIllness);
		    }
		    if(box.get("personalHistory")!=null)
		    {
		    	personalHistory =box.get("personalHistory");
		    	opdPatientHistory.setPersonalPresentHistory(personalHistory);
		    	opdNursingPatientDetails.setPresentHistory(personalHistory);
		    }
		    if(box.get("familyHistory")!=null)
		    {
		    	familyHistory =box.get("familyHistory");
		    	opdPatientHistory.setFamilyPastHistory(familyHistory);
		    	opdNursingPatientDetails.setFamilyHistory(familyHistory);
		    }
		    
		    if(box.get("medicationhistory")!=null)
		    {
		    	medicationHistory =box.get("medicationhistory");
		    	opdPatientHistory.setMadicationHistory(medicationHistory);
		    	opdNursingPatientDetails.setMadicationHistory(medicationHistory);
		    }
		    //patient physic status....
		    if(box.get("pulse")!=null && !box.get("pulse").equals(""))
		    {
		    	pulse =Integer.parseInt(box.get("pulse"));
		    	opdPatientDetails.setPulse(pulse);
		    	opdNursingPatientDetails.setPulse(pulse);
		    	
		    }
		    if(box.get("temperature")!=null && !box.get("temperature").equals(""))
		    {
		    	temperature =Float.valueOf(box.get("temperature"));
		    	opdPatientDetails.setTemperature(temperature);
		    	opdNursingPatientDetails.setTemperature(temperature);
		    }
		    if(box.get("systolic")!=null && !box.get("systolic").equals("") 
		    		&& box.get("diastolic")!=null && !box.get("diastolic").equals(""))
		    {
		    	systolicBp =Integer.parseInt(box.get("systolic"));
		    	diastolicBp =Integer.parseInt(box.get("diastolic"));
		    	if(systolicBp!=0 && diastolicBp!=0){
		    		String systolic_diastolic=systolicBp+"/"+diastolicBp;
		    		opdPatientDetails.setBp(systolic_diastolic);
		    		opdNursingPatientDetails.setBp(systolic_diastolic);
			    }
		    }
		    
		    if(box.get("weight")!=null && !box.get("weight").equals(""))
		    {
		    	weight =Double.parseDouble(box.get("weight"));
		    	opdPatientDetails.setWeight(weight);
		    	//Changed by Arbind on 20-11-2017
		    	//opdNursingPatientDetails.setWeight(Integer.parseInt(weight.toString()));
		    	opdNursingPatientDetails.setWeight(weight);
		    }
		    if(box.get("height")!=null && !box.get("height").equals(""))
		    {
		    	height =Double.parseDouble(box.get("height"));
		    	opdPatientDetails.setHeight(height);
		    	opdNursingPatientDetails.setHeight(height);
		    }
		    if(box.get("bmi")!=null && !box.get("bmi").equals(""))
		    {
		    	bmi =new Float(box.get("bmi"));
		    	opdPatientDetails.setBmi((bmi));
		    }
		    if(box.get("userId")!=null && !box.get("userId").equals(""))
		    {
		    	opdNursingPatientDetails.setLastChgBy(new Users(userId));
		    }
		    opdNursingPatientDetails.setStatus("Y");
		    opdNursingPatientDetails.setLastChgDate(new Date());
		    opdNursingPatientDetails.setLastChgTime(currentTime);
		    
		    opdPatientDetails.setConsultationDate(new Date());
		    opdPatientDetails.setConsultationTime(consultationTime);
		    opdPatientDetails.setOpdDate(new Date());
		    opdPatientDetails.setOpdTime(consultationTime);
		    opdPatientHistory.setOpdPatientDetails(opdPatientDetails);
		    
		    hbt.save(opdPatientDetails);
		    hbt.save(opdPatientHistory);
		    hbt.save(opdNursingPatientDetails);
		   if(hin_id != 0){
			 Patient pt = (Patient)hbt.load(Patient.class, hin_id);
				if(pt.getConfirmedStatus() != null && !pt.getConfirmedStatus().equals("")){
				 if(pt.getConfirmedStatus().equalsIgnoreCase("y")){
				 }
			   }else{
				   if(box.getString("bloodGroupValue") != null){
					   pt.setBloodGroupValue(box.getString("bloodGroupValue"));
				   }
				   if(box.getString("bloodGroupStatus") != null){
					   pt.setConfirmedStatus(box.getString("bloodGroupStatus"));
				   }
				   hbt.update(pt);
				 }
		   }
		    tx.commit();
		 }
		  //Added by Arbind on 08-05-2017
		    if(null !=mapForDs.get("serviceCentreList")){
				serviceCentreList = (List<Integer>)mapForDs.get("serviceCentreList");
				for(Integer i : serviceCentreList) {
					serviceCentreIdList.add(i);
				}
				map.put("serviceCentreList", serviceCentreIdList);
		   }
		    map=nextWaitingPatient(map);
		    
	   }catch(Exception exception){
		   exception.printStackTrace();
	   }
		return map;
	}
	public Map<String,Object> nextWaitingPatient(Map mapForDS){
		Map<String, Object>map=new HashMap<String, Object>();
		try{
			   Session session = (Session) getSession();
			   Date date = new Date();
			   Visit visit=new Visit();
			   List<Visit>patientWaitingList=new ArrayList<Visit>();
			   List<Integer> serviceCentreList = new ArrayList<Integer>();
			   List serviceCentreIdList = new ArrayList();
			   int hospitalId = (Integer) mapForDS.get("hospitalId");
			 //Added by Arbind on 09-05-2017
			   if(null !=mapForDS.get("serviceCentreList")){
					serviceCentreList = (List<Integer>)mapForDS.get("serviceCentreList");
					for(Integer i : serviceCentreList) {
						serviceCentreIdList.add(i);
					}
			   }
			   if(mapForDS.get("token")!=null){
				   int token = (Integer) mapForDS.get("token");
				   int visitId = (Integer) mapForDS.get("visitId");
				   Criteria criteria= session.createCriteria(Visit.class)
							.add(Restrictions.eq("VisitDate", date))
							.add(Restrictions.eq("VisitStatus", "w").ignoreCase())
							.add(Restrictions.eq("Hospital.Id", hospitalId))
				   			.add(Restrictions.ne("Id", visitId))
				   			.add(Restrictions.ne("TokenNo", token))
				   			.add(Restrictions.ne("VisitStatus", "p").ignoreCase())
				   			.addOrder(Order.asc("TokenNo"));
				 //Added by Arbind on 09-05-2017
				   if(serviceCentreIdList != null && serviceCentreIdList.size()>0 ){
						criteria.add(Restrictions.in("Department.Id", serviceCentreIdList));
				   }
				   patientWaitingList=criteria.list();
			   }
			   map.put("patientWaitingList", patientWaitingList);
		   }catch(Exception exception){
			   exception.printStackTrace();
		   }
			return map;
		}
	
	public Map<String, Object> showPopUpPresentComplaint(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templatePresentComplaintList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templatePresentComplaintList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
							//.add(Restrictions.eq("temp.TemplateType", "C"))
							.add(Restrictions.eq("Status", "y"))
							.add(Restrictions.ne("PresentComplaintHistory", "")) //Added by Arbind on 03-05-2017
							.addOrder(Order.asc("Id"))
							.list();
		map.put("templatePresentComplaintList", templatePresentComplaintList);
		return map;
	}
	
	@Override
	public Map<String, Object> showPopUpFamilyHistory(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateFamilyList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templateFamilyList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "C"))
									.add(Restrictions.eq("Status", "y"))
									.add(Restrictions.ne("FamilyHistory", "")) //Added by Arbind on 03-05-2017
									.addOrder(Order.asc("Id"))
									.list();
		map.put("templateFamilyList", templateFamilyList);
		return map;
	}
	
	@Override
	public Map<String, Object> showPopUpHistoryOfPastIllness(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateFamilyList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templateFamilyList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "C"))
									.add(Restrictions.eq("Status", "y"))
									.add(Restrictions.ne("PastIllnessHistory", "")) //Added by Arbind on 03-05-2017
									.addOrder(Order.asc("Id"))
									.list();
		map.put("templateFamilyList", templateFamilyList);
		return map;
	}
	
	@Override
	public Map<String, Object> showPopUpPersonalHistory(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateFamilyList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templateFamilyList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "C"))
									.add(Restrictions.eq("Status", "y"))
									.add(Restrictions.ne("PersonalHistory", "")) //Added by Arbind on 03-05-2017
									.addOrder(Order.asc("Id"))
									.list();
		map.put("templateFamilyList", templateFamilyList);
		return map;
	}
	
	@Override
	public Map<String, Object> showPopUpMedicationHistory(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateFamilyList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		//Changed by Arbind on 03-05-2017
		/*templateFamilyList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "C"))
									.add(Restrictions.eq("Status", "y"))
									.addOrder(Order.asc("Id"))
									.list();*/
		templateFamilyList=session.createCriteria(OpdTemplateTreatment.class)
				//.add(Restrictions.eq("temp.TemplateType", "C"))
				.add(Restrictions.eq("Status", "y"))
				.add(Restrictions.ne("MedicationHistory",""))
				.addOrder(Order.asc("Id"))
				.list();
		map.put("templateFamilyList", templateFamilyList);
		return map;
	}
	
	@Override
	public Map<String, Object> autoCompleteForDiagnosis(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasSystemDiagnosis> systemDiagnosisList = new ArrayList<MasSystemDiagnosis>();
//		List<MasIcd> systemDiagnosisList = new ArrayList<MasIcd>();
		try {
			String diagnosisName = "%" + dataMap.get("autoHint") + "%";
		//	String diagnosisName = dataMap.get("autoHint") + "%";
    		systemDiagnosisList  = session.createCriteria(MasSystemDiagnosis.class)
			.add(Restrictions.like("SystemDiagnosisName", diagnosisName).ignoreCase()).list();
			/*systemDiagnosisList  = session.createCriteria(MasIcd.class)
			.add(Restrictions.like("IcdName", diagnosisName).ignoreCase()).list();*/
			
			map.put("systemDiagnosisList", systemDiagnosisList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> showPopUpGeneralExamination(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateGeneTreatmentList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templateGeneTreatmentList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
							//.add(Restrictions.eq("temp.TemplateType", "C"))
							.add(Restrictions.eq("Status", "y"))
							.add(Restrictions.ne("GeneralExamination", "")) //Added by Arbind on 03-05-2017
							.addOrder(Order.asc("Id"))
							.list();
		map.put("templateGeneTreatmentList", templateGeneTreatmentList);
		return map;
	}
	//----------Systemic Examination templates
	@Override
	public Map<String, Object> showPopUpSystemicExamination(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateSysTreatmentList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templateSysTreatmentList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "S"))SystemicExamination
									.add(Restrictions.eq("Status", "y"))
									.add(Restrictions.ne("SystemicExamination", "")) //Added by Arbind on 03-05-2017
									.addOrder(Order.asc("Id"))
									.list();
		map.put("templateSysTreatmentList", templateSysTreatmentList);
		return map;
	}
	
	@Override
	public Map<String, Object> showPopUpLocalExamination(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdTemplateTreatment> templateSysTreatmentList = new ArrayList<OpdTemplateTreatment>();
		Session session = (Session) getSession();
		templateSysTreatmentList=session.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp")
									//.add(Restrictions.eq("temp.TemplateType", "S"))
									.add(Restrictions.eq("Status", "y")).list();
		map.put("templateSysTreatmentList", templateSysTreatmentList);
		return map;
	}
	
	
	
	@Override
	public Map<String, Object> getSecondOpinion(Map<String, Object> dataMap) {
		
		int departmentId=(Integer)dataMap.get("departmentId");
		int hospitalId=(Integer)dataMap.get("hospitalId");
		int empId=(Integer)dataMap.get("empId");
		Map<String,Object> utilMap = new HashMap<String,Object>();
		utilMap = (Map)HMSUtil.getCurrentDateAndTime();
		String time  = (String)utilMap.get("currentTime");
		try{
		Session session=(Session)getSession();
		
		List<MasEmployee> masEmployeeList=new ArrayList<MasEmployee>();
		
		List<HospitalDoctorUnitT> unitListT= new ArrayList<>();
		Criteria crt = null;

		crt = session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM")
				.createAlias("Employee", "e").createAlias("e.Users", "u")
				.add(Restrictions.eq("u.Id", empId)).createAlias("u.Department", "dd")
				.add(Restrictions.eq("dd.Id", departmentId));
		unitListT = crt.list();
		int unitId =0;
		
		if(unitListT.size()>0){
			int unitMId=unitListT.get(0).getUnitM().getId();
			crt = session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM")
			.createAlias("Employee", "e").createAlias("e.Users", "u").add(Restrictions.ne("u.Id", empId))
			.createAlias("u.Department", "dd").add(Restrictions.eq("u.AvailableToday", "y").ignoreCase())
			.add(Restrictions.eq("UnitM.Id", unitMId)).add(Restrictions.eq("Status", "y").ignoreCase());
			crt = crt.add(Restrictions.or(Restrictions.isNull("e.VisitTimeUpto"), Restrictions.lt("e.VisitTimeUpto", new Date())));
			crt= crt.add(Restrictions.eq("dd.Id", departmentId));
			unitListT = crt.list();
		}
		
		List<Integer> employeeList = new ArrayList<Integer>();
		for(HospitalDoctorUnitT hospitalDoc: unitListT){
			if(hospitalDoc.getEmployee()!=null){
				int employeeId = hospitalDoc.getEmployee().getId();	
				employeeList.add(employeeId);
			}
		}
		if(unitListT.size()>0){
			crt =session.createCriteria(MasEmployee.class).add(Restrictions.in("Id",employeeList));
			masEmployeeList=crt.list();
		}
		
		dataMap.put("masEmployeeList", masEmployeeList);
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return dataMap;
	}
	@Override
	public Map<String, Object> getPatientVisitDetails(Map<String, Object> map){
		Session session = null;
		session = (Session) getSession();
		List<Visit> visitPatient = new ArrayList<Visit>();
		List<OpdPatientHistory>opdPatientHistories=new ArrayList<OpdPatientHistory>();
		List<OpdPatientDetails> opdPatientDetails=new ArrayList<OpdPatientDetails>();
		List<MasBloodGroup> bloodGroupList=new ArrayList<MasBloodGroup>();
		int visitId=(Integer)map.get("visitId");
		int hospitalid=(Integer)map.get("hospitalId");
		int lastVisitNo=0;
		try {
			Transaction tx=session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		    hbt.setFlushModeName("FLUSH_EAGER");
		    hbt.setCheckWriteOperations(false);
		    
		    int userId=0;
		    if(map.get("userId")!=null){
		    	userId=(Integer)map.get("userId");	
		    }
		    
			visitPatient = session.createCriteria(Visit.class)
							.add(Restrictions.eq("Hospital.Id",hospitalid))
							.add(Restrictions.eq("Id", visitId)).list();
			bloodGroupList = session.createCriteria(MasBloodGroup.class).add(Restrictions.eq("Status", "y")).list();
			
			if(visitPatient.size()>0){
				Patient patient=(Patient)visitPatient.get(0).getHin();
				opdPatientDetails=session.createCriteria(OpdPatientDetails.class)
						.createAlias("Visit", "v")
						.add(Restrictions.eq("v.Id", visitId))
						.add(Restrictions.eq("v.Hin", patient))
						.addOrder(Order.desc("v.VisitDate"))
						.list();
				
				if(opdPatientDetails.size()>0){
					opdPatientHistories=session.createCriteria(OpdPatientHistory.class)
							.add(Restrictions.eq("OpdPatientDetails", opdPatientDetails.get(0)))
							.list();
				}
			}
			if(visitId!=0){
				Visit visit=(Visit)hbt.load(Visit.class,visitId);
				if(visit!=null){
					Integer lastOpenBy=visit.getOpenby()!=null?visit.getOpenby().getId():0;
					String lastOpenAt=visit.getOpenat();
					if(lastOpenAt!=null && !lastOpenAt.equals("") && lastOpenBy!=0){
						String dateStop = HMSUtil.convertDateToStringOnlyTime(new Date());
						SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
						Date d1 = format.parse(lastOpenAt);
						Date d2 = format.parse(dateStop);
						long diff = d2.getTime() - d1.getTime();
						long diffMinutes = diff / (60 * 1000) % 60;
						if(userId!=lastOpenBy && diffMinutes>=2){
								map.put("openStatus",false);
								visit.setOpenby(new Users(userId));
								visit.setOpenat(HMSUtil.convertDateToStringOnlyTime(new Date()));
								hbt.update(visit);
						}else if(userId==lastOpenBy){
								map.put("openStatus",false);
								visit.setOpenby(new Users(userId));
								visit.setOpenat(HMSUtil.convertDateToStringOnlyTime(new Date()));
								hbt.update(visit);
						}else if(userId!=lastOpenBy && diffMinutes<=2){
								map.put("openStatus",true);
						}
					}else{
						map.put("openStatus",false);
						visit.setOpenby(new Users(userId));
						visit.setOpenat(HMSUtil.convertDateToStringOnlyTime(new Date()));
						hbt.update(visit);
					}
				}
				map.put("patientDataList", visitPatient);
				map.put("lastOpdPatientDetails", opdPatientDetails);
				map.put("lastOpdPatientHistory", opdPatientHistories);
				map.put("bloodGroupList", bloodGroupList);
			}
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
		}catch (ParseException e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> submitSecondOpinion(Map<String, Object> dataMap) {
		
		boolean status=false;
		Transaction tnx=null;
		Session session=(Session)getSession();
		int secondOpinionDoc=(Integer)dataMap.get("secondOpinionDoc");
		
		MasEmployee employee=new MasEmployee();
		employee.setId(secondOpinionDoc);
		
		String comments=(String)dataMap.get("comments");
		
		String ehrStatus=(String)dataMap.get("ehr");
		
		String casesheet=(String)dataMap.get("casesheet");
		String prescription=(String)dataMap.get("prescription");
		
		String InvestigationStatus=(String)dataMap.get("Investigation");
		
		int hospitalId=(Integer)dataMap.get("hospitalId");
		MasHospital hospital=new MasHospital();
		hospital.setId(hospitalId);
		
		int hinId=(Integer)dataMap.get("hinId");
		Patient patient=new Patient();
		patient.setId(hinId);
		
		int visitId=(Integer)dataMap.get("visitId");
		
		String patientDetailsStatus=(String)dataMap.get("patientDetailsStatus");
		
		Visit visit=new Visit();
		visit.setId(visitId);
		
		
		
		String uhidNo=(String)dataMap.get("uhidNo");
		
		OpdPatientSecondOpinion patientSecondOpinion=new OpdPatientSecondOpinion();
		
		patientSecondOpinion.setPatientDetailsStatus(patientDetailsStatus);
		patientSecondOpinion.setEhr(ehrStatus);
		patientSecondOpinion.setInvestigation(InvestigationStatus);
		patientSecondOpinion.setOpenionComments(comments);
		patientSecondOpinion.setOpinionDoctor(employee);
		patientSecondOpinion.setOpinionHin(patient);
		patientSecondOpinion.setOpinoinStatus("p");
		patientSecondOpinion.setUhidNo(uhidNo);
		patientSecondOpinion.setVisit(visit);
		patientSecondOpinion.setCaseSheet(casesheet);
		patientSecondOpinion.setPrescription(prescription);
		
		
		 org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		    hbt.setFlushModeName("FLUSH_EAGER");
		    hbt.setCheckWriteOperations(false);
		    try{
		    tnx=session.beginTransaction();
		    hbt.save(patientSecondOpinion);
		    status=true;
		    tnx.commit();
		    session.flush();
		    }
		    catch(Exception e){
		    	tnx.rollback();
		    	e.printStackTrace();
		    }
		  Map<String,Object> map=new HashMap<String,Object>();  
		  map.put("status",status);
		
		return map;
	}
	
	@Override
	public Map<String, Object> getDistrictHospital(Map<String, Object> dataMap) {
		int districtId=(Integer)dataMap.get("districtId");
		int hospitalTypeId = 0;
		int hospitalId=0;
		if(dataMap.get("hospitalTypeId") != null){
			hospitalTypeId = (Integer)dataMap.get("hospitalTypeId");
		}
		if(dataMap.get("hospitalId")!=null){
			hospitalId=(Integer)dataMap.get("hospitalId");
		}
		
		Session session = (Session) getSession();
		List<MasHospital>list=session.createCriteria(MasHospital.class).add(Restrictions.eq("District.Id", districtId)).add(Restrictions.eq("HospitalType.Id", hospitalTypeId))
				.add(Restrictions.ne("Id", hospitalId))
				.list();
		dataMap.put("hospitaList", list); 
		return dataMap;
	}
	@Override
	public Map<String, Object> getHospitalDepartment(Map<String, Object> dataMap) {
		int hospitalId=(Integer)dataMap.get("hospitalId");
		String referType = "";
		int deptId= 0;
		if(dataMap.get("referType") != null){
			referType = (String)dataMap.get("referType");
		}
		
		if(dataMap.get("deptId") != null){
			deptId = (Integer)dataMap.get("deptId");
		}

		Session session = (Session) getSession();
		if(referType.equals("referInternal")){
		List<MasInstituteDepartment>list=session.createCriteria(MasInstituteDepartment.class)
				.createAlias("Department","dep")
				.add(Restrictions.ne("dep.Id", deptId))
				.add(Restrictions.eq("Institute.Id", hospitalId))
				.add(Restrictions.eq("dep.DepartmentType.Id", 1))
				.add(Restrictions.eq("Status", 'y').ignoreCase())
				.addOrder(Order.asc("dep.DepartmentName")).list();
		dataMap.put("departmentList", list);
		}else if(referType.equals("referExternal") || referType.equals("referInternalRecall")){
			List<MasInstituteDepartment>list=session.createCriteria(MasInstituteDepartment.class)
					.createAlias("Department","dep")
					.add(Restrictions.eq("Institute.Id", hospitalId))
					.add(Restrictions.eq("dep.DepartmentType.Id", 1))
					.add(Restrictions.eq("Status", 'y').ignoreCase())
					.addOrder(Order.asc("dep.DepartmentName")).list();
			dataMap.put("departmentList", list);
			
		}
		dataMap.put("referType", referType);
		dataMap.put("deptId", deptId); //Added by Arbind on 15-03-2017
		return dataMap;
	}
	
	@Override
	public Map<String, Object> getDoctorDepartment(Map<String, Object> dataMap) {
		int departmentId=(Integer)dataMap.get("departmentId");
		int hospitalId = (Integer)dataMap.get("hospitalId");
		Session session = (Session) getSession();
		/*List<MasEmployee>list=session.createCriteria(MasEmployee.class)
				.createAlias("Department", "dep")
				.add(Restrictions.eq("dep.Status", 'y').ignoreCase())
				.add(Restrictions.eq("dep.Id", departmentId)).list();*/
		
		List<MasEmployee>list = session.createCriteria(EmpScMapping.class).createAlias("Department", "dept").add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("dept.Status", 'y').ignoreCase())
				.add(Restrictions.eq("dept.Id", departmentId))
				.createAlias("Employee", "emp").addOrder(Order.asc("emp.EmployeeName"))
				.add(Restrictions.or(Restrictions.isNull("emp.VisitTimeUpto"), Restrictions.lt("emp.VisitTimeUpto", new Date())))
				.list(); //Added by Arbind on 14-12-2017
					dataMap.put("doctorList", list);
		return dataMap;
	}
	
	public Map<String, Object> showUploadingDocumentsJsp(int visitId, int inpatientId,Map<String, Object> mapForDS){
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		List<Inpatient> inpatientList=new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		String reportingFor = "";
		if(mapForDS.get("reportingFor") != null){
			reportingFor = (String)mapForDS.get("reportingFor");
		}
		try {
			
			if(visitId!=0){
				if(!reportingFor.equals("") && reportingFor.equalsIgnoreCase("FamilyWC"))
				{
					patientDataList = session.createCriteria(Visit.class).
					add(Restrictions.eq("ReportingFor", "FamilyWC")).
					add(Restrictions.eq("Id", visitId)).list();
				}else{
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
				}

			}else if(inpatientId!=0){
				inpatientList = session.createCriteria(Inpatient.class).add(
						Restrictions.eq("Id", inpatientId)).list();

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);
		map.put("inpatientList", inpatientList);
		return map;
	}
	
	
	@Override
	public Map<String, Object> showDiagnosis(Map<String, Object> map1) {
		
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			
			//String generic_name+"%"=  (String) map1.get("autoHint");
			String generic_name =  "%" +(String) map1.get("autoHint")+ "%";

			/*List<Diagnosispro> DiagnosisproList = new ArrayList<Diagnosispro>();
			
			Criteria cri = session.createCriteria(Diagnosispro.class)
			.add(Restrictions.eq("Name", generic_name).ignoreCase());
			DiagnosisproList=cri.list();*/
			
			//map.put("DiagnosisproList", DiagnosisproList);
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
		}
	@Override
	public Map<String, Object> showDiagnosisPopUp(Map<String, Object> map1) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdMasSymptom> symptomList = new ArrayList<OpdMasSymptom>();
		try {
		
			String str = "%" + map1.get("autoHint") + "%";
			
			String	query = "from OpdMasSymptom as oms where upper(SymptomName) like upper( :str )";
			Query q = session.createQuery(query);
			q.setParameter("str",str);
			q.setFirstResult(0);
			q.setMaxResults(20);
			symptomList = q.list();
			
			map.put("symptomList", symptomList);
		
			
			} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	public Map<String, Object> submitDifferentialDiagnosis(String arr[])
	{
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> symptomDiseaseMappingList = new ArrayList<Object[]>();
		
		Session session = null;
		session = (Session) getSession();
		try	
		{   org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		    hbt.setFlushModeName("FLUSH_EAGER");
		    hbt.setCheckWriteOperations(false);

			int cnt=0;
			String sqlId="";
			
			for(String a1:arr)
			{
				if(cnt==0){
						sqlId=a1;
				}else{
					sqlId=sqlId+","+a1;
				}
				++cnt;
				}
			int countValue=0;
			if(arr.length>1){
				countValue=1;
			}
			String strQuery = "select DIFFERENTIAL_DISEASE_ID,DIFFERENTIAL_DISEASE_NAME from OPD_DIFFERENTIAL_DISEASE " +
					" where  DIFFERENTIAL_DISEASE_ID in (select distinct DIFFERENTIAL_DISEASE_ID " +
					" from OPD_SYMPTOM_DISEASE_MAPPING where SYMPTOM_ID in("+sqlId+")  " +
					" group by DIFFERENTIAL_DISEASE_ID HAVING count(DIFFERENTIAL_DISEASE_ID)>"+countValue+")";
 	
			symptomDiseaseMappingList  = session.createSQLQuery(strQuery).list();
		map.put("symptomDiseaseMappingList", symptomDiseaseMappingList);	
			
		}catch(HibernateException he)
		{
			he.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> getDrugAndProcedureDetails(Map<String, Object> map) {
		try{
			String hinNo=(String)map.get("hinNo");
			Integer injAppId=(Integer)map.get("injAppId");
			Integer departmentId=(Integer)map.get("departmentId");
			Integer hospitalId=(Integer)map.get("hospitalId");
			int visitId=(Integer)map.get("visitId");
			Session session = (Session) getSession();
			String hospitalName = "";
			List<MasHospital> list = session.createCriteria(MasHospital.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Id", hospitalId)).list();

			if (list.size() > 0) {
				MasHospital obj = (MasHospital) list.get(0);
				hospitalName = obj.getHospitalName();
			}
			
			map.put("hospitalName", hospitalName);
			map.put("departmentId", departmentId);
			map.put("hospitalId", hospitalId);
			
			String strDate=(String)map.get("opdDate");
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Date date=sdf.parse(strDate);
			Date today = new Date();
			
			
			List<PatientPrescriptionHeader> injectionList = new ArrayList<PatientPrescriptionHeader>();
			List<InjAppointmentDetails> injectionAppList = new ArrayList<InjAppointmentDetails>();
			if(injAppId!=null && injAppId!=0){
				injectionAppList=session.createCriteria(InjAppointmentDetails.class)
											.createAlias("InjAppointmentHeader","injAPNTHDR")
											.add(Restrictions.eq("injAPNTHDR.Id", injAppId))
											//.add(Restrictions.eq("injAPNTHDR.AppointmentDate", date))
											/*.add(Restrictions.eq("Status", "y").ignoreCase())*/
											/*.setProjection(Projections.distinct(Projections.property("Item.Id")))*/
											
											.list();  
			}
			
			/*String query="select d.status,d.inj_appointment_header_id,i.nomenclature,mf.frequency_name,ppd.item_id,roa.route_name,"
					+ " ppd.dosage,ppd.no_of_days,i.insulin_injection,ppd.frequency_id,ppd.total,d.inj_appointment_details_id,d.appointment_time from inj_appointment_details d "+
		" left outer join  inj_appointment_header h on h.inj_appointment_header_id=d.inj_appointment_header_id "+
		" left outer join patient_prescription_details ppd on ppd.id=d.prescription_details_id "+
		" left outer join mas_store_item i on i.item_id=ppd.item_id "+
		" left outer join mas_frequency mf on mf.frequency_id=ppd.frequency_id "+
		" left outer join route_of_administration roa on roa.route_id=ppd.route_id "+
		"  where h.visit_id="+visitId+" and h.appointment_date='"+today+"' and d.status='p' ";*/
			
		List<InjAppointmentDetails>injappList=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "injHeader")
				   .add(Restrictions.eq("injHeader.Visit.Id", visitId))
				   /*.add(Restrictions.eq("Status","p").ignoreCase())*/
				   /*.add(Restrictions.eq("InjAppointmentDate", date))*/
				   .list();
		
		
				
				Object[] selectedCode = {"TAB","Cap"};
				List<PatientPrescriptionDetails>ppdList=session.createCriteria(PatientPrescriptionDetails.class)
										.createAlias("Prescription","pph").createAlias("pph.Visit","visit")
										.add(Restrictions.eq("visit.Id",visitId))
										.createAlias("Item","item")
										.createAlias("item.ItemCategory","cat")
										.createAlias("item.ItemClass","class")
										//.add(Restrictions.eq("cat.ItemCategoryCode", "DRG"))
										.add(Restrictions.in("class.ItemClassCode",selectedCode))
										.list();
				map.put("ppdList", ppdList);
				List<Visit> visitList = new ArrayList<Visit>();
				visitList= session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
			
			List<Object[]>aList=new ArrayList<Object[]>();
			//aList=session.createSQLQuery(query).list();
			
			Map<String,Object> mapProce = getDetailsForProcWaitList(hospitalId,visitId);
			map.put("pendingProcList", (List<ProcedureHeader>)mapProce.get("pendingProcList"));
			map.put("injectionAppList", injectionAppList);
			map.put("aList",injappList);
			map.put("visitList",visitList);
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	
	@Override
	public Map<String, Object> getPatientVitalTrends(Map<String, Object> map) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		int hinId=(Integer)map.get("hinId");
		Long memberId=(Long)map.get("memberId");
		Session session = (Session) getSession();
		List<OpdPatientDetails>list=session.createCriteria(OpdPatientDetails.class,"opd")
				.createAlias("opd.Visit", "visit")
				.createAlias("visit.Hin", "pat")
				.add(Restrictions.eq("pat.Id",hinId))
				.list();
		List<PhDiseaseRegistrationScreening>pdrslist=session.createCriteria(PhDiseaseRegistrationScreening.class,"pdrs")
				.add(Restrictions.eq("MemberId",memberId))
				.list();
		map.put("visitList", list);
		map.put("pdrslist", pdrslist);
		return map;
	}
	
	@Override
	public Map<String, Object> getPayward(Map<String, Object> map) {
		Session session = (Session) getSession();
		int hospitalId=(Integer)map.get("hospitalId");
		String flag=(String)map.get("flag");
		List<MasDepartment>list=new ArrayList<MasDepartment>();
		int depWard =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "warddepartmenttype".trim()));
		Criteria criteria=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
									.createAlias("Department","dep")
									.add(Restrictions.eq("dep.DepartmentType.Id",depWard))
									.add(Restrictions.eq("dep.Status", "Y").ignoreCase())
									.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")));
		if(flag.equalsIgnoreCase("Y")){
			criteria.add(Restrictions.eq("dep.PaywardCheck","y").ignoreCase());
		}
		
		list=criteria.list();
		map.put("wardDepartment", list);
		return map;
	}
	
	@Override
	public Map<String, Object> getObservationWardAdmissionWaitingList(
			Map<String, Object> map) {
		Session session = (Session) getSession();
		Integer tokenno=(Integer)map.get("tokenno");
		String uhid=(String)map.get("uhid");
		String patientName=(String)map.get("patientName");
		String mobileNo=(String)map.get("mobileno");
		String docName=(String)map.get("docName");
		Integer hospitalId=(Integer)map.get("hospitalId");
		Boolean admitPatient=(Boolean)map.get("admitPatient");
		List<OpdPatientDetails>list=new ArrayList<OpdPatientDetails>();
		Criteria criteria =session.createCriteria(OpdPatientDetails.class)
				.createAlias("Visit", "visit")
				.createAlias("visit.Hospital", "hospital")
				//.createAlias("visit.Doctor", "doctor")
				.createAlias("visit.Hin", "patient")
				.add(Restrictions.eq("hospital.Id",hospitalId))
				.add(Restrictions.eq("ConsultationDate",new Date()));
		
				if(admitPatient!=null && admitPatient){
					criteria.add(Restrictions.eq("ObservationStatus", "A").ignoreCase());
				}else{
					criteria.add(Restrictions.eq("ObservationStatus", "y").ignoreCase());
				}
				if(uhid!=null && !uhid.equals("")){
					criteria.add(Restrictions.eq("visit.TokenNo", tokenno).ignoreCase());
				}
				if(uhid!=null && !uhid.equals("")){
					criteria.add(Restrictions.like("patient.HinNo", uhid));
				}
				if(patientName!=null && !patientName.equals("")){
					criteria.add(Restrictions.or(Restrictions.or(Restrictions.like("patient.PFirstName", "%"+patientName+"%").ignoreCase(), Restrictions.like("patient.PMiddleName", "%"+patientName+"%").ignoreCase()), Restrictions.like("patient.PLastName", "%"+patientName+"%").ignoreCase()));
				}
				if(mobileNo!=null && !mobileNo.equals("")){
					criteria.add(Restrictions.eq("patient.MobileNumber", mobileNo));
				}
		list=criteria.list();
		
		map.put("observationWaitingList", list);
		return map;
	}
	
	@Override
	public Map<String, Object> opdPatientObservationStatus(Map<String, Object> map) {
		Transaction tx = null;
		Session session = (Session) getSession();
		try{
		tx = session.beginTransaction();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Integer opdId=(Integer)map.get("opdId");
		OpdPatientDetails opd=null;
		if(opdId!=null && !opdId.equals("")){
			opd=(OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdId);
			opd.setObservationStatus("A");
			hbt.saveOrUpdate(opd);
		}
		tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> getOPNursingCareWaitingList(Map<String, Object> map) {
		Integer hospitalId=(Integer)map.get("hospitalId");
		int deptId=(Integer)map.get("deptId");
		Date FromDateId=(Date)map.get("FromDateId");
		Date ToDateId=(Date)map.get("ToDateId");
		List<PatientPrescriptionHeader> pendingInjectionList = new ArrayList<PatientPrescriptionHeader>();
		List<InjAppointmentHeader> InjectionList = new ArrayList<InjAppointmentHeader>();
		String [] departmentIdlist = {"0"};
		List<Integer> serviceCentreList = new ArrayList();
		List serviceCentreIdList = new ArrayList();

		Session session = (Session)getSession();
		Criteria crit = null;
		Criteria critApp = null;
		
		//Changed by Arbind on 17-05-2017
		/*int opd_DepartmentId=0;
		if(map.get("opd_Department")!=null){
			opd_DepartmentId =(Integer) map.get("opd_Department");
		}*/
		if(null !=map.get("serviceCentreList")){
			serviceCentreList = (List<Integer>)map.get("serviceCentreList");
			for(Integer i : serviceCentreList) {
				serviceCentreIdList.add(i);
			}
		}
		
		List<ProcedureDetails> procedureDetails = new ArrayList<ProcedureDetails>();
		/*procedureDetails = session.createCriteria(ProcedureDetails.class)
				.createAlias("ProcedureHeader", "ph")
				.createAlias("ph.Hospital", "h")
				.add(Restrictions.eq("h.Id",hospitalId))
				.add(Restrictions.eq("AppointmentDate", new Date()))
				.add(Restrictions.eq("Status", 'n').ignoreCase()).list();*/
		
		crit = session.createCriteria(ProcedureDetails.class)
				.createAlias("ProcedureHeader", "ph")
				.createAlias("ph.Hospital", "h")
				.add(Restrictions.eq("h.Id",hospitalId))
				.createAlias("ph.Visit", "v")
				.createAlias("v.Department", "d")
				//.add(Restrictions.eq("AppointmentDate", new Date()))
				.add(Restrictions.eq("Status", 'n').ignoreCase());
		if(FromDateId!=null && ToDateId!=null){
			crit  = crit.add(Restrictions.between("AppointmentDate", FromDateId, ToDateId));
		}else{
			crit  = crit.add(Restrictions.eq("AppointmentDate", (new Date())));
		}
		//Changed by Arbind on 17-05-2017
		/*if(opd_DepartmentId>0){
			crit  = crit.add(Restrictions.eq("d.Id",opd_DepartmentId ));
		}*/
		if(serviceCentreIdList != null && serviceCentreIdList.size()>0 ){
			crit.add(Restrictions.in("d.Id", serviceCentreIdList));
		}
		if(crit.list().size()>0){
		procedureDetails=crit.list();
		}
		
		List<Integer> visitList = new ArrayList<Integer>(new HashSet());
		for(ProcedureDetails listA: procedureDetails)
		{
			visitList.add(listA.getProcedureHeader().getVisit().getId());
		}
		procedureDetails.clear();
				
		

		critApp = session.createCriteria(InjAppointmentDetails.class)
				.createAlias("InjAppointmentHeader", "injAph")
				.createAlias("injAph.Hospital", "h")
				.createAlias("injAph.Visit", "v")
				.createAlias("v.Department", "d")
				.add(Restrictions.eq("Status", "p").ignoreCase())
				.add(Restrictions.eq("h.Id", hospitalId))
				/*.add(Restrictions.or(Restrictions.in("injAph.Visit.Id", visitList), Restrictions.eq("injAph.AppointmentDate",new Date())))*/
				//.add(Restrictions.eq("injAph.AppointmentDate",new Date()))
				//.add(Restrictions.eq("InjAppointmentDate",new Date())) commented by govind 13-2-2015
				.setProjection(Projections.groupProperty("InjAppointmentHeader"));
		
		if(FromDateId!=null && ToDateId!=null){
			critApp  = critApp.add(Restrictions.between("InjAppointmentDate", FromDateId, ToDateId));
		}else{
			critApp  = critApp.add(Restrictions.eq("InjAppointmentDate", (new Date())));
		}
		//Changed by Arbind on 17-05-2017
		/*if(opd_DepartmentId>0){
			critApp  = critApp.add(Restrictions.eq("d.Id",opd_DepartmentId ));
		}*/
		if(serviceCentreIdList != null && serviceCentreIdList.size()>0 ){
			critApp.add(Restrictions.in("d.Id", serviceCentreIdList));
		}

		if(critApp.list().size()>0){
		InjectionList = critApp.list();	
		}
		for(InjAppointmentHeader listB: InjectionList)
		{
			if(listB.getVisit()!=null){
				visitList.add(listB.getVisit().getId());
			    }
		}
		List<Visit>pendingNursingList = new ArrayList<Visit>();		
		if(visitList.size()>0){
			pendingNursingList = session.createCriteria(Visit.class).add(Restrictions.in("Id", visitList)).list();
			procedureDetails.clear();
		}

		//added by govind 14-02-2017
		List<OpdPatientDetails> opdPatientList=new ArrayList<OpdPatientDetails>();
		if(visitList.size()>0){
			opdPatientList = session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "v")
					.add(Restrictions.in("v.Id", visitList)).list();
		}
		
		map.put("opdPatientList", opdPatientList);
		List<MasDepartment> departmentList=new ArrayList<MasDepartment>();
		departmentList=	session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("DepartmentType.Id", 1))
				.addOrder(Order.asc("DepartmentName")).list();
		map.put("departmentList", departmentList);		//added by govind 14-02-2017
		
		List<MasInstituteDepartment>instituteDepartmentList = new ArrayList<MasInstituteDepartment>();
		instituteDepartmentList = session.createCriteria(MasInstituteDepartment.class)
				.createAlias("Department", "dep")
				.createAlias("dep.DepartmentType", "depType")
				.add(Restrictions.eq("Institute.Id", hospitalId))
				.add(Restrictions.eq("depType.DepartmentTypeCode", "CR").ignoreCase())
						.add(Restrictions.eq("Status", "y")).list();
						
		map.put("instituteDepartmentList", instituteDepartmentList);
		
		map.put("pendingNursingList", pendingNursingList);
		

		return map;
	}
	
	@Override
	public Map<String, Object> getObservationWard(Map<String, Object> map) {
		try{
			Session session = (Session) getSession();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Integer opdId=null;
			OpdPatientDetails opdPatientDetails=null;
			List<RouteOfAdministration> routeOfAdministrationList = new ArrayList<RouteOfAdministration>();
			List<MasInstructionMaster> masInstructionMasterList = new ArrayList<MasInstructionMaster>();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			List<StoreItemBatchStock> sotckBatchList = new ArrayList<StoreItemBatchStock>();
			Integer deptId=null;
			Integer hospitalId=(Integer) map.get("hospitalId");
			int depWard =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "warddepartmenttype".trim()));
			if(map.get("opdId")!=null){
				opdId=(Integer)map.get("opdId");
				opdPatientDetails=(OpdPatientDetails)hbt.load(OpdPatientDetails.class,opdId);
				deptId=opdPatientDetails.getVisit().getDepartment().getId();
				map.put("opdpatient", opdPatientDetails);
				List<ProcedureHeader> procedureHeaderList=new ArrayList<ProcedureHeader>();
				List<ProcedureDetails> procedureDetailsList=new ArrayList<ProcedureDetails>();
				procedureHeaderList=session.createCriteria(ProcedureHeader.class).add(Restrictions.eq("OpdPatientDetails.Id", opdId)).add(Restrictions.eq("Status", "n").ignoreCase()).list();
				if(procedureHeaderList.size()>0){
					procedureDetailsList=session.createCriteria(ProcedureDetails.class).add(Restrictions.eq("ProcedureHeader", procedureHeaderList.get(0))).list();
					map.put("procedureDetailsList",procedureDetailsList);
				}
				
				List<PatientPrescriptionHeader> patientPrescriptionHeaders=new ArrayList<PatientPrescriptionHeader>();
				List<PatientPrescriptionDetails> patientPrescriptionDetails=new ArrayList<PatientPrescriptionDetails>();
				patientPrescriptionHeaders=session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.eq("OpdPatientDetail.Id", opdId)).list();
				if(patientPrescriptionHeaders.size()>0){
					patientPrescriptionDetails=session.createCriteria(PatientPrescriptionDetails.class)
								.add(Restrictions.eq("Prescription", patientPrescriptionHeaders.get(0))).list();
					map.put("patientPrescriptionDetails",patientPrescriptionDetails);
					
					
				}
				int maxFrequncy=0;
				deptId=(Integer) map.get("deptId");
				Date date=new Date();
				String blockStatus [] = {"Temporary Block","Parmanent Block"};
				Iterator<PatientPrescriptionDetails> iterator=patientPrescriptionDetails.iterator();
				while (iterator.hasNext()) {
					PatientPrescriptionDetails patientPrescriptionDetail = (PatientPrescriptionDetails) iterator.next();
					long diffDays = (date.getTime()-patientPrescriptionDetail.getPrescription().getPrescriptionDate().getTime()) / (24 * 60 * 60 * 1000);
					if(patientPrescriptionDetail.getNoOfDays()!=null && diffDays<=patientPrescriptionDetail.getNoOfDays())//added by govind 31-10-2017 for tapered medicine
					{
						if(maxFrequncy<patientPrescriptionDetail.getFrequency().getFrequencyCount())
						maxFrequncy=patientPrescriptionDetail.getFrequency().getFrequencyCount();
					sotckBatchList.addAll(session.createCriteria(StoreItemBatchStock.class)
							.createAlias("Item", "item")
							.add(Restrictions.eq("item.Id", patientPrescriptionDetail.getItem().getId()))
							.add(Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.ge("ClosingStock", new BigDecimal(0)))
							.add(Restrictions.ge("ExpiryDate", date))
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus"))).list());
					}
					else
					{
						sotckBatchList.addAll(session.createCriteria(StoreItemBatchStock.class)
								.createAlias("Item", "item")
								.add(Restrictions.eq("item.Id", patientPrescriptionDetail.getItem().getId()))
								.add(Restrictions.eq("Department.Id", deptId))
								.add(Restrictions.ge("ClosingStock", new BigDecimal(0)))
								.add(Restrictions.ge("ExpiryDate", date))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus"))).list());
						
						//iterator.remove();
					}
				}
				map.put("sotckBatchList", sotckBatchList);
				
				List<DgOrderhd> dgOrderhds=new ArrayList<DgOrderhd>();
				List<DgOrderdt> dgOrderdts=new ArrayList<DgOrderdt>();
				dgOrderhds=session.createCriteria(DgOrderhd.class)
						.createAlias("InvestigationRequestionNo", "pih")
						.add(Restrictions.eq("pih.OpdPatientDetail.Id", opdId)).list();
				if(dgOrderhds.size()>0){
					dgOrderdts=session.createCriteria(DgOrderdt.class).add(Restrictions.eq("Orderhd", dgOrderhds.get(0))).list();
					map.put("dgOrderdts",dgOrderdts);
				}
				
				List<MasDepartment> wardDepartment=session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
						.createAlias("Department","dep")
						.add(Restrictions.eq("dep.DepartmentType.Id",depWard)).add(Restrictions.or(Restrictions.eq("dep.PaywardCheck","n").ignoreCase(), Restrictions.isNull("dep.PaywardCheck")))
						.setProjection(Projections.projectionList().add(Projections.groupProperty("Department")))
						.list();
				
				map.put("wardDepartment",wardDepartment);
			}
		List<PatientObservation> poObservations=new ArrayList<PatientObservation>();
		Criteria crt=session.createCriteria(PatientObservation.class).add(Restrictions.eq("OpdPatientDetails.Id", opdId));
		poObservations=crt.list();
		
		routeOfAdministrationList = session
				.createCriteria(RouteOfAdministration.class)
				.add(Restrictions.eq("Status", "y".toLowerCase())
						.ignoreCase()).addOrder(Order.asc("OrderNo")).list();
		map.put("routeOfAdministrationList", routeOfAdministrationList);
		
		masInstructionMasterList = session
				.createCriteria(OpdInstructionTreatment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("masInstructionMasterList", masInstructionMasterList);
		
		frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("frequencyList", frequencyList);

		
		
		map.put("observationList",poObservations);
		
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> submitObservationWard(Map<String, Object> map,Box box) {
		try{
			Session session = (Session) getSession();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Integer opdId=null;
			int deptId=0;
			int hospitalId=0;
			int flag=1;
			Integer pulse=0;
			Integer diastolic=0;
			Integer systolic=0;
			Float temperature=0.0f;
			Integer SbFlag=0;
			PatientObservation pob=new PatientObservation();
			OpdPatientDetails opdPatientDetails=null;
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String issueDate = (String) utilMap.get("currentDate");
			List<Integer> stockIdList=null;
			stockIdList=(List<Integer>) map.get("stockIdList");
			if(map.get("opdId")!=null){
				opdId=(Integer)map.get("opdId");
				opdPatientDetails=(OpdPatientDetails)hbt.load(OpdPatientDetails.class,opdId);
				map.put("opdpatient", opdPatientDetails);
			}
			 deptId= (Integer)map.get("deptId");
			 hospitalId =(Integer)map.get("hospitalId"); 
			int visitId=opdPatientDetails.getVisit().getId();
			int cnt = box.getInt("nurseprescription");
			
		
				for(int i=1;i<=cnt;i++){
					//List<PatientPrescriptionDetails>pDetails=session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("Id",box.getInt("pdId"+i))).list();
				if(box.getInt("stockId"+i) != 0){
							PatientPrescriptionDetails paDetails=(PatientPrescriptionDetails)hbt.load(PatientPrescriptionDetails.class, box.getInt("pdId"+i));
						if(!paDetails.getNursingStatus().equals("y")){
							paDetails.setNursingStatus("y");
							paDetails.setNursingDate(new Date());
							paDetails.setNursingTime((String)HMSUtil.getCurrentTimeHHMM().get("currentTime"));
							hbt.update(paDetails);
							flag=2;
							
							StoreIssueM issueM = new StoreIssueM();
							//final Map<String,Object> dataForMedicenDispencing=new HashMap<String,Object>();
							List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
							storeIssueTList=session.createCriteria(StoreIssueT.class).createAlias("IssueM", "issueM").
									createAlias("issueM.Hospital", "hosp")
									.createAlias("Visit", "visit")
									.add(Restrictions.eq("visit.Id", visitId))
									.add(Restrictions.eq("hosp.Id", hospitalId)).list();
							
							int issueId = 0;
							if (storeIssueTList.size() > 0) {
								for (StoreIssueT storeIssueT : storeIssueTList) {
									if (storeIssueT.getIssueM() != null) {
										issueId = storeIssueT.getIssueM().getId();
										issueM =  (StoreIssueM)session.get(StoreIssueM.class, issueId);// added by amit das on 26-08-2016
										//dataForMedicenDispencing.put("issueM", issueM); // added by amit das on 26-08-2016
										
									}
								}
							}else {
								List<String> issueNoList = new ArrayList<String>();
								
								String query1 = "select issue_no from store_issue_m order by id desc limit 1 ";
								issueNoList = session.createSQLQuery(query1).list();
								String no = "";
								//
								if (issueNoList.size() > 0) {
									for (int j = 0; j < issueNoList.size(); j++) {
										no = ((String) issueNoList.get(j));
									}
								}
								
								Map<String, Object> maxMap = new HashMap<String, Object>();
								maxMap.put("no", no);
								maxMap.put("deptType", map.get("deptType"));
								
								String patientIssueNo = "";
								patientIssueNo = getMaxNoByDeptCode(maxMap);
								issueM.setIssueType("i");
								issueM.setIssueNo(patientIssueNo);
								
								issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(issueDate));
								String deptType = "";
								deptType = (String) map.get("deptType");

								MasDepartment department = new MasDepartment();
								department.setId((Integer)map.get("deptId"));
								issueM.setDepartment(department);
								issueM.setIssueNo(patientIssueNo);
								issueM.setStatus("o");
								MasHospital hospital = new MasHospital();
								hospital.setId((Integer)map.get("hospitalId"));
								issueM.setHospital(hospital);

								Users users = new Users();
								users.setId((Integer)map.get("userId"));
								issueM.setLastChgBy(users);
								issueM.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType((String) utilMap.get("currentDate")));
								issueM.setLastChgTime((String) utilMap.get("currentTime"));
								Patient patient = new Patient();
								patient.setId((Integer)map.get("hinId"));
								issueM.setHin(patient);
								hbt.save(issueM);
							}
							List<PatientPrescriptionHeader> patientPrescriptionHeader=null;
							patientPrescriptionHeader= session.createCriteria(PatientPrescriptionHeader.class).createAlias("Hospital", "hosp")
									.add(Restrictions.eq("hosp.Id", hospitalId))
											.add(Restrictions.eq("Visit.Id", visitId)).list();
							
							//PharmacyLabQueue pharmacyLabQueue=null;
							if(patientPrescriptionHeader.size()>0){
								int pharmacyLabQueueId = 0;
								pharmacyLabQueueId=patientPrescriptionHeader.get(0).getPharmacyLabQueue().getId();
								if(pharmacyLabQueueId != 0){
									PharmacyLabQueue pharmacyLabQueue = hbt.load(PharmacyLabQueue.class, pharmacyLabQueueId);
									pharmacyLabQueue.setStatus("C");
									hbt.update(pharmacyLabQueue);
							 }
							}
							
							//List<Integer> stocks = new ArrayList<Integer>();
							//List<BigDecimal> quantity = new ArrayList<BigDecimal>();
							
							//List<StoreIssueT> storeIssueTForServerList=new ArrayList<StoreIssueT>();
							List<PatientPrescriptionDetails> patientPrescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();  // commented by amit das on 07-12-2016
							List<StoreItemBatchStock> storeItemBatchStockList=new ArrayList<StoreItemBatchStock>();
							BigDecimal issueQtyForPatientPrecscription = new BigDecimal(0);
							
							//List<Integer> itemIdList=new ArrayList<Integer>();
							//List<String> mixableList=new ArrayList<String>();
							//itemIdList=(List<Integer>) map.get("itemIdList");
							/*if(map.get("mixableList") != null){
								mixableList=(List<String>) map.get("mixableList");
							}*/
							int presId=0;
								//if (null !=box.getString("stockId"+i) ) {
									StoreItemBatchStock itemBatchStock =null;
									List<StoreItemBatchStock>itemBatchList = new ArrayList<StoreItemBatchStock>();
									Criteria crt=null;
									//if(0 !=box.getInt("stockId"+i)){
										itemBatchList=session.createCriteria(StoreItemBatchStock.class).add(Restrictions.idEq(box.getInt("stockId"+i))).list();
											itemBatchStock = itemBatchList.get(0);
									
									/* crt= session.createCriteria(StoreItemBatchStock.class)
											.createAlias("Hospital", "hospital")
											.createAlias("Item", "item")
											.createAlias("Department","dep")
											.add(Restrictions.eq("dep.Id", deptId))
											.add(Restrictions.eq("Id", box.getInt("stockId"+i)))
											.add(Restrictions.eq("hospital.Id",hospitalId))
											.add(Restrictions.eq("item.Id", box.getInt("itemId"+i)));
									if(null !=crt && null !=crt.list() && crt.list().size()>0)
										//System.out.println("itemBatchStock Size "+crt.list().size());
											 itemBatchStock =(StoreItemBatchStock) crt.list().get(0);*/
									
									//}
									//System.out.println("itemBatchStock========================"+itemBatchStock);
									
									//govind 06-01-2017
									BigDecimal medAvail=null;
									
									/*if(((String)box.getString("mixable"+i)).equalsIgnoreCase("Y")){
										BigDecimal closQt=null,mixtureQt=null,adisQt=null,temp=null,issueQt=null;
										closQt=itemBatchStock.getClosingStock();
										issueQt=new BigDecimal(box.get("qtyIssued"+i).toString());
										mixtureQt=new BigDecimal(box.get("mixtureQuantity"+i).toString());
										adisQt=new BigDecimal(box.get("aDispQty"+i).toString());
										temp=closQt.multiply(adisQt).add(mixtureQt);
										temp=temp.subtract(issueQt);
										
										medAvail=issueQt.divide(new BigDecimal(1000));
										//System.out.println("medAvail====in if==="+medAvail);
									}else{
										medAvail=new BigDecimal(box.getString("presQtyId")+i);
										//System.out.println("medAvail====in else==="+medAvail);
									}*/
									//govind 06-01-2017 end
									
									// condition added by amit das on 20-09-2016
									/*if(itemBatchStock!=null && itemBatchStock.getClosingStock()!=null && itemBatchStock
											.getClosingStock().subtract(
													new BigDecimal(box.get("qtyIssued"+i)
															.toString())).intValue()>=0) {*/
									//if(itemBatchStock!=null && itemBatchStock.getClosingStock()!=null) {
										
										
									
									StoreIssueT storeIssueT = new StoreIssueT();

									storeIssueT.setBatchNo(box.getString("stockId"+i).toString());

									if (visitId!= 0) { // changed by amit das on 08-12-2016
										Visit visit = new Visit();
										visit.setId(visitId); 
										storeIssueT.setVisit(visit);
									}
									MasStoreItem storeItem = new MasStoreItem();
									storeItem.setId((box.getInt("itemId"+i)));
									storeIssueT.setItem(storeItem);
									
									storeIssueT.setStock(itemBatchStock);
									MasStoreItem storeItem1 = new MasStoreItem();
									storeItem1.setId(box.getInt("itemId"+i));
									// storeIssueT.setItemIssued(storeItem1);
									//BigDecimal qtyReq = new BigDecimal((Integer)qtyRequested.get(i));
									if(box.get("presQtyId"+i) !=null && !box.get("presQtyId"+i).equals("")){
										storeIssueT.setQtyRequest(new BigDecimal(box.get("presQtyId"+i)));
									}
									
									if(((String)box.get("mixable"+i)).equalsIgnoreCase("Y")){
										/*temp = new BigDecimal(box.get("qtyIssued"+i).toString()).multiply(new BigDecimal(box.get("actualQtyNeeded"+i).toString()));
										temp = temp.divide(new BigDecimal(box.get("qtyRequest"+i).toString()));*/ //govind 04-01-2017
										//temp=new BigDecimal(box.get("presQtyId"+i).toString());
										storeIssueT.setQtyIssued(new BigDecimal(box.get("presQtyId"+i).toString()));	
									}else {
										storeIssueT.setQtyIssued(new BigDecimal(box.get("presQtyId"+i)
											.toString()));
									}
									storeIssueT.setExpiryDate(itemBatchStock.getExpiryDate());
									
									storeIssueT.setCostPrice(itemBatchStock.getCostPrice());
									
									//storeIssueT.setSrNo(Integer.parseInt((String)box.get("srNo"+i)));
									storeIssueT.setIssued("y");
									if (issueId == 0) {
										storeIssueT.setIssueM(issueM);
									} else {
										StoreIssueM stIssueM = new StoreIssueM();
										stIssueM.setId(issueId);
										storeIssueT.setIssueM(stIssueM);

									}
									storeIssueT.setItemReplacedToPharmacy("n");
									PatientPrescriptionDetails prescription=new PatientPrescriptionDetails();
									prescription.setId(box.getInt("pdId"+i));
									storeIssueT.setPrescription(prescription);
									hbt.save(storeIssueT);
									//storeIssueTForServerList.add(storeIssueT);
									
									
									//stocks.add(itemBatchStock.getId());
									//quantity.add(new BigDecimal(box.get("presQtyId"+i).toString()));
									BigDecimal temp =	null;		
									StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class,itemBatchStock.getId());
									if (batchStockObj.getClosingStock() != null) {
										if(((String)box.get("mixable"+i)).equalsIgnoreCase("Y")){							
											BigDecimal closQt=null,mixtureQt=null,adisQt=null,issueQt=null,openQt=null;
											closQt=itemBatchStock.getClosingStock();
											openQt=itemBatchStock.getOpeningBalanceQty();
											issueQt=new BigDecimal(box.get("presQtyId"+i).toString());
											mixtureQt=new BigDecimal(box.get("mixtureQuantity"+i).toString());
											adisQt=new BigDecimal(box.get("aDispQty"+i).toString());
											
											//closing-(1/UOM Qty+MixtureQuantity)*issue_qty
										    Double adQt=Double.parseDouble(box.get("aDispQty"+i).toString());
										    Double mixQt=Double.parseDouble(box.get("mixtureQuantity"+i).toString());
										    Double c=(1/(adQt+mixQt));//(1/(UOM Qty+MixtureQuantity))
										    temp=new BigDecimal(c.toString());
										    temp=temp.multiply(issueQt);//(1/UOM Qty+MixtureQuantity)*issue_qty
										    temp=closQt.subtract(temp);
										/*	temp=closQt.multiply(adisQt).add(mixtureQt);
											System.out.println("add calculation "+temp);							
											temp=temp.subtract(issueQt);
											System.out.println("substract calculation "+temp);
											temp=temp.divide(adisQt);
											System.out.println("final clsoQt "+temp);	*/						
											batchStockObj.setClosingStock(temp);							
											  //govind 06-01-2017 end
										}else {
										batchStockObj.setClosingStock(batchStockObj.getClosingStock().subtract(new BigDecimal(box.get("presQtyId"+i).toString())));
										}
									}
									
									if (batchStockObj.getIssueQty() != null) {
										batchStockObj.setIssueQty(batchStockObj.getIssueQty().add(new BigDecimal(box.get("presQtyId"+i).toString())));
									} else {
										batchStockObj.setIssueQty(new BigDecimal(box.get("presQtyId"+i).toString()));
									}
									issueQtyForPatientPrecscription = issueQtyForPatientPrecscription.add(new BigDecimal(box.get("presQtyId"+i).toString()));
									hbt.update(batchStockObj);
									//storeItemBatchStockList.add(batchStockObj);
									// --------------Update StoreFyDocumentNo
									// Table-------------------------
									int presDetailId = 0;
									int preHeaderId = 0;
									PatientPrescriptionDetails patPrescriptionDetails = (PatientPrescriptionDetails) hbt.load(PatientPrescriptionDetails.class,box.getInt("pdId"+i));
									preHeaderId = patPrescriptionDetails.getPrescription().getId();

									float totatStoreIssue = 0.00f;
									if (patPrescriptionDetails.getTotalStoreIssuedQty() != null) {
										totatStoreIssue = patPrescriptionDetails.getTotalStoreIssuedQty();
									}
									patPrescriptionDetails.setTotalStoreIssuedQty(new Float(box.get("presQtyId"+i).toString()));
									patPrescriptionDetails.setCurStoreIssuedQty(new Float(box.get("presQtyId"+i)
											.toString()));
									if (issueQtyForPatientPrecscription.floatValue() == patPrescriptionDetails.getTotal()) {	
										patPrescriptionDetails.setIssuedStatus("y");
									}
									if (issueQtyForPatientPrecscription.floatValue() < patPrescriptionDetails.getTotal()) {
										patPrescriptionDetails.setIssuedStatus("n");
									}

									hbt.update(patPrescriptionDetails);
									patientPrescriptionDetailsList.add(patPrescriptionDetails); // added  by amit das on 07-12-2016
									List<PatientPrescriptionDetails> presDetailList1 = new ArrayList<PatientPrescriptionDetails>();
									presDetailList1 = session
											.createCriteria(PatientPrescriptionDetails.class)
											.createAlias("Prescription", "sch")
											.add(Restrictions.eq("sch.Id", preHeaderId)).list();
									boolean isTrue = true;

									for (PatientPrescriptionDetails preDetailsObj1 : presDetailList1) {
										// presDetailId = preDetailsObj1.getPrescription();
										if ((!"y".equalsIgnoreCase(preDetailsObj1
												.getIssuedStatus()))) {
											isTrue = false;
											break;
										}
									}

									PatientPrescriptionHeader patPrescriptionHeader = (PatientPrescriptionHeader) hbt
											.load(PatientPrescriptionHeader.class, preHeaderId);
									
									if (isTrue) {
										 patPrescriptionHeader.setIssuedStatus("y"); // commented by amit das on 06-12-2016
									} else {
										 patPrescriptionHeader.setIssuedStatus("n"); // commented by amit das on 06-12-2016
										
									} 

									hbt.update(patPrescriptionHeader); // added by amit das on 06-12-2016
									
									
									//}
									
								//}
								
							//}
							
							
							
							/*BigDecimal temp = null;
							float actualQtyNeeded = 0.0f;
							String mixable = null;
							StoreItemBatchStock stock=null;
							actualQtyNeeded = new Float(box.getString("presQtyId")+i);
							System.out.println("actualQtyNeeded==="+actualQtyNeeded);
							mixable = (String)box.getString("mixable"+i);
							//temp = (new BigDecimal(paDetails.getDosage().toString())).multiply(actualQtyNeeded);
							//temp = temp.divide(new BigDecimal(paDetails.getTotal().toString()));
							System.out.println("stockId===="+box.getInt("stockId"+i));
							if(box.getInt("stockId"+i)!=0){
								stock=(StoreItemBatchStock) hbt.get(StoreItemBatchStock.class, box.getInt("stockId"+i));
								if(stock.getIssueQty()!=null){
									if(mixable.equalsIgnoreCase("Y")){
										stock.setIssueQty(stock.getIssueQty().add(new BigDecimal(actualQtyNeeded)));
									}else {
										stock.setIssueQty(stock.getIssueQty().add(new BigDecimal(actualQtyNeeded)));
								    }
								}else{ 	
									if(mixable.equalsIgnoreCase("Y")){
										stock.setIssueQty(temp);
									} else {
										stock.setIssueQty(new BigDecimal(actualQtyNeeded));
									}
								}
								System.out.println("1============"+stock.getClosingStock());
								System.out.println("2========"+new BigDecimal(box.get("presQtyId"+i).toString()));
								if(mixable.equalsIgnoreCase("Y")){
									stock.setClosingStock(stock.getClosingStock().subtract(new BigDecimal(box.get("presQtyId"+i).toString())));
								} else {
									stock.setClosingStock(stock.getClosingStock().subtract(new BigDecimal(box.get("presQtyId"+i).toString())));
								}
								
								//stock.setId(stockIdList.get(i));
								hbt.update(stock);
								
							}*/
							/*else if(box.getString("stockId"+i)!=null){
								consumptionDetails.setOutsidePrescription("y");
							}*/
							
					}
				}
			}
			//}		
				Integer[] ids =(Integer[])map.get("procedureStatusId");
			if(ids.length>0){
				for(int i=0;i<ids.length;i++){
					List<ProcedureDetails>pDetails=session.createCriteria(ProcedureDetails.class).add(Restrictions.eq("Id",ids[i])).list();
				if(pDetails.size()>0){
							ProcedureDetails paDetails=(ProcedureDetails)pDetails.get(0);
							paDetails.setStatus("y");
							paDetails.setProcedureDate(new Date());
							paDetails.setProcedureTime((String)HMSUtil.getCurrentTimeHHMM().get("currentTime"));
							hbt.update(paDetails);
							flag=2;
					}
				}	
			}	
		
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss a");
		
		if(map.get("deptId")!=null){
			deptId=(Integer)map.get("deptId");
		}
		if(map.get("hospitalId")!=null){
			hospitalId=(Integer)map.get("hospitalId");
		}
		
		if (map.get("pulseHidden") != null) {
			pulse=(Integer)map.get("pulseHidden");
			pob.setPulse(pulse);
			flag=3;
		}
		if (map.get("temperatureHidden") != null && (Float)map.get("temperatureHidden")!=0.0f) {
			temperature=(Float)map.get("temperatureHidden");
			pob.setTemperature(temperature);
			flag=3;
		}
		if (map.get("diastolicHidden") != null) {
			diastolic=(Integer)map.get("diastolicHidden");
		}
		if (map.get("systolicHidden") != null) {
			systolic=(Integer)map.get("systolicHidden");
		}
	
		if((diastolic!=null && diastolic!=0) && (systolic!=null && systolic!=0) )
		{
				String bp=diastolic+"/"+systolic;
				pob.setBp(bp);
				flag=3;
		}
		
		if(flag==3 ){
			pob.setOpdPatientDetails(opdPatientDetails);
			pob.setLastChgDate(new Date());
			pob.setLastChgTime((String)HMSUtil.getCurrentTimeHHMM().get("currentTime"));
			hbt.save(pob);
		}
		map.put("flag", flag);
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> submitPrescriptionTamplate(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = HMSUtil.getCurrentDateAndTime();
		Session session = (Session) getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		int hospitalId=box.getInt(HOSPITAL_ID);
		List<OpdTemplate> opdTemplateList = session
				.createCriteria(OpdTemplate.class)
				.createAlias("Department", "department")
				.add(Restrictions.eq("department.Id", box.getInt(DEPT_ID)))
				.add(Restrictions.eq("TemplateType", "p").ignoreCase())
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("TemplateName", box.getString("tamplatename"))).list();
		

		if(box.getString("tamplatename").trim().length()>0)
		{
		if (opdTemplateList.size() == 0) {

			try {
				OpdTemplate opdTemplate = new OpdTemplate();
				if (box.getString("tamplatename").length() > 8) {
					opdTemplate.setTemplateCode(box.getString("tamplatename")
							.substring(0, 8));
				} else {
					opdTemplate.setTemplateCode(box.getString("tamplatename"));
				}
				
				opdTemplate.setTemplateName(box.getString("tamplatename"));
				opdTemplate.setTemplateType("P");
				opdTemplate.setStatus("y");
				opdTemplate.setTemplateLocal(box.getInt(USER_ID));
				opdTemplate.setHospital(new MasHospital(hospitalId));
				MasDepartment department = new MasDepartment();
				department.setId(box.getInt(DEPT_ID));
				opdTemplate.setDepartment(department);
				Users users = new Users();
				users.setId(box.getInt(USER_ID));
				opdTemplate.setLastChgBy(users);
				opdTemplate.setLastChgDate(HMSUtil.convertStringTypeDateToDateType((String) utilMap.get("currentDate")));
				opdTemplate.setLastChgTime((String) utilMap.get("currentTime"));
				int totalItem = box.getInt("hdb");
				
				for (int i = 1; i <= totalItem; i++) {
					String pvmsNo = box.getString("pvms" + i);
					List<MasStoreItem> itemIdListNew = new ArrayList<MasStoreItem>();
					itemIdListNew = getItemIdFromPVMS(pvmsNo);
					int itemId = 0;
					for (int k = 0; k < itemIdListNew.size(); k++) {
						itemId = itemIdListNew.get(k).getId();
					}
					if (itemId != 0) {

						OpdTemplateTreatment opdTemplateTreatment = new OpdTemplateTreatment();
						opdTemplateTreatment.setTemplate(opdTemplate);
						opdTemplateTreatment.setDepartment(department);
						MasStoreItem item = new MasStoreItem();
						item.setId(itemId);
						opdTemplateTreatment.setItem(item);

						if (!box.getString("dosage" + i).equals("")) {	
							opdTemplateTreatment.setDosage(box
									.getString("dosage" + i));
						}

						if (box.getInt("noOfDays" + i) != 0) {
							opdTemplateTreatment.setNoofdays(box.getInt("noOfDays" + i));
						}
						if (box.getInt("total" + i) != 0) {
							opdTemplateTreatment.setTotal(box.getInt("total"+ i));
						}

						if (box.getInt("frequency" + i) != 0) {
							MasFrequency frequency = new MasFrequency();
							frequency.setId(box.getInt("frequency" + i));
							opdTemplateTreatment.setFrequency(frequency);
						}

						if (box.getInt("instrunction" + i) != 0) {
							OpdInstructionTreatment opdInstructionTreatment = new OpdInstructionTreatment();
							opdInstructionTreatment.setId(box
									.getInt("instrunction" + i));
							opdTemplateTreatment
									.setOpdInstructionTreatment(opdInstructionTreatment);
							
						}else{
							opdTemplateTreatment
							.setOpdInstructionTreatment(null);
						}
						if(box.getString("splInstructions" + i) !=null && box.getString("splInstructions" + i) !=""){ //Added By Srikanth 11/09/2017
							opdTemplateTreatment.setSplInstruction(box.getString("splInstructions" + i));
						}

						if (box.getInt("route" + i) != 0) {
							RouteOfAdministration routeOfAdministration = new RouteOfAdministration();
							routeOfAdministration
									.setId(box.getInt("route" + i));
							opdTemplateTreatment
									.setRoute(routeOfAdministration);
						}
						opdTemplateTreatment.setLastChgBy(users);
						opdTemplateTreatment
								.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType((String) utilMap
												.get("currentDate")));
						opdTemplateTreatment.setLastChgTime((String) utilMap
								.get("currentTime"));
						opdTemplateTreatment.setStatus("y");
						hbt.save(opdTemplate);
						hbt.save(opdTemplateTreatment);
					}

				}
				//line removed  by om tripathi 13/09/2017 
				map.put("message", "Template Saved successfully.");

			} catch (Exception exception) {
				map.put("message", "Error occured Please try after sometime.");
			}
		} else {
			map.put("message", "Template Name is already Exists.");
		}
		}
		else
		{
			map.put("message", "Please Enter template name");			
		}

		return map;
	}
	
	@Override
	public Map<String, Object> submitInvestigationTamplate(Box box){
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = HMSUtil.getCurrentDateAndTime();
		Session session = (Session) getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		
		List<OpdTemplate> opdTemplateList = session
				.createCriteria(OpdTemplate.class)
				.createAlias("Department", "department")
				.add(Restrictions.eq("department.Id", box.getInt(DEPT_ID)))
				.add(Restrictions.eq("Hospital.Id", box.getInt(HOSPITAL_ID)))
				.add(Restrictions.eq("TemplateType", "i").ignoreCase())
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("TemplateName",
						box.getString("tamplatename"))).list();
		

		if(box.getString("tamplatename").trim().length()>0)
		{
		if (opdTemplateList.size() == 0) {

			try {
				OpdTemplate opdTemplate = new OpdTemplate();
				if (box.getString("tamplatename").length() > 8) {
					opdTemplate.setTemplateCode(box.getString("tamplatename")
							.substring(0, 8));
				} else {
					opdTemplate.setTemplateCode(box.getString("tamplatename"));
				}
				opdTemplate.setTemplateName(box.getString("tamplatename"));
				opdTemplate.setTemplateType("i");
				opdTemplate.setStatus("y");
				MasDepartment department = new MasDepartment();
				department.setId(box.getInt(DEPT_ID));
				opdTemplate.setDepartment(department);
				opdTemplate.setTemplateLocal(box.getInt(USER_ID));
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt(HOSPITAL_ID));
				opdTemplate.setHospital(masHospital);
				
				Users users = new Users();
				users.setId(box.getInt(USER_ID));
				opdTemplate.setLastChgBy(users);
				opdTemplate.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType((String) utilMap
								.get("currentDate")));
				opdTemplate.setLastChgTime((String) utilMap.get("currentTime"));
				int totalItem = box.getInt("total");
				
				for (int i = 1; i <= totalItem; i++) {
					String chargeCode = box.getString("chargeCodeName"+ i);
					
					int index1 = chargeCode.lastIndexOf("[");
					int index2 = chargeCode.lastIndexOf("]");
					
					String chargeCodeName = "";
					if(index1>0){
						 chargeCodeName = chargeCode.trim().substring(0, index1);
						
					}
					int chargeId = 0;
					if(box.getString("fromIp")!=null && !box.getString("fromIp").equals(""))
					{
						chargeId=box.getInt("chargeCode" + i);	
					}
					else
					{
					chargeId = (Integer)session.createCriteria(MasChargeCode.class)
							.add(Restrictions.eq("ChargeCodeName", chargeCodeName))
							.setProjection(Projections.projectionList().add(Projections.property("Id")))
							.uniqueResult();
					}
					
					if (chargeId != 0) {

						OpdTemplateInvestigation opdTemplateInvestigation=new OpdTemplateInvestigation();
						
						
						opdTemplateInvestigation.setTemplate(opdTemplate);
						opdTemplateInvestigation.setDepartment(department);
						MasChargeCode masChargeCode=new MasChargeCode();
						masChargeCode.setId(chargeId);
						opdTemplateInvestigation.setChargeCode(masChargeCode);
						opdTemplateInvestigation.setClinicalNotes(box.getString("clinicalNotes"+i));
						//opdTemplateInvestigation.setLastChgBy(String.valueOf(users.getId()));
						Users user = new Users();
						user.setId(box.getInt(USER_ID));
						opdTemplate.setLastChgBy(user);
						opdTemplateInvestigation.setLastChgDate(HMSUtil.convertStringTypeDateToDateType((String) utilMap.get("currentDate")));
						opdTemplateInvestigation.setLastChgTime((String) utilMap.get("currentTime"));
						opdTemplateInvestigation.setStatus("y");
						hbt.save(opdTemplate);
						hbt.save(opdTemplateInvestigation);
					}

				}
				map.put("message", "Template Saved successfully.");

			} catch (Exception exception) {
				exception.printStackTrace();
				map.put("message", "Error occured Please try after sometime.");
			}
		} else {
			map.put("message", "Template Name is already Exists.");
		}
		}
		else
		{
			map.put("message", "Please Enter template name");			
		}

		return map;
	}
	
	@Override
	public Map<String, Object> getProcedureOrder(Map<String, Object> map) {
		try{
			Session session = (Session) getSession();
			List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			map.put("frequencyList", frequencyList);
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> getNursingCareProcedureAutoList(Map<String, Object> map) {
		try{
			Session session =(Session) getSession();
			String autoHint =(String)map.get("autoHint");
			Integer minor_major =(Integer)map.get("minor_major");
			Integer departmentId =(Integer)map.get("departmentId");
			if(minor_major==1){
				List<MasNursingCare> masNursingCares = new ArrayList<MasNursingCare>();
				List<MasNursingCare> masNursingCare = new ArrayList<MasNursingCare>();
				masNursingCares = session.createCriteria(MasNursingCare.class)
						.createAlias("ChargeCode", "cc")
						.createAlias("cc.Department", "dept")
						.add(Restrictions.eq("dept.Id", departmentId))
						.add(Restrictions.like("NursingName", "%"+autoHint+"%").ignoreCase()).list();
				masNursingCare = session.createCriteria(MasNursingCare.class)
						.createAlias("ChargeCode", "cc")
						.add(Restrictions.like("NursingName", "%"+autoHint+"%").ignoreCase())
						.add(Restrictions.eq("cc.CommonChargeCodeStatus", "Y").ignoreCase())
						.list();
				masNursingCares.addAll(masNursingCare);
				map.put("minorcarelist", masNursingCares);
			
			}else if(minor_major==2){
				List<MasChargeCode> masChargeCodes = new ArrayList<MasChargeCode>();
				List chargeTypeList=new ArrayList();
				chargeTypeList.add(10);chargeTypeList.add(11);
				masChargeCodes = session.createCriteria(MasChargeCode.class).add(Restrictions.in("ChargeType.Id",chargeTypeList))
						.add(Restrictions.like("ChargeCodeName", "%"+autoHint+"%").ignoreCase())
						//.add(Restrictions.isNotNull("SnomedConceptId"))
						.list();
				map.put("chargeCodeList", masChargeCodes);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}	
	
	@Override
	public Map<String, Object> getPrescriptionTemplate(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> presMap = new HashMap<String, Object>();
		try{
		Session session =(Session) getSession();
		//Integer tempId=Integer.parseInt(box.get("templateId"));
		Integer hospitalId=Integer.parseInt(box.get("hospitalId"));
		List<OpdTemplateTreatment>templateTreatments=new ArrayList<OpdTemplateTreatment>();
		List<RouteOfAdministration>route=new ArrayList<RouteOfAdministration>();
		List<OpdInstructionTreatment>instrunction=new ArrayList<OpdInstructionTreatment>();
		List<MasFrequency>frequencyList=new ArrayList<MasFrequency>();
		Map<Integer,BigDecimal>stockQty=new HashMap<Integer,BigDecimal>();
		List<String> stockStatusList=new ArrayList<String>();
		
		frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		instrunction = session.createCriteria(OpdInstructionTreatment.class).add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
		route=session.createCriteria(RouteOfAdministration.class).add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
		
		String ids=box.getString("templateId");
		String[] templateIdList=ids.split(",");
		for(String s:templateIdList)
		{
			int tempId=0;
			try
			{
				tempId=Integer.parseInt(s);
			}
			catch(Exception exception)
			{
				
			}
		
		if(tempId!=0){
				templateTreatments.addAll(session
						.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp").add(Restrictions.eq("temp.Id", tempId)).addOrder(Order.asc("Id")).list());
				List<MasStoreItem>itemStock=session.createCriteria(OpdTemplateTreatment.class).setProjection(Projections.property("Item")).
						createAlias("Template", "temp").add(Restrictions.eq("temp.Id", tempId)).list();

				for(MasStoreItem item:itemStock){
					String departmentCodeforpharmacy =HMSUtil.getValuesFromPropertiesFile("pharmacy.properties", "departmentCodeforpharmacy".trim());
					int pharmacyDepId =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "pharmacyDepId".trim()));
							StoreItemBatchStock itemBatchStock=(StoreItemBatchStock) session.createCriteria(StoreItemBatchStock.class)
									.createAlias("Item", "item")
									.createAlias("Hospital", "h")
									.createAlias("Department", "dept")
									.add(Restrictions.eq("item.Id", item.getId()))
									.add(Restrictions.or(Restrictions.eq("dept.DepartmentCode",departmentCodeforpharmacy), Restrictions.eq("dept.Id",pharmacyDepId)))
									.add(Restrictions.eq("h.Id", hospitalId))
									.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
									.add(Restrictions.ge("ExpiryDate",HMSUtil.convertStringTypeDateToDateType((String)HMSUtil.getCurrentDateAndTime().get("currentDate"))))
											.setMaxResults(1)
											.uniqueResult();
				if(itemBatchStock!=null)			
				stockQty.put(item.getId(), itemBatchStock.getClosingStock());
				}
			}
		}
		for(OpdTemplateTreatment templateItem:templateTreatments){
			Map<String,Object> itemMap=new HashMap<String,Object>();	
			itemMap.put("hospitalId", hospitalId);
			itemMap.put("visitId", box.getInt("visitId"));
			itemMap.put("pvmsNo", templateItem.getItem().getPvmsNo());
			itemMap=checkItem(itemMap);
			if(itemMap.get("itemBatchStock")!=null){
				stockStatusList.add("black");
			}else{
				stockStatusList.add("red");
			}
		}
		map.put("stockStatusList", stockStatusList);
		map.put("stockQty", stockQty);
		map.put("template", templateTreatments);
		map.put("route", route);
		map.put("instrunction", instrunction);
		map.put("frequencyList", frequencyList);
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> submitProcedureOrder(Map<String, Object> map) {
		try{
			Transaction tx = getSession().beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> getLabInvestigationTemplate(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		try{
		Session session =(Session) getSession();
		List<OpdTemplateInvestigation>tempInvestigation=new ArrayList<OpdTemplateInvestigation>();
		List<DgSubMasInvestigation> subInvestigationList = new ArrayList<DgSubMasInvestigation>();
		String ids=box.getString("templateid");
		String[] templateIdList=ids.split(",");
		int hospitalId=box.getInt("hospitalId");
		for(String s:templateIdList)
		{
			int templateId=0;
			try
			{
				templateId=Integer.parseInt(s);
			}
			catch(Exception exception)
			{
				
			}
			if(templateId!=0)
			{
				tempInvestigation.addAll(session.createCriteria(OpdTemplateInvestigation.class).createAlias("Template", "temp")
						.add(Restrictions.eq("temp.Id", templateId))
						.list());
			}
		}
		List<Integer>chargeCodeids=new ArrayList<Integer>();
		for(OpdTemplateInvestigation code:tempInvestigation){
			chargeCodeids.add(code.getChargeCode().getId());
		}
		Map<Integer,String>availableStatus=new HashMap<Integer, String>();
		if(chargeCodeids.size()>0){
			List<MasHospitalwiseChargecode>msCode=session.createCriteria(MasHospitalwiseChargecode.class).add(Restrictions.in("ChargeCode.Id", chargeCodeids))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.or(Restrictions.eq("Blocked", "n"), Restrictions.isNull("Blocked")))
					.list();
			for(MasHospitalwiseChargecode code:msCode){
				availableStatus.put(code.getChargeCode().getId(), "av");
			}
		}
		subInvestigationList = session.createCriteria(DgSubMasInvestigation.class).createAlias("Investigation", "inv")
				//.add(Restrictions.eq("inv.InvestigationName", chargeCodeName))
				.add(Restrictions.eq("inv.InvestigationType", "m")).list();
		
		
		map.put("availableStatus", availableStatus);
		map.put("template", tempInvestigation);
		map.put("subInvestigationList", subInvestigationList);
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	public Map<String, Object> showDiseaseFeatures(Box box) {
		Map<String,Object> map = new HashMap<String, Object>();
		List<OpdDifferentialDisease> differentialDiseaseList = new ArrayList<OpdDifferentialDisease>();
		Session session = (Session)getSession();
		differentialDiseaseList = session.createCriteria(OpdDifferentialDisease.class)
						.add(Restrictions.idEq(box.getInt("diffentialDisease"))).list();
		map.put("differentialDiseaseList", differentialDiseaseList);
		return map;
	}
	
	public void getChangeVisitStatus(Integer visitId) {
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session=(Session)getSession();
		Visit visit=(Visit)hbt.load(Visit.class, visitId);
		visit.setVisitStatus("B");
		hbt.saveOrUpdate(visit);
	}
	
	@Override
	public Map<String, Object> showDepartmentSpeciality(Map<String, Object> map) {
		Session session = (Session)getSession();
		List<UserSpecialityTemplate> usersSpecialityTemplateList = new ArrayList<UserSpecialityTemplate>();
		int hospitalId=0;
		int deptId=0;
		int empDeptId = 0;
		int userId = 0;
		if(map.get("hospitalId")!=null){
			hospitalId=(Integer)map.get("hospitalId");
		}
		if(map.get("userId")!=null){
			userId=(Integer)map.get("userId");
		}
	
		if( map.get("deptId")!=null){
			deptId=(Integer) map.get("deptId");
		}
		if( map.get("empDeptId")!=null){
			empDeptId=(Integer) map.get("empDeptId");
		}
		List<Object[]> specialtyTemplateList=new ArrayList<Object[]>();
		List<Integer> templateList = new ArrayList<Integer>();
		
	
		templateList = session.createCriteria(UserSpecialityTemplate.class).add(Restrictions.eq("User.Id", userId))
												.add(Restrictions.eq("Hospital.Id", hospitalId)).setProjection(Projections.property("Template.Id"))
											.list();
		if(templateList.size()>0){
			/*for(UserSpecialityTemplate userSpecialityTemplate :usersSpecialityTemplateList){
				int templateId =userSpecialityTemplate.getTemplate().getId();
				templateList.add(templateId);
				System.out.println("templateId=="+templateId);
			}*/
			Object[] templateType = {"OP","Both"};
			specialtyTemplateList=session.createCriteria(MasSpecialtyTemplate.class)//.createAlias("Department", "dept").createAlias("Template", "temp")
					.add(Restrictions.in("Id", templateList)).add(Restrictions.in("TemplateType",templateType ))
				//.createAlias("dept.DepartmentType", "dt").createAlias("dept.EmpDept", "empDept").add(Restrictions.eq("empDept.Id", empDeptId))
				//.add(Restrictions.eq("dept.Id",deptId))
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.setProjection(Projections.projectionList().add(Projections.distinct(Projections.property("Id"))).add(Projections.property("TemplateName"))
							//.add(Projections.property("dt.DepartmentTypeName"))
							)
					.list();
		}
		map.put("specialtyTemplateList", specialtyTemplateList);
		return map;
	}
	
	@Override
	public Map<String, Object> submitSnomedTemplates(Map<String, Object> map) {
		Session session = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		Transaction tx=session.beginTransaction();
		OpdTemplate opdTemplate=(OpdTemplate)hbt.load(OpdTemplate.class, 6);
		if(map.get("presentComplain")!=null){
			String[]presentComplain=presentComplain=(String[]) map.get("presentComplain");
			for(String str:presentComplain){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setPresentComplaintHistory(snomedTerm);
				opdTreatment.setPresentComplaintSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
		}
		if(map.get("pastIllness")!=null){
			String[]pastIllness=(String[])map.get("pastIllness");
			for(String str:pastIllness){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setPastIllnessHistory(snomedTerm);
				opdTreatment.setPastIllnestSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
		}
		if(map.get("personalHistory")!=null){
			String[]personalHistory=(String[])map.get("personalHistory");
			for(String str:personalHistory){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setPersonalHistory(snomedTerm);
				opdTreatment.setPersonalHisSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
		}
		if(map.get("familyHistory")!=null){
			String[]familyHistory=(String[])map.get("familyHistory");
			for(String str:familyHistory){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setFamilyHistory(snomedTerm);
				opdTreatment.setFamilyHisSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
		}
		if(map.get("medicationhistory")!=null){
			String[]medicationhistory=(String[])map.get("medicationhistory");
			for(String str:medicationhistory){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setMedicationHistory(snomedTerm);
				opdTreatment.setMedicationHisSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
		}
		if(map.get("systemic")!=null){
			String[]systemic=(String[])map.get("systemic");
			for(String str:systemic){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setSystemicExamination(snomedTerm);
				opdTreatment.setSysSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
		}
		if(map.get("general")!=null){
			String[]general=(String[])map.get("general");
			for(String str:general){
				String[] term=str.split(":");
				Long snomedCode=Long.parseLong(term[0]);
				String snomedTerm=term[1];
				OpdTemplateTreatment opdTreatment=new OpdTemplateTreatment();
				opdTreatment.setLastChgDate(new Date());
				opdTreatment.setTemplate(opdTemplate);
				opdTreatment.setGeneralExamination(snomedTerm);
				opdTreatment.setGeSnomedCode(snomedCode);
				opdTreatment.setStatus("y");
				hbt.save(opdTreatment);
			}
			
		}
		tx.commit();
		return map;
	}
	@Override
	public boolean changeVisitStatus(Map<String, Object> mapForDS){
		Session session = (Session) getSession();
		int visitId = (Integer) mapForDS.get("visitId");
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Visit visit = (Visit) hbt.get(Visit.class, visitId);
			visit.setVisitStatus("s");
			hbt.saveOrUpdate(visit);
			tx.commit();
			return true;
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		return false;
	}
	
	@Override
    public Map<String, Object> showDisplayImagesJsp(Map<String, Object> mapForDS) {
            Map<String, Object> map = new HashMap<String, Object>();
            Session session = null;
            session = (Session) getSession();
            try {
                    int deptId = 0;
                    int hospitalId=0;
                    
                    if (mapForDS.get("deptId") != null) {
                            deptId = (Integer) mapForDS.get("deptId");
                    }
                    if(mapForDS.get("hospitalId") != null){
                            hospitalId = (Integer) mapForDS.get("hospitalId");
                            
                    }
                    List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();
                    masDepartmentList = session.createCriteria(MasDepartment.class)
                                    .add(Restrictions.idEq(deptId)).list();
                    String deptName = "";
                    if (masDepartmentList.size() > 0) {
                            for (MasDepartment masDepartment : masDepartmentList) {
                                    deptName = masDepartment.getDepartmentName();
                            }
                    }
            List<MasHospital> masHospitalList = new ArrayList<MasHospital>();
            masHospitalList = session.createCriteria(MasHospital.class).list();
            
                    map.put("masHospitalList", masHospitalList);
                    map.put("masDepartmentList", masDepartmentList);
                    map.put("deptId", deptId);
                    map.put("deptName", deptName);
            } catch (Exception e) {
                    e.printStackTrace();
            }// finally{
            /**
             * session.close() is done By Ramdular Prajapati Date 12 May 2010
             */
            /*
             * if(session!=null){ session.close(); } }
             */
            return map;
    }
    
	@Override
	public Map<String, Object> submitImagesList(Map<String, Object> map,Box box){
	        
	        Map<String, Object> utilMap = new HashMap<String, Object>();
	        MasImagesDisplay displayImage=new MasImagesDisplay();
	        utilMap = HMSUtil.getCurrentDateAndTime();
	        Session session = (Session) getSession();
	        /*int userId = 0;
	        Users user = new Users();
	        user.setId(userId);*/
	        
	     
	        Transaction tnx=null;
	        org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
	        hbt.setFlushModeName("FLUSH_EAGER");
	        hbt.setCheckWriteOperations(false);

	        try{
	                tnx=session.beginTransaction();
	                MasHospital masHospitalObj = new MasHospital();
	                MasDepartment masDepartment=new MasDepartment();
	                masHospitalObj.setId(box.getInt("hospitalId"));
	                masDepartment.setId(box.getInt("deprtId"));
	                
	                
	                String currentDate = (String)utilMap.get("currentDate");
	                Date lastChgDate=HMSUtil.convertStringTypeDateToDateType(currentDate);
	                String currentTime = (String)utilMap.get("currentTime");
	                String userText=box.get("userText");
	                String imagePath=(String)map.get("imagePath");
	                String fileContentType=(String)map.get("fileContentType");
	               
	                String videoimagePath=(String)map.get("videoimagePath");
	             
	                //userId = box.getInt("userId");
	                
	               /* byte[] images =null;
	                images = (byte[])map.get("image");
	                */
	              


	                String fromDate = box.get(EFFECTIVE_DATE_FROM);
	                Date d = HMSUtil.convertStringTypeDateToDateType(fromDate);
	                
	                String toDate = box.get(EFFECTIVE_DATE_TO);
	                Date d1 = HMSUtil.convertStringTypeDateToDateType(toDate);
	                
	                displayImage.setFromDate(d);
	                displayImage.setToDate(d1);
	                displayImage.setImagesPath(imagePath);
	               // displayImage.setUploadImages(images);
	         
	                displayImage.setUserText(userText);
	                displayImage.setLastChgTime(currentTime);
	                displayImage.setLastChgDate(lastChgDate);
	                displayImage.setHospital(masHospitalObj);
	                displayImage.setDepartment(masDepartment);
	             
	                displayImage.setDocumentContentType(fileContentType);
	                displayImage.setVideoPath(videoimagePath);
	               
	                
	                
	                hbt.save(displayImage);
	                tnx.commit();
	                session.flush();
	                
	        }catch(Exception e){
	                tnx.rollback();
	                e.printStackTrace();
	        }
	        
	        return map;
	}
		
	@Override
	public Map<String, Object> showObervationPatientList(Map<String, Object> map) {
		Session session = (Session)getSession();
		int hospitalId=0;
		int deptId=0;
		if(map.get("hospitalId")!=null){
			hospitalId=(Integer)map.get("hospitalId");
		}
		if(map.get("deptId")!=null){
			deptId=(Integer)map.get("deptId");
		}
		List<OpdPatientDetails> opdPatientDetails=new ArrayList<OpdPatientDetails>();
		opdPatientDetails=session.createCriteria(OpdPatientDetails.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("ConsultationDate",new Date()))
					.add(Restrictions.eq("ObservationStatus","Y").ignoreCase())
					.list();
		map.put("observationList", opdPatientDetails);
		return map;
	}
	@Override
	public Map<String, Object> saveAndGetTempComorbidity(Map<String, Object> map) {
		Session session = (Session) getSession();
		Integer hospitalId=null,visitNo=null;
		String diagnosisId =null;
		if(map.get("diagnosis")!=null){
			diagnosisId = (String) map.get("diagnosis");
		}
		if(map.get("visitNo")!=null){
			visitNo = (Integer) map.get("visitNo");
		}
		if(map.get("hospitalId")!=null){
			hospitalId = (Integer) map.get("hospitalId");
		}
		Integer hinId=null;
		if(map.get("hinId")!=null){
			hinId = (Integer) map.get("hinId");
		}
		Integer action=null;
		if(map.get("action")!=null){
			action = (Integer) map.get("action");
		}
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if(action==1){
				TempTableComorbidity comorbidity=new TempTableComorbidity();
				Criteria criteria = session.createCriteria(MasIcd.class, "icd")
						.add(Restrictions.eq("icd.IcdCode", diagnosisId).ignoreCase())
						.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
				List<MasIcd>mList=criteria.list();
				if(mList.size()>0){
					Integer icd=mList.get(0).getId();
					List<TempTableComorbidity>cmrList= session.createCriteria(TempTableComorbidity.class).add(Restrictions.eq("AddEditTime",new Date()))
					.add(Restrictions.eq("Visit.Id", visitNo)).add(Restrictions.eq("Hospital.Id",hospitalId))
					.add(Restrictions.eq("Hin.Id", hinId)).add(Restrictions.eq("Icd.Id", icd)).list();
					
					if(cmrList.size()==0){
						comorbidity.setIcd(new MasIcd(icd));

						comorbidity.setHospital(new MasHospital(hospitalId));
						comorbidity.setVisit(new Visit(visitNo));
						comorbidity.setAddEditTime(new Date());
						comorbidity.setHin(new Patient(hinId));
						hbt.save(comorbidity);
					}
				}
			}else if(action==0){
				List<TempTableComorbidity>tList=new ArrayList<TempTableComorbidity>();
				tList=session.createCriteria(TempTableComorbidity.class)
						.createAlias("Icd", "icd")
						.add(Restrictions.eq("icd.IcdCode", diagnosisId))
						.add(Restrictions.eq("Hin.Id", hinId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("AddEditTime", new Date()))
						.add(Restrictions.eq("Visit.Id", visitNo))
						.list();
				for(TempTableComorbidity temp:tList){
					hbt.delete(hbt.load(TempTableComorbidity.class, temp.getId()));	
				}
			}
			List<MasIcd>mList=session.createCriteria(TempTableComorbidity.class)
					.setProjection(Projections.property("Icd"))
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("AddEditTime", new Date()))
					.add(Restrictions.eq("Visit.Id", visitNo))
					.list();
			map.put("mList", mList);
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> submitCantraDrugAndDiesease(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Transaction tx = null;
		boolean status=false;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			Integer flag=box.getInt("flag");
			if(flag.equals(1)){
				String nomenclatureLeft=box.getString("nomenclatureLeft");
				String nomenclatureRight=box.getString("nomenclatureRight");
				if(!nomenclatureLeft.equals("") && !nomenclatureRight.equals("")){
					int index1 = nomenclatureLeft.lastIndexOf("(");
					int index2 = nomenclatureLeft.lastIndexOf(")");
					index1++;
					Integer nomenclatureLeftId =Integer.parseInt(nomenclatureLeft.substring(index1,	index2));
					
					
					index1 = nomenclatureRight.lastIndexOf("(");
					index2 = nomenclatureRight.lastIndexOf(")");
					index1++;
					Integer nomenclatureRightId =Integer.parseInt(nomenclatureRight.substring(index1,	index2));
					if(!nomenclatureLeftId.equals(0) && !nomenclatureRightId.equals(0)){
						CantraIndicativeDrugsToDrugs cantraIndicativeDrugsToDrugs=new CantraIndicativeDrugsToDrugs();
						cantraIndicativeDrugsToDrugs.setCantraIndicativeDrugsA(new MasStoreItem(nomenclatureLeftId));
						cantraIndicativeDrugsToDrugs.setCantraIndicativeDrugsB(new MasStoreItem(nomenclatureRightId));
						hbt.saveOrUpdate(cantraIndicativeDrugsToDrugs);
					}
				}
				
			}
			//persisting desease cantra..
			if(flag.equals(2)){
				String nomenclature=box.getString("nomenclature");
				String icd=box.getString("icd");
				
				if(!nomenclature.equals("") && !icd.equals("")){
					int index1 = nomenclature.lastIndexOf("(");
					int index2 = nomenclature.lastIndexOf(")");
					index1++;
					Integer nomenclatureId =Integer.parseInt(nomenclature.substring(index1,	index2));
					
					index1 = icd.lastIndexOf("[");
					index2 = icd.lastIndexOf("]");
					index1++;
					String icdCode =icd.substring(index1,	index2);
					List<MasIcd> icds=session.createCriteria(MasIcd.class).add(Restrictions.eq("IcdCode", icdCode)).list();
					if(icds.size()>0){
							MasIcd micd=icds.get(0);
							CantraIndicativeDrugsToDeasease cantraIndicativeDrugsToDeasease=new CantraIndicativeDrugsToDeasease();
							cantraIndicativeDrugsToDeasease.setCantraIndicativeDrugs(new MasStoreItem(nomenclatureId));
							cantraIndicativeDrugsToDeasease.setIcd(micd);
							cantraIndicativeDrugsToDeasease.setIcdCode(micd.getIcdCode());
							hbt.saveOrUpdate(cantraIndicativeDrugsToDeasease);
					}
				}
			}
			tx.commit();
			List<CantraIndicativeDrugsToDrugs>ddgList=session.createCriteria(CantraIndicativeDrugsToDrugs.class).list();
			List<CantraIndicativeDrugsToDeasease>ddsList=session.createCriteria(CantraIndicativeDrugsToDeasease.class).list();
			
			List<MasStoreItem>masStoreItemList=session.createCriteria(MasStoreItem.class).list();
			List<MasIcd>masIcdList=session.createCriteria(MasIcd.class).list();
			
			Map<Integer,String>itemName=new HashMap<Integer, String>();
			Map<Integer,String>icdName=new HashMap<Integer, String>();
			for(MasStoreItem msi:masStoreItemList){
				itemName.put(msi.getId(),msi.getNomenclature());
			}
			for(MasIcd msi:masIcdList){
				icdName.put(msi.getId(),msi.getIcdName());
			}

			map.put("itemName",itemName);
			map.put("icdName",icdName);
			map.put("ddgList",ddgList);
			map.put("ddsList",ddsList);
			
		} catch (Exception e) {
			map.put("status","Error occured during submitted Cantra-indicative");
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		return map;
	}
	@Override
	public Map<String, Object> openImageForDisplay(int imageId,int hospitalId,int deptId){
		
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Criteria crt=null;
		MasImagesDisplay masd=null;
		crt=session.createCriteria(MasImagesDisplay.class)
				.createAlias("Hospital","hosp")
				.createAlias("Department", "dep")
				.add(Restrictions.eq("Id", imageId))
				.add(Restrictions.eq("hosp.Id", hospitalId));
		
		if(null !=crt && null !=crt.list() && crt.list().size()>0)
		 masd=(MasImagesDisplay) crt.list().get(0);
		map.put("masd", masd);
		return map;
 }
	
	@Override
	public Map<String, Object> checkDrugCantraIndicative(Map<String, Object> map) {
		Session session = (Session) getSession();
		List<CantraIndicativeDrugsToDrugs> drugsA=new ArrayList<CantraIndicativeDrugsToDrugs>();
		List<CantraIndicativeDrugsToDrugs> drugsB=new ArrayList<CantraIndicativeDrugsToDrugs>();
		
		String ids=(String)map.get("ids");
		List<String>idsArray=new ArrayList<String>();
		if(ids!=null){
			idsArray=Arrays.asList(ids.split(","));
		}
		
		
		Integer itemId=(Integer)map.get("itemId");
		String icdCode=(String) map.get("icdCode");
		
		int flag=0;
		String msg="";
		Integer hinId=0;
		if (map.get("hinId") != null) {
			hinId=(Integer)map.get("hinId");
		}
		
		List<CantraIndicativeDrugsToDeasease>cantraDDlist=session.createCriteria(CantraIndicativeDrugsToDeasease.class)
				.add(Restrictions.eq("CantraIndicativeDrugs.Id", itemId))
				.add(Restrictions.eq("IcdCode", icdCode)).list();
		if(cantraDDlist.size()>0){
			String itemName=cantraDDlist.get(0).getCantraIndicativeDrugs().getNomenclature();
			String icdName=cantraDDlist.get(0).getIcd().getIcdName();
			msg="[ "+itemName+" ] is cantra-indicative drug against [ "+icdName +" ] Disease";
			map.put("msg", msg);
		}
		
		
		List<PatientPrescriptionDetails>details=session.createCriteria(PatientPrescriptionDetails.class)
								.createAlias("Prescription", "pph")
								.add(Restrictions.eq("pph.Hin.Id",hinId ))
								.add(Restrictions.eq("pph.PrescriptionDate",new Date()))
								.list();
		if(details.size()>0){
			for(PatientPrescriptionDetails mstItm:details){
				MasStoreItem mst=mstItm.getItem();
				if(mst!=null){
					drugsA=session.createCriteria(CantraIndicativeDrugsToDrugs.class).add(Restrictions.eq("CantraIndicativeDrugsA", mst)).list();
					if(drugsA.size()>0){
						CantraIndicativeDrugsToDrugs ctd=drugsA.get(0);
						String pvmsNoForB=ctd.getCantraIndicativeDrugsB().getPvmsNo();
						if(idsArray.contains(pvmsNoForB)){
							msg=ctd.getCantraIndicativeDrugsA().getNomenclature()+" is cantra-indicative drug against "+ctd.getCantraIndicativeDrugsB().getNomenclature();
							map.put("msg", msg);
							flag=1;
							return  map;
						}
					}
					
					drugsB=session.createCriteria(CantraIndicativeDrugsToDrugs.class).add(Restrictions.eq("CantraIndicativeDrugsB", mst)).setMaxResults(1).list();
					if(drugsB.size()>0){
						CantraIndicativeDrugsToDrugs ctd=drugsB.get(0);
						String pvmsNoForA=ctd.getCantraIndicativeDrugsA().getPvmsNo();
						if(idsArray.contains(pvmsNoForA)){
							msg=ctd.getCantraIndicativeDrugsB().getNomenclature()+" is cantra-indicative drug against "+ctd.getCantraIndicativeDrugsA().getNomenclature();
							map.put("msg", msg);
							flag=2;
							return  map;
						}
					}
				}
			}
		}
		if(flag==0){
			for(String strIds:idsArray){
				List<MasStoreItem> itemIdListNew = new ArrayList<MasStoreItem>();
				itemIdListNew = getItemIdFromPVMS(strIds);
				if(itemIdListNew.size()>0){
					drugsA=session.createCriteria(CantraIndicativeDrugsToDrugs.class).add(Restrictions.eq("CantraIndicativeDrugsA", itemIdListNew.get(0))).list();
					if(drugsA.size()>0){
						CantraIndicativeDrugsToDrugs ctd=drugsA.get(0);
						String pvmsNoForB=ctd.getCantraIndicativeDrugsB().getPvmsNo();
						if(idsArray.contains(pvmsNoForB)){
							msg=ctd.getCantraIndicativeDrugsA().getNomenclature()+" is cantra-indicative drug against "+ctd.getCantraIndicativeDrugsB().getNomenclature();
							map.put("msg", msg);
							return  map;
						}
						//map.put(ctd.getCantraIndicativeDrugsA().getPvmsNo(),ctd.getCantraIndicativeDrugsB().getNomenclature());
					}
					
					drugsB=session.createCriteria(CantraIndicativeDrugsToDrugs.class).add(Restrictions.eq("CantraIndicativeDrugsB", itemIdListNew.get(0))).setMaxResults(1).list();
					if(drugsB.size()>0){
						CantraIndicativeDrugsToDrugs ctd=drugsB.get(0);
						String pvmsNoForA=ctd.getCantraIndicativeDrugsA().getPvmsNo();
						if(idsArray.contains(pvmsNoForA)){
							msg=ctd.getCantraIndicativeDrugsB().getNomenclature()+" is cantra-indicative drug against "+ctd.getCantraIndicativeDrugsA().getNomenclature();
							map.put("msg", msg);
							return  map;
						}
					}
				}
			}
		}
		
		
		
		
		
		return map;
	}
	
	@Override
	public Map<String, Object> showVaccineDetailJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		List<OpdVaccinationPlan>vaccinationPlanList = new ArrayList<OpdVaccinationPlan>();
		List<OpdVaccinMst> vaccineList = new ArrayList<OpdVaccinMst>();
		List<Patient>patientList=new ArrayList<Patient>();
		List<MasDepartment> masDepartmentList=new ArrayList<MasDepartment>();
		List<RouteOfAdministration> routeOfAdministrationList = null;
		List<MasFrequency> frequencyList = null;
		Integer visitId=box.getInt("visitId");
		Integer hospitalId=box.getInt("hospitalId");
		Visit visit=null;
		int hinId=0;
		int deptId = 0;
		if(visitId!=0){
		      visit=(Visit)session.load(Visit.class, visitId);
		}
		Integer inpatientId=0;
		if(box.getInt("inpatientId")!=0){
			inpatientId=box.getInt("inpatientId");
		}
		if(box.getInt("deptId")!=0){
			deptId=box.getInt("deptId");
		}
		Inpatient inpatient=null;
		if(inpatientId!=0){
		 inpatient=(Inpatient)session.load(Inpatient.class,inpatientId);
		}
		
		if(deptId !=0){
			masDepartmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.idEq(deptId)).list();
			map.put("masDepartmentList", masDepartmentList);
		}
		
		//immunizationList = session.createCriteria(PhMemberSurvey.class).add(Restrictions.idEq(box.getInt("memberSurveyId"))).list();
	/*	List<PhMemberSurvey>surveyList=new ArrayList<PhMemberSurvey>();
		if(visitId!=0 && visit!=null){
		surveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("UhidNo", visit.getHin().getHinNo())).list();
		}else if(inpatientId!=0 && inpatient!=null){
			surveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("UhidNo", inpatient.getHin().getHinNo())).list();	
		}
		System.out.println("surveyList.size() ----- >>"+surveyList.size());
		int memberId=0;
		for(PhMemberSurvey PhMemberSurvey:surveyList){
			memberId=PhMemberSurvey.getMemberId();
		}
		System.out.println("memberId ----- >>"+memberId);*/
		if(visitId!=0 && visit!=null){
			hinId=visit.getHin().getId();
			//Changed by Arbind on 02-08-2017
			vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
				.add(Restrictions.or(Restrictions.eq("Hin.Id",visit.getHin().getId()),
				Restrictions.eq("Member",visit.getHin().getMember()!=null?visit.getHin().getMember().getMemberId():0)))
				//Added by Arbind on 25-10-2017
				.add(Restrictions.or(Restrictions.ne("ReferStatus", "y").ignoreCase(), Restrictions.isNull("ReferStatus")))
				.list(); //changed by govind 6-12-2016
			/*vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
					.add(Restrictions.eq("Hin.Id",hinId))
					.list();*/
		}else if(inpatientId!=0 && inpatient!=null){
			hinId=inpatient.getHin().getId();
			vaccinationPlanList = session.createCriteria(OpdVaccinationPlan.class)
					.add(Restrictions.or(Restrictions.eq("Hin.Id",inpatient.getHin().getId()),
					Restrictions.eq("Member",inpatient.getHin().getMember()!=null?inpatient.getHin().getMember().getMemberId():0)))
					//Added by Arbind on 25-10-2017
					.add(Restrictions.or(Restrictions.ne("ReferStatus", "y").ignoreCase(), Restrictions.isNull("ReferStatus"))).list();
		}
		
		
		//changed by govind 3-12-2016
		/*vaccineList = session.createCriteria(OpdVaccinMst.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				//.add(Restrictions.isNotNull("SrNo"))
				//.addOrder(Order.asc("MasStoreItem.Id"))
				//.addOrder(Order.asc("SrNo")) 
				//.addOrder(Order.asc("VaccinName")) //govind code
				//.addOrder(Order.asc("Dose"))
				//.addOrder(Order.asc("VaccinCode"))
				//.addOrder(Order.asc("cast(VaccinCode as int)"))
				.addOrder(new org.hibernate.criterion.Order("VaccinCode", true) {
        @Override
        public String toSqlString(Criteria criteria, CriteriaQuery criteriaQuery) throws HibernateException {
            return "cast(VaccinCode as int)";
        }
    })
				.list();*/
		
		vaccineList = session.createQuery("from OpdVaccinMst order by cast(VaccinCode as integer) asc").list(); 
		
		//changed by govind 3-12-2016 end
		
		patientList=session.createCriteria(Patient.class).add(Restrictions.eq("Id",hinId)).list();
		
		//added by govind 5-12-2016
		
		Date dob=new Date();
		if(patientList.size()>0){
		for(Patient patient:patientList){
			if(patient!=null){
				if(patient.getDateOfBirth()!=null)
					dob=patient.getDateOfBirth();
			}
		}
		}
	int minDays=0,maxDays=0,doseCount=0;
	long diff;
	int calDay=1,vacId=0;
	String vaccinName="";
	Date toDate=new Date(),schedDate=new Date(),tempVacDate=new Date();
	String vaccineDate = "";
	String vaccineToDate="";
	Calendar cal = new GregorianCalendar();
	Calendar cal2 = new GregorianCalendar();
	List<ImmunizationUtil> immunizationList=new ArrayList<ImmunizationUtil>();
	Map<Integer,String> schedDateList=new HashMap<Integer,String>();
	Map<Integer,String> toDateList=new HashMap<Integer,String>();
	Map<Integer,String> complDateList=new HashMap<Integer,String>();
	Boolean dateNull=false;
		if(vaccineList.size()>0){			
		for(OpdVaccinMst mst:vaccineList){
			vaccinName=mst.getVaccinName();
			cal.setTime(dob);
			cal2.setTime(dob);
			
			doseCount=mst.getDose();
			minDays=mst.getVaccinDuration();
			maxDays=mst.getVaccinToDays(); 
			
			//System.out.println(" min "+minDays+" max "+maxDays);
			//if(doseCount==1){
				//System.out.println("(doseCount==1)");
				
				//System.out.println("vaccineDate "+vaccineDate+" vaccineToDate "+vaccineToDate);	
				
			//}else{
			int pCount=0;
			if(vaccinationPlanList.size()>0){ 
				for(OpdVaccinationPlan vaccPlan : vaccinationPlanList){
					pCount++;
					if(vaccPlan.getVaccin().getId().equals(mst.getId())){
						//schedDate=vaccPlan.getVaccinDate();	
						//tempVacDate=vaccPlan.getVaccinCompleteDate();
						if(vaccPlan.getVaccinDate()!=null){
							schedDate=vaccPlan.getVaccinDate();
						}
						if(vaccPlan.getVaccinCompleteDate()!=null){
							tempVacDate=vaccPlan.getVaccinCompleteDate();
						}
						if(vaccPlan.getVaccinDate()!=null){
						cal.setTime(vaccPlan.getVaccinDate());
						}
						if(vaccPlan.getVaccinToDate()!=null){
						cal2.setTime(vaccPlan.getVaccinToDate());
						}
						vaccineDate = HMSUtil.convertDateToStringWithoutTime(cal.getTime());
						vaccineToDate = HMSUtil.convertDateToStringWithoutTime(cal2.getTime());	
						
						schedDateList.put(mst.getId(), vaccineDate);
						toDateList.put(mst.getId(), vaccineToDate);
						
						dateNull=true;
						vacId=mst.getId();
						break;
					}
				}
			}
			
			
			if(dateNull){
			if(getMstSecondList(vaccinName,doseCount,hinId).size()>0){
				cal.setTime(dob);
				cal2.setTime(dob);
				OpdVaccinMst mp=getMstSecondList(vaccinName,doseCount,hinId).get(0);
				diff = tempVacDate.getTime()-schedDate.getTime();
				diff=TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
				calDay=Integer.parseInt(Long.toString(diff));
				minDays=mp.getVaccinDuration();
				maxDays=mp.getVaccinToDays();
				minDays=minDays+calDay;
				maxDays=maxDays+calDay;
					cal.add(Calendar.DAY_OF_MONTH, minDays);
					cal2.add(Calendar.DAY_OF_MONTH, maxDays);

				vaccineDate = HMSUtil.convertDateToStringWithoutTime(cal.getTime());
				vaccineToDate = HMSUtil.convertDateToStringWithoutTime(cal2.getTime());	
				

				
				schedDateList.put(mp.getId(), vaccineDate);
				toDateList.put(mp.getId(), vaccineToDate);
				}
			}else{
				if(schedDateList.get(mst.getId())!=null && toDateList.get(mst.getId())!=null){
					
				}else{
					cal.add(Calendar.DAY_OF_MONTH, minDays);
					cal2.add(Calendar.DAY_OF_MONTH, maxDays);
					vaccineDate = HMSUtil.convertDateToStringWithoutTime(cal.getTime());
					vaccineToDate = HMSUtil.convertDateToStringWithoutTime(cal2.getTime());
					schedDateList.put(mst.getId(), vaccineDate);
					toDateList.put(mst.getId(), vaccineToDate);		
				}						
			}
			
			/*if(schedDateList.get(mst.getId())!=null){
			}else{				schedDateList.put(mst.getId(), vaccineDate);
			}
			if(toDateList.get(mst.getId())!=null){
			}else{
			toDateList.put(mst.getId(), vaccineToDate);
			}*/
		// }
			ImmunizationUtil imm=new ImmunizationUtil();
			imm.setId(mst.getId());
			imm.setMinDays(mst.getVaccinDuration());
			imm.setMaxDays(mst.getVaccinToDays());
			imm.setName(mst.getVaccinName());
			imm.setScheDate(schedDateList.get(mst.getId()));
			imm.setVaccinToDate(toDateList.get(mst.getId()));
			immunizationList.add(imm);
			
			dateNull=false;
		}
		
	}
		/*for(ImmunizationUtil imn:immunizationList){
			System.out.println("id "+imn.getId()+" vacName "+imn.getName());
			System.out.println("MinDay "+imn.getMinDays()+" maxDay "+imn.getMaxDays());
			System.out.println("ScedulDate "+imn.getScheDate()+" maxDay "+imn.getVaccinToDate());
		}*/
		
    //added by govind 5-12-2016 end
		
		// added by amit das on 19-09-2016
		List<Integer> prescribedVaccinList  = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "i")
							 .createAlias("i.Hin", "h").add(Restrictions.eq("h.Id",hinId)).setProjection(Projections.property("VaccinId")).list();
		
		// added by amit das on 19-10-2016
		routeOfAdministrationList =   session.createCriteria(RouteOfAdministration.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		
		// added by amit das on 19-10-2016
		//frequencyList =   session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
				
		
		
		map.put("vaccineList", vaccineList);
		if(visit!=null && visit.getHin()!=null && visitId!=0  ){
		map.put("patient", visit.getHin());
		}else if(inpatient!=null && inpatient.getHin()!=null && inpatientId!=0 ){
		map.put("patient", inpatient.getHin());	
		}
	
		
		map.put("vaccinationPlanList", vaccinationPlanList);
		map.put("patientList",patientList);
		map.put("prescribedVaccinList",prescribedVaccinList); // added by amit das on 19-09-2016
		map.put("routeOfAdministrationList",routeOfAdministrationList); // added by amit das on 19-10-2016
		//map.put("frequencyList",frequencyList); // added by amit das on 19-10-2016
		
		map.put("immunizationList",immunizationList);//added by govind 6-12-2016
		return map;
	}
	
	@Override
	public Map<String, Object> displayAU(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem>itemMasterList = new ArrayList<MasStoreItem>();
		//List<Object[]>itemBatchStockList = new ArrayList<Object[]>();
		String pvmsNo ="";
		int hospitalId = 0;
		if(dataMap.get("hospitalId") != null){
			hospitalId = (Integer)dataMap.get("hospitalId");
		}
		if(dataMap.get("pvmsNo") != null){
			pvmsNo = (String)dataMap.get("pvmsNo");
		}
		Session session = (Session)getSession();
		itemMasterList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("PvmsNo", pvmsNo))
						//	.add(Restrictions.eq("Hospital.Id", 0))
							.list();
		int itemId = 0;
		if(itemMasterList.size()>0){
			MasStoreItem storeItem = itemMasterList.get(0);
			itemId = storeItem.getId();
		}
		String str = "select sum(inp.closing_stock) from store_item_batch_stock inp  where item_id = "
			+ itemId + " and hospital_id = "+hospitalId+" and department_id in(35,24)";
		
		List<BigDecimal> itemBatchStockList = session.createSQLQuery(str).list();
		if(itemBatchStockList != null){
		for (int i=0;i<itemBatchStockList.size();i++) {
			BigDecimal closingstock = itemBatchStockList.get(0);
			map.put("closingstock", closingstock);
		 }
		}
		List<Object[]> presMapList = new ArrayList<Object[]>();
		
		presMapList = session.createCriteria(PrescriptionMapping.class).createAlias("Frequency", "f")
				.add(Restrictions.eq("Item.Id", itemId)).setProjection(Projections.projectionList().add(Projections.property("Dosage"))
				.add(Projections.property("Noofdays")).add(Projections.property("f.Id")).add(Projections.property("f.FrequencyType")).add(Projections.property("f.FrequencyCount"))).list();
		map.put("presMapList", presMapList);
		map.put("itemMasterList", itemMasterList);
		return map;
	}
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getItemListForAutoCompleteAllergy(Map<String, Object> mapForDS) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		int deptId = 0;
		String query = "";
		try {
			String str = "%" + mapForDS.get("autoHint") + "%";
			if (mapForDS.get("deptId") != null) {
				deptId = (Integer) mapForDS.get("deptId");
			}
			
			Criteria criteria = session
					.createCriteria(MasStoreItem.class, "mst")
					.add(Restrictions.eq("mst.Status", 'y').ignoreCase())
					.add(Restrictions.like("mst.Nomenclature",
							str.toLowerCase()).ignoreCase())
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.groupProperty("mst.Id"))
									.add(Projections.groupProperty("mst.PvmsNo"))
									.add(Projections.groupProperty("mst.Nomenclature"))
									.add(Projections.groupProperty("mst.CommonName")));
			criteria.setFirstResult(0);
			criteria.setMaxResults(10);
			itemList = criteria.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		mapForDS.put("itemList", itemList);
		return mapForDS;
	}
	@Override
	public Map<String,Object> submitNursingCare(Box box){
		Map<String,Object> datamap = new HashMap<String,Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		boolean flag=false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		
		int Id= box.getInt("Id");		
		String remarks = box.getString("remarks");
		String batchNo=box.getString("batchNo").split(":")[0];
		int adm=box.getInt("adm");
		int issueStock=box.getInt("issueStock");
		String procedure=box.get("procedure");
		String immunizationInj = box.getString("immunizationInj"); // added by amit das on 19-09-2016
		//String frequencyCode = null; // added by amit das on 19-09-2016
		int frequencyCode =0;
		int sessionId= box.getInt("sessionId");	 // added by amit das on 29-09-2016
		MasSession masSession = null; // added by amit das on 29-09-2016
		
		
		// added by amit das on 29-09-2016
		if(sessionId!=0)
			masSession = (MasSession) hbt.get(MasSession.class, sessionId);		
				
		InjAppointmentDetails injAppointmentDetails = (InjAppointmentDetails) hbt.get(InjAppointmentDetails.class, Id);
		
		int noOfDays = 0;
		
		if(injAppointmentDetails.getNoOfDays()!=null)
			noOfDays = injAppointmentDetails.getNoOfDays();
			
		int nFrequencyCode =0;
		// int frequencyId= injAppointmentDetails.getFrequency().getId(); // commented by amit das on 19-09-2016
		int nursingId= injAppointmentDetails.getPrescriptionDetails().getId();
		if(injAppointmentDetails.getFrequency()!=null)
			frequencyCode = injAppointmentDetails.getFrequency().getFrequencyCount();
			//frequencyCode = injAppointmentDetails.getFrequency().getFrequencyCode();
		
		
		if(frequencyCode!=0)
		{
			 nFrequencyCode = (frequencyCode);
		 // nFrequencyCode =  Integer.parseInt(frequencyCode);
		}
		
		int nTotalProcedure = nFrequencyCode * noOfDays;
		
		int injAppointmentHeaderId = injAppointmentDetails.getInjAppointmentHeader().getId();
		
		List<InjAppointmentDetails> listA = new ArrayList<InjAppointmentDetails>();
		List<InjAppointmentDetails> listB = new ArrayList<InjAppointmentDetails>();
		
		Session session = (Session)getSession();
		/*
		 procedure updates for copper t 
		*/
		Criteria cr=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "header")
				.createAlias("PrescriptionDetails", "nr")
				.add(Restrictions.eq("header.Id", injAppointmentHeaderId))
				.add(Restrictions.eq("nr.Id", nursingId))
				.add(Restrictions.isNull("ExceptionalPrescription"));
		listA = cr.list();
		
		Criteria crExce =session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "header")
				.createAlias("PrescriptionDetails", "nr")
				.add(Restrictions.eq("header.Id", injAppointmentHeaderId))
				.add(Restrictions.eq("nr.Id", nursingId))
				.add(Restrictions.eq("Status","p").ignoreCase())
				.add(Restrictions.and(Restrictions.eq("InjAppointmentDate", new Date()), Restrictions.le("ExceptionalPrescription","y").ignoreCase()));
		listB = crExce.list();
		
		
		List<StoreItemBatchStock>storeItemBatch=session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo",batchNo)).add(Restrictions.eq("Item.Id", injAppointmentDetails.getItem().getId())).list();
		StoreItemBatchStock stock=null; 
		if(storeItemBatch.size()>0){
			stock=storeItemBatch.get(0);
			BigDecimal issueStock1 = new BigDecimal(0);//added by govind 22-08-2017
			if(stock.getIssueQty()!= null){
				issueStock1 = stock.getIssueQty();
			}
			stock.setIssueQty(issueStock1.add(new BigDecimal(issueStock)));//added by govind 22-08-2017 end
			stock.setClosingStock(stock.getClosingStock().subtract(new BigDecimal(issueStock)));
		}
		
		if(listA!=null && listA.size()>0){
			if(listA.size() != nTotalProcedure)
			{	
				InjAppointmentDetails newDetailsId = new InjAppointmentDetails();
				newDetailsId.setPrescriptionDetails(injAppointmentDetails.getPrescriptionDetails());
				newDetailsId.setInjAppointmentHeader(injAppointmentDetails.getInjAppointmentHeader());
				newDetailsId.setItem(injAppointmentDetails.getItem());
				newDetailsId.setDose(injAppointmentDetails.getDose());
				newDetailsId.setFrequency(injAppointmentDetails.getFrequency());
				newDetailsId.setStatus("p");
				newDetailsId.setNoOfDays(injAppointmentDetails.getNoOfDays());
				newDetailsId.setFinalStatus("n");
				
				// added by amit das on 29-09-2016
				if(masSession!=null)
					newDetailsId.setSession(masSession);
				
				if(box.getString("AppointmentFlag").equalsIgnoreCase("y"))
				{
					newDetailsId.setNextAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
					newDetailsId.setInjAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
				}
				else
				{
					newDetailsId.setInjAppointmentDate(injAppointmentDetails.getInjAppointmentDate());
				}
				if(adm!=1 && stock!=null){
						hbt.saveOrUpdate(stock);
						hbt.save(newDetailsId);
						hbt.refresh(newDetailsId);
				}else{
					hbt.save(newDetailsId);
					hbt.refresh(newDetailsId);
				}
				
			}
			else
			{
				// update all injectiondetail row with final status
				for(InjAppointmentDetails dt: listA)
				{
					InjAppointmentDetails dt1 = new InjAppointmentDetails();
					dt1 =hbt.get(InjAppointmentDetails.class, dt.getId());
					if(dt1 != null)
					{
						dt1.setFinalStatus("y");
						hbt.update(dt1);
						hbt.refresh(dt1);
					}
				}
			}
				
			try{
					if(injAppointmentDetails != null)
					{
						injAppointmentDetails.setInjAppointmentDate(new Date());
						injAppointmentDetails.setAppointmentTime(time);
						injAppointmentDetails.setNursingRemark(remarks);
						injAppointmentDetails.setStatus("y");
						injAppointmentDetails.setIssueStock(issueStock);
						if(adm!=1){
							injAppointmentDetails.setBatchNo(batchNo);
							injAppointmentDetails.setIssueStock(1);
							injAppointmentDetails.setAdministrator("n");
						}else{
							injAppointmentDetails.setAdministrator("y");
						}
						
						// added by amit das on 29-09-2016
						if(masSession!=null)
							injAppointmentDetails.setSession(masSession);
						
						
						if(adm!=1 && stock!=null){
							hbt.saveOrUpdate(stock);
							hbt.save(injAppointmentDetails);
							hbt.refresh(injAppointmentDetails);
						}else{
							hbt.save(injAppointmentDetails);
							hbt.refresh(injAppointmentDetails);
						}
						flag=true;
					}
			 }catch(Exception e)
			 {
				 logger.error("Error in Save Nursing Care OPD : "+e.getStackTrace().toString());
			 }
		}
		if(listB!=null && listB.size()>0){
				try{
						if(injAppointmentDetails != null)
						{
							injAppointmentDetails.setInjAppointmentDate(new Date());
							injAppointmentDetails.setAppointmentTime(time);
							injAppointmentDetails.setNursingRemark(remarks);
							injAppointmentDetails.setStatus("y");
							injAppointmentDetails.setIssueStock(issueStock);
							injAppointmentDetails.setFinalStatus("y");
							if(adm!=1){
								injAppointmentDetails.setBatchNo(batchNo);
								injAppointmentDetails.setIssueStock(1);
								injAppointmentDetails.setAdministrator("n");
							}else{
								injAppointmentDetails.setAdministrator("y");
							}
							
							// added by amit das on 29-09-2016
							if(masSession!=null)
								injAppointmentDetails.setSession(masSession);
							
							if(adm!=1 && stock!=null){
								hbt.saveOrUpdate(stock);
								
								hbt.save(injAppointmentDetails);
								hbt.refresh(injAppointmentDetails);
							}else{
								hbt.save(injAppointmentDetails);
								hbt.refresh(injAppointmentDetails);
							}
							flag=true;
						}
				 }catch(Exception e)
				 {
					 logger.error("Error in Save Nursing Care OPD : "+e.getStackTrace().toString());
				 }
			
		}		
		
		// added by amit das on 16-09-2016
		if(immunizationInj!=null && immunizationInj.equalsIgnoreCase("Y")){
			injAppointmentDetails.setFinalStatus("y");
			hbt.update(injAppointmentDetails);
			
			OpdVaccinationPlan vaccinationPlan = new OpdVaccinationPlan();
			int vaccinationPlanId =0 ;
			Patient hin = null;
			MasHospital masHospital	= (MasHospital)session.get(MasHospital.class, box.getInt("hospitalId"));
			
			OpdVaccinMst vaccinMst = new OpdVaccinMst();
			vaccinMst.setId(box.getInt("vaccinId"));
			vaccinationPlan.setVaccin(vaccinMst);
			
			
			if(box.getInt("hinId")!=0){
				hin = (Patient)session.get(Patient.class, box.getInt("hinId"));
				vaccinationPlan.setHin(hin);
			}
			
			
			vaccinationPlan.setHospital(masHospital);
			vaccinationPlan.setLastChgDate(new Date());
			vaccinationPlan.setLastChgTime(time);
			vaccinationPlan.setVaccinCompleteDate(new Date());
			/*Users users = new Users();
			users.setId(box.getInt("userId"));
			vaccinationPlan.setLastChgBy(users);*/
			hbt.save(vaccinationPlan);
			
			vaccinationPlanId=vaccinationPlan.getId();						
			
			if(hin!=null && hin.getMember()!=null){
			Long memberId2=0L;
			List<PhMemberSurvey>PhMemberSurveyList=new ArrayList<PhMemberSurvey>();
			PhMemberSurveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("Id", hin.getMember().getId())).list();
			int subcentreId=0;
			for(PhMemberSurvey PhMemberSurvey:PhMemberSurveyList){
				if(PhMemberSurvey.getHospital()!=null){
				subcentreId=PhMemberSurvey.getHospital().getId();
				memberId2=PhMemberSurvey.getMemberId();
			  } 
			}
			List<OpdVaccinationPlan>OpdVaccinationPlanList=new ArrayList<OpdVaccinationPlan>();
			OpdVaccinationPlanList=session.createCriteria(OpdVaccinationPlan.class).add(Restrictions.eq("Id", vaccinationPlanId)).list();
			for(OpdVaccinationPlan opdVaccinationPlan :OpdVaccinationPlanList){
			if(subcentreId!=0){

			MasHospital mh=new MasHospital();
			mh.setId(subcentreId);
			opdVaccinationPlan.setSubCentre(mh);
			
			opdVaccinationPlan.setMember(memberId2);
			hbt.update(opdVaccinationPlan);
		    }
		  }
		  }
		}
		
		 datamap.put("flag", flag);
		 return datamap;
	}
	@Override
	public Map<String, Object> getpatientRefered(Box box) {
		Session session = (Session) getSession();
		Map<String,Object>map=new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Integer opdId=null;
		OpdPatientDetails opdPatientDetails=null;
		Visit visit=null;
		QueueManagment queue=null;
		int flag=0;
		
		if(((Integer)box.getInt("opdId"))!=null){
			opdId=(Integer)box.getInt("opdId");
			opdPatientDetails=(OpdPatientDetails)hbt.load(OpdPatientDetails.class,opdId);
			if (box.getString("obStatus") !=null && !box.getString("obStatus").equals("") && ((Integer.valueOf(box.getString("obStatus"))==1))) {
				opdPatientDetails.setObservationStatus("D");
				flag=4;
			}
			if (box.getString("obStatus") !=null && !box.getString("obStatus").equals("") && ((Integer.valueOf(box.getString("obStatus"))==2))) {
				int visitId=opdPatientDetails.getVisit().getId();
				visit=(Visit)hbt.load(Visit.class,visitId);
				Query query = session.createQuery("select Id from QueueManagment where Visit.Id = :visitId");
				query.setParameter("visitId", visitId);
				int Id = (Integer) query.uniqueResult();
				queue=(QueueManagment)hbt.load(QueueManagment.class,Id);
				visit.setVisitStatus("w");
				queue.setTokenStatus("w");
				opdPatientDetails.setObservationStatus("D");
				hbt.saveOrUpdate(visit);
				hbt.saveOrUpdate(queue);
				flag=4;
			}
			
			
			/*Obsrevaton IP activity*/
			if(box.getString("payward")!=null && ((String)box.getString("payward")).equals("Y"))
				opdPatientDetails.setPayWardCheckedStatus("Y");
			if (!box.getString("admissionWard").equals(null)&&!box.getString("admissionWard").isEmpty() 
					&& box.getInt("admissionWard")!=0 ) {
				Integer admissionWard = (Integer)box.getInt("admissionWard");
				opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
				/*if((Integer)box.getInt("checkedPaywaradmissionId")!=null){
					opdPatientDetails.setPaywardOtherDept(new MasDepartment(admissionWard));
					opdPatientDetails.setPayWardCheckedStatus("Y");
				}*/
			}
			
			if (box.getString("IpAdStatus") != null && !box.getString("IpAdStatus").equals("") && ((Integer.valueOf(box.getString("IpAdStatus"))==1))) {
				opdPatientDetails.setObservationStatus("ip");
				opdPatientDetails.setAdmissionAdvised("y");
				opdPatientDetails.setAdmissionDate(new Date());
				flag=5;
			}
			hbt.saveOrUpdate(opdPatientDetails);
		}	
		map.put("flag", flag);
		return map;
	}
	
	
	@Override
	public Map<String, Object> patientDischargeAndAdmit(Map<String,Object> mapForDS) {
		Session session = (Session) getSession();
		//Map<String,Object>map=new HashMap<String, Object>();
		Box box=(Box) mapForDS.get("box");
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Integer opdId=null;
		OpdPatientDetails opdPatientDetails=null;
		int flag=0;
		Integer hospitalId=0;
		if (mapForDS.get("hospitalId") != null) {
			hospitalId=(Integer)mapForDS.get("hospitalId");
		}
		Integer userId=0;
		if (mapForDS.get("userId") != null) {
			userId=(Integer)mapForDS.get("userId");
		}
		Properties properties = new Properties();
	    URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
	    
	    try {
			properties.load(resourcePath.openStream());
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		int pharmacyDepartmentId=0;
		pharmacyDepartmentId = Integer.parseInt(properties.getProperty("pharmacyDepartmentId"));
		
		String prescriptionNo="";
		if((String)mapForDS.get("prescriptionNo")!=null){
			prescriptionNo=(String)mapForDS.get("prescriptionNo");
		}
		int visitId=0;
		Visit visitObjToUpdate=null;
		
		if((Integer)box.getInt("visitId")!=null){
			visitObjToUpdate=(Visit) hbt.get(Visit.class, (Integer)box.getInt("visitId"));
			visitId=(Integer)box.getInt("visitId");
		}
		Integer departmentId=visitObjToUpdate.getDepartment().getId();
		Patient patient = visitObjToUpdate.getHin();
		int hinId=patient.getId();
		Map<String, Object> timeMap=HMSUtil.getCurrentTimeHHMM();
		String currentTime=(String) timeMap.get("currentTime");
		List<Integer> itemIdList = new ArrayList<Integer>();
		
		List<String> pvmsNoList = (List<String>) mapForDS.get("pvmsNoList");
		
		List<Integer> frequencyList=null;
		if(mapForDS.get("frequenciesList")!=null){
			frequencyList=(List<Integer>) mapForDS.get("frequenciesList");
		}
		
		List<Float> dosageList=null;
		if(mapForDS.get("dosageList")!=null){
			dosageList=(List<Float>) mapForDS.get("dosageList");
		}
		
		List<Integer> noOfDaysList=null;
		if(mapForDS.get("noOfDaysList")!=null){
			noOfDaysList=(List<Integer>) mapForDS.get("noOfDaysList");
		}
		
		List<Integer> routes=null;
		if(mapForDS.get("routes")!=null){
			routes=(List<Integer>) mapForDS.get("routes");
		}
		List<Integer> instrunctions=null;
		if(mapForDS.get("instrunctionsList")!=null){
			instrunctions=(List<Integer>) mapForDS.get("instrunctionsList");
		}
		
		List<Integer> parkPrescriptionIds=null;
		
		List<String> spLinstrunctionList=null;
		if(mapForDS.get("spLinstrunctionList")!=null){
			spLinstrunctionList=(List<String>) mapForDS.get("spLinstrunctionList");
		}
		
		List<Float> totalList=null;
		if(mapForDS.get("totalList")!=null){
			totalList=(List<Float>) mapForDS.get("totalList");
		}
		List<Float> actualTotalAfterMixList=null;
		if(mapForDS.get("actualTotalAfterMixList")!=null){
			actualTotalAfterMixList=(List<Float>) mapForDS.get("actualTotalAfterMixList");
		}
		
		List<String> prescription_availableStatusList=null;
		if(mapForDS.get("prescription_availableStatusList")!=null){
			prescription_availableStatusList=(List<String>) mapForDS.get("prescription_availableStatusList");
		}
		
		
		if(((Integer)box.getInt("opdId"))!=null){
			opdId=(Integer)box.getInt("opdId");
			opdPatientDetails=(OpdPatientDetails)hbt.load(OpdPatientDetails.class,opdId);
			if (box.getString("obStatus") !=null && !box.getString("obStatus").equals("") && ((Integer.valueOf(box.getString("obStatus"))==1))) {
				opdPatientDetails.setObservationStatus("D");
				flag=4;
			}
			
			
			/*Obsrevaton IP activity*/
			if(box.getString("payward")!=null && ((String)box.getString("payward")).equals("Y"))
				opdPatientDetails.setPayWardCheckedStatus("Y");
			if (!box.getString("admissionWard").equals(null)&&!box.getString("admissionWard").isEmpty() 
					&& box.getInt("admissionWard")!=0 ) {
				Integer admissionWard = (Integer)box.getInt("admissionWard");
				opdPatientDetails.setAdmissionWard(new MasDepartment(admissionWard));
				/*if((Integer)box.getInt("checkedPaywaradmissionId")!=null){
					opdPatientDetails.setPaywardOtherDept(new MasDepartment(admissionWard));
					opdPatientDetails.setPayWardCheckedStatus("Y");
				}*/
			}
			
			if (box.getString("IpAdStatus") != null && !box.getString("IpAdStatus").equals("") && ((Integer.valueOf(box.getString("IpAdStatus"))==1))) {
				opdPatientDetails.setObservationStatus("ip");
				opdPatientDetails.setAdmissionAdvised("y");
				opdPatientDetails.setAdmissionDate(new Date());
				flag=5;
			}
			hbt.saveOrUpdate(opdPatientDetails);
		}	
		
		if(flag!=5){
			if (pvmsNoList.size() > 0) {
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
		
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				patientPrescriptionHeader.setHin(patient);
				masDepartment.setId(departmentId);
				patientPrescriptionHeader.setDepartment(masDepartment);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setVisit(visitObjToUpdate);
				masHospital.setId(hospitalId);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setPrescriptionDate(new Date());
				patientPrescriptionHeader.setPrescriptionTime(currentTime);
				patientPrescriptionHeader.setDispencingDate(new Date());
				patientPrescriptionHeader.setOpdPatientDetail(opdPatientDetails);
				
				//Start..    Added by Dhananjay 02-Jan-2017
				
				String pharmacyLabStatus="P";
			PharmacyLabQueue pharmacyLabQueue=saveQueueNoForPharmacy(pharmacyDepartmentId,hospitalId,visitObjToUpdate,pharmacyLabStatus);
			if(null !=pharmacyLabQueue)
			patientPrescriptionHeader.setPharmacyLabQueue(pharmacyLabQueue);
				//End
				
					hbt.save(patientPrescriptionHeader);
				
				
				
				for (int i = 0; i < pvmsNoList.size(); i++) {
					String pvmsNo = (String) pvmsNoList.get(i);
					List<MasStoreItem> itemIdListNew = new ArrayList<MasStoreItem>();
					itemIdListNew = getItemIdFromPVMS(pvmsNo);
					for (int k = 0; k < itemIdListNew.size(); k++) {
						itemIdList.add(itemIdListNew.get(k).getId());
					}
				}
				int item_class_id=0;
				MasFrequency masFrequency = null;
				MasStoreItem masStoreItem = null;
				RouteOfAdministration routeOfAdministration = null;
				OpdInstructionTreatment opdInstructionTreatment = null;
				List<Object> opdPatientListObject = new ArrayList<Object>();
				
				String[] durationStr1=null;
				String[] durationStr2=null;
				List<String>durationPrescriptionList=new ArrayList<String>();
				if (mapForDS.get("durationPrescriptionList") != null) {
					durationPrescriptionList =(List<String>) mapForDS.get("durationPrescriptionList");
				}
				
				InjAppointmentDetails injAppointmentDetails=null;
				
				for (int i = 0; i < itemIdList.size(); i++) {
					String[]dayCount=null;
					String mainStr="";
					if(durationPrescriptionList!=null && durationPrescriptionList.size()>i){
						mainStr=(String)durationPrescriptionList.get(i);
						dayCount=mainStr.split(",");
					}
					
					PatientPrescriptionDetails patientPrescriptionDetails=null;
					
					if(parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
						patientPrescriptionDetails	= hbt.load(PatientPrescriptionDetails.class, parkPrescriptionIds.get(i));
						//added by govind 28-03-2017 for duplicate came in recall patient
						Criteria cr=session.createCriteria(InjAppointmentDetails.class)
								.add(Restrictions.eq("PrescriptionDetails.Id", parkPrescriptionIds.get(i)));
						if(cr.list().size()>0){
						injAppointmentDetails=(InjAppointmentDetails)cr.list().get(0);
						}
						//added by govind 28-03-2017 end
					}else{
						patientPrescriptionDetails	= new PatientPrescriptionDetails();
						injAppointmentDetails = new InjAppointmentDetails();//added by govind 28-03-2017 
					}
					if (itemIdList != null && itemIdList.size() > 0	&& itemIdList.get(i) != 0)
						masStoreItem = (MasStoreItem)session.load(MasStoreItem.class, itemIdList.get(i));//new MasStoreItem(itemIdList.get(i));
					
					if (frequencyList != null && frequencyList.size() > 0 && frequencyList.get(i) != 0)
						masFrequency = new MasFrequency(frequencyList.get(i));

					if (routes != null && routes.size() > 0	&& routes.get(i) != 0)
						routeOfAdministration = new RouteOfAdministration(routes.get(i));

					if (instrunctions != null && instrunctions.size() > 0	&& instrunctions.get(i) != 0){
						opdInstructionTreatment = new OpdInstructionTreatment(instrunctions.get(i));
					}
					if (noOfDaysList.size() > 0 && noOfDaysList.get(i) != 0	&& noOfDaysList.get(i) != 0){
						patientPrescriptionDetails.setNoOfDays(noOfDaysList.get(i));
					}	
					if(spLinstrunctionList!=null && spLinstrunctionList.size()>0){
						patientPrescriptionDetails.setSplInstruction(spLinstrunctionList.get(i));
					}
					
					//prescribedMedicin.append(masStoreItem.getNomenclature()+",");
					patientPrescriptionDetails.setNotAvailable(prescription_availableStatusList.get(i));
					patientPrescriptionDetails.setItem(masStoreItem);
					patientPrescriptionDetails.setFrequency(masFrequency);
					patientPrescriptionDetails.setDosage(dosageList.get(i));
					patientPrescriptionDetails.setInsrtuction(opdInstructionTreatment);
					patientPrescriptionDetails.setRoute(routeOfAdministration);
					patientPrescriptionDetails.setType("OP");
					patientPrescriptionDetails.setTotal(totalList.get(i));
					patientPrescriptionDetails.setActualTotal(actualTotalAfterMixList.get(i)); // added by amit das on 19-11-2016
					/*patientPrescriptionDetails.setStartDate(startDates.get(i));
					patientPrescriptionDetails.setEndDate(endDates.get(i));*/
					patientPrescriptionDetails.setNursingStatus("n");
					patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					
					List<MasStoreItem> storeItemList=new ArrayList<MasStoreItem>();
						
						String item_class_code = properties.getProperty("item_class_id");
						item_class_id=Integer.parseInt(item_class_code);
					
					storeItemList=hbt.find("select item from jkt.hms.masters.business.MasStoreItem as item join item.ItemClass as ic where item.Id="+itemIdList.get(i)+" and ic.Id="+item_class_id);
					if(storeItemList.size() > 0){
						patientPrescriptionDetails.setInjectionStatus("p");
					}else{
						patientPrescriptionDetails.setInjectionStatus("n");
					}
					
					if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p") && parkPrescriptionIds!=null && !parkPrescriptionIds.get(i).equals(0)){
						hbt.update(patientPrescriptionDetails);
					}else{
						hbt.save(patientPrescriptionDetails);
					}
					
					if(storeItemList.size()>0){
						List<InjAppointmentHeader> injectionRegisterList=new ArrayList<InjAppointmentHeader>();
						injectionRegisterList=hbt.find("select inj from jkt.hms.masters.business.InjAppointmentHeader as inj join inj.Visit as visit where visit.Id="+visitId);
						
						InjAppointmentHeader injectionAppointment = new InjAppointmentHeader();
						
						 
						if(injectionRegisterList.size()>0){
							for (InjAppointmentHeader injectionRegisterTemp : injectionRegisterList) {
								injectionAppointment.setId(injectionRegisterTemp.getId());
							}
						}else{
							Patient patientInj = new Patient();
							patientInj.setId(hinId);
							injectionAppointment.setHin(patientInj);
							Visit visitInj = new Visit();
							visitInj.setId(visitId);
							injectionAppointment.setVisit(visitInj);
							MasHospital masHospitalInj = new MasHospital();
							masHospitalInj.setId(hospitalId);
							injectionAppointment.setHospital(masHospitalInj);
							
							injectionAppointment.setStatus("p");
							injectionAppointment.setLastChgTime(currentTime);
							Users user = new Users();
							user.setId(userId);
							injectionAppointment.setLastChgBy(user);
							injectionAppointment.setLastChgDate(new Date());
							injectionAppointment.setPrescription(patientPrescriptionHeader);
							hbt.save(injectionAppointment);
						}
								if(mainStr.equals("")){
									//injAppointmentDetails.setAppointmentTime(time);
									injAppointmentDetails.setInjAppointmentDate(new Date());
									injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
									
									MasFrequency frequency = new MasFrequency();
									frequency.setId(frequencyList.get(i));
									injAppointmentDetails.setFrequency(frequency);
									
									if(routeOfAdministration!=null)
									injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
									
									 
									MasStoreItem item = new MasStoreItem();
									item.setId(itemIdList.get(i));
									
									//Check for insullin method checkForInsulinInjection(itemIdList.get(i)) added by Dhananjay 21/07/2016
									
									if(!checkForInsulinInjection(itemIdList.get(i))){
										
									
									injAppointmentDetails.setItem(item);
									if(routeOfAdministration!=null){
										injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
									}
									injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
									injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
									injAppointmentDetails.setPrescriptionDetails(patientPrescriptionDetails);
									injAppointmentDetails.setStatus("p");
									injAppointmentDetails.setFinalStatus("n");
									hbt.save(injAppointmentDetails);
									}
								}else{
									for(String str:dayCount){
										injAppointmentDetails = new InjAppointmentDetails();
										
										SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
										Calendar cal=Calendar.getInstance();
										Integer nextDate=Integer.parseInt(str.trim());
										Date appointmentDate=null;
										
										if(nextDate==1){
											appointmentDate=new Date();
											injAppointmentDetails.setNoOfDays(noOfDaysList.get(i));
											injAppointmentDetails.setInjAppointmentDate(appointmentDate);
											if(mainStr!=null && !mainStr.equals("")){
												injAppointmentDetails.setExceptionalPrescription("y");
											}
										}else{
											if(nextDate>1){
												cal.add(Calendar.DATE, nextDate-1);
											}else{
												cal.add(Calendar.DATE, nextDate);
											}
											
											appointmentDate=HMSUtil.convertStringyyyyMMddTypeToDateType(format.format(cal.getTime()));
											injAppointmentDetails.setNoOfDays(1);
											injAppointmentDetails.setInjAppointmentDate(appointmentDate);
											injAppointmentDetails.setExceptionalPrescription("y");
										}
										
										
										injAppointmentDetails.setDose(String.valueOf(dosageList.get(i)));
										
										MasFrequency frequency = new MasFrequency();
										frequency.setId(frequencyList.get(i));
										injAppointmentDetails.setFrequency(frequency);
										
										if(routeOfAdministration!=null)
										injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
										
										MasStoreItem item = new MasStoreItem();
										item.setId(itemIdList.get(i));
										injAppointmentDetails.setItem(item);
										if(routeOfAdministration!=null){
											injAppointmentDetails.setRoute(routeOfAdministration.getRouteName());
										}
										injAppointmentDetails.setInjAppointmentHeader(injectionAppointment);
									
										injAppointmentDetails.setPrescriptionDetails(patientPrescriptionDetails);
										injAppointmentDetails.setStatus("p");
										injAppointmentDetails.setFinalStatus("n");
										hbt.save(injAppointmentDetails);
									}
								}
							
					}
					
				}
			}
		}
		
		
		
		mapForDS.put("flag", flag);
		return mapForDS;
	}
	@Override
	public Map<String, Object> checkInvestigationItem(Map<String, Object> map) {
		Session session = (Session) getSession();
		Integer hospitalId=0;
		Integer chargeCode=0;
		if (map.get("hospitalId") != null) {
			hospitalId=(Integer)map.get("hospitalId");
		}
		if (map.get("chargeCode") != null) {
			chargeCode=(Integer)map.get("chargeCode");
		}
		List<MasHospitalwiseChargecode>list=new ArrayList<MasHospitalwiseChargecode>();
		list=session.createCriteria(MasHospitalwiseChargecode.class)
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("ChargeCode.Id", chargeCode))
					//.add(Restrictions.or(Restrictions.eq("Blocked", "n"), Restrictions.isNull("Blocked")))
					.list();
		map.put("hospitalChargeCode", list.size());
		return map;
	}
	
	
	@Override
	public Map<String, Object> checkInvestigationItemIsBlocked(Map<String, Object> map) {
		Session session = (Session) getSession();
		Integer hospitalId=0;
		Integer chargeCode=0;
		if (map.get("hospitalId") != null) {
			hospitalId=(Integer)map.get("hospitalId");
		}
		if (map.get("chargeCode") != null) {
			chargeCode=(Integer)map.get("chargeCode");
		}
		List<MasHospitalwiseChargecode>list=new ArrayList<MasHospitalwiseChargecode>();
		list=session.createCriteria(MasHospitalwiseChargecode.class)
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("ChargeCode.Id", chargeCode))
					.add(Restrictions.or(Restrictions.eq("Blocked", "n"), Restrictions.isNull("Blocked")))
					.list();
		map.put("hospitalChargeCode", list.size());
		return map;
	}
	



	
	@Override
	public Map<String, Object> showSecondOpnionListJsp(Map<String, Object> map) {
		
		Map<String,Object> dataMap=new HashMap<String,Object>();
		
		int empId=(Integer)map.get("empId");
		
		Session session=(Session) getSession();
		List<OpdPatientSecondOpinion> patientsecondOpinion=new ArrayList<OpdPatientSecondOpinion>();
		
		Criteria crt=null;
		 crt=session.createCriteria(OpdPatientSecondOpinion.class)
				 .add(Restrictions.eq("OpinoinStatus", "p").ignoreCase())
				 .createAlias("Visit", "visit")
				  .createAlias("OpinionDoctor", "OpinionDoctor")
				  .add(Restrictions.eq("OpinionDoctor.Id", empId))
				 .add(Restrictions.eq("visit.VisitStatus", "a").ignoreCase())
				 .addOrder(Order.desc("visit.VisitDate").asc("visit.TokenNo"));
		 patientsecondOpinion=crt.list();
		 
		 dataMap.put("patientsecondOpinion", patientsecondOpinion);
		
		return dataMap;
	}

	
	

	@Override
	public Map<String, Object> checkItemStockQty(Map<String, Object> map) {
		Session session = (Session) getSession();
		Integer ItemId=(Integer) map.get("ItemId");
		int hospitalId =(Integer)map.get("hospitalId");
		BigDecimal stockQty=(BigDecimal)session.createCriteria(StoreItemBatchStock.class)
	 			.add(Restrictions.eq("Id",ItemId))
	 			.setProjection(Projections.property("ClosingStock"))
	 			.uniqueResult();
		map.put("stockqty", stockQty);
		return map;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getPendingInjectionList(Box box,Date FromDate,Date ToDate,int hospitalId) {
		Map<String,Object>map=new HashMap<String,Object>();	
		/*Integer hospitalId=box.getInt("hospitalId");*/
		int deptId=box.getInt("deptId");
		Date FromDateId=HMSUtil.convertStringTypeDateToDateType(box.get("FromDateId"));
		Date ToDateId=HMSUtil.convertStringTypeDateToDateType(box.get("ToDateId"));
		List<PatientPrescriptionHeader> pendingInjectionList = new ArrayList<PatientPrescriptionHeader>();
		List<InjAppointmentHeader> pendingInjectionAppList = new ArrayList<InjAppointmentHeader>();
		
		Session session = (Session)getSession();
		Criteria crit = null;
		Criteria critApp = null;
		/*if(FromDateId==new Date()){
			critApp = session.createCriteria(InjAppointmentHeader.class).add(Restrictions.eq("Status", "p").ignoreCase()).
					createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId)).add(Restrictions.eq("AppointmentDate",new Date()));
		}else{*/

		critApp = session.createCriteria(InjAppointmentDetails.class)
				.createAlias("InjAppointmentHeader", "injAph")
				.createAlias("injAph.Hospital", "h")
				.add(Restrictions.eq("injAph.Status", "p").ignoreCase())
				.add(Restrictions.eq("h.Id", hospitalId))
				.setProjection(Projections.groupProperty("InjAppointmentHeader"));
		
	/*		critApp = session.createCriteria(InjAppointmentHeader.class).add(Restrictions.eq("Status", "p").ignoreCase()).
					createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId));*/
			if(FromDateId!=null && ToDateId!=null){
				//critApp  = critApp.add(Restrictions.between("injAph.AppointmentDate", FromDate, ToDate));
				critApp  = critApp.add(Restrictions.between("InjAppointmentDate", FromDate, ToDate));
			}else{
				//critApp  = critApp.add(Restrictions.eq("injAph.AppointmentDate", (new Date())));
				critApp  = critApp.add(Restrictions.eq("InjAppointmentDate", (new Date())));
			}
		//}
		pendingInjectionAppList = critApp.list();
		map.put("pendingInjectionAppList", pendingInjectionAppList);
		return map;
}
	public Map<String, Object> getItemBatch(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		int deptId = box.getInt("deptId");
		int itemId =  box.getInt("itemId");
		int appDtId=box.getInt("appDtId");
		int hospitalId = box.getInt("hospitalId");
		int appointmentHeaderId = box.getInt("appointmentHeaderId");
		List<MasSession> sessionList = null;
		
		Session session = (Session)getSession();
		

		sessionList = session.createCriteria(MasSession.class).list(); // added by amit das on 29-09-2016
		
		List<InjAppointmentDetails>injAppointmentDetails=session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader","header")
						.add(Restrictions.eq("Item.Id",itemId))
						.add(Restrictions.eq("header.Id",appointmentHeaderId))
						.addOrder(Order.asc("Id")).list();
		
		int pharmacyDepId =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "pharmacyDepId".trim()));
		String blockStatus [] = {"Temporary Block","Parmanent Block"};
		batchList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.add(Restrictions.eq("item.Id", itemId))
		  				.createAlias("Department", "dept")
		  				//.add(Restrictions.or( Restrictions.eq("dept.Id", deptId), Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))))//added by govind 21-08-2017
		  				//.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
		  				.add(Restrictions.eq("Hospital.Id", hospitalId))
		  				.add(Restrictions.eq("dept.Id", deptId))
		  				.add(Restrictions.or(Restrictions.ge("ExpiryDate", new Date()), Restrictions.isNull("ExpiryDate")))
						.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
						//.add(Restrictions.or(Restrictions.ne("BlockStatus", blockStatus), Restrictions.isNull("BlockStatus")))
						.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
						//.add(Restrictions.isNull("BlockStatus"))
						.addOrder(Order.asc("ExpiryDate")).list();//added by govind 21-08-2017 end
		
		map.put("batchList", batchList);
		map.put("sessionList", sessionList); // added by amit das on 29-09-2016
		map.put("injAppointmentDetails", injAppointmentDetails);
		
		return map;
	}
	@Override
	public Map<String, Object> getInjectionDetailsForAppointment(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<InjAppointmentDetails> injectionList = new ArrayList<InjAppointmentDetails>();
		Session session = (Session)getSession();
		int count = box.getInt("injCount");
		String appIdsd="";
		/*if(count>0){
			for (int i = 1; i <count; i++) {
				if(box.getInt("appDtId"+i)!=0){
					System.out.println("appDtId\t "+box.getInt("appDtId"+i));
					if(appIdsd.equals("")){
						appIdsd=""+box.getInt("appDtId"+i);
					}else{
						appIdsd +=","+box.getInt("appDtId"+i);
					}
				}
			}
		}*/
		int i=1;
		appIdsd=""+box.getInt("appDetailId"+i);
		String checkboxArray = box.getString("checkboxArray");
		String[]strArr=checkboxArray.split(",");
		List<Integer>appIntIdsd=new ArrayList<Integer>();
		if(strArr.length>0){
			for(String str:strArr){
				if(!str.equals(""))
				appIntIdsd.add(Integer.parseInt(str.trim()));
			}
		}
		String sqlStr = "";
		Criteria criteria=null;
		if(box.getString("flag").equals("beforeSave")){
			if(appIntIdsd.size()>0)
			{
				criteria=session.createCriteria(InjAppointmentDetails.class).add(Restrictions.in("Id", appIntIdsd)).addOrder(Order.asc("Id"));
				injectionList =criteria.list();
			}
		}else if(box.getString("flag").equals("afterSave")){
				criteria=session.createCriteria(InjAppointmentDetails.class)
				.add(Restrictions.eq("InjAppointmentHeader.Id", box.getInt("appointmentId")))
				.add(Restrictions.eq("Status", "p").ignoreCase());
			injectionList =criteria.list();
		}
		
		// session.createQuery(sqlStr).list();
		map = getDetailsForProcWaitList(box.getInt("hospitalId"),0);
		map.put("injectionList", injectionList);
		return map;
	}
	@Override
	public Map<String, Object> issueInjectionFromReception(Box box) {

		Map<String,Object> map = new HashMap<String, Object>();
		boolean flag = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx = null;
		Session session = (Session)getSession();
		int dmaHeaderId = box.getInt("dmaHeaderId");

		try {
			tx = session.beginTransaction();
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			Patient patient = new Patient();
			patient.setId(box.getInt(HIN_ID));

			/**
			* Saving Data in StoreOpPatientIssueM
			*/
			StoreOpPatientIssueM storeOpPatientIssueM =  new StoreOpPatientIssueM();
			List opdIssueNo = new ArrayList();
			opdIssueNo = session.createQuery("select syd from StoreFyDocumentNo as syd where syd.Department.Id="+ box.getInt("deptId")).list();
			String opdIssueNoFromDB = "";
			String opdIssuenoIncremented = "";
			StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
			if(opdIssueNo.size() > 0){
				storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
				opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
				storeFyDocumentNo.setOpdIssueNo(opdIssuenoIncremented);
				hbt.update(storeFyDocumentNo);
			}else {
				opdIssuenoIncremented = getMaxNo("");
				storeFyDocumentNo.setOpdIssueNo(opdIssuenoIncremented);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(box.getInt("deptId"));
				storeFyDocumentNo.setDepartment(masDepartment);
				hbt.save(storeFyDocumentNo);
				hbt.refresh(storeFyDocumentNo);

			}

			MasDepartment department = new MasDepartment();
			department.setId(box.getInt("deptId"));
			storeOpPatientIssueM.setDepartment(department);
			storeOpPatientIssueM.setHospital(masHospital);

			storeOpPatientIssueM.setIssueType("I");
			//storeOpPatientIssueM.setTypeOfIssue("P");
			storeOpPatientIssueM.setHin(patient);
			storeOpPatientIssueM.setServiceNo(box.getString(SERVICE_NO));

			storeOpPatientIssueM.setIssueNo(opdIssuenoIncremented);
			storeOpPatientIssueM.setIssueDate(new Date());
			storeOpPatientIssueM.setStatus("y");
			storeOpPatientIssueM.setLastChgBy(new Users(box.getInt("userId")));
			storeOpPatientIssueM.setLastChgDate(new Date());
			storeOpPatientIssueM.setLastChgTime(box.getString(CHANGED_TIME));
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			patientPrescriptionHeader.setId(box.getInt("prescriptionHeaderId"));
			storeOpPatientIssueM.setPrescription(patientPrescriptionHeader);
			hbt.save(storeOpPatientIssueM);
			

			/**
			* End
			*/

			/**
			 * Saving Data in StoreOpPatientIssueT
			 */
			int counter = box.getInt("hdb");
			for (int i = 1; i < counter; i++) {
				if(box.getInt("issueQty"+i)!=0){
					
					MasStoreItem item = new MasStoreItem();
					item.setId(box.getInt(ITEM_ID+i));
					StoreItemBatchStock batchStock = new StoreItemBatchStock();
					batchStock.setId(box.getInt("batchId"+i));
					StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
					storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
					storeOpPatientIssueT.setItemIdRequire(item);
					storeOpPatientIssueT.setItemIdIssue(item);
					storeOpPatientIssueT.setBatchNo(box.getString("batchNo"+i));
					List<MasStoreBrand> masStoreBrandList=session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Item", item)).list();
					if(masStoreBrandList!=null && masStoreBrandList.size()>0){
						MasStoreBrand masStoreBrand=(MasStoreBrand)masStoreBrandList.get(0);
						storeOpPatientIssueT.setBrand(masStoreBrand);
					}
					if(!box.getString("expDate"+i).equals("")){
						Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(box.getString("expDate"+i));
						storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
					}
					storeOpPatientIssueT.setQtyIssued(new BigDecimal(box.getInt("issueQty"+i)));
					if(!box.getString("costPrice"+i).equals("")){
						storeOpPatientIssueT.setRate(new BigDecimal(box.getString("costPrice"+i)));
					}
					//storeOpPatientIssueT.setOpIssueType("");
					
					hbt.save(storeOpPatientIssueT);
				



					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, box.getInt("batchId"+i));
					BigDecimal issueStock = new BigDecimal(0);
					BigDecimal clStock = new BigDecimal(0);

					if(storeItemBatchStock.getClosingStock()!= null){
						clStock = storeItemBatchStock.getClosingStock();
					}
					if(storeItemBatchStock.getIssueQty()!= null){
						issueStock = storeItemBatchStock.getIssueQty();
					}
					storeItemBatchStock.setIssueQty(issueStock.add(new BigDecimal(box.getInt("issueQty"+i))));
					storeItemBatchStock.setClosingStock(clStock.subtract(new BigDecimal(box.getInt("issueQty"+i))));

					hbt.update(storeItemBatchStock);

				}
			}
		
			tx.commit();
			flag = true;
		}catch (Exception e) {
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}

		map.put("flag", flag);
		return map;
	}
	public String getMaxNo(String no) {
		String maxNo = "";
		String y1 = "";
		String y2 = "";
		String y3 = "";
		int tempMonth = 0;
		if ((no == null) || (no.equals("0"))) {
			no = "";
		}
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		String currentYear = "" + gregorianCalendar.get(Calendar.YEAR);
		try {
			if ((Integer.parseInt(currentYear.substring(2)) - 1) <= 9)
				y1 = "0" + (Integer.parseInt(currentYear.substring(2)) - 1);
			else
				y1 = "" + (Integer.parseInt(currentYear.substring(2)) - 1);

			if (Integer.parseInt(currentYear.substring(2)) <= 9)
				y2 = "0" + Integer.parseInt(currentYear.substring(2));
			else
				y2 = "" + Integer.parseInt(currentYear.substring(2));
			if ((Integer.parseInt(currentYear.substring(2)) + 1) <= 9)
				y3 = "0" + (Integer.parseInt(currentYear.substring(2)) + 1);
			else
				y3 = "" + (Integer.parseInt(currentYear.substring(2)) + 1);
		} catch (Exception e) {
				e.printStackTrace();
		}
		try {
			if (!no.equals("")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				tempMonth = Integer.parseInt(stringTokenizer.nextToken());
				tempMonth++;
				if (currentMonth < 4) {
					if (tempMonth < 10) {
						maxNo = "0" + tempMonth + "/" + y1 + "-" + y2;
					} else {
						maxNo = tempMonth + "/" + y1 + "-" + y2;
					}
				} else {
					if (tempMonth < 10) {
						maxNo = "0" + tempMonth + "/" + y2 + "-" + y3;
					} else {
						maxNo = tempMonth + "/" + y2 + "-" + y3;
					}
				}

			} else {
				if (currentMonth < 4) {
					maxNo = "01" + "/" + y1 + "-" + y2;
				} else {
					maxNo = "01" + "/" + y2 + "-" + y3;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return maxNo;
	}
	public Map<String, Object> saveInjectionRegisterDetails(Box box) {
		Map<String, Object> map =new HashMap<String, Object>();
		Session session = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTimeWithoutSc");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			InjectionRegister injectionRegister = new InjectionRegister();
		
			Patient patientInj = new Patient();
			patientInj.setId(box.getInt("hinId"));
			injectionRegister.setHin(patientInj);
			Visit visitInj = new Visit();
			visitInj.setId(box.getInt("visitId"));
			injectionRegister.setVisit(visitInj);
			MasHospital masHospitalInj = new MasHospital();
			masHospitalInj.setId(box.getInt("hospitalId"));
			injectionRegister.setHospital(masHospitalInj);
			
			injectionRegister.setStatus("p");
			injectionRegister.setLastChgTime(time);
			Users user = new Users();
			user.setId(box.getInt("userId"));
			injectionRegister.setLastChgBy(user);
			injectionRegister.setLastChgDate(date);
			injectionRegister.setRequisitionDate(date);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("moId"));
			injectionRegister.setInjectionDate(HMSUtil.convertStringTypeDateToDateType(box.getString("injDate")));
			injectionRegister.setInjectionTime(box.getString("injTime"));
			/*injectionRegister.setAllergicTesting(box.getString("allergicTesting"));
			injectionRegister.setAdverseReaction(box.getString("adverseReaction"));*/
			injectionRegister.setStatus("c");
			hbt.save(injectionRegister);
			
			// COMMENTED BY VINAY
			/*List<String>procedureIds= box.getArrayList("procedureId");
			String cTime=(String)HMSUtil.getCurrentDateAndTime().get("currentTime");
			for(String id:procedureIds){
				ProcedureDetails pd=(ProcedureDetails)hbt.load(ProcedureDetails.class, Integer.parseInt(id));
				pd.setStatus("Y");
				pd.setProcedureTime(cTime);
				pd.setProcedureDate(new Date());
				hbt.update(pd);
			}
			
			List<String>prescriptionIds= box.getArrayList("prescriptionId");
			for(String id:prescriptionIds){
				PatientPrescriptionDetails pd=(PatientPrescriptionDetails)hbt.load(PatientPrescriptionDetails.class, Integer.parseInt(id));
				pd.setNursingStatus("c");
				pd.setNursingDate(new Date());
				pd.setNursingTime(cTime);
				hbt.update(pd);
			}*/
			
			int injCount = box.getInt("injCount");
			for(int k=1;k<=injCount;k++){
				if(box.getInt("appDtId"+k)!=0){

					InjectionRegisterDetails injectionDetails = new InjectionRegisterDetails();
					
					injectionDetails.setDose(box.getString("dose"+k));
					MasFrequency frequency = new MasFrequency();
					frequency.setId(box.getInt("frequencyId"+k));
					injectionDetails.setFrequency(frequency);
					injectionDetails.setRoute(box.getString("route"+k));
					MasStoreItem item = new MasStoreItem();
					item.setId(box.getInt("injectionId"+k));
					injectionDetails.setItem(item);
					
					injectionDetails.setInjectionRegister(injectionRegister);
					injectionDetails.setNoOfDays(box.getInt("noOfDays"+k));
					hbt.save(injectionDetails);
					
					InjAppointmentDetails injAppointmentDetails = (InjAppointmentDetails)hbt.load(InjAppointmentDetails.class, box.getInt("appDetailId"+k));
					injAppointmentDetails.setStatus("c");
					hbt.update(injAppointmentDetails);
					
					/**
					* Saving Data in StoreOpPatientIssueM and StoreItemBatchStock
					*/
					
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					Patient patient = new Patient();
					patient.setId(box.getInt(HIN_ID));

					/**
					* Saving Data in StoreOpPatientIssueM
					*/
					
					
					StoreOpPatientIssueM storeOpPatientIssueM =  new StoreOpPatientIssueM();
					List opdIssueNo = new ArrayList();
					opdIssueNo = session.createQuery("select syd from StoreFyDocumentNo as syd where syd.Hospital.Id="+ box.getInt("hospitalId")+" and syd.Department.Id="+ box.getInt("deptId")).list();
					String opdIssueNoFromDB = "";
					String opdIssuenoIncremented = "";
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					if(opdIssueNo.size() > 0){
						storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
						opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
						opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
						storeFyDocumentNo.setOpdIssueNo(opdIssuenoIncremented);
						hbt.update(storeFyDocumentNo);
					}else {
						opdIssuenoIncremented = getMaxNo("");
						storeFyDocumentNo.setOpdIssueNo(opdIssuenoIncremented);
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(box.getInt("deptId"));
						storeFyDocumentNo.setDepartment(masDepartment);
						hbt.save(storeFyDocumentNo);
						hbt.refresh(storeFyDocumentNo);

					}

					MasDepartment department = new MasDepartment();
					department.setId(box.getInt("deptId"));
					storeOpPatientIssueM.setDepartment(department);
					storeOpPatientIssueM.setHospital(masHospital);

					storeOpPatientIssueM.setIssueType("I");
					//storeOpPatientIssueM.setTypeOfIssue("P");
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(box.getString(SERVICE_NO));

					storeOpPatientIssueM.setIssueNo(opdIssuenoIncremented);
					storeOpPatientIssueM.setIssueDate(new Date());
					storeOpPatientIssueM.setStatus("y");
					storeOpPatientIssueM.setLastChgBy(new Users(box.getInt("userId")));
					storeOpPatientIssueM.setLastChgDate(new Date());
					storeOpPatientIssueM.setLastChgTime(box.getString(CHANGED_TIME));
					PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
					patientPrescriptionHeader.setId(box.getInt("prescriptionHeaderId"));
					storeOpPatientIssueM.setPrescription(patientPrescriptionHeader);
					hbt.save(storeOpPatientIssueM);
					
					
					/**
					 * Saving Data in StoreOpPatientIssueT
					 */			
							
							
							StoreItemBatchStock batchStock = new StoreItemBatchStock();
							batchStock.setId(box.getInt("batchId"+k));
							StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
							storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
							storeOpPatientIssueT.setItemIdRequire(item);
							storeOpPatientIssueT.setItemIdIssue(item);
							storeOpPatientIssueT.setBatchNo(box.getString("batchNo"+k));
							if(!box.getString("expDate"+k).equals("")){
								Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(box.getString("expDate"+k));
								storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
							}
							storeOpPatientIssueT.setQtyIssued(new BigDecimal(box.getInt("qtyIssued"+k)));
							
							List<MasStoreBrand> masStoreBrandList=session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Item", item)).list();
							if(masStoreBrandList!=null && masStoreBrandList.size()>0){
								MasStoreBrand masStoreBrand=(MasStoreBrand)masStoreBrandList.get(0);
								storeOpPatientIssueT.setBrand(masStoreBrand);
							}
						
							//storeOpPatientIssueT.setOpIssueType("");
							
							hbt.save(storeOpPatientIssueT);
						



							StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, box.getInt("batchId"+k));
							BigDecimal issueStock = new BigDecimal(0);
							BigDecimal clStock = new BigDecimal(0);

							if(storeItemBatchStock.getClosingStock()!= null){
								clStock = storeItemBatchStock.getClosingStock();
							}
							if(storeItemBatchStock.getIssueQty()!= null){
								issueStock = storeItemBatchStock.getIssueQty();
							}
							storeItemBatchStock.setIssueQty(issueStock.add(new BigDecimal(box.getInt("qtyIssued"+k))));
							storeItemBatchStock.setClosingStock(clStock.subtract(new BigDecimal(box.getInt("qtyIssued"+k))));
							hbt.update(storeItemBatchStock);

					
					
					
				}
			}
			if( box.getInt("appointmentHeaderId2")!=0){
				String pendingInj = "";
				List<InjAppointmentDetails> appointmentDetailsList = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "ph").add(Restrictions.eq("ph.Id", box.getInt("appointmentHeaderId2"))).list();
				List<InjAppointmentDetails> appointmentDetailsList2 = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "ph").add(Restrictions.eq("Status", "p").ignoreCase()).list();
				
				for (InjAppointmentDetails pDetails : appointmentDetailsList) {
					if(pDetails.getStatus().equalsIgnoreCase("p")){
						pendingInj = "yes";
						break;
					}
				}
				/*if(pendingInj.equals("")){
					InjAppointmentHeader appHeader = (InjAppointmentHeader)hbt.load(InjAppointmentHeader.class, box.getInt("appointmentHeaderId"));
					appHeader.setStatus("c");
					hbt.update(appHeader);
				}*/
				
				if(appointmentDetailsList2.size()==0){
					InjAppointmentHeader appHeader = (InjAppointmentHeader)hbt.load(InjAppointmentHeader.class, box.getInt("appointmentHeaderId2"));
					appHeader.setStatus("c");
					hbt.update(appHeader);
					hbt.flush();
				}
			}
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!=null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}
	
	@Override
	public Map<String, Object> saveInjectionAppointment(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		
		boolean flag = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTimeWithoutSc");
		Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
		Transaction tx = null;
		
		try {
			tx = session.beginTransaction();
			InjectionRegister injectionRegister = new InjectionRegister();
		
			Patient patientInj = new Patient();
			patientInj.setId(box.getInt("hinId"));
			injectionRegister.setHin(patientInj);
			Visit visitInj = new Visit();
			visitInj.setId(box.getInt("visitId"));
			injectionRegister.setVisit(visitInj);
			MasHospital masHospitalInj = new MasHospital();
			masHospitalInj.setId(box.getInt("hospitalId"));
			injectionRegister.setHospital(masHospitalInj);
			
			injectionRegister.setStatus("p");
			injectionRegister.setLastChgTime(time);
			Users user = new Users();
			user.setId(box.getInt("userId"));
			injectionRegister.setLastChgBy(user);
			injectionRegister.setLastChgDate(date);
			injectionRegister.setRequisitionDate(date);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("moId"));
			injectionRegister.setInjectionDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			injectionRegister.setInjectionTime(time);
			/*injectionRegister.setAllergicTesting(box.getString("allergicTesting"));
			injectionRegister.setAdverseReaction(box.getString("adverseReaction"));*/
			injectionRegister.setStatus("c");
			hbt.save(injectionRegister);
			
			// COMMENTED BY VINAY
			/*List<String>procedureIds= box.getArrayList("procedureId");
			String cTime=(String)HMSUtil.getCurrentDateAndTime().get("currentTime");
			for(String id:procedureIds){
				ProcedureDetails pd=(ProcedureDetails)hbt.load(ProcedureDetails.class, Integer.parseInt(id));
				pd.setStatus("Y");
				pd.setProcedureTime(cTime);
				pd.setProcedureDate(new Date());
				hbt.update(pd);
			}
			
			List<String>prescriptionIds= box.getArrayList("prescriptionId");
			for(String id:prescriptionIds){
				PatientPrescriptionDetails pd=(PatientPrescriptionDetails)hbt.load(PatientPrescriptionDetails.class, Integer.parseInt(id));
				pd.setNursingStatus("c");
				pd.setNursingDate(new Date());
				pd.setNursingTime(cTime);
				hbt.update(pd);
			}*/
			
			// add new Appointment for the injection/items here we are inserting row in AppointmentHeader Table
			
			InjAppointmentHeader injAppointmentHeader = new InjAppointmentHeader();
			//injAppointmentHeader.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("injAppDate")));
			injAppointmentHeader.setNextAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("injAppDate")));
			Patient patient = new Patient();
			patient.setId(box.getInt("hinId"));
			injAppointmentHeader.setHin(patient);
			Visit visit = new Visit();
			visit.setId(box.getInt("visitId"));
			injAppointmentHeader.setVisit(visit);
			injAppointmentHeader.setStatus("p");		
			injAppointmentHeader.setLastChgBy(user);
			injAppointmentHeader.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(box.getString(CHANGED_DATE)));
			injAppointmentHeader.setLastChgTime(box.getString(CHANGED_TIME));
			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			injAppointmentHeader.setHospital(hospital);
			PatientPrescriptionHeader prescriptionHeader = new PatientPrescriptionHeader();
			prescriptionHeader.setId(box.getInt("presHdId"));
			injAppointmentHeader.setPrescription(prescriptionHeader);
			hbt.save(injAppointmentHeader);
			/* Close InjectionAppointmentHeader table Code */
			
			
			
			int injCount = box.getInt("injCount");
			for(int k=1;k<=injCount;k++){
				if(box.getInt("appDtId"+k)!=0){

					InjectionRegisterDetails injectionDetails = new InjectionRegisterDetails();
					
					injectionDetails.setDose(box.getString("dose"+k));
					MasFrequency frequency = new MasFrequency();
					frequency.setId(box.getInt("frequencyId"+k));
					injectionDetails.setFrequency(frequency);
					injectionDetails.setRoute(box.getString("route"+k));
					MasStoreItem item = new MasStoreItem();
					item.setId(box.getInt("injectionId"+k));
					injectionDetails.setItem(item);
					
					injectionDetails.setInjectionRegister(injectionRegister);
					injectionDetails.setNoOfDays(box.getInt("noOfDays"+k));
					hbt.save(injectionDetails);
					
					
					// add Appointment Details for the injection/items here we are inserting row in AppointmentDetails Table
					
					InjAppointmentDetails injAppointmentDetails_i = new InjAppointmentDetails();
					injAppointmentDetails_i.setAppointmentTime(box.get("appTime"+box.getInt("appDetailId"+k)));
					injAppointmentDetails_i.setDose(box.getString("dose"+k));
					MasFrequency frequency1 = new MasFrequency();
					frequency1.setId(box.getInt("frequencyId"+k));
					injAppointmentDetails_i.setFrequency(frequency1);
					injAppointmentDetails_i.setRoute(box.getString("appRoute"+k));
					MasStoreItem item1 = new MasStoreItem();
					item1.setId(box.getInt("injectionId"+k));
					injAppointmentDetails_i.setItem(item1);
					injAppointmentDetails_i.setInjAppointmentHeader(injAppointmentHeader);
					injAppointmentDetails_i.setNoOfDays(box.getInt("noOfDays"+k));
					PatientPrescriptionDetails ptDetails =hbt.load(PatientPrescriptionDetails.class, box.getInt("presDtId"+k));
					
					injAppointmentDetails_i.setPrescriptionDetails(ptDetails);
					
					//injAppointmentDetails_i.setStatus("c");
					injAppointmentDetails_i.setStatus("p");
					hbt.save(injAppointmentDetails_i);
					/* Close InjectionAppointmentDetailstable Code */
					
					
					// update status in details table
					InjAppointmentDetails injAppointmentDetails = (InjAppointmentDetails)hbt.load(InjAppointmentDetails.class, box.getInt("appDetailId"+k));
					injAppointmentDetails.setStatus("c");
					hbt.update(injAppointmentDetails);
					
					/**
					* Saving Data in StoreOpPatientIssueM and StoreItemBatchStock
					*/
					
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					/*Patient patient = new Patient();
					patient.setId(box.getInt(HIN_ID));*/

					/**
					* Saving Data in StoreOpPatientIssueM
					*/
					
					
					StoreOpPatientIssueM storeOpPatientIssueM =  new StoreOpPatientIssueM();
					List opdIssueNo = new ArrayList();
					opdIssueNo = session.createQuery("select syd from StoreFyDocumentNo as syd where syd.Hospital.Id="+ box.getInt("hospitalId")+" and syd.Department.Id="+ box.getInt("deptId")).list();
					String opdIssueNoFromDB = "";
					String opdIssuenoIncremented = "";
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					if(opdIssueNo.size() > 0){
						storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo.get(0);
						opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
						opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
						storeFyDocumentNo.setOpdIssueNo(opdIssuenoIncremented);
						hbt.update(storeFyDocumentNo);
					}else {
						opdIssuenoIncremented = getMaxNo("");
						storeFyDocumentNo.setOpdIssueNo(opdIssuenoIncremented);
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(box.getInt("deptId"));
						storeFyDocumentNo.setDepartment(masDepartment);
						hbt.save(storeFyDocumentNo);
						hbt.refresh(storeFyDocumentNo);

					}

					MasDepartment department = new MasDepartment();
					department.setId(box.getInt("deptId"));
					storeOpPatientIssueM.setDepartment(department);
					storeOpPatientIssueM.setHospital(masHospital);

					storeOpPatientIssueM.setIssueType("I");
					//storeOpPatientIssueM.setTypeOfIssue("P");
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(box.getString(SERVICE_NO));

					storeOpPatientIssueM.setIssueNo(opdIssuenoIncremented);
					storeOpPatientIssueM.setIssueDate(new Date());
					storeOpPatientIssueM.setStatus("y");
					storeOpPatientIssueM.setLastChgBy(new Users(box.getInt("userId")));
					storeOpPatientIssueM.setLastChgDate(new Date());
					storeOpPatientIssueM.setLastChgTime(box.getString(CHANGED_TIME));
					PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
					patientPrescriptionHeader.setId(box.getInt("presHdId"));
					storeOpPatientIssueM.setPrescription(patientPrescriptionHeader);
					hbt.save(storeOpPatientIssueM);
					
					
					/**
					 * Saving Data in StoreOpPatientIssueT
					 */			
							
							
							StoreItemBatchStock batchStock = new StoreItemBatchStock();
							batchStock.setId(box.getInt("batchId"+k));
							StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
							storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
							storeOpPatientIssueT.setItemIdRequire(item);
							storeOpPatientIssueT.setItemIdIssue(item);
							storeOpPatientIssueT.setBatchNo(box.getString("batchNo"+k));
							if(!box.getString("expDate"+k).equals("")){
								Date expiryDateToInsert=HMSUtil.convertStringTypeDateToDateType(box.getString("expDate"+k));
								storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);
							}
							storeOpPatientIssueT.setQtyIssued(new BigDecimal(box.getInt("qtyIssued"+k)));
							
							List<MasStoreBrand> masStoreBrandList=session.createCriteria(MasStoreBrand.class).add(Restrictions.eq("Item", item)).list();
							if(masStoreBrandList!=null && masStoreBrandList.size()>0){
								MasStoreBrand masStoreBrand=(MasStoreBrand)masStoreBrandList.get(0);
								storeOpPatientIssueT.setBrand(masStoreBrand);
							}
						
							//storeOpPatientIssueT.setOpIssueType("");
							
							hbt.save(storeOpPatientIssueT);
						



							StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class, box.getInt("batchId"+k));
							BigDecimal issueStock = new BigDecimal(0);
							BigDecimal clStock = new BigDecimal(0);

							if(storeItemBatchStock.getClosingStock()!= null){
								clStock = storeItemBatchStock.getClosingStock();
							}
							if(storeItemBatchStock.getIssueQty()!= null){
								issueStock = storeItemBatchStock.getIssueQty();
							}
							storeItemBatchStock.setIssueQty(issueStock.add(new BigDecimal(box.getInt("qtyIssued"+k))));
							storeItemBatchStock.setClosingStock(clStock.subtract(new BigDecimal(box.getInt("qtyIssued"+k))));
							hbt.update(storeItemBatchStock);

					
					
					
				}
			}
			if( box.getInt("appointmentHeaderId2")!=0){
				String pendingInj = "";
				List<InjAppointmentDetails> appointmentDetailsList = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "ph").add(Restrictions.eq("ph.Id", box.getInt("appointmentHeaderId2"))).list();
				List<InjAppointmentDetails> appointmentDetailsList2 = session.createCriteria(InjAppointmentDetails.class).createAlias("InjAppointmentHeader", "ph").add(Restrictions.eq("Status", "p").ignoreCase()).list();
				
				for (InjAppointmentDetails pDetails : appointmentDetailsList) {
					if(pDetails.getStatus().equalsIgnoreCase("p")){
						pendingInj = "yes";
						break;
					}
				}
				/*if(pendingInj.equals("")){
					InjAppointmentHeader appHeader = (InjAppointmentHeader)hbt.load(InjAppointmentHeader.class, box.getInt("appointmentHeaderId"));
					appHeader.setStatus("c");
					hbt.update(appHeader);
				}*/
				
				if(appointmentDetailsList2.size()==0){
					InjAppointmentHeader appHeader = (InjAppointmentHeader)hbt.load(InjAppointmentHeader.class, box.getInt("appointmentHeaderId2"));
					appHeader.setStatus("c");
					hbt.update(appHeader);
					hbt.flush();
				}
			}
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			if(tx!=null){
				tx.rollback();
			}
			e.printStackTrace();
		}
		
		map.put("flag", flag);
		
		return map;
	}

	@Override
	public Map<String, Object> deleteOPDdetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		try{
			Transaction tx = null;
			boolean flag = false;
			HibernateTemplate hbt = getHibernateTemplate();
			tx=session.beginTransaction();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			String str=box.getString("for");
			String ids=box.getString("ids");
			int msg=0;
			//delete disease records
			/*if(str.equalsIgnoreCase("dis")){
				Integer id=Integer.parseInt(ids);
				PatientPrescriptionDetails patientPrescriptionDetails=hbt.load(PatientPrescriptionDetails.class, id);
				if(patientPrescriptionDetails!=null){
					hbt.delete(patientPrescriptionDetails);
					tx.commit();
					msg=1;
				}
			}*/
			
			
			if(str.equalsIgnoreCase("prc")){
				Integer id=Integer.parseInt(ids);
				PatientPrescriptionDetails patientPrescriptionDetails=hbt.load(PatientPrescriptionDetails.class, id);
				List<InjAppointmentDetails> appointmentDetails=session.createCriteria(InjAppointmentDetails.class)
												.add(Restrictions.eq("PrescriptionDetails", patientPrescriptionDetails)).list();
				for(InjAppointmentDetails inj:appointmentDetails){
					hbt.delete(inj);
				}	
				if(patientPrescriptionDetails!=null){
					hbt.delete(patientPrescriptionDetails);
					msg=1;
				}
			}
			//delete investigation records
			if(str.equalsIgnoreCase("Inv")){
				String[] idArr=ids.trim().split("-");
				
				Integer dgOrderDtId=Integer.parseInt(idArr[0]);
				Integer patientInvestigationDtId=Integer.parseInt(idArr[1]);
				Integer dgSampleDtId=Integer.parseInt(idArr[2]);
				
				PatientInvestigationDetails patientInvestigationDetails=hbt.load(PatientInvestigationDetails.class, patientInvestigationDtId);
				if(patientInvestigationDetails!=null){
					hbt.delete(patientInvestigationDetails);
					msg=1;
					
				}
				DgOrderdt dgOrderdt=hbt.load(DgOrderdt.class, dgOrderDtId);
				if(dgOrderdt!=null){
					hbt.delete(dgOrderdt);
					msg=1;
				}
				if(dgSampleDtId!=null &&  !dgSampleDtId.equals(0)){
					DgSampleCollectionDetails dgSampleCollectionDetails=hbt.load(DgSampleCollectionDetails.class, dgSampleDtId);
					if(dgSampleCollectionDetails!=null){
						hbt.delete(dgSampleCollectionDetails);
						msg=1;
						
					}
				}
			}
			
			map.put("flag",msg);
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> getICDListwithID(Map<String, Object> map) {
		List<MasIcd> itemList = new ArrayList<MasIcd>();
		Session session = (Session) getSession();
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String str = "%" + map.get("autoHint") + "%";
			/*
			 * String query = "from MasIcd as icd where icd.IcdName like '" +
			 * str + "' and Status='T'"; Query q = session.createQuery(query);
			 */
			if(map.get("icdCode")!=null){
				String icdCode = (String) map.get("icdCode");
				Criteria criteria = session.createCriteria(MasIcd.class, "icd")
						.add(Restrictions.eq("icd.IcdCode", icdCode).ignoreCase())
						.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
				List<MasIcd>mList=criteria.list();
				if(mList.size()>0){
					map.put("icd", mList.get(0));
				}
				
			}else{
				Criteria criteria = session.createCriteria(MasIcd.class, "icd")
						.add(Restrictions.like("icd.IcdName", str).ignoreCase())
						.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
				criteria.setFirstResult(0);
				criteria.setMaxResults(10);
				itemList = criteria.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}


	
	

	@Override
	public Map<String, Object> populateSecondOpinionForm(
			Map<String, Object> dataMap) {
		
		Map<String, Object> map=new HashMap<String, Object>();
		
		Session session=(Session) getSession();
		int secondOpinionId=0;
		
		secondOpinionId=(Integer)dataMap.get("secondOpinionId");
		
		List<OpdPatientSecondOpinion> secondOpenionList = new ArrayList<OpdPatientSecondOpinion>();
		Criteria crt=null;
		
		crt=session.createCriteria(OpdPatientSecondOpinion.class).add(Restrictions.eq("Id", secondOpinionId));
		
		secondOpenionList=crt.list();
		map.put("secondOpenionList", secondOpenionList);
		
		if(null !=secondOpenionList && secondOpenionList.size()>0){
			String provisionalDiagnosis = "";
			String finalDiagnosis = "";
			Set<OpdPatientDetails> opdPatientDetailSet = secondOpenionList.get(0).getVisit().getOpdPatientDetails();
			for (OpdPatientDetails opdPatientDetails : opdPatientDetailSet) {
				provisionalDiagnosis = opdPatientDetails.getProvisionalDiagnosis();
				finalDiagnosis = opdPatientDetails.getFinalDiagnosis();
			}
			
			map.put("provisionalDiagnosis", provisionalDiagnosis);
			map.put("finalDiagnosis", finalDiagnosis);
			
		}
		
		return map;
	}

	
	
	

	@Override
	public Map<String, Object> updatSecondOpinionPatient(Box box) {
		
		Map<String,Object> map=new HashMap<String,Object>();
		boolean status=false;
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		
		Transaction tnx=null;
		
		int secondOpinionId=box.getInt("secondOpinionId");
		int visitId=box.getInt("secondOpinionVisitId");
		String remarks=box.get("docRemark");
		
		Session session=(Session) getSession();
		
			List<OpdPatientSecondOpinion> patientsecondOpinion=new ArrayList<OpdPatientSecondOpinion>();
		
		Criteria crt=null;
		 crt=session.createCriteria(OpdPatientSecondOpinion.class)
				 .add(Restrictions.eq("OpinoinStatus", "p").ignoreCase())
				 .createAlias("Visit", "visit")
				 .add(Restrictions.eq("visit.VisitStatus", "a").ignoreCase());
		 patientsecondOpinion=crt.list();
		 
		 map.put("patientsecondOpinion", patientsecondOpinion);
		
		
		
		OpdPatientSecondOpinion opdPatientSecondOpinionObj=null;
		
		opdPatientSecondOpinionObj=(OpdPatientSecondOpinion) session.load(OpdPatientSecondOpinion.class, secondOpinionId);
		
		opdPatientSecondOpinionObj.setOpinoinNotes(remarks);
		opdPatientSecondOpinionObj.setOpinoinStatus("c");
		
		Visit visit=(Visit) session.load(Visit.class, visitId);
		visit.setVisitStatus("O");
		List<QueueManagment> queueList = session.createCriteria(QueueManagment.class).add(Restrictions.eq("Visit.Id", visitId)).list();
		
		
		
		try{
			tnx=session.beginTransaction();
			hbt.update(opdPatientSecondOpinionObj);
			hbt.update(visit);
			if(queueList.size()>0){
				QueueManagment queue = (QueueManagment)session.get(QueueManagment.class, queueList.get(0).getId());
				queue.setTokenStatus("O");
				hbt.update(queue);
			}
			tnx.commit();
			session.flush();
			status=true;
		}
		catch(Exception e){
			if(tnx!=null)
				tnx.rollback();
			e.printStackTrace();
		}
		map.put("status", status);
		
		return map;
	}
	
	@Override
	public Map<String, Object> getTemplate(Box box) {
		
		Map<String,Object> map=new HashMap<String,Object>();
		Session session = (Session) getSession();
		List<OpdTemplate> templateList = new ArrayList<OpdTemplate>();
		List<OpdTemplate> templateListForInvestigation = new ArrayList<OpdTemplate>();
		Integer deptId=0,hospitalId=0,doctId=0;
		String type="",from="";
		if(box.getInt("hospitalId")!=0){
			hospitalId =box.getInt("hospitalId");
		}
		if(box.getInt("deptId")!=0){
			deptId =box.getInt("deptId");
		}
		if(box.getString("type")!=null){
			type =box.getString("type");
		}
		if(box.getString("from")!=null){
			from =box.getString("from");
		}
		if (box.getInt("userId") != 0) {
			doctId = box.getInt("userId");
		}
		Criteria crt = session.createCriteria(OpdTemplate.class).addOrder(Order.asc("TemplateName")).createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId));
		Criteria crit = session.createCriteria(OpdTemplate.class).addOrder(Order.asc("TemplateName")).createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId));
	/*	if(type!=null && type.equalsIgnoreCase("local")){
			crt.add(Restrictions.eq("templateLocal", doctId)).add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.eq("TemplateType",from).ignoreCase());
			templateListForInvestigation=crt.list();
			map.put("templates", templateListForInvestigation);
			return map;
		}else if(type!=null && type.equalsIgnoreCase("global")){
			crt.add(Restrictions.isNull("Hospital.Id")).add(Restrictions.isNull("templateLocal")).add(Restrictions.eq("TemplateType",from).ignoreCase());
			crit.add(Restrictions.eq("Hospital.Id",hospitalId)).add(Restrictions.isNull("templateLocal")).add(Restrictions.eq("TemplateType",from).ignoreCase());
			templateList=crt.list();
			templateListForInvestigation=crit.list();
			templateListForInvestigation.addAll(templateList);
			map.put("templates", templateListForInvestigation);
			return map;
		}else{
			crt.add(Restrictions.eq("TemplateType",from).ignoreCase());
			crt.add(Restrictions.ne("templateLocal", doctId));
			templateListForInvestigation=crt.list();
			map.put("templates", templateListForInvestigation);
			return map;
		}*/
		if(type.contains("y")){
			crt.add(Restrictions.eq("TemplateType",from).ignoreCase());
				if(type.charAt(2)=='y' ){
					if(type.charAt(0)!='y' && type.charAt(1)!='y')
					crt.add(Restrictions.ne("templateLocal", doctId));
					templateList=crt.list();
					
				}
				else if( type!=null  && type.charAt(0)=='y' &&  type.charAt(1)=='y')
				{
					crt.add(Restrictions.or(Restrictions.eq("Hospital.Id",hospitalId), Restrictions.isNull("Hospital.Id")))
					.add(Restrictions.or(Restrictions.eq("templateLocal", doctId), Restrictions.isNull("templateLocal")));
					templateList=crt.list();
				}
				else if(type!=null && type.charAt(0)=='y'){
			    	crt.add(Restrictions.eq("templateLocal", doctId)).add(Restrictions.eq("Hospital.Id",hospitalId));
			    	templateList=crt.list();
				}
				else if(type!=null && type.charAt(1)=='y'){
					crt.add(Restrictions.or(Restrictions.eq("Hospital.Id",hospitalId), Restrictions.isNull("Hospital.Id")))
					.add(Restrictions.isNull("templateLocal"));	
					templateList=crt.list();
				}

		}

    map.put("templates", templateList);
	return map;
		
	}
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getDetailsForProcWaitList(int hospitalId, int visitId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasNursingCare> procedureList = new ArrayList<MasNursingCare>();
		Session session = (Session)getSession();
		
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		doctorList = session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status", "y")).createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId)).createAlias("EmpCategory", "ec")
						.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
						.addOrder(Order.asc("FirstName")).list();
		procedureList = session.createCriteria(MasNursingCare.class)
						.add(Restrictions.eq("Status", "y"))
						/*.add(Restrictions.eq("NursingType", "p").ignoreCase())*/
						.addOrder(Order.asc("NursingName")).list();
		
		List<ProcedureHeader> pendingProcList = new ArrayList<ProcedureHeader>();
		Date fromDate = new Date();
		Date toDate =  new Date();
		
		pendingProcList = session.createCriteria(ProcedureDetails.class)
						.createAlias("ProcedureHeader", "ph")
						.createAlias("ph.Hospital", "h")
						.createAlias("ph.Visit", "v")
						.add(Restrictions.eq("v.Id", visitId))
						.add(Restrictions.eq("h.Id", hospitalId))
						/*.add(Restrictions.between("ph.RequisitionDate", fromDate, toDate))*/.list();
		
		map.put("doctorList", doctorList);
		map.put("procedureList", procedureList);		
		map.put("pendingProcList", pendingProcList);
		return map;
	}
	
	@Override
	public Map<String, Object> getRouteAutoList(Map<String, Object> map) {
		Session session = (Session) getSession();
		try{
			String str = "%" + map.get("autoHint") + "%";
			List<RouteOfAdministration>routeOfAdministrations= session.createCriteria(RouteOfAdministration.class)
										.add(Restrictions.like("RouteName", str).ignoreCase())
										.list();
			map.put("routList", routeOfAdministrations);
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	//VK
	@SuppressWarnings({ "unused", "unchecked" })
	public Map<String, Object> getOPClinicalReadViewList(Map map) {

		Session session = (Session) getSession();
		List<MasServiceCentreCounter> serviceCentreCounterList = null; // added by amit das on 31-05-2017
		MasHospital masHospital = null; // added by amit das on 31-05-2017
		int deptId = 0;
		int hospitalId=0;
		int searchFlag=0;
		String patientName="";
		String uhid="";
		Integer empId=null;
		Integer tokenNo=0;
		if(map.get("patientName")!=null){
			patientName =(String) map.get("patientName");
		}
		if(map.get("uhid")!=null){
			uhid =(String) map.get("uhid");
		}
		if(map.get("tokenNo")!=null){
			tokenNo =(Integer) map.get("tokenNo");
		}
		if (map.get("deptId") != null) {
			deptId = (Integer) map.get("deptId");
		}
		if (map.get("hospitalId") != null) {
			hospitalId = (Integer) map.get("hospitalId");
		}
		if (map.get("emp") != null) {
			empId = (Integer) map.get("emp");
		}
		
		
		
		Date date = new Date();
		try {
			List<Visit> visitList = new ArrayList<Visit>();
			Criteria crt = session.createCriteria(Visit.class)
					.add(Restrictions.eq("VisitDate", date))
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("VisitStatus", "c").ignoreCase())
					//.add(Restrictions.eq("Doctor.Id", empId))
					.add(Restrictions.eq("Hospital.Id", hospitalId)) 	
					//.addOrder(Order.asc("PriorityNumber"))					
					//.addOrder(Order.asc("TokenNo"));
					.addOrder(Order.asc("OpVisitTime"));
			

			// added by amit das on 19-04-2016
		    serviceCentreCounterList = session.createCriteria(MasServiceCentreCounter.class).add(Restrictions.eq("Status","y").ignoreCase()).add(Restrictions.eq("Department.Id",deptId)).add(Restrictions.eq("Hospital.Id",hospitalId)).list();
			serviceCentreCounterList.addAll(session.createCriteria(Users.class).setProjection(Projections.property("CurrentCounter")).add(Restrictions.eq("Id", empId)).add(Restrictions.isNotNull("CurrentCounter")).list());
			masHospital = (MasHospital) session.get(MasHospital.class, hospitalId);
						
			
			
			if(patientName!=null && !patientName.equals("")){
				crt.createAlias("Hin", "patient").add(Restrictions.like("patient.PFirstName", "%"+patientName+"%").ignoreCase());
			}
			if(uhid!=null && !uhid.equals("")){
				crt.createAlias("Hin", "patient").add(Restrictions.eq("patient.HinNo", uhid));
			}
			if(tokenNo!=null && tokenNo!=0){
				crt.add(Restrictions.eq("TokenNo", tokenNo));
			}
			
			visitList=crt.list();
			map.put("visitList", visitList);
		
			// added by amit das on 31-05-2017
			map.put("serviceCentreCounterList", serviceCentreCounterList);
			map.put("masHospital", masHospital);
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		
		return map;
	}
	
	
	@Override
	public Map<String, Object> removeCantraDisease(Map<String, Object> map) {
		Session session = (Session) getSession();
		try{
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			String str = "";
			List<Integer>ids=new ArrayList<Integer>();
			if(map.get("ids")!=null){
				str=(String)map.get("ids");
				for(String id:str.split(",")){
					ids.add(Integer.parseInt(id));
				}
			}
			List<CantraIndicativeDrugsToDeasease>deaseases=session.createCriteria(CantraIndicativeDrugsToDeasease.class)
					.add(Restrictions.in("Id", ids)).list();
			hbt.deleteAll(deaseases);
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> removeCantraDrugs(Map<String, Object> map) {
		Session session = (Session) getSession();
		try{
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			String str = "";
			List<Integer>ids=new ArrayList<Integer>();
			if(map.get("ids")!=null){
				str=(String)map.get("ids");
				for(String id:str.split(",")){
					ids.add(Integer.parseInt(id));
				}
			}
			List<CantraIndicativeDrugsToDrugs>drugsToDrugs=session.createCriteria(CantraIndicativeDrugsToDrugs.class)
					.add(Restrictions.in("Id", ids)).list();
			hbt.deleteAll(drugsToDrugs);
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getBedStatus(int deptId, int hospitalId) {
		Session session=(Session)getSession();
		List<MasBed>bedList=new ArrayList<MasBed>();
		Map<String,Object>map=new HashMap<String,Object>();
		bedList=session.createCriteria(MasBed.class)
				.add(Restrictions.eq("Department.Id",deptId))
				.add(Restrictions.eq("Hospital.Id",hospitalId))
				.add(Restrictions.eq("BedType","p").ignoreCase())
				.list();
		map.put("bedList",bedList);
		return map;
	}
	
	@Override
	public Map<String, Object> getLoincSnomedList(Map<String, Object> map) {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		String labText=(String)map.get("labText");
		Integer departmentId =(Integer)map.get("departmentId");
		Session session = (Session) getSession();
		if(labText!=null && !labText.equals("")){
			MasChargeCode	mcc=(MasChargeCode)session.load(MasChargeCode.class,Integer.parseInt(labText));
			String mcCode=""; 
			if(mcc!=null){
				mcCode=mcc.getChargeCodeCode();
				if(!mcCode.equals("")){
					List<LoincSnomed>list=session.createCriteria(LoincSnomed.class)
							.add(Restrictions.like("Loinc",mcCode+"%"))
							/*.createAlias("Department", "dept")
							.add(Restrictions.eq("dept.Id", departmentId))*/
							.list();
					map.put("loincSnomedList", list);
				}
				
			}
		}
		return map;
	}
	
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getSnomedList(Map<String, Object> map) {
		List<Sct2Description> itemList = new ArrayList<Sct2Description>();
		Session session = (Session) getSession();
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String str = "%"+map.get("autoHint")+"%";
		
			 /*String query = "from MasIcd as icd where icd.IcdName like '" +
			 str + "' and Status='T'"; 
			 Query q = session.createQuery(query);*/
			
			
				Criteria cr = session.createCriteria(Sct2Description.class);
				 cr = cr.add(Restrictions.eq("Active", 1));
				 cr = cr.add(Restrictions.eq("Typeid", Long.valueOf("900000000000003001")));
				 cr = cr.add(Restrictions.like("Term", str+"%(disorder)%").ignoreCase());
				 cr = cr.add(Restrictions.like("Term", str).ignoreCase());				 
				 cr = cr.addOrder(Order.asc("Term"));
				// cr = cr.add(Restrictions.like("Term", "%(disorder)%"));
				 
				cr.setFirstResult(0);
				cr.setMaxResults(500);
				itemList = cr.list();
				
				
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String, Object> getICDListBasedOnSnomedId(Map<String, Object> map) {
		List<MasIcd> icdList = new ArrayList<MasIcd>();
		Session session = (Session) getSession();
		int totalRecords =0;
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			long snomedId= (Long) map.get("snomedId");
			//String str = "%" + map.get("autoHint") + "%";
		
			 /*String query = "from MasIcd as icd where icd.IcdName like '" +
			 str + "' and Status='T'"; 
			 Query q = session.createQuery(query);*/
			
			
				Criteria cr = session.createCriteria(MasIcd.class);
				cr= cr.add(Restrictions.eq("SnomedConceptId", snomedId));
				
				icdList = cr.list();
			    totalRecords = icdList.size();
				
			    if(totalRecords==0){
			    	cr = session.createCriteria(MasIcd.class).add(Restrictions.like("IcdName", "Not Specified").ignoreCase());
			    	icdList = cr.list();
			    }
			    
				
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("icdList", icdList);
		map.put("totalRecords", totalRecords);
		
		return map;
	}
	@SuppressWarnings("unchecked")
	public Map<String, Object> getInvestigationListForAutoComplete1(Map mapForDS) {
		List<MasChargeCode> chargeList = new ArrayList<MasChargeCode>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<Integer> chargeCodeIdList = new ArrayList<Integer>();
		List<DgMasInvestigation> masInvestigationList = new ArrayList<DgMasInvestigation>();
		
		String department = "";
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties"); 
		try {
			Properties prop = new Properties();
			prop.load(new FileInputStream(new File(resourcePath.getFile())));
			department = prop.getProperty("otDepartment");
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			Criteria crit;
			// int deptId=(Integer)mapForDS.get("deptId");
			String str = "%" + mapForDS.get("autoHint") + "%";
			/*String labradiologyCheck=(String)mapForDS.get("labradiologyCheck");
			System.out.println(str+"jhdegde"+labradiologyCheck);*/

				/*crit = session						
						.createCriteria(MasChargeCode.class)
						.createAlias("Department", "dept")
						.add(Restrictions.like("ChargeCodeName", str).ignoreCase())
						.add(Restrictions.eq("Status", "y").ignoreCase())
						// .add(Restrictions.eq("Status", "y").ignoreCase()) // added by amit das on 20-09-2016
					.add(Restrictions.eq("dept.DepartmentCode", department));*/
			crit = session						
					.createCriteria(MasChargeCode.class)
					.createAlias("MainChargecode", "mcc")
					.add(Restrictions.like("ChargeCodeName", str).ignoreCase())
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("mcc.MainChargecodeName", "operation").ignoreCase());
				
				//crit.setProjection(Projections.projectionList().add(Projections.groupProperty("ChargeCode")));
				chargeList = crit.list();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("chargeList", chargeList);
		return map;
	}

	@Override
	public Map<String, Object> getTodayOtherPrescription(int hinId, int visitId) {
		List<Visit>visitList=new ArrayList<Visit>();
		List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
		Session session=(Session)getSession();
		visitList=session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).add(Restrictions.eq("Hin.Id",hinId)).add(Restrictions.eq("VisitDate",new Date())).list();
		List<Integer>visitIdList=new ArrayList<Integer>();
		Map<String, Object> map=new HashMap<String, Object>();
		for(Visit visit:visitList){
			visitIdList.add(visit.getId());
		}
		if(visitIdList.size() > 0)
			ppdList=session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "Prescription").add(Restrictions.in("Prescription.Visit.Id",visitIdList))
			           .add(Restrictions.isNotNull("Item"))
			.list();
		map.put("ppdList",ppdList);
		return map;
	}
	@Override
	public Map<String, Object> getItemForAllergy(String itemCode, int visitId) {
		Session session=(Session)getSession();
		int itemId=0;
		String val="";
		itemId=getItemId1(itemCode);
		String itemName="";
		itemName=getItemName(itemId);
		List<Visit>visitList=new ArrayList<Visit>();
		visitList=session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
		int hinId=0;
		for(Visit visit:visitList){
			hinId=visit.getHin().getId();
		}
		List<OpdPatientAllergyT>allergyTList=new ArrayList<OpdPatientAllergyT>();
		allergyTList=session.createCriteria(OpdPatientAllergyT.class).createAlias("OpdPatientAllergy","OpdPatientAllergy").add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
				//.add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
				.add(Restrictions.eq("Status", 'y').ignoreCase())
				.list();
		Map<String,Object>map=new HashMap<String,Object>();
		map.put("allergyTList", allergyTList);
		boolean matched=false;
		for(OpdPatientAllergyT OpdPatientAllergyT:allergyTList){
			
			//if(itemName.contains(OpdPatientAllergyT.getAllergen())){
				if(itemName.toLowerCase().contains(OpdPatientAllergyT.getAllergen().toLowerCase())){
					matched=true;
					break;
				}
			//}
			
		}
		map.put("matched",matched);
		return map;
	}
	public int getItemId1(String itemName) {
		int itemId = 0;
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String item1[] = itemName.split("\\[");
		if(item1.length>1 &&  item1[1]!=null){
			String item11[] = item1[1].split("]");
			String item111 = item11[0];
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", item111)).list();
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();
			}
		}
		return itemId;
	}
	

	public String getItemName(int itemCode) {
		String itemName ="";
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		
		itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("Id", itemCode)).list();

		for (MasStoreItem masStoreItem : itemList) {
			itemName = masStoreItem.getNomenclature();
		}

		return itemName;
	}


		public Map<String, Object> showGroupAndParameterValuesNew(Map map) {
		List<MasSpecialityDeptGroup> masForGorupParameter=new ArrayList<MasSpecialityDeptGroup>();
		List<MasSpecialityDeptGroupValue> masValue=new ArrayList<MasSpecialityDeptGroupValue>();
		List<MasSpecialtyGroupParameter> groupParameterList=new ArrayList<MasSpecialtyGroupParameter>();
		List<MasMaritalStatus>maritalStatusList = new ArrayList<MasMaritalStatus>();
		List<MasQualification>educationList = new ArrayList<MasQualification>();
		List<MasReligion>religionList = new ArrayList<MasReligion>();
		List<MasOccupation>occupationList = new ArrayList<MasOccupation>();
		List<Integer> deptGorupParameterIdList=new ArrayList<Integer>();
		List<Integer> deptGorupParameterIdListForGrid=new ArrayList<Integer>();
		List<MasSpecialityDeptGroup> deptGorupParameterGridList=new ArrayList<MasSpecialityDeptGroup>();
		List<Object[]> groupList=new ArrayList<Object[]>();
		List<MasSpecialityDeptGroupValue> masValueForGrid=new ArrayList<MasSpecialityDeptGroupValue>();
		List<Patient> patientList=new ArrayList<Patient>();
		Session session = (Session)getSession();
		int idForValue=0;
		int departId=(Integer)map.get("deptId");
		int template=(Integer)map.get("template");
		String specialtyType = "";
		if(map.get("specialtyType")!=null){
		specialtyType = (String)map.get("specialtyType");
		}
		int hinId = 0;
		if(map.get("hinId") != null){
			hinId = (Integer)map.get("hinId");
		}
		int visitId = 0;
		if(map.get("visitId") != null){
			visitId = (Integer)map.get("visitId");
		}
		List<Object[]> headingList=new ArrayList<Object[]>();
		if(template!=0){
		Criteria crForGroupParameter=getSession().createCriteria(MasSpecialityDeptGroup.class,"mas")
		.createAlias("mas.Department", "dep")
		//.add(Restrictions.eq("dep.Id",departId))
		.createAlias("mas.Template", "tem")
		.add(Restrictions.eq("tem.Id",template)) .add(Restrictions.eq("Grid", "n"))
		.addOrder(Order.asc("GroupSeqNo")).addOrder(Order.asc("ParameterSeqNo")).add(Restrictions.eq("Status", "y").ignoreCase());
		
		if(specialtyType.equalsIgnoreCase("simple")){
		crForGroupParameter = crForGroupParameter.add(Restrictions.eq("SimpleFormType", "y").ignoreCase());
		}else if(specialtyType.equalsIgnoreCase("medium")){
		crForGroupParameter = crForGroupParameter.add(Restrictions.eq("MediumFormType", "y").ignoreCase());
		}else if(specialtyType.equalsIgnoreCase("complex")){
		crForGroupParameter = crForGroupParameter.add(Restrictions.eq("ComplexFormType", "y").ignoreCase());
		}
		
		
		masForGorupParameter=crForGroupParameter.list();
		
		 
		
		String qry = "SELECT p.* from (select DISTINCT on(msg.sp_group_name) sp_group_name,msg.sp_group_id, group_seq_no,display,dept.dept_group_id,dept.multiple_selection,dept.text_maxlength"
				+ " FROM mas_speciality_dept_group dept left join mas_specialty_group_parameter grpPara on dept.sp_group_id= grpPara.group_parameter_m_id"
				+ " left join mas_speciality_group msg on grpPara.sp_group_id=msg.sp_group_id where lower(dept.status) = 'y' and dept.template_id="+template+") p ORDER BY p.group_seq_no";
				groupList = session.createSQLQuery(qry).list();
		
		List<Integer> groupIds=new ArrayList<Integer>();
		for (MasSpecialityDeptGroup masSpecialityDeptGroup : masForGorupParameter) {
		groupIds.add(masSpecialityDeptGroup.getSpGroup().getSpGroup().getId());
		deptGorupParameterIdList.add(masSpecialityDeptGroup.getId());
		//idForValue=masSpecialityDeptGroup.getId();
		}
		Criteria gridCrit = null;
		
		gridCrit = session.createCriteria(MasSpecialityDeptGroup.class).add(Restrictions.eq("Template.Id",template)).add(Restrictions.eq("Status", "y").ignoreCase())
		.add(Restrictions.eq("Grid", "y")).addOrder(Order.asc("ParameterSeqNo"));
		
		if(specialtyType.equalsIgnoreCase("simple")){
		gridCrit = gridCrit.add(Restrictions.eq("SimpleFormType", "y").ignoreCase());
		}else if(specialtyType.equalsIgnoreCase("medium")){
		gridCrit = gridCrit.add(Restrictions.eq("MediumFormType", "y").ignoreCase());
		}else if(specialtyType.equalsIgnoreCase("complex")){
		gridCrit = gridCrit.add(Restrictions.eq("ComplexFormType", "y").ignoreCase());
		}
		
		deptGorupParameterGridList = gridCrit.list();
		
		
		if(groupIds.size()>0){
		headingList = session.createCriteria(MasSpecialityGroup.class).createAlias("SpHeading", "h").add(Restrictions.in("Id", groupIds))
		.setProjection(Projections.projectionList().add(Projections.property("h.SpHeadingOne")).add(Projections.property("h.SpHeadingTwo")).add(Projections.property("Id"))).list();
		
		
		groupParameterList=getSession().createCriteria(MasSpecialtyGroupParameter.class,"mas").createAlias("mas.SpGroup", "sgroup")
		.add(Restrictions.in("sgroup.Id", groupIds)).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		}
		
		if(masForGorupParameter.size()>0){
		Criteria crForParaValues=getSession().createCriteria(MasSpecialityDeptGroupValue.class,"masVal")
		.createAlias("masVal.DeptGroup", "deptGroup")
		//.add(Restrictions.eq("deptGroup.ValueType", "LOV").ignoreCase())
		.add(Restrictions.in("masVal.DeptGroup",masForGorupParameter)).addOrder(Order.asc("Id"));
		masValue=crForParaValues.list();
		}
		if(deptGorupParameterGridList.size()>0){
		for(MasSpecialityDeptGroup deptGroupForGrid : deptGorupParameterGridList){
		deptGorupParameterIdListForGrid.add(deptGroupForGrid.getId());
		}
		}
		if(deptGorupParameterIdListForGrid.size()>0){
		masValueForGrid = session.createCriteria(MasSpecialityDeptGroupValue.class).createAlias("DeptGroup", "deptGroup")
		//.add(Restrictions.eq("deptGroup.ValueType", "LOV").ignoreCase())
		.add(Restrictions.in("deptGroup.Id",deptGorupParameterIdListForGrid)).addOrder(Order.asc("Id")).list();
		
		}
		}
		maritalStatusList = session.createCriteria(MasMaritalStatus.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		educationList = session.createCriteria(MasQualification.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		religionList = session.createCriteria(MasReligion.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		occupationList = session.createCriteria(MasOccupation.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		
		patientList = session.createCriteria(Patient.class).add(Restrictions.idEq(hinId)).list();
		
		/*Object[] selectedStatus = {"V","Y"};
		List<DgResultEntryHeader>labResultForLeprosyPerforma = new ArrayList<DgResultEntryHeader>();
		labResultForLeprosyPerforma= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
				.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
				.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
		
		map.put("labResultForLeprosyPerforma",labResultForLeprosyPerforma);*/
		map.put("masForGorupParameter",masForGorupParameter);
		map.put("groupParameterList",groupParameterList);
		map.put("masValue",masValue);
		map.put("maritalStatusList",maritalStatusList);
		map.put("educationList",educationList);
		map.put("religionList",religionList);
		map.put("occupationList",occupationList);
		map.put("groupList",groupList);
		map.put("deptGorupParameterGridList",deptGorupParameterGridList);
		map.put("headingList", headingList);
		map.put("masValueForGrid", masValueForGrid);
		map.put("visitId", visitId);
		map.put("patientList", patientList);
		return map;
		}


	@Override
	public Map<String, Object> showGroupAndParameterValues(Map map) {
		List<MasSpecialityDeptGroup> masForGorupParameter=new ArrayList<MasSpecialityDeptGroup>();
		List<MasSpecialityDeptGroupValue> masValue=new ArrayList<MasSpecialityDeptGroupValue>();
		List<MasSpecialtyGroupParameter> groupParameterList=new ArrayList<MasSpecialtyGroupParameter>();
		List<MasMaritalStatus>maritalStatusList = new ArrayList<MasMaritalStatus>();
		List<MasQualification>educationList = new ArrayList<MasQualification>();
		List<MasReligion>religionList = new ArrayList<MasReligion>();
		List<MasOccupation>occupationList = new ArrayList<MasOccupation>();
		Session session = (Session)getSession();
		int idForValue=0;
    	int departId=(Integer)map.get("deptId");
    	 int template=(Integer)map.get("template");
    	 if(template!=0){
			Criteria crForGroupParameter=getSession().createCriteria(MasSpecialityDeptGroup.class,"mas")
				                      .createAlias("mas.Department", "dep")
				                       //.add(Restrictions.eq("dep.Id",departId))
				                      .createAlias("mas.Template", "tem")
				                     .add(Restrictions.eq("tem.Id",template))	
				                     .addOrder(Order.asc("GroupSeqNo")).addOrder(Order.asc("ParameterSeqNo")).add(Restrictions.eq("Status", "y").ignoreCase());
		masForGorupParameter=crForGroupParameter.list();
		
		List<Integer> groupIds=new ArrayList<Integer>();
		for (MasSpecialityDeptGroup masSpecialityDeptGroup : masForGorupParameter) {
			groupIds.add(masSpecialityDeptGroup.getSpGroup().getSpGroup().getId());
			//idForValue=masSpecialityDeptGroup.getId();
		}
		
		if(groupIds.size()>0){
		groupParameterList=getSession().createCriteria(MasSpecialtyGroupParameter.class,"mas").createAlias("mas.SpGroup", "sgroup")
                      .add(Restrictions.in("sgroup.Id", groupIds)).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		}
		
		if(masForGorupParameter.size()>0){
			Criteria crForParaValues=getSession().createCriteria(MasSpecialityDeptGroupValue.class,"masVal")
	                   .createAlias("masVal.DeptGroup", "deptGroup")
	                   .add(Restrictions.eq("deptGroup.ValueType", "LOV").ignoreCase())
	                   .add(Restrictions.in("masVal.DeptGroup",masForGorupParameter));
			 masValue=crForParaValues.list();
		}
      }	
    	 maritalStatusList = session.createCriteria(MasMaritalStatus.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
    	 educationList = session.createCriteria(MasQualification.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
    	 religionList = session.createCriteria(MasReligion.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
    	 occupationList = session.createCriteria(MasOccupation.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("masForGorupParameter",masForGorupParameter);
		map.put("groupParameterList",groupParameterList);
		map.put("masValue",masValue);
		map.put("maritalStatusList",maritalStatusList);
		map.put("educationList",educationList);
		map.put("religionList",religionList);
		map.put("occupationList",occupationList);
		return map;
	} 
	
	private String updateVisitAtLeanServer(Visit visit,MasHospital hospital) { 
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("table_constant.properties");
		Properties pacProper = new Properties();
		InputStream input;
		try {
			input = new FileInputStream(new File(resourcePath.getFile()));
			pacProper.load(input);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		//int port = Integer.parseInt(pacProper.getProperty("SERVER_PORT"));
		String uri = pacProper.getProperty("SERVER_URI_UPDATE_VISIT");
		//String host = pacProper.getProperty("SERVER_HOST");
		Parser parser = PipeParser.getInstanceWithNoValidation();
		HohClientSimple client = new HohClientSimple(hospital.getClientIp(),
				Integer.parseInt(hospital.getClientPort()), uri, parser);
		client.setResponseTimeout(6000000); 
		/*for(int i=0;i<=visitList.size();i++){
			Visit visit=visitList.get(i);
			QueueManagment queue=managements.get(i);*/
		try { 
			ca.uhn.hl7v2.app.Connection connection = null;
			try {   
				Date DOB = null;
				Date DOA = null;
				String TOA = null;
				String adtym = "";
				String doa_val = null; 
				 
						if (true)
						// if(mainCName.equalsIgnoreCase("Radiology Services"))
						{
							// Start creating message
							ADT_A01 adt1 = new ADT_A01(); 
							ORU_R01 message1 = new ORU_R01(); 
							ORU_R01_ORDER_OBSERVATION orderObservation = message1.getPATIENT_RESULT().getORDER_OBSERVATION();

							// Populate the MSH Segment
							MSH mshSegment = adt1.getMSH();
							  mshSegment.getMsh1_FieldSeparator().setValue("|");
						  	  mshSegment.getMsh2_EncodingCharacters().setValue("^~\\&"); 
							  mshSegment.getMsh3_SendingApplication().setValue("VISIT");
						  	  mshSegment.getMsh4_SendingFacility().setValue("RIH");
						  	  mshSegment.getMsh5_ReceivingApplication().setValue("HMS"); 
						  	  mshSegment.getMsh6_ReceivingFacility().setValue("EKG"); 
						  	  mshSegment.getMsh7_DateTimeOfMessage().getTimeOfAnEvent().setValue(now("yyyyMMdd")+now("Hmmss"));
						  	  mshSegment.getMsh9_MessageType().getCm_msg1_MessageType().setValue("ADT");
						  	  mshSegment.getMsh9_MessageType().getCm_msg2_TriggerEvent().setValue("A01"); 
						  	  //mshSegment.getMsh10_MessageControlID().setValue(""+visitId);
						  	  mshSegment.getMsh10_MessageControlID().setValue(""+123);
						  	  mshSegment.getMsh11_ProcessingID().setValue("P");
						  	  mshSegment.getMsh12_VersionID().setValue("2.2");
							 
							//DOB =patient.getDateOfBirth();
							//String date = convertDatetoString(DOB); 
							// Populate the PID Segment
							PID pid = adt1.getPID();  
						  	pid.getPid4_AlternatePatientID().setValue(visit.getHin().getHinNo());   
							PV1 pv1 = adt1.getPV1();  
							if(visit.getHospital()!=null){
								pv1.getPv110_HospitalService().setValue(visit.getHospital().getId()+"");
							}   
							pv1.getPv115_AmbulatoryStatus(0).setValue(visit.getVisitStatus()+""); 
							if(visit.getHin()!=null){
								pv1.getPv118_PatientType().setValue(visit.getHin().getId()+"");
							}  
							if(visit.getAddEditDate()!=null){
								pv1.getPv125_ContractEffectiveDate(0).setValue(visit.getAddEditDate()+"");
							}
							if(visit.getAddEditTime()!=null){
								pv1.getPv127_ContractPeriod(0).setValue(visit.getAddEditTime()+"");
							} 
							if(visit.getDepartment()!=null){
								pv1.getPv140_BedStatus().setValue(visit.getDepartment().getId()+"");
							} 
							if(visit.getVisitDate()!=null){ 
								pv1.getPv144_AdmitDateTime().getTimeOfAnEvent().setValue(convertDatetoString(visit.getVisitDate())+"");
							}if(visit.getVisitTime()!=null){
								pv1.getPv144_AdmitDateTime().getTs2_DegreeOfPrecision().setValue(visit.getVisitTime()+"");  
							}    
							// Populate the ORC
						 
							 // New  
							/*HapiContext context=new DefaultHapiContext();
							 String msg = "MSH|^~\\&|HIS|RIH|EKG|EKG|199904140038||ADT^A01||P|2.2\r"
					                  + "PID|0001|00009874|00001122|A00977|SMITH^JOHN^M|MOM|19581119|F|NOTREAL^LINDA^M|C|564 SPRING ST^^NEEDHAM^MA^02494^US|0002|(818)565-1551|(425)828-3344|E|S|C|0000444444|252-00-4414||||SA|||SA||||NONE|V1|0001|I|D.ER^50A^M110^01|ER|P00055|11B^M011^02|070615^BATMAN^GEORGE^L|555888^NOTREAL^BOB^K^DR^MD|777889^NOTREAL^SAM^T^DR^MD^PHD|ER|D.WT^1A^M010^01|||ER|AMB|02|070615^NOTREAL^BILL^L|ER|000001916994|D||||||||||||||||GDD|WA|NORM|02|O|02|E.IN^02D^M090^01|E.IN^01D^M080^01|199904072124|199904101200|199904101200||||5555112333|||666097^NOTREAL^MANNY^P\r"
					                  + "NK1|0222555|NOTREAL^JAMES^R|FA|STREET^OTHER STREET^CITY^ST^55566|(222)111-3333|(888)999-0000|||||||ORGANIZATION\r"
					                  + "PV1|0001|I|D.ER^1F^M950^01|ER|P000998|11B^M011^02|070615^BATMAN^GEORGE^L|555888^OKNEL^BOB^K^DR^MD|777889^NOTREAL^SAM^T^DR^MD^PHD|ER|D.WT^1A^M010^01|||ER|AMB|02|070615^VOICE^BILL^L|ER|000001916994|D||||||||||||||||GDD|WA|NORM|02|O|02|E.IN^02D^M090^01|E.IN^01D^M080^01|199904072124|199904101200|||||5555112333|||666097^DNOTREAL^MANNY^P\r"
					                  + "PV2|||0112^TESTING|55555^PATIENT IS NORMAL|NONE|||19990225|19990226|1|1|TESTING|555888^NOTREAL^BOB^K^DR^MD||||||||||PROD^003^099|02|ER||NONE|19990225|19990223|19990316|NONE\r"
					                  + "AL1||SEV|001^POLLEN\r"
					                  + "GT1||0222PL|NOTREAL^BOB^B||STREET^OTHER STREET^CITY^ST^77787|(444)999-3333|(222)777-5555||||MO|111-33-5555||||NOTREAL GILL N|STREET^OTHER STREET^CITY^ST^99999|(111)222-3333\r"
					                  + "IN1||022254P|4558PD|BLUE CROSS|STREET^OTHER STREET^CITY^ST^00990||(333)333-6666||221K|LENIX|||19980515|19990515|||PATIENT01 TEST D||||||||||||||||||02LL|022LP554";
							 Parser p = context.getGenericParser();

							Message hapiMsg2=p.parse(msg);*/
							
							ISendable sendable = new MessageSendable(adt1);
							
							 
							try {
								 IReceivable<Message> receivable =client.sendAndReceiveMessage(sendable); 
								 Message hapiMsg = receivable.getMessage();
								 String remoteHostIp = (String) receivable.getMetadata().get(MessageMetadataKeys.REMOTE_HOST_ADDRESS);

								// The parse method performs the actual parsing
								//hapiMsg = response_parser.parse(responseString);

								if (hapiMsg instanceof ACK) {
						       		  ACK ack = (ACK) hapiMsg;
						                
						        	  logger.info("Recieve acknowledge");
						                
						              logger.info("inside ach msh : "+ack.getMSH().getMsh7_DateTimeOfMessage().getTs1_TimeOfAnEvent());
						              logger.info("inside ach msh : "+ack.getMSH().getMsh9_MessageType().getCm_msg1_MessageType());
						              logger.info("inside ach msh :"+ack.getMSH().getMsh10_MessageControlID());
						              logger.info("inside ach msh :"+ack.getMSH().getMsh11_ProcessingID());
						              logger.info("inside ach msh "+ack.getMSH().getMsh12_VersionID());
						              logger.info("inside ach msa  :"+ack.getMSA().getMsa1_AcknowledgementCode().getValue());
						              logger.info("inside ach msa  :"+ack.getMSA().getMsa2_MessageControlID());
						              logger.info("inside ach msa  :"+ack.getMSA().getMsa3_TextMessage().getValue());
						              logger.info("inside ach err1 : "+ack.getERR().getErr1_ErrorCodeAndLocation(0).getCm_eld4_CodeIdentifyingError().getCe2_Text().getValue());
						              logger.info("inside ach err2 : "+ack.getERR().getErr1_ErrorCodeAndLocation(0).getCm_eld4_CodeIdentifyingError().getCe1_Identifier());
						              logger.info("inside ach err3 : "+ack.getERR().getErr1_ErrorCodeAndLocation(0).getCm_eld4_CodeIdentifyingError().getCe3_NameOfCodingSystem());
						                
						              if(ack.getMSA().getMsa1_AcknowledgementCode().getValue().equalsIgnoreCase("AA") 
						                   && ack.getMSA().getMsa3_TextMessage().getValue() == null 
						                   && ack.getERR().getErr1_ErrorCodeAndLocation(0).getCm_eld4_CodeIdentifyingError().getCe2_Text().getValue() == null)
						              {  
						                	//String sql = "UPDATE dg_orderdt SET  msg_sent='y' WHERE  orderhd_id = "+res.getInt("orderhd_id")+" and orderdt_id = "+res.getInt("orderdt_id");
						                	//int updateCount = st4.executeUpdate(sql); 
						              	
						                	// updateCount contains the number of updated rows 
						                
						                	//System.exit(0);
						                	  return "success";
						            
						              }	
						              
						          } else {
						        	  logger.info("exit");
								}
							} catch (EncodingNotSupportedException e) {
								e.printStackTrace();
								return "EncodingNotSupportedException";
							} catch (HL7Exception e) {
								e.printStackTrace();
								return "HL7Exception";
							}

							adtym = "";
						} else {
							 logger.info("Different Charge Code......");
						}
					 
				 
			} catch (Exception s) {
				 logger.error("SQL query does not execute: " + s.getStackTrace().toString());
			} finally { 
				// Close the connection and server
				// connection.close();
				client.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	/*}*/
		return "fail";
	}
	private String now(String dateFormat) {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
		return sdf.format(cal.getTime());
	}

	private String convertDatetoString(Date DOB) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		return sdf.format(DOB);
	}
	
	@Override
	public Map<String, Object> saveSpeciality(Map map,Box box) {
		MasSpecialtyTemplate masSpecialtyTemplate = null;
		try{
			Session session = (Session) getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			Integer visitId=0;
			Integer hospitalId=0;
			String templateName = "";
			int userId = 0;
			int hinId= 0;
			int qualificationId = 0;
			
			if(map.get("visitId")!=null){
				visitId=(Integer)  map.get("visitId");	
			}
			if(map.get("hinId")!=null){
				hinId=(Integer)  map.get("hinId");	
			}
			if(map.get("hospitalId")!=null){
				hospitalId=(Integer)  map.get("hospitalId");	
			}
			
			if(map.get("qualificationId")!=null){
				qualificationId=(Integer)  map.get("qualificationId");	
			}
			
			if(map.get("userId")!=null){
				userId=(Integer)  map.get("userId");	
			}
			
			if(map.get("templateName")!=null){
				templateName=(String)  map.get("templateName");	
			}
			
			OpdPatientDetails opdPatientDetails =null;
			if(map.get("opdPatientDetails")!=null){
				opdPatientDetails=(OpdPatientDetails)map.get("opdPatientDetails");
			}
			
			
			String time=(String)HMSUtil.getCurrentDateAndTime().get("currentTime");
			int count=box.getInt("cnt");
			List<String> selList = new ArrayList<String>();

			for (int i = 1; i <= count; i++) {
				OpdSpecialityTemplateDetails opdSpecialityTemplateDetails = new OpdSpecialityTemplateDetails();
				Vector parameterType = box.getVector("parameterType"+i);
				Vector para = box.getVector("parameter"+i);
				Vector valueType = box.getVector("valueType"+i);
				
				if(parameterType.size() > 0){
				Visit visit = new Visit();
				visit.setId(visitId);
				opdSpecialityTemplateDetails.setVisit(visit);
				opdSpecialityTemplateDetails.setTemplateName(templateName);
				opdSpecialityTemplateDetails.setParameterType((String)parameterType.get(0));
				if(para.size()>0){
					for(int k=0;k<para.size();k++){
						if(k==0){
							/*System.out.println("value Type===="+valueType.get(k));
							if(valueType.get(k).equals("multiple")){
								if(!box.getArrayList("select"+i).equals("")){
									selList = box.getArrayList("select"+i);
									String selVal = "";
									if(selList.size()>0){
										for (int j = 0; j < selList.size(); j++) {
											if(!selVal.equals("")){
												selVal.concat(", ");
											}
											selVal.concat(selList.get(j));
											
										}
									}
							}*/
							
							opdSpecialityTemplateDetails.setColoumn1((String)para.get(k));
						}
						if(k==1){
							
							opdSpecialityTemplateDetails.setColoumn2((String)para.get(k));
						}
						if(k==2){
							opdSpecialityTemplateDetails.setColoumn3((String)para.get(k));
						}
						if(k==3){
							
							opdSpecialityTemplateDetails.setColoumn4((String)para.get(k));
						}
						if(k==4){
							opdSpecialityTemplateDetails.setColoumn5((String)para.get(k));
						}
						if(k==5){
							
							opdSpecialityTemplateDetails.setColoumn6((String)para.get(k));
						}
						if(k==6){
							opdSpecialityTemplateDetails.setColoumn7((String)para.get(k));
						}
						if(k==7){
							opdSpecialityTemplateDetails.setColoumn8((String)para.get(k));
						}
						if(k==8){
							opdSpecialityTemplateDetails.setColoumn9((String)para.get(k));
						}
						if(k==9){
							opdSpecialityTemplateDetails.setColoumn10((String)para.get(k));
						}
						if(k==10){
							opdSpecialityTemplateDetails.setColoumn11((String)para.get(k));
						}
						if(k==11){
							opdSpecialityTemplateDetails.setColoumn12((String)para.get(k));
						}
						if(k==12){
							opdSpecialityTemplateDetails.setColoumn13((String)para.get(k));
						}
						if(k==13){
							opdSpecialityTemplateDetails.setColoumn14((String)para.get(k));
						}
						if(k==14){
							opdSpecialityTemplateDetails.setColoumn15((String)para.get(k));
						}
						if(k==15){
							opdSpecialityTemplateDetails.setColoumn16((String)para.get(k));
						}
						if(k==16){
							opdSpecialityTemplateDetails.setColoumn17((String)para.get(k));
						}
						if(k==17){
							opdSpecialityTemplateDetails.setColoumn18((String)para.get(k));
						}
						if(k==18){
							opdSpecialityTemplateDetails.setColoumn19((String)para.get(k));
						}
						if(k==19){
							opdSpecialityTemplateDetails.setColoumn20((String)para.get(k));
						}
						
					}
					hbt.save(opdSpecialityTemplateDetails);
					
				}
				
				/*if(!box.getArrayList("select"+i).equals("")){
					selList = box.getArrayList("select"+i);
					String selVal = "";
					if(selList.size()>0){
						for (int j = 0; j < selList.size(); j++) {
							if(!selVal.equals("")){
								selVal.concat(", ");
							}
							selVal.concat(selList.get(j));
							
						}
					}
					opdSpecialityTemplateDetails.setColoumn2(selVal);
					if(!box.getString("textValue"+i).equals("")){
						opdSpecialityTemplateDetails.setColoumn3(box.getString("textValue"+i));
					}
				}else{
					if(!box.getString("textValue"+i).equals("")){
						opdSpecialityTemplateDetails.setColoumn2(box.getString("textValue"+i));
					}
				}
				
				if(!box.getString("radioBtn"+i).equals("")){
					opdSpecialityTemplateDetails.setColoumn2(box.getString("radioBtn"+i));
				}*/
				}
			}
			OpdPatientDetails opPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetails.getId());
			opdPatientDetails.setTemplateName(templateName);
			hbt.update(opdPatientDetails);
			if(templateName.equalsIgnoreCase("Child And Adolescent")){
				Patient patient = (Patient)hbt.load(Patient.class, hinId);
				if(qualificationId != 0){
					MasQualification masQualification = new MasQualification();
					masQualification.setId(qualificationId);
					patient.setEducation(masQualification);
					hbt.update(patient);
				}
				
			}
			
			
			
			map.put("templateName", templateName); // added by amit das on 22-07-2016
			map.put("templateFlag", "Template");
			tx.commit();
		 
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	
	/*@Override
	public Map<String, Object> saveSpeciality(Map map,Box box) {
		MasSpecialtyTemplate masSpecialtyTemplate = null;
		try{
			Session session = (Session) getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			String[] parameterIds=(String[])map.get("parameterId");
			String[] textValue=(String[])map.get("textValue");
			String[] textValue1=(String[])map.get("textValue1");
			String[] grpIds=(String[])map.get("grpId");
			
			
			System.out.println("parameterIds--"+parameterIds.length);
			System.out.println("textValue--"+textValue.length);
			System.out.println("grpIds--"+grpIds.length);
			
			
			Integer hinId=0;
			Integer departmentId=0;
			Integer visitId=0;
			Integer hospitalId=0;
			Integer specialtyId=0;
			Integer userId=0;
			String templateName = "";
			if(map.get("hinId")!=null){
				hinId=(Integer)  map.get("hinId");	
			}
			if(map.get("departmentId")!=null){
				departmentId=(Integer)  map.get("departmentId");	
			}
			if(map.get("visitId")!=null){
				visitId=(Integer)  map.get("visitId");	
			}
			if(map.get("hospitalId")!=null){
				hospitalId=(Integer)  map.get("hospitalId");	
			}
			if(map.get("userId")!=null){
				userId=(Integer)  map.get("userId");	
			}
			
			if(map.get("specialtyId")!=null){
				specialtyId=(Integer)  map.get("specialtyId");	
			}
			if(map.get("templateName")!=null){
				templateName=(String)  map.get("templateName");	
			}
			int maritalStatusId = 0;
			if(map.get("maritalStatusId")!=null){
				maritalStatusId=(Integer)  map.get("maritalStatusId");	
			}
			int qualificationId = 0;
			if(map.get("qualificationId")!=null){
				qualificationId=(Integer) map.get("qualificationId");	
			}
			int religionId = 0;
			if(map.get("religionId")!=null){
				religionId=(Integer) map.get("religionId");	
			}
			int occupationId = 0;
			if(map.get("occupationId")!=null){
				occupationId=(Integer) map.get("occupationId");	
			}
			OpdPatientDetails opdPatientDetails =null;
			if(map.get("opdPatientDetails")!=null){
				opdPatientDetails=(OpdPatientDetails)map.get("opdPatientDetails");
				System.out.println("opdPatientDetails==111===="+opdPatientDetails);
			}
			
			
			String time=(String)HMSUtil.getCurrentDateAndTime().get("currentTime");
			int count=0;
			
			System.out.println("parameterIds = "+parameterIds.length);
			
	//		for(String str:parameterIds){
			for (int i = 0; i < parameterIds.length; i++) {
				
			
				String[] ids=str.split(":");
				Integer groupId=Integer.parseInt(ids[0]);
				Integer parameterId=Integer.parseInt(ids[1]);
				String paramterValue=textValue[count];
				Integer groupId=Integer.parseInt(grpIds[count].toString());
				Integer parameterId=Integer.parseInt(parameterIds[count].toString());
						
				String paramterValue1="";
				if(textValue1!=null && textValue1[count]!=null)
					paramterValue1 = textValue1[count];
				
				OpdSpecialityDetails opds=new OpdSpecialityDetails();
				opds.setHin(new Patient(hinId));
				opds.setVisit(new Visit(visitId));
				opds.setHospital(new MasHospital(hospitalId));
				opds.setSpGroup(new MasSpecialityGroup(groupId));
				opds.setSpParameter(new MasSpecialityParameter(parameterId));
				System.out.println("groupId==="+groupId);
				System.out.println("parameterId==="+parameterId);
				
				if(paramterValue.equalsIgnoreCase("radio")){
					opds.setSpValues("y");
				}else if(paramterValue.equalsIgnoreCase("checkbox")){
					opds.setSpValues("y");
				}else{
					opds.setSpValues(paramterValue);
					
				}
				//System.out.println(parameterId+"========paramterValue==="+paramterValue);
				if(paramterValue1!=null){
					opds.setSpValues2(paramterValue1);
				}
				
				masSpecialtyTemplate = (MasSpecialtyTemplate)session.get(MasSpecialtyTemplate.class,specialtyId); // added by amit das on 22-07-2016
				opds.setSpTemplate(masSpecialtyTemplate); // added by amit das on 22-07-2016
				//opds.setSpTemplate(new MasSpecialtyTemplate(specialtyId)); // commented by amit das on 22-07-2016
				opds.setLastChgBy(new Users(userId));
				opds.setLastChgDate(new Date());
				opds.setLastChgTime(time);
				hbt.save(opds);
				count = count+1;
			}
			
			OpdPatientDetails opPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetails.getId());
			opdPatientDetails.setTemplateName(templateName);
			hbt.update(opdPatientDetails);
			map.put("masSpecialtyTemplate", masSpecialtyTemplate); // added by amit das on 22-07-2016
//---------------------------------------------------Template STD Case Record---------------------------------------------
			if(templateName.trim().equalsIgnoreCase("STD Case Records")){
				if(!box.get("hinId").equals("")){
					Patient patient = (Patient)hbt.load(Patient.class, hinId);
					
				if(religionId != 0){
					MasReligion masReligion = new MasReligion();
					masReligion.setId(religionId);
					patient.setReligion(masReligion);
				}
				if(occupationId != 0){
					MasOccupation masOccupation = new MasOccupation();
					masOccupation.setId(occupationId);
					patient.setOccupation(masOccupation);
				}
				if(qualificationId != 0){
					MasQualification masQualification = new MasQualification();
					masQualification.setId(qualificationId);
					patient.setEducation(masQualification);
				}
				if(maritalStatusId != 0){
					MasMaritalStatus masMaritalStatus = new MasMaritalStatus();
					masMaritalStatus.setId(maritalStatusId);
					patient.setMaritalStatus(masMaritalStatus);
				}
					
					hbt.update(patient);
				}
			}
			
			
			
//---------------------------------------------------------------------------------------------------
			OpdGeneralProformaHeader opdGeneralProformaHeader = new OpdGeneralProformaHeader();
			
			opdGeneralProformaHeader.setTemplateName(box.getString("templateName"));
			
			if(box.getInt("opdPatientDetailId") != 0){
				int opdPatientDetailId =box.getInt("opdPatientDetailId");
				OpdPatientDetails opDetails = new OpdPatientDetails();
				opdPatientDetails.setId(opdPatientDetailId);
				opdGeneralProformaHeader.setOpdPatientDetails(opdPatientDetails);
				}
				if(!box.get("hinId").equals("")){
					//int hinId =Integer.parseInt(box.get("hinId"));
					Patient patient = new Patient();
					patient.setId(hinId);
					opdGeneralProformaHeader.setHin(patient);
				}
			
			hbt.save(opdGeneralProformaHeader);
			
			
			int primaryLesionCount = 0;
			if(box.getInt("primaryLesionCount") != 0){
				primaryLesionCount = box.getInt("primaryLesionCount");
			}
			
			for(int i=0;i<primaryLesionCount;i++){
				
				OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
				
				if(!box.getString("primaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setParameterName(box.getString("primaryLesion"+i));
				}
				if(!box.getString("primaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setLesion(box.getString("primaryLesion"+i));
				}
				if(!box.getString("primaryLesionNo"+i).equals("")){
					opdGeneralProformaDetail.setNumber(box.getString("primaryLesionNo"+i));
				}
				
				if(!box.getString("primaryLesionSite"+i).equals("")){
					opdGeneralProformaDetail.setSite(box.getString("primaryLesionSite"+i));
				}
				
				if(!box.getString("typeOfPrimaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setTypeOfLesion(box.getString("typeOfPrimaryLesion"+i));
				}
				if(!box.getString("primaryPigmentation"+i).equals("")){
					opdGeneralProformaDetail.setPigmentationStatus(box.getString("primaryPigmentation"+i));
				}
				if(!box.getString("primaryPigmentationValue"+i).equals("")){
					opdGeneralProformaDetail.setPigmentation(box.getString("primaryPigmentationValue"+i));
				}
				if(!box.getString("primaryCharacter"+i).equals("")){
					opdGeneralProformaDetail.setCharcter(box.getString("primaryCharacter"+i));
				}
				if(!box.getString("primaryBorder"+i).equals("")){
					opdGeneralProformaDetail.setBorder(box.getString("primaryBorder"+i));
				}
				if(!box.getString("primarySurface"+i).equals("")){
					opdGeneralProformaDetail.setSurface(box.getString("primarySurface"+i));
				}
				if(!box.getString("primarySmallestSize"+i).equals("")){
					opdGeneralProformaDetail.setSmallestSize(box.getString("primarySmallestSize"+i));
				}
				if(!box.getString("primaryLargestSize"+i).equals("")){
					opdGeneralProformaDetail.setLargestSize(box.getString("primaryLargestSize"+i));
				}
				if(!box.getString("hairOnPrimaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setHairOnLesion(box.getString("hairOnPrimaryLesion"+i));
				}
				if(!box.getString("primaryAggravatingFactors"+i).equals("")){
					opdGeneralProformaDetail.setAggravatingFactors(box.getString("primaryAggravatingFactors"+i));
				}
				opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
				
				opdGeneralProformaDetail.setFlag("Primary Lesion");
				opdGeneralProformaDetail.setStatus("y");
				
				hbt.save(opdGeneralProformaDetail);
			}
			
			int secondaryLesionCount = 0;
			if(box.getInt("secondaryLesionCount") != 0){
				secondaryLesionCount = box.getInt("secondaryLesionCount");
			}
			
			for(int i=0;i<secondaryLesionCount;i++){
				
				OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
				
				if(!box.getString("secondaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setParameterName(box.getString("secondaryLesion"+i));
				}
				if(!box.getString("secondaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setLesion(box.getString("secondaryLesion"+i));
				}
				if(!box.getString("secondaryLesionNo"+i).equals("")){
					opdGeneralProformaDetail.setNumber(box.getString("secondaryLesionNo"+i));
				}
				
				if(!box.getString("secondaryLesionSite"+i).equals("")){
					opdGeneralProformaDetail.setSite(box.getString("secondaryLesionSite"+i));
				}
				
				if(!box.getString("typeOfSecondaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setTypeOfLesion(box.getString("typeOfSecondaryLesion"+i));
				}
				if(!box.getString("secondaryPigmentation"+i).equals("")){
					opdGeneralProformaDetail.setPigmentationStatus(box.getString("secondaryPigmentation"+i));
				}
				if(!box.getString("secondaryPigmentationValue"+i).equals("")){
					opdGeneralProformaDetail.setPigmentation(box.getString("secondaryPigmentationValue"+i));
				}
				if(!box.getString("secondaryCharacter"+i).equals("")){
					opdGeneralProformaDetail.setCharcter(box.getString("secondaryCharacter"+i));
				}
				if(!box.getString("secondaryBorder"+i).equals("")){
					opdGeneralProformaDetail.setBorder(box.getString("secondaryBorder"+i));
				}
				if(!box.getString("secondarySurface"+i).equals("")){
					opdGeneralProformaDetail.setSurface(box.getString("secondarySurface"+i));
				}
				if(!box.getString("secondarySmallestSize"+i).equals("")){
					opdGeneralProformaDetail.setSmallestSize(box.getString("secondarySmallestSize"+i));
				}
				if(!box.getString("secondaryLargestSize"+i).equals("")){
					opdGeneralProformaDetail.setLargestSize(box.getString("secondaryLargestSize"+i));
				}
		
				if(!box.getString("hairOnSecondaryLesion"+i).equals("")){
					opdGeneralProformaDetail.setHairOnLesion(box.getString("hairOnSecondaryLesion"+i));
				}
				if(!box.getString("secondaryAggravatingFactors"+i).equals("")){
					opdGeneralProformaDetail.setAggravatingFactors(box.getString("secondaryAggravatingFactors"+i));
				}
				opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
				
				opdGeneralProformaDetail.setFlag("Secondary Lesion");
				opdGeneralProformaDetail.setStatus("y");
				
				hbt.save(opdGeneralProformaDetail);
			}
			
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}*/

	public void saveComorbidity(Map mapForDS,Map<Integer,Integer> savedIcdId){
		try{
			Session session = (Session) getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String consultationTime = (String) mapForDS.get("consultationTime");
			String consultationDate = (String) mapForDS.get("consultationDate");
			Date consultationDateToInsert = HMSUtil.convertStringTypeDateToDateType(consultationDate);

			
			int hinId = (Integer) mapForDS.get("hinId");
			int visitId = (Integer) mapForDS.get("visitId");
			int hospitalId = (Integer) mapForDS.get("hospitalId");
			String diagnosis_status = (String) mapForDS.get("diagnosis_status");
			
			String[] comorbidityArray = (String[]) mapForDS.get("comorbidityArray");
			List<String> comorbidityMonth = (List<String>) mapForDS.get("comorbidityMonth");
			List<String> comorbidityYear = (List<String>) mapForDS.get("comorbidityYear");
			List<String> comorbidityRemark = (List<String>) mapForDS.get("comorbidityRemark");
		
			if(comorbidityArray.length>0){
				List<String> finalComorBidityIds = new ArrayList<String>(Arrays.asList(comorbidityArray));
				int kk=0;
					if (comorbidityArray != null && comorbidityArray.length>0) {
						for (String strDiag : finalComorBidityIds) {
							Patient patientObj = new Patient(hinId);
							MasIcd masIcd = new MasIcd();
							int micIcd =0;
							int savedDiscIcd=0;
							DischargeIcdCode dischargeIcdCode=null;
							if (strDiag != null && !strDiag.equals("")) {
								Criteria criteria = session.createCriteria(MasIcd.class, "icd")
										.add(Restrictions.eq("icd.IcdCode", strDiag).ignoreCase())
										.add(Restrictions.eq("icd.Status", "Y").ignoreCase());
								List<MasIcd> mList = criteria.list();
								if (mList.size() > 0) {
									micIcd = mList.get(0).getId();
									if(savedIcdId.get(micIcd)!=null)
										savedDiscIcd=savedIcdId.get(micIcd);
								}
							}
							
							if(savedDiscIcd!=0){
								 dischargeIcdCode = (DischargeIcdCode)hbt.load(DischargeIcdCode.class, savedDiscIcd);
							}else{
								dischargeIcdCode=new DischargeIcdCode();
							}

							if(patientObj!=null && micIcd!=0){
								dischargeIcdCode.setHin(patientObj);
								masIcd.setId(micIcd);
								dischargeIcdCode.setIcd(masIcd);
								dischargeIcdCode.setAddEditDate(consultationDateToInsert);
								dischargeIcdCode.setAddEditTime(consultationTime);
								dischargeIcdCode.setStatus("Y");
								dischargeIcdCode.setDiagnosisStatus(diagnosis_status);
								dischargeIcdCode.setVisit(new Visit(visitId));
								dischargeIcdCode.setComorbidityStatus("Y");
								dischargeIcdCode.setHospital(new MasHospital(hospitalId));
								
								if(comorbidityRemark.size()>0 && comorbidityRemark.size()>=kk)
									dischargeIcdCode.setComorbidityRemark(comorbidityRemark.get(kk));
								if(comorbidityMonth.size()>0 && comorbidityMonth.size()>kk)
									dischargeIcdCode.setSinceMonth(comorbidityMonth.get(kk));
								if(comorbidityYear.size()>0 && comorbidityYear.size()>kk)
									dischargeIcdCode.setSinceYear(comorbidityYear.get(kk));
								if(savedDiscIcd!=0){
									hbt.update(dischargeIcdCode);
								}else{
									hbt.save(dischargeIcdCode);
								}
								kk++;
							}
							
						}
					}
			}
			
			
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	@Override
	public Map<String, Object> getdeadPatientDetails(Map<String,Object> map) {
		
		Map<String,Object> detailMap=new HashMap<String,Object>();
			Session session = (Session) getSession();
			
			String hinNo="";
			Integer hinId=0;
			Integer departmentId=0;
			Integer visitId=0;
			Integer hospitalId=0;
			int tsn = 0;
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			if(map.get("hinNo")!=null){
				hinNo=(String) map.get("hinNo");	
			}
			if(map.get("departmentId")!=null){
				departmentId=(Integer)  map.get("departmentId");	
			}
			if(map.get("visitId")!=null){
				visitId=(Integer)  map.get("visitId");	
			}
			if(map.get("hospitalId")!=null){
				hospitalId=(Integer)  map.get("hospitalId");	
			}
			String deathCertificateNo = "";
			int id = 0;
			
			List<Patient> patientList=new ArrayList<Patient>();
			List<ExpiryDetails> expiryDetailsList=new ArrayList<ExpiryDetails>();
			
			Criteria crt=null;
			 if(!hinNo.equals("")){
			 crt=session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", hinNo));
			 patientList=crt.list();
			 }
			 
			 String UHID="";
			 if(map.get("UHID")!=null){
				 UHID=(String) map.get("UHID");	
				
				}
			 
			 if(!UHID.equals("")){
			 crt=session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", UHID)).add(Restrictions.eq("PatientStatus", "Expired").ignoreCase());
			 patientList=crt.list();
			 for(Patient patient:patientList){
				 hinId=patient.getId();
				 
			 }
			 if(hinId>0){
				 crt=session.createCriteria(ExpiryDetails.class).createAlias("Hin", "Hin")
						 .add(Restrictions.eq("Hin.Id", hinId));
				 expiryDetailsList=crt.list();
				 detailMap.put("expiryDetailsList", expiryDetailsList);
			 }
			 
			 
			 }
			 List<TransactionSequence> deathCertificateNoList = new ArrayList<TransactionSequence>();

				deathCertificateNoList = session
						.createCriteria(TransactionSequence.class)
						.add(Restrictions.eq("TransactionPrefix", "DEA"))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.list();
				if(deathCertificateNoList.size()>0)
				{
				for (TransactionSequence transactionSequence : deathCertificateNoList) {
					tsn = Integer.parseInt(""
							+ transactionSequence.getTransactionSequenceNumber());
					id = transactionSequence.getId();
				}
				TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
						.load(TransactionSequence.class, id);
				transactionSequenceObj.setTransactionSequenceNumber(tsn + 1);
				deathCertificateNo = "" + (tsn + 1);
				}
				else{
					TransactionSequence transactionSequenceObj = new TransactionSequence();
					MasHospital hospital=new MasHospital();
					hospital.setId(hospitalId);
					transactionSequenceObj.setHospital(hospital);
					transactionSequenceObj.setTransactionPrefix("DEA");
					transactionSequenceObj.setStatus("y");
					transactionSequenceObj.setTransactionSequenceName("DiaryEntryNo");
					transactionSequenceObj.setTransactionSequenceNumber(1);
					transactionSequenceObj.setCreatedby("admin");
					hbt.save(transactionSequenceObj);
					deathCertificateNo = String.valueOf(1);
				}
				
				 detailMap.put("transactionId", id);
				 detailMap.put("deathCertificateNo", deathCertificateNo);
			 detailMap.put("patientList", patientList);
			
		
		return detailMap;
	}
	public boolean submitExpiryDetails(Map<String, Object> expiryDetilsMap) {
		boolean saved = false;
		ExpiryDetails expiryDetails = (ExpiryDetails) expiryDetilsMap
				.get("expiryDetails");
		int transactionId = (Integer) expiryDetilsMap.get("transactionId");
		int deathCertificateNo = (Integer) expiryDetilsMap
				.get("deathCertificateNo");
		int hinId = (Integer) expiryDetilsMap.get("hinId");
		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(expiryDetails);

			Patient patient = (Patient) hbt.load(Patient.class, hinId);
			patient.setPatientStatus("Expired");
			hbt.update(patient);

			TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
					.load(TransactionSequence.class, transactionId);
			transactionSequenceObj
					.setTransactionSequenceNumber(deathCertificateNo + 1);
			hbt.update(transactionSequenceObj);
			//
			List<Patient> patietList = new ArrayList<Patient>();
			Session session = (Session) getSession();
			patietList = session.createCriteria(Patient.class)
					.add(Restrictions.eq("Id", hinId)).list();
			for (Patient pt : patietList) {
				pt.setStatus("n");
				hbt.update(pt);
			}
			saved = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return saved;
	}
	
	
	@SuppressWarnings("deprecation")
	public Map<String, Object> printExpiryDetails(Map<String, Object> dataMap) {
		@SuppressWarnings("unused")
		int inpatientId = 0;
		String placed_on = "";
		int hinId=0;
		if (dataMap.get("inpatientId") != null) {
			inpatientId = Integer.parseInt("" + dataMap.get("inpatientId"));
		}
		
		if (dataMap.get("hinId") != null) {
			hinId = Integer.parseInt("" + dataMap.get("hinId"));
		}
		//
		List<Inpatient> inPatientList = new ArrayList<Inpatient>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		/*inPatientList = (List<Inpatient>) session
				.createCriteria(Inpatient.class)
				.add(Restrictions.eq("Id", inpatientId)).list();*/
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		

		if (hinId > 0) {
			Criteria crt=null;
			Patient patient=(Patient) session.load(Patient.class, hinId);
			patient.setDeathCertificatePrintStatus("y");
			
			hbt.update(patient);
		}
		if (inPatientList.size() > 0) {
			/*for (Inpatient inpatient : inPatientList) {
				if (!inpatient.getConditionStatus().equals("Normal")) {
					placed_on = inpatient.getConditionStatus() + " ";
					try {
						SimpleDateFormat formatterIn = new SimpleDateFormat(
								"yyyy-MM-dd");
						SimpleDateFormat formatterOut = new SimpleDateFormat(
								"dd/MM/yyyy");
						String date4MySQL = formatterOut.format(formatterIn
								.parse("" + inpatient.getListDate()));
						placed_on = placed_on + " " + date4MySQL + " ";
					} catch (Exception e) {
						e.printStackTrace();
					}
					placed_on = placed_on + inpatient.getListTime();
				}
			}*/
		}

		Connection con = session.connection();
		map.put("conn", con);
	//	map.put("placed_on", placed_on);
		return map;
	}
	
	public Map<String,Object>  getDataForServer(){
		Map<String,Object> dataMap=new HashMap<String,Object>();
		Session session=(Session)getSession();
		try {
		Criteria criteria=session.createCriteria(CentralServerOpdData.class)
				.add(Restrictions.eq("Status", "N").ignoreCase())
				.addOrder(Order.asc("Id"))
				.setMaxResults(10);
		List<CentralServerOpdData> centralServerOpdDatas=criteria.list();
		
		MasHospital masHospital=null;
		if(centralServerOpdDatas!=null && centralServerOpdDatas.size()>0){
			masHospital=(MasHospital)session.get(MasHospital.class,
					Integer.parseInt(centralServerOpdDatas.get(0).getHospitalId().toString())); 
			dataMap.put("centralServerOpdDatas", centralServerOpdDatas);
		}
		if(masHospital!=null){
			dataMap.put("masHospital", masHospital);
		}
		} catch (Exception e){
			e.printStackTrace();
		}
		finally{
			if(session!=null){
				session.close();
			}
		}
		return dataMap;
	}
	
	public Map<String,Object>  getDataForLeanServer(){
		Map<String,Object> dataMap=new HashMap<String,Object>();
		Session session=(Session)getSession();
		try{
		Criteria criteria=session.createCriteria(LeanServerOpdData.class)
				.add(Restrictions.eq("Status", "N").ignoreCase())
				.addOrder(Order.asc("Id"))
				.setMaxResults(10);
		List<LeanServerOpdData> leanServerOpdDatas=criteria.list();
		
		MasHospital masHospital=null;
		if(leanServerOpdDatas!=null && leanServerOpdDatas.size()>0){
			masHospital=(MasHospital)session.get(MasHospital.class,
					Integer.parseInt(leanServerOpdDatas.get(0).getHospitalId().toString())); 
			dataMap.put("leanServerOpdDatas", leanServerOpdDatas);
		}
		if(masHospital!=null){
			dataMap.put("masHospital", masHospital);
		}
		} catch (Exception e){
			e.printStackTrace();
		}
		finally{
		if(session!=null){
			session.close();
		}
		}
		return dataMap;
	}
	
	public String updateCentralServerOPDData(CentralServerOpdData centralServerOpdData){
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false); 
  	  	String opdDataSavedToServer="Y";
  	  	centralServerOpdData.setStatus(opdDataSavedToServer);
  	  	hbt.update(centralServerOpdData);
  	  	hbt.flush();
  	  	hbt.clear();
		return "success";
	}
	
	public String updateLeanServerOPDData(LeanServerOpdData leanServerOpdData){
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false); 
  	  	String opdDataSavedToLeanServer="Y";
  	  	leanServerOpdData.setStatus(opdDataSavedToLeanServer);
  	  	hbt.update(leanServerOpdData);
  	  	hbt.flush();
  	  	hbt.clear();
		return "success";
	}
	public String makeFileOpdDetailFromLeanToServer(Map<String,Object> mapObject,Map<String,List<Object>> mapListObject){
		try{
		OpdPatientDetails opdpatientDetail=(OpdPatientDetails) mapObject.get("OpdPatientDetails");
		Visit visit=opdpatientDetail.getVisit(); 
		PatientObservation pobb=(PatientObservation) mapObject.get("PatientObservation");
		QueueManagment queue=(QueueManagment) mapObject.get("QueueManagment");
		DischargeIcdCode dischargeIcd=(DischargeIcdCode) mapObject.get("DischargeIcdCode");  
		PatientInvestigationHeader patientInvestigationHd = (PatientInvestigationHeader) mapObject.get("PatientInvestigationHeader");
		OpdPatientAllergyM opdPatientAllergyMM = (OpdPatientAllergyM) mapObject.get("OpdPatientAllergyM"); 
		ProcedureHeader procedureHdr = (ProcedureHeader) mapObject.get("ProcedureHeader");
		OpdSurgeryHeader opdSurgeryHdr =  (OpdSurgeryHeader) mapObject.get("OpdSurgeryHeader");
		OpdPatientHistory patientHis = (OpdPatientHistory) mapObject.get("OpdPatientHistory"); 
		List<PatientInvestigationDetails> patientInvestigatinDetailsList =(List<PatientInvestigationDetails>)(Object) mapListObject.get("patientInvestigatinDetailsListObject");
		Session session=(Session) getSession();
		Patient patient=(Patient) session.get(Patient.class, patientHis.getHin().getId());
		
       
        			ORM_O01 orm_O01=new ORM_O01();
        			ORU_R01 message = new ORU_R01();
                  	message.getMSH().getEncodingCharacters().setValue("^~\\&");
				  	message.getMSH().getFieldSeparator().setValue("|");
        			MSH mshSegment =orm_O01.getMSH();
        			mshSegment.getMsh1_FieldSeparator().setValue("|");
                    mshSegment.getMsh2_EncodingCharacters().setValue("^~\\&");
                    //mshSegment.getMsh3_SendingApplication().setValue("HIS");...........
                    mshSegment.getMsh3_SendingApplication().setValue("INSTAPACS");
                    mshSegment.getMsh4_SendingFacility().setValue("");
                    mshSegment.getMsh5_ReceivingApplication().setValue("HMS");
                    //mshSegment.getMsh5_ReceivingApplication().setValue("EKG");
                    mshSegment.getMsh6_ReceivingFacility().setValue("");
                    mshSegment.getMsh7_DateTimeOfMessage().getTimeOfAnEvent().setValue(HMSUtil.now("yyyyMMdd")+HMSUtil.now("Hmmss"));
                    mshSegment.getMsh9_MessageType().getCm_msg1_MessageType().setValue("ORM");
                    mshSegment.getMsh9_MessageType().getCm_msg2_TriggerEvent().setValue("O01");
                    //mshSegment.getMsh10_MessageControlID().setValue("1001");
                   // mshSegment.getMsh10_MessageControlID().setValue(""+1001);
                    mshSegment.getMsh11_ProcessingID().setValue("P");
                    mshSegment.getMsh12_VersionID().setValue("2.2");
                    
                    
                    //patient detail
                    PID pid=orm_O01.getPATIENT().getPID(); 
                    //visit detail
                    PV1 pv1=orm_O01.getPATIENT().getPV1();
                    //observation
                    OBR obr=orm_O01.getORDER().getORDER_DETAIL().getOBR();
                    //phramacy request 
                    //RXO rxo=orm_O01.getORDER().getORDER_DETAIL().getRXO();
                    ORC orc=orm_O01.getORDER().getORC();
                    //billing
                    BLG blg=orm_O01.getORDER().getBLG();
                    //investion request
                    ///RQD rqd=orm_O01.getORDER().getORDER_DETAIL().getRQD();
                    // pharmacy lab queue request
                    OBX obx = orm_O01.getORDER().getORDER_DETAIL().getOBX() ;  // added by amit das on 19-09-2017
                    
                    pv1.getPv138_DietType().setValue(visit.getDepartment().getId()+"");
                    if(mapObject.get("PatientPrescriptionHeader")!=null){
            			PatientPrescriptionHeader patientPrescriptionHd = (PatientPrescriptionHeader) mapObject.get("PatientPrescriptionHeader");
            			//************PatientPrescriptionHeader************// 
                        pv1.getPv115_AmbulatoryStatus(0).setValue(patientPrescriptionHd.getPrescriptionNo()); 
                        obr.getObr2_PlacerOrderNumber().getCm_placer1_UniquePlacerId().setValue(patientPrescriptionHd.getStatus());
                        
            			List<PatientPrescriptionDetails> patientPrescriptionDetailsList=(List<PatientPrescriptionDetails>)(Object)mapListObject.get("patientPrescriptionDetailsListObject");
            			 //**********************patientPrescriptionDetailsListObject***********************//
                        
                        StringBuilder item=new StringBuilder("");
                        StringBuilder feqId =new StringBuilder("");
                        StringBuilder doges=new StringBuilder("");
                        StringBuilder total=new StringBuilder("");
                        StringBuilder type=new StringBuilder("");
                        StringBuilder nursingStatus=new StringBuilder("");
                        StringBuilder injectionStatus=new StringBuilder("");
                        StringBuilder noOfDays=new StringBuilder("");
                        //accessing the value from PatientPrescriptionDetails table.
                        for(PatientPrescriptionDetails plist : patientPrescriptionDetailsList){
                        	item=item.append(plist.getItem().getId()+","); 
                        	feqId =feqId.append(plist.getFrequency().getId()+",");
                        	doges=doges.append(plist.getDosage()+",");
                        	total=total.append(plist.getTotal()+",");
                        	type=type.append(plist.getType()+",");
                        	nursingStatus=nursingStatus.append(plist.getNursingStatus()+",");
                        	injectionStatus=injectionStatus.append(plist.getInjectionStatus()+",");
                        	noOfDays=noOfDays.append(plist.getNoOfDays()+",");
                        }
                        //item id for PatientPrescriptionDetails
                        pid.getPid22_EthnicGroup().setValue(item.toString()); 
                        pv1.getPv128_InterestCode().setValue(feqId.toString()); 
                        pv1.getPv131_BadDebtAgencyCode().setValue(doges.toString());
                        pv1.getPv150_AlternateVisitID().getCm_pat_id_01921_IDNumber().setValue(type.toString()); 
                        pv1.getPv111_TemporaryLocation().getCm_internal_location3_Bed().setValue(nursingStatus.toString());
                        pv1.getPv129_TransferToBadDebtCode().setValue(injectionStatus.toString());
                        pv1.getPv117_AdmittingDoctor().getCn1_IDNumber().setValue(total.toString());
                        //pv1.getPv148_TotalAdjustments().setValue(noOfDays.toString());
                       pv1.getPv15_PreadmitNumber().setValue(noOfDays.toString());
                       
            		}  
            		if(mapObject.get("DgOrderhd")!=null){
            			DgOrderhd dgOrdhd = (DgOrderhd) mapObject.get("DgOrderhd");
            			 //***********DgOrderHeader***********************************//

                        obr.getObr15_SpecimenSource().getCm_sps3_Freetext().setValue(dgOrdhd.getTestType());                  
                        obr.getObr9_CollectionVolume().getCq_quantity2_Units().setValue(dgOrdhd.getPatientType());                  
                        pv1.getPv124_ContractCode(0).setValue(dgOrdhd.getOrderNo());           
                        obr.getObr3_FillerOrderNumber().getCm_filler1_UniqueFillerId().setValue(dgOrdhd.getPrescribedBy().getId()+"");
                        obr.getObr23_ChargeToPractice().getCm_moc1_DollarAmount().setValue(dgOrdhd.getNetAmount()+"");
                        obr.getObr19_PlacerField2().setValue(dgOrdhd.getOrderStatus());
            			List<DgOrderdt> dgOrderDetailsList= (List<DgOrderdt>)(Object) mapListObject.get("dgOrderDetailsListObject");
            			//******************************dgOrderDetailsListObject***************************
                        StringBuilder amt=new StringBuilder("");
                        StringBuilder packStatus=new StringBuilder("");
                        StringBuilder msgSent=new StringBuilder("");
                        StringBuilder payMode=new StringBuilder("");
                        StringBuilder OrderStatus=new StringBuilder("");
                        StringBuilder OrderQnty=new StringBuilder("");
                        StringBuilder mainChargId =new StringBuilder("");
                        StringBuilder subChargeId=new StringBuilder("");
                        StringBuilder chareCodeId=new StringBuilder("");
                        
                        StringBuilder billNo=new StringBuilder("");
                        StringBuilder billPatientStatus=new StringBuilder("");
                        StringBuilder billStatus=new StringBuilder("");
                        StringBuilder billDetialQauntity=new StringBuilder(""); 
                        StringBuilder billDetailRefundableStatus=new StringBuilder(""); 
                        
                        //accessing value from DgOrderDetials  table
                        for(DgOrderdt dgOrderDt : dgOrderDetailsList){
                        	amt = amt.append(dgOrderDt.getAmount()+",");
                        	packStatus=packStatus.append(dgOrderDt.getPacsStatus()+",");
                        	msgSent=msgSent.append(dgOrderDt.getMsgSent()+",");
                        	payMode=payMode.append(dgOrderDt.getPaymentMade()+",");
                        	OrderQnty=OrderQnty.append(dgOrderDt.getOrderQty()+",");
                        	OrderStatus=OrderStatus.append(dgOrderDt.getOrderStatus()+",");
                        	subChargeId=subChargeId.append(dgOrderDt.getSubChargeid().getId()+",");
                        	chareCodeId=chareCodeId.append(dgOrderDt.getChargeCode().getId()+",");
                        	mainChargId=mainChargId.append(dgOrderDt.getMainChargecode().getId()+",");
                        	if(dgOrderDt.getBill()!=null){
                                billNo=billNo.append(dgOrderDt.getBill().getBillNo()+",");
                                if("Y".equalsIgnoreCase(dgOrderDt.getBill().getPatientStatus())){
                                	billPatientStatus=billPatientStatus.append("1");
                                }else{
                                	billPatientStatus=billPatientStatus.append("0");
                                }
                                if("y".equalsIgnoreCase(dgOrderDt.getBill().getStatus())){
                                	billStatus=billStatus.append("1");
                                }else{
                                	billStatus=billStatus.append("0");
                                } 
                                Set<BlOpBillDetails> billDetails=dgOrderDt.getBill().getBlOpBillDetails();
                                
                                if(billDetails!=null){ // added by amit das on 29-07-2016
                                for(BlOpBillDetails blOpBill:billDetails){
                                        if(blOpBill.getQuantity()!=null){
                                        	billDetialQauntity= billDetialQauntity.append(blOpBill.getQuantity()+",");
                                        }else{
                                        	billDetialQauntity= billDetialQauntity.append("0"+",");
                                        }if("Y".equalsIgnoreCase(blOpBill.getRefundableStatus())){
                                        	billDetailRefundableStatus=billDetailRefundableStatus.append("1");
                                        }else{
                                        	billDetailRefundableStatus=billDetailRefundableStatus.append("0");
                                        }
                                }
                             }  	
                              
                        }else{
                                billNo=billNo.append("0"+",");
                                billPatientStatus=billPatientStatus.append("0");
                                billStatus=billStatus.append("0");
                        }
                        } 
                        pv1.getPv139_ServicingFacility().setValue(subChargeId.toString());
                        pv1.getPv143_PriorTemporaryLocation().getCm_internal_location3_Bed().setValue(chareCodeId.toString());
                        pid.getPid8_Sex().setValue(amt.toString());
                        pid.getPid20_DriverSLicenseNumberPatient().getLicenseNumber().setValue(msgSent.toString());
                        obr.getObr12_DangerCode().getCe2_Text().setValue(packStatus.toString());
                        obr.getObr20_FillerField1().setValue(payMode.toString());
                        blg.getBlg3_AccountID().getCk1_IDNumber().setValue(mainChargId.toString());
                        obr.getObr16_OrderingProvider().getCn1_IDNumber().setValue(OrderQnty.toString());
                        pv1.getPv119_VisitNumber().getCm_pat_id1_IDNumber().setValue(OrderStatus.toString());
                        
                        pv1.getPv134_DeleteAccountIndicator().setValue(billNo.toString());
                        //pv1.getPv149_TotalPayments().setValue(); 
                        pid.getPid18_PatientAccountNumber().getCheckDigit().setValue(billPatientStatus.toString());
                        pid.getPid25_BirthOrder().setValue(billStatus.toString()); 
                        obr.getObr32_PrincipalResultInterpreter().getCm_ndl1_InterpreterTechnician().getCn10_Telefon().setValue(billDetialQauntity.toString());
                        pv1.getPv11_SetIDPatientVisit().setValue(billDetailRefundableStatus.toString());

                       
            		}
            		
            		
            		// added by amit das on 18-09-2017 for pharmacy lab queue sync
            		if(visit!=null){
            				List<PharmacyLabQueue> pharmacyLabQueueList =	session.createCriteria(PharmacyLabQueue.class).add(Restrictions.eq("Visit.Id", visit.getId())).list();
            				if(pharmacyLabQueueList!=null && pharmacyLabQueueList.size()>0){
            					 StringBuilder tokenNo    = new StringBuilder("");
                                 StringBuilder department = new StringBuilder("");
                                 StringBuilder pharmacyLabStatus = new StringBuilder("");
                                 StringBuilder status = new StringBuilder("");
                                 StringBuilder totalHospitalVisit  = new StringBuilder("");
                                 StringBuilder dgOrderHd = new StringBuilder("");
                                 
                                 for(PharmacyLabQueue phamLabQueue : pharmacyLabQueueList){
                                 	tokenNo.append(((phamLabQueue.getTokenNo()!=null)?phamLabQueue.getTokenNo():"")+",");
                                 	department.append(phamLabQueue.getDepartment().getId()+",");
                                 	pharmacyLabStatus.append(phamLabQueue.getPharmacyLabStatus()+",");
                                 	status.append(((phamLabQueue.getStatus()!=null)?phamLabQueue.getStatus():"")+",");
                                 	totalHospitalVisit.append(((phamLabQueue.getTotalHospitalVisit()!=null)?phamLabQueue.getTotalHospitalVisit():"")+",");
                                 	if(phamLabQueue.getDgOrderhdId()!=null)
                                 		dgOrderHd.append("Y"+",");
                                 	else
                                 		dgOrderHd.append("N"+",");
                                 }
             					
             					obx.getResponsibleObserver().getCn2_FamilyName().setValue(tokenNo.toString());
             					obx.getObx7_ReferencesRange().setValue(department.toString());
             					obx.getObservationIdentifier().getCe1_Identifier().setValue(pharmacyLabStatus.toString());
             					obx.getObservationSubID().setValue(status.toString());
             					obx.getObx10_NatureOfAbnormalTest().setValue(totalHospitalVisit.toString());
             					obx.getObx11_ObservationResultStatus().setValue(dgOrderHd.toString());
             					obx.getObx13_UserDefinedAccessChecks().setValue(pharmacyLabQueueList.size()+"");
            					
            				}
            				
            		}
            		// ended by amit das on 18-09-2017 for pharmacy lab queue sync
            		
            		
            		if((DgSampleCollectionHeader) mapObject.get("DgSampleCollectionHeader")!=null){
            			DgSampleCollectionHeader collHeaderhd = (DgSampleCollectionHeader) mapObject.get("DgSampleCollectionHeader");
            			//***********************DgSampleCollecionHeader*******************//
                        
                        //order Status from DgSampleCollectionHeader
                        obr.getObr10_CollectorIdentifier(0).getCn1_IDNumber().setValue(collHeaderhd.getOrderStatus());
                        obr.getObr13_RelevantClinicalInformation().setValue(collHeaderhd.getDepartment().getId()+"");
            			List<DgSampleCollectionDetails> dgSampleCollectionDeatilsList = (List<DgSampleCollectionDetails>)(Object) mapListObject.get("dgSampleCollectionDeatilsListObject");
            			 //**************************DgSampleCollectionDetails*********************
                        
                        StringBuilder collectedId =new StringBuilder("");
                        StringBuilder chargCodeIdDg=new StringBuilder("");
                        StringBuilder mainChargeIdDg=new StringBuilder("");
                        StringBuilder subChargdeIdDg=new StringBuilder("");
                        StringBuilder orderStatus=new StringBuilder("");
                        StringBuilder investigationId=new StringBuilder(""); 
                        //accessing value from DgSampleCollectionDetails table
                        for(DgSampleCollectionDetails dgSampleCollectionDt: dgSampleCollectionDeatilsList){
                        	collectedId=collectedId.append(dgSampleCollectionDt.getCollected()+",");
                        	chargCodeIdDg=chargCodeIdDg.append(dgSampleCollectionDt.getChargeCode().getId()+",");
                        	mainChargeIdDg=mainChargeIdDg.append(dgSampleCollectionDt.getMaincharge().getId()+",");
                        	subChargdeIdDg=subChargdeIdDg.append(dgSampleCollectionDt.getSubcharge().getId()+",");
                        	orderStatus=orderStatus.append(dgSampleCollectionDt.getOrderStatus()+",");
                        	investigationId=investigationId.append(dgSampleCollectionDt.getInvestigation().getId()+",");
                        	
                        }
                        blg.getBlg1_WhenToCharge().getCm_ccd1_WhenToCharge().setValue(collectedId.toString());
                        pv1.getPv142_PendingLocation().getCm_internal_location3_Bed().setValue(chargCodeIdDg.toString()); 
                        //pv1.getPv11_SetIDPatientVisit().setValue(investigationId.toString());
                        pid.getPid23_BirthPlace().setValue(investigationId.toString());
                        //obr.getObr8_ObservationEndDateTime().getTs1_TimeOfAnEvent().setValue(investigationId.toString());
                        pv1.getPv18_ReferringDoctor().getCn4_MiddleInitialOrName().setValue(mainChargeIdDg.toString());;
                        pv1.getPv17_AttendingDoctor().getCn1_IDNumber().setValue(subChargdeIdDg.toString());
                        pv1.getPv140_BedStatus().setValue(orderStatus.toString());
                        
            		}  
                  //hin no of patient
                    pid.getPid2_PatientIDExternalID().getCk1_IDNumber().setValue(patient.getHinNo());
                    
                    //************Visit************
                    pid.getPid19_SocialSecurityNumberPatient().setValue(visit.getVisitNo()+"");
                    pv1.getPv148_TotalAdjustments().setValue(visit.getAddEditBy().getId()+"");
                    //token number from Visit table
                    
                   // pv1.getPv149_TotalPayments().setValue(visit.getVisitStatus()+"");
                   // pv1.getPv128_InterestCode().setValue(visit.getVisitStatus()+"");
                    pid.getPid27_VeteransMilitaryStatus().setValue(visit.getTokenNo()+"");

                    pid.getPid17_Religion().setValue(visit.getAge()+"");
                
                    pid.getPid21_MotherSIdentifier().getCk1_IDNumber().setValue(visit.getStatus()+"");
                    //ed Status from visit table
                    pid.getPid5_PatientName().getPn1_FamilyName().setValue(visit.getEdStatus()+"");
                    //appointment type from visit
                    pv1.getPv118_PatientType().setValue(visit.getAppointmentType());
                    //rqd.getRqd4_HospitalItemCode().getCe2_Text().setValue(visit.getAppointmentType());
                    //curpharvisit status from visit
                    pv1.getPv141_AccountStatus().setValue(visit.getCurPharVisitStatus());
                    pv1.getPv14_AdmissionType().setValue(visit.getTotalHospitalVisit()+"");
                    //pv1.getPv140_BedStatus().setValue(visit.getTotalHospitalVisit()+"");
                    //priority number from visit table
                    pv1.getPv13_AssignedPatientLocation().getCm_internal_location2_Room().setValue(visit.getPriorityNumber()+"");
                    
                    
                    //*********OPDPateintDetials***********
                    obr.getObr1_SetIDObservationRequest().setValue(opdpatientDetail.getEmployee().getId()+"");
                    //BP from opdpatientDetail  
                    if(opdpatientDetail.getAdmissionAdvised()!=null){
                    	orc.getOrc5_OrderStatus().setValue(opdpatientDetail.getAdmissionAdvised());
                    }if(opdpatientDetail.getAdmissionWard()!=null && opdpatientDetail.getAdmissionWard().getId()!=null){
                    	orc.getOrc2_PlacerOrderNumber().getCm_placer1_UniquePlacerId().setValue(opdpatientDetail.getAdmissionWard().getId()+"");
                    }if(opdpatientDetail.getAdmissionDate()!=null){
                    	orc.getOrc10_EnteredBy().getCn1_IDNumber().setValue(opdpatientDetail.getAdmissionDate()+"");
                    }
                    pv1.getPv122_CourtesyCode().setValue(opdpatientDetail.getBp());
                    pv1.getPv110_HospitalService().setValue(opdpatientDetail.getHospital().getId()+"");
                    // rqd.getRqd6_RequisitionUnitOfMeasure().getCe2_Text().setValue(opdpatientDetail.getBp()); 
                  //Opd Time from opdpatientDetail
                    //Visit ID from OPD patient Details
                    obr.getObr29_ParentNumber().getCm_eip1_ParentSPlacerOrderNumber().setValue(opdpatientDetail.getVisit().getId()+",");
                    //Bmi from opdpatientDetail
                    obr.getObr26_ParentResult().getCm_parent_result2_SubIDOBX4OfParentResult().setValue(opdpatientDetail.getBmi()+"");
                    pv1.getPv116_VIPIndicator().setValue(opdpatientDetail.getPulse()+"");
                    pv1.getPv114_AdmitSource().setValue(opdpatientDetail.getTemperature()+"");
                    pv1.getPv146_CurrentPatientBalance().setValue(opdpatientDetail.getBmi()+"");
                    pid.getPid26_Citizenship(0).setValue(opdpatientDetail.getSystemicExamination());
                    
                    
                    //************************PatientObervation************************
                    
                    
                    //****************************PatientHistory*************************
                    //rqd.getRqd6_RequisitionUnitOfMeasure().getCe2_Text().setValue();
                    pv1.getPv123_CreditRating().setValue(patientHis.getStatus()+"");
                   
                    //pid.getPid18_PatientAccountNumber().getCheckDigit().setValue(patientHis.getIpOpPacStatus()+"");
                    //obr.getObr32_PrincipalResultInterpreter().getCm_ndl1_InterpreterTechnician().getCn10_Telefon().setValue(patientHis.getIpOpPacStatus()+"");
                    
                    //**********QueueManagment******************
                  //token no from Queue Managament table;
                    obr.getObr4_UniversalServiceID().getCe2_Text().setValue(queue.getTokenNo()+"");
                  //token status from Queue Mangament table
                    obr.getObr14_SpecimenReceivedDateTime().getTs2_DegreeOfPrecision().setValue(queue.getTokenStatus()+"");
                  //priority number from queue managament table
                   
                    obr.getObr5_PriorityNotused().setValue(queue.getPriorityNumber()+"");
                    //totalHospitalvisit from queue table
                    pv1.getPv16_PriorPatientLocation().getCm_internal_location3_Bed().setValue(queue.getTotalHospitalVisit()+"");
                    
                    
                    //*********DischargeIcdCode************//
                  //Diagnosis Status from discharge_icd_code
                    if(dischargeIcd!=null) { // condition added by amit das on 19-09-2016
                    obr.getObr24_DiagnosticServiceSectionID().setValue(dischargeIcd.getDiagnosisStatus());
                    obr.getObr18_PlacerField1().setValue(dischargeIcd.getStatus());                  
                    //IcId code from DischargeIcdCode table
                    pid.getPid4_AlternatePatientID().setValue(dischargeIcd.getIcd().getId()+"");
                    //rxo.getRxo16_NeedsHumanReview().setValue(dischargeIcd.getIcd().getId()+"");
                    }
                    
                   //**********PatientInvestigationHeader**************//
                    if(patientInvestigationHd!=null){
                    	obr.getObr27_QuantityTiming(0).getDuration().setValue(patientInvestigationHd.getInvestigationTime()); 
                        //STATUS OF PATIENT INVESTIGATIONHEADER
                        obr.getObr25_ResultStatus().setValue(patientInvestigationHd.getStatus()); 
                      //last_chng_Date
                        pv1.getPv144_AdmitDateTime().getTs2_DegreeOfPrecision().setValue(patientInvestigationHd.getInvestigationDate()+"");    
                    }
                   
                
               //********************************OpdPatientAllergyM*************************      
                     //Status of OPDPatientAlleryM
                     obr.getObr15_SpecimenSource().getCm_sps2_Additives().setValue(opdPatientAllergyMM.getStatus());
                    // rqd.getRqd10_DateNeeded().setValue(opdPatientAllergyMM.getStatus());

               //******************************ProcedureHeader**************************      

                 // pv1.getPv147_TotalCharges().setValue(procedureHdr.getStatus());
                  if(procedureHdr!=null)
                  obr.getObr21_FillerField2().setValue(procedureHdr.getStatus());
                 // pid.getPid25_BirthOrder().setValue(procedureHdr.getStatus());
                 //*****************OPDSurgeryHeader************************

                    //Patient Status from opdSurgeryHdr
                  	if(opdSurgeryHdr!=null){ // added by amit das on 23-11-2016
                  
                    obr.getObr7_ObservationDateTime().getTs2_DegreeOfPrecision().setValue(opdSurgeryHdr.getPatientStatus()+"");
                    //billing Status from opdSurgeryHdr
                   
                    pid.getPid24_MultipleBirthIndicator().setValue(opdSurgeryHdr.getBillingStatus()+"");
                  	}
                   
                    //***************************patientInvestigatinDetailsListObject************************
                    StringBuilder chargeCId=new StringBuilder("");
                    //accessing value from PatientInvestigationDetails table
                    if(patientInvestigatinDetailsList!=null && patientInvestigatinDetailsList.size()>0){
                    	for(PatientInvestigationDetails patientInvesDet:patientInvestigatinDetailsList){
                        	chargeCId=chargeCId.append(patientInvesDet.getChargeCode().getId()+",");
                        
                        }
                    }
                    
                    obr.getObr6_RequestedDateTimeNotused().getTs2_DegreeOfPrecision().setValue(chargeCId.toString()+""); 
                    /*String testMsg="MSH|^~\\&|INSTAPACS||HMS||20160202113550||ORM^O01||P|2.2\r"
                    				+"PID||T000912201160002||663316|n|||0,0,|||||||||36 Years|^00|2|n,n,|y||733,|n|00|All System NAD|3\r"
                    				+"PV1|||^3|3||^^3|119,|^^^23,||1||||0.0||0||D|P,P,|||/|Y|129/2016||||||||||0,0,|||||35,119,|P,|Y|^^733,|^^12,733,|^Tue Feb 02 00:00:00 IST 2016||0.0||432\r"
                    				+"ORC|\r"
                    				+"OBR|955||955|^3|3|^12,733,|^OP||^OP|P||^n,n,|219|^C|^Y^Regular|1,1,||Y|P|n,n,|n||0|p|p|^0.0|^^11:32||2187918,\r"
                    				+"BLG|y,||17,23,";*/
                    Parser p1 = new PipeParser(); 
			  	  	String encodedMessage = p1.encode(orm_O01); 
			  	  	String encMsg = p1.encode(message);
			  	  	String newString = encMsg.substring(8);
			  	  	HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
			  	  	CentralServerOpdData centralServerOpdData=new CentralServerOpdData();
			  	  	centralServerOpdData.setOpdData(encodedMessage+newString);
			  	  	//centralServerOpdData.setOpdData(encodedMessage+newString);
			  	  	centralServerOpdData.setLeanOpdId(Long.parseLong(opdpatientDetail.getId().toString()));
			  	  	String notSaveToServer="N";
			  	  	centralServerOpdData.setStatus(notSaveToServer);
			  	  	centralServerOpdData.setHospitalId(Long.parseLong(visit.getHospital().getId()+""));
			  	  	hbt.save(centralServerOpdData);
			  	  	hbt.flush();
			  	  	hbt.clear(); 
				 logger.info("Done"); 
				 return "success";
        }catch(Exception e){
                e.printStackTrace();
                return "failear";
        }
        
}



	
	@Override
	public Map<String, Object> uploadAndViewDocuments(Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		
		List<UploadDocuments> uploadDocuments = new ArrayList<UploadDocuments>();
		Session session = (Session)getSession();
		int hinId = 0;
		int visitId =0;
		int inpatientId=0;
		String flag="n";
		String message="";
		String uploadFrom ="NA";
		boolean fileuploaded=false;
		
		if(generalMap.get("hinId")!= null){
			hinId =(Integer) generalMap.get("hinId");
		}
		if(generalMap.get("visitId")!= null){
			visitId =(Integer) generalMap.get("visitId");
		}
		if(generalMap.get("inpatientId")!= null){
			inpatientId =(Integer) generalMap.get("inpatientId");
		}
		if(generalMap.get("flag")!= null){
			flag =(String) generalMap.get("flag");
		}
		if(generalMap.get("uploadFrom")!= null){
			uploadFrom =(String) generalMap.get("uploadFrom");
		}
		
		
		String filename = "";
		if(generalMap.get("filename")!= null){
			filename =(String) generalMap.get("filename");
		}
		String uploadURL = "";
		if(generalMap.get("uploadURL")!= null){
			uploadURL =(String) generalMap.get("uploadURL");
		}
		String comments = "";
		if(generalMap.get("comments")!= null){
			comments =(String) generalMap.get("comments");
		}
		
		
		if(flag.equalsIgnoreCase("y"))
		{
			
			String fileExtension=null;
			 File file=null;
			 try { 
					HibernateTemplate hbt=getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					 logger.info(uploadURL+" -- "+filename);
					 file=new File(uploadURL + "/" + filename);
		    		  logger.info("path>>"+file.getPath());
		    		
		    	     FileInputStream is = new FileInputStream(file);
		    	     long length = file.length();
		    	     ByteBuffer byteBuff=null;
		    	   //  int modLength=length/
		    	     if (length > Integer.MAX_VALUE) {
		            // File is too large
		    	     }
		    	     // Create the byte array to hold the data
		    	     byte[] bytes = new byte[(int)length];
		    	     int offset = 0;
		    	     int numRead = 0;
		    	     while (offset < bytes.length
		    	    		 && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
		    	    	 offset += numRead;
		    	    	
		    	     }
		    
		    	     if (offset < bytes.length) {
		    	    	 throw new IOException("Could not completely read file "+file.getName());
		    	         
		    	     }
		    	     is.close();     
		    	
		    	     
		    	     UploadDocuments document = new UploadDocuments();
		    	     document.setPatientDocument(bytes);
		    	     int indexNo = filename.lastIndexOf("."); 
		    	     String actualfileName = filename.substring(0, indexNo);
		    	     fileExtension = filename.substring(indexNo+1);
		    	     document.setFileName(actualfileName);
		    	     document.setFileExtension(fileExtension);
		    	     Date d= new Date();
		    	     document.setUploadDate(d);
		    	     
		    	     if(uploadFrom.equalsIgnoreCase("OPD") && visitId !=0)
		    	     {
		    	    	 Visit visit = new Visit();
		    	    	 visit.setId(visitId);
		    	    	 document.setVisit(visit);
		    	     }
		    	     if(uploadFrom.equalsIgnoreCase("IP") && inpatientId !=0)
		    	     {
		    	    	 Inpatient ip = new Inpatient();
		    	    	 ip.setId(inpatientId);
		    	    	 document.setInpatient(ip);
		    	     }
		    	   
		    	     Patient hinNo= new Patient();
		    	     hinNo.setId(hinId);
		    	     document.setHin(hinNo);
		    	    
		    	     document.setDescription(comments);
		    	     hbt.save(document);
		    	     hbt.flush();
		    	     hbt.refresh(document);	
		    	     message="File uploaded Sucessfully";
		    	     fileuploaded=true;
		    
		    }
			catch (Exception e) {
		    	e.printStackTrace();
		      System.err.println("Error: " + e.getMessage());
		      message="File is not uploaded Sucessfully, some error is occurred";
		      e.printStackTrace();
		    }
			
		}		
		
		
		uploadDocuments = session.createCriteria(UploadDocuments.class).createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", hinId))
				 .add(Restrictions.or(Restrictions.isNull("ConsentLetter"), Restrictions.ne("ConsentLetter", "y").ignoreCase())).list();
		map.put("visitId", visitId);
		map.put("inpatientId", inpatientId);
		map.put("uploadDocuments", uploadDocuments);
		map.put("message", message);
		map.put("fileuploaded", fileuploaded);
		return map;
	}

	@Override
	public Map<String, Object> getOpdOphthalmology(int visitId) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdOphthalmology> opdOphthalmologyList = null ;
		try{
		map = getPatientDetails(visitId);
		opdOphthalmologyList = session.createCriteria(OpdOphthalmology.class).createAlias("Visit","v")
								.add(Restrictions.eq("v.Id", visitId)).list();
		map.put("opdOphthalmologyList", opdOphthalmologyList);
		
		}catch(HibernateException e){
			e.printStackTrace();
		}
		return map;
		
	}
	public Map<String, Object> getPatientDetails(int visitId) {
		Session session = (Session) getSession();
		List<Visit> patientDataList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();

		try {

			// patientList=session.createQuery("select v from Visit as v where   v.VisitDate="+date
			// ).list();
			// v.VisitDate="+date ).list();
			patientDataList = session.createCriteria(Visit.class).add(
					Restrictions.eq("Id", visitId)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientDataList", patientDataList);

		return map;
	}

	@Override
	public Map<String, Object> showPoliceIntimationDetail(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> opdPatientDetailList = new ArrayList<Object[]>();
		List<Object[]> opPatientList = new ArrayList<Object[]>();
		List<Object[]> ipPatientList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		opPatientList = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "v")
				.createAlias("v.Hin", "p").createAlias("p.Sex", "s")
				.add(Restrictions.eq("PoliceIntimation", "y").ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
				.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("p.FullName")).add(Projections.property("v.Age")).add(Projections.property("s.AdministrativeSexName"))).list();
		
		
		ipPatientList = session.createCriteria(OpdPatientDetails.class).createAlias("Inpatient", "ip")
				.createAlias("ip.Hin", "p").createAlias("p.Sex", "s")
				.add(Restrictions.eq("PoliceIntimation", "y").ignoreCase()).add(Restrictions.eq("Hospital.Id", hospitalId))
				.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("p.FullName")).add(Projections.property("p.Age")).add(Projections.property("s.AdministrativeSexName"))).list();
		
		opdPatientDetailList.addAll(opPatientList);
		opdPatientDetailList.addAll(ipPatientList);
		
		map.put("opdPatientDetailList", opdPatientDetailList);
		
		
		
		return map;
	}

	@Override
	public Map<String, Object> displayPoliceIntimationDetail(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<OpdPatientDetails> opdPatientDetailList = new ArrayList<OpdPatientDetails>();
		Session session = (Session) getSession();
		List<OpdPatientHistory> patientHistories = new ArrayList<OpdPatientHistory>();
		opdPatientDetailList = session.createCriteria(OpdPatientDetails.class).add(Restrictions.idEq(box.getInt("opdPatientDetailId"))).list();
		map.put("opdPatientDetailList", opdPatientDetailList);
		Criteria crHis=session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("OpdPatientDetails.Id",box.getInt("opdPatientDetailId")));
			patientHistories=crHis.list();
		map.put("patientHistories", patientHistories);	
		
		List<PoliceIntimationDetail>  policeIntimationDetail= new ArrayList<PoliceIntimationDetail>();
		policeIntimationDetail= session.createCriteria(PoliceIntimationDetail.class).addOrder(Order.desc("Id")).setMaxResults(1).list();
		String srNo="";
		int yr=0;
		for(PoliceIntimationDetail p:policeIntimationDetail){
			srNo=p.getSerialNo();
				if(srNo!=null){ 
					yr = Integer.parseInt(srNo.substring(4, 8));
				
		}
		
		
		}
		Date currentDate = new Date();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/mm/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("ddMMyyyy");
		String dateVal="";
		try {
			dateVal = formatterOut.format(formatterIn.parse(date));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		
		int year =  Calendar.getInstance().get(Calendar.YEAR);
		
		
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		String transactionSequenceName = "PoliceIntimation";
		String orderNo = "";
		sequenceNoList = session
				.createCriteria(TransactionSequence.class)
				.add(Restrictions.eq("TransactionSequenceName",
						transactionSequenceName))
						.createAlias("Hospital", "hosp")
							.add(Restrictions.eq("hosp.Id",box.getInt("hospitalId"))).
						list();
		if(sequenceNoList.size()>0){
			TransactionSequence transactionSequence = sequenceNoList.get(0);
			int sequenceNo = transactionSequence.getTransactionSequenceNumber();
			if(year==yr){
			int s= sequenceNo+1;
			orderNo = dateVal+"-"+s;
			}else{
				orderNo=dateVal+"-"+1;
			}}else{
			orderNo=dateVal+"-"+1;	
			}
		map.put("orderNo", orderNo);
		
		
		return map;
	}

	@Override
	public Map<String, Object> submitPoliceIntimationDetail(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session) getSession();
		boolean flag = false;
		String flagString="";
		int police_intimation_detail_id=0;
		PoliceIntimationDetail policeIntimationDetail = new PoliceIntimationDetail();
		policeIntimationDetail.setPoliceStation(box.getString("policeStation"));
		if(box.getInt("hinId") != 0){
			Patient patient = new Patient();
			patient.setId(box.getInt("hinId"));
			policeIntimationDetail.setHin(patient);
		}
		if(box.getInt("visitId") != 0){
			Visit visit = new Visit();
			visit.setId(box.getInt("visitId"));
			policeIntimationDetail.setVisit(visit);
			flagString="outpatient";
		}
		if(!box.getString("serialNo").equals("")){
			policeIntimationDetail.setSerialNo(box.getString("serialNo"));
		}
		if(box.getInt("inPatientId") != 0){
			Inpatient inpatient = new Inpatient();
			inpatient.setId(box.getInt("inPatientId"));
			policeIntimationDetail.setInpatient(inpatient);
			
		}
		if(box.getInt("opdPatientDetialId") != 0){
			OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.get(OpdPatientDetails.class, box.getInt("opdPatientDetialId"));
			opdPatientDetails.setPoliceIntimation("c");
			hbt.update(opdPatientDetails);
		}
		
		
		Date currentDate = new Date();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/mm/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("ddMMyyyy");
		String date4MySQL="";
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		String dateVal=date4MySQL;
		List<TransactionSequence> sequenceNoList = new ArrayList<TransactionSequence>();
		String transactionSequenceName = "PoliceIntimation";
		
		  sequenceNoList = session.createCriteria(TransactionSequence.class).add(Restrictions.eq("TransactionSequenceName",transactionSequenceName))
					.createAlias("Hospital", "hosp")
			.add(Restrictions.eq("hosp.Id", box.getInt("hospitalId")))
					.list();
	if(sequenceNoList.size()>0){
    TransactionSequence transactionSequence = (TransactionSequence) sequenceNoList.get(0);
    int s=transactionSequence.getTransactionSequenceNumber();
     s=transactionSequence.getTransactionSequenceNumber()+1;
	String orderNo = "";
	orderNo =dateVal+"-"+s;
	
	int id = transactionSequence.getId();
	TransactionSequence transactionSequence2 = (TransactionSequence) hbt.load(TransactionSequence.class, id);
	transactionSequence2.setTransactionSequenceNumber(s);
	hbt.update(transactionSequence2);
	}else if (sequenceNoList.size() == 0) {
		TransactionSequence tsObj = new TransactionSequence();
		tsObj.setStatus("y");
		tsObj.setTransactionPrefix("POL");
		tsObj.setTransactionSequenceName(transactionSequenceName);
		tsObj.setTransactionSequenceNumber(1);
		tsObj.setCreatedby("admin");
		tsObj.setStatus("y");
		MasHospital hospital= new MasHospital();
		hospital.setId(box.getInt("hospitalId"));
		tsObj.setHospital(hospital);
		
		hbt.save(tsObj);
		
	}

		
		hbt.save(policeIntimationDetail);
		police_intimation_detail_id=policeIntimationDetail.getId();
		flag = true;
		map.put("flag", flag);
		map.put("flagString", flagString);
		map.put("police_intimation_detail_id", police_intimation_detail_id);
		return map;
	}

	
	@Override
	public Map<String, Object> saveNursingCare(Box box) {
		
		Map<String,Object> datamap = new HashMap<String,Object>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		boolean flag=false;
		Session session = (Session)getSession();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		
		int Id= box.getInt("Id");		
		String remarks = box.getString("remarks");
		String batch = box.getString("batch");
	
	
		
		ProcedureDetails procedureDetails = (ProcedureDetails) hbt.load(ProcedureDetails.class, Id);
		int noOfDays = procedureDetails.getNoOfDays();
		int nFrequencyCode =0;
		int frequencyId= procedureDetails.getFrequency().getId();
		int nursingId= procedureDetails.getProcedure().getId();
		int frequencyCode = procedureDetails.getFrequency().getFrequencyCount() ;
		/*if(frequencyCode.length()>0)
		{
		  nFrequencyCode =  Integer.parseInt(frequencyCode);
		}*/
		
		int nTotalProcedure = frequencyCode * noOfDays;
		
		int procedureHeaderId = procedureDetails.getProcedureHeader().getId();
		int nursingcareId= procedureDetails.getProcedure().getId();
		List<ProcedureDetails> listA = new ArrayList<ProcedureDetails>();
		
		
		Criteria cr = null;
		cr = session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureHeaderId));
		cr.createAlias("Procedure", "nr").add(Restrictions.eq("nr.Id", nursingId));
		listA = cr.list();
		
		List<MasProcedureItemMapping> listItemMappings=session.createCriteria(MasProcedureItemMapping.class).createAlias("Procedure","prc").add(Restrictions.eq("prc.Id",nursingcareId)).list();
		if(listItemMappings.size()>0){
			MasProcedureItemMapping mpc=(MasProcedureItemMapping)listItemMappings.get(0);
			List<StoreItemBatchStock>storeItemBatch=session.createCriteria(StoreItemBatchStock.class)
					//.add(Restrictions.eq("BatchNo",batch))
					.add(Restrictions.eq("Item.Id", mpc.getItem().getId())).list();
			StoreItemBatchStock stock=null;
			if(storeItemBatch.size()>0){
				stock=storeItemBatch.get(0);
				stock.setClosingStock(stock.getClosingStock().subtract(new BigDecimal(1)));
				hbt.update(stock);
			}
		}
		
		if(listA.size() != nTotalProcedure)
		{
			ProcedureDetails newDetailsId = new ProcedureDetails();
			newDetailsId.setProcedureHeader(procedureDetails.getProcedureHeader());
			newDetailsId.setProcedure(procedureDetails.getProcedure());
			newDetailsId.setFrequency(procedureDetails.getFrequency());
			newDetailsId.setStatus("n");
			newDetailsId.setNoOfDays(procedureDetails.getNoOfDays());
			newDetailsId.setFinalProcedureStatus("n");
			newDetailsId.setBillStatus("p");
			newDetailsId.setRemarks(procedureDetails.getRemarks());
			if(box.getString("AppointmentFlag").equalsIgnoreCase("y"))
			{
				newDetailsId.setNextAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
				newDetailsId.setAppointmentDate(HMSUtil.convertStringTypeDateToDateType(box.getString("AppointmentDate")));
				
			}
			else
			{
				newDetailsId.setAppointmentDate(procedureDetails.getAppointmentDate());
			}
			hbt.save(newDetailsId);
			hbt.refresh(newDetailsId);
		}
		else
		{
			// update all procedure detail row with final status
			
			for(ProcedureDetails dt: listA)
			{
				ProcedureDetails dt1 = new ProcedureDetails();
				dt1 =hbt.get(ProcedureDetails.class, dt.getId());
				if(dt1 != null)
				{
					dt1.setFinalProcedureStatus("y");
					hbt.update(dt1);
					hbt.refresh(dt1);
				}
			}
			
			
		}
			
		 try{
		if(procedureDetails != null)
		{
			procedureDetails.setStatus("y");
			procedureDetails.setProcedureDate(new Date());
			procedureDetails.setProcedureTime(time);
			procedureDetails.setNursingRemarks(remarks);
			hbt.update(procedureDetails);
			hbt.refresh(procedureDetails);
			flag=true;
		}
		 }catch(Exception e)
		 {
			  logger.error("Error in Save Nursing Care OPD : "+e.getStackTrace().toString());
		 }
		
		 datamap.put("flag", flag);
		 return datamap;
	}

	@Override
	public Map<String, Object> getProcedureDetailsForPopUp(Box box) {
		List<ProcedureDetails> procedureDetails = new ArrayList<ProcedureDetails>();
		Map<String,Object> datamap = new HashMap<String,Object>();
		
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		
		Criteria cr = null;
		int procedureDetailsId= box.getInt("procedureDetailsId");
		int frequencyId= box.getInt("frequencyId");
		int procedureHeaderId = box.getInt("procedureHeaderId");
		int nursingId= box.getInt("nursingId");
		List<MasProcedureItemMapping> mappings=session.createCriteria(MasProcedureItemMapping.class)
				.add(Restrictions.eq("Procedure.Id", nursingId)).list();
		if(mappings!=null && mappings.size()>0){
			box.put("itemId", mappings.get(0).getItem().getId());
		}
		List<StoreItemBatchStock> batchList =(List<StoreItemBatchStock>) getItemBatch(box).get("batchList");
		
		cr= session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "header").add(Restrictions.eq("header.Id", procedureHeaderId));
		cr.createAlias("Procedure", "nr").add(Restrictions.eq("nr.Id", nursingId)).addOrder(Order.asc("Id"));
		procedureDetails = cr.list();	
		datamap.put("batchList", batchList);
		datamap.put("procedureDetails",procedureDetails);
		return datamap;		
	
	}

	@Override
	public Map<String, Object> checkForAlreadyIssuedPrescribtion(String itemCode, int visitId,int hospitalId) {
		Session session=(Session)getSession();
		int itemId=0;
		String val="";
		itemId=getItemId1(itemCode);
		String itemName="";
		itemName=getItemName(itemId);
		List<Visit>visitList=new ArrayList<Visit>();
		visitList=session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).add(Restrictions.eq("Hospital.Id", hospitalId)) .list();
		int hinId=0;
		for(Visit visit:visitList){
			hinId=visit.getHin().getId();
		}
		//List<OpdPatientAllergyT>allergyTList=new ArrayList<OpdPatientAllergyT>();
		List<PatientPrescriptionDetails> prescriptionDetail=new ArrayList<PatientPrescriptionDetails>();
		
		prescriptionDetail=session.createCriteria(PatientPrescriptionDetails.class)
				.createAlias("Prescription", "Prescription")
				.createAlias("Prescription.Visit", "Visit").
				createAlias("Prescription.Hospital", "Hospital")
				.add(Restrictions.eq("Prescription.Hin.Id", hinId))
				.add(Restrictions.eq("Prescription.PrescriptionDate", new Date()))
				.add(Restrictions.eq("Item.Id", itemId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.list();
		
		/*allergyTList=session.createCriteria(OpdPatientAllergyT.class).createAlias("OpdPatientAllergy","OpdPatientAllergy").add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
				//.add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
				.list();*/
		Map<String,Object>map=new HashMap<String,Object>();
		map.put("prescriptionDetail", prescriptionDetail);
		boolean matched=false;
		if(null !=prescriptionDetail && prescriptionDetail.size()>0){
					matched=true;
		
		}
		map.put("matched",matched);
		return map;
	}  
	public Map<String,Object> makeFileOpdDetailFromServerToLean(Map<String,Object> mapObject,
			Map<String,List<Object>> mapListObject,MasHospital hospital){
		Map<String,Object> returnMap=new HashMap<String,Object>(); 
		String returnMessage="fail"; 
		try{
		OpdPatientDetails opdpatientDetail=(OpdPatientDetails) mapObject.get("OpdPatientDetails");
		Visit visit=opdpatientDetail.getVisit(); 
		PatientObservation pobb=(PatientObservation) mapObject.get("PatientObservation");
		QueueManagment queue=(QueueManagment) mapObject.get("QueueManagment");
		DischargeIcdCode dischargeIcd=(DischargeIcdCode) mapObject.get("DischargeIcdCode");  
		PatientInvestigationHeader patientInvestigationHd = (PatientInvestigationHeader) mapObject.get("PatientInvestigationHeader");
		OpdPatientAllergyM opdPatientAllergyMM = (OpdPatientAllergyM) mapObject.get("OpdPatientAllergyM"); 
		ProcedureHeader procedureHdr = (ProcedureHeader) mapObject.get("ProcedureHeader");
		OpdSurgeryHeader opdSurgeryHdr =  (OpdSurgeryHeader) mapObject.get("OpdSurgeryHeader");
		OpdPatientHistory patientHis = (OpdPatientHistory) mapObject.get("OpdPatientHistory"); 
		List<PatientInvestigationDetails> patientInvestigatinDetailsList =(List<PatientInvestigationDetails>)(Object) mapListObject.get("patientInvestigatinDetailsListObject");
		Session session=(Session) getSession();
		Patient patient=(Patient) session.get(Patient.class, patientHis.getHin().getId());
		
       
        			ORM_O01 orm_O01=new ORM_O01();
        			ORU_R01 message = new ORU_R01();
                  	message.getMSH().getEncodingCharacters().setValue("^~\\&");
				  	message.getMSH().getFieldSeparator().setValue("|");
        			MSH mshSegment =orm_O01.getMSH();
        			mshSegment.getMsh1_FieldSeparator().setValue("|");
                    mshSegment.getMsh2_EncodingCharacters().setValue("^~\\&");
                    //mshSegment.getMsh3_SendingApplication().setValue("HIS");...........
                    mshSegment.getMsh3_SendingApplication().setValue("INSTAPACS");
                    mshSegment.getMsh4_SendingFacility().setValue("");
                    mshSegment.getMsh5_ReceivingApplication().setValue("HMS");
                    //mshSegment.getMsh5_ReceivingApplication().setValue("EKG");
                    mshSegment.getMsh6_ReceivingFacility().setValue("");
                    // mshSegment.getMsh7_DateTimeOfMessage().getTimeOfAnEvent().setValue(HMSUtil.now("yyyyMMdd")+HMSUtil.now("Hmmss")); //commented by amit das on 30-07-2016
                    mshSegment.getMsh7_DateTimeOfMessage().getTimeOfAnEvent().setValue(HMSUtil.now("yyyyMMdd")+HMSUtil.now("HHmmss"));
                    mshSegment.getMsh9_MessageType().getCm_msg1_MessageType().setValue("ORM");
                    mshSegment.getMsh9_MessageType().getCm_msg2_TriggerEvent().setValue("O01");
                    //mshSegment.getMsh10_MessageControlID().setValue("1001");
                   // mshSegment.getMsh10_MessageControlID().setValue(""+1001);
                    mshSegment.getMsh11_ProcessingID().setValue("P");
                    mshSegment.getMsh12_VersionID().setValue("2.2");
                    
                    
                    //patient detail
                    PID pid=orm_O01.getPATIENT().getPID(); 
                    //visit detail
                    PV1 pv1=orm_O01.getPATIENT().getPV1();
                    //observation
                    OBR obr=orm_O01.getORDER().getORDER_DETAIL().getOBR();
                    //phramacy request 
                    //RXO rxo=orm_O01.getORDER().getORDER_DETAIL().getRXO();
                    ORC orc=orm_O01.getORDER().getORC();
                    //billing
                    BLG blg=orm_O01.getORDER().getBLG();
                    //pharmacy lab request
                    OBX obx = orm_O01.getORDER().getORDER_DETAIL().getOBX() ;  // added by amit das on 19-09-2017
                    
                    pv1.getPv138_DietType().setValue(visit.getDepartment().getId()+"");
                    if(mapObject.get("PatientPrescriptionHeader")!=null){
            			PatientPrescriptionHeader patientPrescriptionHd = (PatientPrescriptionHeader) mapObject.get("PatientPrescriptionHeader");
            			//************PatientPrescriptionHeader************// 
                        pv1.getPv115_AmbulatoryStatus(0).setValue(patientPrescriptionHd.getPrescriptionNo()); 
                        obr.getObr2_PlacerOrderNumber().getCm_placer1_UniquePlacerId().setValue(patientPrescriptionHd.getStatus());
                        
            			List<PatientPrescriptionDetails> patientPrescriptionDetailsList=(List<PatientPrescriptionDetails>)(Object)mapListObject.get("patientPrescriptionDetailsListObject");
            			 //**********************patientPrescriptionDetailsListObject***********************//
                        
                        StringBuilder item=new StringBuilder("");
                        StringBuilder feqId =new StringBuilder("");
                        StringBuilder doges=new StringBuilder("");
                        StringBuilder total=new StringBuilder("");
                        StringBuilder type=new StringBuilder("");
                        StringBuilder nursingStatus=new StringBuilder("");
                        StringBuilder injectionStatus=new StringBuilder("");
                        StringBuilder noOfDays=new StringBuilder("");
                        //accessing the value from PatientPrescriptionDetails table.
                        for(PatientPrescriptionDetails plist : patientPrescriptionDetailsList){
                        	item=item.append(plist.getItem().getId()+","); 
                        	if(plist.getFrequency() != null)
                        		feqId =feqId.append(plist.getFrequency().getId()+",");
                        	doges=doges.append(plist.getDosage()+",");
                        	total=total.append(plist.getTotal()+",");
                        	type=type.append(plist.getType()+",");
                        	nursingStatus=nursingStatus.append(plist.getNursingStatus()+",");
                        	injectionStatus=injectionStatus.append(plist.getInjectionStatus()+",");
                        	noOfDays=noOfDays.append(plist.getNoOfDays()+",");
                        }
                        //item id for PatientPrescriptionDetails
                        pid.getPid22_EthnicGroup().setValue(item.toString()); 
                        pv1.getPv128_InterestCode().setValue(feqId.toString()); 
                        pv1.getPv131_BadDebtAgencyCode().setValue(doges.toString());
                        pv1.getPv150_AlternateVisitID().getCm_pat_id_01921_IDNumber().setValue(type.toString()); 
                        pv1.getPv111_TemporaryLocation().getCm_internal_location3_Bed().setValue(nursingStatus.toString());
                        pv1.getPv129_TransferToBadDebtCode().setValue(injectionStatus.toString());
                        pv1.getPv117_AdmittingDoctor().getCn1_IDNumber().setValue(total.toString());
                        //pv1.getPv148_TotalAdjustments().setValue(noOfDays.toString());
                       pv1.getPv15_PreadmitNumber().setValue(noOfDays.toString());
                       
            		}  
            		if(mapObject.get("DgOrderhd")!=null){
            			DgOrderhd dgOrdhd = (DgOrderhd) mapObject.get("DgOrderhd");
            			 //***********DgOrderHeader***********************************//

                        obr.getObr15_SpecimenSource().getCm_sps3_Freetext().setValue(dgOrdhd.getTestType());                  
                        obr.getObr9_CollectionVolume().getCq_quantity2_Units().setValue(dgOrdhd.getPatientType());                  
                        pv1.getPv124_ContractCode(0).setValue(dgOrdhd.getOrderNo());           
                        obr.getObr3_FillerOrderNumber().getCm_filler1_UniqueFillerId().setValue(dgOrdhd.getPrescribedBy().getId()+"");
                        obr.getObr23_ChargeToPractice().getCm_moc1_DollarAmount().setValue(dgOrdhd.getNetAmount()+"");
                        obr.getObr19_PlacerField2().setValue(dgOrdhd.getOrderStatus());
            			List<DgOrderdt> dgOrderDetailsList= (List<DgOrderdt>)(Object) mapListObject.get("dgOrderDetailsListObject");
            			//******************************dgOrderDetailsListObject***************************
                        StringBuilder amt=new StringBuilder("");
                        StringBuilder packStatus=new StringBuilder("");
                        StringBuilder msgSent=new StringBuilder("");
                        StringBuilder payMode=new StringBuilder("");
                        StringBuilder OrderStatus=new StringBuilder("");
                        StringBuilder OrderQnty=new StringBuilder("");
                        StringBuilder mainChargId =new StringBuilder("");
                        StringBuilder subChargeId=new StringBuilder("");
                        StringBuilder chareCodeId=new StringBuilder("");
                        
                        StringBuilder billNo=new StringBuilder("");
                        StringBuilder billPatientStatus=new StringBuilder("");
                        StringBuilder billStatus=new StringBuilder("");
                        StringBuilder billDetialQauntity=new StringBuilder(""); 
                        StringBuilder billDetailRefundableStatus=new StringBuilder(""); 
                        
                        //accessing value from DgOrderDetials  table
                        for(DgOrderdt dgOrderDt : dgOrderDetailsList){
                        	amt = amt.append(dgOrderDt.getAmount()+",");
                        	packStatus=packStatus.append(dgOrderDt.getPacsStatus()+",");
                        	msgSent=msgSent.append(dgOrderDt.getMsgSent()+",");
                        	payMode=payMode.append(dgOrderDt.getPaymentMade()+",");
                        	OrderQnty=OrderQnty.append(dgOrderDt.getOrderQty()+",");
                        	OrderStatus=OrderStatus.append(dgOrderDt.getOrderStatus()+",");
                        	subChargeId=subChargeId.append(dgOrderDt.getSubChargeid().getId()+",");
                        	chareCodeId=chareCodeId.append(dgOrderDt.getChargeCode().getId()+",");
                        	mainChargId=mainChargId.append(dgOrderDt.getMainChargecode().getId()+",");
                        	if(dgOrderDt.getBill()!=null){
                                billNo=billNo.append(dgOrderDt.getBill().getBillNo()+",");
                                if("Y".equalsIgnoreCase(dgOrderDt.getBill().getPatientStatus())){
                                	billPatientStatus=billPatientStatus.append("1");
                                }else{
                                	billPatientStatus=billPatientStatus.append("0");
                                }
                                if("y".equalsIgnoreCase(dgOrderDt.getBill().getStatus())){
                                	billStatus=billStatus.append("1");
                                }else{
                                	billStatus=billStatus.append("0");
                                } 
                                Set<BlOpBillDetails> billDetails=dgOrderDt.getBill().getBlOpBillDetails();
                                if(billDetails!=null){ // added by amit das on 23-11-2016
                                for(BlOpBillDetails blOpBill:billDetails){
                                        if(blOpBill.getQuantity()!=null){
                                        	billDetialQauntity= billDetialQauntity.append(blOpBill.getQuantity()+",");
                                        }else{
                                        	billDetialQauntity= billDetialQauntity.append("0"+",");
                                        }if("Y".equalsIgnoreCase(blOpBill.getRefundableStatus())){
                                        	billDetailRefundableStatus=billDetailRefundableStatus.append("1");
                                        }else{
                                        	billDetailRefundableStatus=billDetailRefundableStatus.append("0");
                                        }
                                        
                                        
                                }
                              }
                        }else{
                                billNo=billNo.append("0"+",");
                                billPatientStatus=billPatientStatus.append("0");
                                billStatus=billStatus.append("0");
                        }
                        } 
                        pv1.getPv139_ServicingFacility().setValue(subChargeId.toString());
                        pv1.getPv143_PriorTemporaryLocation().getCm_internal_location3_Bed().setValue(chareCodeId.toString());
                        pid.getPid8_Sex().setValue(amt.toString());
                        pid.getPid20_DriverSLicenseNumberPatient().getLicenseNumber().setValue(msgSent.toString());
                        obr.getObr12_DangerCode().getCe2_Text().setValue(packStatus.toString());
                        obr.getObr20_FillerField1().setValue(payMode.toString());
                        blg.getBlg3_AccountID().getCk1_IDNumber().setValue(mainChargId.toString());
                        obr.getObr16_OrderingProvider().getCn1_IDNumber().setValue(OrderQnty.toString());
                        pv1.getPv119_VisitNumber().getCm_pat_id1_IDNumber().setValue(OrderStatus.toString());
                        
                        pv1.getPv134_DeleteAccountIndicator().setValue(billNo.toString());
                        //pv1.getPv149_TotalPayments().setValue(); 
                        pid.getPid18_PatientAccountNumber().getCheckDigit().setValue(billPatientStatus.toString());
                        pid.getPid25_BirthOrder().setValue(billStatus.toString()); 
                        obr.getObr32_PrincipalResultInterpreter().getCm_ndl1_InterpreterTechnician().getCn10_Telefon().setValue(billDetialQauntity.toString());
                        pv1.getPv11_SetIDPatientVisit().setValue(billDetailRefundableStatus.toString());

                       
            		}
            		
            		
            		// added by amit das on 18-09-2017 for pharmacy lab queue sync
            		if(visit!=null){
            				List<PharmacyLabQueue> pharmacyLabQueueList =	session.createCriteria(PharmacyLabQueue.class).add(Restrictions.eq("Visit.Id", visit.getId())).list();
            				if(pharmacyLabQueueList!=null && pharmacyLabQueueList.size()>0){
            					 StringBuilder tokenNo    = new StringBuilder("");
                                 StringBuilder department = new StringBuilder("");
                                 StringBuilder pharmacyLabStatus = new StringBuilder("");
                                 StringBuilder status = new StringBuilder("");
                                 StringBuilder totalHospitalVisit  = new StringBuilder("");
                                 StringBuilder dgOrderHd = new StringBuilder("");
                                 
            					for(PharmacyLabQueue phamLabQueue : pharmacyLabQueueList){
                                	tokenNo.append(((phamLabQueue.getTokenNo()!=null)?phamLabQueue.getTokenNo():"")+",");
                                	department.append(phamLabQueue.getDepartment().getId()+",");
                                	pharmacyLabStatus.append(phamLabQueue.getPharmacyLabStatus()+",");
                                	status.append(((phamLabQueue.getStatus()!=null)?phamLabQueue.getStatus():"")+",");
                                	totalHospitalVisit.append(((phamLabQueue.getTotalHospitalVisit()!=null)?phamLabQueue.getTotalHospitalVisit():"")+",");
                                	if(phamLabQueue.getDgOrderhdId()!=null)
                                		dgOrderHd.append("Y"+",");
                                	else
                                		dgOrderHd.append("N"+",");
                                }
            					
            					obx.getResponsibleObserver().getCn2_FamilyName().setValue(tokenNo.toString());
             					obx.getObx7_ReferencesRange().setValue(department.toString());
            					obx.getObservationIdentifier().getCe1_Identifier().setValue(pharmacyLabStatus.toString());
            					obx.getObservationSubID().setValue(status.toString());
            					obx.getObx10_NatureOfAbnormalTest().setValue(totalHospitalVisit.toString());
            					obx.getObx11_ObservationResultStatus().setValue(dgOrderHd.toString());
            					obx.getObx13_UserDefinedAccessChecks().setValue(pharmacyLabQueueList.size()+"");
            					
            				}
            				
            		}
            		
            		if((DgSampleCollectionHeader) mapObject.get("DgSampleCollectionHeader")!=null){
            			DgSampleCollectionHeader collHeaderhd = (DgSampleCollectionHeader) mapObject.get("DgSampleCollectionHeader");
            			//***********************DgSampleCollecionHeader*******************//
                        
                        //order Status from DgSampleCollectionHeader
                        obr.getObr10_CollectorIdentifier(0).getCn1_IDNumber().setValue(collHeaderhd.getOrderStatus());
                        obr.getObr13_RelevantClinicalInformation().setValue(collHeaderhd.getDepartment().getId()+"");
            			List<DgSampleCollectionDetails> dgSampleCollectionDeatilsList = (List<DgSampleCollectionDetails>)(Object) mapListObject.get("dgSampleCollectionDeatilsListObject");
            			 //**************************DgSampleCollectionDetails*********************
                        
                        StringBuilder collectedId =new StringBuilder("");
                        StringBuilder chargCodeIdDg=new StringBuilder("");
                        StringBuilder mainChargeIdDg=new StringBuilder("");
                        StringBuilder subChargdeIdDg=new StringBuilder("");
                        StringBuilder orderStatus=new StringBuilder("");
                        StringBuilder investigationId=new StringBuilder(""); 
                        //accessing value from DgSampleCollectionDetails table
                        for(DgSampleCollectionDetails dgSampleCollectionDt: dgSampleCollectionDeatilsList){
                        	collectedId=collectedId.append(dgSampleCollectionDt.getCollected()+",");
                        	chargCodeIdDg=chargCodeIdDg.append(dgSampleCollectionDt.getChargeCode().getId()+",");
                        	mainChargeIdDg=mainChargeIdDg.append(dgSampleCollectionDt.getMaincharge().getId()+",");
                        	subChargdeIdDg=subChargdeIdDg.append(dgSampleCollectionDt.getSubcharge().getId()+",");
                        	orderStatus=orderStatus.append(dgSampleCollectionDt.getOrderStatus()+",");
                        	investigationId=investigationId.append(dgSampleCollectionDt.getInvestigation().getId()+",");
                        	
                        }
                        blg.getBlg1_WhenToCharge().getCm_ccd1_WhenToCharge().setValue(collectedId.toString());
                        pv1.getPv142_PendingLocation().getCm_internal_location3_Bed().setValue(chargCodeIdDg.toString()); 
                        //pv1.getPv11_SetIDPatientVisit().setValue(investigationId.toString());
                        pid.getPid23_BirthPlace().setValue(investigationId.toString());
                        //obr.getObr8_ObservationEndDateTime().getTs1_TimeOfAnEvent().setValue(investigationId.toString());
                        pv1.getPv18_ReferringDoctor().getCn4_MiddleInitialOrName().setValue(mainChargeIdDg.toString());;
                        pv1.getPv17_AttendingDoctor().getCn1_IDNumber().setValue(subChargdeIdDg.toString());
                        pv1.getPv140_BedStatus().setValue(orderStatus.toString());
                        
            		}  
                  //hin no of patient
                    pid.getPid2_PatientIDExternalID().getCk1_IDNumber().setValue(patient.getHinNo());
                    
                    //************Visit************
                    pid.getPid19_SocialSecurityNumberPatient().setValue(visit.getVisitNo()+"");
                    pv1.getPv148_TotalAdjustments().setValue(visit.getAddEditBy().getId()+"");
                    //token number from Visit table
                    
                   // pv1.getPv149_TotalPayments().setValue(visit.getVisitStatus()+"");
                    pv1.getPv14_AdmissionType().setValue(visit.getVisitStatus()+"");
                    pid.getPid27_VeteransMilitaryStatus().setValue(visit.getTokenNo()+"");

                    pid.getPid17_Religion().setValue(visit.getAge()+"");
                
                    pid.getPid21_MotherSIdentifier().getCk1_IDNumber().setValue(visit.getStatus()+"");
                    //ed Status from visit table
                    pid.getPid5_PatientName().getPn1_FamilyName().setValue(visit.getEdStatus()+"");
                    //appointment type from visit
                    pv1.getPv118_PatientType().setValue(visit.getAppointmentType());
                    //rqd.getRqd4_HospitalItemCode().getCe2_Text().setValue(visit.getAppointmentType());
                    //curpharvisit status from visit
                    pv1.getPv141_AccountStatus().setValue(visit.getCurPharVisitStatus());
                    pv1.getPv14_AdmissionType().setValue(visit.getTotalHospitalVisit()+"");
                    //pv1.getPv140_BedStatus().setValue(visit.getTotalHospitalVisit()+"");
                    //priority number from visit table
                    pv1.getPv13_AssignedPatientLocation().getCm_internal_location2_Room().setValue(visit.getPriorityNumber()+"");
                    
                    
                    //*********OPDPateintDetials***********
                    obr.getObr1_SetIDObservationRequest().setValue(opdpatientDetail.getEmployee().getId()+"");
                    //BP from opdpatientDetail  
                    if(opdpatientDetail.getAdmissionAdvised()!=null){
                    	orc.getOrc5_OrderStatus().setValue(opdpatientDetail.getAdmissionAdvised());
                    }if(opdpatientDetail.getAdmissionWard()!=null && opdpatientDetail.getAdmissionWard().getId()!=null){
                    	orc.getOrc2_PlacerOrderNumber().getCm_placer1_UniquePlacerId().setValue(opdpatientDetail.getAdmissionWard().getId()+"");
                    }if(opdpatientDetail.getAdmissionDate()!=null){
                    	orc.getOrc10_EnteredBy().getCn1_IDNumber().setValue(opdpatientDetail.getAdmissionDate()+"");
                    }
                    pv1.getPv122_CourtesyCode().setValue(opdpatientDetail.getBp());
                    pv1.getPv110_HospitalService().setValue(opdpatientDetail.getHospital().getId()+"");
                    // rqd.getRqd6_RequisitionUnitOfMeasure().getCe2_Text().setValue(opdpatientDetail.getBp()); 
                  //Opd Time from opdpatientDetail
                    //Visit ID from OPD patient Details
                    obr.getObr29_ParentNumber().getCm_eip1_ParentSPlacerOrderNumber().setValue(opdpatientDetail.getVisit().getId()+",");
                    //Bmi from opdpatientDetail
                    obr.getObr26_ParentResult().getCm_parent_result2_SubIDOBX4OfParentResult().setValue(opdpatientDetail.getBmi()+"");
                    pv1.getPv116_VIPIndicator().setValue(opdpatientDetail.getPulse()+"");
                    pv1.getPv114_AdmitSource().setValue(opdpatientDetail.getTemperature()+"");
                    pv1.getPv146_CurrentPatientBalance().setValue(opdpatientDetail.getBmi()+"");
                    pid.getPid26_Citizenship(0).setValue(opdpatientDetail.getSystemicExamination());
                    
                    
                    //************************PatientObervation************************
                    
                    
                    //****************************PatientHistory*************************
                    //rqd.getRqd6_RequisitionUnitOfMeasure().getCe2_Text().setValue();
                    pv1.getPv123_CreditRating().setValue(patientHis.getStatus()+"");
                   
                    //pid.getPid18_PatientAccountNumber().getCheckDigit().setValue(patientHis.getIpOpPacStatus()+"");
                    //obr.getObr32_PrincipalResultInterpreter().getCm_ndl1_InterpreterTechnician().getCn10_Telefon().setValue(patientHis.getIpOpPacStatus()+"");
                    
                    //**********QueueManagment******************
                  //token no from Queue Managament table;
                    obr.getObr4_UniversalServiceID().getCe2_Text().setValue(queue.getTokenNo()+"");
                  //token status from Queue Mangament table
                    obr.getObr14_SpecimenReceivedDateTime().getTs2_DegreeOfPrecision().setValue(queue.getTokenStatus()+"");
                  //priority number from queue managament table
                   
                    obr.getObr5_PriorityNotused().setValue(queue.getPriorityNumber()+"");
                    //totalHospitalvisit from queue table
                    pv1.getPv16_PriorPatientLocation().getCm_internal_location3_Bed().setValue(queue.getTotalHospitalVisit()+"");
                    
                    
                    //*********DischargeIcdCode************//
                  //Diagnosis Status from discharge_icd_code
                    if(dischargeIcd!=null){  // added by amit das on 07-10-2016
                    obr.getObr24_DiagnosticServiceSectionID().setValue(dischargeIcd.getDiagnosisStatus());

                    obr.getObr18_PlacerField1().setValue(dischargeIcd.getStatus());
                  
                    //IcId code from DischargeIcdCode table
                   
                    pid.getPid4_AlternatePatientID().setValue(dischargeIcd.getIcd().getId()+"");
                    //rxo.getRxo16_NeedsHumanReview().setValue(dischargeIcd.getIcd().getId()+""); 
                    }
                    
                    
                   //**********PatientInvestigationHeader**************//
                    if(patientInvestigationHd!=null){
                    	obr.getObr27_QuantityTiming(0).getDuration().setValue(patientInvestigationHd.getInvestigationTime()); 
                        //STATUS OF PATIENT INVESTIGATIONHEADER
                        obr.getObr25_ResultStatus().setValue(patientInvestigationHd.getStatus()); 
                      //last_chng_Date
                        pv1.getPv144_AdmitDateTime().getTs2_DegreeOfPrecision().setValue(patientInvestigationHd.getInvestigationDate()+"");    
                    }
                   
                
               //********************************OpdPatientAllergyM*************************      
                     //Status of OPDPatientAlleryM
                     obr.getObr15_SpecimenSource().getCm_sps2_Additives().setValue(opdPatientAllergyMM.getStatus());
                    // rqd.getRqd10_DateNeeded().setValue(opdPatientAllergyMM.getStatus());

               //******************************ProcedureHeader**************************      

                 // pv1.getPv147_TotalCharges().setValue(procedureHdr.getStatus());
                  if(procedureHdr!=null) // added by amit das on 18-07-2017
                  obr.getObr21_FillerField2().setValue(procedureHdr.getStatus());
                 // pid.getPid25_BirthOrder().setValue(procedureHdr.getStatus());
                 //*****************OPDSurgeryHeader************************

                    //Patient Status from opdSurgeryHdr
                  	if(opdSurgeryHdr!=null){ // added by amit das on 23-11-2016
                    obr.getObr7_ObservationDateTime().getTs2_DegreeOfPrecision().setValue(opdSurgeryHdr.getPatientStatus()+"");
                    //billing Status from opdSurgeryHdr
                   
                    pid.getPid24_MultipleBirthIndicator().setValue(opdSurgeryHdr.getBillingStatus()+"");
                  	}
                   
                    //***************************patientInvestigatinDetailsListObject************************
                    StringBuilder chargeCId=new StringBuilder("");
                    //accessing value from PatientInvestigationDetails table
                    if(patientInvestigatinDetailsList!=null && patientInvestigatinDetailsList.size()>0){
                    	for(PatientInvestigationDetails patientInvesDet:patientInvestigatinDetailsList){
                        	chargeCId=chargeCId.append(patientInvesDet.getChargeCode().getId()+",");
                        
                        }
                    }
                    
                    obr.getObr6_RequestedDateTimeNotused().getTs2_DegreeOfPrecision().setValue(chargeCId.toString()+""); 
                    /*String testMsg="MSH|^~\\&|INSTAPACS||HMS||20160202113550||ORM^O01||P|2.2\r"
                    				+"PID||T000912201160002||663316|n|||0,0,|||||||||36 Years|^00|2|n,n,|y||733,|n|00|All System NAD|3\r"
                    				+"PV1|||^3|3||^^3|119,|^^^23,||1||||0.0||0||D|P,P,|||/|Y|129/2016||||||||||0,0,|||||35,119,|P,|Y|^^733,|^^12,733,|^Tue Feb 02 00:00:00 IST 2016||0.0||432\r"
                    				+"ORC|\r"
                    				+"OBR|955||955|^3|3|^12,733,|^OP||^OP|P||^n,n,|219|^C|^Y^Regular|1,1,||Y|P|n,n,|n||0|p|p|^0.0|^^11:32||2187918,\r"
                    				+"BLG|y,||17,23,";*/
                  
                    Parser p1 = new PipeParser(); 
			  	  	String encodedMessage = p1.encode(orm_O01); 
			  	  	String encMsg = p1.encode(message);
			  	  	String newString = encMsg.substring(8);
			  	  	Parser parser = PipeParser.getInstanceWithNoValidation();
			  	  	HohClientSimple client = new HohClientSimple(hospital.getClientIp(),Integer.parseInt(hospital.getClientPort()),
          				"/hms/hl7listserver", parser); 
			  	  	client.setResponseTimeout(6000000);
			  	  	HapiContext hapiContext = new DefaultHapiContext();
					Parser p = hapiContext.getGenericParser();
					returnMap.put("ORMMessage", encodedMessage+newString);
					try {
						Message hapiMsg2 = p.parse(encodedMessage+newString);
						/*ORM_O01 orm_O01Exm = (ORM_O01) hapiMsg2;
			            PV1 pv1 = orm_O01Exm.getPATIENT().getPV1();
			            String abc=pv1.getPv134_DeleteAccountIndicator() .getValue();
			            System.out.println("ajsjasas "+abc);
			            String abc2=pv1.getPv149_TotalPayments().getValue();
			            System.out.println("ajsjasas "+abc2);*/
						ISendable sendable = new MessageSendable(hapiMsg2);
						IReceivable<Message> receivable = client
								.sendAndReceiveMessage(sendable);
						Message hapiMsg = receivable.getMessage();
						String remoteHostIp = (String) receivable.getMetadata().get(
								MessageMetadataKeys.REMOTE_HOST_ADDRESS);


						Parser response_parser = new GenericParser();
						// Message hapiMsg;

						// The parse method performs the actual parsing
						// hapiMsg = response_parser.parse(responseString);

						if (hapiMsg instanceof ACK) {
							ACK ack = (ACK) hapiMsg;

							/*
							 * System.out.println("inside ach msh"+ack.getMSH().
							 * getMsh3_SendingApplication());
							 * System.out.println("inside ach msh"
							 * +ack.getMSH().getMsh5_ReceivingApplication());
							 * System.out.println
							 * ("inside ach msh"+ack.getMSH().getMsh4_SendingFacility());
							 * System.out.println("inside ach msh"+ack.getMSH().
							 * getMsh6_ReceivingFacility());
							 */

							 logger.info("Recieve acknowledge");

							 logger.info("inside ach msh "
									+ ack.getMSH().getMsh7_DateTimeOfMessage()
											.getTs1_TimeOfAnEvent());
							 logger.info("inside ach msh "
									+ ack.getMSH().getMsh9_MessageType()
											.getCm_msg1_MessageType());
							 logger.info("inside ach msh "
									+ ack.getMSH().getMsh10_MessageControlID());
							 logger.info("inside ach msh "
									+ ack.getMSH().getMsh11_ProcessingID());
							 logger.info("inside ach msh "
									+ ack.getMSH().getMsh12_VersionID());
							 logger.info("**********************************************************");
							 logger.info("inside ach msa  "
											+ ack.getMSA().getMsa1_AcknowledgementCode()
													.getValue());
							 logger.info("inside ach msa  "
									+ ack.getMSA().getMsa2_MessageControlID());
							 logger.info("inside ach msa  "
									+ ack.getMSA().getMsa3_TextMessage().getValue());
							 logger.info("**********************************************************");
							 logger.info("inside ach err1  "
									+ ack.getERR().getErr1_ErrorCodeAndLocation(0)
											.getCm_eld4_CodeIdentifyingError()
											.getCe2_Text().getValue());
							 logger.info("inside ach err2  "
									+ ack.getERR().getErr1_ErrorCodeAndLocation(0)
											.getCm_eld4_CodeIdentifyingError()
											.getCe1_Identifier());
							 logger.info("inside ach err3  "
									+ ack.getERR().getErr1_ErrorCodeAndLocation(0)
											.getCm_eld4_CodeIdentifyingError()
											.getCe3_NameOfCodingSystem());

							if (ack.getMSA().getMsa1_AcknowledgementCode().getValue()
									.equalsIgnoreCase("AA")
									&& ack.getMSA().getMsa3_TextMessage().getValue() == null
									&& ack.getERR().getErr1_ErrorCodeAndLocation(0)
											.getCm_eld4_CodeIdentifyingError()
											.getCe2_Text().getValue() == null) {

								 logger.info("order id Comming from server");  
								 logger.info("central OPD Data goes to lean server successfult"); 
								returnMessage="success";
								returnMap.put("message", returnMessage);
								return returnMap; 
							}

						} else {
							 logger.info("exit");
						}
					} catch (EncodingNotSupportedException e) {
						e.printStackTrace();
					} catch (HL7Exception e) {
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (DecodeException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (EncodeException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			  	  	
			  	  	
			  	  //	HibernateTemplate hbt = getHibernateTemplate();
					//hbt.setFlushModeName("FLUSH_EAGER");
					//hbt.setCheckWriteOperations(false);
			  	  //	CentralServerOpdData centralServerOpdData=new CentralServerOpdData();
			  	  //	centralServerOpdData.setOpdData(encodedMessage+newString);
			  	  	//centralServerOpdData.setOpdData(encodedMessage+newString);
			  	  //	centralServerOpdData.setLeanOpdId(Long.parseLong(opdpatientDetail.getId().toString()));
			  	  //	String notSaveToServer="N";
			  	  //	centralServerOpdData.setStatus(notSaveToServer);
			  	  //	centralServerOpdData.setHospitalId(Long.parseLong(visit.getHospital().getId()+""));
			  	  //	hbt.save(centralServerOpdData);
			  	  //	hbt.flush();
			  	  //	hbt.clear(); 
				// System.out.println("Done"); 
				// return "success";
        }catch(Exception e){
                e.printStackTrace();
               
        }
		returnMap.put("message", returnMessage);
		return returnMap;
        
}

	@Override
	public String getHinNo(int visitId) {
			String hinNo="";
			Session session=(Session)getSession();
			List<Visit>visitList=new ArrayList<Visit>();
			visitList=session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
			for(Visit visit:visitList){
				hinNo=visit.getHin().getHinNo();
			}
		return hinNo;
	}

	@Override
	public Map<String, Object> doPatientRelease(Map<String, Object> dataMap) {
		
		Map<String,Object> map = new HashMap<String,Object>();
		Session	 session=(Session)getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List<Visit> patientList = new ArrayList<Visit>();
		
		boolean flag= false;
		
		int visitId=0;
		int hospitalId=0;
		int deptId =0;
		
		Criteria crt=null;
		
		visitId = (Integer)dataMap.get("visitId");
		hospitalId = (Integer)dataMap.get("hospitalId");
		deptId = (Integer)dataMap.get("deptId");
		
		/*Criteria cr = session.createCriteria(Visit.class)
				.add(Restrictions.eq("VisitStatus", "w").ignoreCase())
				.add(Restrictions.eq("VisitDate", new Date()))
				.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId))
				.createAlias("Hospital", "hospital").add(Restrictions.eq("hospital.Id", hospitalId));*/
		
		
		
		Visit visit = new Visit();
		visit = (Visit)hbt.get(Visit.class, visitId);
		String currentTime= HMSUtil.currentTime();
		if(visit != null)
		{			
	    		    
	    	visit.setOpVisitTime(currentTime);
	    	visit.setVisitStatus("a"); // added by amit das on 10-02-2017
	    	visit.setTokenStatus("a");
			hbt.update(visit);
			hbt.refresh(visit);
			//tx.commit();
			//flag= true;
		}
		
		QueueManagment queue=new QueueManagment();
		crt=session.createCriteria(QueueManagment.class)
				.createAlias("Visit", "visit")
				.createAlias("Hospital", "hosp")
				.add(Restrictions.eq("hosp.Id", hospitalId))
				.add(Restrictions.eq("visit.Id", visitId));
		
		if(crt.list() !=null && crt.list().get(0) !=null){
			queue=(QueueManagment) crt.list().get(0);
			queue.setOpVisitTime(currentTime);
			queue.setTokenStatus("a");
			hbt.update(queue);
			hbt.refresh(queue);
			tx.commit();
			flag= true;
		}
						
		map.put("flag", flag);
		return map;
	}

	@Override
	public int getOrderId() {
		int orderId=0;
		Session session=(Session)getSession();
		List<OpdSurgeryHeader> headerList=new ArrayList<OpdSurgeryHeader>();
		headerList=session.createCriteria(OpdSurgeryHeader.class).addOrder(Order.desc("Id")).setMaxResults(1).list();
		for(OpdSurgeryHeader OpdSurgeryHeader:headerList){
			orderId=OpdSurgeryHeader.getId();
		}
		return orderId;
	}
	
	// Commented by dhananjay 08-feb-17
	/*public synchronized Map<String,Object> getTotalVistByHospital(int hospitalId, int departmentId, Date vdate,int pHinId,int opsessionId) {
		
		Map<String,Object> map=new HashMap<String,Object>();
		
		boolean ispreviouesToken=false;
		int TotaltokenNo = 0;
		List<Integer> token = null;
		Session session = (Session) getSession();
		
		String query = "select v.TotalHospitalVisit from Visit  v where  v.Hospital.Id=:hId and v.VisitDate=:date and v.Hin.Id=:hin and v.VisitSession.Id=:opsessionId";
		//String query = "select max(v.TotalHospitalVisit) from Visit  v where  v.Hospital.Id=:hId and v.VisitDate=:date ";

		Query qur = session.createQuery(query);
		qur.setParameter("hin", pHinId);
		qur.setParameter("hId", hospitalId);
		qur.setParameter("date", vdate);
		qur.setParameter("opsessionId", opsessionId);
		token = qur.list();
		if (null !=token && token.size()>0 && null !=token.get(0)) {
			TotaltokenNo = token.get(0);
			ispreviouesToken=true;
		}
		else{
			
		String qury = "select max(v.TotalHospitalVisit) from Visit  v where  v.Hospital.Id=:hId and v.VisitDate=:date and v.VisitSession.Id=:opsessionId";
		Query q = session.createQuery(qury);

		q.setParameter("hId", hospitalId);
		q.setParameter("date", vdate);
		q.setParameter("opsessionId", opsessionId);

		token = q.list();
		if (null != token.get(0)) {
			TotaltokenNo = token.get(0);

		}
		}
		map.put("TotaltokenNo", TotaltokenNo);
		map.put("ispreviouesToken", ispreviouesToken);
		return map;
	}
	
	public Map<String, Object> getReseveredTokenNo(int departmentId,
			int hospitalId) {
		
		Session session = (Session) getSession();
		List<AppPatientAppointments> patientAppointList = new ArrayList<AppPatientAppointments>();
		Map<String, Object> reservedTokenMap = new HashMap<String, Object>();
		Map<Integer, Object> patientWithTokenMap = new HashMap<Integer, Object>();
		Date currentDate = new Date();
		
		Criteria crt=null;
		
		crt=session.createCriteria(AppPatientAppointments.class);
		crt.createAlias("Hospital","hosp");
		crt.createAlias("Department", "dept");
		crt.add(Restrictions.eq("AppointmentDate", currentDate));
		.add(Restrictions.eq("RegisterVisit", "P"))
		crt.add(Restrictions.eq("AppointmentStatus", "y").ignoreCase());
		crt.add(Restrictions.eq("RegisteredStatus", "y").ignoreCase());
		crt.add(Restrictions.eq("hosp.Id", hospitalId));
		crt.add(Restrictions.eq("dept.Id", departmentId));
		
		patientAppointList=crt.list();
		
		if(null !=patientAppointList && patientAppointList.size()>0){
			for(AppPatientAppointments patientAppointment:patientAppointList){
				reservedTokenMap.put(String.valueOf(patientAppointment.getQueuePriority()), patientAppointment.getQueuePriority());
				patientWithTokenMap.put(patientAppointment.getHin().getId(), patientAppointment.getQueuePriority());
			}
			reservedTokenMap.put("patientWithTokenMap", patientWithTokenMap);
		}
		
		return reservedTokenMap;
	}
	@SuppressWarnings("unchecked")
	public synchronized int getTokenNoForRefferalDepartment(int departmentId,
			int hospitalId,int visitSessionId) {
		//

		List<Integer> tokenNoList = new ArrayList<Integer>();
		List<Integer> visit = new ArrayList<Integer>();
		int tokenNo = 0;
		Date date = new Date();
		Session session = (Session) getSession();
		System.out.println("departmentId " + departmentId);
		System.out.println("hospitalId " + hospitalId);

		// tokenNoList = getHibernateTemplate().find("select max(v.TokenNo) from
		// Visit v join v.Department as dept where dept.Id="+departmentId+" and
		// v.VisitDate="+date);
		String qury = "select max(v.TokenNo) from Visit v where v.VisitDate=:date and v.Department.Id=:dept and v.Hospital.Id=:h and v.AppointmentType=:appointmentType and v.VisitSession.Id=:visitSessionId";

		Query query = session.createQuery(qury);
		query.setParameter("date", new java.sql.Date(date.getTime()));
		query.setParameter("dept", departmentId);
		query.setParameter("h", hospitalId);
		query.setParameter("appointmentType", "D");
		query.setParameter("visitSessionId", visitSessionId);
		
		 Visit v = (Visit) query.uniqueResult(); 
		visit = query.list();
		if (visit.get(0) != null) {
			tokenNo = visit.get(0);
		}
		
		 * if(visit !=null){ for(Visit v:visit){ tokenNo=v.getTokenNo(); }
		 * 
		 * }
		 

		
		 * tokenNoList = session .createCriteria(Visit.class, "v")
		 * .add(Restrictions.eq("v.VisitDate", date)) .createAlias("Department",
		 * "dept") .add(Restrictions.eq("dept.Id", departmentId))
		 * .createAlias("Hospital", "h") .add(Restrictions.eq("h.Id",
		 * hospitalId)) .setProjection( Projections.projectionList().add(
		 * Projections.max("TokenNo"))).list();
		 * 
		 * 
		 * if (tokenNoList.get(0) != null) { tokenNo = tokenNoList.get(0); }
		 

		return tokenNo;
	}
	
*/	@Override
	public Map<String, Object> openVideoForDisplay(int imageId){
		
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Criteria crt=null;
		
		MasImagesDisplay masd=(MasImagesDisplay) session.load(MasImagesDisplay.class,imageId);
		map.put("masd", masd);
		return map;
 }

	@Override
	public Map<String, Object> displayTravelHistory(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PhMemberSurvey> phMemberSurveyList =new ArrayList<PhMemberSurvey>();
		List<PhOsTravelHistory> maxTravelHistoryList =new ArrayList<PhOsTravelHistory>();
		List<PhOsTravelHistory> phTravelHistoryList =new ArrayList<PhOsTravelHistory>();
		Session session = (Session) getSession();
		
		phMemberSurveyList=session.createCriteria(PhMemberSurvey.class).add(Restrictions.eq("Id", box.getInt("surveyId"))).list();
		
		if(phMemberSurveyList.size()>0){
			maxTravelHistoryList = session.createCriteria(PhOsTravelHistory.class).add(Restrictions.eq("MemberId", phMemberSurveyList.get(0).getMemberId().longValue()))
											.setProjection(Projections.max("Id")).list();
		
		if(maxTravelHistoryList.size()>0 && maxTravelHistoryList.get(0)!= null){
			phTravelHistoryList = session.createCriteria(PhOsTravelHistory.class).add(Restrictions.eq("Id", maxTravelHistoryList.get(0))).list();
		}
	}
		map.put("phTravelHistoryList", phTravelHistoryList);
		return map;
	}
	
	// added by amit das on 08-06-2016
	public Map<String, Object> getOutpatientListForSchemeChange(Map<String, Object> map) {

				Map<String, Object> dataMap = new HashMap<String, Object>();
				List<MasAuthorizer> authorizerList = new ArrayList<MasAuthorizer>();
				List<Object[]> list = new ArrayList<Object[]>();
				OpdPatientDetails opdPatientDetails = null;
				int deptId = 0;
				int hospitalId = 0;
				String hinNo = null;
				String patientName = null;
				Session session = null;
				String queryStr = null;
				try{
				if(map!=null && (map.get(DEPARTMENT_ID)!=null && map.get(HOSPITAL_ID)!=null) ){
					deptId	= (Integer)map.get(DEPARTMENT_ID);
					hospitalId	= (Integer)map.get(HOSPITAL_ID);
					hinNo	= (String)map.get("hinNo");
					patientName	= (String)map.get("patientName");
					queryStr = "select p.hin_id,v.visit_id, p.hin_no,p.full_name,ms.scheme_name,p.rsby_card_no, mh.hospital_name,bobh.documents from opd_patient_details opd "+
							"join visit v on opd.visit_id = v.visit_id "+
							"join patient p on p.hin_id = v.hin_id "+
							"join bl_op_bill_header bobh on bobh.visit_id = opd.visit_id "+
							"left join mas_scheme ms on ms.scheme_id = bobh.scheme_id "+
							"left join mas_hospital mh on mh.hospital_id = opd.hospital_id "+
							"where opd.hospital_id = :hospitalId  and v.department_id = :departmentId and (visit_status != 'C' and visit_status !='c')";
					
					session = (Session)getSession();
					
					authorizerList = session.createCriteria(MasAuthorizer.class)
							.add(Restrictions.eq("Status", "y").ignoreCase()).list();
					
						
					if(hinNo!=null && !map.get("hinNo").equals("")){
						queryStr = queryStr+ " and p.hin_no = :hinNo";
					}	
					
					if(patientName!=null && !map.get("patientName").equals("")){
						queryStr = queryStr+ " and p.full_name like '%"+patientName+"%'";
					}
						
					Query query = session
							.createSQLQuery(queryStr);
					
					if(hinNo!=null && !map.get("hinNo").equals("")){
						query.setParameter("hinNo", hinNo);
					}	
					
					query.setParameter("departmentId", deptId);
					query.setParameter("hospitalId", hospitalId);
					
					list = query.list();
					
					dataMap.put("opdPatientDetailsList", list);
					dataMap.put("authorizerList", authorizerList);
					
				 }
				} catch(Exception e){
					e.printStackTrace();
				}
				
				return dataMap;
			}
	
	
	// Added by Amit Das on 08-06-2016
	@Override
	public Map<String, Object> updatePatientScheme(Box box) {
					BlOpBillHeader blOpBillHeader = null;
					String result = null;

					Map<String, Object> map = new HashMap<String, Object>();
					List<MasAuthorizer> authorizerList = new ArrayList<MasAuthorizer>();
					List<Object[]> list = new ArrayList<Object[]>();
					OpdPatientDetails opdPatientDetails = null;
					int deptId = 0;
					int hospitalId = 0;
					int visitId = 0;
					String hinNo = null;
					String patientName = null;
					Session session = null;
					String queryStr = null;
					Query query =null;
					try {
						session = (Session)getSession();
						org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						List<BlOpBillHeader> blOpBillHeaderList  = session.createCriteria(BlOpBillHeader.class)
											.createAlias("Visit", "v").add(Restrictions.eq("v.Id", box.getInt("visitId"))).list();
						
						if(blOpBillHeaderList!=null && blOpBillHeaderList.size()>0)
							blOpBillHeader = blOpBillHeaderList.get(0);
						
						
						if(blOpBillHeader!=null){
						if (box.getInt("schemeList")!=0) {
							MasScheme masScheme = new MasScheme();
							masScheme = (MasScheme) session.load(MasScheme.class, box.getInt("schemeList"));
							blOpBillHeader.setScheme(masScheme);
						}
						if(box.getInt("authorizerId")!=0){
							MasAuthorizer masAuthorizer = new MasAuthorizer();
							masAuthorizer = (MasAuthorizer) session.load(MasAuthorizer.class, box.getInt("authorizerId"));
							blOpBillHeader.setAuthorizer(masAuthorizer);
						}
						
						if(box.get(DEPARTMENT_ID)!=null)
							deptId	= box.getInt(DEPARTMENT_ID);
							
						if(box.get(HOSPITAL_ID)!=null)	
							hospitalId	= box.getInt(HOSPITAL_ID);
						
						if(box.get("documents")!=null && !box.get("documents").trim().equals(""))
							blOpBillHeader.setDocuments(box.get("documents"));
						
						
						queryStr = "select p.hin_id,v.visit_id, p.hin_no,p.full_name,ms.scheme_name,p.rsby_card_no, mh.hospital_name,bobh.documents from opd_patient_details opd "+
								"join visit v on opd.visit_id = v.visit_id "+
								"join patient p on p.hin_id = v.hin_id "+
								"join bl_op_bill_header bobh on bobh.visit_id = opd.visit_id "+
								"left join mas_scheme ms on ms.scheme_id = bobh.scheme_id "+
								"left join mas_hospital mh on mh.hospital_id = opd.hospital_id "+
								"where opd.hospital_id = :hospitalId  and v.department_id = :departmentId and (visit_status != 'C' and visit_status !='c')";
						
					    query = session
								.createSQLQuery(queryStr);
						
						query.setParameter("departmentId", deptId);
						query.setParameter("hospitalId", hospitalId);
						
						
						hbt.update(blOpBillHeader);
						list = query.list();
						
						
						authorizerList = session.createCriteria(MasAuthorizer.class)
								.add(Restrictions.eq("Status", "y")).list();
						
						
						result = "successfully updated";
						}
						} catch (Exception e) {
							result = "failed";
						  e.printStackTrace();
					}
					// map.put("inpatientSet", inpatientList);
					map.put("message", result);
					map.put("authorizerList", authorizerList);
					map.put("opdPatientDetailsList", list);
					return map;
				}
	
		@Override
		public Map<String, Object> showNCDPattern(Box box) {
			Map<String,Object>map=new HashMap<String,Object>();
			Session session=(Session)getSession();
			Transaction tx=session.beginTransaction();
			Integer hinId=0;
			if(box.getInt("hinId")!=0){
				hinId=box.getInt("hinId");
			}
			
			if(hinId>0){
			Patient patient=(Patient)session.load(Patient.class, hinId);
			if(patient.getSex()!=null){
			map.put("genderId", patient.getSex().getId());
			}
			int memberSurveyId =0;
			if(patient.getMember()!=null){
				memberSurveyId = patient.getMember().getId();
				
				List<PhMemberSurvey> phMember = session.createCriteria(PhMemberSurvey.class)
						.add(Restrictions.eq("Id", memberSurveyId)).list();
				if(phMember.size()>0){
					Long memberSurvey=phMember.get(0).getMemberId();
					String member=String.valueOf(memberSurvey);
					if(memberSurvey!=null){
						List<PhDiseaseRegistrationScreening>phdList = session.createCriteria(PhDiseaseRegistrationScreening.class)
								                                             .add(Restrictions.eq("SuspectedNcd", "Yes").ignoreCase())
								                                          .add(Restrictions.eq("MemberId", memberSurvey))
								                                          
						                                                   .list();
						List<PhDiseaseRegistrationFollow>phdfollowup= session.createCriteria(PhDiseaseRegistrationFollow.class)
								                                              .add(Restrictions.eq("FollowupType", "NCDF").ignoreCase())
								                                              .add(Restrictions.eq("MemberId", member))
                                                                                          .list();  
						try {
							org.springframework.orm.hibernate3.HibernateTemplate hbt= getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							
						map.put("phdfollowup", phdfollowup);
						map.put("phdList", phdList);
						PhDiseaseRegistrationScreening phdObj=null;
						PhDiseaseRegistrationFollow phdFollow=null;
						if(phdList.size()>0){
						for(PhDiseaseRegistrationScreening phd :phdList){
							phdObj=(PhDiseaseRegistrationScreening)session.load(PhDiseaseRegistrationScreening.class, phd.getId());
							phdObj.setCheckedStatus("done");
							hbt.saveOrUpdate(phdObj);
							session.flush();
							session.clear();
						}
						}else{
							for(PhDiseaseRegistrationFollow phd :phdfollowup){
								phdFollow=(PhDiseaseRegistrationFollow)session.load(PhDiseaseRegistrationFollow.class, phd.getId());
								phdFollow.setCheckedStatus("done");
								hbt.saveOrUpdate(phdFollow);
								session.flush();
								session.clear();
						}
					}
			}
						catch (Exception e) {
							  e.printStackTrace();
						}
				}
			}
			}
			}
			tx.commit();
			return map;
			
		}
		
		@Override
		public Map<String, Object> showRNTCPDetail(Box box) {
			Map<String,Object>map=new HashMap<String,Object>();
			List<PhRevisedNationalTuberculosisScreening> phdList = new ArrayList<PhRevisedNationalTuberculosisScreening>();
			List<Object[]> objList = new ArrayList<Object[]>();
			List<Object[]> phdfollowup = new ArrayList<Object[]>();
			Session session=(Session)getSession();
			Transaction tx=session.beginTransaction();
			Integer hinId=0;
			if(box.getInt("hinId")!=0){
				hinId=box.getInt("hinId");
			}
			if(hinId>0){
			Patient patient=(Patient)session.load(Patient.class, hinId);
			int memberSurveyId =0;
			if(patient.getMember()!=null){
				memberSurveyId = patient.getMember().getId();
				
				List<PhMemberSurvey> phMember = session.createCriteria(PhMemberSurvey.class)
						.add(Restrictions.eq("Id", memberSurveyId)).list();
				if(phMember.size()>0){
					Long memberSurvey=phMember.get(0).getMemberId();
					
					
					if(memberSurvey!=null){
						/*List<PhDiseaseRegistrationScreening>phdList = session.createCriteria(PhDiseaseRegistrationScreening.class).add(Restrictions.eq("MemberId", memberSurvey))
						.list();*/
						   /* phdList = session.createCriteria(PhRevisedNationalTuberculosisScreening.class)
						     .createAlias("Member", "mem")
                             .add(Restrictions.eq("mem.MemberId", surveyId))
                              .list();*/
						/*  String qury ="select * from ph_revised_national_tuberculosis_screening prnts  inner join "
						  		+ "ph_member_survey pms on prnts.member_id=pms.member_id "
						        + " where pms.survey_id="+surveyId; //group by prnts.member_id
						  
						  Query query = getSession().createSQLQuery(qury).addEntity(PhRevisedNationalTuberculosisScreening.class);
						  List<PhRevisedNationalTuberculosisScreening> list = query.list();*/
						  
						String qry2= "select * from ph_revised_national_tuberculosis_screening as phrnts "
								+ " where phrnts.member_id ="+memberSurvey;
						objList=session.createSQLQuery(qry2).list();
						
						String qry1= "select * from ph_revised_national_tuberculosis_followup as rntcp "
								+ "where rntcp.member_id="+memberSurvey;
										
						//phdList=session.createSQLQuery(qry).list();
						phdfollowup=session.createSQLQuery(qry1).list();
						try {
							org.springframework.orm.hibernate3.HibernateTemplate hbt= getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							
						map.put("phdfollowup", phdfollowup);
						map.put("phdList", objList);
						PhRevisedNationalTuberculosisScreening phdObj=null;
						for(Object[] phd : objList){
							Integer prntsId = (Integer) phd[0];
							String query= "update ph_revised_national_tuberculosis_screening set checked_status = 'done'  "
									+ "where id="+prntsId;
							session.createSQLQuery(query).executeUpdate();
							//phdObj=(PhRevisedNationalTuberculosisScreening)session.load(PhRevisedNationalTuberculosisScreening.class,prntsId );
							//phdObj.setCheckedStatus("done");
							//hbt.saveOrUpdate(phdObj);
							session.flush();
							session.clear();
						}
					}
						catch (Exception e) {
							  e.printStackTrace();
						}
				}
			}
			}
			}
			tx.commit();
			return map;
			
		}
		@Override
		public Map<String, Object> showFpisRecord(Box box) {
			Map<String,Object>map=new HashMap<String,Object>();
			List<Object[]> fpisList = new ArrayList<Object[]>();
			Session session=(Session)getSession();
			Integer hinId=0;
			if(box.getInt("hinId")!=0){
				hinId=box.getInt("hinId");
			}
			if(hinId>0){
			Patient patient=(Patient)session.load(Patient.class, hinId);
			int memberSurveyId =0;
			if(patient.getMember()!=null){
				memberSurveyId = patient.getMember().getId();
				
				List<PhMemberSurvey> phMember = session.createCriteria(PhMemberSurvey.class)
						.add(Restrictions.eq("Id", memberSurveyId)).list();
				if(phMember.size()>0){
					Long memberSurvey=phMember.get(0).getMemberId();
					if(memberSurvey!=null){
						/*List<PhDiseaseRegistrationScreening>phdList = session.createCriteria(PhDiseaseRegistrationScreening.class).add(Restrictions.eq("MemberId", memberSurvey))
						.list();*/
						String qry= "select * from ph_fpis_registration as fpis "
										+ "left join ph_ecr_registration as ecr on fpis.member_id=ecr.member2_id or  fpis.member_id=ecr.member1_id "
										+ " left outer join mas_hospital as hosp on fpis.hospital_id=hosp.hospital_id "
										+ "where fpis.member_id="+memberSurvey;
										
						fpisList=session.createSQLQuery(qry).list();
						
						map.put("fpisList", fpisList);
					}
				}
			}
			}
			return map;
		}

		@Override
		public void displayCurrentPatientToken(Map map) {
			
			Map<String,Object> datamap=new HashMap<String,Object>();
			String date = null;
			String time = null;
			String searchFlag = null;
			Map<String, Object> utilMap = null;
			Session session=(Session)getSession();
			QueueManagment queueManagment=null;
			String[] specialCategoryStatusArray = {"S","E"};
			
			List<QueueManagment> queueList= new ArrayList<QueueManagment>();
					
			Users user = null; // added by amit das on 29-06-2016
			Criteria crt=null;
			String skipped = null;
			String recall = null;
			int visitId=0;
			long recallCount = 0;
			int nextFlag = 0;
			int hospitalId=0,skip=0,deptId=0,userId=0,docId=0;
			if (map.get("visitId") != null) {
				visitId = (Integer) map.get("visitId");
			}
			if (map.get("skip") != null) {
				skip = (Integer) map.get("skip");
			}
			if (map.get("skipped") != null) {
				skipped = (String) map.get("skipped");
			}
			if (map.get("nextFlag") != null) {
				nextFlag = (Integer) map.get("nextFlag");
			}
			
			
			if (map.get("searchFlag") != null) {
				searchFlag = (String) map.get("searchFlag");
			}
			
			if (map.get("hospitalId") != null) {
				hospitalId = (Integer) map.get("hospitalId");
			}
			if (map.get("deptId") != null) {
				deptId = (Integer) map.get("deptId");
			}
			// added by amit das on 29-06-2016
			if (map.get("docId") != null) {
				docId = (Integer) map.get("docId");
			}
			recall = (String) map.get("recall");
			
			
		   //added by govind 31-01-2017
			user = (Users) session.get(Users.class, docId);
			int doctorId=0;
			if(user!=null){
				doctorId=user.getEmployee().getId();
			}
			 logger.info("doctorId "+doctorId);
			queueList=session.createCriteria(QueueManagment.class)
					.createAlias("Docotor", "doc")
					.createAlias("Hospital", "hosp")
					.add(Restrictions.eq("hosp.Id", hospitalId))
					.add(Restrictions.eq("doc.Id",doctorId))
					.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
					.add(Restrictions.eq("LastChgDate", new Date()))
					.list();
			
			 logger.info("queueList "+queueList.size());
			
			if(queueList.size()>0){
				for(QueueManagment q:queueList){
					String visitStatus = q.getVisit().getVisitStatus();   // when recalling patient set token status in queue management according to visit status
					q.setTokenStatus(visitStatus);
					session.update(q);
				}
			}
			//added by govind 31-01-2017 end
			
			crt=session.createCriteria(QueueManagment.class)
					.createAlias("Visit", "visit")
					.createAlias("Hospital", "hosp")
					.add(Restrictions.eq("visit.Id", visitId))
					.add(Restrictions.eq("hosp.Id", hospitalId));
			if(crt.list().size()>0) {
				queueManagment=(QueueManagment) crt.list().get(0);
				queueManagment.setTokenStatus("Y");
			}
			
			if((skipped!=null && !skipped.equals("0")) || nextFlag!=0){
				
				if(doctorId!=0){
				List<QueueManagment> oldEmergencyQueueList = session.createCriteria(QueueManagment.class).createAlias("Visit", "v")
						.add(Restrictions.eq("v.VisitDate", new Date()))
						.add(Restrictions.ne("v.VisitStatus", "c").ignoreCase())
						.add(Restrictions.ne("v.VisitStatus", "a").ignoreCase())
						.add(Restrictions.ne("v.VisitStatus", "p").ignoreCase())
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.in("PatientSpecialCategory",specialCategoryStatusArray))
						.add(Restrictions.eq("AssignedDoctorId", doctorId)).list();
				if(oldEmergencyQueueList!=null && oldEmergencyQueueList.size()>0){
					for(QueueManagment qManagment : oldEmergencyQueueList){
						Visit emergencyPatientVisit = qManagment.getVisit();
						
						qManagment.setPatientSpecialCategory("C");
						emergencyPatientVisit.setDisplayAfterNo(emergencyPatientVisit.getLastDisplayAfterNo());
						session.update(qManagment);
						session.update(emergencyPatientVisit);
					}
				  }
				}
				
				if(nextFlag==0){
					queueManagment.setPatientSpecialCategory(skipped);
					Visit visit = queueManagment.getVisit();
					visit.setDisplayAfterNo(-1);
					session.update(visit);
				}
			}
			
			if(recall!=null && recall.equalsIgnoreCase("y")){
				Visit visit = queueManagment.getVisit();
				//visit.setDisplayAfterNo(0);
				if(visit.getRecallCount()!=null)
					recallCount = visit.getRecallCount();
					
				visit.setRecallCount(recallCount+1);
				queueManagment.setAssignedDoctorId(user.getEmployee().getId());
				visit.setDisplayAfterNo(-1);
				session.update(queueManagment);
				session.update(visit);
				}
				
			//user = (Users) session.get(Users.class, docId);
			if(user!=null && user.getEmployee()!=null && !"".equals(user.getEmployee()))	
				queueManagment.setDocotor(user.getEmployee());
			
		if (searchFlag!=null && searchFlag.equals("1")) {
			queueManagment.setAssignedDoctorId(user.getEmployee().getId());
			/*Criteria criteria = session
					.createCriteria(QueueManagment.class)
					.createAlias("Visit", "v")
					.createAlias("v.Doctor", "docotor",
							CriteriaSpecification.LEFT_JOIN)
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("v.VisitDate", date))
					.add(Restrictions.ne("v.VisitStatus", "c").ignoreCase())
					.add(Restrictions.ne("v.VisitStatus", "a").ignoreCase())
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("dept.Id", deptId));

			if (user.getEmployee() != null) {
					criteria.add(Restrictions.eq("AssignedDoctorId",
							user.getEmployee().getId()));
			}
			criteria.setMaxResults(2);
			criteria.addOrder(Order.asc("v.DisplayAfterNo"));
			criteria.addOrder(Order.asc("v.TokenNo"));
			criteria.setProjection(Projections.projectionList().add(
					Projections.property("Visit")));
			List<Visit> visitList = criteria.list();
			newDisplayAfterNo =	visitList.get(visitList.size()-1).getDisplayAfterNo();*/
			
		}

			// added by amit das on 21-06-2016
			utilMap = (Map) HMSUtil.getCurrentTime();
			if(utilMap!=null && utilMap.get("currentDate")!=null && utilMap.get("currentTime")!=null){
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");

			queueManagment.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
			queueManagment.setOpVisitTime(time);
			queueManagment.setLastChgTime(time);
			}
			
			session.update(queueManagment);
			session.flush();
			
			
		}
		
		// added by amit das on 22-06-2016
		@Override
		public Map<String, Object> getWaitingQueueJspData(Map<String, Object> mapForDS) {
			Map<String, Object> map = null;
			List<MasImagesDisplay> masimgList = null;
			List<MasImagesDisplay> videoList = null;
			List<TokenDisplayIp> tokenDisplayIps = null;
			MasHospital masHospital = null;
			Session session = null;
			int hospitalId=0;
			Date currentDate = null;
			// String ipAddress = null;  //commented by amit das on 19-01-2017
			String displayName = null; //added by amit das on 19-01-2017
			int deptId=0;
			
			try {
				session = (Session) getSession();
				currentDate = new Date();
				map = new HashMap<String, Object>();
				
				if(mapForDS.get("hospitalId") != null){
					hospitalId = (Integer) mapForDS.get("hospitalId");	
				} else if(mapForDS.get("flag") != null && mapForDS.get("displayName")!=null){
					// ipAddress =	(String)mapForDS.get("ipAddress"); //commented by amit das on 19-01-2017
					displayName = (String)mapForDS.get("displayName");  //added by amit das on 19-01-2017
					/*tokenDisplayIps = session.createCriteria(TokenDisplayIp.class)
							.add(Restrictions.eq("IpAddress", ipAddress)).list();*/ //commented by amit das on 19-01-2017
					
					tokenDisplayIps = session.createCriteria(TokenDisplayIp.class)
							.add(Restrictions.eq("DisplayName", displayName)).list(); //added by amit das on 19-01-2017
					if(tokenDisplayIps!=null && tokenDisplayIps.size()>0){
						hospitalId = 	tokenDisplayIps.get(0).getHospital().getId();
					}
				}
				
				if(mapForDS.get("deptId") != null){
					deptId = (Integer) mapForDS.get("deptId");	
				} 
				masHospital =	getHibernateTemplate().get(MasHospital.class, hospitalId);
				masimgList = session.createCriteria(MasImagesDisplay.class)
						.createAlias("Hospital", "h")
						//.createAlias("Hospital", "h")
						.add(Restrictions.eq("h.Id", hospitalId))
						//.add(Restrictions.eq("LastChgDate", currentDate))
						.list();
			
				videoList = session.createCriteria(MasImagesDisplay.class)
					.createAlias("Hospital", "h")
					//.createAlias("Hospital", "h")
					.add(Restrictions.eq("h.Id", hospitalId))
					//.add(Restrictions.isNotNull("Video"))
					
					//.add(Restrictions.eq("LastChgDate", currentDate))
					.list();

				map.put("masHospital", masHospital);
				map.put("masimgList", masimgList);
				map.put("videoList", videoList);											
			} catch (Exception e) {
				e.printStackTrace();
			}
			return map;
		}
		
		
		
		// added by amit das on 22-06-2016
		@Override
		public Map<String, Object> getWaitingQueue(Map<String, Object> mapForDS) {
			Map<String, Object> map = null;
			List<QueueManagment> queueList =new ArrayList<QueueManagment>();
			HashMap<Users,Integer> userMap = new HashMap<Users, Integer>(); // added by amit das on 23-06-2017
			List<QueueManagment> currentqueueList = new ArrayList<QueueManagment>();
			List<QueueManagmentDetails> queueManagmentDetaillist =new ArrayList<QueueManagmentDetails>();
			List<TokenDisplayIp> tokenDisplayIps = null;
			List<Object[]> departmentList = null;
			List<Integer> departmentIdList = null;
			QueueManagmentDetails queueManagmentDetails = null;
			MasDepartment masDepartment = null;
			MasHospital masHospital = null;
			Session session = null;
			Criteria criteria = null;
			int userId = 0;
			int deptId = 0;
			int hospitalId=0;
			Date currentDate = null;
			String flag = null;
			String displayName = null;
			int docId=0;
			
			try {
				session = (Session) getSession();
				currentDate = new Date();
				map = new HashMap<String, Object>();
				
				if (mapForDS.get("docId") != null) {
					docId = (Integer) mapForDS.get("docId");
				}
				
				if (mapForDS.get("deptId") != null) {
					deptId = (Integer) mapForDS.get("deptId");
				}
				if(mapForDS.get("hospitalId") != null){
					hospitalId = (Integer) mapForDS.get("hospitalId");	
				}
				// added by amit das on 04-11-2016
				if (mapForDS.get("displayName") != null) {
					displayName = (String) mapForDS.get("displayName");
				}
				// added by amit das on 04-11-2016
				if (mapForDS.get("flag") != null) {
					flag = (String) mapForDS.get("flag");
				}
				
				
				if(flag!=null && flag.equalsIgnoreCase("open") && displayName!=null && !displayName.trim().equals("")){
					 logger.info("displayName == "+displayName);
					departmentList = session.createCriteria(MasInstituteDepartment.class).createAlias("Department", "d")
									 .createAlias("TokenDisplayIp", "ip").add(Restrictions.eq("ip.DisplayName", displayName)).add(Restrictions.eq("Status", "y").ignoreCase())
									 .setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("d.Id")).add(Projections.property("d.DepartmentName"))))
									 .list();
					tokenDisplayIps = session.createCriteria(TokenDisplayIp.class).add(Restrictions.eq("DisplayName", displayName)).list();
					
					if(tokenDisplayIps!=null && tokenDisplayIps.size()>0){
						hospitalId = 	tokenDisplayIps.get(0).getHospital().getId();
					}
					if(departmentList!=null && departmentList.size()>0){
						departmentIdList = new ArrayList<Integer>();
						for(Object departmentArray[] : departmentList){
							departmentIdList.add((Integer) departmentArray[0]);
						}
					}
				} else if(mapForDS.get("userId")!=null && !mapForDS.get("userId").equals("0")){
					userId = (Integer)mapForDS.get("userId");
					departmentList= session.createCriteria(QueueManagment.class)
							.createAlias("Hospital", "h")
							.createAlias("Department", "d")
							.add(Restrictions.eq("h.Id", hospitalId))
							.add(Restrictions.eq("LsCngDate", currentDate))
							.setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("d.Id")).add(Projections.property("d.DepartmentName"))))
							.addOrder(Order.asc("d.DepartmentName")) .list();
				} 
				
				masHospital =	getHibernateTemplate().get(MasHospital.class, hospitalId);
				//changed by govind 9-12-2016
			/*	if(departmentList!=null && departmentList.size()>0) {
				queueManagmentDetaillist = new ArrayList<QueueManagmentDetails>();
				
				for(Object[] departmentObjects : departmentList){	
				queueManagmentDetails = new QueueManagmentDetails();
				queueList = session.createCriteria(QueueManagment.class)
							.createAlias("Hospital", "h")
							.createAlias("Department", "d")
							.createAlias("Visit", "v")
							.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
							.add(Restrictions.eq("h.Id", hospitalId))
							.add(Restrictions.eq("d.Id", departmentObjects[0]))
							.add(Restrictions.eq("LsCngDate", currentDate))
							.addOrder(Order.asc("OpVisitTime"))
							.addOrder(Order.asc("PriorityNumber"))
							.addOrder(Order.asc("d.Id"))
							.addOrder(Order.desc("LastChgTime")) 
							.setFirstResult(0)
							.setMaxResults(2)
							.list();
				
				currentqueueList = session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("Visit", "v")
						.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
						.add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.eq("d.Id", departmentObjects[0]))
						.add(Restrictions.eq("LsCngDate", currentDate))
						.addOrder(Order.desc("LastChgTime"))
						.addOrder(Order.asc("OpVisitTime"))
						.addOrder(Order.asc("PriorityNumber"))
						.addOrder(Order.asc("d.Id"))
						.setFirstResult(0)
						.setMaxResults(1)
						.list();
				
				masDepartment = new MasDepartment();
				masDepartment.setId((Integer)departmentObjects[0]);
				masDepartment.setDepartmentName((String)departmentObjects[1]);
				queueManagmentDetails.setDepartment(masDepartment);
				queueManagmentDetails.setQueueList(queueList);
				queueManagmentDetails.setCurrentqueueList(currentqueueList);
				queueManagmentDetaillist.add(queueManagmentDetails);	
				
			/*	// added by amit das on 22-06-2016 
				if(currentqueueList==null || currentqueueList.size()==0 )
					waitingQueueList = session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("Visit", "v")
						.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
						//.addOrder(Order.asc("TokenNo"))
						
						.add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.eq("d.Id", deptId))
						.add(Restrictions.eq("LsCngDate", currentDate))
						.addOrder(Order.asc("OpVisitTime"))
						.addOrder(Order.asc("PriorityNumber"))
						.addOrder(Order.asc("d.Id"))
						.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
						.setFirstResult(0)
						.setMaxResults(2)
						.list();	*/
			/*	}
			}*/
				
			/*System.out.println("departmentListdepartmentList == "+departmentList.size());
			System.out.println("departmentIdListdepartmentIdList == "+departmentIdList.size());*/
			criteria =	session.createCriteria(QueueManagment.class)
				.createAlias("Hospital", "h")
				.createAlias("Department", "d")
				.createAlias("Visit", "v")
				/*.createAlias("Docotor", "docId")*/
				.add(Restrictions.eq("h.Id", hospitalId));
			
			if(deptId!=0){ // condition added by amit das on 15-12-2016	
			criteria = criteria
			.add(Restrictions.eq("d.Id", deptId));
			/*.add(Restrictions.eq("docId.Id", docId))*/
			} else if(departmentList!=null) { // else condition added by amit das on 15-12-2016	
				criteria = criteria
						.add(Restrictions.in("d.Id", departmentIdList));
			}
			currentqueueList = 	criteria.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
						//.add(Restrictions.eq("LsCngDate", currentDate)) 
							.add(Restrictions.eq("LastChgDate", currentDate))
						//.addOrder(Order.desc("LastChgTime"))
						.addOrder(Order.desc("OpVisitTime"))
						//.addOrder(Order.asc("PriorityNumber"))
						.addOrder(Order.asc("d.Id")).list();
						//.setFirstResult(0)
						//.setMaxResults(1)
	
			
			map.put("currentqueueList", currentqueueList);
			
			 logger.info("currentqueueList == "+currentqueueList.size());
			//changed by govind 9-12-2016 end
				map.put("queueManagmentDetaillist", queueManagmentDetaillist);
				
				 logger.info("HospitalId "+hospitalId);
				//added by govind 04-02-2017
				List<Users> userList =new ArrayList<Users>();
				userList.addAll(session.createCriteria(Users.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("d.DepartmentType", "dt")
						.add(Restrictions.eq("h.Id", hospitalId))
						//.add(Restrictions.eq("dt.DepartmentTypeName","OP Clinic").ignoreCase())
						.add(Restrictions.in("d.Id", departmentIdList))
						.add(Restrictions.eq("LoginStatus", "y").ignoreCase())
						.add(Restrictions.eq("LastSuccessfulLoginDate", currentDate))
				.addOrder(Order.asc("LastSuccessfulLoginTime")).list());
				
				
				// added by amit das on 23-06-2017
				/*if(userList!=null && userList.size() >0){
					for(Users user : userList){
						queueList =	session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
									.createAlias("Department", "d")
									.createAlias("Visit", "v")
									.createAlias("Docotor", "doc")
									.add(Restrictions.eq("h.Id", hospitalId))
									.add(Restrictions.eq("doc.Id", user.getEmployee().getId()))
									.add(Restrictions.in("d.Id", departmentIdList))
									.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
									.add(Restrictions.eq("LsCngDate", currentDate)).list();
						
							userMap.put(user, queueList.size());
					}
				}*/  //commented by amit das on 22-08-2017
				
				map.put("userList", userList);
				map.put("userMap", userMap);
				map.put("hospitalId", hospitalId);
				//added by govind 04-02-2017 end
			map.put("masHospital", masHospital);	
			
			} catch (Exception e) {
				e.printStackTrace();
			}
			return map;
				}
		
		// added by amit das on 30-06-2016
		@Override
		public Map<String, Object> showPopupTokenList(Map<String, Object> mapForDS) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<QueueManagment> queueList = new ArrayList<QueueManagment>();
			
			List<QueueManagment> currentqueueList = new ArrayList<QueueManagment>();
			List<QueueManagment> waitingQueueList = new ArrayList<QueueManagment>();
			Session session = null;
			session = (Session) getSession();
			
			try {
				
				int deptId = 0;
				int hospitalId=0;
				if (mapForDS.get("deptId") != null) {
					deptId = (Integer) mapForDS.get("deptId");
				}
				if(mapForDS.get("hospitalId") != null){
					hospitalId = (Integer) mapForDS.get("hospitalId");	
				}
				Date currentDate = new Date();
				
				queueList = session.createCriteria(QueueManagment.class)
							.createAlias("Hospital", "h")
							.createAlias("Department", "d")
							.createAlias("Visit", "v")
							.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
							//.addOrder(Order.asc("TokenNo"))
							
							.add(Restrictions.eq("h.Id", hospitalId))
							.add(Restrictions.eq("d.Id", deptId))
							.add(Restrictions.eq("LsCngDate", currentDate))
							.addOrder(Order.asc("OpVisitTime"))
							.addOrder(Order.asc("PriorityNumber"))
							.addOrder(Order.asc("d.Id"))
							.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
							.setFirstResult(0)
							.setMaxResults(1)
							.list();	
				
				currentqueueList = session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("Visit", "v")
						.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
						//.addOrder(Order.asc("TokenNo"))
						
						.add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.eq("d.Id", deptId))
						.add(Restrictions.eq("LsCngDate", currentDate))
						.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
						.addOrder(Order.asc("OpVisitTime"))
						.addOrder(Order.asc("PriorityNumber"))
						.addOrder(Order.asc("d.Id"))
						.setFirstResult(0)
						.setMaxResults(1)
						.list();
				
				// added by amit das on 22-06-2016 
				if(currentqueueList==null || currentqueueList.size()==0 )
				waitingQueueList = session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("Visit", "v")
						.add(Restrictions.eq("TokenStatus", "w").ignoreCase())
						//.addOrder(Order.asc("TokenNo"))
						
						.add(Restrictions.eq("h.Id", hospitalId))
						.add(Restrictions.eq("d.Id", deptId))
						.add(Restrictions.eq("LsCngDate", currentDate))
						.addOrder(Order.asc("OpVisitTime"))
						.addOrder(Order.asc("PriorityNumber"))
						.addOrder(Order.asc("d.Id"))
						.addOrder(Order.desc("LastChgTime")) // added by amit das on 21-06-2016
						.setFirstResult(0)
						.setMaxResults(2)
						.list();	
				
				map.put("currentqueueList", currentqueueList);
				map.put("queueList", queueList);
				map.put("waitingQueueList", waitingQueueList); // added by amit das on 22-06-2016
			
			} catch (Exception e) {
				e.printStackTrace();
			}// finally{
			/**
			 * session.close() is done By Ramdular Prajapati Date 12 May 2010
			 */
			/*
			 * if(session!=null){ session.close(); } }
			 */
			return map;
		}

		public Map<String, Object> saveNicuCaseRecord(Map<String, Object> map,Box box) {
			MasSpecialtyTemplate masSpecialtyTemplate = null;
			try{
				Session session = (Session) getSession();
				Transaction tx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
						
				Double height=0.0;
				Double weight=0.0;
				if (box.getString("heightNicu") != null && !box.getString("heightNicu").equals("")){
					height =Double.parseDouble(box.get("heightNicu"));
				}
				if (box.getString("weightNicu") != null && !box.getString("weightNicu").equals("")){
					weight = Double.parseDouble(box.get("weightNicu"));
				}
				Double headCircumferenceNicu=0.0;
				if (box.getString("headCircumferenceNicu") != null && !box.getString("headCircumferenceNicu").equals("")){
					headCircumferenceNicu = Double.parseDouble(box.get("headCircumferenceNicu"));
				}
				
				/*
				String posture="";
				if (map.get("posture") != null){
					posture = (String) map.get("posture");
				}
				String squareWindow="";
				if (map.get("squareWindow") != null){
					squareWindow = (String) map.get("squareWindow");
				}
				String armRecoil="";
				if (map.get("armRecoil") != null){
					armRecoil = (String) map.get("armRecoil");
				}
				String poplitcalAngle="";if (map.get("poplitcalAngle") != null){
					poplitcalAngle = (String) map.get("poplitcalAngle");
				}
				String scarfSign="";
				if (map.get("scarfSign") != null){
					scarfSign = (String) map.get("scarfSign");
				}
				String heelToEar="";
				if (map.get("heelToEar") != null){
					heelToEar = (String) map.get("heelToEar");
				}
				String skin="";
				if (map.get("skin") != null){
					skin = (String) map.get("skin");
				}
				String lanuge="";
				if (map.get("lanuge") != null){
					lanuge = (String) map.get("lanuge");
				}
				String planterSurface="";
				if (map.get("planterSurface") != null){
					planterSurface = (String) map.get("planterSurface");
				}
				String breast="";
				if (map.get("breast") != null){
					breast = (String) map.get("breast");
				}
				String eyeEar="";
				if (map.get("eyeEar") != null){
					eyeEar = (String) map.get("eyeEar");
				}
				String genilalsMale="";
				if (map.get("genilalsMale") != null){
					genilalsMale = (String) map.get("genilalsMale");
				}
				String genilalsFemale="";
				if (map.get("genilalsFemale") != null){
					genilalsFemale = (String) map.get("genilalsFemale");
				}*/
				int week=0;
				if (map.get("week") != null){
					week = (Integer) map.get("week");
				}
				/*BigDecimal headCircumference=null;
				if (map.get("headCircumference") != null){
					headCircumference = (BigDecimal) map.get("headCircumference");
				}*/
				OpdPatientDetails opdPatientDetails =null;
				if (map.get("opdPatientDetails") != null){
					opdPatientDetails = (OpdPatientDetails) map.get("opdPatientDetails");
				}
				int hinId=0;
				if(map.get("hinId")!=null){
					hinId=(Integer)  map.get("hinId");	
				}
				String templateName="";
				if (map.get("templateName") != null){
					templateName = (String) map.get("templateName");
				}
				

					
		
					
				/*Nicu Case Record*/
				OpdNicuCaseRecord opdNicuCaseRecord = new OpdNicuCaseRecord();
	
			
				//if(height!=0 || weight!=0||!posture.equals("")||!armRecoil.equals("")||!breast.equals("")||!eyeEar.equals("")||!genilalsFemale.equals("")||!genilalsMale.equals("")||!genilalsMale.equals("")||!heelToEar.equals("")||!lanuge.equals("")||!planterSurface.equals("")||!poplitcalAngle.equals("")||!scarfSign.equals("")||!skin.equals("")||!squareWindow.equals("")||week!=0||!headCircumference.equals(""))
				//{
				List<OpdNicuCaseRecord> opdNicuCaseRecordList = new ArrayList<OpdNicuCaseRecord>();
				opdNicuCaseRecordList=session.createCriteria(OpdNicuCaseRecord.class).createAlias("OpdPatientDetails", "opd")
						.add(Restrictions.eq("opd.Id",opdPatientDetails.getId())).list();
				if(opdNicuCaseRecordList.size()>0)
				{			
					int opdNicuCaseRecordId =0;
					for(OpdNicuCaseRecord onr:opdNicuCaseRecordList){
					
						 opdNicuCaseRecordId = onr.getId();
					}
					opdNicuCaseRecord = (OpdNicuCaseRecord)hbt.load(OpdNicuCaseRecord.class, opdNicuCaseRecordId);
					
					opdNicuCaseRecord.setOpdPatientDetails(opdPatientDetails);
					opdNicuCaseRecord.setHin(new Patient(hinId));
					//opdNicuCaseRecord.setPosture(posture);
					
					if(box.getString("posture") != null && !box.getString("posture").equals("")){
						 opdNicuCaseRecord.setPosture(box.getString("posture"));
						}else{
							opdNicuCaseRecord.setPosture("");
						}
					if(box.getString("posture1") != null && !box.getString("posture1").equals("")){
					 opdNicuCaseRecord.setPosture1(box.getString("posture1"));
					}else{
						opdNicuCaseRecord.setPosture1("");
					}
					if(box.getString("posture2") != null && !box.getString("posture2").equals("")){
						 opdNicuCaseRecord.setPosture2(box.getString("posture2"));
					}
					else{
						opdNicuCaseRecord.setPosture2("");
					}
					if(box.getString("posture3") != null && !box.getString("posture3").equals("")){
						 opdNicuCaseRecord.setPosture3(box.getString("posture3"));
					}
					else{
						opdNicuCaseRecord.setPosture3("");
					}
					if(box.getString("posture4") != null && !box.getString("posture4").equals("")){
						 opdNicuCaseRecord.setPosture4(box.getString("posture4"));
					}
					else{
						opdNicuCaseRecord.setPosture4("");
					}
					
					//opdNicuCaseRecord.setSquareWindow(squareWindow);
					if(box.getString("squareWindow") != null && !box.getString("squareWindow").equals("")){
						 opdNicuCaseRecord.setSquareWindow(box.getString("squareWindow"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow("");
					}
					if(box.getString("squareWindow0") != null && !box.getString("squareWindow0").equals("")){
						 opdNicuCaseRecord.setSquareWindow0(box.getString("squareWindow0"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow0("");
					}
					if(box.getString("squareWindow1") != null && !box.getString("squareWindow1").equals("")){
						 opdNicuCaseRecord.setSquareWindow1(box.getString("squareWindow1"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow1("");
					}
					if(box.getString("squareWindow2") != null && !box.getString("squareWindow2").equals("")){
						 opdNicuCaseRecord.setSquareWindow2(box.getString("squareWindow2"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow2("");
					}
					if(box.getString("squareWindow3") != null && !box.getString("squareWindow3").equals("")){
						 opdNicuCaseRecord.setSquareWindow3(box.getString("squareWindow3"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow3("");
					}
					if(box.getString("squareWindow4") != null && !box.getString("squareWindow4").equals("")){
						 opdNicuCaseRecord.setSquareWindow4(box.getString("squareWindow4"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow4("");
					}
					//opdNicuCaseRecord.setArmRecoil(armRecoil);
					if(box.getString("armRecoil") != null && !box.getString("armRecoil").equals("")){
						 opdNicuCaseRecord.setArmRecoil(box.getString("armRecoil"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil("");
					}
					if(box.getString("armRecoil1") != null && !box.getString("armRecoil1").equals("")){
						 opdNicuCaseRecord.setArmRecoil1(box.getString("armRecoil1"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil1("");
					}
					if(box.getString("armRecoil2") != null && !box.getString("armRecoil2").equals("")){
						 opdNicuCaseRecord.setArmRecoil2(box.getString("armRecoil2"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil2("");
					}
					if(box.getString("armRecoil3") != null && !box.getString("armRecoil3").equals("")){
						 opdNicuCaseRecord.setArmRecoil3(box.getString("armRecoil3"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil3("");
					}
					if(box.getString("armRecoil4") != null && !box.getString("armRecoil4").equals("")){
						 opdNicuCaseRecord.setArmRecoil4(box.getString("armRecoil4"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil4("");
					}
					//opdNicuCaseRecord.setPoplitcalAngle(poplitcalAngle);
					if(box.getString("poplitcalAngle") != null && !box.getString("poplitcalAngle").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle(box.getString("poplitcalAngle"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle("");
					}
					if(box.getString("poplitcalAngle0") != null && !box.getString("poplitcalAngle0").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle0(box.getString("poplitcalAngle0"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle0("");
					}
					if(box.getString("poplitcalAngle1") != null && !box.getString("poplitcalAngle1").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle1(box.getString("poplitcalAngle1"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle1("");
					}
					if(box.getString("poplitcalAngle2") != null && !box.getString("poplitcalAngle2").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle2(box.getString("poplitcalAngle2"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle2("");
					}
					if(box.getString("poplitcalAngle3") != null && !box.getString("poplitcalAngle3").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle3(box.getString("poplitcalAngle3"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle3("");
					}
					if(box.getString("poplitcalAngle4") != null && !box.getString("poplitcalAngle4").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle4(box.getString("poplitcalAngle4"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle4("");
					}
					if(box.getString("poplitcalAngle5") != null && !box.getString("poplitcalAngle5").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle5(box.getString("poplitcalAngle5"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle5("");
					}
					//opdNicuCaseRecord.setScarfSign(scarfSign);
					if(box.getString("scarfSign") != null && !box.getString("scarfSign").equals("")){
						opdNicuCaseRecord.setScarfSign(box.getString("scarfSign"));
					}
					else{
						opdNicuCaseRecord.setScarfSign("");
					}
					if(box.getString("scarfSign0") != null && !box.getString("scarfSign0").equals("")){
						opdNicuCaseRecord.setScarfSign0(box.getString("scarfSign0"));
					}
					else{
						opdNicuCaseRecord.setScarfSign0("");
					}
					if(box.getString("scarfSign1") != null && !box.getString("scarfSign1").equals("")){
						opdNicuCaseRecord.setScarfSign1(box.getString("scarfSign1"));
					}
					else{
						opdNicuCaseRecord.setScarfSign1("");
					}
					if(box.getString("scarfSign2") != null && !box.getString("scarfSign2").equals("")){
						opdNicuCaseRecord.setScarfSign2(box.getString("scarfSign2"));
					}
					else{
						opdNicuCaseRecord.setScarfSign2("");
					}
					if(box.getString("scarfSign3") != null && !box.getString("scarfSign3").equals("")){
						opdNicuCaseRecord.setScarfSign3(box.getString("scarfSign3"));
					}
					else{
						opdNicuCaseRecord.setScarfSign3("");
					}
					if(box.getString("scarfSign4") != null && !box.getString("scarfSign4").equals("")){
						opdNicuCaseRecord.setScarfSign4(box.getString("scarfSign4"));
					}
					else{
						opdNicuCaseRecord.setScarfSign4("");
					}
					//opdNicuCaseRecord.setHeelToEar(heelToEar);
					
					if(box.getString("heelToEar") != null && !box.getString("heelToEar").equals("")){
						opdNicuCaseRecord.setHeelToEar(box.getString("heelToEar"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar("");
					}
					
					if(box.getString("heelToEar0") != null && !box.getString("heelToEar0").equals("")){
						opdNicuCaseRecord.setHeelToEar0(box.getString("heelToEar0"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar0("");
					}
					if(box.getString("heelToEar1") != null && !box.getString("heelToEar1").equals("")){
						opdNicuCaseRecord.setHeelToEar1(box.getString("heelToEar1"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar1("");
					}
					if(box.getString("heelToEar2") != null && !box.getString("heelToEar2").equals("")){
						opdNicuCaseRecord.setHeelToEar2(box.getString("heelToEar2"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar2("");
					}
					if(box.getString("heelToEar3") != null && !box.getString("heelToEar3").equals("")){
						opdNicuCaseRecord.setHeelToEar3(box.getString("heelToEar3"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar3("");
					}
					if(box.getString("heelToEar4") != null && !box.getString("heelToEar4").equals("")){
						opdNicuCaseRecord.setHeelToEar4(box.getString("heelToEar3"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar4("");
					}
				//	opdNicuCaseRecord.setSkin(skin);
					
					if(box.getString("skin") != null && !box.getString("skin").equals("")){
						opdNicuCaseRecord.setSkin(box.getString("skin"));
					}
					else{
						opdNicuCaseRecord.setSkin("");
					}
					if(box.getString("skingenatiousRed") != null && !box.getString("skingenatiousRed").equals("")){
						opdNicuCaseRecord.setSkinGenatiousRed(box.getString("skingenatiousRed"));
					}
					else{
						opdNicuCaseRecord.setSkinGenatiousRed("");
					}
					if(box.getString("skinSmoothPink") != null && !box.getString("skinSmoothPink").equals("")){
						opdNicuCaseRecord.setSkinSmoothPink(box.getString("skinSmoothPink"));
					}
					else{
						opdNicuCaseRecord.setSkinSmoothPink("");
					}
					if(box.getString("skinPeeling") != null && !box.getString("skinPeeling").equals("")){
						opdNicuCaseRecord.setSkinPeeling(box.getString("skinPeeling"));
					}
					else{
						opdNicuCaseRecord.setSkinPeeling("");
					}
					if(box.getString("skinCracking") != null && !box.getString("skinCracking").equals("")){
						opdNicuCaseRecord.setSkinCracking(box.getString("skinCracking"));
					}
					else{
						opdNicuCaseRecord.setSkinCracking("");
					}
					if(box.getString("skinParchment") != null && !box.getString("skinParchment").equals("")){
						opdNicuCaseRecord.setSkinParchment(box.getString("skinParchment"));
					}
					else{
						opdNicuCaseRecord.setSkinParchment("");
					}
					if(box.getString("skinLeathery") != null && !box.getString("skinLeathery").equals("")){
						opdNicuCaseRecord.setSkinLeathery(box.getString("skinLeathery"));
					}
					else{
						opdNicuCaseRecord.setSkinLeathery("");
					}
					//opdNicuCaseRecord.setLanuge(lanuge);
					if(box.getString("lanuge") != null && !box.getString("lanuge").equals("")){
						opdNicuCaseRecord.setLanuge(box.getString("lanuge"));
					}
					else{
						opdNicuCaseRecord.setLanuge("");
					}
					
					if(box.getString("lanugeSparse") != null && !box.getString("lanugeSparse").equals("")){
						opdNicuCaseRecord.setLanugeSpars(box.getString("lanugeSparse"));
					}
					else{
						opdNicuCaseRecord.setLanugeSpars("");
					}
					if(box.getString("lanugeAbundant") != null && !box.getString("lanugeAbundant").equals("")){
						opdNicuCaseRecord.setLanugeAbundant(box.getString("lanugeAbundant"));
					}
					else{
						opdNicuCaseRecord.setLanugeAbundant("");
					}
					if(box.getString("lanugethinning") != null && !box.getString("lanugethinning").equals("")){
						opdNicuCaseRecord.setLanugeThinning(box.getString("lanugethinning"));
					}
					else{
						opdNicuCaseRecord.setLanugeThinning("");
					}
					
					if(box.getString("lanugeBaldAreas") != null && !box.getString("lanugeBaldAreas").equals("")){
						opdNicuCaseRecord.setLanugeBaldareas(box.getString("lanugeBaldAreas"));
					}
					else{
						opdNicuCaseRecord.setLanugeBaldareas("");
					}
					
					if(box.getString("lanugeMostly") != null && !box.getString("lanugeMostly").equals("")){
						opdNicuCaseRecord.setLanugeMostly(box.getString("lanugeMostly"));
					}
					else{
						opdNicuCaseRecord.setLanugeMostly("");
					}
					//opdNicuCaseRecord.setPlanterSurface(planterSurface);
					
					if(box.getString("planterSurface") != null && !box.getString("planterSurface").equals("")){
						opdNicuCaseRecord.setPlanterSurface(box.getString("planterSurface"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurface("");
					}
					
					if(box.getString("planterSurfaceCrease") != null && !box.getString("planterSurfaceCrease").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceCrease(box.getString("planterSurfaceCrease"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceCrease("");
					}
					if(box.getString("planterSurfaceFaint") != null && !box.getString("planterSurfaceFaint").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceFaint(box.getString("planterSurfaceFaint"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceFaint("");
					}
					if(box.getString("planterSurfaceAnterior") != null && !box.getString("planterSurfaceAnterior").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceAnterior(box.getString("planterSurfaceAnterior"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceAnterior("");
					}
					if(box.getString("planterSurfaceCreasesAnt") != null && !box.getString("planterSurfaceCreasesAnt").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceCreasesAnt(box.getString("planterSurfaceCreasesAnt"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceCreasesAnt("");
					}
					if(box.getString("planterSurfaceEntireSole") != null && !box.getString("planterSurfaceEntireSole").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceEntireSole(box.getString("planterSurfaceEntireSole"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceEntireSole("");
					}
					//opdNicuCaseRecord.setBreast(breast);
					
					if(box.getString("breast") != null && !box.getString("breast").equals("")){
						opdNicuCaseRecord.setBreast(box.getString("breast"));
					}
					else{
						opdNicuCaseRecord.setBreast("");
					}
					if(box.getString("breastPerceptible") != null && !box.getString("breastPerceptible").equals("")){
						opdNicuCaseRecord.setBreastPerceptible("breastPerceptible");
					}
					else{
						opdNicuCaseRecord.setBreastPerceptible("");
					}
					if(box.getString("breastArcola") != null && !box.getString("breastArcola").equals("")){
						opdNicuCaseRecord.setBreastArcola(box.getString("breastArcola"));
					}
					else{
						opdNicuCaseRecord.setBreastArcola("");
					}
					if(box.getString("breastStippled") != null && !box.getString("breastStippled").equals("")){
						opdNicuCaseRecord.setBreastStippled(box.getString("breastStippled"));
					}
					else{
						opdNicuCaseRecord.setBreastStippled("");
					}
					if(box.getString("breastRaised") != null && !box.getString("breastRaised ").equals("")){
						opdNicuCaseRecord.setBreastRaised(box.getString("breastRaised"));
					}
					else{
						opdNicuCaseRecord.setBreastRaised("");
					}
					if(box.getString("breastAreola") != null && !box.getString("breastAreola").equals("")){
						opdNicuCaseRecord.setBreastAreola(box.getString("breastAreola"));
					}
					else{
						opdNicuCaseRecord.setBreastAreola("");
					}
				//	opdNicuCaseRecord.setEyeEar(eyeEar);
					
					if(box.getString("eyeEar") != null && !box.getString("eyeEar").equals("")){
						opdNicuCaseRecord.setEyeEar(box.getString("eyeEar"));
					}
					else{
						opdNicuCaseRecord.setEyeEar("");
					}
					if(box.getString("eyeEarPinna") != null && !box.getString("eyeEarPinna").equals("")){
						opdNicuCaseRecord.setEyeEarPinna(box.getString("eyeEarPinna"));
					}
					else{
						opdNicuCaseRecord.setEyeEarPinna("");
					}
					if(box.getString("eyeEarCurvedPinna") != null && !box.getString("eyeEarCurvedPinna").equals("")){
						opdNicuCaseRecord.setEyeEarCurvedPinna(box.getString("eyeEarCurvedPinna"));
					}
					else{
						opdNicuCaseRecord.setEyeEarCurvedPinna("");
					}
					if(box.getString("eyeEarSoftBudready") != null && !box.getString("eyeEarSoftBudready").equals("")){
						opdNicuCaseRecord.setEyeEarSoftBudready(box.getString("eyeEarSoftBudready"));
					}
					else{
						opdNicuCaseRecord.setEyeEarSoftBudready("");
					}
					if(box.getString("eyeEarInstandRecoil") != null && !box.getString("eyeEarInstandRecoil").equals("")){
						opdNicuCaseRecord.setEyeEarInstandRecoil(box.getString("eyeEarInstandRecoil"));
					}
					else{
						opdNicuCaseRecord.setEyeEarInstandRecoil("");
					}
					if(box.getString("eyeEarStiff") != null && !box.getString("eyeEarStiff").equals("")){
						opdNicuCaseRecord.setEyeEarStiff(box.getString("eyeEarStiff"));
					}
					else{
						opdNicuCaseRecord.setEyeEarStiff("");
					}
					//opdNicuCaseRecord.setGenilalsMale(genilalsMale);
					if(box.getString("genilalsMale") != null && !box.getString("genilalsMale").equals("")){
						opdNicuCaseRecord.setGenilalsMale(box.getString("genilalsMale"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMale("");
					}
					if(box.getString("genilalsMaleScrotumEmpty") != null && !box.getString("genilalsMaleScrotumEmpty").equals("")){
						opdNicuCaseRecord.setGenilalsMaleScrotumEmpty(box.getString("genilalsMaleScrotumEmpty"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleScrotumEmpty("");
					}
					if(box.getString("genilalsMaleUpperCanal") != null && !box.getString("genilalsMaleUpperCanal").equals("")){
						opdNicuCaseRecord.setGenilalsMaleUppperCanal(box.getString("genilalsMaleUpperCanal"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleUppperCanal("");
					}
					if(box.getString("genilalsMaleFewRugae") != null && !box.getString("genilalsMaleFewRugae").equals("")){
						opdNicuCaseRecord.setGenilalsMaleFewRugae(box.getString("genilalsMaleFewRugae"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleFewRugae("");
					}
					if(box.getString("genilalsMaleGoodRugae") != null && !box.getString("genilalsMaleGoodRugae").equals("")){
						opdNicuCaseRecord.setGenilalsMaleGoodRugae(box.getString("genilalsMaleGoodRugae"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleGoodRugae("");
					}
					if(box.getString("genilalsMaleDeepRugae") != null && !box.getString("genilalsMaleDeepRugae").equals("")){
						opdNicuCaseRecord.setGenilalsMaleDeepRugae(box.getString("genilalsMaleDeepRugae"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleDeepRugae("");
					}
				//	opdNicuCaseRecord.setGenilalsFemale(genilalsFemale);
					
					if(box.getString("genilalsFemale") != null && !box.getString("genilalsFemale").equals("")){
						opdNicuCaseRecord.setGenilalsFemale(box.getString("genilalsFemale"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemale("");
					}
					if(box.getString("genilalsFemaleLabiaMinora") != null && !box.getString("genilalsFemaleLabiaMinora").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleLabiaMinora(box.getString("genilalsFemaleLabiaMinora"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleLabiaMinora("");
					}
					if(box.getString("genilalsFemaleEnlargingMinora") != null && !box.getString("genilalsFemaleEnlargingMinora").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleEnlargingMinora(box.getString("genilalsFemaleEnlargingMinora"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleEnlargingMinora("");
					}
					if(box.getString("genilalsFemaleEquallyProminant") != null && !box.getString("genilalsFemaleEquallyProminant").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleEquallyProminant(box.getString("genilalsFemaleEquallyProminant"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleEquallyProminant("");
					}
					if(box.getString("genilalsFemaleMinoraSmall") != null && !box.getString("genilalsFemaleMinoraSmall").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleMinoraSmall(box.getString("genilalsFemaleMinoraSmall"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleMinoraSmall("");
					}
					if(box.getString("genilalsFemaleClitoris") != null && !box.getString("genilalsFemaleClitoris").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleClitoris(box.getString("genilalsFemaleClitoris"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleClitoris("");
					}
					opdNicuCaseRecord.setWeek(week);
					if(headCircumferenceNicu!=null){
					opdNicuCaseRecord.setHeadcircumference(new BigDecimal(headCircumferenceNicu));
					}
					
					hbt.update(opdNicuCaseRecord);
					hbt.refresh(opdNicuCaseRecord);
				}else{
					
					
					
					opdNicuCaseRecord.setOpdPatientDetails(opdPatientDetails);
					opdNicuCaseRecord.setHin(new Patient(hinId));
					if(box.getString("posture") != null && !box.getString("posture").equals("")){
						 opdNicuCaseRecord.setPosture(box.getString("posture"));
						}else{
							opdNicuCaseRecord.setPosture("");
						}
					if(box.getString("posture1") != null && !box.getString("posture1").equals("")){
					 opdNicuCaseRecord.setPosture1(box.getString("posture1"));
					}else{
						opdNicuCaseRecord.setPosture1("");
					}
					if(box.getString("posture2") != null && !box.getString("posture2").equals("")){
						 opdNicuCaseRecord.setPosture2(box.getString("posture2"));
					}
					else{
						opdNicuCaseRecord.setPosture2("");
					}
					if(box.getString("posture3") != null && !box.getString("posture3").equals("")){
						 opdNicuCaseRecord.setPosture3(box.getString("posture3"));
					}
					else{
						opdNicuCaseRecord.setPosture3("");
					}
					if(box.getString("posture4") != null && !box.getString("posture4").equals("")){
						 opdNicuCaseRecord.setPosture4(box.getString("posture4"));
					}
					else{
						opdNicuCaseRecord.setPosture4("");
					}
					
					//opdNicuCaseRecord.setSquareWindow(squareWindow);
					if(box.getString("squareWindow") != null && !box.getString("squareWindow").equals("")){
						 opdNicuCaseRecord.setSquareWindow(box.getString("squareWindow"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow("");
					}
					if(box.getString("squareWindow0") != null && !box.getString("squareWindow0").equals("")){
						 opdNicuCaseRecord.setSquareWindow0(box.getString("squareWindow0"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow0("");
					}
					if(box.getString("squareWindow1") != null && !box.getString("squareWindow1").equals("")){
						 opdNicuCaseRecord.setSquareWindow1(box.getString("squareWindow1"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow1("");
					}
					if(box.getString("squareWindow2") != null && !box.getString("squareWindow2").equals("")){
						 opdNicuCaseRecord.setSquareWindow2(box.getString("squareWindow2"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow2("");
					}
					if(box.getString("squareWindow3") != null && !box.getString("squareWindow3").equals("")){
						 opdNicuCaseRecord.setSquareWindow3(box.getString("squareWindow3"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow3("");
					}
					if(box.getString("squareWindow4") != null && !box.getString("squareWindow4").equals("")){
						 opdNicuCaseRecord.setSquareWindow4(box.getString("squareWindow4"));
					}
					else{
						opdNicuCaseRecord.setSquareWindow4("");
					}
					//opdNicuCaseRecord.setArmRecoil(armRecoil);
					if(box.getString("armRecoil") != null && !box.getString("armRecoil").equals("")){
						 opdNicuCaseRecord.setArmRecoil(box.getString("armRecoil"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil("");
					}
					if(box.getString("armRecoil1") != null && !box.getString("armRecoil1").equals("")){
						 opdNicuCaseRecord.setArmRecoil1(box.getString("armRecoil1"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil1("");
					}
					if(box.getString("armRecoil2") != null && !box.getString("armRecoil2").equals("")){
						 opdNicuCaseRecord.setArmRecoil2(box.getString("armRecoil2"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil2("");
					}
					if(box.getString("armRecoil3") != null && !box.getString("armRecoil3").equals("")){
						 opdNicuCaseRecord.setArmRecoil3(box.getString("armRecoil3"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil3("");
					}
					if(box.getString("armRecoil4") != null && !box.getString("armRecoil4").equals("")){
						 opdNicuCaseRecord.setArmRecoil4(box.getString("armRecoil4"));
					}
					else{
						opdNicuCaseRecord.setArmRecoil4("");
					}
					//opdNicuCaseRecord.setPoplitcalAngle(poplitcalAngle);
					if(box.getString("poplitcalAngle") != null && !box.getString("poplitcalAngle").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle(box.getString("poplitcalAngle"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle("");
					}
					if(box.getString("poplitcalAngle0") != null && !box.getString("poplitcalAngle0").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle0(box.getString("poplitcalAngle0"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle0("");
					}
					if(box.getString("poplitcalAngle1") != null && !box.getString("poplitcalAngle1").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle1(box.getString("poplitcalAngle1"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle1("");
					}
					if(box.getString("poplitcalAngle2") != null && !box.getString("poplitcalAngle2").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle2(box.getString("poplitcalAngle2"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle2("");
					}
					if(box.getString("poplitcalAngle3") != null && !box.getString("poplitcalAngle3").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle3(box.getString("poplitcalAngle3"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle3("");
					}
					if(box.getString("poplitcalAngle4") != null && !box.getString("poplitcalAngle4").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle4(box.getString("poplitcalAngle4"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle4("");
					}
					if(box.getString("poplitcalAngle5") != null && !box.getString("poplitcalAngle5").equals("")){
						opdNicuCaseRecord.setPoplitcalAngle5(box.getString("poplitcalAngle5"));
					}
					else{
						opdNicuCaseRecord.setPoplitcalAngle5("");
					}
					//opdNicuCaseRecord.setScarfSign(scarfSign);
					if(box.getString("scarfSign") != null && !box.getString("scarfSign").equals("")){
						opdNicuCaseRecord.setScarfSign(box.getString("scarfSign"));
					}
					else{
						opdNicuCaseRecord.setScarfSign("");
					}
					if(box.getString("scarfSign0") != null && !box.getString("scarfSign0").equals("")){
						opdNicuCaseRecord.setScarfSign0(box.getString("scarfSign0"));
					}
					else{
						opdNicuCaseRecord.setScarfSign0("");
					}
					if(box.getString("scarfSign1") != null && !box.getString("scarfSign1").equals("")){
						opdNicuCaseRecord.setScarfSign1(box.getString("scarfSign1"));
					}
					else{
						opdNicuCaseRecord.setScarfSign1("");
					}
					if(box.getString("scarfSign2") != null && !box.getString("scarfSign2").equals("")){
						opdNicuCaseRecord.setScarfSign2(box.getString("scarfSign2"));
					}
					else{
						opdNicuCaseRecord.setScarfSign2("");
					}
					if(box.getString("scarfSign3") != null && !box.getString("scarfSign3").equals("")){
						opdNicuCaseRecord.setScarfSign3(box.getString("scarfSign3"));
					}
					else{
						opdNicuCaseRecord.setScarfSign3("");
					}
					if(box.getString("scarfSign4") != null && !box.getString("scarfSign4").equals("")){
						opdNicuCaseRecord.setScarfSign4(box.getString("scarfSign4"));
					}
					else{
						opdNicuCaseRecord.setScarfSign4("");
					}
					//opdNicuCaseRecord.setHeelToEar(heelToEar);
					
					if(box.getString("heelToEar") != null && !box.getString("heelToEar").equals("")){
						opdNicuCaseRecord.setHeelToEar(box.getString("heelToEar"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar("");
					}
					
					if(box.getString("heelToEar0") != null && !box.getString("heelToEar0").equals("")){
						opdNicuCaseRecord.setHeelToEar0(box.getString("heelToEar0"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar0("");
					}
					if(box.getString("heelToEar1") != null && !box.getString("heelToEar1").equals("")){
						opdNicuCaseRecord.setHeelToEar1(box.getString("heelToEar1"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar1("");
					}
					if(box.getString("heelToEar2") != null && !box.getString("heelToEar2").equals("")){
						opdNicuCaseRecord.setHeelToEar2(box.getString("heelToEar2"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar2("");
					}
					if(box.getString("heelToEar3") != null && !box.getString("heelToEar3").equals("")){
						opdNicuCaseRecord.setHeelToEar3(box.getString("heelToEar3"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar3("");
					}
					if(box.getString("heelToEar4") != null && !box.getString("heelToEar4").equals("")){
						opdNicuCaseRecord.setHeelToEar4(box.getString("heelToEar3"));
					}
					else{
						opdNicuCaseRecord.setHeelToEar4("");
					}
				//	opdNicuCaseRecord.setSkin(skin);
					
					if(box.getString("skin") != null && !box.getString("skin").equals("")){
						opdNicuCaseRecord.setSkin(box.getString("skin"));
					}
					else{
						opdNicuCaseRecord.setSkin("");
					}
					if(box.getString("skingenatiousRed") != null && !box.getString("skingenatiousRed").equals("")){
						opdNicuCaseRecord.setSkinGenatiousRed(box.getString("skingenatiousRed"));
					}
					else{
						opdNicuCaseRecord.setSkinGenatiousRed("");
					}
					if(box.getString("skinSmoothPink") != null && !box.getString("skinSmoothPink").equals("")){
						opdNicuCaseRecord.setSkinSmoothPink(box.getString("skinSmoothPink"));
					}
					else{
						opdNicuCaseRecord.setSkinSmoothPink("");
					}
					if(box.getString("skinPeeling") != null && !box.getString("skinPeeling").equals("")){
						opdNicuCaseRecord.setSkinPeeling(box.getString("skinPeeling"));
					}
					else{
						opdNicuCaseRecord.setSkinPeeling("");
					}
					if(box.getString("skinCracking") != null && !box.getString("skinCracking").equals("")){
						opdNicuCaseRecord.setSkinCracking(box.getString("skinCracking"));
					}
					else{
						opdNicuCaseRecord.setSkinCracking("");
					}
					if(box.getString("skinParchment") != null && !box.getString("skinParchment").equals("")){
						opdNicuCaseRecord.setSkinParchment(box.getString("skinParchment"));
					}
					else{
						opdNicuCaseRecord.setSkinParchment("");
					}
					if(box.getString("skinLeathery") != null && !box.getString("skinLeathery").equals("")){
						opdNicuCaseRecord.setSkinLeathery(box.getString("skinLeathery"));
					}
					else{
						opdNicuCaseRecord.setSkinLeathery("");
					}
					//opdNicuCaseRecord.setLanuge(lanuge);
					if(box.getString("lanuge") != null && !box.getString("lanuge").equals("")){
						opdNicuCaseRecord.setLanuge(box.getString("lanuge"));
					}
					else{
						opdNicuCaseRecord.setLanuge("");
					}
					
					if(box.getString("lanugeSparse") != null && !box.getString("lanugeSparse").equals("")){
						opdNicuCaseRecord.setLanugeSpars(box.getString("lanugeSparse"));
					}
					else{
						opdNicuCaseRecord.setLanugeSpars("");
					}
					if(box.getString("lanugeAbundant") != null && !box.getString("lanugeAbundant").equals("")){
						opdNicuCaseRecord.setLanugeAbundant(box.getString("lanugeAbundant"));
					}
					else{
						opdNicuCaseRecord.setLanugeAbundant("");
					}
					if(box.getString("lanugethinning") != null && !box.getString("lanugethinning").equals("")){
						opdNicuCaseRecord.setLanugeThinning(box.getString("lanugethinning"));
					}
					else{
						opdNicuCaseRecord.setLanugeThinning("");
					}
					
					if(box.getString("lanugeBaldAreas") != null && !box.getString("lanugeBaldAreas").equals("")){
						opdNicuCaseRecord.setLanugeBaldareas(box.getString("lanugeBaldAreas"));
					}
					else{
						opdNicuCaseRecord.setLanugeBaldareas("");
					}
					
					if(box.getString("lanugeMostly") != null && !box.getString("lanugeMostly").equals("")){
						opdNicuCaseRecord.setLanugeMostly(box.getString("lanugeMostly"));
					}
					else{
						opdNicuCaseRecord.setLanugeMostly("");
					}
					//opdNicuCaseRecord.setPlanterSurface(planterSurface);
					
					if(box.getString("planterSurface") != null && !box.getString("planterSurface").equals("")){
						opdNicuCaseRecord.setPlanterSurface(box.getString("planterSurface"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurface("");
					}
					
					if(box.getString("planterSurfaceCrease") != null && !box.getString("planterSurfaceCrease").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceCrease(box.getString("planterSurfaceCrease"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceCrease("");
					}
					if(box.getString("planterSurfaceFaint") != null && !box.getString("planterSurfaceFaint").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceFaint(box.getString("planterSurfaceFaint"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceFaint("");
					}
					if(box.getString("planterSurfaceAnterior") != null && !box.getString("planterSurfaceAnterior").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceAnterior(box.getString("planterSurfaceAnterior"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceAnterior("");
					}
					if(box.getString("planterSurfaceCreasesAnt") != null && !box.getString("planterSurfaceCreasesAnt").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceCreasesAnt(box.getString("planterSurfaceCreasesAnt"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceCreasesAnt("");
					}
					if(box.getString("planterSurfaceEntireSole") != null && !box.getString("planterSurfaceEntireSole").equals("")){
						opdNicuCaseRecord.setPlanterSurfaceEntireSole(box.getString("planterSurfaceEntireSole"));
					}
					else{
						opdNicuCaseRecord.setPlanterSurfaceEntireSole("");
					}
					//opdNicuCaseRecord.setBreast(breast);
					
					if(box.getString("breast") != null && !box.getString("breast").equals("")){
						opdNicuCaseRecord.setBreast(box.getString("breast"));
					}
					else{
						opdNicuCaseRecord.setBreast("");
					}
					if(box.getString("breastPerceptible") != null && !box.getString("breastPerceptible").equals("")){
						opdNicuCaseRecord.setBreastPerceptible("breastPerceptible");
					}
					else{
						opdNicuCaseRecord.setBreastPerceptible("");
					}
					if(box.getString("breastArcola") != null && !box.getString("breastArcola").equals("")){
						opdNicuCaseRecord.setBreastArcola(box.getString("breastPerceptible"));
					}
					else{
						opdNicuCaseRecord.setBreastArcola("");
					}
					if(box.getString("breastStippled") != null && !box.getString("breastStippled").equals("")){
						opdNicuCaseRecord.setBreastStippled(box.getString("breastStippled"));
					}
					else{
						opdNicuCaseRecord.setBreastStippled("");
					}
					if(box.getString("breastRaised") != null && !box.getString("breastRaised ").equals("")){
						opdNicuCaseRecord.setBreastRaised(box.getString("breastRaised"));
					}
					else{
						opdNicuCaseRecord.setBreastRaised("");
					}
					if(box.getString("breastAreola") != null && !box.getString("breastAreola").equals("")){
						opdNicuCaseRecord.setBreastAreola(box.getString("breastAreola"));
					}
					else{
						opdNicuCaseRecord.setBreastAreola("");
					}
				//	opdNicuCaseRecord.setEyeEar(eyeEar);
					
					if(box.getString("eyeEar") != null && !box.getString("eyeEar").equals("")){
						opdNicuCaseRecord.setEyeEar(box.getString("eyeEar"));
					}
					else{
						opdNicuCaseRecord.setEyeEar("");
					}
					if(box.getString("eyeEarPinna") != null && !box.getString("eyeEarPinna").equals("")){
						opdNicuCaseRecord.setEyeEarPinna(box.getString("eyeEarPinna"));
					}
					else{
						opdNicuCaseRecord.setEyeEarPinna("");
					}
					if(box.getString("eyeEarCurvedPinna") != null && !box.getString("eyeEarCurvedPinna").equals("")){
						opdNicuCaseRecord.setEyeEarCurvedPinna(box.getString("eyeEarCurvedPinna"));
					}
					else{
						opdNicuCaseRecord.setEyeEarCurvedPinna("");
					}
					if(box.getString("eyeEarSoftBudready") != null && !box.getString("eyeEarSoftBudready").equals("")){
						opdNicuCaseRecord.setEyeEarSoftBudready(box.getString("eyeEarSoftBudready"));
					}
					else{
						opdNicuCaseRecord.setEyeEarSoftBudready("");
					}
					if(box.getString("eyeEarInstandRecoil") != null && !box.getString("eyeEarInstandRecoil").equals("")){
						opdNicuCaseRecord.setEyeEarInstandRecoil(box.getString("eyeEarInstandRecoil"));
					}
					else{
						opdNicuCaseRecord.setEyeEarInstandRecoil("");
					}
					if(box.getString("eyeEarStiff") != null && !box.getString("eyeEarStiff").equals("")){
						opdNicuCaseRecord.setEyeEarStiff(box.getString("eyeEarStiff"));
					}
					else{
						opdNicuCaseRecord.setEyeEarStiff("");
					}
					//opdNicuCaseRecord.setGenilalsMale(genilalsMale);
					if(box.getString("genilalsMale") != null && !box.getString("genilalsMale").equals("")){
						opdNicuCaseRecord.setGenilalsMale(box.getString("genilalsMale"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMale("");
					}
					if(box.getString("genilalsMaleScrotumEmpty") != null && !box.getString("genilalsMaleScrotumEmpty").equals("")){
						opdNicuCaseRecord.setGenilalsMaleScrotumEmpty(box.getString("genilalsMaleScrotumEmpty"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleScrotumEmpty("");
					}
					if(box.getString("genilalsMaleUpperCanal") != null && !box.getString("genilalsMaleUpperCanal").equals("")){
						opdNicuCaseRecord.setGenilalsMaleUppperCanal(box.getString("genilalsMaleUpperCanal"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleUppperCanal("");
					}
					if(box.getString("genilalsMaleFewRugae") != null && !box.getString("genilalsMaleFewRugae").equals("")){
						opdNicuCaseRecord.setGenilalsMaleFewRugae(box.getString("genilalsMaleFewRugae"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleFewRugae("");
					}
					if(box.getString("genilalsMaleGoodRugae") != null && !box.getString("genilalsMaleGoodRugae").equals("")){
						opdNicuCaseRecord.setGenilalsMaleGoodRugae(box.getString("genilalsMaleGoodRugae"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleGoodRugae("");
					}
					if(box.getString("genilalsMaleDeepRugae") != null && !box.getString("genilalsMaleDeepRugae").equals("")){
						opdNicuCaseRecord.setGenilalsMaleDeepRugae(box.getString("genilalsMaleDeepRugae"));
					}
					else{
						opdNicuCaseRecord.setGenilalsMaleDeepRugae("");
					}
				//	opdNicuCaseRecord.setGenilalsFemale(genilalsFemale);
					
					if(box.getString("genilalsFemale") != null && !box.getString("genilalsFemale").equals("")){
						opdNicuCaseRecord.setGenilalsFemale(box.getString("genilalsFemale"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemale("");
					}
					if(box.getString("genilalsFemaleLabiaMinora") != null && !box.getString("genilalsFemaleLabiaMinora").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleLabiaMinora(box.getString("genilalsFemaleLabiaMinora"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleLabiaMinora("");
					}
					if(box.getString("genilalsFemaleEnlargingMinora") != null && !box.getString("genilalsFemaleEnlargingMinora").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleEnlargingMinora(box.getString("genilalsFemaleEnlargingMinora"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleEnlargingMinora("");
					}
					if(box.getString("genilalsFemaleEquallyProminant") != null && !box.getString("genilalsFemaleEquallyProminant").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleEquallyProminant(box.getString("genilalsFemaleEquallyProminant"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleEquallyProminant("");
					}
					if(box.getString("genilalsFemaleMinoraSmall") != null && !box.getString("genilalsFemaleMinoraSmall").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleMinoraSmall(box.getString("genilalsFemaleMinoraSmall"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleMinoraSmall("");
					}
					if(box.getString("genilalsFemaleClitoris") != null && !box.getString("genilalsFemaleClitoris").equals("")){
						opdNicuCaseRecord.setGenilalsFemaleClitoris(box.getString("genilalsFemaleClitoris"));
					}
					else{
						opdNicuCaseRecord.setGenilalsFemaleClitoris("");
					}
					
					if(box.getString("totalSource") != null && !box.getString("totalSource").equals("")){
						opdNicuCaseRecord.setTotalSourceOne(box.getString("totalSource"));
					}
					if(box.getString("totalSources") != null && !box.getString("totalSources").equals("")){
						opdNicuCaseRecord.setTotalSourceTwo(box.getString("totalSources"));
					}
					if(box.getString("grandtotalSources") != null && !box.getString("grandtotalSources").equals("")){
						opdNicuCaseRecord.setGrandTotalSource(box.getString("grandtotalSources"));
					}
					/*if(box.getString("week") != null && !box.getString("week").equals("")){
						opdNicuCaseRecord.setWeek(box.getInt("week"));
					}*/
					opdNicuCaseRecord.setWeek(week);
					if(headCircumferenceNicu!=null){
						opdNicuCaseRecord.setHeadcircumference(new BigDecimal(headCircumferenceNicu));
						}
						
				hbt.save(opdNicuCaseRecord);
				}
				
				int opdPatientDetialId=opdPatientDetails.getId();
				if(opdPatientDetialId!= 0){
					opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetialId);
					opdPatientDetails.setHeight(height);
					opdPatientDetails.setWeight(weight);
					if(headCircumferenceNicu!=null){
					opdPatientDetails.setHeadCircumference(headCircumferenceNicu);
					}
					
					opdPatientDetails.setTemplateName(templateName);
					hbt.update(opdPatientDetails);
				//}
				}
				tx.commit();
				map.put("opdNicuCaseRecord",opdNicuCaseRecord);
			}catch(Exception e){
				e.printStackTrace();
			}
			return map;
		}
		
		boolean checkForInsulinInjection(int itemId){
			
			boolean insulinStatus=false;
			Session session = null;
			session = (Session) getSession();
			MasStoreItem masStoreItem=null;
			masStoreItem=(MasStoreItem) session.load(MasStoreItem.class,itemId);
			if(null !=masStoreItem ){
				if(null !=masStoreItem.getInsulinInjection() && masStoreItem.getInsulinInjection().equalsIgnoreCase("y")){
					insulinStatus=true;
				}
			}
			
			return insulinStatus;
		}

		
		@Override
		public Map<String, Object> saveDeaddictionCentre(Box box) {
			Map<String,Object>map = new HashMap<String,Object>();
			DrugUsageHistory drugUsageHistory = new DrugUsageHistory();  
			try{
				
				Session session = (Session) getSession();
				Transaction tx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
						
				int hospitalId=0;
				if (box.getInt("hospitalId") != 0){
					hospitalId = box.getInt("hospitalId");
				}
				
				int opdPatientDetailId = 0;;
				if (box.getInt("opdPatientDetailId") != 0){
					opdPatientDetailId = box.getInt("opdPatientDetailId");
				}
				int hinId=0;
				if(box.getInt("hinId") !=0){
					hinId=box.getInt("hinId");	
				}
				int visitId = 0;
				if(box.getInt("visitId") !=0){
					visitId=box.getInt("visitId");	
				}
				int drugUseHistoryCount = 0;
				if(box.getInt("drugUseHistoryCount") != 0){
					drugUseHistoryCount = box.getInt("drugUseHistoryCount");
				}
				for(int i=1;i<=drugUseHistoryCount;i++){
					DrugUsageHistory drugUsageHistory1 = new DrugUsageHistory();  //added  by swarup
					
					if(!box.getString("nameOfDrug"+i).equals("") )
					{
						
					if(!box.getString("nameOfDrug"+i).equals("")){
						drugUsageHistory1.setDrugName(box.getString("nameOfDrug"+i));
					}
					if(box.getString("currentUse"+i).equalsIgnoreCase("Yes")){
						drugUsageHistory1.setDrugCurrentUse("Yes");
					}else{
						drugUsageHistory1.setDrugCurrentUse("No");
					}
					if(!box.getString("yearsOfReqularUse"+i).equals("")){
						drugUsageHistory1.setYearsOfRegularUse(box.getInt("yearsOfReqularUse"+i));
					}
					if(!box.getString("routeDrug"+i).equals("")){
						drugUsageHistory1.setRouteCode(box.getString("routeDrug"+i));
					}
					if(!box.getString("txtOtherDrugName"+i).equals("")){
						drugUsageHistory1.setOtherDrugName(box.getString("txtOtherDrugName"+i));
					}
					if(!box.getString("environment").equals("")){
						drugUsageHistory1.setEnvironmentStatus(box.getString("environment"));
					}
					if(!box.getString("specify").equals("")){
						drugUsageHistory1.setEnvironmentName(box.getString("specify"));
					}
					if(!box.getString("specifyOthers").equals("")){
						drugUsageHistory1.setSpecifyOthers(box.getString("specifyOthers"));
					}
					if(!box.getString("noOfDays").equals("")){
						drugUsageHistory1.setNoOfDays(box.getInt("noOfDays"));
					}
					
					Visit visit = new Visit();
					visit.setId(visitId);
					drugUsageHistory1.setVisit(visit);
					
					MasHospital hospital=new MasHospital();
					hospital.setId(hospitalId);
					drugUsageHistory1.setHospital(hospital);
					
					
					hbt.save(drugUsageHistory1);
					
				}
					
				}
				
				int drugsCount = 0;
				if(box.getInt("drugsCount") != 0){
					drugsCount = box.getInt("drugsCount");
				}
				for(int i=1;i<=drugsCount;i++){
					DrugUsage drugUsage = new DrugUsage();
					if(!box.getString("drugName"+i).equals(""))
					{
							
					if(!box.getString("drugName"+i).equals("")){
						drugUsage.setDrugName(box.getString("drugName"+i));
					}
					
					if(box.getInt("ageOfInitial"+i) != 0){
						drugUsage.setDrugAgeInitiation(box.getInt("ageOfInitial"+i));
					}
					if(box.getInt("regularUseAgeOfOnSet"+i) != 0){
						drugUsage.setDrugRegularuseAge(box.getInt("regularUseAgeOfOnSet"+i));
					}
					if(box.getInt("regularUseDurationOnset"+i) != 0){
						drugUsage.setDrugRegularUseDuration(box.getInt("regularUseDurationOnset"+i));
					}
					if(box.getInt("dependenceAgeOfOnset"+i) != 0){
						drugUsage.setDrugDependenceAge(box.getInt("dependenceAgeOfOnset"+i));
					}
					
					
					Visit visit = new Visit();
					visit.setId(visitId);
					drugUsage.setVisit(visit);
					
					MasHospital hospital=new MasHospital();
					hospital.setId(hospitalId);
					drugUsage.setHospital(hospital);
					
					hbt.save(drugUsage);
				}
				}
				int currentDrugUsePatternCount = 0;
				if(box.getInt("currentDrugUsePatternCount") != 0){
					currentDrugUsePatternCount = box.getInt("currentDrugUsePatternCount");
				}
				for(int i=1;i<=currentDrugUsePatternCount;i++){
					DrugUasgePattern drugUasgePattern = new DrugUasgePattern();
					if(!box.getString("drugNameValue"+i).equals(""))
					{
					if(!box.getString("drugNameValue"+i).equals("")){
						drugUasgePattern.setDrugName(box.getString("drugNameValue"+i));
					}
					
					if(!box.getString("frequencyDrug"+i).equals("")){
						drugUasgePattern.setDrugFrequencyConsumption(box.getDouble("frequencyDrug"+i));
					}
					if(box.getDouble("avgAmt"+i) != 0){
						drugUasgePattern.setDrugAmountUsed(box.getDouble("avgAmt"+i));
					}
					if(box.getInt("heaviest"+i) != 0){
						drugUasgePattern.setDrugHeavyConsumptionOneday(box.getInt("heaviest"+i));
					}
					if(!box.getString("withdrawal"+i).equals("")){
						drugUasgePattern.setDrugWithdrawalSymptoms(box.getString("withdrawal"+i));
					}
					
					if(!box.getString("primaryDrugOfAbuse"+i).equals("")){
						drugUasgePattern.setPrimaryDrugOfAbuse(box.getString("primaryDrugOfAbuse"+i));
					}
					
					if(!box.getString("secondaryDrugOfAbuse"+i).equals("")){
						drugUasgePattern.setSecondaryDrugOfAbuse(box.getString("secondaryDrugOfAbuse"+i));
					}
					drugUasgePattern.setFlag("currentDrugUsePattern");
					Visit visit = new Visit();
					visit.setId(visitId);
					drugUasgePattern.setVisit(visit);
					
					MasHospital hospital=new MasHospital();
					hospital.setId(hospitalId);
					drugUasgePattern.setHospital(hospital);
					
					hbt.save(drugUasgePattern);
				}
				}
				
				int lastUseCount = 0;
				if(box.getInt("lastUseCount") != 0){
					lastUseCount = box.getInt("lastUseCount");
				}
				for(int i=1;i<=lastUseCount;i++){
					DrugUasgePattern drugUasgePattern = new DrugUasgePattern();
					if(!box.getString("nameOfDrugsss"+i).equals("")){
					if(!box.getString("nameOfDrugsss"+i).equals("")){
						drugUasgePattern.setDrugName(box.getString("nameOfDrugsss"+i));
					}
					
					if(!box.getString("dateLastUse"+i).equals("")){
						drugUasgePattern.setDateDrug(HMSUtil.convertStringTypeDateToDateType(box.getString("dateLastUse"+i)));
					}
					if(box.getDouble("amt"+i) != 0){
						drugUasgePattern.setDrugAmountUsed(box.getDouble("amt"+i));
					}
					drugUasgePattern.setFlag("lastUse");
					Visit visit = new Visit();
					visit.setId(visitId);
					drugUasgePattern.setVisit(visit);
					
					MasHospital hospital=new MasHospital();
					hospital.setId(hospitalId);
					drugUasgePattern.setHospital(hospital);
					
					hbt.save(drugUasgePattern);
				}
				
				
				}
				
				
				PathologicalPattern pathologicalPattern = new PathologicalPattern();
				pathologicalPattern.setAlcoholPatholigicalPattern(box.getString("alcohol"));
				pathologicalPattern.setPersistentPathologicalPattern(box.getString("persistent"));
				pathologicalPattern.setDrinkingPathologicalPattern(box.getString("greatDeal"));
				pathologicalPattern.setDesirePathologicalPattern(box.getString("craving"));
				pathologicalPattern.setRecurrentPathologicalPattern(box.getString("recurrent"));
				pathologicalPattern.setContinuedAlcoholUse(box.getString("continued"));
				pathologicalPattern.setActivitiesPathologicalPattern(box.getString("important"));
				pathologicalPattern.setPhysicallyHazardousPathologicalPattern(box.getString("recurrentAlcohol"));
				pathologicalPattern.setPsycologicalPathologicalPattern(box.getString("alcoholUse"));
				pathologicalPattern.setTolerancePathologicalPattern(box.getString("tolerance"));
				pathologicalPattern.setWithdrawalPathologicalPattern(box.getString("withdrawal"));
				pathologicalPattern.setTotalSource(Integer.parseInt(box.getString("totalSource")));
				
				pathologicalPattern.setDidYou(box.getString("didYou"));
				pathologicalPattern.setWhatAbout(box.getString("whatAbout"));
				
				
				Visit visit = new Visit();
				visit.setId(visitId);
				pathologicalPattern.setVisit(visit);
				
				MasHospital hospital=new MasHospital();
				hospital.setId(hospitalId);
				pathologicalPattern.setHospital(hospital);
				
				hbt.save(pathologicalPattern);
				
				DrugRelatedProblem drugRelatedProblem = new DrugRelatedProblem();
				drugRelatedProblem.setGastritisCurrent(box.getString("gastritisCurrent"));
				drugRelatedProblem.setGastriticPast(box.getString("gastritisPast"));
				
				drugRelatedProblem.setBronchitisCurrent(box.getString("bronchitisCurrent"));
				drugRelatedProblem.setBronchitisPast(box.getString("bronchitisPast"));
				
				drugRelatedProblem.setJaundiceCurrent(box.getString("jaundiceCurrent"));
				drugRelatedProblem.setJaundicePast(box.getString("jaundicePast"));
				
				drugRelatedProblem.setAscitesCurrent(box.getString("ascitesCurrent"));
				drugRelatedProblem.setAscitesPast(box.getString("ascitesPast"));
				
				drugRelatedProblem.setHeartDiseaseCurrent(box.getString("heartDiseaseCurrent"));
				drugRelatedProblem.setHeartDiseasePast(box.getString("heartDiseasePast"));
				
				drugRelatedProblem.setAnemiaCurrent(box.getString("anemiaCurrent"));
				drugRelatedProblem.setAnemiaPast(box.getString("anemiaPast"));
				
				drugRelatedProblem.setHaematamosisCurrent(box.getString("haematamosisCurrent"));
				drugRelatedProblem.setHaematamosisPast(box.getString("haematamosisPast"));
				
				drugRelatedProblem.setPeripheralNeuritisCurrent(box.getString("peripheralNeuritisCurrent"));
				drugRelatedProblem.setPeripheralNeuritisPast(box.getString("peripheralNeuritisPast"));
				
				drugRelatedProblem.setCirrchosisCurrent(box.getString("cirrhosisCurrent"));
				drugRelatedProblem.setCirrhosisPast(box.getString("cirrhosisPast"));
				
				drugRelatedProblem.setPneumoniaCurrent(box.getString("pneumoniaCurrent"));
				drugRelatedProblem.setPneumoniaPast(box.getString("pneumoniaPast"));
				
				drugRelatedProblem.setPortalHtnCurrent(box.getString("portalHTNCurrent"));
				drugRelatedProblem.setPortalHtnPast(box.getString("portalHTNPast"));
				
				drugRelatedProblem.setOthersCurrent(box.getString("othersCurrent"));
				drugRelatedProblem.setOthersCurrentValue(box.getString("othersCurrentValue"));
				drugRelatedProblem.setOthersPast(box.getString("othersPast"));
				drugRelatedProblem.setOthersPastValue(box.getString("othersPastValue"));
				
				drugRelatedProblem.setFightsWorkPlaceCurrent(box.getString("fightsAtWorkPlaceCurrent"));
				drugRelatedProblem.setFightsWorkPlacePast(box.getString("fightsAtWorkPlacePast"));
				
				drugRelatedProblem.setJobShitfingCurrent(box.getString("shiftOfJobCurrent"));
				drugRelatedProblem.setJobShiftingPast(box.getString("shiftOfJobPast"));
				
				drugRelatedProblem.setJoblessCurrent(box.getString("joblessCurrent"));
				drugRelatedProblem.setJoblessPast(box.getString("joblessPast"));
				
				drugRelatedProblem.setPoliceCaseCurrent(box.getString("policeCaseCurrent"));
				drugRelatedProblem.setPoliceCasePast(box.getString("policeCasePlacePast"));
				
				drugRelatedProblem.setArrestCurrent(box.getString("arrestsStayInJailCurrent"));
				drugRelatedProblem.setArrestPast(box.getString("arrestsStayInJailPast"));
				
				drugRelatedProblem.setPsychoSocialFamilyFightCurrent(box.getString("fightsInTheFamilyCurrent"));
				drugRelatedProblem.setPsychoSocialFamilyFightPast(box.getString("fightsInTheFamilyPast"));
				
				drugRelatedProblem.setPsychoSocialAcademicDeteriorationCurrent(box.getString("academicDeteriorationCurrent"));
				drugRelatedProblem.setPsychoSocialAcademicDeteriorationPast(box.getString("academicDeteriorationPast"));
				
				drugRelatedProblem.setPsychoSocialFriendLossCurrent(box.getString("lossOfFriendsCurrent"));
				drugRelatedProblem.setPsychoSocialFriendLossPast(box.getString("lossOfFriendsPast"));
				
				drugRelatedProblem.setPsychoSocialSeparatedCurrent(box.getString("separationCurrent"));
				drugRelatedProblem.setPsychoSocialSeparatedPast(box.getString("separationPast"));
				
				drugRelatedProblem.setPsychoSocialDivorceCurrent(box.getString("divorceCurrent"));
				drugRelatedProblem.setPsychoSocialDivorcePast(box.getString("divorcePast"));
				
				drugRelatedProblem.setPsychoSocialFinancialLossCurrent(box.getString("financialLossCurrent"));
				drugRelatedProblem.setPsychoSocialFinancialLossPast(box.getString("financialLossPast"));
				
				drugRelatedProblem.setPsychiatricStatusDeliriumTremensCurrent(box.getString("deliriumTremensCurrent"));
				drugRelatedProblem.setPsychiatricStatusDeliriumTremensPast(box.getString("deliriumTremensPast"));
				
				drugRelatedProblem.setPsychiatricStatusMoodDisorderCurrent(box.getString("moodDisorderCurrent"));
				drugRelatedProblem.setPsychiatricStatusMoodDisorderPast(box.getString("moodDisorderPast"));
				
				drugRelatedProblem.setPsychiatricStatusDementiaCurrent(box.getString("dementiaCurrent"));
				drugRelatedProblem.setPsychiatricStatusDementiaPast(box.getString("dementiaPast"));
				
				drugRelatedProblem.setPsychiatricStatusSexualDysfunctionCurrent(box.getString("sexualDysfunctionCurrent"));
				drugRelatedProblem.setPsychiatricStatusSexualDysfunctionPast(box.getString("sexualDysfunctionPast"));
				
				drugRelatedProblem.setPsychiatricStatusPsychoticDisorderCurrent(box.getString("psychoticDiscorderCurrent"));
				drugRelatedProblem.setPsychiatricStatusPsychoticDisorderPast(box.getString("psychoticDiscorderPast"));
				
				drugRelatedProblem.setPsychiatricStatusAnnxietyDisorderCurrent(box.getString("anxietyDisorderCurrent"));
				drugRelatedProblem.setPsychiatricStatusAnnxietyDisorderPast(box.getString("anxietyDisorderPast"));
	
				drugRelatedProblem.setPsychiatricStatusAmnestyDisorderCurrent(box.getString("amnestyDisorderCurrent"));
				drugRelatedProblem.setPsychiatricStatusAmnestyDisorderPast(box.getString("amnestyDisorderLossPast"));
	
				drugRelatedProblem.setPsychiatricStatusSleepDisorderCurrent(box.getString("sleepDisorderCurrent"));
				drugRelatedProblem.setPsychiatricStatusSleepDisorderPast(box.getString("sleepDisorderPast"));
				

				if (!box.getString("familyHistorySelect").equals("")) {
					drugRelatedProblem.setFamilyHistorySelect(box.getString("familyHistorySelect"));
				}

				if (!box.getString("reasonsForSeekingTreatmentSelect").equals("")) {
					drugRelatedProblem.setTreatmentReason(box.getString("reasonsForSeekingTreatmentSelect"));
				}

				if (!box.getString("formulationPlanSelect").equals("")) {
					drugRelatedProblem.setFormulaPlan(box.getString("formulationPlanSelect"));
				}
				
				
				
				drugRelatedProblem.setFamilyHistory(box.getString("familyHistorytxtArea"));
				drugRelatedProblem.setPremorbidPersonality(box.getString("premorbidPremorbidtxtArea"));
				drugRelatedProblem.setMentalStatusExamination(box.getString("mentalStatusExaminationtxtArea"));
				drugRelatedProblem.setPhysicalExamination(box.getString("physicalExaminationtxtArea"));
				
				drugRelatedProblem.setPrimaryDrugAbuse(box.getString("primaryDrugOfAbuse"));
				drugRelatedProblem.setSecondaryAbuse(box.getString("secondaryDrugOfAbuse"));
				drugRelatedProblem.setTxtPreviousAttempts(box.getString("txtpreviousAttemptsAtAbstinence"));
				drugRelatedProblem.setPreviousAttempts(box.getString("previousAttemptsAtAbstinence"));
				drugRelatedProblem.setVisit(visit);
		
		
				drugRelatedProblem.setHospital(hospital);
				
				hbt.save(drugRelatedProblem);
	
				
				
				
				
				int periodCount = 0;
				if(box.getInt("periodCount") != 0){
					periodCount = box.getInt("periodCount");
				}
				for(int i=1;i<=periodCount;i++){
					DrugUsagePreviousAttempts drugUsagePreviousAttempts = new DrugUsagePreviousAttempts();
					if(!box.getString("timePeriod"+i).equals("")){
						drugUsagePreviousAttempts.setTimePeriod(box.getInt("timePeriod"+i));
					}
					if(!box.getString("periodInWeeks"+i).equals("")){
						drugUsagePreviousAttempts.setPeriodWeeks(box.getInt("periodInWeeks"+i));
					}
					
					if(!box.getString("selfWithMedicalHelp"+i).equals("")){
						drugUsagePreviousAttempts.setMedicationHelp(box.getString("selfWithMedicalHelp"+i));
					}
				
					
					drugUsagePreviousAttempts.setVisit(visit);
					
					
					drugUsagePreviousAttempts.setHospital(hospital);
					
					hbt.save(drugUsagePreviousAttempts);
				}
				if(opdPatientDetailId  != 0){
					 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetailId);
					 opdPatientDetails.setTemplateName(box.getString("templateName"));
					hbt.update(opdPatientDetails);
				}
	
				tx.commit();
				map.put("drugUsageHistory",drugUsageHistory); 
			
			}catch(Exception e){
				e.printStackTrace();
			}
			return map;
			}
		public Map<String, Object>checkMappedCharge(Map<String, Object> map){
			List<MasChargeCode> masChargeCodes = new ArrayList<MasChargeCode>();
			List<MasChargeCode> masChargeCode = new ArrayList<MasChargeCode>();
			Session session = (Session) getSession();
			String chargeName =(String)map.get("chargeName");
			List chargeTypeList=new ArrayList();
			chargeTypeList.add(10);
			chargeTypeList.add(11);
			int departmentId = (Integer)map.get("departmentId");//Added By Om Tripathi 25/09/2017
			masChargeCodes = session.createCriteria(MasChargeCode.class).add(Restrictions.in("ChargeType.Id",chargeTypeList))
					.add(Restrictions.eq("ChargeCodeName", chargeName).ignoreCase()).createAlias("Department", "dept")
					.add(Restrictions.eq("dept.Id", departmentId))
					.list();
			//Added By Om Tripathi 25/09/2017
			masChargeCode = session.createCriteria(MasChargeCode.class)
					.add(Restrictions.in("ChargeType.Id",chargeTypeList))
					.add(Restrictions.eq("ChargeCodeName", chargeName).ignoreCase())
					.add(Restrictions.eq("CommonChargeCodeStatus", "Y").ignoreCase())
					.list();
			
			masChargeCodes.addAll(masChargeCode);
			if(masChargeCodes.size()>0){
				map.put("chargecodeId", masChargeCodes.get(0).getId());
			}
			map.put("count", masChargeCodes.size());
			return map;
		}

		@Override
		public Map<String, Object> saveENTExamination(Box box) {
		Map<String,Object> map = new HashMap<String,Object>();
		try{
			Session session = (Session) getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			OpdEntExaminationSpeciality opdEntExaminationSpeciality = new OpdEntExaminationSpeciality();
		
			if(box.getInt("entExaminationId")!=0){
				opdEntExaminationSpeciality = hbt.load(OpdEntExaminationSpeciality.class, box.getInt("entExaminationId"));
			}	
				
		
		opdEntExaminationSpeciality.setLeftPinna(box.getString("leftPinna"));
		opdEntExaminationSpeciality.setRightPinna(box.getString("rightPinna"));
		opdEntExaminationSpeciality.setLeftPreauricularArea(box.getString("leftPreAuricularArea"));
		opdEntExaminationSpeciality.setRightPreauricularArea(box.getString("rightPreAuricularArea"));
		opdEntExaminationSpeciality.setLeftPostAuricularArea(box.getString("leftPostAuricularArea"));
		opdEntExaminationSpeciality.setRightPostAuricularArea(box.getString("rightPostAuricularArea"));
		opdEntExaminationSpeciality.setLeftTragalTenderness(box.getString("leftTragalTenderness"));
		opdEntExaminationSpeciality.setRightTragalTenderness(box.getString("rightTragalTenderness"));
		opdEntExaminationSpeciality.setLeftExternalAuditoryCanal(box.getString("leftExternalAuditoryCanal"));
		opdEntExaminationSpeciality.setRightExternalAuditoryCanal(box.getString("rightExternalAuditoryCanal"));
		opdEntExaminationSpeciality.setLeftTympanicMembrane(box.getString("leftTympanicMembrane"));
		opdEntExaminationSpeciality.setRightTympanicMembrane(box.getString("rightTympanicMembrane"));
		
		
		opdEntExaminationSpeciality.setLeft256hzRinnes(box.getString("left256HzRinnes"));
		opdEntExaminationSpeciality.setRight256hzRinnes(box.getString("right256HzRinnes"));
		opdEntExaminationSpeciality.setLeft512hzRinnes(box.getString("left512HzRinnes"));
		opdEntExaminationSpeciality.setRight512hzRinnes(box.getString("right512HzRinnes"));
		
		opdEntExaminationSpeciality.setRinneOtherValueLeft(box.getString("rinneOtherValueleft"));
		opdEntExaminationSpeciality.setRinneOtherValueRight(box.getString("rinneOtherValueRight"));
		
		opdEntExaminationSpeciality.setLeft1024hzRinnes(box.getString("left1024HzRinnes"));
		opdEntExaminationSpeciality.setRight1024hzRinnes(box.getString("right1024HzRinnes"));
		
		opdEntExaminationSpeciality.setWeber(box.getString("weber"));
		opdEntExaminationSpeciality.setRightAbsoluteBoneConductionTest(box.getString("rightAbsoluteBoneConductionTest"));
		opdEntExaminationSpeciality.setAbsoluteBoneConductionTest(box.getString("leftAbsoluteBoneConductionTest"));
		opdEntExaminationSpeciality.setLeftMastoidTenderness(box.getString("leftMastoidTenderness"));
		opdEntExaminationSpeciality.setRightMastoidTenderness(box.getString("rightMastoidTenderness"));
		
		if (!box.getString("leftTragalTendernessStr").equals("")) {
			opdEntExaminationSpeciality.setLeftTragalTendernessValue(box.getString("leftTragalTendernessStr"));
		}
		if (!box.getString("rightTragalTendernessStr").equals("")) {
			opdEntExaminationSpeciality.setRightTragalTendernessValue(box.getString("rightTragalTendernessStr"));
		}
		
		opdEntExaminationSpeciality.setLeftFacialNreve(box.getString("leftFacialNerve").trim());
		opdEntExaminationSpeciality.setRightFacialNreve(box.getString("rightFacialNerve"));
		
		opdEntExaminationSpeciality.setLeftGrading(box.getString("leftGrading"));
		opdEntExaminationSpeciality.setRightGrading(box.getString("rightGrading"));
		
		opdEntExaminationSpeciality.setSpontaneousNystagmus(box.getString("spontaneousNystagmus"));
		opdEntExaminationSpeciality.setSpontaneousNystagmusDegree(box.getString("spontaneouSnystagmusDegree"));
		opdEntExaminationSpeciality.setSpontaneousNystagmusDirection(box.getString("spontaneouSnystagmusDirection"));
		opdEntExaminationSpeciality.setSpontaneousNystagmusDirectionValue(box.getString("spontaneouSnystagmusDirectionValue"));
		
		
		opdEntExaminationSpeciality.setLeftFistulaSign(box.getString("leftFistulaSign"));
		
		opdEntExaminationSpeciality.setLeftFistulaSignDegree(box.getString("leftFistulaSignDegree"));
		opdEntExaminationSpeciality.setLeftFistulaSignDirection(box.getString("leftFistulaSignDegreeDirection"));
		
		opdEntExaminationSpeciality.setRightFistulaSign(box.getString("rightFistulaSign"));
		opdEntExaminationSpeciality.setRightFistulaSignDegree(box.getString("rightFistulaSignDegree"));
		opdEntExaminationSpeciality.setRightFistulaSignDirection(box.getString("rightFistulaSignDirection"));
		
		/*opdEntExaminationSpeciality.setTympanicMembrane(box.getString("tympanicMembrane"));*/
		
		/*opdEntExaminationSpeciality.setSkullAndSpine(box.getString("skullAndSpine"));*/
		opdEntExaminationSpeciality.setCerebellarSigns(box.getString("cerebellarSign"));
		opdEntExaminationSpeciality.setSignsOfMeningealIrritation(box.getString("signsOfMeningealIrritation"));
		opdEntExaminationSpeciality.setExternalAppearance(box.getString("externalAppearance"));
		opdEntExaminationSpeciality.setExternalAppearanceValue(box.getString("externalAppearanceValue"));
		opdEntExaminationSpeciality.setColdSpatulaTest(box.getString("coldSpatulaTest"));
		
		opdEntExaminationSpeciality.setLeftVestibule(box.getString("leftVestibule"));
		opdEntExaminationSpeciality.setLeftVestibuleValue(box.getString("leftVestibuleValue"));
		opdEntExaminationSpeciality.setRightVestibule(box.getString("rightVestibule"));
		opdEntExaminationSpeciality.setRightVestibuleValue(box.getString("rightVestibuleValue"));
		//Add Columella
		opdEntExaminationSpeciality.setLeftColumella(box.getString("leftColumella"));
		opdEntExaminationSpeciality.setLeftColumellaValue(box.getString("leftColumellaValue"));
		opdEntExaminationSpeciality.setRightColumella(box.getString("rightColumella"));
		opdEntExaminationSpeciality.setRightColumellaValue(box.getString("rightColumellaValue"));
		
		//Add Columella End
		
		opdEntExaminationSpeciality.setVestibuleAndColumella(box.getString("columella"));
		//opdEntExaminationSpeciality.setVestibuleAndColumellaValue(box.getString("vestibuleAndColumellaValue"));
		
		
		opdEntExaminationSpeciality.setLeftMaxillary(box.getString("leftMaxillary"));
		opdEntExaminationSpeciality.setRightMaxillary(box.getString("rightMaxillary"));
		opdEntExaminationSpeciality.setLeftFrontal(box.getString("leftFrontol"));
		opdEntExaminationSpeciality.setRightFrontal(box.getString("rightFrontol"));
		opdEntExaminationSpeciality.setLeftEthmoid(box.getString("leftEthmoid"));
		opdEntExaminationSpeciality.setRightEthmoid(box.getString("rightEthmoid"));
		opdEntExaminationSpeciality.setLips(box.getString("upperLips"));
		opdEntExaminationSpeciality.setLipsValue(box.getString("upperLipsValue"));
		opdEntExaminationSpeciality.setLowerLips(box.getString("lowerLips"));
		opdEntExaminationSpeciality.setLowerLipsValue(box.getString("lowerLipsValue"));
		opdEntExaminationSpeciality.setOlfactionValueRight(box.getString("rightOlfaction"));
		opdEntExaminationSpeciality.setOlfactionValueLeft(box.getString("leftOlfaction"));
		
		opdEntExaminationSpeciality.setGums(box.getString("gums"));
		opdEntExaminationSpeciality.setGumsValue(box.getString("gumsValue"));
		opdEntExaminationSpeciality.setTeeth(box.getString("teeth"));
		opdEntExaminationSpeciality.setTeethValue(box.getString("teethValue"));
		
		opdEntExaminationSpeciality.setLeftRetroMolarTrigone(box.getString("retroMolarLeft"));
		opdEntExaminationSpeciality.setLeftRetroMolarTrigoneValue(box.getString("retroMolarLeftValue"));
		opdEntExaminationSpeciality.setRightRetroMolarTrigone(box.getString("retroMolarRight"));
		opdEntExaminationSpeciality.setRightRetroMolarTrigoneValue(box.getString("retroMolarRightValue"));
		
		opdEntExaminationSpeciality.setTongue(box.getString("tongue"));
		opdEntExaminationSpeciality.setTongueValue(box.getString("tongueValue"));
		
		
		
		opdEntExaminationSpeciality.setGingivoLabialSulcus(box.getString("gingivoLabialSulcus"));
		opdEntExaminationSpeciality.setMouthOpening(box.getString("mouth"));
		opdEntExaminationSpeciality.setMouthOpeningValue(box.getString("mouthValue"));
		
		/*opdEntExaminationSpeciality.setFloorOfMouth(box.getString("floorOfMouth"));*/
		opdEntExaminationSpeciality.setFrenulum(box.getString("frenulum"));
		opdEntExaminationSpeciality.setOpeningOfSalivaryDuct(box.getString("salivaryDuct"));
		opdEntExaminationSpeciality.setAnyOtherFinding(box.getString("anyOtherFinding"));
		
		opdEntExaminationSpeciality.setBuccalMucosa(box.getString("buccalMucosa"));
		opdEntExaminationSpeciality.setPosterioPharyngealWall(box.getString("posterioPpharyngealWall"));
		opdEntExaminationSpeciality.setAppearance(box.getString("appearance"));
		opdEntExaminationSpeciality.setDeviation(box.getString("deviation"));
		opdEntExaminationSpeciality.setLeftDeviation(box.getString("leftDeviation"));
		opdEntExaminationSpeciality.setRightDeviation(box.getString("rightDeviation"));
		
		opdEntExaminationSpeciality.setLeftSoftPalette(box.getString("leftSoftPalette"));
		opdEntExaminationSpeciality.setRightSoftPalette(box.getString("rightSoftPalette"));
		opdEntExaminationSpeciality.setLeftAnteriorPillar(box.getString("leftAnteriorPillar"));
		opdEntExaminationSpeciality.setRightAnteriorPillar(box.getString("rightAnteriorPillar"));
		opdEntExaminationSpeciality.setLeftTonsil(box.getString("leftTonsil"));
		opdEntExaminationSpeciality.setRightTonsil(box.getString("rightTonsil"));
		opdEntExaminationSpeciality.setLeftPosteriorPillar(box.getString("leftPosteriorPillar"));
		opdEntExaminationSpeciality.setRightPosteriorPillar(box.getString("rightPosteriorPillar"));
		opdEntExaminationSpeciality.setLeftPharyngealWall(box.getString("leftPosteriorPharyngealWall"));
		opdEntExaminationSpeciality.setRightPharyngealWall(box.getString("rightPosteriorPharyngealWall"));
		
		
		
		
		opdEntExaminationSpeciality.setIdlFindings(box.getString("idlFindings"));
		opdEntExaminationSpeciality.setSwelling(box.getString("swelling"));
		opdEntExaminationSpeciality.setSize(box.getString("size"));
		opdEntExaminationSpeciality.setShape(box.getString("shape"));
		opdEntExaminationSpeciality.setSurface(box.getString("surface"));
		opdEntExaminationSpeciality.setMovementsOnDeglutition(box.getString("movementsOnDeglutition"));
		opdEntExaminationSpeciality.setMovementsWithProtrusionOfTongue(box.getString("movementsWithProtrusionOfTongue"));
		opdEntExaminationSpeciality.setEngorgedVeins(box.getString("engorgedVeins"));
		opdEntExaminationSpeciality.setPulsation(box.getString("pulsation"));
		opdEntExaminationSpeciality.setTenderness(box.getString("tenderness"));
		opdEntExaminationSpeciality.setFixityToDeeperStructures(box.getString("fixityToDeeperStructures"));
		opdEntExaminationSpeciality.setFixityToDeeperStructuresValue(box.getString("fixityToDeeperStructuresValue"));
		opdEntExaminationSpeciality.setPalpablePulsation(box.getString("palpablePulsation"));
		opdEntExaminationSpeciality.setLaryngealCrepitus(box.getString("laryngealCrepitus"));
		opdEntExaminationSpeciality.setLaryngealCrepitusAnother(box.getString("laryngealCrepitusAnother"));
		opdEntExaminationSpeciality.setLymphadenopathyValue(box.getString("lymphadenopathyValue"));
		
		
		opdEntExaminationSpeciality.setBruit(box.getString("bruit"));
		
		opdEntExaminationSpeciality.setLymphnodes(box.getString("lymphnodes"));
		
		opdEntExaminationSpeciality.setLeftLevel(box.getString("leftLevel"));
		opdEntExaminationSpeciality.setRightLevel(box.getString("rightLevel"));
		
		opdEntExaminationSpeciality.setLeftSize(box.getString("leftSize"));
		opdEntExaminationSpeciality.setRightSize(box.getString("rightSize"));
		
		opdEntExaminationSpeciality.setLeftConsistency(box.getString("leftConsistency"));
		opdEntExaminationSpeciality.setRightConsistency(box.getString("rightConsistency"));
		
		opdEntExaminationSpeciality.setLeftSurface(box.getString("leftSurface"));
		opdEntExaminationSpeciality.setRightSurface(box.getString("rightSurface"));
		opdEntExaminationSpeciality.setLeftSurfaceValue(box.getString("leftSurfaceValue"));
		opdEntExaminationSpeciality.setRightSurfaceValue(box.getString("rightSurfaceValue"));
		
		
		opdEntExaminationSpeciality.setLeftMargins(box.getString("leftMargins"));
		opdEntExaminationSpeciality.setRightMargins(box.getString("rightMargins"));
		
		opdEntExaminationSpeciality.setLeftMobility(box.getString("leftMobility"));
		opdEntExaminationSpeciality.setRightMobility(box.getString("rightMobility"));
		opdEntExaminationSpeciality.setLeftMobilityValue(box.getString("leftMobilityValue"));
		opdEntExaminationSpeciality.setRightMobilityValue(box.getString("rightMobilityValue"));
		
		opdEntExaminationSpeciality.setLaryngealFramework(box.getString("laryngealFramework"));
		opdEntExaminationSpeciality.setLaryngealFrameworkValue(box.getString("laryngealFrameworkValue"));
		
		opdEntExaminationSpeciality.setLaryngealCrepitus(box.getString("laryngealCrepitus"));
		opdEntExaminationSpeciality.setThyroid(box.getString("thyroid"));
		opdEntExaminationSpeciality.setCarotid(box.getString("carotid"));
		opdEntExaminationSpeciality.setInternalJugularVein(box.getString("internalJugularVein"));
		opdEntExaminationSpeciality.setAnyOtherSwelling(box.getString("anyOtherSwelling"));
		
		opdEntExaminationSpeciality.setPallor(box.getString("pallor"));
		
		opdEntExaminationSpeciality.setSkinOverSwelling(box.getString("skinOverSwelling"));
		opdEntExaminationSpeciality.setIcterus(box.getString("icterus"));
		opdEntExaminationSpeciality.setCyanosis(box.getString("cyanosis"));
		opdEntExaminationSpeciality.setClubbing(box.getString("clubbing"));
		opdEntExaminationSpeciality.setLymphadenopathy(box.getString("lymphadenopathy"));
		opdEntExaminationSpeciality.setLymphenodesValue(box.getString("lymphnodesValue"));
		opdEntExaminationSpeciality.setEdema(box.getString("edema"));
		opdEntExaminationSpeciality.setAnyOther(box.getString("anyOther"));
		opdEntExaminationSpeciality.setEyeAndOrbit(box.getString("eyeAndOrbit"));
		opdEntExaminationSpeciality.setPalpablePulsationValue(box.getString("palpablePulsationValue"));
		
		
			opdEntExaminationSpeciality.setHardPalate(box.getString("hardPalate"));
	
		opdEntExaminationSpeciality.setGingivoBuccalSulcus(box.getString("gingivobuccalSulcus"));
		opdEntExaminationSpeciality.setSeptum(box.getString("septum"));
		opdEntExaminationSpeciality.setLeftIt(box.getString("leftIt"));
		opdEntExaminationSpeciality.setRightIt(box.getString("rightIt"));
		opdEntExaminationSpeciality.setLeftIm(box.getString("leftIm"));
		opdEntExaminationSpeciality.setRightIm(box.getString("rightIm"));
		opdEntExaminationSpeciality.setLeftMt(box.getString("leftMt"));
		opdEntExaminationSpeciality.setRightMt(box.getString("rightMt"));		
		
		opdEntExaminationSpeciality.setLeftMm(box.getString("leftMm"));
		opdEntExaminationSpeciality.setRightMm(box.getString("rightMm"));
		opdEntExaminationSpeciality.setLeftFloor(box.getString("leftFloor"));
		opdEntExaminationSpeciality.setRightFloor(box.getString("rightFloor"));
		opdEntExaminationSpeciality.setLeftRoof(box.getString("leftRoof"));
		opdEntExaminationSpeciality.setRightRoof(box.getString("rightRoof"));
		
		//Jyotish
		opdEntExaminationSpeciality.setNoseSeptum(box.getString("noseSeptum"));
		opdEntExaminationSpeciality.setNoseLeftIt(box.getString("noseleftIt"));
		opdEntExaminationSpeciality.setNoseRightIt(box.getString("noseRightIt"));
		opdEntExaminationSpeciality.setNoseLeftIm(box.getString("noseleftIM"));
		opdEntExaminationSpeciality.setNoseRightIm(box.getString("noseRightIM"));
		opdEntExaminationSpeciality.setNoseLeftMt(box.getString("noseleftMT"));
		opdEntExaminationSpeciality.setNoseRightMt(box.getString("noseRightMT"));
		opdEntExaminationSpeciality.setNoseLeftMm(box.getString("noseleftMM"));
		opdEntExaminationSpeciality.setNoseRightMm(box.getString("noseRightMM"));
		opdEntExaminationSpeciality.setNoseLeftFloor(box.getString("noseleftFloor"));
		opdEntExaminationSpeciality.setNoseRightFloor(box.getString("noseRightFloor"));
		opdEntExaminationSpeciality.setNoseLeftRoof(box.getString("noseleftRoof"));
		opdEntExaminationSpeciality.setNoseRightRoof(box.getString("noseRightRoof"));
		//End
		/*---Jyotish changes on 12/12/2017---*/
				
		if(box.getString("tympanicRightPerforation") !=null && !box.getString("tympanicRightPerforation").equals("")){
			opdEntExaminationSpeciality.setTympanicRightPerforation(box.getString("tympanicRightPerforation"));
		}
		
		if(box.getString("rightParseTensa") !=null && !box.getString("rightParseTensa").equals("")){
			opdEntExaminationSpeciality.setRightParseTensa(box.getString("rightParseTensa"));
		}
		
		if(box.getString("rightCentral") !=null && !box.getString("rightCentral").equals("")){
			opdEntExaminationSpeciality.setRightCentral(box.getString("rightCentral"));
		}
		
		if(box.getString("marginalValueRight") !=null && !box.getString("marginalValueRight").equals("")){
			opdEntExaminationSpeciality.setMarginalValueRight(box.getString("marginalValueRight"));
		}
		
		if(box.getString("rightMiddleEarMucosa") !=null && !box.getString("rightMiddleEarMucosa").equals("")){
			opdEntExaminationSpeciality.setRightMiddleEarMucosa(box.getString("rightMiddleEarMucosa"));
		}
		
		if(box.getString("rightDischarge") !=null && !box.getString("rightDischarge").equals("")){
			opdEntExaminationSpeciality.setRightDischarge(box.getString("rightDischarge"));
		}
		if(box.getString("parseFlaccidaValueRight") !=null && !box.getString("parseFlaccidaValueRight").equals("")){
			opdEntExaminationSpeciality.setParseFlaccidaValueRight(box.getString("parseFlaccidaValueRight"));
		}
		
		if(box.getString("tympanicLeftPerforation") !=null && !box.getString("tympanicLeftPerforation").equals("")){
			opdEntExaminationSpeciality.setTympanicLeftPerforation(box.getString("tympanicLeftPerforation"));
		}
		
		if(box.getString("leftParseTensa") !=null && !box.getString("leftParseTensa").equals("")){
			opdEntExaminationSpeciality.setLeftParseTensa(box.getString("leftParseTensa"));
		}
		
		if(box.getString("leftCentral") !=null && !box.getString("leftCentral").equals("")){
			opdEntExaminationSpeciality.setLeftCentral(box.getString("leftCentral"));
		}
		
		if(box.getString("marginalValueLeft") !=null && !box.getString("marginalValueLeft").equals("")){
			opdEntExaminationSpeciality.setMarginalValueLeft(box.getString("marginalValueLeft"));
		}
		
		if(box.getString("leftMiddleEarMucosa") !=null && !box.getString("leftMiddleEarMucosa").equals("")){
			opdEntExaminationSpeciality.setLeftMiddleEarMucosa(box.getString("leftMiddleEarMucosa"));
		}
		
		if(box.getString("leftDischarge") !=null && !box.getString("leftDischarge").equals("")){
			opdEntExaminationSpeciality.setLeftDischarge(box.getString("leftDischarge"));
		}
		
		if(box.getString("parseFlaccidaValueLeft") !=null && !box.getString("parseFlaccidaValueLeft").equals("")){
			opdEntExaminationSpeciality.setParseFlaccidaValueLeft(box.getString("parseFlaccidaValueLeft"));
		}
		//End
		opdEntExaminationSpeciality.setPosteriorSeptum(box.getString("posteriorEndOfSeptum"));
		opdEntExaminationSpeciality.setPosteriorSeptumValue(box.getString("posteriorEndOfSeptumValue"));
		
		opdEntExaminationSpeciality.setLeftChoane(box.getString("leftChoane"));
		opdEntExaminationSpeciality.setLeftChoaneValue(box.getString("leftChoaneValue"));
		opdEntExaminationSpeciality.setRightChoane(box.getString("rightChoane"));
		opdEntExaminationSpeciality.setRightChoaneValue(box.getString("rightChoaneValue"));
		
		opdEntExaminationSpeciality.setLeftPostnatalRoof(box.getString("leftPostnatalRoof"));
		opdEntExaminationSpeciality.setLeftPostnatalRoofValue(box.getString("leftPostnatalRoofValue"));
		opdEntExaminationSpeciality.setRightPostnatalRoof(box.getString("rightPostnatalRoof"));
		opdEntExaminationSpeciality.setRightPostnatalRoofValue(box.getString("rightPostnatalRoofValue"));
		
		opdEntExaminationSpeciality.setLeftEtOnliae(box.getString("leftEtOnliae"));
		opdEntExaminationSpeciality.setLeftEtOnliaeValue(box.getString("leftEtOnliaeValue"));
		opdEntExaminationSpeciality.setRightEtOnliae(box.getString("rightEtOnliae"));
		opdEntExaminationSpeciality.setRightEtOnliaeValue(box.getString("rightEtOnliaeValue"));
		
		opdEntExaminationSpeciality.setLeftFor(box.getString("leftFor"));
		opdEntExaminationSpeciality.setLeftForValue(box.getString("leftForValue"));
		opdEntExaminationSpeciality.setRightFor(box.getString("rightFor"));
		opdEntExaminationSpeciality.setRightForValue(box.getString("rightForValue"));
		
		opdEntExaminationSpeciality.setLeftPosteriorTurbinates(box.getString("leftPosteriorTurbinates"));
		opdEntExaminationSpeciality.setLeftPosteriorTurbinatesValue(box.getString("leftPosteriorTurbinatesValue"));
		opdEntExaminationSpeciality.setRightPosteriorTurbinates(box.getString("rightPosteriorTurbinates"));
		opdEntExaminationSpeciality.setRightPosteriorTurbinatesValue(box.getString("rightPosteriorTurbinatesValue"));
		
		opdEntExaminationSpeciality.setImageName(box.getString("imageStr"));
		 
		
		if(box.getInt("opdPatientDetailId") != 0){
		int opdPatientDetailId =box.getInt("opdPatientDetailId");
		OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
		opdPatientDetails.setId(opdPatientDetailId);
		opdEntExaminationSpeciality.setOpdPatientDetails(opdPatientDetails);
		}
		if(!box.get("hinId").equals("")){
			int hinId =Integer.parseInt(box.get("hinId"));
			Patient patient = new Patient();
			patient.setId(hinId);
			opdEntExaminationSpeciality.setHin(patient);
		}
		if(!box.get("visitId").equals("")){
			int visitId =Integer.parseInt(box.get("visitId"));
			Visit visit= new Visit();
			visit.setId(visitId);
			opdEntExaminationSpeciality.setVisit(visit);
		}
		hbt.saveOrUpdate(opdEntExaminationSpeciality);
		hbt.refresh(opdEntExaminationSpeciality);
		if(box.getInt("opdPatientDetailId") != 0){
			 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
			 opdPatientDetails.setTemplateName(box.getString("templateName"));
			hbt.update(opdPatientDetails);
		}
		map.put("opdEntExaminationSpeciality",opdEntExaminationSpeciality);
		tx.commit();
	}catch(Exception e){
		e.printStackTrace();
	}
			return map;
		}		


		@Override
		public Map<String, Object> saveLeprosyProforma(Box box) {
			Map<String,Object> map = new HashMap<String,Object>();
			try{
				Session session = (Session) getSession();
				Transaction tx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
						
			OpdDermatologyLeprosyProforma opdLeprosyProforma = new OpdDermatologyLeprosyProforma();
			opdLeprosyProforma.setPresentingComplaintsValue(box.getString("presentingComplaintsValue")); 	
			opdLeprosyProforma.setDuration(box.getDouble("durationOfIllness"));
			opdLeprosyProforma.setDurationParameter(box.getString("durationParameter"));
			if(box.getString("tb").equalsIgnoreCase("y")){
				opdLeprosyProforma.setTb("y");
			}else{
				opdLeprosyProforma.setTb("n");
			}
			if(box.getString("hypertension").equalsIgnoreCase("y")){
				opdLeprosyProforma.setHypertension("y");
			}else{
				opdLeprosyProforma.setHypertension("n");
			}
			if(box.getString("diabetes").equalsIgnoreCase("y")){
				opdLeprosyProforma.setDiabetes("y");
			}else{
				opdLeprosyProforma.setDiabetes("n");
			}
			if(box.getString("cardiac").equalsIgnoreCase("y")){
				opdLeprosyProforma.setCardiac("y");
			}else{
				opdLeprosyProforma.setCardiac("n");
			}
			if(box.getString("hepatic").equalsIgnoreCase("y")){
				opdLeprosyProforma.setHepatic("y");
			}else{
				opdLeprosyProforma.setHepatic("n");	
			}
			if(box.getString("renal").equalsIgnoreCase("y")){
				opdLeprosyProforma.setRenal("y");
			}else{
				opdLeprosyProforma.setRenal("n");
			}
			if(box.getString("othersPastHistory").equalsIgnoreCase("y")){
				opdLeprosyProforma.setPastHistoryOthers("y");
			}else{
				opdLeprosyProforma.setPastHistoryOthers("n");
			}
			opdLeprosyProforma.setPastHistoryOthersValue(box.getString("othersPastHistoryValue"));
			opdLeprosyProforma.setHistoryOfEpistaxis(box.getString("historyOfEpistaxis"));
			opdLeprosyProforma.setEpistaxisPresentRelation(box.getString("historyOfEpistaxisRelation"));
			opdLeprosyProforma.setFamilyHistoryOfLeprosy(box.getString("familyHistoryLeprosy"));
			//opdLeprosyProforma.setFamilyHistoryRelation(box.getString("familyHistoryLeprosyRelation"));
			
			opdLeprosyProforma.setNoOfFamilyMembersAffected(box.getString("noOfFamilyAffected"));
			opdLeprosyProforma.setHistoryOfLeprosyNeighbours(box.getString("historyOfLeprosyInNeighbours"));
			
			opdLeprosyProforma.setLeprosyNeighboursValue(box.getString("leprosyNeighboursValue"));
			opdLeprosyProforma.setPreviousHistoryOfLeprosy(box.getString("previousHistoryOfLeprosy"));
			
			opdLeprosyProforma.setTreatmentOfLeprosyPresentValue(box.getString("previousHistoryOfLeprosyValue"));
			
			
			opdLeprosyProforma.setPallor(box.getString("pallor"));
			opdLeprosyProforma.setCyanosis(box.getString("cyanosis"));
			opdLeprosyProforma.setJaundice(box.getString("jaundice"));
			opdLeprosyProforma.setLymphadenopathy(box.getString("lymphadenopathy"));
			opdLeprosyProforma.setEdema(box.getString("edema"));
			
			if(box.getString("palms").equalsIgnoreCase("y")){
				opdLeprosyProforma.setPalms("y");
			}else{
				opdLeprosyProforma.setPalms("n");
			}
			if(box.getString("soles").equalsIgnoreCase("y")){
				opdLeprosyProforma.setSoles("y");
			}else{
				opdLeprosyProforma.setSoles("n");
			}
			if(box.getString("scalp").equalsIgnoreCase("y")){
				opdLeprosyProforma.setScalp(box.getString("scalp"));
			}else{
				opdLeprosyProforma.setScalp("n");
			}
			if(box.getString("mucousMembrane").equalsIgnoreCase("y")){
				opdLeprosyProforma.setMucousMembrane("y");
			}else{
				opdLeprosyProforma.setMucousMembrane("n");
			}
			opdLeprosyProforma.setOtherSitesValue(box.getString("otherSitesValue"));
			
			opdLeprosyProforma.setLepraReaction(box.getString("lepraReaction"));
			opdLeprosyProforma.setLepraReactionValue(box.getString("lepraReactionValue"));
			opdLeprosyProforma.setSensoryExamination(box.getString("sensoryExamination"));
			opdLeprosyProforma.setLepraReactionParameterValue(box.getString("lepraReactionParameterValue"));
			
			if(box.getString("temperatureW").equalsIgnoreCase("y")){
				opdLeprosyProforma.setTemperature("y");
			}else{
				opdLeprosyProforma.setTemperature("n");
			}
			if(box.getString("touchW").equalsIgnoreCase("y")){
				opdLeprosyProforma.setTouch("y");
			}else{
				opdLeprosyProforma.setTouch("n");
			}
			if(box.getString("painW").equalsIgnoreCase("y")){
				opdLeprosyProforma.setPain("y");
			}else{
				opdLeprosyProforma.setPain("n");
			}
			
			opdLeprosyProforma.setOnLesionValue(box.getString("onLesionValue"));
			opdLeprosyProforma.setGloveAndStockAnesthesia(box.getString("gloveAndStockingAnesthesia"));
			
			opdLeprosyProforma.setGloveAndStockAnesthesiaValue(box.getString("gloveAndStockingAnesthesiaValue"));
			opdLeprosyProforma.setPlantarUlcer(box.getString("plantarUlcer"));
			opdLeprosyProforma.setPlantarUlcerValue(box.getString("plantarUlcerValue"));
			
			if(!box.getString("rightHand").equals("") ||!box.getString("leftHand").equals("") ||
					!box.getString("rightHandGrade").equals("") ||!box.getString("leftHandGrade").equals("") ||	
					
					!box.getString("rightFoot").equals("") ||!box.getString("leftFoot").equals("") ||
					!box.getString("rightFootGrade").equals("") ||!box.getString("leftFootGrade").equals("") ||
					
					!box.getString("rightEyes").equals("") ||!box.getString("leftEyes").equals("") ||
					!box.getString("rightEyesGrade").equals("") ||!box.getString("leftEyesGrade").equals(""))
					{
			opdLeprosyProforma.setSiteHand(box.getString("siteHand"));
			opdLeprosyProforma.setRightSiteHand(box.getString("rightHand"));
			opdLeprosyProforma.setLeftSiteHand(box.getString("leftHand"));
			opdLeprosyProforma.setRightSiteHandGrade(box.getString("rightHandGrade"));
			opdLeprosyProforma.setLeftSiteHandGrade(box.getString("leftHandGrade"));
			
			opdLeprosyProforma.setSiteFoot(box.getString("siteFoot"));
			opdLeprosyProforma.setRightSiteFoot(box.getString("rightFoot"));
			opdLeprosyProforma.setLeftSiteFoot(box.getString("leftFoot"));
			opdLeprosyProforma.setRightSiteFootGrade(box.getString("rightFootGrade"));
			opdLeprosyProforma.setLeftSiteFootGrade(box.getString("leftFootGrade"));
			
			opdLeprosyProforma.setSiteEyes(box.getString("siteEyes"));
			opdLeprosyProforma.setRightSiteEyes(box.getString("rightEyes"));
			opdLeprosyProforma.setLeftSiteEyes(box.getString("leftEyes"));
			opdLeprosyProforma.setRightSiteEyesGrade(box.getString("rightEyesGrade"));
			opdLeprosyProforma.setLeftSiteEyesGrade(box.getString("leftEyesGrade"));
			opdLeprosyProforma.setFlagDeformity("Deformity");
			}
			opdLeprosyProforma.setRelapse(box.getString("relapse"));
			opdLeprosyProforma.setRelapseValue(box.getString("typeOfRelapse"));
			opdLeprosyProforma.setOtherRemarks(box.getString("otherRemarks"));
			
				
			
			
			if(!box.getString("morphologicalEarlobe").equals("") ||!box.getString("morphologicalSkinlesion").equals("") ||
					!box.getString("morphologicalNormallesion").equals("") ||!box.getString("bacterialEarlobe").equals("") ||	
					
					!box.getString("bacterialSkinlesion").equals("") ||!box.getString("bacterialNormallesion").equals(""))
					
					{
			opdLeprosyProforma.setSiteEarlobe(box.getString("siteEarlobe"));
			opdLeprosyProforma.setSiteSkinlesion(box.getString("siteSkinlesion"));
			opdLeprosyProforma.setSiteNormallesion(box.getString("siteNormallesion"));
			
			opdLeprosyProforma.setMorphologicalEarlobe(box.getString("morphologicalEarlobe"));
			opdLeprosyProforma.setMorphologicalSkinlesion(box.getString("morphologicalSkinlesion"));
			opdLeprosyProforma.setMorphologicalNormallesion(box.getString("morphologicalNormallesion"));
			
			
			opdLeprosyProforma.setBacterialEarlobe(box.getString("bacterialEarlobe"));
			opdLeprosyProforma.setBacterialSkinlesion(box.getString("bacterialSkinlesion"));
			opdLeprosyProforma.setBacterialNormallesion(box.getString("bacterialNormallesion"));
			opdLeprosyProforma.setFlagSmearExamination("SmearExamination");
					}
			
			if(box.getInt("opdPatientDetailId") != 0){
			int opdPatientDetailId =box.getInt("opdPatientDetailId");
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			opdLeprosyProforma.setOpdPatientDetails(opdPatientDetails);
	 		}
			if(!box.get("hinId").equals("")){
				int hinId =Integer.parseInt(box.get("hinId"));
				Patient patient = new Patient();
				patient.setId(hinId);
				opdLeprosyProforma.setHin(patient);
			}
			
			if (!box.getString("presentingComplaintsStr").equals("")) {
				opdLeprosyProforma.setPresentingComplaints(box.getString("presentingComplaintsStr"));
			}
			/*if (!box.getString("presentingComplaintsValue").equals("")) {
				opdLeprosyProforma.setPresentingComplaintsValue(box.getString("presentingComplaintsValue"));
			}*/
			
			hbt.save(opdLeprosyProforma);
			/*List complaintsList = new ArrayList();
			if(generalMap.get("complaintsList") != null){
				complaintsList = (List)generalMap.get("complaintsList");
			}*/
/*			if(complaintsList.size()>0){
				for(int k=0;k<complaintsList.size();k++){
					OpdDermatologicalLeprosyExamination opdDermatologicalLeprosyExamination = new OpdDermatologicalLeprosyExamination();
					opdDermatologicalLeprosyExamination.setFlag("Presenting Complaints");
					opdDermatologicalLeprosyExamination.setParameterName(complaintsList.get(k).toString());
					opdDermatologicalLeprosyExamination.setStatus("y");
					opdDermatologicalLeprosyExamination.setGeneralProforma(opdGeneralProformaHeader);
					hbt.save(opGeneralProformaDetail);
					
				 }
			}*/
			
			
			
			for(int i=1;i<=4;i++){	
				OpdDermatologicalLeprosyExamination opdDermatologicalLeprosyExamination = new OpdDermatologicalLeprosyExamination();
				if(!box.getString("earLobe"+i).equals("") || !box.getString("lesion"+i).equals("")||
						!box.getString("face"+i).equals("")||!box.getString("upperLimb"+i).equals("")||!box.getString("anteriorTrunk"+i).equals("")||
						!box.getString("posteriorTrunk"+i).equals("")||!box.getString("lowerLimb"+i).equals("")){
					opdDermatologicalLeprosyExamination.setEarLobe(box.getString("earLobe"+i));
					opdDermatologicalLeprosyExamination.setLesion(box.getString("lesion"+i));
					opdDermatologicalLeprosyExamination.setMadarosis(box.getString("madarosis"+i));
					opdDermatologicalLeprosyExamination.setFace(box.getString("face"+i));
					opdDermatologicalLeprosyExamination.setUpperLimb(box.getString("upperLimb"+i));
					opdDermatologicalLeprosyExamination.setAnteriorTrunk(box.getString("anteriorTrunk"+i));
					opdDermatologicalLeprosyExamination.setPosteriorTrunk(box.getString("posteriorTrunk"+i));
					opdDermatologicalLeprosyExamination.setLowerLimb(box.getString("lowerLimb"+i));
					opdDermatologicalLeprosyExamination.setLeprosyProforma(opdLeprosyProforma);
					hbt.save(opdDermatologicalLeprosyExamination);
				}
			}
			
			int nerveCount = 0;
			if(box.getInt("nerveCount") != 0){
				nerveCount = box.getInt("nerveCount");
			}
			for(int i=1;i<=nerveCount;i++){
				OpdDermatologicalNerveExamination opdDermatologicalNerveExamination = new OpdDermatologicalNerveExamination();
				if(!box.getString("nerve"+i).equals("")||!box.getString("rightNerve"+i).equals("")||!box.getString("leftNerve"+i).equals("")){
						
			
				if(!box.getString("nerve"+i).equals("")){
					opdDermatologicalNerveExamination.setNerve(box.getString("nerve"+i));
				}
				if(!box.getString("rightNerve"+i).equals("")){
					opdDermatologicalNerveExamination.setRightNerve(box.getString("rightNerve"+i));
				}
				if(!box.getString("leftNerve"+i).equals("")){
					opdDermatologicalNerveExamination.setLeftNerve(box.getString("leftNerve"+i));
				}
				opdDermatologicalNerveExamination.setLeprosyProforma(opdLeprosyProforma);
				opdDermatologicalNerveExamination.setFlag("Nerve Examination");
				hbt.save(opdDermatologicalNerveExamination);
			}
			}
			
			
			int familyHistoryCount = 0;
			if(box.getInt("familyHistoryCount") != 0){
				familyHistoryCount = box.getInt("familyHistoryCount");
			}
			for(int i=1;i<=familyHistoryCount;i++){
				OpdDermatologicalFamilyHistoryLeprosy opdDermatologicalFamilyHistoryLeprosy = new OpdDermatologicalFamilyHistoryLeprosy();
				if(!box.getString("relation"+i).equals("")||!box.getString("leprosyType"+i).equals("")||!box.getString("familyHistoryLeprosyOthers"+i).equals("")){
				if(!box.getString("relation"+i).equals("")){
					opdDermatologicalFamilyHistoryLeprosy.setRelation(box.getString("relation"+i));
				}
				if(!box.getString("leprosyType"+i).equals("")){
					opdDermatologicalFamilyHistoryLeprosy.setLeprosyType(box.getString("leprosyType"+i));
				}
				if(!box.getString("familyHistoryLeprosyOthers"+i).equals("")){
					opdDermatologicalFamilyHistoryLeprosy.setFamilyHistoryOtherParameterValue(box.getString("familyHistoryLeprosyOthers"+i));
				}
				
				opdDermatologicalFamilyHistoryLeprosy.setLeprosyProforma(opdLeprosyProforma);
				hbt.save(opdDermatologicalFamilyHistoryLeprosy);
			}
			}
			int sensoryCount = 0;
			if(box.getInt("sensoryCount") != 0){
				sensoryCount = box.getInt("sensoryCount");
			}
			for(int i=1;i<=sensoryCount;i++){
				OpdDermatologicalNerveExamination dermatologicalNerveExamination = new OpdDermatologicalNerveExamination();
				if(!box.getString("site"+i).equals("")||!box.getString("temperature"+i).equals("")||!box.getString("touch"+i).equals("")
						||!box.getString("pain"+i).equals("")
						){
				if(!box.getString("site"+i).equals("")){
					dermatologicalNerveExamination.setSite(box.getString("site"+i));
				}
				if(!box.getString("temperature"+i).equals("")){
					dermatologicalNerveExamination.setTemperature("y");
				}else{
					dermatologicalNerveExamination.setTemperature("n");
				}
				if(!box.getString("touch"+i).equals("")){
					dermatologicalNerveExamination.setTouch("y");
				}else{
					dermatologicalNerveExamination.setTouch("n");
				}
				if(!box.getString("pain"+i).equals("")){
					dermatologicalNerveExamination.setPain("y");
				}else{
					dermatologicalNerveExamination.setPain("n");
				}
				dermatologicalNerveExamination.setFlag("Sensory Examination");
				dermatologicalNerveExamination.setLeprosyProforma(opdLeprosyProforma);
				hbt.save(dermatologicalNerveExamination);
			}}
			
			if(box.getInt("opdPatientDetailId") != 0){
				 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
				 opdPatientDetails.setTemplateName(box.getString("templateName"));
				 		 if(box.getString("pulseTemp") != null && !box.getString("pulseTemp").equals("") ){
							 opdPatientDetails.setPulse(Integer.parseInt(box.getString("pulseTemp")));
							}
						
						 String bpTemp="";
						
							if ((box.getString("systolicTemp") != null	&& !box.getString("systolicTemp").equals("")) && (box.getString("diastolicTemp") != null && !box.getString("diastolicTemp").equals(""))) {
								String systolicTemp = box.getString("systolicTemp");
								String diastolicTemp = box.getString("diastolicTemp");
								bpTemp=systolicTemp+"/"+diastolicTemp;
								opdPatientDetails.setBp(bpTemp);
							}
			
				 
				 hbt.update(opdPatientDetails);
			}
		map.put("opdLeprosyProforma",opdLeprosyProforma);
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
				return map;
			}

		
		// added by amit das on 06-09-2016
		public List<PatientEpisode> getPatientEpisodeList(String hinNo) {
			List<PatientEpisode> patientEpisodeList = new ArrayList<PatientEpisode>();
			List<Patient> patientList = new ArrayList<Patient>();
			Session session=(Session) getSession();
			Criteria crt=null,crt1=null;//changed by govind 16-11-2016
			crt1=session.createCriteria(Patient.class)
					 .add(Restrictions.eq("HinNo", hinNo))
					 .add(Restrictions.ne("PatientStatus", "Expired"));
			patientList=crt1.list();
			if(patientList.size()>0){
			crt=session.createCriteria(PatientEpisode.class)
					 .add(Restrictions.eq("HinNo", hinNo));
			patientEpisodeList=crt.list();
			}
			 
			return patientEpisodeList;
		}
		
		// added by amit das on 06-09-2016
		@Override
		public Map<String, Object> getPatientEpisodeDetails(Box box) {
					
		Map<String,Object> map=new HashMap<String,Object>();
		PatientEpisode patientEpisode = null;
					
		Session session=(Session) getSession();
		int episodeId=box.getInt("episodeId");
					
		patientEpisode = (PatientEpisode)session.get(PatientEpisode.class, episodeId);
					 
		map.put("patientEpisode", patientEpisode);
		return map;
		}	
		
		//added by govind 15-9-2016
		@Override
		public Map<String, Object> updatePrescriptionTamplate(Box box) {
			Map<String, Object> map = new HashMap<String, Object>();
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = HMSUtil.getCurrentDateAndTime();
			Session session = (Session) getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			try{
			int hospitalId=box.getInt(HOSPITAL_ID);
			List<Integer> opdTemplateList = session
					.createCriteria(OpdTemplate.class)
					.createAlias("Department", "department")
					.add(Restrictions.eq("department.Id", box.getInt(DEPT_ID)))
					.add(Restrictions.eq("TemplateType", "p").ignoreCase())
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Id", box.getInt("tamplateId"))).list();
			
						
			List<Integer> templTreatMentList = session
					.createCriteria(OpdTemplateTreatment.class)
					.add(Restrictions.eq("Template.Id", box.getInt("tamplateId")))
					 .setProjection(Projections.projectionList()
						      .add(Projections.property("Id"), "id")
						      )
					.list();
			List<Integer>  removeTemplateList = new ArrayList<>(templTreatMentList); 
			int totalItem = box.getInt("hdb");
			
			
			List<OpdTemplate> tmplatCheck = session
					.createCriteria(OpdTemplate.class)
					.createAlias("Department", "department")
					.add(Restrictions.eq("department.Id", box.getInt(DEPT_ID)))
					.add(Restrictions.eq("TemplateType", "p").ignoreCase())
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("TemplateName", box.getString("tamplatename"))).list();
			int tempexist=0;
			if(tmplatCheck.size()==0){
			if(box.getString("tamplatename")!=null){
				OpdTemplate op = (OpdTemplate) hbt.load(OpdTemplate.class, box.getInt("tamplateId"));
				op.setTemplateName(box.getString("tamplatename"));
				hbt.update(op);
			}
			}else{
				tempexist=1;
			}
			
			for (int i = 1; i <= totalItem; i++) {
				String pvmsNo = box.getString("pvms" + i);
				List<MasStoreItem> itemIdListNew = new ArrayList<MasStoreItem>();
				itemIdListNew = getItemIdFromPVMS(pvmsNo);
				int itemId = 0;
				for (int k = 0; k < itemIdListNew.size(); k++) {
					itemId = itemIdListNew.get(k).getId();
				}
				if (itemId != 0) {

					OpdTemplateTreatment opdTemplateTreatment = new OpdTemplateTreatment();
					
					int tempTreatId=0;
					if(templTreatMentList.size()>0){
							if(box.getString("treatTemplteId"+i)!=null){
						for(Integer opdTempTreat:templTreatMentList){
							if(box.getInt("treatTemplteId" + i)==opdTempTreat){
								removeTemplateList.remove(opdTempTreat);
								tempTreatId=box.getInt("treatTemplteId" + i);
							}
						}
						}
					}
					if(tempTreatId>0){
						opdTemplateTreatment = (OpdTemplateTreatment) hbt.load(OpdTemplateTreatment.class, tempTreatId);
					}
					
					OpdTemplate opdTemplate = new OpdTemplate();
					opdTemplate.setId(box.getInt("tamplateId"));
					opdTemplateTreatment.setTemplate(opdTemplate);
					
					MasDepartment department = new MasDepartment();
					department.setId(box.getInt(DEPT_ID));
					opdTemplateTreatment.setDepartment(department);
					
					MasStoreItem item = new MasStoreItem();
					item.setId(itemId);
					opdTemplateTreatment.setItem(item);

					if (!box.getString("dosage" + i).equals("")) {	
						opdTemplateTreatment.setDosage(box
								.getString("dosage" + i));
					}

					if (box.getInt("noOfDays" + i) != 0) {
						opdTemplateTreatment.setNoofdays(box.getInt("noOfDays" + i));
					}
					if (box.getInt("total" + i) != 0) {
						opdTemplateTreatment.setTotal(box.getInt("total"+ i));
					}

					if (box.getInt("frequency" + i) != 0) {
						MasFrequency frequency = new MasFrequency();
						frequency.setId(box.getInt("frequency" + i));
						opdTemplateTreatment.setFrequency(frequency);
					}

					if (box.getInt("instrunction" + i) != 0) {
						OpdInstructionTreatment opdInstructionTreatment = new OpdInstructionTreatment();
						opdInstructionTreatment.setId(box
								.getInt("instrunction" + i));
						opdTemplateTreatment
								.setOpdInstructionTreatment(opdInstructionTreatment);
						
					}else{
						opdTemplateTreatment
						.setOpdInstructionTreatment(null);
					}
					if(box.getString("splInstructions"+i)!=null && box.getString("splInstructions"+i)!=""){ //Added By Srikanth 11/09/2017
						opdTemplateTreatment.setSplInstruction(box.getString("splInstructions"+i));
					}

					if (box.getInt("route" + i) != 0) {
						RouteOfAdministration routeOfAdministration = new RouteOfAdministration();
						routeOfAdministration
								.setId(box.getInt("route" + i));
						opdTemplateTreatment
								.setRoute(routeOfAdministration);
					}
					opdTemplateTreatment
							.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType((String) utilMap
											.get("currentDate")));
					opdTemplateTreatment.setLastChgTime((String) utilMap
							.get("currentTime"));
					opdTemplateTreatment.setStatus("y");
					
					if(tempTreatId>0){
						hbt.update(opdTemplateTreatment);
					}
					if(tempTreatId==0){
						hbt.save(opdTemplateTreatment);
					}
					
				}
	
				
			}
			if(removeTemplateList.size() > 0){
			List<OpdTemplateTreatment>deleteTemplateMedicine =session.createCriteria(OpdTemplateTreatment.class).add(Restrictions.in("Id", removeTemplateList)).list();
			hbt.deleteAll(deleteTemplateMedicine);
			}
			tx.commit();
			if(tempexist==1){
			map.put("message", "Template Updated successfully.");
			}else{
				map.put("message", "Template Updated successfully.");
			}
			}catch(Exception e){
				System.out.println(e);
				map.put("message", "Error occured Please try after sometime.");

			}
			return map;
		}

		@Override
		public Map<String, Object> deletePrescriptionTamplate(Box box) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session) getSession();
			 Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Integer tempId=Integer.parseInt(box.get("templateId"));
			Integer hospitalId=Integer.parseInt(box.get("hospitalId"));
			List<OpdTemplateTreatment>templateTreatments=new ArrayList<OpdTemplateTreatment>();
			List<RouteOfAdministration>route=new ArrayList<RouteOfAdministration>();
			List<OpdInstructionTreatment>instrunction=new ArrayList<OpdInstructionTreatment>();
			List<MasFrequency>frequencyList=new ArrayList<MasFrequency>();
			Map<Integer,BigDecimal>stockQty=new HashMap<Integer,BigDecimal>();
			int templTreateId=box.getInt("templTreateId");
			try{
			OpdTemplateTreatment opdTemplateTreatment = (OpdTemplateTreatment) hbt.load(OpdTemplateTreatment.class, templTreateId);
			hbt.delete(opdTemplateTreatment);
			tx.commit();
			frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			instrunction = session.createCriteria(OpdInstructionTreatment.class).add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
			route=session.createCriteria(RouteOfAdministration.class).add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
			
			if(tempId!=0){
					templateTreatments = session
							.createCriteria(OpdTemplateTreatment.class).createAlias("Template", "temp").add(Restrictions.eq("temp.Id", tempId)).addOrder(Order.asc("Id")).list();
					List<MasStoreItem>itemStock=session.createCriteria(OpdTemplateTreatment.class).setProjection(Projections.property("Item")).
							createAlias("Template", "temp").add(Restrictions.eq("temp.Id", tempId)).list();

					for(MasStoreItem item:itemStock){
						String departmentCodeforpharmacy =HMSUtil.getValuesFromPropertiesFile("pharmacy.properties", "departmentCodeforpharmacy".trim());
						int pharmacyDepId =Integer.parseInt(HMSUtil.getValuesFromPropertiesFile("adt.properties", "pharmacyDepId".trim()));
								StoreItemBatchStock itemBatchStock=(StoreItemBatchStock) session.createCriteria(StoreItemBatchStock.class)
										.createAlias("Item", "item")
										.createAlias("Hospital", "h")
										.createAlias("Department", "dept")
										.add(Restrictions.eq("item.Id", item.getId()))
										.add(Restrictions.or(Restrictions.eq("dept.DepartmentCode",departmentCodeforpharmacy), Restrictions.eq("dept.Id",pharmacyDepId)))
										.add(Restrictions.eq("h.Id", hospitalId))
										.add(Restrictions.ge("ClosingStock", new BigDecimal(0)))
										.add(Restrictions.ge("ExpiryDate",HMSUtil.convertStringTypeDateToDateType((String)HMSUtil.getCurrentDateAndTime().get("currentDate"))))
												.setMaxResults(1)
												.uniqueResult();
					if(itemBatchStock!=null)			
					stockQty.put(item.getId(), itemBatchStock.getClosingStock());			
				}
			}	
			}catch(Exception e){
				e.printStackTrace();
			}
			map.put("stockQty", stockQty);
			map.put("template", templateTreatments);
			map.put("route", route);
			map.put("instrunction", instrunction);
			map.put("frequencyList", frequencyList);
		return map;
		}

		@Override
		public Map<String, Object> savePsychogeriatricClinic(Box box) {
			Map<String,Object> map = new HashMap<String,Object>();
			try{
				Session session = (Session) getSession();
				Transaction tx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				
				String boughtFromDelhiAre ="boughtFromDelhiAre1"+" boughtFromDelhiAre2"+"boughtFromDelhiAre3";
						
			OpdPsychogeriatricClinicSpeciality opdPsychogeriatricClinicSpeciality = new OpdPsychogeriatricClinicSpeciality();
		
			if(!box.getString("socialEconomicStatus").equals("")){
				opdPsychogeriatricClinicSpeciality.setSocialEconomicStatus(box.getString("socialEconomicStatus"));
			}
			if(!box.getString("typeOfFamily").equals("")){
				opdPsychogeriatricClinicSpeciality.setTypeOfFamily(box.getString("typeOfFamily"));
			}
			if(!box.getString("socialSupport").equals("")){
				opdPsychogeriatricClinicSpeciality.setSocialSupport(box.getString("socialSupport"));
			}
			if(!box.getString("pastHistoryOfMentalIllness").equals("")){
				opdPsychogeriatricClinicSpeciality.setPastHistoryOfMentalIllness(box.getString("pastHistoryOfMentalIllness"));
			}
			opdPsychogeriatricClinicSpeciality.setPastHistoryOfMentalIllnessValue(box.getString("pastHistoryOfMentalIllnessValue"));
			
			if(!box.getString("pastHistoryOfPastIllness").equals("")){
				opdPsychogeriatricClinicSpeciality.setPastHistoryOfPhysicalIllness(box.getString("pastHistoryOfPastIllness"));
			}
			if(!box.getString("impulseDyscontrolSymptoms").equals("")){
				opdPsychogeriatricClinicSpeciality.setImpulseDyscontrolSymptoms(box.getString("impulseDyscontrolSymptoms"));
			}
			if(box.getString("hypertension").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setHypertension("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setHypertension("n");
			}
			
			if(box.getString("diabetesMellitus").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setDiabetesMellitus("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setDiabetesMellitus("n");
			}
			if(box.getString("bronchialAsthma").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setBronchialAsthma("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setBronchialAsthma("n");
			}
			if(!box.getString("easiTotalScoreZero").equals("")){
				opdPsychogeriatricClinicSpeciality.setEasiTotalScore(box.getInt("easiTotalScoreZero"));
			}
			if(!box.getString("easiTotalScoreOne").equals("")){
				opdPsychogeriatricClinicSpeciality.setEasiTotalScoreOne(box.getInt("easiTotalScoreOne"));
			}
			
			if(box.getString("tuberculosis").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setTuberculosis("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setTuberculosis("n");
			}
			if(box.getString("cerebrovascularAccident").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setCerebrovascularAccident("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setCerebrovascularAccident("n");
			}
			if(box.getString("seizureDisorder").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setSeizureDisorder("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setSeizureDisorder("n");
			}
			if(box.getString("otherPhysicalIllness").equalsIgnoreCase("y")){
				opdPsychogeriatricClinicSpeciality.setOtherPhysicalIllness("y");
			}else{
				opdPsychogeriatricClinicSpeciality.setOtherPhysicalIllness("n");
			}
			opdPsychogeriatricClinicSpeciality.setOtherPhysicalIllnessValue(box.getString("otherPhysicalIllnessValue"));
			
			if(!box.getString("familyHistoryOfMentalIllness").equals("")){
				opdPsychogeriatricClinicSpeciality.setFamilyHistoryOfMentalIllness(box.getString("familyHistoryOfMentalIllness"));
			}
			
			opdPsychogeriatricClinicSpeciality.setFamilyHistoryOfMentalIllnessValue(box.getString("familyHistoryOfMentalIllnessValue"));
			
			if(!box.getString("subStanceUse").equals("")){
				opdPsychogeriatricClinicSpeciality.setSubstanceUse(box.getString("subStanceUse"));
			}
			
			opdPsychogeriatricClinicSpeciality.setTypeOfSubstance(box.getString("typeOfSubstance"));
			
			/*if(!box.getString("premorbidPersonality").equals("")){
				opdPsychogeriatricClinicSpeciality.setPremorbidPersonality(box.getString("premorbidPersonality"));
			}
			*/
			opdPsychogeriatricClinicSpeciality.setPremorbidPersonalityValue(box.getString("premorbidPersonalityValue"));
			opdPsychogeriatricClinicSpeciality.setMentalStatusExamination(box.getString("mentalStatusExamination"));
			opdPsychogeriatricClinicSpeciality.setCognitiveFunction(box.getString("cognitiveFunction"));
			opdPsychogeriatricClinicSpeciality.setTreatmentGiven(box.getString("treatmentGiven"));
			
			/*Added By Srikanth*/
			opdPsychogeriatricClinicSpeciality.setHmseTotalScore(box.getLong("txtMiddleTableTotal"));
			/*opdPsychogeriatricClinicSpeciality.setProvisionalDiagnosis(box.getString("txtProvisionalDiag"));
			opdPsychogeriatricClinicSpeciality.setFinalDiagnosis(box.getString("txtFinalDiag"));
			opdPsychogeriatricClinicSpeciality.setDeferredDiagnosis(box.getString("txtDeferredlDiag"));*/
			
			
				opdPsychogeriatricClinicSpeciality.setEatenAndAskForFoodAgain(box.getString("eatenAndAskForFood"));
			
			if(box.getString("urinateInAnAppropriatePlace").equalsIgnoreCase("0")){
				opdPsychogeriatricClinicSpeciality.setUrinateInAnAppropriatePlace("0");
			}else if(box.getString("urinateInAnAppropriatePlace").equalsIgnoreCase("1")){
				opdPsychogeriatricClinicSpeciality.setUrinateInAnAppropriatePlace("1");
			}else {
				opdPsychogeriatricClinicSpeciality.setUrinateInAnAppropriatePlace("");
			}
			
			
			if(!box.getString("urineOrStools").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setGetDirtyFromUrineOrStools(box.getString("urineOrStools"));
			}
			if(!box.getString("shirtAndPetticoatTiedProperly").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setShirtPetticoatTiedProperly(box.getString("shirtAndPetticoatTiedProperly"));
			}
			
			if(!box.getString("DhotiAndPetticoatTiedProperly").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setDhotiPettiCoatTiedProperly(box.getString("DhotiAndPetticoatTiedProperly"));
			}
			
			if(!box.getString("ableToParticipate").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setAbleToParticipate(box.getString("ableToParticipate"));
			}
			if(!box.getString("familyMatters").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setImportantFamilyMatters(box.getString("familyMatters"));
			}
			if(!box.getString("undertakeAnImportantTask").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setFollowItThroughToCompletion(box.getString("undertakeAnImportantTask"));
			}
			if(!box.getString("importantFestivals").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setRememberImportantFestivals(box.getString("importantFestivals"));
			}
			if(!box.getString("deliverAMessage").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setDeliverAMessage(box.getString("deliverAMessage"));
			}
			if(!box.getString("regionalEvents").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setDiscussLocalRegionalEvents(box.getString("regionalEvents"));
			}
			if(!box.getString("wayInTheVillage").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setWayInTheVillage(box.getString("wayInTheVillage"));
			}
			if(!box.getString("afternoonOrEvening").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setMorningAfternoonEvening(box.getString("afternoonOrEvening"));
			}
			if(!box.getString("dayOfTheWeek").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setTodayDayOfTheWeek(box.getString("dayOfTheWeek"));
			}
			if(!box.getString("dateIsToday").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setDateIsToday(box.getString("dateIsToday"));
			}
			if(!box.getString("monthIsToday").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setMonthIsToday(box.getString("monthIsToday"));
			}
			if(!box.getString("seasonOfTheYear").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setSeasonOfTheYear(box.getString("seasonOfTheYear"));
			}
			if(!box.getString("postOffice").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setPostOfficeDoesYourVillage(box.getString("postOffice"));
			}
			if(!box.getString("district").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setDistrictDoesYourVillage(box.getString("district"));
			}
			if(!box.getString("village").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setVillageAreYouFrom(box.getString("village"));
			}
			if(!box.getString("block").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setNunumberedAreaIsThis(box.getString("block"));
			}
			if(!box.getString("place").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setPlaceIsThis(box.getString("place"));
			}
			if(!box.getString("boughtFromDelhiAre1").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setBoughtFromDelhiAre(box.getString("boughtFromDelhiAre1"));
			}
			if(!box.getString("boughtFromDelhiAre2").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setBoughtFromDelhiAre(box.getString("boughtFromDelhiAre2"));
			}
			if(!box.getString("boughtFromDelhiAre3").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setBoughtFromDelhiAre(box.getString("boughtFromDelhiAre3"));
			}
			if(!box.getString("wristWatch").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setShowHimTheWristWatchAndAsk(box.getString("wristWatch"));
			}
			if(!box.getString("identificationOfWatch").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setIdentificationOfWatch(box.getString("identificationOfWatch"));
			}
			if(!box.getString("showHimPen").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setShowHimThePenAndAsk(box.getString("showHimPen"));
			}
			if(!box.getString("identificationOfPen").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setIdentificationOfPen(box.getString("identificationOfPen"));
			}
			if(!box.getString("repeatItExactly").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setListenCarefullyAndRepeatIt(box.getString("repeatItExactly"));
			}
			if(!box.getString("doExactly").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setLookAtMyFaceAndDoExactly(box.getString("doExactly"));
			}
			if(!box.getString("totalScore").equals("")){
				opdPsychogeriatricClinicSpeciality.setTotalScoreGds(box.getInt("totalScore"));
			}else{
				opdPsychogeriatricClinicSpeciality.setTotalScoreGds(box.getInt("totalScore"));
			}
			if(!box.getString("totZeros").equals("")){
				opdPsychogeriatricClinicSpeciality.setTotalScoreGdsZero(box.getInt("totZeros"));
			}else{
				opdPsychogeriatricClinicSpeciality.setTotalScoreGdsZero(box.getInt("totZeros"));
			}
			
			if(!box.getString("paperAndInstruct").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setGivenThePaperBackToMe(box.getString("paperAndInstruct"));
			}
			if(!box.getString("aboutYourHouse").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setSayALineAboutYourHouse(box.getString("aboutYourHouse"));
			}
			if(!box.getString("twoFourSidedFigure").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setMustDrawTwoFourSidedFigure(box.getString("twoFourSidedFigure"));
			}
			if(!box.getString("mostlyInsideTheDoor").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setMostlyInsideTheOther(box.getString("mostlyInsideTheDoor"));
			}
			if(!box.getString("obviouslyAppropriate").equalsIgnoreCase("")){
				opdPsychogeriatricClinicSpeciality.setOrientationOfTheFigures(box.getString("obviouslyAppropriate"));
			}
			
			if(!box.getString("satisfieyWithYourLife").equals("")){
				opdPsychogeriatricClinicSpeciality.setSatisfieWithYourLife(box.getString("satisfieyWithYourLife"));
			}
			if(!box.getString("activitiesAndInterests").equals("")){
				opdPsychogeriatricClinicSpeciality.setActivitiesAndInterests(box.getString("activitiesAndInterests"));
			}
			if(!box.getString("lifeIsEmpty").equals("")){
				opdPsychogeriatricClinicSpeciality.setLifeIsEmpty(box.getString("lifeIsEmpty"));
			}
			if(!box.getString("oftenGetBored").equals("")){
				opdPsychogeriatricClinicSpeciality.setOftenGetBored(box.getString("oftenGetBored"));
			}
			if(!box.getString("aboutTheFuture").equals("")){
				opdPsychogeriatricClinicSpeciality.setHopefulAboutTheFuture(box.getString("aboutTheFuture"));
			}
			if(!box.getString("getOutOfYourHead").equals("")){
				opdPsychogeriatricClinicSpeciality.setGetOutOfYourHead(box.getString("getOutOfYourHead"));
			}
			if(!box.getString("godSpirits").equals("")){
				opdPsychogeriatricClinicSpeciality.setGodSpiritsMostOfTheTime(box.getString("godSpirits"));
			}
			if(!box.getString("somethingBadIsGoing").equals("")){
				opdPsychogeriatricClinicSpeciality.setAfraidThatSomethingBad(box.getString("somethingBadIsGoing"));
			}
			if(!box.getString("feelHappyMostOfTheTime").equals("")){
				opdPsychogeriatricClinicSpeciality.setFeelHappyMostOfTheTime(box.getString("feelHappyMostOfTheTime"));
			}
			if(!box.getString("feelHelpless").equals("")){
				opdPsychogeriatricClinicSpeciality.setFeelHelpless(box.getString("feelHelpless"));
			}
			if(!box.getString("restlessAndFidgety").equals("")){
				opdPsychogeriatricClinicSpeciality.setGetRestlessAndFidgety(box.getString("restlessAndFidgety"));
			}
			if(!box.getString("doingNewThings").equals("")){
				opdPsychogeriatricClinicSpeciality.setGoingOutAndDoingNewThings(box.getString("doingNewThings"));
			}
			if(!box.getString("worryaboutTheFuture").equals("")){
				opdPsychogeriatricClinicSpeciality.setFrequentlyWorryAboutTheFuture(box.getString("worryaboutTheFuture"));
			}
			if(!box.getString("problemsWithMemory").equals("")){
				opdPsychogeriatricClinicSpeciality.setProblemsWithMemory(box.getString("problemsWithMemory"));
			}
			if(!box.getString("aliveNow").equals("")){
				opdPsychogeriatricClinicSpeciality.setWonderfulToBeAlive(box.getString("aliveNow"));
			}
			if(!box.getString("feelDownhearted").equals("")){
				opdPsychogeriatricClinicSpeciality.setOftenFeelDownhearted(box.getString("feelDownhearted"));
			}
			if(!box.getString("prettyWorthless").equals("")){
				opdPsychogeriatricClinicSpeciality.setFeelPrettyWorthless(box.getString("prettyWorthless"));
			}
			if(!box.getString("aboutThePast").equals("")){
				opdPsychogeriatricClinicSpeciality.setWorryALotAboutThePast(box.getString("aboutThePast"));
			}
			if(!box.getString("lifeVeryExciting").equals("")){
				opdPsychogeriatricClinicSpeciality.setFindLifeVeryExciting(box.getString("lifeVeryExciting"));
			}
			if(!box.getString("newProjects").equals("")){
				opdPsychogeriatricClinicSpeciality.setGetStartedOnNewProjects(box.getString("newProjects"));
			}
			if(!box.getString("fullOfEnergy").equals("")){
				opdPsychogeriatricClinicSpeciality.setFeelFullOfEnergy(box.getString("fullOfEnergy"));
			}
			if(!box.getString("situationIsHopeless").equals("")){
				opdPsychogeriatricClinicSpeciality.setSituationIsHopeless(box.getString("situationIsHopeless"));
			}
			if(!box.getString("mostPeople").equals("")){
				opdPsychogeriatricClinicSpeciality.setMostPeopleAreBetterOffThanYou(box.getString("mostPeople"));
			}
			if(!box.getString("littleThings").equals("")){
				opdPsychogeriatricClinicSpeciality.setGetUpsetOverLittleThings(box.getString("littleThings"));
			}
			if(!box.getString("crying").equals("")){
				opdPsychogeriatricClinicSpeciality.setFeelLikeCrying(box.getString("crying"));
			}
			if(!box.getString("troubleConcentrating").equals("")){
				opdPsychogeriatricClinicSpeciality.setTroubleConcentrating(box.getString("troubleConcentrating"));
			}
			if(!box.getString("socialGathering").equals("")){
				opdPsychogeriatricClinicSpeciality.setAvoidSocialGatherings(box.getString("socialGathering"));
			}
			if(!box.getString("enjoyGettingUp").equals("")){
				opdPsychogeriatricClinicSpeciality.setGettingUpInTheMorning(box.getString("enjoyGettingUp"));
			}
			if(!box.getString("makeDecisions").equals("")){
				opdPsychogeriatricClinicSpeciality.setMakeDecisions(box.getString("makeDecisions"));
			}
			if(!box.getString("mindAsClear").equals("")){
				opdPsychogeriatricClinicSpeciality.setYourMindAsClearAsItUse(box.getString("mindAsClear"));
			}
			if(box.getInt("opdPatientDetailId") != 0){
			int opdPatientDetailId =box.getInt("opdPatientDetailId");
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			opdPsychogeriatricClinicSpeciality.setOpdPatientDetails(opdPatientDetails);
			}
			if(!box.get("hinId").equals("")){
				int hinId =Integer.parseInt(box.get("hinId"));
				Patient patient = new Patient();
				patient.setId(hinId);
				opdPsychogeriatricClinicSpeciality.setHin(patient);
			}
			
			hbt.save(opdPsychogeriatricClinicSpeciality);
			map.put("opdPsychogeriatricClinicSpeciality",opdPsychogeriatricClinicSpeciality);
			if(box.getInt("opdPatientDetailId") != 0){
				 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
				 opdPatientDetails.setTemplateName(box.getString("templateName"));
				 hbt.update(opdPatientDetails);
			}
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
			return map;
		}

		
		
		@Override
		public Map<String, Object> saveMedicine(Box box) {
			Map<String,Object> map = new HashMap<String,Object>();
			try{
				Session session = (Session) getSession();
				Transaction tx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
						
				
			OpdMedicineSpecialityTemplate opdMedicineSpecialityTemplate = new OpdMedicineSpecialityTemplate();;
			
			if(box.getInt("opdMedicineTemplateId")!=0){
				 opdMedicineSpecialityTemplate = hbt.load(OpdMedicineSpecialityTemplate.class, box.getInt("opdMedicineTemplateId"));
			}
		
			opdMedicineSpecialityTemplate.setPulsusParadoxus(box.getString("pulsusParadoxus"));
			opdMedicineSpecialityTemplate.setPulsusParadoxusSystolic(box.getString("systolicPulsusParadoxus"));
			opdMedicineSpecialityTemplate.setPulsusParadoxusDiastolic(box.getString("diastolicPulsusParadoxus"));
			
			opdMedicineSpecialityTemplate.setPulsusAlternans(box.getString("pulsusAlternans"));
			opdMedicineSpecialityTemplate.setPulsusAlternansSystolic(box.getString("systolicPulsusAlternans"));
			opdMedicineSpecialityTemplate.setPulsusAlternansDiastolic(box.getString("diastolicPulsusAlternans"));
			opdMedicineSpecialityTemplate.setLevelOfVenousPressure(box.getString("levelOfVenousPressure"));
		/*	if(box.getString("aWave").equalsIgnoreCase("y")){
				opdMedicineSpecialityTemplate.setWaves(box.getString("aWave"));
			}else{
				opdMedicineSpecialityTemplate.setWaves("n");
			}
			if(box.getString("vWave").equalsIgnoreCase("y")){
				opdMedicineSpecialityTemplate.setWavesV(box.getString("vWave"));
			}else{
				opdMedicineSpecialityTemplate.setWavesV("n");
			}*/
			opdMedicineSpecialityTemplate.setHepatojugularReflex(box.getString("hepatojugularReflex"));
			opdMedicineSpecialityTemplate.setInspection(box.getString("inspection")); 
			opdMedicineSpecialityTemplate.setPercussion(box.getString("percussion"));
			opdMedicineSpecialityTemplate.setPalpation(box.getString("palpation"));
			opdMedicineSpecialityTemplate.setAuscultation(box.getString("auscultation"));
			
			opdMedicineSpecialityTemplate.setRemarks(box.getString("remarks"));
			opdMedicineSpecialityTemplate.setOedemaComments(box.getString("comments"));
			opdMedicineSpecialityTemplate.setNervousSystem(box.getString("nervousSystem"));
			opdMedicineSpecialityTemplate.setRespiratorySystem(box.getString("respiratorySystem"));
			opdMedicineSpecialityTemplate.setGastrointestinalSystem(box.getString("gastrointestinalSystem"));
			opdMedicineSpecialityTemplate.setLocomotorSystem(box.getString("locomotorSystem"));
			opdMedicineSpecialityTemplate.setCardiovascularSystem(box.getString("cardiovascularSystem"));
			opdMedicineSpecialityTemplate.setHaematology(box.getString("haematology"));
			opdMedicineSpecialityTemplate.setNephrology(box.getString("nephrology"));
			
			
			opdMedicineSpecialityTemplate.setPallor(box.getString("pallor"));
			opdMedicineSpecialityTemplate.setPallorRemarks(box.getString("pallor_remarks"));
			opdMedicineSpecialityTemplate.setCyanosis(box.getString("cyanosis"));
			opdMedicineSpecialityTemplate.setCyanosisRemarks(box.getString("cyanosis_remarks"));
			opdMedicineSpecialityTemplate.setJaundice(box.getString("jaundice"));
			opdMedicineSpecialityTemplate.setJaundiceRemarks(box.getString("jaundice_remarks"));
			opdMedicineSpecialityTemplate.setClubbing(box.getString("clubbing"));
			opdMedicineSpecialityTemplate.setClubbingRemarks(box.getString("clubbing_remarks"));
			opdMedicineSpecialityTemplate.setLymphadenopathy(box.getString("lymphadenopathy"));
			opdMedicineSpecialityTemplate.setLymphadenopathyRemarks(box.getString("lymphadenopathy_remarks"));
			opdMedicineSpecialityTemplate.setOedema(box.getString("oedema"));
			opdMedicineSpecialityTemplate.setOedemaRemarks(box.getString("oedema_remarks"));
			
			
			  Vector waveVec =  box.getVector("wave");
			 if(waveVec.size()>0){
			  String wave = "";
			  String waveRemarks = "";
			  String waveRemarks1 = "";
			  for(int i=0;i<waveVec.size();i++)
			  {
			   /*  if(wave.isEmpty()){
			    	 wave = waveVec.get(i).toString();
			    	 waveRemarks =box.getString(waveVec.get(i).toString().charAt(0)+"wave_remarks");*/
			     /*}else{*/
			    	 /*wave += "#"+waveVec.get(i).toString();
			    	 waveRemarks +="#"+box.getString(waveVec.get(i).toString().charAt(0)+"wave_remarks");*/
			    	 
			    	 wave +=  wave.isEmpty()?waveVec.get(i).toString():"#"+waveVec.get(i).toString();
			    	 waveRemarks1 =waveRemarks.isEmpty()?box.getString(waveVec.get(i).toString().charAt(0)+"wave_remarks"):"#"+box.getString(waveVec.get(i).toString().charAt(0)+"wave_remarks");
			    	 
			    	
			    	 if(waveVec.get(i).toString().equalsIgnoreCase("X Wave"))
					    	waveRemarks += waveRemarks1+"@x"; 
			    	 else if(waveVec.get(i).toString().equalsIgnoreCase("Y Wave"))
				    	waveRemarks += waveRemarks1+"@y";
			    	 else if(waveVec.get(i).toString().equalsIgnoreCase("C Wave"))
				    	waveRemarks += waveRemarks1+"@c";
			    	 else  if(waveVec.get(i).toString().equalsIgnoreCase("V Wave"))
				    	waveRemarks += waveRemarks1+"@v";
			    	 else if(waveVec.get(i).toString().equalsIgnoreCase("A Wave"))
				    	waveRemarks += waveRemarks1+"@a";
			     //}
			  }
			  opdMedicineSpecialityTemplate.setWaves(wave);
			  opdMedicineSpecialityTemplate.setWavesV(waveRemarks);
		}
			
			
			if(box.getInt("opdPatientDetailId") != 0){
			int opdPatientDetailId =box.getInt("opdPatientDetailId");
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			opdMedicineSpecialityTemplate.setOpdPatientDetails(opdPatientDetails);
			}
			if(!box.get("hinId").equals("")){
				int hinId =Integer.parseInt(box.get("hinId"));
				Patient patient = new Patient();
				patient.setId(hinId);
				opdMedicineSpecialityTemplate.setHin(patient);
			}
			
			hbt.saveOrUpdate(opdMedicineSpecialityTemplate);
			
			int cardiovascularSystemCount = 0;
			if(box.getInt("cardiovascularSystemCount") != 0){
				cardiovascularSystemCount = box.getInt("cardiovascularSystemCount");
			}
			for(int ii=1;ii<=cardiovascularSystemCount;ii++){
				if(!box.getString("rate"+ii).isEmpty() ||!box.getString("rhythm"+ii).isEmpty() ||!box.getString("volume"+ii).isEmpty() ||!box.getString("csCharacter"+ii).isEmpty() ||!box.getString("conditionOfTheVesselWell"+ii).isEmpty() ||!box.getString("radioFemoralDelay"+ii).isEmpty()||!box.getString("palpitationOfPeripheralVessel"+ii).isEmpty()){
				
				OpdMedicineCardiovascularSystem opdMedicineCardiovascularSystem = null;
				if(box.getInt("opdMedicineCardioSysId"+ii) != 0)
					 opdMedicineCardiovascularSystem = hbt.load(OpdMedicineCardiovascularSystem.class, box.getLong("opdMedicineCardioSysId"+ii));
				else
					opdMedicineCardiovascularSystem = new OpdMedicineCardiovascularSystem();
					
				
				if(!box.getString("site"+ii).equals("")){
					opdMedicineCardiovascularSystem.setSite(box.getString("site"+ii));
				}
				if(!box.getString("rate"+ii).equals("")){
					opdMedicineCardiovascularSystem.setRate(box.getString("rate"+ii));
				}
				if(!box.getString("rhythm"+ii).equals("")){
					opdMedicineCardiovascularSystem.setRhythm(box.getString("rhythm"+ii));
				}
				if(!box.getString("volume"+ii).equals("")){
					opdMedicineCardiovascularSystem.setVolume(box.getString("volume"+ii));
				}
				if(!box.getString("csCharacter"+ii).equals("")){
					opdMedicineCardiovascularSystem.setCsCharacter(box.getString("csCharacter"+ii));
				}
				if(!box.getString("conditionOfTheVesselWell"+ii).equals("")){
					opdMedicineCardiovascularSystem.setConditionOfTheVesselWell(box.getString("conditionOfTheVesselWell"+ii));
				}
				if(!box.getString("radioFemoralDelay"+ii).equals("")){
					opdMedicineCardiovascularSystem.setRadioFemoralDelay(box.getString("radioFemoralDelay"+ii));
				}
				if(!box.getString("palpitationOfPeripheralVessel"+ii).equals("")){
					opdMedicineCardiovascularSystem.setPalpitationOfPeripheralVessel(box.getString("palpitationOfPeripheralVessel"+ii));
				}
			
				if(box.getInt("opdPatientDetailId") != 0){
				int opdPatientDetailId =box.getInt("opdPatientDetailId");
				OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
				opdPatientDetails.setId(opdPatientDetailId);
				opdMedicineCardiovascularSystem.setOpdPatientDetails(opdPatientDetails);
				}
				if(!box.get("hinId").equals("")){
					int hinId =Integer.parseInt(box.get("hinId"));
					Patient patient = new Patient();
					patient.setId(hinId);
					opdMedicineCardiovascularSystem.setHin(patient);
				}
				
				if(box.getInt("opdMedicineCardioSysId"+ii) != 0)
					hbt.update(opdMedicineCardiovascularSystem);
				else
				hbt.save(opdMedicineCardiovascularSystem);
				}
			}
			
			int arterialBloodPressureCount = 0;
			if(box.getInt("arterialBloodPressureCount") != 0){
				arterialBloodPressureCount = box.getInt("arterialBloodPressureCount");
			}
			for(int i=1;i<=arterialBloodPressureCount;i++){
				
				if(!box.getString("abpPosition"+i).isEmpty() || !box.getString("systolic"+i).isEmpty() || !box.getString("diastolic"+i).isEmpty()){
				
					OpdMedicineArterialBloodPressure opdMedicineArterialBloodPressure = null;
					if(box.getInt("opdMedicineABPId"+i) != 0)
						opdMedicineArterialBloodPressure = hbt.load(OpdMedicineArterialBloodPressure.class, box.getLong("opdMedicineABPId"+i));
					else
						opdMedicineArterialBloodPressure = new OpdMedicineArterialBloodPressure();
				if(!box.getString("abpPosition"+i).equals("")){
					opdMedicineArterialBloodPressure.setAbpPosition(box.getString("abpPosition"+i));
					if(box.getString("abpPosition"+i).equalsIgnoreCase("others"))
						opdMedicineArterialBloodPressure.setAbpPositionOther(box.getString("otherPosition"+i));
						
				}
				if(!box.getString("systolic"+i).equals("")){
					opdMedicineArterialBloodPressure.setSystolic(box.getString("systolic"+i));
				}
				if(!box.getString("diastolic"+i).equals("")){
					opdMedicineArterialBloodPressure.setDiastolic(box.getString("diastolic"+i));
				}
				
				
				if(box.getInt("opdPatientDetailId") != 0){
				int opdPatientDetailId =box.getInt("opdPatientDetailId");
				OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
				opdPatientDetails.setId(opdPatientDetailId);
				opdMedicineArterialBloodPressure.setOpdPatientDetails(opdPatientDetails);
				}
				if(!box.get("hinId").equals("")){
					int hinId =Integer.parseInt(box.get("hinId"));
					Patient patient = new Patient();
					patient.setId(hinId);
					opdMedicineArterialBloodPressure.setHin(patient);
				}
				
			if(box.getInt("opdMedicineABPId"+i) != 0)
				hbt.update(opdMedicineArterialBloodPressure);
				else
					hbt.save(opdMedicineArterialBloodPressure);
				}
			}
		
			map.put("opdMedicineSpecialityTemplate",opdMedicineSpecialityTemplate);
			
			if(box.getInt("opdPatientDetailId") != 0){
				 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
				 opdPatientDetails.setTemplateName(box.getString("templateName"));
				 hbt.update(opdPatientDetails);
			}
			tx.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
				return map;
			}

		@Override
		public Map<String, Object> saveOrthopedicsSpeciality(Box box) {
			Map<String,Object> map = new HashMap<String,Object>();
			OpdOrthopedicSpeciality orthopedicSpeciality = null;
			
			Session session = null;
			Transaction tx = null;
			int orthoRecordId = 0;
			if(box.getInt("orthoRecordId") != 0){
				orthoRecordId = box.getInt("orthoRecordId");
			}
			
			try{
				 session = (Session) getSession();
				 tx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				
				if(orthoRecordId != 0){
					orthopedicSpeciality = (OpdOrthopedicSpeciality)session.get(OpdOrthopedicSpeciality.class, new Integer(orthoRecordId));
				} else {
			         orthopedicSpeciality = new OpdOrthopedicSpeciality();
				}
			//if(box.getString("neck").equalsIgnoreCase("y")){
				orthopedicSpeciality.setNeck(box.getString("neckValue"));
			//}
			//if(box.getString("midBack").equalsIgnoreCase("y")){
				orthopedicSpeciality.setMidBack(box.getString("midBackValue"));
			//}
		//	if(box.getString("girdle").equalsIgnoreCase("y")){
				orthopedicSpeciality.setGirdle(box.getString("girdleValue"));
			//}
			//if(box.getString("lowBack").equalsIgnoreCase("y")){
				orthopedicSpeciality.setLowBack(box.getString("lowBackValue"));
			//}
			//if(box.getString("hip").equalsIgnoreCase("y")){
				orthopedicSpeciality.setHip(box.getString("hipType").trim());
				orthopedicSpeciality.setHipValue(box.getString("hipValue").trim());
				orthopedicSpeciality.setHipValueAnother(box.getString("hipValueAnother").trim());
			//}
			//if(box.getString("sacroiliac").equalsIgnoreCase("y")){
				orthopedicSpeciality.setSacroiliac(box.getString("sacroiliacType"));
				orthopedicSpeciality.setSacroiliacValue(box.getString("sacroiliacValue"));
				orthopedicSpeciality.setSacroiliacValueAnother(box.getString("sacroiliacValueAnother"));
			//}
			//if(box.getString("pelvis").equalsIgnoreCase("y")){
				orthopedicSpeciality.setPelvis(box.getString("pelvisType"));
				orthopedicSpeciality.setPelvisValue(box.getString("pelvisValue"));
				orthopedicSpeciality.setPelvisValueAnother(box.getString("pelvisValueaAnother"));
			//}
			//if(box.getString("thigh").equalsIgnoreCase("y")){
				orthopedicSpeciality.setThigh(box.getString("thighType"));
				orthopedicSpeciality.setThighValue(box.getString("thighValue"));
				orthopedicSpeciality.setThighValueAnother(box.getString("thighValueAnother"));
		//	}
			//if(box.getString("knee").equalsIgnoreCase("y")){
				orthopedicSpeciality.setKnee(box.getString("kneeType"));
				orthopedicSpeciality.setKneeValue(box.getString("kneeValue"));
				orthopedicSpeciality.setKneeValueAnother(box.getString("kneeValueAnother"));
			//}
			//if(box.getString("leg").equalsIgnoreCase("y")){
				orthopedicSpeciality.setLeg(box.getString("legType"));
				orthopedicSpeciality.setLegValue(box.getString("legValue"));
				orthopedicSpeciality.setLegValueAnother(box.getString("legValueAnother"));
			//}
			//if(box.getString("ankle").equalsIgnoreCase("y")){
				orthopedicSpeciality.setAnkle(box.getString("ankleType"));
				orthopedicSpeciality.setAnkleValue(box.getString("ankleValue"));
				orthopedicSpeciality.setAnkleValueAnother(box.getString("ankleValueAnother"));
			//}
			//if(box.getString("foot").equalsIgnoreCase("y")){
				orthopedicSpeciality.setFoot(box.getString("footType"));
				orthopedicSpeciality.setFootValue(box.getString("footValue"));
				orthopedicSpeciality.setFootValueAnother(box.getString("footValueAnother"));
			//}
			//if(box.getString("shoulder").equalsIgnoreCase("y")){
				orthopedicSpeciality.setShoulder(box.getString("shoulderType"));
				orthopedicSpeciality.setShoulderValue(box.getString("shoulderValue"));
				orthopedicSpeciality.setShoulderValueAnother(box.getString("shoulderValueAnother"));
			//}	
			//if(box.getString("interscapular").equalsIgnoreCase("y")){
				orthopedicSpeciality.setInterscapular(box.getString("interscapularType"));
				orthopedicSpeciality.setInterscapularValue(box.getString("interscapularValue"));
				orthopedicSpeciality.setInterscapularValueAnother(box.getString("interscapularValueAnother"));
			//}	
			//if(box.getString("arm").equalsIgnoreCase("y")){
				orthopedicSpeciality.setArm(box.getString("armType"));
				orthopedicSpeciality.setArmValue(box.getString("armValue"));
				orthopedicSpeciality.setArmValueAnother(box.getString("armValueAnother"));
			//}	
			//if(box.getString("elbow").equalsIgnoreCase("y")){
				orthopedicSpeciality.setElbow(box.getString("elbowType"));
				orthopedicSpeciality.setElbowValue(box.getString("elbowValue"));
				orthopedicSpeciality.setElbowValueAnother(box.getString("elbowValueAnother"));
			//}	
			//if(box.getString("forearm").equalsIgnoreCase("y")){
				orthopedicSpeciality.setForearm(box.getString("forearmType"));
				orthopedicSpeciality.setForearmValue(box.getString("forearmValue"));
				orthopedicSpeciality.setForearmValueAnother(box.getString("forearmValueAnother"));
			//}
			//if(box.getString("wrist").equalsIgnoreCase("y")){
				orthopedicSpeciality.setWrist(box.getString("wristType"));
				orthopedicSpeciality.setWristValue(box.getString("wristValue"));
				orthopedicSpeciality.setWristValueAnother(box.getString("wristValueAnother"));
			//}
			//if(box.getString("hand").equalsIgnoreCase("y")){
				orthopedicSpeciality.setHand(box.getString("handType"));
				orthopedicSpeciality.setHandValue(box.getString("handValue"));
				orthopedicSpeciality.setHandValueAnother(box.getString("handValueAnother"));
			//}
			//if(box.getString("upperLimb").equalsIgnoreCase("y")){
				//if (!box.getString("upperLimbType").equals("")) {
					orthopedicSpeciality.setLimb(box.getString("upperLimbType"));
					orthopedicSpeciality.setLimbValue(box.getString("upperLimbValue"));
					orthopedicSpeciality.setRightUpperLimbValue(box.getString("upperLimbValueAnother"));
					orthopedicSpeciality.setLimbLength(box.getInt("upperLimbLength"));
					orthopedicSpeciality.setUpperLimbLengthUnit(box.getString("upperLimbUnit"));
					orthopedicSpeciality.setDiscrepancy(box.getString("upperLimbDiscrepancy"));
					orthopedicSpeciality.setAnyOther(box.getString("anyOther"));
				//}
			//}
			//if(box.getString("lowerLimb").equalsIgnoreCase("y")){
			//	if (!box.getString("lowerLimbType").equals("")) {
					orthopedicSpeciality.setLowerLimb(box.getString("lowerLimbType"));
					orthopedicSpeciality.setLowerLimbValue(box.getString("lowerLimbValue"));
					orthopedicSpeciality.setRightLowerLimbValue(box.getString("upperLimbValueAnother"));
					orthopedicSpeciality.setLowerLimbLength(box.getInt("lowerLimbLength"));
					orthopedicSpeciality.setLowerLimbLengthUnit(box.getString("lowerLimbUnit"));
					orthopedicSpeciality.setLowerDiscrepancy(box.getString("lowerLimbDiscrepancy"));
					orthopedicSpeciality.setLowerLimbAnyOther(box.getString("anyOtherLowerLimb"));
				//}
		//	}
			orthopedicSpeciality.setNameOfDiscomfort(box.getString("natureOfDiscomfort"));
			//if(!box.getString("painValue").equals("")){
				orthopedicSpeciality.setPain(box.getString("painValue"));
				orthopedicSpeciality.setSite(box.getString("painSite"));
				orthopedicSpeciality.setNatureOfPain(box.getString("natureOfPain"));
				orthopedicSpeciality.setRadition(box.getString("radiation"));
				orthopedicSpeciality.setExacerbatingFactor(box.getString("exacerbatingFactor"));
				orthopedicSpeciality.setRelievingFactor(box.getString("relievingFactor"));
			//}
			//if(!box.getString("stiffness").equals("")){
				orthopedicSpeciality.setStiffness(box.getString("stiffness"));
				orthopedicSpeciality.setStiffnessValue(box.getString("stiffnessValue"));
			//}
			
			//if(!box.getString("morningStiffness").equals("")){
				orthopedicSpeciality.setMorningStiffness(box.getString("morningStiffness"));
				orthopedicSpeciality.setMorningStiffnessValue(box.getString("morningStiffnessValue"));
			//}
			//if(!box.getString("weakness").equals("")){
				orthopedicSpeciality.setWeakness(box.getString("weakness"));
				orthopedicSpeciality.setWeaknessValue(box.getString("weaknessValue"));
			//}
			//if(!box.getString("inabilityToUseALimb").equals("")){
				orthopedicSpeciality.setInabilityToUseALimb(box.getString("inabilityToUseALimb"));
				orthopedicSpeciality.setInabilityToUseLimbValue(box.getString("inabilityToUseALimbValue"));
			//}
			//if(!box.getString("disabilityToUseALimb").equals("")){
				orthopedicSpeciality.setDisabilityInUsingALimb(box.getString("disabilityToUseALimb"));
				orthopedicSpeciality.setDisabilityInUsingALimbValue(box.getString("disabilityToUseALimbValue"));
			//}
			//if(!box.getString("limbSwelling").equals("")){
				orthopedicSpeciality.setSwelling(box.getString("limbSwelling"));
				//orthopedicSpeciality.setSwellingValue(box.getString("disabilityToUseALimbValue"));
				orthopedicSpeciality.setSwellingValue(box.getString("limbSwellingValue"));
			//}
		//	if(!box.getString("natureOfInjury").equals("")){
				orthopedicSpeciality.setNatureOfInjury(box.getString("natureOfInjury"));
				String [] natureOfInjuryValueTemp =  box.getString("natureOfInjuryValue").split("\n");
				StringBuilder natureOfInjuryValueSelection = getFormattedData(natureOfInjuryValueTemp);
				orthopedicSpeciality.setNatureOfInjuryValue(natureOfInjuryValueSelection.toString());
		//	}
			//if(!box.getString("natureOfInjuryOthersValue").equals("")){
				orthopedicSpeciality.setNatureOfInjuryOthers(box.getString("natureOfInjuryOthersValue"));
			//}
			//if(!box.getString("constitutionalSymptoms").equals("")){
				orthopedicSpeciality.setConstitutionalSymptoms(box.getString("constitutionalSymptoms"));
			//}
			//if(!box.getString("swelling").equals("")){
				orthopedicSpeciality.setSwelling2(box.getString("swelling"));
				orthopedicSpeciality.setSite2(box.getString("site"));
				orthopedicSpeciality.setNatureOfGrowth(box.getString("natureOfGrowth"));
				orthopedicSpeciality.setSize(box.getString("size"));
				orthopedicSpeciality.setShape(box.getString("surface"));
				orthopedicSpeciality.setShape1(box.getString("shape"));
				orthopedicSpeciality.setConsistency(box.getString("consistency"));
				orthopedicSpeciality.setPlaneOfSwelling(box.getString("planeOfTheSwelling"));
				//if(!box.getString("natureOfGrowthValue").equals("")){
					orthopedicSpeciality.setNatureOfGrowthValue(box.getString("natureOfGrowthValue"));
			//	}
			//	if(!box.getString("remarksForSwelling").equals("")){
					orthopedicSpeciality.setRemarksForSwelling(box.getString("remarksForSwelling"));
			//	}
				
		//	}
			//if(!box.getString("occupationalHistory").equals("")){
				orthopedicSpeciality.setOccupationalHistory(box.getString("occupationalHistory"));
			//}
			//if(!box.getString("treatmentHistory").equals("")){
				orthopedicSpeciality.setTreatmentHistory(box.getString("treatmentHistory"));
			//}
			//if(!box.getString("developmentalHistory").equals("")){
				orthopedicSpeciality.setDevelopmentHistory(box.getString("developmentalHistory"));
			//}
			//if(!box.getString("developmentalMilestones").equals("")){
				orthopedicSpeciality.setDevelopmentMilestones(box.getString("developmentalMilestones"));
			//}
			//if(!box.getString("perinatalAndAntenatalHistory").equals("")){
				orthopedicSpeciality.setParinatalAndAntenatalHistory(box.getString("perinatalAndAntenatalHistory"));
			//}
			
			if(box.getInt("opdPatientDetailId") != 0){
			int opdPatientDetailId =box.getInt("opdPatientDetailId");
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			orthopedicSpeciality.setOpdPatientDetails(opdPatientDetails);
			}
			if(!box.get("hinId").equals("")){
				int hinId =Integer.parseInt(box.get("hinId"));
				Patient patient = new Patient();
				patient.setId(hinId);
				orthopedicSpeciality.setHin(patient);
			}
			
			//hbt.save(orthopedicSpeciality);
			hbt.saveOrUpdate(orthopedicSpeciality);
			map.put("orthopedicSpeciality",orthopedicSpeciality);
			
			if(box.getInt("opdPatientDetailId") != 0){
				 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
				 opdPatientDetails.setTemplateName(box.getString("templateName"));
				 hbt.update(opdPatientDetails);
			}
			tx.commit();
		}catch(Exception e){
			if(tx!=null){
				tx.rollback();
			}
			e.printStackTrace();
		}
				return map;
		}

	// added by amit das on 02-11-2016
	@Override
	public Map<String, Object> getIpDeapartmentMappings(Box box) {
		Map<String, Object> map = new HashMap<>();
		Session session = (Session) getSession();
		List<TokenDisplayIp> ipWiseDepartmentList;
		List<MasDepartmentType> masDepartmentTypeList;
		Integer hospitalId = Integer.parseInt(box.get("hospitalId"));
		try {
			ipWiseDepartmentList = session
					.createCriteria(TokenDisplayIp.class)
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y".toLowerCase())
							.ignoreCase()).list();

			masDepartmentTypeList = session
					.createCriteria(MasDepartmentType.class)
					.add(Restrictions.eq("Status", "y".toLowerCase())
							.ignoreCase())
							.addOrder(Order.asc("DepartmentTypeName"))
							.list();

			map.put("ipWiseDepartmentList", ipWiseDepartmentList);
			map.put("masDepartmentTypeList", masDepartmentTypeList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}
		
		
	// added by amit das on 02-11-2016
	@Override
	public Map<String, Object> addIpDepartmentsMapping(
			Map<String, Object> mapForDs) {

		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasDepartmentType> masDepartmentTypeList = null;
		List<TokenDisplayIp> ipWiseDepartmentList = null;
		List<MasInstituteDepartment> hospitalDepartmentList = null;
		Integer hospitalId = (Integer) mapForDs.get("hospitalId");
		String displayName = null;
		ArrayList<Integer> departmentIdsList = null;
		TokenDisplayIp tokenDisplayIp = null;
		MasHospital masHospital = null;
		Criteria criteria = null;
		Transaction tx = null;
		try {
			if (mapForDs.get("displayName") != null) {
				displayName = (String) mapForDs.get("displayName");
				departmentIdsList = (ArrayList<Integer>) mapForDs
						.get("departmentIdsList");

				tx = session.beginTransaction();

				tokenDisplayIp = new TokenDisplayIp();
				tokenDisplayIp.setDisplayName(displayName);
				tokenDisplayIp.setStatus("y");

				masHospital = new MasHospital(hospitalId);
				tokenDisplayIp.setHospital(masHospital);

				session.save(tokenDisplayIp);

				hospitalDepartmentList = session
						.createCriteria(MasInstituteDepartment.class)
						.add(Restrictions.eq("Institute.Id", hospitalId))
						.add(Restrictions
								.in("Department.Id", departmentIdsList))
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.list();

				
				Set<MasInstituteDepartment> masInstituteDepartments = new  HashSet<>();
				for (MasInstituteDepartment masInstituteDepartment : hospitalDepartmentList) {
					masInstituteDepartment.setTokenDisplayIp(tokenDisplayIp);
					session.update(masInstituteDepartment);
					masInstituteDepartments.add(masInstituteDepartment);
				}
				
				tokenDisplayIp.setMasInstituteDepartments(masInstituteDepartments);
				
				session.flush();
				tx.commit();

				map.put("message", "Successfully Added !");
				map.put("displayName", displayName);
			}
			ipWiseDepartmentList = session.createCriteria(TokenDisplayIp.class)
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();

			masDepartmentTypeList = session
					.createCriteria(MasDepartmentType.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		} catch (Exception e) {
			map.put("message", "Error in adding, Please try again !");
			if (tx != null)
				tx.rollback();
			e.printStackTrace();
		}
		map.put("ipWiseDepartmentList", ipWiseDepartmentList);
		map.put("masDepartmentTypeList", masDepartmentTypeList);

		return map;
	}
		
				
				// added by amit das on 02-11-2016
				@Override
				public Map<String, Object> editIpDepartmentsMapping(Map<String, Object> mapForDs) {
					
					Map<String, Object> map = new HashMap<String, Object>();
					Session session = (Session)getSession();
					List<MasDepartmentType> masDepartmentTypeList = null;
					List<TokenDisplayIp> ipWiseDepartmentList = null;
					List<MasInstituteDepartment> hospitalDepartmentList = null;
					int hospitalId=(Integer)mapForDs.get("hospitalId");
					int tokenDisplayIpId=Integer.parseInt((String)mapForDs.get("tokenDisplayIpId"));
					String displayName = null;
					ArrayList<Integer> departmentIdsList = null;
					TokenDisplayIp tokenDisplayIp = null;
					MasHospital masHospital = null;
					Criteria criteria = null;
					try{
						if(mapForDs.get("displayName")!=null) {
							displayName = (String)mapForDs.get("displayName");
						departmentIdsList = (ArrayList<Integer>)mapForDs.get("departmentIdsList");
						
						tokenDisplayIp = (TokenDisplayIp)session.get(TokenDisplayIp.class, tokenDisplayIpId);
						if(tokenDisplayIp!=null){
						tokenDisplayIp.setDisplayName(displayName);
						tokenDisplayIp.setStatus("y");
						
						masHospital = new MasHospital(hospitalId);
						tokenDisplayIp.setHospital(masHospital);
						
						session.update(tokenDisplayIp);
						session.flush();
						session.clear();
						
						hospitalDepartmentList = session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId)).add(Restrictions.eq("Status", "y")).add(Restrictions.eq("TokenDisplayIp.Id", tokenDisplayIpId)).list();
						
						for(MasInstituteDepartment masInstituteDepartment : hospitalDepartmentList){
							masInstituteDepartment.setTokenDisplayIp(null);
							session.update(masInstituteDepartment);
							session.flush();
						}
						
						session.clear();
						hospitalDepartmentList = session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId)).add(Restrictions.in("Department.Id", departmentIdsList)).add(Restrictions.eq("Status", "y").ignoreCase()).list();
						
						for(MasInstituteDepartment masInstituteDepartment : hospitalDepartmentList){
							masInstituteDepartment.setTokenDisplayIp(tokenDisplayIp);
							session.update(masInstituteDepartment);
							session.flush();
						}
						
						session.clear();
						}
						map.put("message", "Successfully Updated !");
						}
						ipWiseDepartmentList = session.createCriteria(TokenDisplayIp.class)
										.add(Restrictions.eq("Hospital.Id", hospitalId))
										.add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
						
						/*hospitalDepartmentList = session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
								.add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();*/
						
						masDepartmentTypeList =  session.createCriteria(MasDepartmentType.class)
								.add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
						
					}catch(Exception e){
						e.printStackTrace();
						map.put("message", "Error in updating, Please try again !");
					}
					map.put("ipWiseDepartmentList", ipWiseDepartmentList);
					/*map.put("hospitalDepartmentList", hospitalDepartmentList);*/
					map.put("masDepartmentTypeList", masDepartmentTypeList);
					
				return map;
				}
				
				// added by amit das on 02-11-2016
				@Override
				public Map<String, Object> deleteIpDepartmentsMapping(Map<String, Object> mapForDs) {
					
					Map<String, Object> map = new HashMap<String, Object>();
					Session session = (Session)getSession();
					
					List<TokenDisplayIp> ipWiseDepartmentList = null;
					List<MasInstituteDepartment> hospitalDepartmentList = null;
					int hospitalId=(Integer)mapForDs.get("hospitalId");
					int tokenDisplayIpId=Integer.parseInt((String)mapForDs.get("tokenDisplayIpId"));
					TokenDisplayIp tokenDisplayIp = null;
					MasHospital masHospital = null;
					Criteria criteria = null;
					try{
						if(mapForDs.get("displayName")!=null) {
						
						tokenDisplayIp = (TokenDisplayIp)session.get(TokenDisplayIp.class, tokenDisplayIpId);
						if(tokenDisplayIp!=null){
						hospitalDepartmentList = session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId)).add(Restrictions.eq("Status", "y")).add(Restrictions.eq("TokenDisplayIp.Id", tokenDisplayIpId)).list();
						
						for(MasInstituteDepartment masInstituteDepartment : hospitalDepartmentList){
							masInstituteDepartment.setTokenDisplayIp(null);
							session.update(masInstituteDepartment);
							session.flush();
						}
						
						session.clear();
						
						session.delete(tokenDisplayIp);
						session.flush();
						session.clear();
						}
						map.put("message", "Successfully Deleted !");
						}
						ipWiseDepartmentList = session.createCriteria(TokenDisplayIp.class)
										.add(Restrictions.eq("Hospital.Id", hospitalId))
										.add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
						
						hospitalDepartmentList = session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId))
								.add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).list();
						
					}catch(Exception e){
						e.printStackTrace();
						map.put("message", "Error in deleting, Please try again !");
					}
					map.put("ipWiseDepartmentList", ipWiseDepartmentList);
					map.put("hospitalDepartmentList", hospitalDepartmentList);
					
				return map;
				}


				@Override
				public Map<String, Object> saveRespiratoryClinic(Box box,Map<String, Object> generalMap) {
					Map<String,Object> map = new HashMap<String,Object>();
					try{
						Session session = (Session) getSession();
						Transaction tx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						OpdRespiratorySpecialityHeader opdPediatricRespiratorySpecialityHeader = new OpdRespiratorySpecialityHeader();
						
						OpdPatientDetails opdPatientDetails =new OpdPatientDetails();
						if (generalMap.get("opdPatientDetails") != null){
							opdPatientDetails = (OpdPatientDetails) generalMap.get("opdPatientDetails");
						}
						
										
						List<OpdRespiratorySpecialityHeader> opdRespiratorySpecialityHeaderList = new ArrayList<OpdRespiratorySpecialityHeader>();
						opdRespiratorySpecialityHeaderList=session.createCriteria(OpdRespiratorySpecialityHeader.class).createAlias("OpdPatientDetails", "opd")
								.add(Restrictions.eq("opd.Id",opdPatientDetails.getId())).list();
						
						
						if(opdRespiratorySpecialityHeaderList.size()>0)
						{			
							int opdRespiratorySpecialityHeaderId =0;
							for(OpdRespiratorySpecialityHeader onr:opdRespiratorySpecialityHeaderList)
							{

								opdRespiratorySpecialityHeaderId = onr.getId();
								
							}
						opdPediatricRespiratorySpecialityHeader = (OpdRespiratorySpecialityHeader)hbt.load(OpdRespiratorySpecialityHeader.class, opdRespiratorySpecialityHeaderId);
							
						
						
						opdPediatricRespiratorySpecialityHeader.setFatherName(box.getString("fatherName"));
						opdPediatricRespiratorySpecialityHeader.setFatherOccupation(box.getString("fatherOccupation"));
						opdPediatricRespiratorySpecialityHeader.setFatherEducation(box.getString("fatherEducation"));
						opdPediatricRespiratorySpecialityHeader.setMotherName(box.getString("motherName"));
						opdPediatricRespiratorySpecialityHeader.setMotherOccupation(box.getString("motherOccupation"));
						opdPediatricRespiratorySpecialityHeader.setMotherEducation(box.getString("motherEducation"));
						opdPediatricRespiratorySpecialityHeader.setAgeOfOnsetOfSymptoms(box.getString("ageOnSetSymptoms"));
						opdPediatricRespiratorySpecialityHeader.setDetailsOfExacerbation(box.getString("detailsOfExacerbation"));
						opdPediatricRespiratorySpecialityHeader.setFrequenctOverOneYear(box.getString("frequencyOverOneYear"));
						opdPediatricRespiratorySpecialityHeader.setCasualityVisits(box.getString("casualtyVisits"));
						opdPediatricRespiratorySpecialityHeader.setHospitalAdmissions(box.getString("hospitalAdmissions"));
						opdPediatricRespiratorySpecialityHeader.setIcuAdmissions(box.getString("icuAdmissions"));
						opdPediatricRespiratorySpecialityHeader.setGestationalAge(box.getString("gestationalAge")+" "+box.getString("gestationalAgeParameter"));
						opdPediatricRespiratorySpecialityHeader.setBirthWeight(box.getString("birthWeight"));
						opdPediatricRespiratorySpecialityHeader.setNeonatalRespiratorySymptoms(box.getString("neonatalrespiratorySymptoms"));
						opdPediatricRespiratorySpecialityHeader.setContactWithTuberculosis(box.getString("contactWithTuberculosis"));
						opdPediatricRespiratorySpecialityHeader.setImmunizationRoutine(box.getString("immunizationRoutine"));
						opdPediatricRespiratorySpecialityHeader.setPartialValue(box.getString("partialValue"));
						opdPediatricRespiratorySpecialityHeader.setImmunizationOptional(box.getString("immunizationOptional"));
						opdPediatricRespiratorySpecialityHeader.setExposureToCigaretteSmoke(box.getString("exposureToCigaretteSmoke"));
						opdPediatricRespiratorySpecialityHeader.setExposureToBiomassFuel(box.getString("exposureToBiomassFuel"));
						opdPediatricRespiratorySpecialityHeader.setExposureToTrafficPollution(box.getString("exposureToTrafficPollution"));
						opdPediatricRespiratorySpecialityHeader.setExposureToPets(box.getString("exposureToPets"));
						opdPediatricRespiratorySpecialityHeader.setSkin(box.getString("skin"));
						opdPediatricRespiratorySpecialityHeader.setFace(box.getString("face"));
						opdPediatricRespiratorySpecialityHeader.setConjunctiva(box.getString("conjunctiva"));
						opdPediatricRespiratorySpecialityHeader.setEar(box.getString("ear"));
						opdPediatricRespiratorySpecialityHeader.setNose(box.getString("nose"));
						opdPediatricRespiratorySpecialityHeader.setThroat(box.getString("throat"));
						opdPediatricRespiratorySpecialityHeader.setClubbing(box.getString("clubbing"));
						opdPediatricRespiratorySpecialityHeader.setWorkOfBrathing(box.getString("workOfBreathing"));
						opdPediatricRespiratorySpecialityHeader.setChest(box.getString("chest"));
						opdPediatricRespiratorySpecialityHeader.setShape(box.getString("shape"));
						opdPediatricRespiratorySpecialityHeader.setShapeValue(box.getString("shapeValue"));
						opdPediatricRespiratorySpecialityHeader.setBreathSounds(box.getString("breathSounds"));
						opdPediatricRespiratorySpecialityHeader.setBreathSoundsValue(box.getString("breathSoundsValue"));
						opdPediatricRespiratorySpecialityHeader.setWheeze(box.getString("wheeze"));
						//opdPediatricRespiratorySpecialityHeader.setWheezeValue(box.getString("withdrawal"));
						opdPediatricRespiratorySpecialityHeader.setOtherAdventitiousSounds(box.getString("otherAdventitiousSounds"));
						opdPediatricRespiratorySpecialityHeader.setAbdomen(box.getString("abdomen"));
						opdPediatricRespiratorySpecialityHeader.setCvs(box.getString("cvs"));
						opdPediatricRespiratorySpecialityHeader.setAllergySkinTest(box.getString("allergySkinTest"));
						opdPediatricRespiratorySpecialityHeader.setAsthmaEducation(box.getString("asthmaEducation"));
						opdPediatricRespiratorySpecialityHeader.setActionPlan(box.getString("actionPlan"));
						opdPediatricRespiratorySpecialityHeader.setAsthmaDiary(box.getString("actionDiary"));
						opdPediatricRespiratorySpecialityHeader.setTriggersValue(box.getString("triggersValue"));
						opdPediatricRespiratorySpecialityHeader.setPastHistoryValue(box.getString("pastHistoryValue"));
						if(box.getString("severityAtDiagnosis") != null){
							opdPediatricRespiratorySpecialityHeader.setSeverityAtDiagnosis(box.getString("severityAtDiagnosis"));
						}
						if(box.getString("intervalSinceLastVisit") != null){
							opdPediatricRespiratorySpecialityHeader.setIntervalSinceLastVisit(box.getString("intervalSinceLastVisit"));
						}
						if(box.getString("symptoms") != null){
							opdPediatricRespiratorySpecialityHeader.setSymtoms(box.getString("symptoms"));
						}
						if(box.getString("currentSymptoms") != null){
							opdPediatricRespiratorySpecialityHeader.setCurrentSymptoms(box.getString("currentSymptoms"));
						}
						if(box.getString("noOfExacerbation") != null){
							opdPediatricRespiratorySpecialityHeader.setNoOfExacerbations(box.getString("noOfExacerbation"));
						}
						if(box.getString("hospitalAdmissionsFollowUp") != null){
							opdPediatricRespiratorySpecialityHeader.setHospitalAdmissionsFollowup(box.getString("hospitalAdmissionsFollowUp"));
						}
						if(box.getString("oralSteroidUse") != null){
							opdPediatricRespiratorySpecialityHeader.setOralSteroidUse(box.getString("oralSteroidUse"));
						}
						if(box.getString("physicalActivities") != null){
							opdPediatricRespiratorySpecialityHeader.setPhysicalActivities(box.getString("physicalActivities"));
						}
						if(box.getString("inhalerTechnique") != null){
							opdPediatricRespiratorySpecialityHeader.setCheckInhalerTechnique(box.getString("inhalerTechnique"));
						}
						if(box.getString("adherenceToTreatmentPlan") != null){
							opdPediatricRespiratorySpecialityHeader.setAdherenceToTreatmentPlan(box.getString("adherenceToTreatmentPlan"));
						}
						if(box.getString("asthmaDiaryFollowUp") != null){
							opdPediatricRespiratorySpecialityHeader.setAsthmaDiaryFollowup(box.getString("asthmaDiaryFollowUp"));
						}
						if(box.getString("heartRate") != null){
							opdPediatricRespiratorySpecialityHeader.setHeartRate(box.getString("heartRate"));
						}
						if(box.getString("cineses") != null){
							opdPediatricRespiratorySpecialityHeader.setCineses(box.getString("cineses"));
						}
						
						
						
							opdPatientDetails.setId(opdPatientDetails.getId());
							opdPediatricRespiratorySpecialityHeader.setOpdPatientDetails(opdPatientDetails);
						
							if(!box.get("hinId").equals("")){
								int hinId =Integer.parseInt(box.get("hinId"));
								Patient patient = new Patient();
								patient.setId(hinId);
								opdPediatricRespiratorySpecialityHeader.setHin(patient);
							}
						
							
							
							
							
						hbt.update(opdPediatricRespiratorySpecialityHeader);
						
						}else{
						
					
						opdPediatricRespiratorySpecialityHeader.setFatherName(box.getString("fatherName"));
						opdPediatricRespiratorySpecialityHeader.setFatherOccupation(box.getString("fatherOccupation"));
						opdPediatricRespiratorySpecialityHeader.setFatherEducation(box.getString("fatherEducation"));
						opdPediatricRespiratorySpecialityHeader.setMotherName(box.getString("motherName"));
						opdPediatricRespiratorySpecialityHeader.setMotherOccupation(box.getString("motherOccupation"));
						opdPediatricRespiratorySpecialityHeader.setMotherEducation(box.getString("motherEducation"));
						opdPediatricRespiratorySpecialityHeader.setAgeOfOnsetOfSymptoms(box.getString("ageOnSetSymptoms"));
						opdPediatricRespiratorySpecialityHeader.setDetailsOfExacerbation(box.getString("detailsOfExacerbation"));
						opdPediatricRespiratorySpecialityHeader.setFrequenctOverOneYear(box.getString("frequencyOverOneYear"));
						opdPediatricRespiratorySpecialityHeader.setCasualityVisits(box.getString("casualtyVisits"));
						opdPediatricRespiratorySpecialityHeader.setHospitalAdmissions(box.getString("hospitalAdmissions"));
						opdPediatricRespiratorySpecialityHeader.setIcuAdmissions(box.getString("icuAdmissions"));
						opdPediatricRespiratorySpecialityHeader.setGestationalAge(box.getString("gestationalAge")+" "+box.getString("gestationalAgeParameter"));
						opdPediatricRespiratorySpecialityHeader.setBirthWeight(box.getString("birthWeight"));
						opdPediatricRespiratorySpecialityHeader.setNeonatalRespiratorySymptoms(box.getString("neonatalrespiratorySymptoms"));
						opdPediatricRespiratorySpecialityHeader.setContactWithTuberculosis(box.getString("contactWithTuberculosis"));
						opdPediatricRespiratorySpecialityHeader.setImmunizationRoutine(box.getString("immunizationRoutine"));
						opdPediatricRespiratorySpecialityHeader.setPartialValue(box.getString("partialValue"));
						opdPediatricRespiratorySpecialityHeader.setImmunizationOptional(box.getString("immunizationOptional"));
						opdPediatricRespiratorySpecialityHeader.setExposureToCigaretteSmoke(box.getString("exposureToCigaretteSmoke"));
						opdPediatricRespiratorySpecialityHeader.setExposureToBiomassFuel(box.getString("exposureToBiomassFuel"));
						opdPediatricRespiratorySpecialityHeader.setExposureToTrafficPollution(box.getString("exposureToTrafficPollution"));
						opdPediatricRespiratorySpecialityHeader.setExposureToPets(box.getString("exposureToPets"));
						opdPediatricRespiratorySpecialityHeader.setSkin(box.getString("skin"));
						opdPediatricRespiratorySpecialityHeader.setFace(box.getString("face"));
						opdPediatricRespiratorySpecialityHeader.setConjunctiva(box.getString("conjunctiva"));
						opdPediatricRespiratorySpecialityHeader.setEar(box.getString("ear"));
						opdPediatricRespiratorySpecialityHeader.setNose(box.getString("nose"));
						opdPediatricRespiratorySpecialityHeader.setThroat(box.getString("throat"));
						opdPediatricRespiratorySpecialityHeader.setClubbing(box.getString("clubbing"));
						opdPediatricRespiratorySpecialityHeader.setWorkOfBrathing(box.getString("workOfBreathing"));
						opdPediatricRespiratorySpecialityHeader.setChest(box.getString("chest"));
						opdPediatricRespiratorySpecialityHeader.setShape(box.getString("shape"));
						opdPediatricRespiratorySpecialityHeader.setShapeValue(box.getString("shapeValue"));
						opdPediatricRespiratorySpecialityHeader.setBreathSounds(box.getString("breathSounds"));
						opdPediatricRespiratorySpecialityHeader.setBreathSoundsValue(box.getString("breathSoundsValue"));
						opdPediatricRespiratorySpecialityHeader.setWheeze(box.getString("wheeze"));
						//opdPediatricRespiratorySpecialityHeader.setWheezeValue(box.getString("withdrawal"));
						opdPediatricRespiratorySpecialityHeader.setOtherAdventitiousSounds(box.getString("otherAdventitiousSounds"));
						opdPediatricRespiratorySpecialityHeader.setAbdomen(box.getString("abdomen"));
						opdPediatricRespiratorySpecialityHeader.setCvs(box.getString("cvs"));
						opdPediatricRespiratorySpecialityHeader.setAllergySkinTest(box.getString("allergySkinTest"));
						opdPediatricRespiratorySpecialityHeader.setAsthmaEducation(box.getString("asthmaEducation"));
						opdPediatricRespiratorySpecialityHeader.setActionPlan(box.getString("actionPlan"));
						opdPediatricRespiratorySpecialityHeader.setAsthmaDiary(box.getString("actionDiary"));
						opdPediatricRespiratorySpecialityHeader.setTriggersValue(box.getString("triggersValue"));
						opdPediatricRespiratorySpecialityHeader.setPastHistoryValue(box.getString("pastHistoryValue"));
						if(box.getString("severityAtDiagnosis") != null){
							opdPediatricRespiratorySpecialityHeader.setSeverityAtDiagnosis(box.getString("severityAtDiagnosis"));
						}
						if(box.getString("intervalSinceLastVisit") != null){
							opdPediatricRespiratorySpecialityHeader.setIntervalSinceLastVisit(box.getString("intervalSinceLastVisit"));
						}
						if(box.getString("symptoms") != null){
							opdPediatricRespiratorySpecialityHeader.setSymtoms(box.getString("symptoms"));
						}
						if(box.getString("currentSymptoms") != null){
							opdPediatricRespiratorySpecialityHeader.setCurrentSymptoms(box.getString("currentSymptoms"));
						}
						if(box.getString("noOfExacerbation") != null){
							opdPediatricRespiratorySpecialityHeader.setNoOfExacerbations(box.getString("noOfExacerbation"));
						}
						if(box.getString("hospitalAdmissionsFollowUp") != null){
							opdPediatricRespiratorySpecialityHeader.setHospitalAdmissionsFollowup(box.getString("hospitalAdmissionsFollowUp"));
						}
						if(box.getString("oralSteroidUse") != null){
							opdPediatricRespiratorySpecialityHeader.setOralSteroidUse(box.getString("oralSteroidUse"));
						}
						if(box.getString("physicalActivities") != null){
							opdPediatricRespiratorySpecialityHeader.setPhysicalActivities(box.getString("physicalActivities"));
						}
						if(box.getString("inhalerTechnique") != null){
							opdPediatricRespiratorySpecialityHeader.setCheckInhalerTechnique(box.getString("inhalerTechnique"));
						}
						if(box.getString("adherenceToTreatmentPlan") != null){
							opdPediatricRespiratorySpecialityHeader.setAdherenceToTreatmentPlan(box.getString("adherenceToTreatmentPlan"));
						}
						if(box.getString("asthmaDiaryFollowUp") != null){
							opdPediatricRespiratorySpecialityHeader.setAsthmaDiaryFollowup(box.getString("asthmaDiaryFollowUp"));
						}
						if(box.getString("heartRate") != null){
							opdPediatricRespiratorySpecialityHeader.setHeartRate(box.getString("heartRate"));
						}
						if(box.getString("cineses") != null){
							opdPediatricRespiratorySpecialityHeader.setCineses(box.getString("cineses"));
						}
						
						
						if(box.getInt("opdPatientDetailId") != 0){
							
							opdPatientDetails.setId(box.getInt("opdPatientDetailId"));
							opdPediatricRespiratorySpecialityHeader.setOpdPatientDetails(opdPatientDetails);
							}
							if(!box.get("hinId").equals("")){
								int hinId =Integer.parseInt(box.get("hinId"));
								Patient patient = new Patient();
								patient.setId(hinId);
								opdPediatricRespiratorySpecialityHeader.setHin(patient);
							}
						
							
							
							
							
						hbt.save(opdPediatricRespiratorySpecialityHeader);
					}
						
						
						
						
						int symptomsCount = 0;
						if(box.getInt("symptomsCount") != 0){
							symptomsCount = box.getInt("symptomsCount");
						}
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListSymptoms = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListSymptoms=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Symptoms"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListSymptoms",opdRespiratorySpecialityDetailListSymptoms);
						
						if(opdRespiratorySpecialityDetailListSymptoms.size()>0)
						{			
							/*int opdRespiratorySpecialityDetailId =0;
							for(OpdRespiratorySpecialityDetail opdrs:opdRespiratorySpecialityDetailListSymptoms)
							{

								opdRespiratorySpecialityDetailId = opdrs.getId();
								
								
							}
							opdPediatricRespiratorySpecialityDetail = (OpdRespiratorySpecialityDetail)hbt.load(OpdRespiratorySpecialityDetail.class, opdRespiratorySpecialityDetailId);
							hbt.delete(opdPediatricRespiratorySpecialityDetail);*/
							hbt.deleteAll(opdRespiratorySpecialityDetailListSymptoms);
													
						
						}
						
						for(int i=1;i<=symptomsCount;i++){
							
							OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailSymptoms = new OpdRespiratorySpecialityDetail();
							
							if(!box.getString("symptoms"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailSymptoms.setParameterName(box.getString("symptoms"+i));
							}
							if(!box.getString("showsymptomsOthers"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailSymptoms.setSymptomsOthers(box.getString("showsymptomsOthers"+i));
							}
							if(!box.getString("durationSymptoms"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailSymptoms.setDuration(box.getString("durationSymptoms"+i));
							}
							
							if(!box.getString("frequencySymptoms"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailSymptoms.setFrequency(box.getString("frequencySymptoms"+i));
							}
							
							if(!box.getString("remarksSymptoms"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailSymptoms.setRemark(box.getString("remarksSymptoms"+i));
							}
							opdPediatricRespiratorySpecialityDetailSymptoms.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
							
							opdPediatricRespiratorySpecialityDetailSymptoms.setFlag("Symptoms");
							opdPediatricRespiratorySpecialityDetailSymptoms.setStatus("y");
							
							hbt.save(opdPediatricRespiratorySpecialityDetailSymptoms);
						}
						List triggersList = new ArrayList();
						if(generalMap.get("triggersList") != null){
							triggersList = (List)generalMap.get("triggersList");
						}
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListTriggers = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListTriggers=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Triggers"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListTriggers",opdRespiratorySpecialityDetailListTriggers);
						
						if(opdRespiratorySpecialityDetailListTriggers.size()>0)
						{			
						/*	int opdRespiratorySpecialityDetailId =0;
							for(OpdRespiratorySpecialityDetail opdrs:opdRespiratorySpecialityDetailListTriggers)
							{

								opdRespiratorySpecialityDetailId = opdrs.getId();
								
								
							}
							opdPediatricRespiratorySpecialityDetail = (OpdRespiratorySpecialityDetail)hbt.load(OpdRespiratorySpecialityDetail.class, opdRespiratorySpecialityDetailId);
							hbt.delete(opdPediatricRespiratorySpecialityDetail);*/
							hbt.deleteAll(opdRespiratorySpecialityDetailListTriggers);
													
						
						}
						if(triggersList.size()>0){
							for(int k=0;k<triggersList.size();k++){
								
								OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailTriggers = new OpdRespiratorySpecialityDetail();
								
								
								
								opdPediatricRespiratorySpecialityDetailTriggers.setFlag("Triggers");
								opdPediatricRespiratorySpecialityDetailTriggers.setParameterName(triggersList.get(k).toString());
								opdPediatricRespiratorySpecialityDetailTriggers.setStatus("y");
								opdPediatricRespiratorySpecialityDetailTriggers.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
								hbt.save(opdPediatricRespiratorySpecialityDetailTriggers);
								
							 }
						}
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListPastHistory = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListPastHistory=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Past History"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListPastHistory",opdRespiratorySpecialityDetailListPastHistory);
						
						if(opdRespiratorySpecialityDetailListPastHistory.size()>0)
						{			
							/*int opdRespiratorySpecialityDetailId =0;
							for(OpdRespiratorySpecialityDetail opdrs:opdRespiratorySpecialityDetailListPastHistory)
							{

								opdRespiratorySpecialityDetailId = opdrs.getId();
								
								
							}
							opdPediatricRespiratorySpecialityDetail = (OpdRespiratorySpecialityDetail)hbt.load(OpdRespiratorySpecialityDetail.class, opdRespiratorySpecialityDetailId);
							hbt.delete(opdPediatricRespiratorySpecialityDetail);*/
							hbt.deleteAll(opdRespiratorySpecialityDetailListPastHistory);
													
						
						}
						List pastHistoryList = new ArrayList();
						if(generalMap.get("pastHistoryList") != null){
							pastHistoryList = (List)generalMap.get("pastHistoryList");
						}
						if(pastHistoryList.size()>0){
							for(int k=0;k<pastHistoryList.size();k++){
								
								
								
								
								OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailPastHistory = new OpdRespiratorySpecialityDetail();
								
								
								
								opdPediatricRespiratorySpecialityDetailPastHistory.setFlag("Past History");
								opdPediatricRespiratorySpecialityDetailPastHistory.setParameterName(pastHistoryList.get(k).toString());
								opdPediatricRespiratorySpecialityDetailPastHistory.setStatus("y");
								opdPediatricRespiratorySpecialityDetailPastHistory.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
								hbt.save(opdPediatricRespiratorySpecialityDetailPastHistory);
								
							 }
						}
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListMedications = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListMedications=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Medications"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListMedications",opdRespiratorySpecialityDetailListMedications);
						
						if(opdRespiratorySpecialityDetailListMedications.size()>0)
						{			
					/*		int opdRespiratorySpecialityDetailId =0;
							for(OpdRespiratorySpecialityDetail opdrs:opdRespiratorySpecialityDetailListMedications)
							{

								opdRespiratorySpecialityDetailId = opdrs.getId();
								
								
							}
							opdPediatricRespiratorySpecialityDetail = (OpdRespiratorySpecialityDetail)hbt.load(OpdRespiratorySpecialityDetail.class, opdRespiratorySpecialityDetailId);
							hbt.delete(opdPediatricRespiratorySpecialityDetail);*/
							
							hbt.deleteAll(opdRespiratorySpecialityDetailListMedications);
													
						
						}
						int treatmentHistoryCount = 0;
						if(box.getInt("treatmentHistoryCount") != 0){
							treatmentHistoryCount = box.getInt("treatmentHistoryCount");
						}
						
						for(int i=1;i<=treatmentHistoryCount;i++){
							OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailMedications = new OpdRespiratorySpecialityDetail();
							
							
							
							if(!box.getString("medications"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailMedications.setParameterName(box.getString("medications"+i));
							}
							if(!box.getString("durationTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailMedications.setDuration(box.getString("durationTreatment"+i));
							}
							
							if(!box.getString("everUsedTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailMedications.setEverUsed(box.getString("everUsedTreatment"+i));
							}
							
							if(!box.getString("nameTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailMedications.setName(box.getString("nameTreatment"+i));
							}
							if(!box.getString("responseTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailMedications.setResponse(box.getString("responseTreatment"+i));
							}
							opdPediatricRespiratorySpecialityDetailMedications.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
							
							opdPediatricRespiratorySpecialityDetailMedications.setFlag("Medications");
							opdPediatricRespiratorySpecialityDetailMedications.setStatus("y");
							
							hbt.save(opdPediatricRespiratorySpecialityDetailMedications);
						}
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListCurrentTreatment = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListCurrentTreatment=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Current Treatment"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListCurrentTreatment",opdRespiratorySpecialityDetailListCurrentTreatment);
						
						if(opdRespiratorySpecialityDetailListCurrentTreatment.size()>0)
						{			
/*								int opdRespiratorySpecialityDetailId =0;
							for(OpdRespiratorySpecialityDetail opdrs:opdRespiratorySpecialityDetailListCurrentTreatment)
							{

								opdRespiratorySpecialityDetailId = opdrs.getId();
								
								
							}
							opdPediatricRespiratorySpecialityDetail = (OpdRespiratorySpecialityDetail)hbt.load(OpdRespiratorySpecialityDetail.class, opdRespiratorySpecialityDetailId);
							hbt.delete(opdPediatricRespiratorySpecialityDetail);
													
						*/
							
							hbt.deleteAll(opdRespiratorySpecialityDetailListCurrentTreatment);
						}
						int currentTreatmentCount = 0;
						if(box.getInt("currentTreatmentCount") != 0){
							currentTreatmentCount = box.getInt("currentTreatmentCount");
						}
						
						for(int i=1;i<=currentTreatmentCount;i++){
							
							
							OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailCurrentTreatment = new OpdRespiratorySpecialityDetail();
							
						
							if(!box.getString("currentTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailCurrentTreatment.setCurrentTreatment(box.getString("currentTreatment"+i));
							}
							if(!box.getString("durationCurrentTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailCurrentTreatment.setDuration(box.getString("durationCurrentTreatment"+i));
							}
							if(!box.getString("responseCurrentTreatment"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailCurrentTreatment.setResponse(box.getString("responseCurrentTreatment"+i));
							}
							opdPediatricRespiratorySpecialityDetailCurrentTreatment.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
							
							opdPediatricRespiratorySpecialityDetailCurrentTreatment.setFlag("Current Treatment");
							opdPediatricRespiratorySpecialityDetailCurrentTreatment.setStatus("y");
							
							hbt.save(opdPediatricRespiratorySpecialityDetailCurrentTreatment);
						}
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListRelation = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListRelation=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Relation"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListRelation",opdRespiratorySpecialityDetailListRelation);
						
						if(opdRespiratorySpecialityDetailListRelation.size()>0)
						{			
						/*	int opdRespiratorySpecialityDetailId =0;
							for(OpdRespiratorySpecialityDetail opdrs:opdRespiratorySpecialityDetailListRelation)
							{

								opdRespiratorySpecialityDetailId = opdrs.getId();
								
								
							}
							opdPediatricRespiratorySpecialityDetail = (OpdRespiratorySpecialityDetail)hbt.load(OpdRespiratorySpecialityDetail.class, opdRespiratorySpecialityDetailId);
							hbt.delete(opdPediatricRespiratorySpecialityDetail);*/
													
							hbt.deleteAll(opdRespiratorySpecialityDetailListRelation);
						}
						int familyHistoryCount = 0;
						if(box.getInt("familyHistoryCount") != 0){
							familyHistoryCount = box.getInt("familyHistoryCount");
						}
						
						for(int i=1;i<=familyHistoryCount;i++){
							OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailRelation = new OpdRespiratorySpecialityDetail();
							
							
							
							if(!box.getString("relation"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailRelation.setParameterName(box.getString("relation"+i));
							}
							if(!box.getString("asthma"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailRelation.setAsthma(box.getString("asthma"+i));
							}
							
							if(!box.getString("nasalAllergy"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailRelation.setNasalAllergy(box.getString("nasalAllergy"+i));
							}
							
							if(!box.getString("eczema"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailRelation.setEczema(box.getString("eczema"+i));
							}
							if(!box.getString("foodAllergy"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailRelation.setFoodAllergy(box.getString("foodAllergy"+i));
							}
							opdPediatricRespiratorySpecialityDetailRelation.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
							
							opdPediatricRespiratorySpecialityDetailRelation.setFlag("Relation");
							opdPediatricRespiratorySpecialityDetailRelation.setStatus("y");
							
							hbt.save(opdPediatricRespiratorySpecialityDetailRelation);
						}
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListReviewControl = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListReviewControl=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Review Control"))
								.add(Restrictions.eq("opdRs.Id",opdPediatricRespiratorySpecialityHeader.getId())).list();
						
						map.put("opdRespiratorySpecialityDetailListReviewControl",opdRespiratorySpecialityDetailListReviewControl);
						
						if(opdRespiratorySpecialityDetailListReviewControl.size()>0)
						{			
																			
							hbt.deleteAll(opdRespiratorySpecialityDetailListReviewControl);
						}
						int reviewControlCount = 0;
						if(box.getInt("reviewControl") != 0){
							reviewControlCount = box.getInt("reviewControl");
						}
						for(int i=1;i<reviewControlCount;i++){
							OpdRespiratorySpecialityDetail opdPediatricRespiratorySpecialityDetailReviewControl = new OpdRespiratorySpecialityDetail();
							

						
							if(!box.getString("reviewControlFlag"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailReviewControl.setReviewControlFlag(box.getString("reviewControlFlag"+i));
							}
							
							if(!box.getString("controlled"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailReviewControl.setControlled(box.getString("controlled"+i));
							}
							if(!box.getString("partlyControlled"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailReviewControl.setPartlyControlled(box.getString("partlyControlled"+i));
							}
							
							if(!box.getString("unControlled"+i).equals("")){
								opdPediatricRespiratorySpecialityDetailReviewControl.setUncontrolled(box.getString("unControlled"+i));
							}
							
							
							opdPediatricRespiratorySpecialityDetailReviewControl.setRespiratorySpeciality(opdPediatricRespiratorySpecialityHeader);
							
							opdPediatricRespiratorySpecialityDetailReviewControl.setFlag("Review Control");
							opdPediatricRespiratorySpecialityDetailReviewControl.setStatus("y");
							
							hbt.save(opdPediatricRespiratorySpecialityDetailReviewControl);
						}
						map.put("opdRespiratorySpecialityHeader",opdPediatricRespiratorySpecialityHeader);
						
						if(box.getInt("opdPatientDetailId") != 0){
							 opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
							 opdPatientDetails.setTemplateName(box.getString("templateName"));
							 if(box.getString("heightFollowUp") != null && !box.getString("heightFollowUp").equals("") ){
								 opdPatientDetails.setHeight(Double.parseDouble(box.getString("heightFollowUp")));
								}
							 if(box.getString("weightFollowUp") != null && !box.getString("weightFollowUp").equals("")){
								 opdPatientDetails.setWeight(Double.parseDouble(box.getString("weightFollowUp")));
								}
							 if(box.get("respiratoryRateFollowUp") != null && !box.get("respiratoryRateFollowUp").equals("")){
								 opdPatientDetails.setRespiratoryRate(Float.parseFloat(box.get("respiratoryRateFollowUp")));
								}
							 String bpFollowUp="";
								if ((box.getString("systolicFollowUp") != null	&& !box.getString("systolicFollowUp").equals("")) && (box.getString("diastolicFollowUp") != null && !box.getString("diastolicFollowUp").equals(""))) {
									String systolicFollowUp = box.getString("systolicFollowUp");
									String diastolicFollowUp = box.getString("diastolicFollowUp");
									bpFollowUp=systolicFollowUp+"/"+diastolicFollowUp;
									opdPatientDetails.setBp(bpFollowUp);
								}
							 hbt.update(opdPatientDetails);
						}
						tx.commit();
					
					}catch(Exception e){
						e.printStackTrace();
					}
					
					return map;
				}
				
				//added by govind 18-11-2016
				@Override
				public Map<String, Object> getPatientAndEpisodeList(String hinNo) {
					Map<String, Object> map = new HashMap<String, Object>();
					List<PatientEpisode> patientEpisodeList = new ArrayList<PatientEpisode>();
					List<Visit> patientList = new ArrayList<Visit>();
					Session session=(Session) getSession();
					Criteria crt=null,crt1=null;//changed by govind 16-11-2016
					//changed by Arbind on 28-03-2017
					/*crt1=session.createCriteria(Patient.class)
							 .add(Restrictions.eq("HinNo", hinNo))
							 .add(Restrictions.ne("PatientStatus", "Expired"));*/
					crt1=session.createCriteria(Visit.class)
						.createAlias("Hin", "pat")
						.add(Restrictions.eq("pat.HinNo", hinNo))
						.add(Restrictions.ne("pat.PatientStatus", "Expired"))
						.add(Restrictions.eq("VisitStatus", "C").ignoreCase());
					patientList=crt1.list();
					if(patientList.size()>0){
					crt=session.createCriteria(PatientEpisode.class)
							 .add(Restrictions.eq("HinNo", hinNo));
					patientEpisodeList=crt.list();
					}
					map.put("patientEpisodeList", patientEpisodeList);
					map.put("patientList", patientList);
					return map;
				}	
				//added by govind 18-11-2016 end

				@Override
				public Map<String, Object> saveGeneralProforma(Box box,Map<String, Object> generalMap) {
					Map<String,Object>map = new HashMap<String,Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					OpdGeneralProformaHeader opdGeneralProformaHeader = null;
					Session session = null;
					Transaction tx = null;
					try{
						session = (Session) getSession();
						tx = session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						int headerRecordId = 0;
						headerRecordId = box.getInt("headerRecordId");
						if(headerRecordId > 0){
							 opdGeneralProformaHeader = (OpdGeneralProformaHeader)session.get(OpdGeneralProformaHeader.class, new Integer(headerRecordId));
						} else{				
						
						    opdGeneralProformaHeader = new OpdGeneralProformaHeader();
						}
						
				 		opdGeneralProformaHeader.setDurationOfIllness(box.getString("durationOfIllness")+" "+box.getString("durationParameter"));
						//opdGeneralProformaHeader.setPresentingComplaintValue(box.getString("presentingComplaintValue"));
						String [] prsentingComplaintsTemp =  box.getString("presentingComplaintValue").split("\n");
						StringBuilder prsentingComplaintsSelection = getFormattedData(prsentingComplaintsTemp);
						opdGeneralProformaHeader.setPresentingComplaintValue(prsentingComplaintsSelection.toString());
						
						String [] pastHistoryValueTemp =  box.getString("pastHistoryValue").split("\n");
						StringBuilder pastHistoryValueSelection = getFormattedData(pastHistoryValueTemp);
						opdGeneralProformaHeader.setPastHistoryValue(pastHistoryValueSelection.toString());
						
						String [] aggravatingFactorsValueTemp =  box.getString("aggravatingFactorsValue").split("\n");
						StringBuilder aggravatingFactorsSelection = getFormattedData(aggravatingFactorsValueTemp);
						
						opdGeneralProformaHeader.setAggravatingFactorsValue(aggravatingFactorsSelection.toString());
						opdGeneralProformaHeader.setFamilyHistoryValue(box.getString("familyHistoryOfSimilarIllnessValue"));
						opdGeneralProformaHeader.setFamilyHistory(box.getString("familyHistoryOfSimilarIllness"));
						opdGeneralProformaHeader.setDrugHistory(box.getString("drugHistory"));
						opdGeneralProformaHeader.setDrugHistoryValue(box.getString("drugHistoryValue"));
						String [] mucousMembraneValueTemp =  box.getString("mucousMenbraneValue").split("\n");
						StringBuilder mucousMembraneValueSelection = getFormattedData(mucousMembraneValueTemp);
						opdGeneralProformaHeader.setMucousMenbraneValue(mucousMembraneValueSelection.toString());
						
						
						String [] hairValueTemp =  box.getString("hairValue").split("\n");
						StringBuilder hairValueSelection = getFormattedData(hairValueTemp);	
						opdGeneralProformaHeader.setHairValue(hairValueSelection.toString());
						
						String [] nailValueTemp =  box.getString("nailsValue").split("\n");
						StringBuilder nailValueSelection = getFormattedData(nailValueTemp);	
						opdGeneralProformaHeader.setNailsValue(nailValueSelection.toString());
						
						
						//opdGeneralProformaHeader.setNailsValue(box.getString("nailsValue"));
						
						String [] systemIllnessValueTemp =  box.getString("systemIllnessValue").split("\n");
						StringBuilder systemIllnessValueSelection = getFormattedData(systemIllnessValueTemp);	
						opdGeneralProformaHeader.setSystemIllnessValue(systemIllnessValueSelection.toString());
						
						String [] signsValueTemp =  box.getString("signsValue").split("\n");
						StringBuilder signsValueTempSelection = getFormattedData(signsValueTemp);	
						opdGeneralProformaHeader.setSignsValue(signsValueTempSelection.toString());
						
						
						opdGeneralProformaHeader.setPrimaryLesionOther(box.getString("primaryLessionOthers"));
						
						String [] distributionValueTemp =  box.getString("distributionValue").split("\n");
						StringBuilder distributionValueSelection = getFormattedData(distributionValueTemp);							
						opdGeneralProformaHeader.setDistributionParameterValue(distributionValueSelection.toString());
						
						opdGeneralProformaHeader.setSecondaryLesionOther(box.getString("secondaryLessionOthers"));
						
						if (!box.getString("presentingComplaintsStr").equals("")) {
							opdGeneralProformaHeader.setPrsentingComplaints(box.getString("presentingComplaintsStr"));
						}
						
						//uncommented by swarup 19/11/2017
						if (!box.getString("aggravatingFactorsStr").equals("")) {
							opdGeneralProformaHeader.setAggravatingFactors(box.getString("aggravatingFactorsStr"));
						}
						
						if (!box.getString("pastHistoryStr").equals("")) {
							opdGeneralProformaHeader.setPastHistory(box.getString("pastHistoryStr"));
						}
						if (!box.getString("distributionStr").equals("")) {
							opdGeneralProformaHeader.setDistribution(box.getString("distributionStr"));
						}
						
						if (!box.getString("mucousMembraneStr").equals("")) {
							opdGeneralProformaHeader.setMucousMembrane(box.getString("mucousMembraneStr"));
						}
						
						if (!box.getString("hairStr").equals("")) {
							opdGeneralProformaHeader.setHair(box.getString("hairStr"));
						}
						
						if (!box.getString("nailsStr").equals("")) {
							opdGeneralProformaHeader.setNails(box.getString("nailsStr"));
						}
						
						if (!box.getString("systemIllnessStr").equals("")) {
							opdGeneralProformaHeader.setSystemIllness(box.getString("systemIllnessStr"));
						}
						
						if (!box.getString("signsStr").equals("")) {
							opdGeneralProformaHeader.setSigns(box.getString("signsStr"));
						}
						
						opdGeneralProformaHeader.setPresentingComplaintsOthersValue(box.getString("presentingComplaintsOthersValue"));
			 			opdGeneralProformaHeader.setAggravatingFactorsOthersValue(box.getString("aggravatingFactorsOthersValue"));
						opdGeneralProformaHeader.setPastHistoryOthersValue(box.getString("pastHistoryOthersValue"));						
						opdGeneralProformaHeader.setHairOthersValue(box.getString("hairOthersValue"));
						opdGeneralProformaHeader.setNailsOthersValue(box.getString("nailsOthersValue"));
						opdGeneralProformaHeader.setSystemIllnessOthersValue(box.getString("systemIllnessOthersValue"));
						opdGeneralProformaHeader.setSignsOthersValue(box.getString("signsOthersValue"));
						
					 	if(box.getInt("opdPatientDetailId") != 0){
							int opdPatientDetailId =box.getInt("opdPatientDetailId");
							OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
							opdPatientDetails.setId(opdPatientDetailId);
							opdGeneralProformaHeader.setOpdPatientDetails(opdPatientDetails);
							}
							if(!box.get("hinId").equals("")){
								int hinId =Integer.parseInt(box.get("hinId"));
								Patient patient = new Patient();
								patient.setId(hinId);
								opdGeneralProformaHeader.setHin(patient);
							}
						
							
							//hbt.save(opdGeneralProformaHeader);
							hbt.saveOrUpdate(opdGeneralProformaHeader);
						
						int primaryLesionCount = 0;
						if(box.getInt("primaryLesionCount") != 0){
							primaryLesionCount = box.getInt("primaryLesionCount");
						}
						Query deleteQuery = session.createSQLQuery("delete from opd_general_proforma_detail  where general_proforma_id="+headerRecordId
								+" and flag='Primary Lesion'");
						deleteQuery.executeUpdate();
						for(int i=1;i<=primaryLesionCount;i++){
							
							OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
							if(!box.getString("primaryLesionNo"+i).equals("")||
								!box.getString("primaryLesionSite"+i).equals("")||
								!box.getString("typeOfPrimaryLesion"+i).equals("")||
								!box.getString("primaryPigmentation"+i).equals("")||
								!box.getString("primaryPigmentationValue"+i).equals("")||
								!box.getString("primaryBorder"+i).equals("")||
								!box.getString("primarySurface"+i).equals("")||
								!box.getString("primarySmallestSize"+i).equals("")||
								!box.getString("primaryLargestSize"+i).equals("")||
								!box.getString("hairOnPrimaryLesion"+i).equals("")||
								!box.getString("primaryAdditionalFeature"+i).equals(""))
							{
								
								
							if(!box.getString("primaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setParameterName(box.getString("primaryLesion"+i));
							}
							if(!box.getString("primaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setLesion(box.getString("primaryLesion"+i));
							}
							if(!box.getString("primaryLesionNo"+i).equals("")){
								opdGeneralProformaDetail.setNumber(box.getString("primaryLesionNo"+i));
							}
							
							if(!box.getString("primaryLesionSite"+i).equals("")){
								opdGeneralProformaDetail.setSite(box.getString("primaryLesionSite"+i));
							}
							
							if(!box.getString("typeOfPrimaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setTypeOfLesion(box.getString("typeOfPrimaryLesion"+i));
							}
							if(!box.getString("primaryPigmentation"+i).equals("")){
								opdGeneralProformaDetail.setPigmentationStatus(box.getString("primaryPigmentation"+i));
							}
							if(!box.getString("primaryPigmentationValue"+i).equals("")){
								opdGeneralProformaDetail.setPigmentation(box.getString("primaryPigmentationValue"+i));
							}
							if(!box.getString("primaryCharacter"+i).equals("")){
								opdGeneralProformaDetail.setCharcter(box.getString("primaryCharacter"+i));
							}
							if(!box.getString("primaryBorder"+i).equals("")){
								opdGeneralProformaDetail.setBorder(box.getString("primaryBorder"+i));
							}
							if(!box.getString("primarySurface"+i).equals("")){
								opdGeneralProformaDetail.setSurface(box.getString("primarySurface"+i));
							}
							if(!box.getString("primarySmallestSize"+i).equals("")){
								opdGeneralProformaDetail.setSmallestSize(box.getString("primarySmallestSize"+i));
							}
							if(!box.getString("primaryLargestSize"+i).equals("")){
								opdGeneralProformaDetail.setLargestSize(box.getString("primaryLargestSize"+i));
							}
							if(!box.getString("hairOnPrimaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setHairOnLesion(box.getString("hairOnPrimaryLesion"+i));
							}
							if(!box.getString("primaryAdditionalFeature"+i).equals("")){
								opdGeneralProformaDetail.setAggravatingFactors(box.getString("primaryAdditionalFeature"+i));
							}
							opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
							
							opdGeneralProformaDetail.setFlag("Primary Lesion");
							opdGeneralProformaDetail.setStatus("y");
							hbt.save(opdGeneralProformaDetail);
							
						
						}
						}
						int secondaryLesionCount = 0;
						if(box.getInt("secondaryLesionCount") != 0){
							secondaryLesionCount = box.getInt("secondaryLesionCount");
						}
						
						Query deleteQuerySecondary = session.createSQLQuery("delete from opd_general_proforma_detail  where general_proforma_id="+headerRecordId
								+" and flag='Secondary Lesion'");
						deleteQuerySecondary.executeUpdate();
						
						for(int i=1;i<=secondaryLesionCount;i++){
							
							OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
							if(!box.getString("secondaryLesionNo"+i).equals("")||
									!box.getString("secondaryAdditionalFeature"+i).equals("")||
									!box.getString("secondaryLesionSite"+i).equals("")||
									!box.getString("typeOfSecondaryLesion"+i).equals("")||
									!box.getString("secondaryPigmentation"+i).equals("")||
									!box.getString("secondaryPigmentationValue"+i).equals("")||
									!box.getString("secondaryCharacter"+i).equals("")||
									!box.getString("secondaryBorder"+i).equals("")||
									!box.getString("secondarySurface"+i).equals("")||
									!box.getString("secondarySmallestSize"+i).equals("")||
									!box.getString("secondaryLargestSize"+i).equals("")||
									!box.getString("hairOnSecondaryLesion"+i).equals(""))
								{
							if(!box.getString("secondaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setParameterName(box.getString("secondaryLesion"+i));
							}
							if(!box.getString("secondaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setLesion(box.getString("secondaryLesion"+i));
							}
							if(!box.getString("secondaryLesionNo"+i).equals("")){
								opdGeneralProformaDetail.setNumber(box.getString("secondaryLesionNo"+i));
							}
							
							if(!box.getString("secondaryLesionSite"+i).equals("")){
								opdGeneralProformaDetail.setSite(box.getString("secondaryLesionSite"+i));
							}
							
							if(!box.getString("typeOfSecondaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setTypeOfLesion(box.getString("typeOfSecondaryLesion"+i));
							}
							if(!box.getString("secondaryPigmentation"+i).equals("")){
								opdGeneralProformaDetail.setPigmentationStatus(box.getString("secondaryPigmentation"+i));
							}
							if(!box.getString("secondaryPigmentationValue"+i).equals("")){
								opdGeneralProformaDetail.setPigmentation(box.getString("secondaryPigmentationValue"+i));
							}
							if(!box.getString("secondaryCharacter"+i).equals("")){
								opdGeneralProformaDetail.setCharcter(box.getString("secondaryCharacter"+i));
							}
							if(!box.getString("secondaryBorder"+i).equals("")){
								opdGeneralProformaDetail.setBorder(box.getString("secondaryBorder"+i));
							}
							if(!box.getString("secondarySurface"+i).equals("")){
								opdGeneralProformaDetail.setSurface(box.getString("secondarySurface"+i));
							}
							if(!box.getString("secondarySmallestSize"+i).equals("")){
								opdGeneralProformaDetail.setSmallestSize(box.getString("secondarySmallestSize"+i));
							}
							if(!box.getString("secondaryLargestSize"+i).equals("")){
								opdGeneralProformaDetail.setLargestSize(box.getString("secondaryLargestSize"+i));
							}
							if(!box.getString("hairOnSecondaryLesion"+i).equals("")){
								opdGeneralProformaDetail.setHairOnLesion(box.getString("hairOnSecondaryLesion"+i));
							}
							if(!box.getString("secondaryAdditionalFeature"+i).equals("")){
								opdGeneralProformaDetail.setAggravatingFactors(box.getString("secondaryAdditionalFeature"+i));
							}
							opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
							
							opdGeneralProformaDetail.setFlag("Secondary Lesion");
							opdGeneralProformaDetail.setStatus("y");
							
								hbt.save(opdGeneralProformaDetail);								
							
							
						}
						}
						/*List complaintsList = new ArrayList();
						if(generalMap.get("complaintsList") != null){
							complaintsList = (List)generalMap.get("complaintsList");
						}
						if(complaintsList.size()>0){
							for(int k=0;k<complaintsList.size();k++){
								OpdGeneralProformaDetail opGeneralProformaDetail = new OpdGeneralProformaDetail();
								opGeneralProformaDetail.setFlag("Presenting Complaints");
								opGeneralProformaDetail.setParameterName(complaintsList.get(k).toString());
								opGeneralProformaDetail.setStatus("y");
								opGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opGeneralProformaDetail);
								
							 }
						}
						List pastHistoryProformaList = new ArrayList();
						if(generalMap.get("pastHistoryProformaList") != null){
							pastHistoryProformaList = (List)generalMap.get("pastHistoryProformaList");
						}
						if(pastHistoryProformaList.size()>0){
							for(int k=0;k<pastHistoryProformaList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("Past History");
								opdGeneralProformaDetail.setParameterName(pastHistoryProformaList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						
						List mucousMembraneList = new ArrayList();
						if(generalMap.get("mucousMembraneList") != null){
							mucousMembraneList = (List)generalMap.get("mucousMembraneList");
						}
						if(mucousMembraneList.size()>0){
							for(int k=0;k<mucousMembraneList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("Mucous Menbrane");
								opdGeneralProformaDetail.setParameterName(mucousMembraneList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						
						List hairList = new ArrayList();
						if(generalMap.get("hairList") != null){
							hairList = (List)generalMap.get("hairList");
						}
						if(hairList.size()>0){
							for(int k=0;k<hairList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("Hair");
								opdGeneralProformaDetail.setParameterName(hairList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						
						List nailsList = new ArrayList();
						if(generalMap.get("nailsList") != null){
							nailsList = (List)generalMap.get("nailsList");
						}
						if(nailsList.size()>0){
							for(int k=0;k<nailsList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("nailsList");
								opdGeneralProformaDetail.setParameterName(nailsList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						
						List systemIllnessList = new ArrayList();
						if(generalMap.get("systemIllnessList") != null){
							systemIllnessList = (List)generalMap.get("systemIllnessList");
						}
						if(systemIllnessList.size()>0){
							for(int k=0;k<systemIllnessList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("System Illness");
								opdGeneralProformaDetail.setParameterName(systemIllnessList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						
						List signsList = new ArrayList();
						if(generalMap.get("signsList") != null){
							signsList = (List)generalMap.get("signsList");
						}
						if(signsList.size()>0){
							for(int k=0;k<signsList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("Signs");
								opdGeneralProformaDetail.setParameterName(signsList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						
						List aggrvatingFactorList = new ArrayList();
						if(generalMap.get("aggrvatingFactorList") != null){
							aggrvatingFactorList = (List)generalMap.get("aggrvatingFactorList");
						}
						if(aggrvatingFactorList.size()>0){
							for(int k=0;k<aggrvatingFactorList.size();k++){
								OpdGeneralProformaDetail opdGeneralProformaDetail = new OpdGeneralProformaDetail();
								opdGeneralProformaDetail.setFlag("Aggravating Factors");
								opdGeneralProformaDetail.setParameterName(aggrvatingFactorList.get(k).toString());
								opdGeneralProformaDetail.setStatus("y");
								opdGeneralProformaDetail.setGeneralProforma(opdGeneralProformaHeader);
								hbt.save(opdGeneralProformaDetail);
								
							 }
						}
						*/
						if(box.getInt("opdPatientDetailId") != 0){
							 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, box.getInt("opdPatientDetailId"));
							 opdPatientDetails.setTemplateName(box.getString("templateName"));
							 hbt.update(opdPatientDetails);
						}
				 
						
						map.put("opdGeneralProformaHeader",opdGeneralProformaHeader);
						tx.commit();
						
					
					}catch(Exception e){
						if(tx!=null){
							tx.rollback();
						}
						e.printStackTrace();
					}
					
					
					return map;
				}

				/**
				 * @param prsentingComplaintsTemp
				 * @return
				 */
	private StringBuilder getFormattedData(String[] prsentingComplaintsTemp) {
		StringBuilder prsentingComplaintsSelection = new StringBuilder();
		String suffix = "";
		for (String pc : prsentingComplaintsTemp) {
			if (!pc.trim().equals("") && !pc.equalsIgnoreCase("Others-,")) {
				String[] temp = pc.split("-");
				if (temp.length > 1) {
					if (temp[1] != null && !temp[1].trim().equals("")
							&& !temp[1].contains("\n")) {
						prsentingComplaintsSelection.append(suffix);
						suffix = "^";
						prsentingComplaintsSelection.append(pc.trim());
					}
				}
			} else{
				prsentingComplaintsSelection.append(pc.trim());
			}
		}
		return prsentingComplaintsSelection;
	}

				
				@Override
				public Map<String, Object> getSpecialityTemplateName(Box box) {
					Map<String, Object> map = new HashMap<String, Object>();
					List<OpdPatientDetails>opdPatientDetailList = new ArrayList<OpdPatientDetails>();
					Session session = (Session)getSession();
					opdPatientDetailList = session.createCriteria(OpdPatientDetails.class).add(Restrictions.eq("Visit.Id", box.getInt("visitId")))
												.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))).list();
					if(opdPatientDetailList.size()>0){
						if(opdPatientDetailList.get(0).getTemplateName() != null){
							String templateName =opdPatientDetailList.get(0).getTemplateName(); 
							map.put("templateName", templateName);
						}
					}
					return map;
				}
			//added by govind 5-12-2016	
			public List<OpdVaccinMst> getMstSecondList(String vacName,int dose,int hinId){
				
				Session session = (Session)getSession();
				dose++;
				List<OpdVaccinMst> vacList=new ArrayList<OpdVaccinMst>();
				List<OpdVaccinationPlan> planList=new ArrayList<OpdVaccinationPlan>();
				vacList=session.createCriteria(OpdVaccinMst.class)
						.add(Restrictions.eq("VaccinName",vacName))
						.add(Restrictions.eq("Dose",dose))
						.addOrder(Order.asc("Dose"))
						.list();
				if(vacList.size()>0){
				OpdVaccinMst ms=vacList.get(0);
				planList=session.createCriteria(OpdVaccinationPlan.class)
						.add(Restrictions.eq("Hin.Id",hinId))
						.add(Restrictions.eq("Vaccin.Id",ms.getId()))
						.add(Restrictions.isNull("VaccinCompleteDate"))
						.list();
				
				if(planList.size()>0){
					vacList=new ArrayList<OpdVaccinMst>();
				}
				}
				
				return vacList;
			}
			//added by govind 5-12-2016	 end

			public Map<String, Object> addAntenatalCard2(Map<String, Object> infoMap) {
				Map<String, Object> map = new HashMap<String, Object>();
				OpdAntenatalCard antenatalCard = new OpdAntenatalCard();
				List<OpdAntenatalCardTrimester> antCardTrimeList=new ArrayList<OpdAntenatalCardTrimester>();
				List<OpdAntenatalCardPregnancy> antCardPregList=new ArrayList<OpdAntenatalCardPregnancy>();
				List<OpdAntenatalCardMedicalHistory> antCardMedHistList=new ArrayList<OpdAntenatalCardMedicalHistory>();
				List<ExternalAdmissionDetails> ipAdmissionHistList=new ArrayList<ExternalAdmissionDetails>();
				List<OpdAntenatalUsg> usgReportFirstTrimList=new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgReportFirstTrimListWeek14=new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgReportSecondTrimList=new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgReportThirdTrimList=new ArrayList<OpdAntenatalUsg>();
				boolean successfullyAdded = false;
				int visitId = 0,hinId=0,userId=0,exist=0,antCardId=0,AntCount=0,SomeField=0,count=0;
				int inpatientId = 0;
				int hospitalId = 0;
				int departmentId = 0;
				String time=null,date=null, referredDept;
				MasDepartment referredDepartment=null;
				PhAlert alert = null;
				MasHospital hospital = null;
				Patient patient = null;
				Integer lstBy=null;
				Map<String, Object> utilMap = new HashMap<String, Object>();
				utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
				String currentDate = (String) utilMap.get("currentDate");
				String currentTime = (String) utilMap.get("currentTime");
				String height = "", weight = "", bmi="";
				
				if (infoMap.get("antenatalCard") != null) {
					antenatalCard = (OpdAntenatalCard) infoMap.get("antenatalCard");
				}
				if (infoMap.get("antCardPregList") != null) {
					antCardPregList = (List<OpdAntenatalCardPregnancy>) infoMap.get("antCardPregList");
				}
				if (infoMap.get("usgReportFirstTrimList") != null) {
					usgReportFirstTrimList = (List<OpdAntenatalUsg>) infoMap.get("usgReportFirstTrimList");
				}
				if (infoMap.get("usgReportFirstTrimListWeek14") != null) {
					usgReportFirstTrimListWeek14 = (List<OpdAntenatalUsg>) infoMap.get("usgReportFirstTrimListWeek14");
				}
				if (infoMap.get("usgReportSecondTrimList") != null) {
					usgReportSecondTrimList = (List<OpdAntenatalUsg>) infoMap.get("usgReportSecondTrimList");
				}
				if (infoMap.get("usgReportThirdTrimList") != null) {
					usgReportThirdTrimList = (List<OpdAntenatalUsg>) infoMap.get("usgReportThirdTrimList");
				}
				//usg changes
				
				
				//usg changes end
				if (infoMap.get("antCardMedHistList") != null) {
					antCardMedHistList = (List<OpdAntenatalCardMedicalHistory>) infoMap.get("antCardMedHistList");
				}
				
				if (infoMap.get("ipAdmissioDetailsList") != null) {
					ipAdmissionHistList = (List<ExternalAdmissionDetails>) infoMap.get("ipAdmissioDetailsList");
				}
				
				if (infoMap.get("visitId") != null) {
					visitId = (Integer) infoMap.get("visitId");
				}
				int visitSessionId = 0;
				if (infoMap.get("visitSessionId") != null) {
					visitSessionId = (Integer) infoMap.get("visitSessionId");
				}
				int totalHospitalVisit = 0;
				if (infoMap.get("totalHospitalVisit") != null) {
					totalHospitalVisit = (Integer) infoMap.get("totalHospitalVisit");
				}
				
				if (infoMap.get("departmentId") != null) {
					departmentId = (Integer) infoMap.get("departmentId");
				}
				if (infoMap.get("inpatientId") != null) {
					inpatientId = (Integer) infoMap.get("inpatientId");
				}
				String bloodGroupValue = "";
				if (infoMap.get("bloodGroupValue") != null) {
					bloodGroupValue = (String) infoMap.get("bloodGroupValue");
				}
				String bloodGroupStatus = "";
				if (infoMap.get("bloodGroupStatus") != null) {
					bloodGroupStatus = (String) infoMap.get("bloodGroupStatus");
				}
				/*String verbalBloodStatus = "";
				if (infoMap.get("verbalBloodStatus") != null) {
					verbalBloodStatus = (String) infoMap.get("verbalBloodStatus");
				}*/
				
				int opdPatientDetailId= 0;
				if (infoMap.get("opdPatientDetailId") != null) {
					opdPatientDetailId = (Integer) infoMap.get("opdPatientDetailId");
				}
				
				if (infoMap.get("height") != null) {
					height = (String) infoMap.get("height");
				}
				String templateName = "";
				if (infoMap.get("templateName") != null) {
					templateName = (String) infoMap.get("templateName");
				}
				 
				if (infoMap.get("weight") != null) {
					weight = (String) infoMap.get("weight");
				}
				if (infoMap.get("bmi") != null) {
					bmi = (String) infoMap.get("bmi");
				}
				if (infoMap.get("hospitalId") != null) {
					hospitalId = (Integer) infoMap.get("hospitalId");
				}
				if (infoMap.get("referredDept") != null) {
				    referredDept = (String) infoMap.get("referredDept").toString();
				}
				if (infoMap.get("referredDepartment") != null) {
			         referredDepartment = (MasDepartment) infoMap.get("referredDepartment");
				}
				if (infoMap.get("antCardTrimeList") != null) {
					antCardTrimeList = (List<OpdAntenatalCardTrimester>) infoMap.get("antCardTrimeList");
				}
				
				if (infoMap.get("hinId") != null) {
					hinId = (Integer) infoMap.get("hinId");
				}
				
				if (infoMap.get("userId") != null) {
					userId = (Integer) infoMap.get("userId");
					String st=""+userId;
					lstBy=Integer.parseInt(st);
					
				}
				if (infoMap.get("time") != null) {
					time = (String) infoMap.get("time");
				}
				if (infoMap.get("date") != null) {
					date = (String) infoMap.get("date");
				}
				
				if(infoMap.get("patient")!=null)
					patient = (Patient)infoMap.get("patient");
						
				if(infoMap.get("masHospital")!=null)
					hospital = (MasHospital)infoMap.get("masHospital");	
				
			if(infoMap.get("exist") != null){
			    exist = (int)infoMap.get("exist");
			}
			
			    if (infoMap.get("AntCount") != null
						&& (!infoMap.get("AntCount").equals(""))) {
					AntCount = (int)infoMap.get("AntCount");
				}
			    if (infoMap.get("count") != null
						&& (!infoMap.get("count").equals(""))) {
					count = (int)infoMap.get("count");
				}
			    int empId = 0;
			    if (infoMap.get("empId") != null) {
			    	empId = (Integer) infoMap.get("empId");
				}
			    
			    int labDepartmentId=0;
				Properties properties = new Properties();
			       URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
			      
			       try
			       {
			               properties.load(resourcePath.openStream());
			       }
			       catch (Exception e)
			       {
			               e.printStackTrace();
			       }
				 labDepartmentId = Integer.parseInt(properties.getProperty("labDepartmentId"));
			    
			    Transaction tnx=null;
				try {
					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					Session session=(Session)getSession();
					
					tnx=session.beginTransaction();
						
					/*if(exist!=1){*/
						if(inpatientId != 0){
							 Inpatient inpatient = new Inpatient();
							 inpatient.setId(inpatientId);
							 antenatalCard.setInpatient(inpatient);
						 }
						session.clear(); 
						session.saveOrUpdate(antenatalCard);
					   antCardId=antenatalCard.getId();
					   
					   if(patient!=null){
					    alert = new PhAlert();
					   	alert.setHin(patient);
					   	alert.setHospital(hospital);
					   	alert.setAlertType("ANC");
					   	alert.setMember(patient.getMember());
					   	hbt.save(alert);
					   }
					   
				/*	}else{
						if (infoMap.get("antCardId") != null) {
							antCardId = (int) infoMap.get("antCardId");
						}
						
					}*/

					if(antCardPregList.size()>0){
						
						   for(OpdAntenatalCardPregnancy opdAntPreg :antCardPregList){
							   
							  if(opdAntPreg.getAge() != null && !opdAntPreg.getAge().equals("")){
							   opdAntPreg.setDepartment(referredDepartment);

							   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
							   antenatalCard1.setId(antCardId);
							   opdAntPreg.setOpdAntenatalCard(antenatalCard1);
							   
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalId);
								opdAntPreg.setHospital(masHospital);

								patient = new Patient();
								patient.setId(hinId);
								opdAntPreg.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								opdAntPreg.setVisit(visit);
							  		   
								opdAntPreg.setLastChgBy(userId);
								opdAntPreg.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType(date));;
								opdAntPreg.setLastChgTime(time); 
								
								hbt.save(opdAntPreg);
							   }
						  }
					}

					if(antCardMedHistList.size()>0){
						
						   for(OpdAntenatalCardMedicalHistory opdAntMedHist:antCardMedHistList){	

							   opdAntMedHist.setDepartment(referredDepartment);

							   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
							   antenatalCard1.setId(antCardId);
							   opdAntMedHist.setOpdAntenatalCard(antenatalCard1);
							   
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalId);
								opdAntMedHist.setHospital(masHospital);

								patient = new Patient();
								patient.setId(hinId);
								opdAntMedHist.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								opdAntMedHist.setVisit(visit);
							  		   
								opdAntMedHist.setLastChgBy(userId);
								opdAntMedHist.setLastChgDate(HMSUtil
										.convertStringTypeDateToDateType(date));;
								opdAntMedHist.setLastChgTime(time); 
								
								hbt.save(opdAntMedHist);
						  }
					}
					//External IP Admission details
					
					if(ipAdmissionHistList.size()>0){
						
						   for(ExternalAdmissionDetails admissionDetails:ipAdmissionHistList){	
								
								patient = new Patient();
								patient.setId(hinId);
								admissionDetails.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								admissionDetails.setVisit(visit);	
								
								hbt.save(admissionDetails);
						  }
					}
					//End
					
					if(usgReportFirstTrimList.size()>0 ){
						   for(OpdAntenatalUsg opdAntenatalFirstUsg:usgReportFirstTrimList){	
							  // if(opdAntenatalFirstUsg.getUsgParameterValue1() != null && !opdAntenatalFirstUsg.getUsgParameterValue1().equals("")){
								   opdAntenatalFirstUsg.setDepartment(referredDepartment);

							   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
							   antenatalCard1.setId(antCardId);
							   opdAntenatalFirstUsg.setOpdAntenatalCard(antenatalCard1);
							   
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalId);
								opdAntenatalFirstUsg.setHospital(masHospital);

								patient = new Patient();
								patient.setId(hinId);
								opdAntenatalFirstUsg.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								opdAntenatalFirstUsg.setVisit(visit);
								hbt.save(opdAntenatalFirstUsg);
							   //}
						  }
					}
					
					//usg first week 10-14 weeks
					
					if(usgReportFirstTrimListWeek14.size()>0){
						   for(OpdAntenatalUsg opdAntenatalFirstUsg:usgReportFirstTrimListWeek14){	
							  // if(opdAntenatalFirstUsg.getUsgParameterValue1() != null && !opdAntenatalFirstUsg.getUsgParameterValue1().equals("")){
								   opdAntenatalFirstUsg.setDepartment(referredDepartment);

							   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
							   antenatalCard1.setId(antCardId);
							   opdAntenatalFirstUsg.setOpdAntenatalCard(antenatalCard1);
							   
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalId);
								opdAntenatalFirstUsg.setHospital(masHospital);

								patient = new Patient();
								patient.setId(hinId);
								opdAntenatalFirstUsg.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								opdAntenatalFirstUsg.setVisit(visit);
								hbt.save(opdAntenatalFirstUsg);
							   //}
						  }
					}
					
					//usg first week 10-14 weeks end
					
					
					if(usgReportSecondTrimList.size()>0){
						
						   for(OpdAntenatalUsg opdAntenatalSecondUsg:usgReportSecondTrimList){	
						   //if(opdAntenatalSecondUsg.getUsgParameterValue1() != null && !opdAntenatalSecondUsg.getUsgParameterValue1().equals("")){
							   opdAntenatalSecondUsg.setDepartment(referredDepartment);

							   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
							   antenatalCard1.setId(antCardId);
							   opdAntenatalSecondUsg.setOpdAntenatalCard(antenatalCard1);
							   
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalId);
								opdAntenatalSecondUsg.setHospital(masHospital);

								patient = new Patient();
								patient.setId(hinId);
								opdAntenatalSecondUsg.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								opdAntenatalSecondUsg.setVisit(visit);
								hbt.save(opdAntenatalSecondUsg);
						   }
						  //}
					}
					
					if(usgReportThirdTrimList.size()>0){
						
						   for(OpdAntenatalUsg opdAntenatalThirdUsg:usgReportThirdTrimList){	
						  // if(opdAntenatalThirdUsg.getUsgParameterValue1() != null && !opdAntenatalThirdUsg.getUsgParameterValue1().equals("")){
							   opdAntenatalThirdUsg.setDepartment(referredDepartment);

							   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
							   antenatalCard1.setId(antCardId);
							   opdAntenatalThirdUsg.setOpdAntenatalCard(antenatalCard1);
							   
								MasHospital masHospital = new MasHospital();
								masHospital.setId(hospitalId);
								opdAntenatalThirdUsg.setHospital(masHospital);

								patient = new Patient();
								patient.setId(hinId);
								opdAntenatalThirdUsg.setHin(patient);

								Visit visit = new Visit();
								visit.setId(visitId);
								opdAntenatalThirdUsg.setVisit(visit);
								hbt.save(opdAntenatalThirdUsg);
						   //}
						  }
					}

					if(antCardTrimeList.size()>0){
						
					   for(OpdAntenatalCardTrimester opdAntTrim:antCardTrimeList){				
						   if(opdAntTrim.getGaWeeks() != null){
						   opdAntTrim.setDepartment(referredDepartment);

						   OpdAntenatalCard antenatalCard1 = new OpdAntenatalCard();
						   antenatalCard1.setId(antCardId);
						   opdAntTrim.setAntenatalCard(antenatalCard1);
						   
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							opdAntTrim.setHospital(masHospital);

							patient = new Patient();
							patient.setId(hinId);
							opdAntTrim.setHin(patient);

							Visit visit = new Visit();
							visit.setId(visitId);
							opdAntTrim.setVisit(visit);
						  		   
							opdAntTrim.setLastChgBy(userId);
							opdAntTrim.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(date));;
							opdAntTrim.setLastChgTime(time); 
							
						hbt.save(opdAntTrim);
					   }
					  }
				}
					
					if(opdPatientDetailId != 0){
						 OpdPatientDetails opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetailId);
						 opdPatientDetails.setTemplateName(templateName);
						 if(height != null && !height.equals("")){
							 opdPatientDetails.setHeight(Double.parseDouble(height));
							}
						 if(weight != null && !weight.equals("")){
							 opdPatientDetails.setWeight(Double.parseDouble(weight));
							}
						
						 if(bmi != null && !bmi.equals("")){
							 opdPatientDetails.setBmi(Float.parseFloat(bmi));
							}
						 if(inpatientId != 0){
							 Inpatient inpatient = new Inpatient();
							 inpatient.setId(inpatientId);
							 opdPatientDetails.setInpatient(inpatient);
						 }
						
						 hbt.update(opdPatientDetails);
					}
			List<Patient>ptList = new ArrayList<Patient>();
			ptList = session.createCriteria(Patient.class).add(Restrictions.idEq(hinId)).list();
			if(ptList.size()>0){
				if(ptList.get(0).getConfirmedStatus()!=null && ptList.get(0).getConfirmedStatus().equalsIgnoreCase("y")){
				}else{
					  Patient pt = (Patient)hbt.load(Patient.class, hinId);
						  if(!bloodGroupValue.equals("")){
						  		pt.setBloodGroupValue(bloodGroupValue);
						  }
						  if(!bloodGroupStatus.equals("") && bloodGroupStatus.equalsIgnoreCase("Confirm") ){
						  		pt.setConfirmedStatus("y");
						  }
						  if(!bloodGroupStatus.equals("") && bloodGroupStatus.equalsIgnoreCase("Verbal") ){
						  		pt.setVerbalStatus("y");
						  }
						   	hbt.update(pt);
					}
				    }
			List<MasChargeCode>chargeCodeList = new ArrayList<MasChargeCode>();
			List<PatientInvestigationDetails>patientInvestigationDetailList = new ArrayList<PatientInvestigationDetails>();
			patientInvestigationDetailList = session.createCriteria(PatientInvestigationDetails.class).createAlias("ChargeCode", "chargeCode").createAlias("invHeader.Hin", "hin")
			.createAlias("InvestigationHeader", "invHeader").add(Restrictions.eq("chargeCode.ChargeCodeName", "Blood Group")).add(Restrictions.eq("hin.Id",hinId))
			.add(Restrictions.eq("invHeader.InvestigationDate", HMSUtil.convertStringTypeDateToDateType(currentDate))).list();
			System.out.println("patientInvestigationDetailList.size() =="+patientInvestigationDetailList.size()+"  Status:  "+bloodGroupStatus);
			if(!bloodGroupStatus.equals("") && bloodGroupStatus.equalsIgnoreCase("Verbal") && patientInvestigationDetailList.size() == 0){
			chargeCodeList = session.createCriteria(MasChargeCode.class).add(Restrictions.eq("ChargeCodeName", "Blood Group"))
								.add(Restrictions.eq("Status", "y")).list();
			if (chargeCodeList.size() > 0) {
				Visit visitObjToUpdate = new Visit();
				visitObjToUpdate.setId(visitId);
				MasDepartment masDepartment = new MasDepartment();
				MasHospital masHospital = new MasHospital();
				MasEmployee masEmployee2 = new MasEmployee();
				
				PatientInvestigationHeader patientInvestigationHeader = new PatientInvestigationHeader();
				patient.setId(hinId);
				patientInvestigationHeader.setHin(patient);

				masDepartment.setId(departmentId);
				patientInvestigationHeader.setDepartment(masDepartment);
				
				
				patientInvestigationHeader.setVisit(visitObjToUpdate);
				masHospital.setId(hospitalId);
				patientInvestigationHeader.setHospital(masHospital);
				patientInvestigationHeader.setStatus("p");
				
				OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
				opdPatientDetails.setId(opdPatientDetailId);
				patientInvestigationHeader.setOpdPatientDetail(opdPatientDetails);
				patientInvestigationHeader.setInvestigationDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				patientInvestigationHeader.setInvestigationTime(currentTime);
				hbt.save(patientInvestigationHeader);
				
				
				DgOrderhd dgOrderhd = new DgOrderhd();
				dgOrderhd.setOrderDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				dgOrderhd.setOrderTime(currentTime);
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				if (empId > 0) {
					masEmployee2.setId(empId);
					dgOrderhd.setPrescribedBy(masEmployee2);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setVisit(visitObjToUpdate);
				

				String orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				dgOrderhd.setOrderStatus("P");
				Users users = new Users();
				users.setId(userId);
				dgOrderhd.setLastChgBy(users);
				dgOrderhd.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				dgOrderhd.setLastChgTime(currentTime);
				dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
					hbt.save(dgOrderhd);
				
				boolean labStatus=false;
				//int count = 1;
				BigDecimal totalAmount = new BigDecimal(0);
				BigDecimal charge = new BigDecimal(0.00);

				List<Object> patientInvestigatinDetailsListObject = new ArrayList<Object>();
				List<Object> dgOrderDetailsListObject = new ArrayList<Object>();
				List<Object> dgSampleCollectionDeatilsListObject=new ArrayList<Object>();
				MasChargeCode persistedChargeCode=null;
				PatientInvestigationDetails	patientInvestigationDetails = new PatientInvestigationDetails();
						
				    persistedChargeCode = (MasChargeCode) session.get(MasChargeCode.class,chargeCodeList.get(0).getId());
					String billingStatus = persistedChargeCode.getBillingStatus();
					patientInvestigationDetails.setInvestigationHeader(patientInvestigationHeader);
					MasChargeCode masChargeCode = new MasChargeCode();
					masChargeCode.setId(chargeCodeList.get(0).getId());
					patientInvestigationDetails.setChargeCode(masChargeCode);
					//patientInvestigationDetails.setClinicalNotes(clinicalList.get(i));
					//patientInvestigationDetails.setAvailableStatus(availableStatusList.get(i));
					
					/*if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
							&& pInvDtId!=null && !pInvDtId.equals(0)){
						hbt.update(patientInvestigationDetails);
					}else{*/
						hbt.save(patientInvestigationDetails);
					//}
					
					patientInvestigatinDetailsListObject.add(patientInvestigationDetails);
					//DgOrderdt dgOrderdt=null;
					/*if(pDtId!=null && !pDtId.equals(0)){
						dgOrderdt	=(DgOrderdt) hbt.load(DgOrderdt.class, pDtId);
						
					}else{*/
					DgOrderdt dgOrderdt = new DgOrderdt();
					//}
					dgOrderdt.setOrderhd(dgOrderhd);
					masChargeCode.setId(chargeCodeList.get(0).getId());
					dgOrderdt.setChargeCode(masChargeCode);

					dgOrderdt.setOrderQty(1);
				
					dgOrderdt.setOrderStatus("P");
					if (persistedChargeCode.getMainChargecode().getDepartment().getDepartmentType().getDepartmentTypeCode().equals("DIAG")) {
						dgOrderdt.setPaymentMade("n");
					} else {
						dgOrderdt.setPaymentMade("n");
					}

					totalAmount.add(charge);

					dgOrderdt.setAmount(charge);

					dgOrderdt.setLastChgBy(users);
					dgOrderdt.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
					dgOrderdt.setLastChgTime(currentTime);
					dgOrderdt.setMsgSent("n");
					dgOrderdt.setPacsStatus("n");
					// method written for taking out the values of mascharge
					// code and subcharge
					Map masChargeMap = getMasChargeCodeFromChargeId(chargeCodeList.get(0).getId());
					MasChargeCode masChargeCodeObj = (MasChargeCode) masChargeMap.get("masChargeCode");
					int mainChargeId = masChargeCodeObj.getMainChargecode().getId();
					int subChargeId = masChargeCodeObj.getSubChargecode().getId();
					MasMainChargecode masMainChargecode = new MasMainChargecode();
					masMainChargecode.setId(mainChargeId);
					dgOrderdt.setMainChargecode(masMainChargecode);
					MasSubChargecode masSubChargecode = new MasSubChargecode();
					masSubChargecode.setId(subChargeId);
					dgOrderdt.setSubChargeid(masSubChargecode);
					
					/*if(visitObjToUpdate!=null && visitObjToUpdate.getVisitStatus().equalsIgnoreCase("p")
							&& pDtId!=null && !pDtId.equals(0)){
						hbt.update(dgOrderdt);
					}else{*/
						hbt.save(dgOrderdt);
					//}
					dgOrderDetailsListObject.add(dgOrderdt);
					
				
						PharmacyLabQueue radioQueue=null;
					
		
					
					if(persistedChargeCode.getMainChargecode().getDepartment().getDepartmentType().getDepartmentTypeCode().equals("DIAG")){
						labStatus=true;		
						}
					
			
				if(labStatus){
					String Labcheck="L";
					Visit visitObj = new Visit();
					visitObj.setId(visitId);
					
					saveQueueNoForPharmacyAndLabData(labDepartmentId,hospitalId,visitObj,Labcheck,dgOrderhd,hinId,visitSessionId, totalHospitalVisit);					
					}
					//End
				
				//opdPatientDataList.put("patientInvestigatinDetailsListObject", patientInvestigatinDetailsListObject);
				//opdPatientDataList.put("dgOrderDetailsListObject", dgOrderDetailsListObject);
				//opdPatientDataList.put("dgSampleCollectionDeatilsListObject", dgSampleCollectionDeatilsListObject);
				dgOrderhd.setNetAmount(totalAmount);
				hbt.update(dgOrderhd);
				
				Map<String,Object> mapForBilling=new HashMap<String, Object>();
				mapForBilling.put(HIN_ID, hinId);
				mapForBilling.put(VISIT_ID, visitId);
				mapForBilling.put(HOSPITAL_ID, hospitalId);
				mapForBilling.put(USER_ID, userId);
				mapForBilling.put("orderId", dgOrderhd.getId());
				billingMasterDataService.internalBillingForService(mapForBilling);
				//}
			}
		}
				 
					
					tnx.commit();
					session.flush();
					successfullyAdded = true;
				} catch (RuntimeException e) {
					tnx.rollback();
					e.printStackTrace();
				}
				return map;

			}

			public Map<String, Object> getAntenatalCard2(int visitId,int hinId,Box box) {
				Session session = (Session) getSession();
				List<Visit> patientDataList = new ArrayList<Visit>();
				List opdAntenatalCardList = new ArrayList();
				List<MasAdministrativeSex> sexList = new ArrayList<MasAdministrativeSex>();
				List<OpdAntenatalCard> opdAntenatalCardList1= new ArrayList<OpdAntenatalCard>();
				List<OpdAntenatalCard> opdAntenatalCardExist= new ArrayList<OpdAntenatalCard>();
				List<OpdAntenatalUsg> usgFirstTrimList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimList1= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimListWeeks14= new ArrayList<OpdAntenatalUsg>();				
				List<OpdAntenatalUsg> usgSecondTrimList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgThirdTrimList= new ArrayList<OpdAntenatalUsg>();
				//USG changes 05/03/2018
				List<OpdAntenatalUsg> usgFirstTrimDateListFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimDateListSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimDateListThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				List<OpdAntenatalUsg> usgFirstTrimMeanSacFirstVisitList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimMeanSacSecondVisitList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimMeanSacThirdVisitList= new ArrayList<OpdAntenatalUsg>();
				
				List<OpdAntenatalUsg> usgFirstTrimYolkSacFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimYolkSacSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimYolkSacThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				List<OpdAntenatalUsg> usgFirstTrimFetalPoleFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<String> usgFirstTrimFetalPoleSecondVisit= new ArrayList<String>();
				List<String> usgFirstTrimFetalPoleThirdVisit= new ArrayList<String>();
				
				List<OpdAntenatalUsg> usgFirstTrimFetalHeartFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimFetalHeartSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimFetalHeartThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				List<OpdAntenatalUsg> usgFirstTrimCrownRumpFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimCrownRumpSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimCrownRumpThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				List<OpdAntenatalUsg> usgFirstTrimScanEDCFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimScanEDCSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimScanEDCThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				List<OpdAntenatalUsg> usgFirstTrimRemarksFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimRemarksSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimRemarksThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				
				//------
				List<Object[]> usgFirstTrimusgParameterList = new ArrayList<Object[]>();
				List<Object[]> usgFirstTrimusgParameterValue3List = new ArrayList<Object[]>();
				List<Object[]> usgFirstTrimusgParameterValue1List = new ArrayList<Object[]>();
				List<Object[]> usgFirstTrimusgParameterValue2List = new ArrayList<Object[]>();
				List<OpdAntenatalUsg> usgFlagList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFlagThirdTrimList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFlagSecondTrimList= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> secondGridUsgFlagList= new ArrayList<OpdAntenatalUsg>();
				
				//USG changes
				// USG(10-14 Weeks) start
				List<OpdAntenatalUsg> usgFirstTrimGrid2DateListFirstVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimGrid2DateListSecondVisit= new ArrayList<OpdAntenatalUsg>();
				List<OpdAntenatalUsg> usgFirstTrimGrid2DateListThirdVisit= new ArrayList<OpdAntenatalUsg>();
				
				
				
				// USG(10-14 Weeks) End
				
				List<String> riskList = new ArrayList<String>();
				Map<String, Object> map = new HashMap<String, Object>();
				PhMemberSurvey phMember = null;
				Criteria criteria  = null;
				List<PhAncTerminationM> phAncTerminationMList  = null;
				List<PhAncSurvey> phAncSurveyList = null;
				List<OpdVaccinMst> opdVaccinMstList = null;
				Calendar c = Calendar.getInstance();
				Date lmpDate = null;
				String tt1Date =  null; 
				String tt2Date =  null;
				int minimumDays = 0;
				int maximumDays = 0;
				String templateFlag=box.get("templateFlag");
				List<OpdAntenatalCardPregnancy> opdAntenatalCardPregnancyList= new ArrayList<OpdAntenatalCardPregnancy>();
				List<OpdAntenatalCardMedicalHistory> opdAntenatalCardMedicalHistoryList= new ArrayList<OpdAntenatalCardMedicalHistory>();
				List<OpdAntenatalCardTrimester> opdAntenatalCardTrim1= new ArrayList<OpdAntenatalCardTrimester>();
				List<OpdAntenatalCardTrimester> opdAntenatalCardTrim2= new ArrayList<OpdAntenatalCardTrimester>();
				List<OpdAntenatalCardTrimester> opdAntenatalCardTrim3= new ArrayList<OpdAntenatalCardTrimester>();
				List<MasBloodGroup> bloodGroupList=new ArrayList<MasBloodGroup>();
				List<Inpatient> ipAdmissionList = new ArrayList<Inpatient>();
				String lastPrescriptionStr= null;
				int departmentId = box.getInt("departmentId");
				int exist=0;
				try {
					List<PatientPrescriptionHeader> pph= null;
					pph = session.createCriteria(PatientPrescriptionHeader.class).add(Restrictions.eq("Department.Id",departmentId))
							.add(Restrictions.eq("Hin.Id",hinId)).add(Restrictions.ne("Visit.Id",visitId)).addOrder(Order.desc("PrescriptionDate")).setMaxResults(1)
							.list();
					if(pph.size()>0)
					{
						List<PatientPrescriptionDetails> ppd = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("Prescription.Id",pph.get(0).getId())).list();
						for(PatientPrescriptionDetails pd :ppd)
						  if(pd.getItem()!=null)
							lastPrescriptionStr = lastPrescriptionStr!=null?lastPrescriptionStr+","+pd.getItem().getNomenclature():pd.getItem().getNomenclature();
						  else if (pd.getItemOut()!=null)
							lastPrescriptionStr = lastPrescriptionStr!=null?lastPrescriptionStr+","+pd.getItemOut().getNomenclature():pd.getItemOut().getNomenclature();
					}
					
					bloodGroupList = session.createCriteria(MasBloodGroup.class).add(Restrictions.eq("Status", "y")).list();
					patientDataList = session.createCriteria(Visit.class)
							.add(Restrictions.eq("Id", visitId)).list();
					opdAntenatalCardList = session
							.createQuery(
									"select emp, emp.Id from OpdAntenatalCard as emp where emp.Status='y'")
							.list();
					
					sexList = session.createCriteria(MasAdministrativeSex.class)
							.addOrder(Order.asc("AdministrativeSexName"))
							.add(Restrictions.eq("Status", "Y").ignoreCase()).list();
					
					//IP Admissions
					
					ipAdmissionList = session.createCriteria(Inpatient.class)
							.createAlias("Hin", "h")
						     .add(Restrictions.eq("h.Id", hinId))
						     .addOrder(Order.desc("Id"))						      
						     .list();
					List<String> managementList = null;
					List<String> adviceList = null;
					List<String> diagnosisList = null;
					
					
					if(ipAdmissionList.size()>0){
						int maxInpatientId = ipAdmissionList.get(0).getId();
						
					 String sqlQuery="select mas.icd_name from mas_icd mas join discharge_icd_code dc on (dc.icd_id=mas.icd_id) join inpatient ip on (ip.inpatient_id=dc.inpatient_id) where ip.inpatient_id="+maxInpatientId;
					 diagnosisList = session.createSQLQuery(sqlQuery).list();

					 
					 String sqlQuery1= "select m.charge_code_name from mas_charge_code m join opd_surgery_detail osd on (osd.charge_code_id=m.charge_code_id) join opd_surgery_header osh on (osh.opd_surgery_id=osd.opd_surgery_id) join inpatient ip on (ip.inpatient_id=osh.inpatient_id) where ip.inpatient_id="+maxInpatientId;
					 
					 managementList = session.createSQLQuery(sqlQuery1).list();
					 
					 String sqlQuery2="select m.nomenclature from mas_store_item m join inpatient_prescription_details ipd on (ipd.item_id=m.item_id) join inpatient_prescription_header iph on (iph.prescription_id=ipd.prescription_id) join inpatient ip on (ip.inpatient_id=iph.inpatient_id) where ip.inpatient_id="+maxInpatientId;
					 
					 adviceList = session.createSQLQuery(sqlQuery2).list();
					}
					map.put("ipAdmissionList", ipAdmissionList);
					map.put("managementList", managementList);
					map.put("diagnosisList", diagnosisList);
					map.put("adviceList", adviceList);
					
					//IP Admissions end
					
					//Code for Allergy
					String allergyStr = "";
					List<OpdPatientAllergyT> patientPreviousAllergy = session.createCriteria(OpdPatientAllergyT.class)
							.createAlias("OpdPatientAllergy", "alm")
							.add(Restrictions.eq("alm.Hin.Id", hinId)).list();
							//.add(Restrictions.eq("Status", "y").ignoreCase()).list();
					
					
					for(OpdPatientAllergyT dic:patientPreviousAllergy){
						if(allergyStr.equals("")){
							allergyStr=dic.getAllergen();
						}else{
							allergyStr=allergyStr+"\n"+dic.getAllergen();
						}
					}
					map.put("allergyStr", allergyStr);
					
					 List<MasAllergyProduct> allergyProductsList = new ArrayList<MasAllergyProduct>();
					  allergyProductsList = session
										.createCriteria(MasAllergyProduct.class)
										.add(Restrictions.eq("Status", "y".toLowerCase())
												.ignoreCase()).list();
					map.put("allergyProductsList", allergyProductsList);
					//
					
					
					if (opdAntenatalCardList.size() > 0) {
						Iterator iterator = opdAntenatalCardList.iterator();
						while (iterator.hasNext()) {
							Object[] pair = (Object[]) iterator.next();
							OpdAntenatalCard opdAntenatalCard = (OpdAntenatalCard) pair[0];
							int max = (Integer) pair[1];
							map.put("opdAntenatalCardList", opdAntenatalCardList);
						}

					}
					
					
					if(patientDataList.size()>0){
					Visit visit=(Visit)patientDataList.get(0);
					hinId=visit.getHin().getId();
					phMember = visit.getHin().getMember();
					}
					
					
					opdAntenatalCardList1 = session.createCriteria(OpdAntenatalCard.class)
							.add(Restrictions.eq("Status", "Y").ignoreCase())
							.add(Restrictions.eq("Hin.Id", hinId)).addOrder(Order.asc("Id")).list();
					opdAntenatalCardExist = session.createCriteria(OpdAntenatalCard.class)
							.add(Restrictions.eq("Status", "Y").ignoreCase())
							.add(Restrictions.eq("Visit.Id", visitId)).addOrder(Order.asc("Id")).list();
					opdAntenatalCardPregnancyList = session.createCriteria(OpdAntenatalCardPregnancy.class)
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					opdAntenatalCardMedicalHistoryList = session.createCriteria(OpdAntenatalCardMedicalHistory.class)
							.add(Restrictions.eq("Hin.Id", hinId)).list();

					opdAntenatalCardTrim1 = session.createCriteria(OpdAntenatalCardTrimester.class)
							.add(Restrictions.eq("trimesterType", 1))
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					opdAntenatalCardTrim2 = session.createCriteria(OpdAntenatalCardTrimester.class)
							.add(Restrictions.eq("trimesterType", 2))
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					opdAntenatalCardTrim3 = session.createCriteria(OpdAntenatalCardTrimester.class)
							.add(Restrictions.eq("trimesterType", 3))
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					//---------------------------------------------------------
					//Out side lab test report
					
					if(hinId != 0 && templateFlag != null){
						List<ExternalLabReportCommon> externalLabListCommon = new ArrayList();
						externalLabListCommon = session.createCriteria(ExternalLabReportCommon.class)
					      .createAlias("Hin", "h")
					      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
					      .add(Restrictions.eq("TemplateName", templateFlag))
					      .list();
					    map.put("externalLabListCommon", externalLabListCommon);
					}
					//Out side lab test report end
					
					//Risk List
					String riskQuery = "select trim.obstetric_risk_measure from opd_antenatal_card_trimester trim where trim.hin_id="+hinId;
					riskList = session.createSQLQuery(riskQuery).list();
					
					//Risk list end
					List<Integer> maxVisitIdList = new ArrayList<Integer>();
					List<Object[]> reVisitList = new ArrayList<Object[]>();
					
					maxVisitIdList =session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit").createAlias("visit.Hin", "hin")
									.add(Restrictions.eq("hin.Id",hinId))
										.setProjection(Projections.max("visit.Id")).list();
					
				
				if(maxVisitIdList.size()>0){
					if(maxVisitIdList.get(0) != null){
					int maxVisitId = maxVisitIdList.get(0);
					
					reVisitList = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit").createAlias("visit.Hin", "hin")
										.add(Restrictions.eq("hin.Id", hinId)).add(Restrictions.eq("visit.Id", maxVisitId))
										.setProjection(Projections.projectionList()
												.add(Projections.property("Height")).add(Projections.property("Weight"))
												.add(Projections.property("Bmi"))).list();
					map.put("reVisitList", reVisitList);
					
					usgFirstTrimList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Visit.Id", maxVisitId)).add(Restrictions.eq("Trimister", "First"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("firstTrimWeeks", "Week10")).list();
					
					//USG changes
					      
					        
					 usgFirstTrimDateListFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Date"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list(); 
					        		
					        
					        usgFirstTrimDateListSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Date"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list(); 
					        
					        usgFirstTrimDateListThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Date"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list();
							
						  
						    usgFirstTrimMeanSacFirstVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Mean SAC Diameter"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list(); 
			        
			              
			              usgFirstTrimMeanSacSecondVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Mean SAC Diameter"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list(); 
			        
			              
			              usgFirstTrimMeanSacThirdVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Mean SAC Diameter"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list();
			          
			              
			              usgFirstTrimYolkSacFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Yolk SAC"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list(); 
			              
			              usgFirstTrimYolkSacSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Yolk SAC"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list();
			              
			        
			              usgFirstTrimYolkSacThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Yolk SAC"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list();
			              
			              
			              usgFirstTrimFetalPoleFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Fetal Pole"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list(); 
			              
			              usgFirstTrimFetalPoleSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Fetal Pole"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list(); 
			              
			              
			              usgFirstTrimFetalPoleThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Fetal Pole"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list(); 
			              
			              
			              usgFirstTrimFetalHeartFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Fetal Heart"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list(); 
			              
			              usgFirstTrimFetalHeartSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Fetal Heart"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list(); 
			              
			              usgFirstTrimFetalHeartThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Fetal Heart"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list(); 
			        
			              
			              usgFirstTrimCrownRumpFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Crown Rump Length"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list();
			              
			              usgFirstTrimCrownRumpSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Crown Rump Length"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list();
			              
			              usgFirstTrimCrownRumpThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Crown Rump Length"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list();
			              
			              usgFirstTrimScanEDCFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Scan EDC"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list();
			              
			              usgFirstTrimScanEDCSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Scan EDC"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list();
			              
			              
			              usgFirstTrimScanEDCThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Scan EDC"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list();
			              
			              
			              
			              usgFirstTrimRemarksFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Remarks"))
									.add(Restrictions.eq("VisitFlag", "First"))
									.list();
			        
			              
			              usgFirstTrimRemarksSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Remarks"))
									.add(Restrictions.eq("VisitFlag", "Second"))
									.list();
			              
			              
			              usgFirstTrimRemarksThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("UsgParameter", "Remarks"))
									.add(Restrictions.eq("VisitFlag", "Third"))
									.list();
			              
							
							
							usgFlagList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10"))
									.add(Restrictions.eq("Visit.Id", maxVisitId))
									.addOrder(Order.desc("Id"))
									.setMaxResults(1)
									.list();
							
							
							
							usgFlagThirdTrimList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("Visit.Id", maxVisitId))
									.addOrder(Order.desc("Id"))
									.setMaxResults(1)
									.list();
							
							usgFlagSecondTrimList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("Visit.Id", maxVisitId))
									.addOrder(Order.desc("Id"))
									.setMaxResults(1)
									.list();
							
							
							secondGridUsgFlagList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
									.add(Restrictions.eq("Visit.Id", maxVisitId))
									.addOrder(Order.desc("Id"))
									.setMaxResults(1)
									.list();
							
							
							map.put("usgFirstTrimDateListFirstVisit", usgFirstTrimDateListFirstVisit);	
							map.put("usgFirstTrimDateListSecondVisit", usgFirstTrimDateListSecondVisit);
							map.put("usgFirstTrimDateListThirdVisit", usgFirstTrimDateListThirdVisit);
							
							map.put("usgFirstTrimMeanSacFirstVisitList", usgFirstTrimMeanSacFirstVisitList);	
							map.put("usgFirstTrimMeanSacSecondVisitList", usgFirstTrimMeanSacSecondVisitList);
							map.put("usgFirstTrimMeanSacThirdVisitList", usgFirstTrimMeanSacThirdVisitList);
							
							map.put("usgFirstTrimYolkSacFirstVisit", usgFirstTrimYolkSacFirstVisit);	
							map.put("usgFirstTrimYolkSacSecondVisit", usgFirstTrimYolkSacSecondVisit);
							map.put("usgFirstTrimYolkSacThirdVisit", usgFirstTrimYolkSacThirdVisit);
							
							
							map.put("usgFirstTrimFetalPoleFirstVisit", usgFirstTrimFetalPoleFirstVisit);	
							map.put("usgFirstTrimFetalPoleSecondVisit", usgFirstTrimFetalPoleSecondVisit);
							map.put("usgFirstTrimFetalPoleThirdVisit", usgFirstTrimFetalPoleThirdVisit);
							
							map.put("usgFirstTrimFetalHeartFirstVisit", usgFirstTrimFetalHeartFirstVisit);	
							map.put("usgFirstTrimFetalHeartSecondVisit", usgFirstTrimFetalHeartSecondVisit);
							map.put("usgFirstTrimFetalHeartThirdVisit", usgFirstTrimFetalHeartThirdVisit);
							
							map.put("usgFirstTrimCrownRumpFirstVisit", usgFirstTrimCrownRumpFirstVisit);	
							map.put("usgFirstTrimCrownRumpSecondVisit", usgFirstTrimCrownRumpSecondVisit);
							map.put("usgFirstTrimCrownRumpThirdVisit", usgFirstTrimCrownRumpThirdVisit);
							
							map.put("usgFirstTrimScanEDCFirstVisit", usgFirstTrimScanEDCFirstVisit);	
							map.put("usgFirstTrimScanEDCSecondVisit", usgFirstTrimScanEDCSecondVisit);
							map.put("usgFirstTrimScanEDCThirdVisit", usgFirstTrimScanEDCThirdVisit);
							
							map.put("usgFirstTrimRemarksFirstVisit", usgFirstTrimRemarksFirstVisit);	
							map.put("usgFirstTrimRemarksSecondVisit", usgFirstTrimRemarksSecondVisit);
							map.put("usgFirstTrimRemarksThirdVisit", usgFirstTrimRemarksThirdVisit);
							
							
							map.put("usgFlagList", usgFlagList);
							map.put("usgFlagThirdTrimList", usgFlagThirdTrimList);
							map.put("usgFlagSecondTrimList", usgFlagSecondTrimList);
							map.put("secondGridUsgFlagList", secondGridUsgFlagList);
							
							//----
							
							usgFirstTrimusgParameterList= session.createSQLQuery("select usg_parameter"
									+ " from opd_antenatal_usg  where hin_id="+hinId).list();
							
							usgFirstTrimusgParameterValue1List = session.createSQLQuery("select usg_parameter_value1"
									+ " from opd_antenatal_usg  where hin_id="+hinId+" and trimister='First' and first_trim_weeks='Week10' and (usg_parameter_value1 is not null OR usg_parameter_value1 = '')").list();
							
							
							usgFirstTrimusgParameterValue2List = session.createSQLQuery("select "
									+ "usg_parameter_value2 from opd_antenatal_usg  where hin_id="+hinId+" and trimister='First' and first_trim_weeks='Week10' and (usg_parameter_value2 is not null OR usg_parameter_value2 = '')").list();
							
							
							usgFirstTrimusgParameterValue3List = session.createSQLQuery("select usg_parameter_value3 from opd_antenatal_usg  "
									+ "where hin_id="+hinId+" and trimister='First' and first_trim_weeks='Week10' and (usg_parameter_value3 is not null OR usg_parameter_value3 = '')").list();
							
							String revisitFlag="NO";
							if(usgFirstTrimusgParameterValue2List.size() > 0 ){
								revisitFlag="Yes";
							}
							
							map.put("usgFirstTrimusgParameterList", usgFirstTrimusgParameterList);
							map.put("usgFirstTrimusgParameterValue3List", usgFirstTrimusgParameterValue3List);
							map.put("usgFirstTrimusgParameterValue2List", usgFirstTrimusgParameterValue2List);
							map.put("usgFirstTrimusgParameterValue1List", usgFirstTrimusgParameterValue1List);
							map.put("revisitFlag", revisitFlag);
							
					//USG changes end		
							map.put("usgFirstTrimList", usgFirstTrimList);
							
					
					usgFirstTrimList1 = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("firstTrimWeeks", "Week10")).list();
					map.put("usgFirstTrimList1", usgFirstTrimList1);
					
					usgFirstTrimListWeeks14 = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Visit.Id", maxVisitId)).add(Restrictions.eq("Trimister", "First"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("firstTrimWeeks", "Week10-14")).list();
					
					map.put("usgFirstTrimListWeeks14", usgFirstTrimListWeeks14);
					
					//----------------usg for third trimister-------------------
					List<OpdAntenatalUsg> usgThirdTrimFirstVisitList= new ArrayList<OpdAntenatalUsg>();
					List<OpdAntenatalUsg>  usgThirdTrimSecondVisitList= new ArrayList<OpdAntenatalUsg>();
					List<OpdAntenatalUsg>  usgThirdTrimThirdVisitList= new ArrayList<OpdAntenatalUsg>();
					List<ExternalAdmissionDetails>  admissionDetailsList= new ArrayList<ExternalAdmissionDetails>();
					
					usgThirdTrimFirstVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
								.add(Restrictions.eq("Hin.Id", hinId))
								.add(Restrictions.eq("VisitFlag", "First"))
								.list();
					
					usgThirdTrimSecondVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("VisitFlag", "Second"))
							.list();
					
					usgThirdTrimThirdVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("VisitFlag", "Third"))
							.list();
					
					admissionDetailsList =session.createCriteria(ExternalAdmissionDetails.class)
							.add(Restrictions.eq("Hin.Id", hinId))
							.list();
					
					
					String revisitFlagThirdTrim="NO";
					if(usgThirdTrimSecondVisitList.size() > 0 ){
						revisitFlagThirdTrim="Yes";
					}
					
					map.put("usgThirdTrimFirstVisitList", usgThirdTrimFirstVisitList);
					map.put("usgThirdTrimSecondVisitList", usgThirdTrimSecondVisitList);
					map.put("usgThirdTrimThirdVisitList", usgThirdTrimThirdVisitList);
					map.put("revisitFlagThirdTrim", revisitFlagThirdTrim);
					map.put("admissionDetailsList", admissionDetailsList);
					
					//----------------usg for Second trimister-------------------
					List<OpdAntenatalUsg> usgSecondTrimFirstVisitList= new ArrayList<OpdAntenatalUsg>();
					List<OpdAntenatalUsg>  usgSecondTrimSecondVisitList= new ArrayList<OpdAntenatalUsg>();
					List<OpdAntenatalUsg>  usgSecondTrimThirdVisitList= new ArrayList<OpdAntenatalUsg>();
					
					usgSecondTrimFirstVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
								.add(Restrictions.eq("Hin.Id", hinId))
								.add(Restrictions.eq("VisitFlag", "First"))
								.list();
					
					usgSecondTrimSecondVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("VisitFlag", "Second"))
							.list();
					
					usgSecondTrimThirdVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("VisitFlag", "Third"))
							.list();
					
					String revisitFlagSecondTrim="NO";
					if(usgSecondTrimSecondVisitList.size() > 0 ){
						revisitFlagSecondTrim="Yes";
					}
					
					map.put("usgSecondTrimFirstVisitList", usgSecondTrimFirstVisitList);
					map.put("usgSecondTrimSecondVisitList", usgSecondTrimSecondVisitList);
					map.put("usgSecondTrimThirdVisitList", usgSecondTrimThirdVisitList);
					map.put("revisitFlagSecondTrim", revisitFlagSecondTrim);
					
					
					
					usgSecondTrimList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Visit.Id", maxVisitId)).add(Restrictions.eq("Trimister", "Second"))
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					map.put("usgSecondTrimList", usgSecondTrimList);
					usgThirdTrimList = session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Visit.Id", maxVisitId)).add(Restrictions.eq("Trimister", "Third"))
							.add(Restrictions.eq("Hin.Id", hinId)).list();
					map.put("usgThirdTrimList", usgThirdTrimList);
					
					//USG (10-14 Weeks) changes	start
					usgFirstTrimGrid2DateListFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
							.add(Restrictions.eq("VisitFlag", "First"))
							.list();
					
					usgFirstTrimGrid2DateListSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
							.add(Restrictions.eq("VisitFlag", "Second"))
							.list();
					
					usgFirstTrimGrid2DateListThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
							.add(Restrictions.eq("Hin.Id", hinId))
							.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
							.add(Restrictions.eq("VisitFlag", "Third"))
							.list();
					
					
					String revisitFlagSecondGrid="NO";
					if(usgFirstTrimGrid2DateListSecondVisit.size() > 0 ){
						revisitFlagSecondGrid="Yes";
					}
					
					map.put("usgFirstTrimGrid2DateListFirstVisit", usgFirstTrimGrid2DateListFirstVisit);
					map.put("usgFirstTrimGrid2DateListSecondVisit", usgFirstTrimGrid2DateListSecondVisit);
					map.put("usgFirstTrimGrid2DateListThirdVisit", usgFirstTrimGrid2DateListThirdVisit);
					map.put("revisitFlagSecondGrid", revisitFlagSecondGrid);
					
					
					
					//USG (10-14 Weeks) changes	End
					
				 }
				}
				//---------------------------Start Lab Results For All Trimester---------------------------
				List<DgResultEntryHeader>dgResultHeaderDetailsListForFirstTrim = new ArrayList<DgResultEntryHeader>();
				List<DgResultEntryHeader>dgResultHeaderDetailsListForSecondTrim = new ArrayList<DgResultEntryHeader>();
				List<DgResultEntryHeader>dgResultHeaderDetailsListForThirdTrim = new ArrayList<DgResultEntryHeader>();
				List<ExternalLabReportCommon> externalLabListCommonFirstTrim = new ArrayList();
				List<ExternalLabReportCommon> externalLabListCommonSecondTrim = new ArrayList();
				List<ExternalLabReportCommon> externalLabListCommonThirdTrim = new ArrayList();
				if(opdAntenatalCardList1.size()>0){
				if(opdAntenatalCardList1.get(0).getLmp() != null || opdAntenatalCardList1.get(0).getScannedEdc()!=null || opdAntenatalCardList1.get(0).getEdcDate()!=null){
					Date lmpDt =opdAntenatalCardList1.get(0).getLmp();
					Date scanEdcDate= opdAntenatalCardList1.get(0).getScannedEdc();
					Date correctedEdcDate = opdAntenatalCardList1.get(0).getEdcDate();
					Date scanEdcLmp=null;
					Date correctedScanEdcLmp=null;
					if(scanEdcDate != null && !scanEdcDate.equals("")){
						Calendar c1 = Calendar.getInstance();
						c1.setTime(scanEdcDate);
						c1.add(Calendar.MONTH, -9);
						c1.add(Calendar.DATE, -7);
						scanEdcLmp =c1.getTime(); 
					}
					
					if(correctedEdcDate != null && !correctedEdcDate.equals("")){
						Calendar c1 = Calendar.getInstance();
						c1.setTime(correctedEdcDate);
						c1.add(Calendar.MONTH, -9);
						c1.add(Calendar.DATE, -7);
						correctedScanEdcLmp =c1.getTime(); 
					}
					
					
					if(correctedEdcDate != null && !correctedEdcDate.equals("")){
						lmpDt = correctedScanEdcLmp;
					}else if(scanEdcDate != null && !scanEdcDate.equals(""))
					{
						lmpDt = scanEdcLmp;
					}else
						lmpDt = lmpDt;
					Calendar cal1 = Calendar.getInstance();
					cal1.setTime(lmpDt); 
					cal1.add(Calendar.MONTH, 3);
					Date firstTrimesterDate =cal1.getTime();
					map.put("firstTrimesterDate", firstTrimesterDate);
					
					
					Calendar cal2 = Calendar.getInstance();
					cal2.setTime(lmpDt);
					cal2.add(Calendar.MONTH, 6);
					Date secondTrimesterDate =cal2.getTime();
					map.put("secondTrimesterDate", secondTrimesterDate);
					
					Calendar cal3 = Calendar.getInstance();
					cal3.setTime(lmpDt);
					cal3.add(Calendar.MONTH, 9);
					Date thirdTrimesterDate =cal3.getTime();
					map.put("thirdTrimesterDate", thirdTrimesterDate);
				
					Object[] selectedStatus = {"V","Y"};
					dgResultHeaderDetailsListForFirstTrim= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
								.add(Restrictions.between("ResultDate", lmpDt, firstTrimesterDate))
								.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
								.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
					
					map.put("dgResultHeaderDetailsListForFirstTrim",dgResultHeaderDetailsListForFirstTrim);
					
					dgResultHeaderDetailsListForSecondTrim= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
							.add(Restrictions.gt("ResultDate", firstTrimesterDate)).add(Restrictions.lt("ResultDate", secondTrimesterDate))
							.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
							.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
				
				map.put("dgResultHeaderDetailsListForSecondTrim",dgResultHeaderDetailsListForSecondTrim);
					
					dgResultHeaderDetailsListForThirdTrim= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
							.add(Restrictions.gt("ResultDate", secondTrimesterDate)).add(Restrictions.lt("ResultDate", thirdTrimesterDate))
							.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
							.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
				
				map.put("dgResultHeaderDetailsListForThirdTrim",dgResultHeaderDetailsListForThirdTrim);
				
						//code to display lab result
								
						externalLabListCommonFirstTrim = session.createCriteria(ExternalLabReportCommon.class)
					      .createAlias("Hin", "h")
					      .add(Restrictions.between("TestDate", lmpDt, firstTrimesterDate))
					      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
					      .add(Restrictions.eq("TemplateName", templateFlag)).add(Restrictions.isNull("SubInvestigation.Id"))
					      .list();
					    map.put("externalLabListCommonFirstTrim", externalLabListCommonFirstTrim);
					    
					    externalLabListCommonSecondTrim = session.createCriteria(ExternalLabReportCommon.class)
							      .createAlias("Hin", "h")
							      .add(Restrictions.gt("TestDate", firstTrimesterDate)).add(Restrictions.lt("TestDate", secondTrimesterDate))
							      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
							      .add(Restrictions.eq("TemplateName", templateFlag)).add(Restrictions.isNull("SubInvestigation.Id"))
							      .list();
							    map.put("externalLabListCommonSecondTrim", externalLabListCommonSecondTrim);
							    
							    externalLabListCommonThirdTrim = session.createCriteria(ExternalLabReportCommon.class)
									      .createAlias("Hin", "h")
									      .add(Restrictions.gt("TestDate", secondTrimesterDate)).add(Restrictions.lt("TestDate", thirdTrimesterDate))
									      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
									      .add(Restrictions.eq("TemplateName", templateFlag)).add(Restrictions.isNull("SubInvestigation.Id"))
									      .list();
									    map.put("externalLabListCommonThirdTrim", externalLabListCommonThirdTrim);	  
						
						// End lab result
				
				
				  }
				}
				
				//---------------------------Start Lab Results For All Trimester---------------------------

					if(opdAntenatalCardExist.size()>0){
						exist=1;
					}
					if(phMember!=null){
					criteria = session.createCriteria(OpdVaccinMst.class).createAlias("MasStoreItem", "msi").add(Restrictions.ilike("msi.Nomenclature", "tetanus", MatchMode.ANYWHERE));
					opdVaccinMstList =		criteria.list();
					if(opdVaccinMstList!=null && opdVaccinMstList.size()>0){
						 minimumDays = 	opdVaccinMstList.get(0).getVaccinDuration();
						 maximumDays = 	opdVaccinMstList.get(0).getVaccinToDays();
					}
							
					criteria = session.createCriteria(PhAncSurvey.class).add(Restrictions.eq("MemberId",   phMember.getMemberId()));
					phAncSurveyList = 	criteria.list();
					if(phAncSurveyList!=null){
						for(PhAncSurvey phAncSurvey : phAncSurveyList){
							criteria = session.createCriteria(PhAncTerminationM.class).add(Restrictions.eq("AncRegId", phAncSurvey.getAncRegId()).ignoreCase());
							phAncTerminationMList = criteria.list();
							if(phAncTerminationMList==null || phAncTerminationMList.size()==0){
								lmpDate =	phAncSurvey.getLmpDate();
								break;
							}
						}
					}
					
					if(lmpDate!=null){
						SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
						c.setTime(lmpDate);
						c.add(Calendar.DATE, minimumDays);
						tt1Date = sdf.format(c.getTime());
						c.setTime(lmpDate);
						c.add(Calendar.DATE, maximumDays);
						tt2Date = sdf.format(c.getTime());
					}
			
					}
					
				} catch (HibernateException e) {
					e.printStackTrace();
				}
				map.put("patientDataList", patientDataList);
				map.put("sexList", sexList);	
				
				map.put("opdAntenatalCardList1", opdAntenatalCardList1);

				map.put("opdAntenatalCardPregnancyList", opdAntenatalCardPregnancyList);
				map.put("opdAntenatalCardMedicalHistoryList", opdAntenatalCardMedicalHistoryList);
				map.put("opdAntenatalCardTrim1", opdAntenatalCardTrim1);
				map.put("opdAntenatalCardTrim2", opdAntenatalCardTrim2);
				map.put("opdAntenatalCardTrim3", opdAntenatalCardTrim3);
				map.put("exist",exist);
				map.put("riskList", riskList);
				map.put("bloodGroupList",bloodGroupList);
				map.put("lastPrescriptionStr",lastPrescriptionStr);
				
				return map;
			}

			public String getAntenatalCardStatus(int hinId) {
				Map<String, Object> map = new HashMap<String, Object>();
				String status = "";
				Session session=(Session)getSession();
				List<OpdAntenatalCard>antList=new ArrayList<OpdAntenatalCard>();
				antList=session.createCriteria(OpdAntenatalCard.class).add(Restrictions.eq("Hin.Id", hinId)).list();
				if(antList.size() > 0) {
					status = "y";
				}
				return status;
			}
			
			// added by amit das on 20-12-2016
			public Map<String, Object> getHospitalData(Map<String, Object> objectMap) {
				Map<String, Object> map = new HashMap<String, Object>();
				MasHospital hospital  = null;
				long hospitalId = 0;
				Session session = (Session)getSession();
				if(objectMap!=null && objectMap.get("hospitalId")!=null){
					hospitalId = (Long)objectMap.get("hospitalId");
					if(hospitalId!=0){
						hospital = (MasHospital)session.get(MasHospital.class, (int)hospitalId);
					}
				}

				map.put("hospital", hospital);
				if(session!=null){
					session.close();
				}
				return map;
			}
			private PharmacyLabQueue saveQueueNoForPharmacyAndLabData(int departmentId,int hospitalId,Visit visit,String pharmacyLabStatus,DgOrderhd dgOrderHd,int hinId,int visitSessionId,int totalHospitalVisit){
				boolean status=false;
				
				Session session = (Session) getSession();
				PharmacyLabQueue pharmacyLabQueue=null;
				Criteria crt=null;
				int tokenNo=0;
				
				 crt=session.createCriteria(PharmacyLabQueue.class)
						.createAlias("Visit", "visit")
						.createAlias("Visit.Hin", "hin")
						.createAlias("Hospital", "hosp")
						.add(Restrictions.eq("OpdDate", new Date()))
						.add(Restrictions.eq("hosp.Id", hospitalId))
						.add(Restrictions.eq("hin.Id", hinId))
						.add(Restrictions.eq("Status", "P").ignoreCase())
						.add(Restrictions.eq("PharmacyLabStatus", "L").ignoreCase());
				 
				 if(null !=crt && null !=crt.list() && crt.list().size()>0){
					 status=true;
					 PharmacyLabQueue pharmacyLabQueueList=(PharmacyLabQueue) crt.list().get(0);
					 tokenNo=pharmacyLabQueueList.getTokenNo();
				 }
				 pharmacyLabQueue=new PharmacyLabQueue();
				int maxQueueNoDepartWise=0;
				if(status){
					pharmacyLabQueue.setTokenNo(tokenNo);
				}
				else{
				maxQueueNoDepartWise=getqueueNoForDepartment(departmentId,hospitalId,visitSessionId); //changed by amit das on 07-06-2017
				pharmacyLabQueue.setTokenNo(maxQueueNoDepartWise+1);
				}
				
				MasDepartment masDepartment=new MasDepartment();
				masDepartment.setId(departmentId);
				pharmacyLabQueue.setDepartment(masDepartment);
				
				MasHospital masHospital=new MasHospital();
				masHospital.setId(hospitalId);
				pharmacyLabQueue.setHospital(masHospital);
				
				
				pharmacyLabQueue.setTotalHospitalVisit(totalHospitalVisit);
				
				pharmacyLabQueue.setVisit(visit);
				
				pharmacyLabQueue.setStatus("P");
				
				pharmacyLabQueue.setPharmacyLabStatus(pharmacyLabStatus);
				
				SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");

	    	    Date now = new Date();

	    	    String opdTime = sdfTime.format(now);
	    	    
				pharmacyLabQueue.setOpdDate(now);
				pharmacyLabQueue.setOpdTime(opdTime);
				
				if(null != dgOrderHd){
					pharmacyLabQueue.setDgOrderhdId(dgOrderHd);
				}
				
				session.save(pharmacyLabQueue);
				
			 return pharmacyLabQueue;
			
			}

			
			// Added by dhananjay 02-jan-2017
			
			private PharmacyLabQueue saveQueueNoForPharmacyAndLab(int departmentId,int hospitalId,Visit visit,String pharmacyLabStatus,DgOrderhd dgOrderHd){
				boolean status=false;
				
				Session session = (Session) getSession();
				PharmacyLabQueue pharmacyLabQueue=null;
				Criteria crt=null;
				int tokenNo=0;
				
				 crt=session.createCriteria(PharmacyLabQueue.class)
						.createAlias("Visit", "visit")
						.createAlias("Visit.Hin", "hin")
						.createAlias("Hospital", "hosp")
						.add(Restrictions.eq("OpdDate", new Date()))
						.add(Restrictions.eq("hosp.Id", hospitalId))
						.add(Restrictions.eq("hin.Id", visit.getHin().getId()))
						.add(Restrictions.eq("Status", "P").ignoreCase())
						.add(Restrictions.eq("PharmacyLabStatus", "L").ignoreCase());
				 
				 if(null !=crt && null !=crt.list() && crt.list().size()>0){
					 status=true;
					 PharmacyLabQueue pharmacyLabQueueList=(PharmacyLabQueue) crt.list().get(0);
					 tokenNo=pharmacyLabQueueList.getTokenNo();
				 }
				 pharmacyLabQueue=new PharmacyLabQueue();
				int maxQueueNoDepartWise=0;
				if(status){
					pharmacyLabQueue.setTokenNo(tokenNo);
				}
				else{
				maxQueueNoDepartWise=getqueueNoForDepartment(departmentId,hospitalId,visit.getVisitSession().getId()); //changed by amit das on 07-06-2017
				pharmacyLabQueue.setTokenNo(maxQueueNoDepartWise+1);
				}
				
				MasDepartment masDepartment=new MasDepartment();
				masDepartment.setId(departmentId);
				pharmacyLabQueue.setDepartment(masDepartment);
				
				MasHospital masHospital=new MasHospital();
				masHospital.setId(hospitalId);
				pharmacyLabQueue.setHospital(masHospital);
				
				
				pharmacyLabQueue.setTotalHospitalVisit(visit.getTotalHospitalVisit());
				
				pharmacyLabQueue.setVisit(visit);
				
				pharmacyLabQueue.setStatus("P");
				
				pharmacyLabQueue.setPharmacyLabStatus(pharmacyLabStatus);
				
				SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");

	    	    Date now = new Date();

	    	    String opdTime = sdfTime.format(now);
	    	    
				pharmacyLabQueue.setOpdDate(now);
				pharmacyLabQueue.setOpdTime(opdTime);
				
				if(null != dgOrderHd){
					pharmacyLabQueue.setDgOrderhdId(dgOrderHd);
				}
				
				session.save(pharmacyLabQueue);
				
			 return pharmacyLabQueue;
			
			}
			// Added by dhananjay 02-jan-2017
			
	private PharmacyLabQueue saveQueueNoForRadio(int departmentId,int hospitalId,Visit visit,String pharmacyLabStatus){
							
		
							Session session = (Session) getSession();
							
							boolean status=false;
							PharmacyLabQueue pharmacyLabQueue=null;
							Criteria crt=null;
							
							 crt=session.createCriteria(PharmacyLabQueue.class)
									.createAlias("Visit", "visit")
									.createAlias("Visit.Hin", "hin")
									.createAlias("Hospital", "hosp")
									.add(Restrictions.eq("OpdDate", new Date()))
									.add(Restrictions.eq("hosp.Id", hospitalId))
									.add(Restrictions.eq("hin.Id", visit.getHin().getId()))
									.add(Restrictions.eq("Status", "P").ignoreCase())
									.add(Restrictions.eq("PharmacyLabStatus", "R").ignoreCase());
							
							 if(null !=crt && null !=crt.list() && crt.list().size()>0){
								 status=true;
							 }
							if(!status){
							int maxQueueNoDepartWise=0;
							maxQueueNoDepartWise=getqueueNoForDepartment(departmentId,hospitalId,visit.getVisitSession().getId());
							
							 pharmacyLabQueue=new PharmacyLabQueue();
							pharmacyLabQueue.setTokenNo(maxQueueNoDepartWise+1);
							
							MasDepartment masDepartment=new MasDepartment();
							masDepartment.setId(departmentId);
							pharmacyLabQueue.setDepartment(masDepartment);
							
							MasHospital masHospital=new MasHospital();
							masHospital.setId(hospitalId);
							pharmacyLabQueue.setHospital(masHospital);
							
							
							pharmacyLabQueue.setTotalHospitalVisit(visit.getTotalHospitalVisit());
							
							pharmacyLabQueue.setVisit(visit);
							
							pharmacyLabQueue.setStatus("P");
							
							pharmacyLabQueue.setPharmacyLabStatus(pharmacyLabStatus);
							
							SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");

				    	    Date now = new Date();

				    	    String opdTime = sdfTime.format(now);
				    	    
							pharmacyLabQueue.setOpdDate(now);
							pharmacyLabQueue.setOpdTime(opdTime);
							
							/*if(null != dgSampleCollectionHeader){
								pharmacyLabQueue.setDgSampleCollectionHd(dgSampleCollectionHeader);
							}
							*/
							session.save(pharmacyLabQueue);
							
						} return pharmacyLabQueue;
			}
			
			// Added by dhananjay 02-jan-2017
			
		private PharmacyLabQueue saveQueueNoForPharmacy(int departmentId,int hospitalId,Visit visit,String pharmacyLabStatus){
							Criteria crt=null;
							boolean status=false;
							PharmacyLabQueue pharmacyLabQueue=null;
							Session session = (Session) getSession();
							
							 crt=session.createCriteria(PharmacyLabQueue.class)
									.createAlias("Visit", "visit")
									.createAlias("Visit.Hin", "hin")
									.createAlias("Hospital", "hosp")
									.add(Restrictions.eq("OpdDate", new Date()))
									.add(Restrictions.eq("hosp.Id", hospitalId))
									.add(Restrictions.eq("hin.Id", visit.getHin().getId()))
									.add(Restrictions.eq("PharmacyLabStatus", "P").ignoreCase());
							
							 if(null !=crt && null !=crt.list() && crt.list().size()>0){
								 status=true;
							 }
							 if(!status){
							int maxQueueNoDepartWise=0;
							maxQueueNoDepartWise=getqueueNoForDepartment(departmentId,hospitalId,visit.getVisitSession().getId()); // changed by amit das on 07-06-2017
							pharmacyLabQueue=new PharmacyLabQueue();
							pharmacyLabQueue.setTokenNo(maxQueueNoDepartWise+1);
							
							MasDepartment masDepartment=new MasDepartment();
							masDepartment.setId(departmentId);
							pharmacyLabQueue.setDepartment(masDepartment);
							
							MasHospital masHospital=new MasHospital();
							masHospital.setId(hospitalId);
							pharmacyLabQueue.setHospital(masHospital);
							
							
							pharmacyLabQueue.setTotalHospitalVisit(visit.getTotalHospitalVisit());
							
							pharmacyLabQueue.setVisit(visit);
							
							pharmacyLabQueue.setStatus("P");
							
							pharmacyLabQueue.setPharmacyLabStatus(pharmacyLabStatus);
							
							SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");

				    	    Date now = new Date();

				    	    String opdTime = sdfTime.format(now);
				    	    
							pharmacyLabQueue.setOpdDate(now);
							pharmacyLabQueue.setOpdTime(opdTime);
							
							session.save(pharmacyLabQueue);
							 
							 }
							 return pharmacyLabQueue;
						}
						
			
			/** Method to generate the queue for Pharmacy and laboratory
			 * @param departmentId
			 * @param hospitalid
			 */
			private int getqueueNoForDepartment(int departmentId,int hospitalId, int visitSessionId){
				
				
					List<Integer> pharmacyLabQueue = new ArrayList<Integer>();
					long tokenNo = 0;
					MasHospital masHospital = null;
					Date date = new Date();
					String hospitalCode = null;
					Session session = (Session) getSession();
					
					// added by amit das on 07-06-2017
					List<Integer> tokenSequenceValue = new ArrayList<Integer>();
					String schName = "public"; // added by amit das on 08-05-2017
					
					masHospital =  (MasHospital)session.get(MasHospital.class, hospitalId);
					
					
					if(masHospital!=null)
						hospitalCode = masHospital.getHospitalCode();
					
					
					String tokenSequenceName="token_"+departmentId+"_"+hospitalCode+"_"+visitSessionId+"_seq";

					
					// added by amit das on 08-05-2017
					String qury = "SELECT COUNT(*) FROM information_schema.sequences WHERE sequence_schema='" + schName + "' AND sequence_name='" + tokenSequenceName + "'";
					
					Query q = session.createSQLQuery(qury);

			        BigInteger i = (BigInteger) q.list().get(0);
			        
			        if(i.intValue() == 1){
					qury = "SELECT nextval('"+tokenSequenceName+"')";
					q = session.createSQLQuery(qury);
					Iterator<BigInteger> iter;
						iter = Collections.<BigInteger>emptyList().iterator();
						iter = (Iterator<BigInteger>) q.list().iterator();
						tokenNo = iter.next().longValue();

						tokenNo = tokenNo-1;
						 
			        }else {
					
					
					
					

					
					qury = "select max(v.TokenNo) from PharmacyLabQueue v where v.OpdDate=:date and v.Department.Id=:dept and v.Hospital.Id=:h ";

					Query query = session.createQuery(qury);
					query.setParameter("date", new java.sql.Date(date.getTime()));
					query.setParameter("dept", departmentId);
					query.setParameter("h", hospitalId);
					//query.setParameter("appointmentType", "D");
					//query.setParameter("visitSessionId", visitSessionId);
					
					/* Visit v = (Visit) query.uniqueResult(); */
					pharmacyLabQueue = query.list();
					if (pharmacyLabQueue.get(0) != null) {
						tokenNo = pharmacyLabQueue.get(0);
					}
					
			        }
			
					
					return (int)tokenNo;
				
				
			}
			
		// Added by dhananjay On 03-01-2017
			
/** Method for order booking from opd main screen on check of  lab checkbox  
 * @param dhHeaderIds
 * @param consultationDateToInsert
 * @param consultationTime
 * @param hospitalId
 * @param hinId
 * @param departmentId
 * @param empId
 * @param visitObjToUpdate
 * @param users
 */
private DgOrderhd saveOrderBookingforLab(String  dhHeaderIds,Date consultationDateToInsert,String consultationTime,int hospitalId,
		int hinId,int departmentId,int empId,Visit visitObjToUpdate,Users users){
	
	Session session=(Session)getSession();
				String[] idArr=null;
				Integer pInvHdId=0;
				Integer pdgHdid=0;
				Integer pdgSamHdId=0;
				if(dhHeaderIds!=null && !dhHeaderIds.equals("")){
					idArr=dhHeaderIds.split("-");
					pdgHdid=Integer.parseInt(idArr[0]);
					pInvHdId=Integer.parseInt(idArr[1]);
					pdgSamHdId=Integer.parseInt(idArr[2]);
				}
				DgOrderhd dgOrderhd=null;
				PatientInvestigationHeader patientInvestigationHeader=null;
				if(pInvHdId!=null && !pInvHdId.equals(0) ){
					patientInvestigationHeader = (PatientInvestigationHeader) session.load(PatientInvestigationHeader.class, pInvHdId);
				}else{
					patientInvestigationHeader = new PatientInvestigationHeader();
				}
					dgOrderhd = new DgOrderhd();
				
			
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(consultationTime);
				MasHospital masHospital=new MasHospital();
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				Patient patient=new Patient();
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				
				MasDepartment masDepartment=new MasDepartment();
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				MasEmployee employee=new MasEmployee();
				if (empId > 0) {
					employee.setId(empId);
					dgOrderhd.setPrescribedBy(employee);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setVisit(visitObjToUpdate);
				
				// dgOrderhd.setCreatedby(userName);
				// dgOrderhd.setCreatedon(consultationDateToInsert);

				String orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLastChgBy(users);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				
				//dgOrderhd.setPharmacyLabQueue(pharmacyLabQueue);
				//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				
					session.save(dgOrderhd);
				
				return dgOrderhd;
			}

/** Method for order booking from opd main screen on check of  lab checkbox  
 * @param dhHeaderIds
 * @param consultationDateToInsert
 * @param consultationTime
 * @param hospitalId
 * @param hinId
 * @param departmentId
 * @param empId
 * @param visitObjToUpdate
 * @param users
 */
private void saveOrderBookingforRadio(String  dhHeaderIds,Date consultationDateToInsert,String consultationTime,int hospitalId,
		int hinId,int departmentId,int empId,Visit visitObjToUpdate,Users users,int radiologyDepartmentId,PharmacyLabQueue pharmacyLabQueue){
	
	Session session=(Session)getSession();
				String[] idArr=null;
				Integer pInvHdId=0;
				Integer pdgHdid=0;
				Integer pdgSamHdId=0;
				if(dhHeaderIds!=null && !dhHeaderIds.equals("")){
					idArr=dhHeaderIds.split("-");
					pdgHdid=Integer.parseInt(idArr[0]);
					pInvHdId=Integer.parseInt(idArr[1]);
					pdgSamHdId=Integer.parseInt(idArr[2]);
				}
				DgOrderhd dgOrderhd=null;
				PatientInvestigationHeader patientInvestigationHeader=null;
				if(pInvHdId!=null && !pInvHdId.equals(0) ){
					patientInvestigationHeader = (PatientInvestigationHeader) session.load(PatientInvestigationHeader.class, pInvHdId);
				}else{
					patientInvestigationHeader = new PatientInvestigationHeader();
				}
					dgOrderhd = new DgOrderhd();
				
			
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(consultationTime);
				MasHospital masHospital=new MasHospital();
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				Patient patient=new Patient();
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				
				MasDepartment masDepartment=new MasDepartment();
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				MasEmployee employee=new MasEmployee();
				if (empId > 0) {
					employee.setId(empId);
					dgOrderhd.setPrescribedBy(employee);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setVisit(visitObjToUpdate);
				
				// dgOrderhd.setCreatedby(userName);
				// dgOrderhd.setCreatedon(consultationDateToInsert);

				String orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLastChgBy(users);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				//dgOrderhd.setPharmacyLabQueue(pharmacyLabQueue);
				session.save(dgOrderhd);
					
				/*DgSampleCollectionHeader collHeader=null;
					collHeader = new DgSampleCollectionHeader();
			
					if (hinId != 0) {
						Patient patient1 = new Patient();
						patient1.setId(hinId);
						collHeader.setHin(patient1);
					}
					MasDepartment department = new MasDepartment();
					department.setId(radiologyDepartmentId);
					collHeader.setDepartment(department);
					collHeader.setHospital(new MasHospital(hospitalId));
					collHeader.setOrder(dgOrderhd);
					collHeader.setDiagnosisDate(consultationDateToInsert);
					collHeader.setDiagnosisTime(consultationTime);
					collHeader.setOrderStatus("P");
					collHeader.setSampleValidationDate(consultationDateToInsert);
					collHeader.setSampleValidationTime(consultationTime);
					collHeader.setLastChgBy(users);
					collHeader.setLastChgDate(consultationDateToInsert);
					collHeader.setLastChgTime(consultationTime);
					session.save(collHeader);*/
					
				
				
			}
			
/** Method for order booking from opd main screen on check of  lab checkbox  
 * @param dhHeaderIds
 * @param consultationDateToInsert
 * @param consultationTime
 * @param hospitalId
 * @param hinId
 * @param departmentId
 * @param empId
 * @param visitObjToUpdate
 * @param users
 */
private void saveOrderBookingforLabAndRadio(String  dhHeaderIds,Date consultationDateToInsert,String consultationTime,int hospitalId,
		int hinId,int departmentId,int empId,Visit visitObjToUpdate,Users users,
		int labDepartmentId,int radiologyDepartmentId,String LabStatus){
	PharmacyLabQueue pharmacyLabQueue=null;
	Session session=(Session)getSession();
				String[] idArr=null;
				Integer pInvHdId=0;
				Integer pdgHdid=0;
				Integer pdgSamHdId=0;
				if(dhHeaderIds!=null && !dhHeaderIds.equals("")){
					idArr=dhHeaderIds.split("-");
					pdgHdid=Integer.parseInt(idArr[0]);
					pInvHdId=Integer.parseInt(idArr[1]);
					pdgSamHdId=Integer.parseInt(idArr[2]);
				}
				DgOrderhd dgOrderhd=null;
				PatientInvestigationHeader patientInvestigationHeader=null;
				if(pInvHdId!=null && !pInvHdId.equals(0) ){
					patientInvestigationHeader = (PatientInvestigationHeader) session.load(PatientInvestigationHeader.class, pInvHdId);
				}else{
					patientInvestigationHeader = new PatientInvestigationHeader();
				}
					dgOrderhd = new DgOrderhd();
				
			
				dgOrderhd.setOrderDate(consultationDateToInsert);
				dgOrderhd.setOrderTime(consultationTime);
				MasHospital masHospital=new MasHospital();
				masHospital.setId(hospitalId);
				dgOrderhd.setHospital(masHospital);
				Patient patient=new Patient();
				patient.setId(hinId);
				dgOrderhd.setHin(patient);
				
				MasDepartment masDepartment=new MasDepartment();
				masDepartment.setId(departmentId);
				dgOrderhd.setDepartment(masDepartment);
				MasEmployee employee=new MasEmployee();
				if (empId > 0) {
					employee.setId(empId);
					dgOrderhd.setPrescribedBy(employee);
				}

				dgOrderhd.setPatientType("OP");
				dgOrderhd.setTestType("Regular");
				dgOrderhd.setVisit(visitObjToUpdate);
				
				// dgOrderhd.setCreatedby(userName);
				// dgOrderhd.setCreatedon(consultationDateToInsert);

				String orderSeqNo = generateOrderNumber();
				dgOrderhd.setOrderNo(orderSeqNo);
				dgOrderhd.setOrderStatus("P");
				dgOrderhd.setLastChgBy(users);
				dgOrderhd.setLastChgDate(consultationDateToInsert);
				dgOrderhd.setLastChgTime(consultationTime);
				//dgOrderhd.setInvestigationRequestionNo(patientInvestigationHeader);
				//dgOrderhd.setPharmacyLabQueue(pharmacyLabQueue);
				session.save(dgOrderhd);
				if(LabStatus.equalsIgnoreCase("L")){
				 saveQueueNoForPharmacyAndLab(labDepartmentId,hospitalId,visitObjToUpdate, LabStatus,dgOrderhd);

				}
				
				boolean radioStatus=false;
				if(LabStatus.equalsIgnoreCase("R")){
					radioStatus=true;
					
				}
				if(LabStatus.equalsIgnoreCase("B")){
					radioStatus=true;
					
					}
				
				if(radioStatus){
				DgSampleCollectionHeader collHeader=null;
					collHeader = new DgSampleCollectionHeader();
			
					if (hinId != 0) {
						Patient patient1 = new Patient();
						patient1.setId(hinId);
						collHeader.setHin(patient1);
					}
					MasDepartment department = new MasDepartment();
					department.setId(radiologyDepartmentId);
					collHeader.setDepartment(department);
					collHeader.setHospital(new MasHospital(hospitalId));
					collHeader.setOrder(dgOrderhd);
					collHeader.setDiagnosisDate(consultationDateToInsert);
					collHeader.setDiagnosisTime(consultationTime);
					collHeader.setOrderStatus("P");
					collHeader.setSampleValidationDate(consultationDateToInsert);
					collHeader.setSampleValidationTime(consultationTime);
					collHeader.setLastChgBy(users);
					collHeader.setLastChgDate(consultationDateToInsert);
					
					if(LabStatus.equalsIgnoreCase("R")){
						radioStatus=true;
						LabStatus="R";
						pharmacyLabQueue=saveQueueNoForRadio(radiologyDepartmentId,hospitalId,visitObjToUpdate,LabStatus);
					}
					if(LabStatus.equalsIgnoreCase("B")){
						radioStatus=true;
						LabStatus="L";
						saveQueueNoForPharmacyAndLab(labDepartmentId,hospitalId,visitObjToUpdate, LabStatus,dgOrderhd);
						
						LabStatus="R";
						pharmacyLabQueue=saveQueueNoForRadio(radiologyDepartmentId,hospitalId,visitObjToUpdate,LabStatus);
						}
					collHeader.setPharmacyLabQueueId(pharmacyLabQueue);
					collHeader.setLastChgTime(consultationTime);
					session.save(collHeader);
				}
				
				
			}
			

			@Override
			public String getHospitalName(Integer hospitalId) {
				Session session = (Session) getSession();
				String hospitalName = "";
				List<MasHospital> list = session.createCriteria(MasHospital.class)
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.eq("Id", hospitalId)).list();

				if (list.size() > 0) {
					MasHospital obj = (MasHospital) list.get(0);
					hospitalName = obj.getHospitalName();
				}
				return hospitalName;
			}

			@Override
			public Map<String, Object> showPatientLabResult(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				List<Integer>maxDgOrderhdList = new ArrayList<Integer>();
				List<DgOrderhd>dgOrderhdList = new ArrayList<DgOrderhd>();
				List<DgOrderdt>dgOrderDtList = new ArrayList<DgOrderdt>();
				Session session = (Session) getSession();
				 logger.info("hinId=="+box.getInt("hinId"));
				int dgorderHdId = 0;
				dgOrderhdList = session.createCriteria(DgOrderhd.class)
								.createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", box.getInt("hinId"))).list();
				
				maxDgOrderhdList = session.createCriteria(DgOrderhd.class).createAlias("Hin", "hin").createAlias("Visit", "v")
						.add(Restrictions.eq("hin.Id", box.getInt("hinId"))).setProjection(Projections.max("Id")).list();
				
				String orderNo="";
				if(maxDgOrderhdList.size()>0){
					if(maxDgOrderhdList.get(0) != null && maxDgOrderhdList.get(0) != 0){
					dgorderHdId =maxDgOrderhdList.get(0);
					dgOrderDtList = session.createCriteria(DgOrderdt.class).createAlias("Orderhd", "header")
							.add(Restrictions.eq("header.Id", maxDgOrderhdList.get(0))).list();
					}
				}
				int OrderId=0;
				if(dgOrderDtList.size()>0){
					orderNo=dgOrderDtList.get(0).getOrderhd().getOrderNo();
					OrderId=dgOrderDtList.get(0).getOrderhd().getId();
				}
				
				 logger.info("orderNo  "+dgOrderDtList.size());
				map.put("orderNo",orderNo);
				map.put("OrderId",OrderId);
				
				 logger.info("dgOrderDtList==="+dgOrderDtList.size());
				map.put("dgOrderDtList",dgOrderDtList);
				map.put("dgOrderhdList",dgOrderhdList);
				map.put("dgorderHdId",dgorderHdId);
				return map;
			}

			@Override
			public Map<String, Object> displayLabTest(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				List<DgOrderdt>dgOrderDtList = new ArrayList<DgOrderdt>();
				List<DgOrderhd>dgOrderhdList = new ArrayList<DgOrderhd>();
				Session session = (Session) getSession();
				dgOrderhdList = session.createCriteria(DgOrderhd.class)
						.createAlias("Hin", "hin").add(Restrictions.eq("hin.Id", box.getInt("hinId"))).list();
				dgOrderDtList = session.createCriteria(DgOrderdt.class).createAlias("Orderhd", "header").createAlias("header.Visit", "v")
						.add(Restrictions.eq("v.Id", box.getInt("visitId"))).list();
				if(dgOrderDtList.size()>0){
					int dgorderHdId = 0;
					for(DgOrderdt dgOrderdt : dgOrderDtList){
					 dgorderHdId = dgOrderdt.getOrderhd().getId();
					}
					map.put("dgorderHdId",dgorderHdId);
				}
				map.put("dgOrderDtList", dgOrderDtList);
				map.put("dgOrderhdList", dgOrderhdList);
				return map;
			}
			
			
			//added by Amit Das on 19-01-2017
			@Override
			public Map<String, Object> checkForExistingDisplayName(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				List<TokenDisplayIp> tokenDisplayList = null;
				Session session = (Session) getSession();
				String displayName = box.get("displayName");
				
				if(displayName!=null)
				tokenDisplayList = session.createCriteria(TokenDisplayIp.class).add(Restrictions.eq("DisplayName", displayName).ignoreCase())
								.list();
				
				if(tokenDisplayList!=null && tokenDisplayList.size()>0)
				map.put("tokenDisplayList",tokenDisplayList);
				
				
				return map;
			}
			
			//added by Amit Das on 19-01-2017
			@Override
			public Map<String, Object> getServiceCenters(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				List<MasInstituteDepartment> hospitalDepartmentList = null;
				Session session = (Session) getSession();
				int departMentTypeId = box.getInt("departmentTypeId");
				int hospitalId = box.getInt("hospitalId");
				
				hospitalDepartmentList = session.createCriteria(MasInstituteDepartment.class)
						.createAlias("Department", "d")
						.createAlias("Institute", "i")
						.createAlias("d.DepartmentType", "dt")
						.add(Restrictions.eq("i.Id", hospitalId))
						.add(Restrictions.eq("dt.Id", departMentTypeId))
						.addOrder(Order.asc("d.DepartmentName"))
						.list();
				
				if(hospitalDepartmentList!=null && hospitalDepartmentList.size()>0)
				map.put("hospitalDepartmentList",hospitalDepartmentList);
				
				
				return map;
			}
			
			
			//added by Amit Das on 19-01-2017
			@Override
			public Map<String, Object> getDisplayDepartmentType(Map<String,Object> mapForDS) {
				Map<String, Object> map = new HashMap<String, Object>();
				List<TokenDisplayIp> tokenDisplayIps = null;
				List<MasInstituteDepartment> instituteDepartmentList = null;
				Session session = null;
				String departmentTypeName = null;
				String displayName = null; //added by amit das on 19-01-2017
				try {
					session = (Session) getSession();
					
					
					if(mapForDS.get("displayName")!=null){
						displayName = (String)mapForDS.get("displayName");  //added by amit das on 19-01-2017
						tokenDisplayIps = session.createCriteria(TokenDisplayIp.class)
								.add(Restrictions.eq("DisplayName", displayName)).list(); //added by amit das on 19-01-2017
						if(tokenDisplayIps!=null && tokenDisplayIps.size()>0){
							TokenDisplayIp tokenDisplayIp = tokenDisplayIps.get(0);
							instituteDepartmentList  = session.createCriteria(MasInstituteDepartment.class)
									.createAlias("TokenDisplayIp", "t")
									.add(Restrictions.eq("t.Id", tokenDisplayIp.getId()))
									.list();
							
							map.put("hospitalId", tokenDisplayIp.getHospital().getId());
							
							if(tokenDisplayIp.getHospital().getHospitalType()!=null){
								map.put("hospitalTypeId", tokenDisplayIp.getHospital().getHospitalType().getId());	
							}
							
							int departmentId=0;
							if(instituteDepartmentList!=null && instituteDepartmentList.size()>0){
								departmentTypeName =	instituteDepartmentList.get(0).getDepartment().getDepartmentType().getDepartmentTypeName();
								departmentId =	instituteDepartmentList.get(0).getDepartment().getId();
								map.put("departmentId", departmentId);
							}
						}
					}
					
					map.put("departmentTypeName", departmentTypeName);
																
				} catch (Exception e) {
					e.printStackTrace();
				}
				return map;
			}

			@Override
			public Map<String, Object> getQueueListParticularDoctor(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				// List<QueueManagment> queueList = new ArrayList<QueueManagment>();
				// commented by amit das on 05-07-2017
				List<Object[]> queueList = new ArrayList<Object[]>();
				List<Integer> oldTokenList = new ArrayList<Integer>(); // added by amit das on 23-08-2017 for showing last tokenno
				// added by amit das on 05-07-2017
				
				Session session= (Session) getSession();
				int hospitalId=0,deptId=0,doctId=0;
				Date currentDate=new Date();
				if (box.get("hospitalId") != null) {
					hospitalId = box.getInt("hospitalId");
				}
				if(box.get("doctId")!=null){
					doctId =box.getInt("doctId");
				}
				if(box.get("deptId")!=null){
					deptId =box.getInt("deptId");
				}
				
				Criteria criteria =	session.createCriteria(QueueManagment.class)
						.createAlias("Hospital", "h")
									.createAlias("Department", "d")
									.createAlias("Visit", "v")
									.createAlias("Docotor", "doc")
									.setProjection(Projections.projectionList().add(Projections.property("TokenNo")).add(Projections.property("TokenStatus")))  // added by amit das on 05-07-2017
									.add(Restrictions.eq("h.Id", hospitalId))
									.add(Restrictions.eq("doc.Id", doctId))
									.add(Restrictions.eq("d.Id", deptId))
									.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
									// .add(Restrictions.eq("LsCngDate", currentDate)); // commented by amit das on 24-08-2017
									.add(Restrictions.eq("LastChgDate", currentDate)); // added by amit das on 24-08-2017
				
				queueList=criteria.list();
				
				// added by amit das on 23-08-2017 for showing last tokenno
				 criteria =	session.createCriteria(QueueManagment.class)
							.createAlias("Hospital", "h")
										.createAlias("Department", "d")
										.createAlias("Visit", "v")
										.createAlias("Docotor", "doc")
										.setProjection(Projections.projectionList().add(Projections.property("TokenNo")))  // added by amit das on 05-07-2017
										.add(Restrictions.eq("h.Id", hospitalId))
										.add(Restrictions.eq("doc.Id", doctId))
										.add(Restrictions.eq("d.Id", deptId))
										.add(Restrictions.eq("TokenStatus", "c").ignoreCase())
										// .add(Restrictions.eq("LsCngDate", currentDate)); // commented by amit das on 24-08-2017
										.add(Restrictions.eq("LastChgDate", currentDate)) // added by amit das on 24-08-2017
										.addOrder(Order.desc("OpVisitTime"))
										.setMaxResults(1);
					
					oldTokenList=criteria.list(); // added by amit das on 23-08-2017 for showing last tokenno
				
				map.put("queueList", queueList);
				map.put("oldTokenList", oldTokenList); // added by amit das on 23-08-2017 for showing last tokenno
				return map;
			}
			
			@Override
			public Map<String, Object> getTokenXML(Map<String, Object> mapForDS) {
				Map<String, Object> map = null;
				List<QueueManagment> queueList =new ArrayList<QueueManagment>();
				List<QueueManagment> currentqueueList = new ArrayList<QueueManagment>();
				List<QueueManagmentDetails> queueManagmentDetaillist =new ArrayList<QueueManagmentDetails>();
				List<TokenDisplayIp> tokenDisplayIps = null;
				List<Object[]> departmentList = null;
				List<Integer> userIdList = null;
				QueueManagmentDetails queueManagmentDetails = null;
				MasDepartment masDepartment = null;
				MasHospital masHospital = null;
				Session session = null;
				Criteria criteria = null;
				int userId = 0;
				int deptId = 0;
				int hospitalId=0;
				Date currentDate = null;
				String flag = null;
				String displayName = null;
				int docId=0;
				
				try {
					session = (Session) getSession();
					currentDate = new Date();
					map = new HashMap<String, Object>();
					
					if (mapForDS.get("docId") != null) {
						docId = (Integer) mapForDS.get("docId");
					}
					
					if (mapForDS.get("deptId") != null) {
						deptId = (Integer) mapForDS.get("deptId");
					}
					if(mapForDS.get("hospitalId") != null){
						hospitalId = (Integer) mapForDS.get("hospitalId");	
					}
					// added by amit das on 04-11-2016
					if (mapForDS.get("displayName") != null) {
						displayName = (String) mapForDS.get("displayName");
					}
					// added by amit das on 04-11-2016
					if (mapForDS.get("flag") != null) {
						flag = (String) mapForDS.get("flag");
					}
					List<Users> userList =new ArrayList<Users>();
					userList=session.createCriteria(Users.class)
							.createAlias("Hospital", "h")
							.createAlias("Department", "d")
							.createAlias("d.DepartmentType", "dt")
							.add(Restrictions.eq("h.Id", hospitalId))
							.add(Restrictions.eq("LoginStatus", "y").ignoreCase())
							.add(Restrictions.eq("LastSuccessfulLoginDate", currentDate))
					.addOrder(Order.asc("LastSuccessfulLoginTime")).list();
					
				if(userList.size()>0){
					userIdList =new ArrayList<Integer>();
					for(Users user:userList){
						userIdList.add(user.getEmployee().getId());
					}
					
					currentqueueList =session.createCriteria(QueueManagment.class)
					.createAlias("Hospital", "h")
					.createAlias("Department", "d")
					.createAlias("Visit", "v")
					.createAlias("Docotor", "docId")
					.add(Restrictions.eq("h.Id", hospitalId))
				 	.add(Restrictions.eq("TokenStatus", "y").ignoreCase())
							.add(Restrictions.eq("LsCngDate", currentDate))
							.add(Restrictions.in("docId.Id", userIdList))
							.addOrder(Order.desc("OpVisitTime"))
							.addOrder(Order.asc("d.Id")).list();
							//.setFirstResult(0)
							//.setMaxResults(1)
				
				}
				 logger.info("currentqueueList == "+currentqueueList.size());		

					map.put("currentqueueList", currentqueueList);
					map.put("userList", userList);
					
				
				
				} catch (Exception e) {
					e.printStackTrace();
				}
				return map;
					}
			
			
			@Override
			public Map<String, Object> bookCounterForDoctor(Box box) {
				Map<String, Object> map = new HashMap<>();
				Session session= (Session) getSession();
				int userId=box.getInt("userId");
				int counterId = box.getInt("counterId");
				MasServiceCentreCounter masServiceCentreCounter = null;
				List<MasServiceCentreCounter> userBookedServiceCentreCounterList = null;
				Users user = null;
				Transaction tx = session.beginTransaction();
				
				try {
					userBookedServiceCentreCounterList = session.createCriteria(Users.class).createAlias("CurrentCounter", "cc")
							.setProjection(Projections.property("CurrentCounter")).add(Restrictions.isNotNull("CurrentCounter")).add(Restrictions.eq("Id", userId)).add(Restrictions.ne("cc.Id", counterId)).list();
					user =	(Users) session.get(Users.class, userId);

					List<MasServiceCentreCounter> alreadyBookedCounter =  session.createCriteria(Users.class).createAlias("CurrentCounter", "cc").add(Restrictions.ne("Id", userId)).add(Restrictions.eq("cc.Id", counterId))
							.add(Restrictions.eq("cc.Status", "b"))
							.setProjection(Projections.property("CurrentCounter")).list();

					if(alreadyBookedCounter.size()==0){
						masServiceCentreCounter =	(MasServiceCentreCounter) session.get(MasServiceCentreCounter.class, counterId);
						masServiceCentreCounter.setStatus("b");
						session.update(masServiceCentreCounter);
						if(userBookedServiceCentreCounterList!=null){
							for(MasServiceCentreCounter userBookedServiceCentreCounter : userBookedServiceCentreCounterList){
								userBookedServiceCentreCounter.setStatus("y");
								session.update(userBookedServiceCentreCounter);
							}
						}

						user.setCurrentCounter(masServiceCentreCounter);


						session.update(user);
					}else{
						map.put("msg", "Counter "+alreadyBookedCounter.get(0).getCounterNo()+" is booked by another Doctor.\n Please select different counter.");
					}
					session.flush();
					tx.commit();

				} catch (Exception e){
			    	if(tx!=null)
			    		tx.rollback();
			    	e.printStackTrace();
			    }
				return map;
			}

			//Added by Arbind on 25-04-2017
			public String getAntenatalCardVisitStatus(int visitId) {
				Map<String, Object> map = new HashMap<String, Object>();
				String status = "";
				Session session=(Session)getSession();
				List<OpdAntenatalCard>antList=new ArrayList<OpdAntenatalCard>();
				antList=session.createCriteria(OpdAntenatalCard.class).add(Restrictions.eq("Visit.Id", visitId)).list();
				if(antList.size() > 0) {
					status = "y";
				}
				return status;
			}

			@Override
			public Map<String, Object> getANCSummary(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				List<OpdAntenatalCard>antenatalCardList=new ArrayList<OpdAntenatalCard>();
				List<OpdAntenatalCardMedicalHistory>comorbidityList = new ArrayList<OpdAntenatalCardMedicalHistory>();
				List<OpdAntenatalCardTrimester>trimsterList = new ArrayList<OpdAntenatalCardTrimester>();
				List<Integer>maxVisitIdList = new ArrayList<Integer>();
				Session session=(Session)getSession();
				maxVisitIdList = session.createCriteria(OpdAntenatalCard.class).add(Restrictions.eq("Hin.Id", box.getInt("hinId")))
						.createAlias("Visit", "visit").setProjection(Projections.max("visit.Id")).list();
				if(maxVisitIdList.size()>0){
				int maxVisitId = maxVisitIdList.get(0);
				antenatalCardList = session.createCriteria(OpdAntenatalCard.class).add(Restrictions.eq("Visit.Id", maxVisitId)).list();
				comorbidityList = session.createCriteria(OpdAntenatalCardMedicalHistory.class).add(Restrictions.eq("Visit.Id", maxVisitId)).list();
				trimsterList = session.createCriteria(OpdAntenatalCardTrimester.class).add(Restrictions.eq("Visit.Id", maxVisitId)).list();
				
				}
				map.put("antenatalCardList", antenatalCardList);
				map.put("comorbidityList", comorbidityList);
				map.put("trimsterList", trimsterList);
				return map;
			}
			
			//Added by Arbind on 19-05-2017
			public Map<String, Object> saveOralMedicine(Map<String, Object> mapForDs, Box box, HttpServletRequest request) {
				Map<String, Object> map = new HashMap<String, Object>();
				MasSpecialtyTemplate masSpecialtyTemplate = null;
				Transaction tnx=null;
				try{
					Session session = (Session) getSession();
					tnx=session.beginTransaction();
					HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					
					OpdOralMedicineDental opdOralMedicineDental = new OpdOralMedicineDental();
					
					
					int hdb = 1;
					String symptoms = "";
					int dentalId = 0;
					Integer hinId=0;
					Integer departmentId=0;
					Integer visitId=0;
					Integer hospitalId=0;
					Integer specialtyId=0;
					Integer userId=0;
					String templateName = "";
					
					if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
						hinId = (Integer) mapForDs.get("hinId");
					}
					if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
						visitId = (Integer) mapForDs.get("visitId");
					}
					if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
						departmentId = (Integer) mapForDs.get("departmentId");
					}
					if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
						hospitalId = (Integer) mapForDs.get("hospitalId");
					}
					if(map.get("userId")!=null){
						userId=(Integer)  map.get("userId");	
					}
					
					if(map.get("specialtyId")!=null){
						specialtyId=(Integer)  map.get("specialtyId");	
					}
					if(map.get("templateName")!=null){
						templateName=(String)  map.get("templateName");	
					}
					
					
					
					Patient patient = new Patient();
					patient.setId(hinId);
					opdOralMedicineDental.setHin(patient);
					
					Visit visit = new Visit();
					visit.setId(visitId);
					opdOralMedicineDental.setVisit(visit);
					
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					opdOralMedicineDental.setDepartment(masDepartment);
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					opdOralMedicineDental.setHospital(masHospital);
					
					if(null != box.getString("presentingComplaints") && !box.getString("presentingComplaints").equals(""))
						opdOralMedicineDental.setPresentingComplaints(box.getString("presentingComplaints"));
					if(null != box.getString("historyOfPresentingComplaint") && !box.getString("historyOfPresentingComplaint").equals(""))
						opdOralMedicineDental.setHistoryPresentingComplaint(box.getString("historyOfPresentingComplaint"));
					if(null != box.getString("pastMedicalDentalHistory") && !box.getString("pastMedicalDentalHistory").equals(""))
						opdOralMedicineDental.setPastMedicalDentalHistory(box.getString("pastMedicalDentalHistory"));
					
					if(null != box.getString("familyHistoryOne") && !box.getString("familyHistoryOne").equals(""))
						opdOralMedicineDental.setFamilyHistory(box.getString("familyHistoryOne"));
					
					if(null != box.getString("personalSocialHistory") && !box.getString("personalSocialHistory").equals(""))
						opdOralMedicineDental.setPersonalSocialHistory(box.getString("personalSocialHistory"));
					if(null != box.getString("dietaryHabits") && !box.getString("dietaryHabits").equals(""))
						opdOralMedicineDental.setDietaryHabbits(box.getString("dietaryHabits"));
					if(null != box.getString("brushingHabits") && !box.getString("brushingHabits").equals(""))
						opdOralMedicineDental.setBrushingHabbits(box.getString("brushingHabits"));
					if(null != box.getString("SmokingCurrently") && !box.getString("SmokingCurrently").equals(""))
						opdOralMedicineDental.setSmokingCurrently(box.getString("SmokingCurrently"));

					if(null != box.getString("SmokingCurrently") && box.getString("SmokingCurrently").equals("Yes"))
						opdOralMedicineDental.setSmokingCurrently("Yes");
					else
						opdOralMedicineDental.setSmokingCurrently("No");
					if(null != box.getString("Smokeless") && box.getString("Smokeless").equals("Yes"))
						opdOralMedicineDental.setSmokelessCurrently("Yes");
					else
						opdOralMedicineDental.setSmokelessCurrently("No");
					if(null != box.getString("Alcohol") && box.getString("Alcohol").equals("Yes"))
						opdOralMedicineDental.setAlcoholCurrently("Yes");
					else
						opdOralMedicineDental.setAlcoholCurrently("No");
					if(null != box.getString("Smokingdaily") && box.getString("Smokingdaily").equals("Yes"))
						opdOralMedicineDental.setSmokingDailyPast("Yes");
					else
						opdOralMedicineDental.setSmokingDailyPast("No");
					if(null != box.getString("Smokelessdaily") && box.getString("Smokelessdaily").equals("Yes"))
						opdOralMedicineDental.setSmokelessDailyPast("Yes");
					else
						opdOralMedicineDental.setSmokelessDailyPast("No");
					if(null != box.getString("Alcoholdaily") && box.getString("Alcoholdaily").equals("Yes"))
						opdOralMedicineDental.setAlcoholDailyPast("Yes");
					else
						opdOralMedicineDental.setAlcoholDailyPast("No");
					if(null != box.getString("Smokingfrequency") && box.getString("Smokingfrequency").equals("Yes"))
						opdOralMedicineDental.setSmokingFrequencyPast("Yes");
					else
						opdOralMedicineDental.setSmokingFrequencyPast("No");
					if(null != box.getString("Smokelessfrequency") && box.getString("Smokelessfrequency").equals("Yes"))
						opdOralMedicineDental.setSmokelessFrequencyPast("Yes");
					else
						opdOralMedicineDental.setSmokelessFrequencyPast("No");
					if(null != box.getString("Alcoholfrequency") && box.getString("Alcoholfrequency").equals("Yes"))
						opdOralMedicineDental.setAlcoholFrequencyPast("Yes");
					else
						opdOralMedicineDental.setAlcoholFrequencyPast("No");

					if(null != box.getString("SmokingDailyStartAge") && !box.getString("SmokingDailyStartAge").equals(""))
						opdOralMedicineDental.setSmokingDailyStartAge(box.getInt("SmokingDailyStartAge"));
					if(null != box.getString("SmokelessDailyStartAge") && !box.getString("SmokelessDailyStartAge").equals(""))
						opdOralMedicineDental.setSmokelessDailyStartAge(box.getInt("SmokelessDailyStartAge"));
					if(null != box.getString("AlcoholDailyStartAge") && !box.getString("AlcoholDailyStartAge").equals(""))
						opdOralMedicineDental.setAlcoholDailyStartAge(box.getInt("AlcoholDailyStartAge"));
					if(null != box.getString("SmokingDailyStartYear") && !box.getString("SmokingDailyStartYear").equals(""))
						opdOralMedicineDental.setSmokingDailyStartYear(box.getInt("SmokingDailyStartYear"));
					if(null != box.getString("SmokelessDailyStartYear") && !box.getString("SmokelessDailyStartYear").equals(""))
						opdOralMedicineDental.setSmokelessDailyStartYear(box.getInt("SmokelessDailyStartYear"));
					if(null != box.getString("AlcoholDailyStartYear") && !box.getString("AlcoholDailyStartYear").equals(""))
						opdOralMedicineDental.setAlcoholDailyStartYear(box.getInt("AlcoholDailyStartYear"));
					if(null != box.getString("SmokingDailyProduct") && !box.getString("SmokingDailyProduct").equals(""))
						opdOralMedicineDental.setSmokingDailyProduct(box.getInt("SmokingDailyProduct"));
					if(null != box.getString("SmokelessDailyProduct") && !box.getString("SmokelessDailyProduct").equals(""))
						opdOralMedicineDental.setSmokelessDailyProduct(box.getInt("SmokelessDailyProduct"));
					if(null != box.getString("AlcoholDailyProduct") && !box.getString("AlcoholDailyProduct").equals(""))
						opdOralMedicineDental.setAlcoholDailyProduct(box.getInt("AlcoholDailyProduct"));
					if(null != box.getString("SmokingAfterWakeup") && !box.getString("SmokingAfterWakeup").equals(""))
						opdOralMedicineDental.setSmokingAfterWakeup(box.getInt("SmokingAfterWakeup"));
					if(null != box.getString("SmokelessAfterWakeup") && !box.getString("SmokelessAfterWakeup").equals(""))
						opdOralMedicineDental.setSmokelessAfterWakeup(box.getInt("SmokelessAfterWakeup"));
					if(null != box.getString("AlcoholAfterWakeup") && !box.getString("AlcoholAfterWakeup").equals(""))
						opdOralMedicineDental.setAlcoholAfterWakeup(box.getInt("AlcoholAfterWakeup"));
					if(null != box.getString("SmokingLessDailyStartAge") && !box.getString("SmokingLessDailyStartAge").equals(""))
						opdOralMedicineDental.setSmokingLessDailyStartAge(box.getInt("SmokingLessDailyStartAge"));
					if(null != box.getString("SmokelessLessDailyStartAge") && !box.getString("SmokelessLessDailyStartAge").equals(""))
						opdOralMedicineDental.setSmokelessLessDailyStartAge(box.getInt("SmokelessLessDailyStartAge"));
					if(null != box.getString("AlcoholLessDailyStartAge") && !box.getString("AlcoholLessDailyStartAge").equals(""))
						opdOralMedicineDental.setAlcoholLessDailyStartAge(box.getInt("AlcoholLessDailyStartAge"));
					if(null != box.getString("SmokingLessDailyStartYear") && !box.getString("SmokingLessDailyStartYear").equals(""))
						opdOralMedicineDental.setSmokingLessDailyStartYear(box.getInt("SmokingLessDailyStartYear"));
					if(null != box.getString("SmokelessLessDailyStartYear") && !box.getString("SmokelessLessDailyStartYear").equals(""))
						opdOralMedicineDental.setSmokelessLessDailyStartYear(box.getInt("SmokelessLessDailyStartYear"));
					if(null != box.getString("AlcoholLessDailyStartYear") && !box.getString("AlcoholLessDailyStartYear").equals(""))
						opdOralMedicineDental.setAlcoholLessDailyStartYear(box.getInt("AlcoholLessDailyStartYear"));
					if(null != box.getString("SmokingLessDailyProduct") && !box.getString("SmokingLessDailyProduct").equals(""))
						opdOralMedicineDental.setSmokingLessDailyProduct(box.getInt("SmokingLessDailyProduct"));
					if(null != box.getString("SmokelessLessDailyProduct") && !box.getString("SmokelessLessDailyProduct").equals(""))
						opdOralMedicineDental.setSmokelessLessDailyProduct(box.getInt("SmokelessLessDailyProduct"));
					if(null != box.getString("AlcoholLessDailyProduct") && !box.getString("AlcoholLessDailyProduct").equals(""))
						opdOralMedicineDental.setAlcoholLessDailyProduct(box.getInt("AlcoholLessDailyProduct"));
					if(null != box.getString("SmokingDailyStartAgeFormer") && !box.getString("SmokingDailyStartAgeFormer").equals(""))
						opdOralMedicineDental.setSmokingDailyStartAgeFormer(box.getInt("SmokingDailyStartAgeFormer"));
					if(null != box.getString("SmokelessDailyStartAgeFormer") && !box.getString("SmokelessDailyStartAgeFormer").equals(""))
						opdOralMedicineDental.setSmokelessDailyStartAgeFormer(box.getInt("SmokelessDailyStartAgeFormer"));
					if(null != box.getString("AlcoholDailyStartAgeFormer") && !box.getString("AlcoholDailyStartAgeFormer").equals(""))
						opdOralMedicineDental.setAlcoholDailyStartAgeFormer(box.getInt("AlcoholDailyStartAgeFormer"));
					if(null != box.getString("SmokingDailyStartYearFormer") && !box.getString("SmokingDailyStartYearFormer").equals(""))
						opdOralMedicineDental.setSmokingDailyStartYearFormer(box.getInt("SmokingDailyStartYearFormer"));
					if(null != box.getString("SmokelessDailyStartYearFormer") && !box.getString("SmokelessDailyStartYearFormer").equals(""))
						opdOralMedicineDental.setSmokelessDailyStartYearFormer(box.getInt("SmokelessDailyStartYearFormer"));
					if(null != box.getString("AlcoholDailyStartYearFormer") && !box.getString("AlcoholDailyStartYearFormer").equals(""))
						opdOralMedicineDental.setAlcoholDailyStartYearFormer(box.getInt("AlcoholDailyStartYearFormer"));
					if(null != box.getString("SmokingStopYearFormer") && !box.getString("SmokingStopYearFormer").equals(""))
						opdOralMedicineDental.setSmokingStopYearFormer(box.getInt("SmokingStopYearFormer"));
					if(null != box.getString("SmokelessStopYearFormer") && !box.getString("SmokelessStopYearFormer").equals(""))
						opdOralMedicineDental.setSmokelessStopYearFormer(box.getInt("SmokelessStopYearFormer"));
					if(null != box.getString("AlcoholStopYearFormer") && !box.getString("AlcoholStopYearFormer").equals(""))
						opdOralMedicineDental.setAlcoholStopYearFormer(box.getInt("AlcoholStopYearFormer"));

					if(null != box.getString("SmokingVisitedDoctorFromer") && box.getString("SmokingVisitedDoctorFromer").equals("Yes"))
						opdOralMedicineDental.setSmokingVisitedDoctorFromer("Yes");
					else
						opdOralMedicineDental.setSmokingVisitedDoctorFromer("No");
					if(null != box.getString("SmokelessVisitedDoctorFromer") && box.getString("SmokelessVisitedDoctorFromer").equals("Yes"))
						opdOralMedicineDental.setSmokelessVisitedDoctorFromer("Yes");
					else
						opdOralMedicineDental.setSmokelessVisitedDoctorFromer("No");
					if(null != box.getString("AlcoholVisitedDoctorFromer") && box.getString("AlcoholVisitedDoctorFromer").equals("Yes"))
						opdOralMedicineDental.setAlcoholVisitedDoctorFromer("Yes");
					else
						opdOralMedicineDental.setAlcoholVisitedDoctorFromer("No");

					if(null != box.getString("SmokingNoVisitedDoctorFromer") && !box.getString("SmokingNoVisitedDoctorFromer").equals(""))
						opdOralMedicineDental.setSmokingNoVisitedDoctorFromer(box.getInt("SmokingNoVisitedDoctorFromer"));
					if(null != box.getString("SmokelessNoVisitedDoctorFromer") && !box.getString("SmokelessNoVisitedDoctorFromer").equals(""))
						opdOralMedicineDental.setSmokelessNoVisitedDoctorFromer(box.getInt("SmokelessNoVisitedDoctorFromer"));
					if(null != box.getString("AlcoholNoVisitedDoctorFromer") && !box.getString("AlcoholNoVisitedDoctorFromer").equals(""))
						opdOralMedicineDental.setAlcoholNoVisitedDoctorFromer(box.getInt("AlcoholNoVisitedDoctorFromer"));

					if(null != box.getString("docotr") && box.getString("docotr").equals("Yes"))
						opdOralMedicineDental.setSmokingDoctorAskFromer("Yes");
					else
						opdOralMedicineDental.setSmokingDoctorAskFromer("No");
					if(null != box.getString("docotrr") && box.getString("docotrr").equals("Yes"))
						opdOralMedicineDental.setSmokelessDoctorAskFromer("Yes");
					else
						opdOralMedicineDental.setSmokelessDoctorAskFromer("No");
					if(null != box.getString("docotrrr") && box.getString("docotrrr").equals("Yes"))
						opdOralMedicineDental.setAlcoholDoctorAskFromer("Yes");
					else
						opdOralMedicineDental.setAlcoholDoctorAskFromer("No");
					if(null != box.getString("visit") && box.getString("visit").equals("Yes"))
						opdOralMedicineDental.setSmokingQuitTobacooFromer("Yes");
					else
						opdOralMedicineDental.setSmokingQuitTobacooFromer("No");
					if(null != box.getString("visitt") && box.getString("visitt").equals("Yes"))
						opdOralMedicineDental.setSmokelessQuitTobacooFromer("Yes");
					else
						opdOralMedicineDental.setSmokelessQuitTobacooFromer("No");
					if(null != box.getString("visittt") && box.getString("visittt").equals("Yes"))
						opdOralMedicineDental.setAlcoholQuitTobacooFromer("Yes");
					else
						opdOralMedicineDental.setAlcoholQuitTobacooFromer("No");
					if(null != box.getString("any") && box.getString("any").equals("Yes"))
						opdOralMedicineDental.setSmokingQuitAnyFromer("Yes");
					else
						opdOralMedicineDental.setSmokingQuitAnyFromer("No");
					if(null != box.getString("anyy") && box.getString("anyy").equals("Yes"))
						opdOralMedicineDental.setSmokelessQuitAnyFromer("Yes");
					else
						opdOralMedicineDental.setSmokelessQuitAnyFromer("No");
					if(null != box.getString("anyyy") && box.getString("anyyy").equals("Yes"))
						opdOralMedicineDental.setAlcoholQuitAnyFromer("Yes");
					else
						opdOralMedicineDental.setAlcoholQuitAnyFromer("No");
					if(null != box.getString("cessation") && box.getString("cessation").equals("Yes"))
						opdOralMedicineDental.setSmokingTryStop("Yes");
					else
						opdOralMedicineDental.setSmokingTryStop("No");
					if(null != box.getString("cessationn") && box.getString("cessationn").equals("Yes"))
						opdOralMedicineDental.setSmokelessTryStop("Yes");
					else
						opdOralMedicineDental.setSmokelessTryStop("No");
					if(null != box.getString("cessationnn") && box.getString("cessationnn").equals("Yes"))
						opdOralMedicineDental.setAlcoholTryStop("Yes");
					else
						opdOralMedicineDental.setAlcoholTryStop("No");

					if(null != box.getString("SmokingQuitPeriod") && !box.getString("SmokingQuitPeriod").equals(""))
						opdOralMedicineDental.setSmokingQuitPeriod(box.getInt("SmokingQuitPeriod"));
					if(null != box.getString("SmokelessQuitPeriod") && !box.getString("SmokelessQuitPeriod").equals(""))
						opdOralMedicineDental.setSmokelessQuitPeriod(box.getInt("SmokelessQuitPeriod"));
					if(null != box.getString("AlcoholQuitPeriod") && !box.getString("AlcoholQuitPeriod").equals(""))
						opdOralMedicineDental.setAlcoholQuitPeriod(box.getInt("AlcoholQuitPeriod"));

					if(null != box.getString("SmokingTryStopUsing") && box.getString("SmokingTryStopUsing").equals("Yes"))
						opdOralMedicineDental.setSmokingTryStopUsing("Yes");
					else
						opdOralMedicineDental.setSmokingTryStopUsing("No");
					if(null != box.getString("SmokelessTryStopUsing") && box.getString("SmokelessTryStopUsing").equals("Yes"))
						opdOralMedicineDental.setSmokelessTryStopUsing("Yes");
					else
						opdOralMedicineDental.setSmokelessTryStopUsing("No");
					if(null != box.getString("AlcoholTryStopUsing") && box.getString("AlcoholTryStopUsing").equals("Yes"))
						opdOralMedicineDental.setAlcoholTryStopUsing("Yes");
					else
						opdOralMedicineDental.setAlcoholTryStopUsing("No");

					if(null != box.getString("SmokingTryQuitting") && !box.getString("SmokingTryQuitting").equals(""))
						opdOralMedicineDental.setSmokingTryQuitting(box.getString("SmokingTryQuitting"));
					if(null != box.getString("SmokelessTryQuitting") && !box.getString("SmokelessTryQuitting").equals(""))
						opdOralMedicineDental.setSmokelessTryQuitting(box.getString("SmokelessTryQuitting"));
					if(null != box.getString("AlcoholTryQuitting") && !box.getString("AlcoholTryQuitting").equals(""))
						opdOralMedicineDental.setAlcoholTryQuitting(box.getString("AlcoholTryQuitting"));

					if(null != box.getString("Appetite") && !box.getString("Appetite").equals(""))
						opdOralMedicineDental.setAppetite(box.getString("Appetite"));
					if(null != box.getString("WeightLossGain") && !box.getString("WeightLossGain").equals(""))
						opdOralMedicineDental.setWeightLossGain(box.getInt("WeightLossGain"));
					if(null != box.getString("Indigestion") && box.getString("Indigestion").equals("Regular"))
						opdOralMedicineDental.setIndigestion("Regular");
					if(null != box.getString("Indigestion") && box.getString("Indigestion").equals("Irregular"))
						opdOralMedicineDental.setIndigestion("Irregular");
					if(null != box.getString("Bowels") && box.getString("Bowels").equals("Yes"))
						opdOralMedicineDental.setBowels("Yes");
					else
						opdOralMedicineDental.setBowels("No");
					if(null != box.getString("chestPain") && box.getString("chestPain").equals("Yes"))
						opdOralMedicineDental.setChestPain("Yes");
					else
						opdOralMedicineDental.setChestPain("No");
					if(null != box.getString("Angina") && box.getString("Angina").equals("Yes"))
						opdOralMedicineDental.setAngina("Yes");
					else
						opdOralMedicineDental.setAngina("No");
					if(null != box.getString("Dyspnoea") && box.getString("Dyspnoea").equals("Yes"))
						opdOralMedicineDental.setDyspnoea("Yes");
					else
						opdOralMedicineDental.setDyspnoea("No");
					if(null != box.getString("Orthopnoea") && box.getString("Orthopnoea").equals("Yes"))
						opdOralMedicineDental.setOrthopnoea("Yes");
					else
						opdOralMedicineDental.setOrthopnoea("No");
					if(null != box.getString("OedemaFeet") && box.getString("OedemaFeet").equals("Yes"))
						opdOralMedicineDental.setOedemaFeet("Yes");
					else
						opdOralMedicineDental.setOedemaFeet("No");
					if(null != box.getString("Cough") && box.getString("Cough").equals("Yes"))
						opdOralMedicineDental.setCough("Yes");
					else
						opdOralMedicineDental.setCough("No");
					if(null != box.getString("Haemoptysis") && box.getString("Haemoptysis").equals("Yes"))
						opdOralMedicineDental.setHaemoptysis("Yes");
					else
						opdOralMedicineDental.setHaemoptysis("No");
					if(null != box.getString("Sputum") && box.getString("Sputum").equals("Yes"))
						opdOralMedicineDental.setSputum("Yes");
					else
						opdOralMedicineDental.setSputum("No");
					if(null != box.getString("SputumColour") && !box.getString("SputumColour").equals(""))
						opdOralMedicineDental.setSputumColour(box.getString("SputumColour"));
					if(null != box.getString("SputumQuantity") && !box.getString("SputumQuantity").equals(""))
						opdOralMedicineDental.setSputumQuantity(box.getString("SputumQuantity"));
					if(null != box.getString("SputumSmell") && !box.getString("SputumSmell").equals(""))
						opdOralMedicineDental.setSputumSmell(box.getString("SputumSmell"));
					if(null != box.getString("Vision") && box.getString("Vision").equals("Normal"))
						opdOralMedicineDental.setVision("Normal");
					if(null != box.getString("Vision") && box.getString("Vision").equals("Abnormal"))
						opdOralMedicineDental.setVision("Abnormal");
					if(null != box.getString("Hearing") && box.getString("Hearing").equals("Normal"))
						opdOralMedicineDental.setHearing("Normal");
					if(null != box.getString("Hearing") && box.getString("Hearing").equals("Abnormal"))
						opdOralMedicineDental.setHearing("Abnormal");
					if(null != box.getString("Micturition") && box.getString("Micturition").equals("Increased"))
						opdOralMedicineDental.setMicturition("Increased");
					if(null != box.getString("Micturition") && box.getString("Micturition").equals("Normal"))
						opdOralMedicineDental.setMicturition("Normal");
					if(null != box.getString("Micturition") && box.getString("Micturition").equals("Decreased"))
						opdOralMedicineDental.setMicturition("Decreased");
					if(null != box.getString("MicturitionFrequency") && !box.getString("MicturitionFrequency").equals(""))
						opdOralMedicineDental.setMicturitionFrequency(box.getInt("MicturitionFrequency"));
					if(null != box.getString("Dysuria") && box.getString("Dysuria").equals("Yes"))
						opdOralMedicineDental.setDysuria("Yes");
					else
						opdOralMedicineDental.setDysuria("No");
					if(null != box.getString("Haematuria") && box.getString("Haematuria").equals("Yes"))
						opdOralMedicineDental.setHaematuria("Yes");
					else
						opdOralMedicineDental.setHaematuria("No");
					if(null != box.getString("Nocturia") && box.getString("Nocturia").equals("Yes"))
						opdOralMedicineDental.setNocturia("Yes");
					else
						opdOralMedicineDental.setNocturia("No");
					if(null != box.getString("Period") && !box.getString("Period").equals(""))
						opdOralMedicineDental.setPeriod(box.getInt("Period"));
					if(null != box.getString("Menarche") && !box.getString("Menarche").equals(""))
						opdOralMedicineDental.setMenarche(box.getInt("Menarche"));
					if(null != box.getString("FlowDays") && !box.getString("FlowDays").equals(""))
						opdOralMedicineDental.setFlowDays(box.getInt("FlowDays"));
					if(null != box.getString("Menopause") && !box.getString("Menopause").equals(""))
						opdOralMedicineDental.setMenopause(box.getInt("Menopause"));
					if(null != box.getString("Hoarseness") && box.getString("Hoarseness").equals("Yes"))
						opdOralMedicineDental.setHoarseness("Yes");
					else
						opdOralMedicineDental.setHoarseness("No");
					if(null != box.getString("SoreThroat") && box.getString("SoreThroat").equals("Yes"))
						opdOralMedicineDental.setSoreThroat("Yes");
					else
						opdOralMedicineDental.setSoreThroat("No");
					if(null != box.getString("Epistaxis") && box.getString("Epistaxis").equals("Yes"))
						opdOralMedicineDental.setEpistaxis("Yes");
					else
						opdOralMedicineDental.setEpistaxis("No");
					if(null != box.getString("FrequentColds") && box.getString("FrequentColds").equals("Yes"))
						opdOralMedicineDental.setFrequentColds("Yes");
					else
						opdOralMedicineDental.setFrequentColds("No");
					if(null != box.getString("Headache") && box.getString("Headache").equals("Yes"))
						opdOralMedicineDental.setHeadache("Yes");
					else
						opdOralMedicineDental.setHeadache("No");
					if(null != box.getString("Vomiting") && box.getString("Vomiting").equals("Yes"))
						opdOralMedicineDental.setVomiting("Yes");
					else
						opdOralMedicineDental.setVomiting("No");
					if(null != box.getString("Fits") && box.getString("Fits").equals("Yes"))
						opdOralMedicineDental.setFits("Yes");
					else
						opdOralMedicineDental.setFits("No");

					if(null != box.getString("Developmental") && !box.getString("Developmental").equals(""))
						opdOralMedicineDental.setGenDevelopmental(box.getString("Developmental"));
					if(null != box.getString("Nutritional") && !box.getString("Nutritional").equals(""))
						opdOralMedicineDental.setGenNutritional(box.getString("Nutritional"));
					if(null != box.getString("Head") && !box.getString("Head").equals(""))
						opdOralMedicineDental.setGenHead(box.getString("Head"));
					if(null != box.getString("Skull") && !box.getString("Skull").equals(""))
						opdOralMedicineDental.setGenSkull(box.getString("Skull"));
					if(null != box.getString("Eyes") && !box.getString("Eyes").equals(""))
						opdOralMedicineDental.setGenEyes(box.getString("Eyes"));
					if(null != box.getString("Ears") && !box.getString("Ears").equals(""))
						opdOralMedicineDental.setGenEars(box.getString("Ears"));
					if(null != box.getString("Nose") && !box.getString("Nose").equals(""))
						opdOralMedicineDental.setGenNose(box.getString("Nose"));
					if(null != box.getString("Skin") && !box.getString("Skin").equals(""))
						opdOralMedicineDental.setGenSkin(box.getString("Skin"));
					if(null != box.getString("Hair") && !box.getString("Hair").equals(""))
						opdOralMedicineDental.setGenHair(box.getString("Hair"));
					if(null != box.getString("Nails") && !box.getString("Nails").equals(""))
						opdOralMedicineDental.setGenNails(box.getString("Nails"));
					if(null != box.getString("LymphNodes") && !box.getString("LymphNodes").equals(""))
						opdOralMedicineDental.setGenLymphNodes(box.getString("LymphNodes"));
					if(null != box.getString("OralHead") && !box.getString("OralHead").equals(""))
						opdOralMedicineDental.setOralHead(box.getString("OralHead"));
					if(null != box.getString("OralFacialForm") && !box.getString("OralFacialForm").equals(""))
						opdOralMedicineDental.setOralFacialForm(box.getString("OralFacialForm"));
					if(null != box.getString("OralHair") && !box.getString("OralHair").equals(""))
						opdOralMedicineDental.setOralHair(box.getString("OralHair"));
					if(null != box.getString("OralSkin") && !box.getString("OralSkin").equals(""))
						opdOralMedicineDental.setOralSkin(box.getString("OralSkin"));
					if(null != box.getString("OralEyes") && !box.getString("OralEyes").equals(""))
						opdOralMedicineDental.setOralEyes(box.getString("OralEyes"));
					if(null != box.getString("OralEar") && !box.getString("OralEar").equals(""))
						opdOralMedicineDental.setOralEar(box.getString("OralEar"));
					if(null != box.getString("OralNose") && !box.getString("OralNose").equals(""))
						opdOralMedicineDental.setOralNose(box.getString("OralNose"));
					if(null != box.getString("OralThroat") && !box.getString("OralThroat").equals(""))
						opdOralMedicineDental.setOralThroat(box.getString("OralThroat"));
					if(null != box.getString("salivaryGlands") && box.getString("salivaryGlands").equals("Palpable"))
						opdOralMedicineDental.setOralSalivaryGlands("Palpable");
					if(null != box.getString("salivaryGlands") && box.getString("salivaryGlands").equals("NonPalpable"))
						opdOralMedicineDental.setOralSalivaryGlands("NonPalpable");
					if(null != box.getString("PalpableTxt") && !box.getString("PalpableTxt").equals(""))
						opdOralMedicineDental.setOralSalivaryGlandsPalpable(box.getString("PalpableTxt"));
					if(null != box.getString("OralCranialNervesExamination") && !box.getString("OralCranialNervesExamination").equals(""))
						opdOralMedicineDental.setOralCranialNervesExamination(box.getString("OralCranialNervesExamination"));
					if(null != box.getString("OralNeck") && !box.getString("OralNeck").equals(""))
						opdOralMedicineDental.setOralNeck(box.getString("OralNeck"));
					if(null != box.getString("OralTmj") && !box.getString("OralTmj").equals(""))
						opdOralMedicineDental.setOralTmj(box.getString("OralTmj"));

					if(null != box.getString("SubmentalSubmandibular") && box.getString("SubmentalSubmandibular").equals("Yes"))
						opdOralMedicineDental.setSubmentalSubmandibular("Yes");
					else
						opdOralMedicineDental.setSubmentalSubmandibular("No");
					if(null != box.getString("HighJugular") && box.getString("HighJugular").equals("Yes"))
						opdOralMedicineDental.setHighJugular("Yes");
					else
						opdOralMedicineDental.setHighJugular("No");
					if(null != box.getString("MidJugular") && box.getString("MidJugular").equals("Yes"))
						opdOralMedicineDental.setMidJugular("Yes");
					else
						opdOralMedicineDental.setMidJugular("No");
					if(null != box.getString("LowJugular") && box.getString("LowJugular").equals("Yes"))
						opdOralMedicineDental.setLowJugular("Yes");
					else
						opdOralMedicineDental.setLowJugular("No");
					if(null != box.getString("PosteriorJugular") && box.getString("PosteriorJugular").equals("Yes"))
						opdOralMedicineDental.setPosteriorJugular("Yes");
					else
						opdOralMedicineDental.setPosteriorJugular("No");
					if(null != box.getString("TracheoOesophageal") && box.getString("TracheoOesophageal").equals("Yes"))
						opdOralMedicineDental.setTracheoOesophageal("Yes");
					else
						opdOralMedicineDental.setTracheoOesophageal("No");
					if(null != box.getString("SuperiorMediastinal") && box.getString("SuperiorMediastinal").equals("Yes"))
						opdOralMedicineDental.setSuperiorMediastinal("Yes");
					else
						opdOralMedicineDental.setSuperiorMediastinal("No");
					if(null != box.getString("MouthOpening") && !box.getString("MouthOpening").equals(""))
						opdOralMedicineDental.setMouthOpening(box.getString("MouthOpening"));
					if(null != box.getString("OralHygieneStatus") && box.getString("OralHygieneStatus").equals("Poor"))
						opdOralMedicineDental.setOralHygieneStatus("Poor");
					if(null != box.getString("OralHygieneStatus") && box.getString("OralHygieneStatus").equals("Fair"))
						opdOralMedicineDental.setOralHygieneStatus("Fair");
					if(null != box.getString("OralHygieneStatus") && box.getString("OralHygieneStatus").equals("No"))
						opdOralMedicineDental.setOralHygieneStatus("No");
					if(null != box.getString("DentitionStatus") && !box.getString("DentitionStatus").equals(""))
						opdOralMedicineDental.setDentitionStatus(box.getString("DentitionStatus"));
					
					
					// for reading the checkBox value
					if(null != box.getString("data18") && !box.getString("data18").equals(""))
						opdOralMedicineDental.setTeeth18("y");
					else
						opdOralMedicineDental.setTeeth18("n");
					// for dropdown value
					String[] teeth_18_valueList=null;
					StringBuilder  tempTeeth_18_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
						teeth_18_valueList=request.getParameterValues("teeth_18_value");
						for(String teeth18Value:teeth_18_valueList){
							tempTeeth_18_value.append(teeth18Value);
							tempTeeth_18_value.append(",");
						}
						opdOralMedicineDental.setTeeth18Value(tempTeeth_18_value.toString());
					}
					
					if(null != box.getString("data17") && !box.getString("data17").equals(""))
						opdOralMedicineDental.setTeeth17("y");
					else
						opdOralMedicineDental.setTeeth17("n");
					
					String[] teeth_17_valueList=null;
					StringBuilder  tempTeeth_17_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
						teeth_17_valueList=request.getParameterValues("teeth_17_value");
						for(String teeth17Value:teeth_17_valueList){
							tempTeeth_17_value.append(teeth17Value);
							tempTeeth_17_value.append(",");
						}
						opdOralMedicineDental.setTeeth17Value(tempTeeth_17_value.toString());
					}
					
					if(null != box.getString("data16") && !box.getString("data16").equals(""))
						opdOralMedicineDental.setTeeth16("y");
					else
						opdOralMedicineDental.setTeeth16("n");
					
					String[] teeth_16_valueList=null;
					StringBuilder  tempTeeth_16_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
						teeth_16_valueList=request.getParameterValues("teeth_16_value");
						for(String teeth16Value:teeth_16_valueList){
							tempTeeth_16_value.append(teeth16Value);
							tempTeeth_16_value.append(",");
						}
						opdOralMedicineDental.setTeeth16Value(tempTeeth_16_value.toString());
					}
					
					if(null != box.getString("data15") && !box.getString("data15").equals(""))
						opdOralMedicineDental.setTeeth15("y");
					else
						opdOralMedicineDental.setTeeth15("n");

					String[] teeth_15_valueList=null;
					StringBuilder  tempTeeth_15_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
						teeth_15_valueList = request.getParameterValues("teeth_15_value");
						for(String teeth15Value : teeth_15_valueList){
							tempTeeth_15_value.append(teeth15Value);
							tempTeeth_15_value.append(",");
						}
						opdOralMedicineDental.setTeeth15Value(tempTeeth_15_value.toString());
					}
					
					if(null != box.getString("data14") && !box.getString("data14").equals(""))
						opdOralMedicineDental.setTeeth14("y");
					else
						opdOralMedicineDental.setTeeth14("n");
					
					String[] teeth_14_valueList=null;
					StringBuilder  tempTeeth_14_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
						teeth_14_valueList=request.getParameterValues("teeth_14_value");
						for(String teeth14Value:teeth_14_valueList){
							tempTeeth_14_value.append(teeth14Value);
							tempTeeth_14_value.append(",");
						}
						opdOralMedicineDental.setTeeth14Value(tempTeeth_14_value.toString());
					}
					
					if(null != box.getString("data13") && !box.getString("data13").equals(""))
						opdOralMedicineDental.setTeeth13("y");
					else
						opdOralMedicineDental.setTeeth13("n");
					
					String[] teeth_13_valueList=null;
					StringBuilder  tempTeeth_13_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
						teeth_13_valueList=request.getParameterValues("teeth_13_value");
						for(String teeth13Value:teeth_13_valueList){
							tempTeeth_13_value.append(teeth13Value);
							tempTeeth_13_value.append(",");
						}
						opdOralMedicineDental.setTeeth13Value(tempTeeth_13_value.toString());
					}
					
					if(null != box.getString("data12") && !box.getString("data12").equals(""))
						opdOralMedicineDental.setTeeth12("y");
					else
						opdOralMedicineDental.setTeeth12("n");
					
					String[] teeth_12_valueList=null;
					StringBuilder  tempTeeth_12_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
						teeth_12_valueList=request.getParameterValues("teeth_12_value");
						for(String teeth12Value:teeth_12_valueList){
							tempTeeth_12_value.append(teeth12Value);
							tempTeeth_12_value.append(",");
						}
						opdOralMedicineDental.setTeeth12Value(tempTeeth_12_value.toString());
					}
					
					if(null != box.getString("data11") && !box.getString("data11").equals(""))
						opdOralMedicineDental.setTeeth11("y");
					else
						opdOralMedicineDental.setTeeth11("n");
					
					String[] teeth_11_valueList=null;
					StringBuilder  tempTeeth_11_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
						teeth_11_valueList=request.getParameterValues("teeth_11_value");
						for(String teeth11Value:teeth_11_valueList){
							tempTeeth_11_value.append(teeth11Value);
							tempTeeth_11_value.append(",");
						}
						opdOralMedicineDental.setTeeth11Value(tempTeeth_11_value.toString());
					}
					
					if(null != box.getString("data21") && !box.getString("data21").equals(""))
						opdOralMedicineDental.setTeeth21("y");
					else
						opdOralMedicineDental.setTeeth21("n");
					
					String[] teeth_21_valueList=null;
					StringBuilder  tempTeeth_21_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
						teeth_21_valueList=request.getParameterValues("teeth_21_value");
						for(String teeth21Value:teeth_21_valueList){
							tempTeeth_21_value.append(teeth21Value);
							tempTeeth_21_value.append(",");
						}
						opdOralMedicineDental.setTeeth21Value(tempTeeth_21_value.toString());
					}
					
					
					if(null != box.getString("data22") && !box.getString("data22").equals(""))
						opdOralMedicineDental.setTeeth22("y");
					else
						opdOralMedicineDental.setTeeth22("n");
					
					String[] teeth_22_valueList=null;
					StringBuilder  tempTeeth_22_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
						teeth_22_valueList=request.getParameterValues("teeth_22_value");
						for(String teeth22Value:teeth_22_valueList){
							tempTeeth_22_value.append(teeth22Value);
							tempTeeth_22_value.append(",");
						}
						opdOralMedicineDental.setTeeth22Value(tempTeeth_22_value.toString());
					}
					
					if(null != box.getString("data23") && !box.getString("data23").equals(""))
						opdOralMedicineDental.setTeeth23("y");
					else
						opdOralMedicineDental.setTeeth23("n");
					
					String[] teeth_23_valueList=null;
					StringBuilder  tempTeeth_23_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
						teeth_23_valueList=request.getParameterValues("teeth_23_value");
						for(String teeth23Value:teeth_23_valueList){
							tempTeeth_23_value.append(teeth23Value);
							tempTeeth_23_value.append(",");
						}
						opdOralMedicineDental.setTeeth23Value(tempTeeth_23_value.toString());
					}
					
					
					if(null != box.getString("data24") && !box.getString("data24").equals(""))
						opdOralMedicineDental.setTeeth24("y");
					else
						opdOralMedicineDental.setTeeth24("n");
					
					String[] teeth_24_valueList=null;
					StringBuilder  tempTeeth_24_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
						teeth_24_valueList=request.getParameterValues("teeth_24_value");
						for(String teeth24Value:teeth_24_valueList){
							tempTeeth_24_value.append(teeth24Value);
							tempTeeth_24_value.append(",");
						}
						opdOralMedicineDental.setTeeth24Value(tempTeeth_24_value.toString());
					}
					
					if(null != box.getString("data25") && !box.getString("data25").equals(""))
						opdOralMedicineDental.setTeeth25("y");
					else
						opdOralMedicineDental.setTeeth25("n");
					
					String[] teeth_25_valueList=null;
					StringBuilder  tempTeeth_25_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
						teeth_25_valueList=request.getParameterValues("teeth_25_value");
						for(String teeth25Value:teeth_25_valueList){
							tempTeeth_25_value.append(teeth25Value);
							tempTeeth_25_value.append(",");
						}
						opdOralMedicineDental.setTeeth25Value(tempTeeth_25_value.toString());
					}
					
					if(null != box.getString("data26") && !box.getString("data26").equals(""))
						opdOralMedicineDental.setTeeth26("y");
					else
						opdOralMedicineDental.setTeeth26("n");
					
					String[] teeth_26_valueList=null;
					StringBuilder  tempTeeth_26_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
						teeth_26_valueList=request.getParameterValues("teeth_26_value");
						for(String teeth26Value:teeth_26_valueList){
							tempTeeth_26_value.append(teeth26Value);
							tempTeeth_26_value.append(",");
						}
						opdOralMedicineDental.setTeeth26Value(tempTeeth_26_value.toString());
					}
					
					if(null != box.getString("data27") && !box.getString("data27").equals(""))
						opdOralMedicineDental.setTeeth27("y");
					else
						opdOralMedicineDental.setTeeth27("n");
					
					String[] teeth_27_valueList=null;
					StringBuilder  tempTeeth_27_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
						teeth_27_valueList=request.getParameterValues("teeth_27_value");
						for(String teeth27Value:teeth_27_valueList){
							tempTeeth_27_value.append(teeth27Value);
							tempTeeth_27_value.append(",");
						}
						opdOralMedicineDental.setTeeth27Value(tempTeeth_27_value.toString());
					}
					
					if(null != box.getString("data28") && !box.getString("data28").equals(""))
						opdOralMedicineDental.setTeeth28("y");
					else
						opdOralMedicineDental.setTeeth28("n");
					
					String[] teeth_28_valueList=null;
					StringBuilder  tempTeeth_28_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
						teeth_28_valueList=request.getParameterValues("teeth_28_value");
						for(String teeth28Value:teeth_28_valueList){
							tempTeeth_28_value.append(teeth28Value);
							tempTeeth_28_value.append(",");
						}
						opdOralMedicineDental.setTeeth28Value(tempTeeth_28_value.toString());
					}
					
					if(null != box.getString("data48") && !box.getString("data48").equals(""))
						opdOralMedicineDental.setTeeth48("y");
					else
						opdOralMedicineDental.setTeeth48("n");
					
					// for dropdown value
					String[] teeth_48_valueList=null;
					StringBuilder  tempTeeth_48_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
						teeth_48_valueList=request.getParameterValues("teeth_48_value");
						for(String teeth48Value:teeth_48_valueList){
							tempTeeth_48_value.append(teeth48Value);
							tempTeeth_48_value.append(",");
						}
						opdOralMedicineDental.setTeeth48Value(tempTeeth_48_value.toString());
					}
					
					if(null != box.getString("data47") && !box.getString("data47").equals(""))
						opdOralMedicineDental.setTeeth47("y");
					else
						opdOralMedicineDental.setTeeth47("n");
					
					String[] teeth_47_valueList=null;
					StringBuilder  tempTeeth_47_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
						teeth_47_valueList=request.getParameterValues("teeth_47_value");
						for(String teeth47Value:teeth_47_valueList){
							tempTeeth_47_value.append(teeth47Value);
							tempTeeth_47_value.append(",");
						}
						opdOralMedicineDental.setTeeth47Value(tempTeeth_47_value.toString());
					}
					
					if(null != box.getString("data46") && !box.getString("data46").equals(""))
						opdOralMedicineDental.setTeeth46("y");
					else
						opdOralMedicineDental.setTeeth46("n");
					
					String[] teeth_46_valueList=null;
					StringBuilder  tempTeeth_46_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
						teeth_46_valueList=request.getParameterValues("teeth_46_value");
						for(String teeth46Value:teeth_46_valueList){
							tempTeeth_46_value.append(teeth46Value);
							tempTeeth_46_value.append(",");
						}
						opdOralMedicineDental.setTeeth46Value(tempTeeth_46_value.toString());
					}
					
					if(null != box.getString("data45") && !box.getString("data45").equals(""))
						opdOralMedicineDental.setTeeth45("y");
					else
						opdOralMedicineDental.setTeeth45("n");

					String[] teeth_45_valueList=null;
					StringBuilder  tempTeeth_45_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
						teeth_45_valueList = request.getParameterValues("teeth_45_value");
						for(String teeth45Value : teeth_45_valueList){
							tempTeeth_45_value.append(teeth45Value);
							tempTeeth_45_value.append(",");
						}
						opdOralMedicineDental.setTeeth45Value(tempTeeth_45_value.toString());
					}
					
					if(null != box.getString("data44") && !box.getString("data44").equals(""))
						opdOralMedicineDental.setTeeth44("y");
					else
						opdOralMedicineDental.setTeeth44("n");
					
					String[] teeth_44_valueList=null;
					StringBuilder  tempTeeth_44_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
						teeth_44_valueList=request.getParameterValues("teeth_44_value");
						for(String teeth44Value:teeth_44_valueList){
							tempTeeth_44_value.append(teeth44Value);
							tempTeeth_44_value.append(",");
						}
						opdOralMedicineDental.setTeeth44Value(tempTeeth_44_value.toString());
					}
					
					if(null != box.getString("data43") && !box.getString("data43").equals(""))
						opdOralMedicineDental.setTeeth43("y");
					else
						opdOralMedicineDental.setTeeth43("n");
					
					String[] teeth_43_valueList=null;
					StringBuilder  tempTeeth_43_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
						teeth_43_valueList=request.getParameterValues("teeth_43_value");
						for(String teeth43Value:teeth_43_valueList){
							tempTeeth_43_value.append(teeth43Value);
							tempTeeth_43_value.append(",");
						}
						opdOralMedicineDental.setTeeth43Value(tempTeeth_43_value.toString());
					}
					
					if(null != box.getString("data42") && !box.getString("data42").equals(""))
						opdOralMedicineDental.setTeeth42("y");
					else
						opdOralMedicineDental.setTeeth42("n");
					
					String[] teeth_42_valueList=null;
					StringBuilder  tempTeeth_42_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
						teeth_42_valueList=request.getParameterValues("teeth_42_value");
						for(String teeth42Value:teeth_42_valueList){
							tempTeeth_42_value.append(teeth42Value);
							tempTeeth_42_value.append(",");
						}
						opdOralMedicineDental.setTeeth42Value(tempTeeth_42_value.toString());
					}
					
					if(null != box.getString("data41") && !box.getString("data41").equals(""))
						opdOralMedicineDental.setTeeth41("y");
					else
						opdOralMedicineDental.setTeeth41("n");
					
					String[] teeth_41_valueList=null;
					StringBuilder  tempTeeth_41_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
						teeth_41_valueList=request.getParameterValues("teeth_41_value");
						for(String teeth41Value:teeth_41_valueList){
							tempTeeth_41_value.append(teeth41Value);
							tempTeeth_41_value.append(",");
						}
						opdOralMedicineDental.setTeeth41Value(tempTeeth_41_value.toString());
					}
					
					if(null != box.getString("data31") && !box.getString("data31").equals(""))
						opdOralMedicineDental.setTeeth31("y");
					else
						opdOralMedicineDental.setTeeth31("n");
					
					String[] teeth_31_valueList=null;
					StringBuilder  tempTeeth_31_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
						teeth_31_valueList=request.getParameterValues("teeth_31_value");
						for(String teeth31Value:teeth_31_valueList){
							tempTeeth_31_value.append(teeth31Value);
							tempTeeth_31_value.append(",");
						}
						opdOralMedicineDental.setTeeth31Value(tempTeeth_31_value.toString());
					}
					
					
					if(null != box.getString("data32") && !box.getString("data32").equals(""))
						opdOralMedicineDental.setTeeth32("y");
					else
						opdOralMedicineDental.setTeeth32("n");
					
					String[] teeth_32_valueList=null;
					StringBuilder  tempTeeth_32_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
						teeth_32_valueList=request.getParameterValues("teeth_32_value");
						for(String teeth32Value:teeth_32_valueList){
							tempTeeth_32_value.append(teeth32Value);
							tempTeeth_32_value.append(",");
						}
						opdOralMedicineDental.setTeeth32Value(tempTeeth_32_value.toString());
					}
					
					if(null != box.getString("data33") && !box.getString("data33").equals(""))
						opdOralMedicineDental.setTeeth33("y");
					else
						opdOralMedicineDental.setTeeth33("n");
					
					String[] teeth_33_valueList=null;
					StringBuilder  tempTeeth_33_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
						teeth_33_valueList=request.getParameterValues("teeth_33_value");
						for(String teeth33Value:teeth_33_valueList){
							tempTeeth_33_value.append(teeth33Value);
							tempTeeth_33_value.append(",");
						}
						opdOralMedicineDental.setTeeth33Value(tempTeeth_33_value.toString());
					}
					
					
					if(null != box.getString("data34") && !box.getString("data34").equals(""))
						opdOralMedicineDental.setTeeth34("y");
					else
						opdOralMedicineDental.setTeeth34("n");
					
					String[] teeth_34_valueList=null;
					StringBuilder  tempTeeth_34_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
						teeth_34_valueList=request.getParameterValues("teeth_34_value");
						for(String teeth34Value:teeth_34_valueList){
							tempTeeth_34_value.append(teeth34Value);
							tempTeeth_34_value.append(",");
						}
						opdOralMedicineDental.setTeeth34Value(tempTeeth_34_value.toString());
					}
					
					if(null != box.getString("data35") && !box.getString("data35").equals(""))
						opdOralMedicineDental.setTeeth35("y");
					else
						opdOralMedicineDental.setTeeth35("n");
					
					String[] teeth_35_valueList=null;
					StringBuilder  tempTeeth_35_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
						teeth_35_valueList=request.getParameterValues("teeth_35_value");
						for(String teeth35Value:teeth_35_valueList){
							tempTeeth_35_value.append(teeth35Value);
							tempTeeth_35_value.append(",");
						}
						opdOralMedicineDental.setTeeth35Value(tempTeeth_35_value.toString());
					}
					
					if(null != box.getString("data36") && !box.getString("data36").equals(""))
						opdOralMedicineDental.setTeeth36("y");
					else
						opdOralMedicineDental.setTeeth36("n");
					
					String[] teeth_36_valueList=null;
					StringBuilder  tempTeeth_36_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
						teeth_36_valueList=request.getParameterValues("teeth_36_value");
						for(String teeth36Value:teeth_36_valueList){
							tempTeeth_36_value.append(teeth36Value);
							tempTeeth_36_value.append(",");
						}
						opdOralMedicineDental.setTeeth36Value(tempTeeth_36_value.toString());
					}
					
					if(null != box.getString("data37") && !box.getString("data37").equals(""))
						opdOralMedicineDental.setTeeth37("y");
					else
						opdOralMedicineDental.setTeeth37("n");
					
					String[] teeth_37_valueList=null;
					StringBuilder  tempTeeth_37_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
						teeth_37_valueList=request.getParameterValues("teeth_37_value");
						for(String teeth37Value:teeth_37_valueList){
							tempTeeth_37_value.append(teeth37Value);
							tempTeeth_37_value.append(",");
						}
						opdOralMedicineDental.setTeeth37Value(tempTeeth_37_value.toString());
					}
					
					if(null != box.getString("data38") && !box.getString("data38").equals(""))
						opdOralMedicineDental.setTeeth38("y");
					else
						opdOralMedicineDental.setTeeth38("n");
					
					String[] teeth_38_valueList=null;
					StringBuilder  tempTeeth_38_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
						teeth_38_valueList=request.getParameterValues("teeth_38_value");
						for(String teeth38Value:teeth_38_valueList){
							tempTeeth_38_value.append(teeth38Value);
							tempTeeth_38_value.append(",");
						}
						opdOralMedicineDental.setTeeth38Value(tempTeeth_38_value.toString());
					}
					
					if(null != box.getString("data51") && !box.getString("data51").equals(""))
						opdOralMedicineDental.setTeeth51("y");
					else
						opdOralMedicineDental.setTeeth51("n");
					
					String[] teeth_51_valueList=null;
					StringBuilder  tempTeeth_51_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_51_value") && !request.getParameterValues("teeth_51_value").equals("")){
						teeth_51_valueList=request.getParameterValues("teeth_51_value");
						for(String teeth51Value:teeth_51_valueList){
							tempTeeth_51_value.append(teeth51Value);
							tempTeeth_51_value.append(",");
						}
						opdOralMedicineDental.setTeeth51Value(tempTeeth_51_value.toString());
					}
					
					
					if(null != box.getString("data52") && !box.getString("data52").equals(""))
						opdOralMedicineDental.setTeeth52("y");
					else
						opdOralMedicineDental.setTeeth52("n");
					
					String[] teeth_52_valueList=null;
					StringBuilder  tempTeeth_52_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_52_value") && !request.getParameterValues("teeth_52_value").equals("")){
						teeth_52_valueList=request.getParameterValues("teeth_52_value");
						for(String teeth52Value:teeth_52_valueList){
							tempTeeth_52_value.append(teeth52Value);
							tempTeeth_52_value.append(",");
						}
						opdOralMedicineDental.setTeeth52Value(tempTeeth_52_value.toString());
					}
					
					if(null != box.getString("data53") && !box.getString("data53").equals(""))
						opdOralMedicineDental.setTeeth53("y");
					else
						opdOralMedicineDental.setTeeth53("n");
					
					String[] teeth_53_valueList=null;
					StringBuilder  tempTeeth_53_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_53_value") && !request.getParameterValues("teeth_53_value").equals("")){
						teeth_53_valueList=request.getParameterValues("teeth_53_value");
						for(String teeth53Value:teeth_53_valueList){
							tempTeeth_53_value.append(teeth53Value);
							tempTeeth_53_value.append(",");
						}
						opdOralMedicineDental.setTeeth53Value(tempTeeth_53_value.toString());
					}
					
					
					if(null != box.getString("data54") && !box.getString("data54").equals(""))
						opdOralMedicineDental.setTeeth54("y");
					else
						opdOralMedicineDental.setTeeth54("n");
					
					String[] teeth_54_valueList=null;
					StringBuilder  tempTeeth_54_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_54_value") && !request.getParameterValues("teeth_54_value").equals("")){
						teeth_54_valueList=request.getParameterValues("teeth_54_value");
						for(String teeth54Value:teeth_54_valueList){
							tempTeeth_54_value.append(teeth54Value);
							tempTeeth_54_value.append(",");
						}
						opdOralMedicineDental.setTeeth54Value(tempTeeth_54_value.toString());
					}
					
					if(null != box.getString("data55") && !box.getString("data55").equals(""))
						opdOralMedicineDental.setTeeth55("y");
					else
						opdOralMedicineDental.setTeeth55("n");
					
					String[] teeth_55_valueList=null;
					StringBuilder  tempTeeth_55_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_55_value") && !request.getParameterValues("teeth_55_value").equals("")){
						teeth_55_valueList=request.getParameterValues("teeth_55_value");
						for(String teeth55Value:teeth_55_valueList){
							tempTeeth_55_value.append(teeth55Value);
							tempTeeth_55_value.append(",");
						}
						opdOralMedicineDental.setTeeth55Value(tempTeeth_55_value.toString());
					}
					
					
					if(null != box.getString("data61") && !box.getString("data61").equals(""))
						opdOralMedicineDental.setTeeth61("y");
					else
						opdOralMedicineDental.setTeeth61("n");
					
					String[] teeth_61_valueList=null;
					StringBuilder  tempTeeth_61_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_61_value") && !request.getParameterValues("teeth_61_value").equals("")){
						teeth_61_valueList=request.getParameterValues("teeth_61_value");
						for(String teeth61Value:teeth_61_valueList){
							tempTeeth_61_value.append(teeth61Value);
							tempTeeth_61_value.append(",");
						}
						opdOralMedicineDental.setTeeth61Value(tempTeeth_61_value.toString());
					}
					
					
					if(null != box.getString("data62") && !box.getString("data62").equals(""))
						opdOralMedicineDental.setTeeth62("y");
					else
						opdOralMedicineDental.setTeeth62("n");
					
					String[] teeth_62_valueList=null;
					StringBuilder  tempTeeth_62_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_62_value") && !request.getParameterValues("teeth_62_value").equals("")){
						teeth_62_valueList=request.getParameterValues("teeth_62_value");
						for(String teeth62Value:teeth_62_valueList){
							tempTeeth_62_value.append(teeth62Value);
							tempTeeth_62_value.append(",");
						}
						opdOralMedicineDental.setTeeth62Value(tempTeeth_62_value.toString());
					}
					
					if(null != box.getString("data63") && !box.getString("data63").equals(""))
						opdOralMedicineDental.setTeeth63("y");
					else
						opdOralMedicineDental.setTeeth63("n");
					
					String[] teeth_63_valueList=null;
					StringBuilder  tempTeeth_63_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_63_value") && !request.getParameterValues("teeth_63_value").equals("")){
						teeth_63_valueList=request.getParameterValues("teeth_63_value");
						for(String teeth63Value:teeth_63_valueList){
							tempTeeth_63_value.append(teeth63Value);
							tempTeeth_63_value.append(",");
						}
						opdOralMedicineDental.setTeeth63Value(tempTeeth_63_value.toString());
					}
					
					
					if(null != box.getString("data64") && !box.getString("data64").equals(""))
						opdOralMedicineDental.setTeeth64("y");
					else
						opdOralMedicineDental.setTeeth64("n");
					
					String[] teeth_64_valueList=null;
					StringBuilder  tempTeeth_64_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_64_value") && !request.getParameterValues("teeth_64_value").equals("")){
						teeth_64_valueList=request.getParameterValues("teeth_64_value");
						for(String teeth64Value:teeth_64_valueList){
							tempTeeth_64_value.append(teeth64Value);
							tempTeeth_64_value.append(",");
						}
						opdOralMedicineDental.setTeeth64Value(tempTeeth_64_value.toString());
					}
					
					if(null != box.getString("data65") && !box.getString("data65").equals(""))
						opdOralMedicineDental.setTeeth65("y");
					else
						opdOralMedicineDental.setTeeth65("n");
					
					String[] teeth_65_valueList=null;
					StringBuilder  tempTeeth_65_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_65_value") && !request.getParameterValues("teeth_65_value").equals("")){
						teeth_65_valueList=request.getParameterValues("teeth_65_value");
						for(String teeth65Value:teeth_65_valueList){
							tempTeeth_65_value.append(teeth65Value);
							tempTeeth_65_value.append(",");
						}
						opdOralMedicineDental.setTeeth65Value(tempTeeth_65_value.toString());
					}
					
					if(null != box.getString("data81") && !box.getString("data81").equals(""))
						opdOralMedicineDental.setTeeth81("y");
					else
						opdOralMedicineDental.setTeeth81("n");
					
					String[] teeth_81_valueList=null;
					StringBuilder  tempTeeth_81_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_81_value") && !request.getParameterValues("teeth_81_value").equals("")){
						teeth_81_valueList=request.getParameterValues("teeth_81_value");
						for(String teeth81Value:teeth_81_valueList){
							tempTeeth_81_value.append(teeth81Value);
							tempTeeth_81_value.append(",");
						}
						opdOralMedicineDental.setTeeth81Value(tempTeeth_81_value.toString());
					}
					
					
					if(null != box.getString("data82") && !box.getString("data82").equals(""))
						opdOralMedicineDental.setTeeth82("y");
					else
						opdOralMedicineDental.setTeeth82("n");
					
					String[] teeth_82_valueList=null;
					StringBuilder  tempTeeth_82_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_82_value") && !request.getParameterValues("teeth_82_value").equals("")){
						teeth_82_valueList=request.getParameterValues("teeth_82_value");
						for(String teeth82Value:teeth_82_valueList){
							tempTeeth_82_value.append(teeth82Value);
							tempTeeth_82_value.append(",");
						}
						opdOralMedicineDental.setTeeth82Value(tempTeeth_82_value.toString());
					}
					
					if(null != box.getString("data83") && !box.getString("data83").equals(""))
						opdOralMedicineDental.setTeeth83("y");
					else
						opdOralMedicineDental.setTeeth83("n");
					
					String[] teeth_83_valueList=null;
					StringBuilder  tempTeeth_83_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_83_value") && !request.getParameterValues("teeth_83_value").equals("")){
						teeth_83_valueList=request.getParameterValues("teeth_83_value");
						for(String teeth83Value:teeth_83_valueList){
							tempTeeth_83_value.append(teeth83Value);
							tempTeeth_83_value.append(",");
						}
						opdOralMedicineDental.setTeeth83Value(tempTeeth_83_value.toString());
					}
					
					
					if(null != box.getString("data84") && !box.getString("data84").equals(""))
						opdOralMedicineDental.setTeeth84("y");
					else
						opdOralMedicineDental.setTeeth84("n");
					
					String[] teeth_84_valueList=null;
					StringBuilder  tempTeeth_84_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_84_value") && !request.getParameterValues("teeth_84_value").equals("")){
						teeth_84_valueList=request.getParameterValues("teeth_84_value");
						for(String teeth84Value:teeth_84_valueList){
							tempTeeth_84_value.append(teeth84Value);
							tempTeeth_84_value.append(",");
						}
						opdOralMedicineDental.setTeeth84Value(tempTeeth_84_value.toString());
					}
					
					if(null != box.getString("data85") && !box.getString("data85").equals(""))
						opdOralMedicineDental.setTeeth85("y");
					else
						opdOralMedicineDental.setTeeth85("n");
					
					String[] teeth_85_valueList=null;
					StringBuilder  tempTeeth_85_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_85_value") && !request.getParameterValues("teeth_85_value").equals("")){
						teeth_85_valueList=request.getParameterValues("teeth_85_value");
						for(String teeth85Value:teeth_85_valueList){
							tempTeeth_85_value.append(teeth85Value);
							tempTeeth_85_value.append(",");
						}
						opdOralMedicineDental.setTeeth85Value(tempTeeth_85_value.toString());
					}
					

					if(null != box.getString("data71") && !box.getString("data71").equals(""))
						opdOralMedicineDental.setTeeth71("y");
					else
						opdOralMedicineDental.setTeeth71("n");
					
					String[] teeth_71_valueList=null;
					StringBuilder  tempTeeth_71_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_71_value") && !request.getParameterValues("teeth_71_value").equals("")){
						teeth_71_valueList=request.getParameterValues("teeth_71_value");
						for(String teeth71Value:teeth_71_valueList){
							tempTeeth_71_value.append(teeth71Value);
							tempTeeth_71_value.append(",");
						}
						opdOralMedicineDental.setTeeth71Value(tempTeeth_71_value.toString());
					}
					
					
					if(null != box.getString("data72") && !box.getString("data72").equals(""))
						opdOralMedicineDental.setTeeth72("y");
					else
						opdOralMedicineDental.setTeeth72("n");
					
					String[] teeth_72_valueList=null;
					StringBuilder  tempTeeth_72_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_72_value") && !request.getParameterValues("teeth_72_value").equals("")){
						teeth_72_valueList=request.getParameterValues("teeth_72_value");
						for(String teeth72Value:teeth_72_valueList){
							tempTeeth_72_value.append(teeth72Value);
							tempTeeth_72_value.append(",");
						}
						opdOralMedicineDental.setTeeth72Value(tempTeeth_72_value.toString());
					}
					
					if(null != box.getString("data73") && !box.getString("data73").equals(""))
						opdOralMedicineDental.setTeeth73("y");
					else
						opdOralMedicineDental.setTeeth73("n");
					
					String[] teeth_73_valueList=null;
					StringBuilder  tempTeeth_73_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_73_value") && !request.getParameterValues("teeth_73_value").equals("")){
						teeth_73_valueList=request.getParameterValues("teeth_73_value");
						for(String teeth73Value:teeth_73_valueList){
							tempTeeth_73_value.append(teeth73Value);
							tempTeeth_73_value.append(",");
						}
						opdOralMedicineDental.setTeeth73Value(tempTeeth_73_value.toString());
					}
					
					
					if(null != box.getString("data74") && !box.getString("data74").equals(""))
						opdOralMedicineDental.setTeeth74("y");
					else
						opdOralMedicineDental.setTeeth74("n");
					
					String[] teeth_74_valueList=null;
					StringBuilder  tempTeeth_74_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_74_value") && !request.getParameterValues("teeth_74_value").equals("")){
						teeth_74_valueList=request.getParameterValues("teeth_74_value");
						for(String teeth74Value:teeth_74_valueList){
							tempTeeth_74_value.append(teeth74Value);
							tempTeeth_74_value.append(",");
						}
						opdOralMedicineDental.setTeeth74Value(tempTeeth_74_value.toString());
					}
					
					if(null != box.getString("data75") && !box.getString("data75").equals(""))
						opdOralMedicineDental.setTeeth75("y");
					else
						opdOralMedicineDental.setTeeth75("n");
					
					String[] teeth_75_valueList=null;
					StringBuilder  tempTeeth_75_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_75_value") && !request.getParameterValues("teeth_75_value").equals("")){
						teeth_75_valueList=request.getParameterValues("teeth_75_value");
						for(String teeth75Value:teeth_75_valueList){
							tempTeeth_75_value.append(teeth75Value);
							tempTeeth_75_value.append(",");
						}
						opdOralMedicineDental.setTeeth75Value(tempTeeth_75_value.toString());
					}
					
					
					if(null != box.getString("Inspection") && !box.getString("Inspection").equals(""))
						opdOralMedicineDental.setTongueInspection(box.getString("Inspection"));
					if(null != box.getString("Dorsum") && !box.getString("Dorsum").equals(""))
						opdOralMedicineDental.setDorsum(box.getString("Dorsum"));
					if(null != box.getString("Ventral") && !box.getString("Ventral").equals(""))
						opdOralMedicineDental.setVentralSurface(box.getString("Ventral"));
					if(null != box.getString("lactation") && !box.getString("lactation").equals(""))
						opdOralMedicineDental.setLateralBorder("Yes");
					else
						opdOralMedicineDental.setLateralBorder("No");
					if(null != box.getString("Local") && !box.getString("Local").equals(""))
						opdOralMedicineDental.setLocalExaminationFindings(box.getString("Local"));
					if(null != box.getString("Case") && !box.getString("Case").equals(""))
						opdOralMedicineDental.setCaseSummary(box.getString("Case"));
					
					
					hbt.save(opdOralMedicineDental);
					dentalId = opdOralMedicineDental.getId();


					if(null != box.getString("hiddenValueCharge") && !box.getString("hiddenValueCharge").equals("")) {
						hdb = box.getInt("hiddenValueCharge");
					}
					
					for(int i = 1; i <= hdb; i++) {
						OpdOralMedicineDentalTissue oralMedicineDentalTissue = new OpdOralMedicineDentalTissue();
						if(null != request.getParameter("symptoms"+i) && !request.getParameter("symptoms"+i).equals("")) {
							symptoms = request.getParameter("symptoms"+i);
							oralMedicineDentalTissue.setSymptoms(request.getParameter("symptoms"+i));
						}
						if(null != box.getString("burning"+i) && box.getString("burning"+i).equals("Yes"))
							oralMedicineDentalTissue.setBurningSensation("Yes");
						else
							oralMedicineDentalTissue.setBurningSensation("No");
						if(null != box.getString("hyper"+i) && box.getString("hyper"+i).equals("Yes"))
							oralMedicineDentalTissue.setHyperPigmentation("Yes");
						else
							oralMedicineDentalTissue.setHyperPigmentation("No");
						if(null != box.getString("patches"+i) && box.getString("patches"+i).equals("Yes"))
							oralMedicineDentalTissue.setRedPatchesScrapable("Yes");
						else
							oralMedicineDentalTissue.setRedPatchesScrapable("No");
						if(null != box.getString("patchesNon"+i) && box.getString("patchesNon"+i).equals("Yes"))
							oralMedicineDentalTissue.setRedPatchesNonScrapable("Yes");
						else
							oralMedicineDentalTissue.setRedPatchesNonScrapable("No");
						if(null != box.getString("patchesWhite"+i) && box.getString("patchesWhite"+i).equals("Yes"))
							oralMedicineDentalTissue.setWhitePatchesScrapable("Yes");
						else
							oralMedicineDentalTissue.setWhitePatchesScrapable("No");
						if(null != box.getString("patchesNonWhite"+i) && box.getString("patchesNonWhite"+i).equals("Yes"))
							oralMedicineDentalTissue.setWhitePatchesNonScrapable("Yes");
						else
							oralMedicineDentalTissue.setWhitePatchesNonScrapable("No");
						if(null != box.getString("patchesStriae"+i) && box.getString("patchesStriae"+i).equals("Yes"))
							oralMedicineDentalTissue.setWhiteStriae("Yes");
						else
							oralMedicineDentalTissue.setWhiteStriae("No");
						if(null != box.getString("swelling"+i) && box.getString("swelling"+i).equals("Yes"))
							oralMedicineDentalTissue.setSwelling("Yes");
						else
							oralMedicineDentalTissue.setSwelling("No");
						if(null != box.getString("ulcers"+i) && box.getString("ulcers"+i).equals("Yes"))
							oralMedicineDentalTissue.setUlcers("Yes");
						else
							oralMedicineDentalTissue.setUlcers("No");
						if(null != box.getString("roughness"+i) && box.getString("roughness"+i).equals("Yes"))
							oralMedicineDentalTissue.setRoughness("Yes");
						else
							oralMedicineDentalTissue.setRoughness("No");
						
						if(symptoms != "") {
							OpdOralMedicineDental medicineDental = new OpdOralMedicineDental();
							medicineDental.setId(dentalId);
							oralMedicineDentalTissue.setOralMedicine(medicineDental);
							oralMedicineDentalTissue.setHin(patient);
							oralMedicineDentalTissue.setVisit(visit);
							oralMedicineDentalTissue.setDepartment(masDepartment);
							oralMedicineDentalTissue.setHospital(masHospital);
							hbt.save(oralMedicineDentalTissue);
							map.put("oralMedicineDentalTissue",oralMedicineDentalTissue);
						}
					}

					tnx.commit();
					map.put("opdOralMedicineDental",opdOralMedicineDental);
					
				}catch(Exception e){
					e.printStackTrace();
				}
				return map;
			}

			//Added by Arbind on 23-05-2017
			public Map<String, Object> savePreAssessmentClinic(Map<String, Object> mapForDs, Box box, HttpServletRequest request) {
				Map<String, Object> map = new HashMap<String, Object>();
				MasSpecialtyTemplate masSpecialtyTemplate = null;
				Transaction tnx=null;
				try{
					Session session = (Session) getSession();
					tnx=session.beginTransaction();
					HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
					
					Integer hinId=0;
					Integer departmentId=0;
					Integer visitId=0;
					Integer hospitalId=0;
					Integer specialtyId=0;
					Integer userId=0;
					String templateName = "";
					
					if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
						hinId = (Integer) mapForDs.get("hinId");
					}
					if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
						visitId = (Integer) mapForDs.get("visitId");
					}
					if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
						departmentId = (Integer) mapForDs.get("departmentId");
					}
					if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
						hospitalId = (Integer) mapForDs.get("hospitalId");
					}
					if(map.get("userId")!=null){
						userId=(Integer)  map.get("userId");	
					}
					
					if(map.get("specialtyId")!=null){
						specialtyId=(Integer)  map.get("specialtyId");	
					}
					if(map.get("templateName")!=null){
						templateName=(String)  map.get("templateName");	
					}
					
					Patient patient = new Patient();
					patient.setId(hinId);
					opdPreAssessmentClinicDental.setHin(patient);
					
					Visit visit = new Visit();
					visit.setId(visitId);
					opdPreAssessmentClinicDental.setVisit(visit);
					
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					opdPreAssessmentClinicDental.setDepartment(masDepartment);
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					opdPreAssessmentClinicDental.setHospital(masHospital);
					
					if(null != box.getString("presentingComplaints") && !box.getString("presentingComplaints").equals(""))
						opdPreAssessmentClinicDental.setPresentingComplaints(box.getString("presentingComplaints"));
					// for reading the checkBox value
					if(null != box.getString("data18") && !box.getString("data18").equals(""))
						opdPreAssessmentClinicDental.setTeeth18("y");
					else
						opdPreAssessmentClinicDental.setTeeth18("n");
					// for dropdown value
					String[] teeth_18_valueList=null;
					StringBuilder  tempTeeth_18_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
						teeth_18_valueList=request.getParameterValues("teeth_18_value");
						for(String teeth18Value:teeth_18_valueList){
							tempTeeth_18_value.append(teeth18Value);
							tempTeeth_18_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
					}
					
					if(null != box.getString("data17") && !box.getString("data17").equals(""))
						opdPreAssessmentClinicDental.setTeeth17("y");
					else
						opdPreAssessmentClinicDental.setTeeth17("n");
					
					String[] teeth_17_valueList=null;
					StringBuilder  tempTeeth_17_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
						teeth_17_valueList=request.getParameterValues("teeth_17_value");
						for(String teeth17Value:teeth_17_valueList){
							tempTeeth_17_value.append(teeth17Value);
							tempTeeth_17_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
					}
					
					if(null != box.getString("data16") && !box.getString("data16").equals(""))
						opdPreAssessmentClinicDental.setTeeth16("y");
					else
						opdPreAssessmentClinicDental.setTeeth16("n");
					
					String[] teeth_16_valueList=null;
					StringBuilder  tempTeeth_16_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
						teeth_16_valueList=request.getParameterValues("teeth_16_value");
						for(String teeth16Value:teeth_16_valueList){
							tempTeeth_16_value.append(teeth16Value);
							tempTeeth_16_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
					}
					
					if(null != box.getString("data15") && !box.getString("data15").equals(""))
						opdPreAssessmentClinicDental.setTeeth15("y");
					else
						opdPreAssessmentClinicDental.setTeeth15("n");

					String[] teeth_15_valueList=null;
					StringBuilder  tempTeeth_15_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
						teeth_15_valueList = request.getParameterValues("teeth_15_value");
						for(String teeth15Value : teeth_15_valueList){
							tempTeeth_15_value.append(teeth15Value);
							tempTeeth_15_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
					}
					
					if(null != box.getString("data14") && !box.getString("data14").equals(""))
						opdPreAssessmentClinicDental.setTeeth14("y");
					else
						opdPreAssessmentClinicDental.setTeeth14("n");
					
					String[] teeth_14_valueList=null;
					StringBuilder  tempTeeth_14_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
						teeth_14_valueList=request.getParameterValues("teeth_14_value");
						for(String teeth14Value:teeth_14_valueList){
							tempTeeth_14_value.append(teeth14Value);
							tempTeeth_14_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
					}
					
					if(null != box.getString("data13") && !box.getString("data13").equals(""))
						opdPreAssessmentClinicDental.setTeeth13("y");
					else
						opdPreAssessmentClinicDental.setTeeth13("n");
					
					String[] teeth_13_valueList=null;
					StringBuilder  tempTeeth_13_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
						teeth_13_valueList=request.getParameterValues("teeth_13_value");
						for(String teeth13Value:teeth_13_valueList){
							tempTeeth_13_value.append(teeth13Value);
							tempTeeth_13_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
					}
					
					if(null != box.getString("data12") && !box.getString("data12").equals(""))
						opdPreAssessmentClinicDental.setTeeth12("y");
					else
						opdPreAssessmentClinicDental.setTeeth12("n");
					
					String[] teeth_12_valueList=null;
					StringBuilder  tempTeeth_12_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
						teeth_12_valueList=request.getParameterValues("teeth_12_value");
						for(String teeth12Value:teeth_12_valueList){
							tempTeeth_12_value.append(teeth12Value);
							tempTeeth_12_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
					}
					
					if(null != box.getString("data11") && !box.getString("data11").equals(""))
						opdPreAssessmentClinicDental.setTeeth11("y");
					else
						opdPreAssessmentClinicDental.setTeeth11("n");
					
					String[] teeth_11_valueList=null;
					StringBuilder  tempTeeth_11_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
						teeth_11_valueList=request.getParameterValues("teeth_11_value");
						for(String teeth11Value:teeth_11_valueList){
							tempTeeth_11_value.append(teeth11Value);
							tempTeeth_11_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
					}
					
					if(null != box.getString("data21") && !box.getString("data21").equals(""))
						opdPreAssessmentClinicDental.setTeeth21("y");
					else
						opdPreAssessmentClinicDental.setTeeth21("n");
					
					String[] teeth_21_valueList=null;
					StringBuilder  tempTeeth_21_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
						teeth_21_valueList=request.getParameterValues("teeth_21_value");
						for(String teeth21Value:teeth_21_valueList){
							tempTeeth_21_value.append(teeth21Value);
							tempTeeth_21_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
					}
					
					
					if(null != box.getString("data22") && !box.getString("data22").equals(""))
						opdPreAssessmentClinicDental.setTeeth22("y");
					else
						opdPreAssessmentClinicDental.setTeeth22("n");
					
					String[] teeth_22_valueList=null;
					StringBuilder  tempTeeth_22_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
						teeth_22_valueList=request.getParameterValues("teeth_22_value");
						for(String teeth22Value:teeth_22_valueList){
							tempTeeth_22_value.append(teeth22Value);
							tempTeeth_22_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
					}
					
					if(null != box.getString("data23") && !box.getString("data23").equals(""))
						opdPreAssessmentClinicDental.setTeeth23("y");
					else
						opdPreAssessmentClinicDental.setTeeth23("n");
					
					String[] teeth_23_valueList=null;
					StringBuilder  tempTeeth_23_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
						teeth_23_valueList=request.getParameterValues("teeth_23_value");
						for(String teeth23Value:teeth_23_valueList){
							tempTeeth_23_value.append(teeth23Value);
							tempTeeth_23_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
					}
					
					
					if(null != box.getString("data24") && !box.getString("data24").equals(""))
						opdPreAssessmentClinicDental.setTeeth24("y");
					else
						opdPreAssessmentClinicDental.setTeeth24("n");
					
					String[] teeth_24_valueList=null;
					StringBuilder  tempTeeth_24_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
						teeth_24_valueList=request.getParameterValues("teeth_24_value");
						for(String teeth24Value:teeth_24_valueList){
							tempTeeth_24_value.append(teeth24Value);
							tempTeeth_24_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
					}
					
					if(null != box.getString("data25") && !box.getString("data25").equals(""))
						opdPreAssessmentClinicDental.setTeeth25("y");
					else
						opdPreAssessmentClinicDental.setTeeth25("n");
					
					String[] teeth_25_valueList=null;
					StringBuilder  tempTeeth_25_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
						teeth_25_valueList=request.getParameterValues("teeth_25_value");
						for(String teeth25Value:teeth_25_valueList){
							tempTeeth_25_value.append(teeth25Value);
							tempTeeth_25_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
					}
					
					if(null != box.getString("data26") && !box.getString("data26").equals(""))
						opdPreAssessmentClinicDental.setTeeth26("y");
					else
						opdPreAssessmentClinicDental.setTeeth26("n");
					
					String[] teeth_26_valueList=null;
					StringBuilder  tempTeeth_26_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
						teeth_26_valueList=request.getParameterValues("teeth_26_value");
						for(String teeth26Value:teeth_26_valueList){
							tempTeeth_26_value.append(teeth26Value);
							tempTeeth_26_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
					}
					
					if(null != box.getString("data27") && !box.getString("data27").equals(""))
						opdPreAssessmentClinicDental.setTeeth27("y");
					else
						opdPreAssessmentClinicDental.setTeeth27("n");
					
					String[] teeth_27_valueList=null;
					StringBuilder  tempTeeth_27_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
						teeth_27_valueList=request.getParameterValues("teeth_27_value");
						for(String teeth27Value:teeth_27_valueList){
							tempTeeth_27_value.append(teeth27Value);
							tempTeeth_27_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
					}
					
					if(null != box.getString("data28") && !box.getString("data28").equals(""))
						opdPreAssessmentClinicDental.setTeeth28("y");
					else
						opdPreAssessmentClinicDental.setTeeth28("n");
					
					String[] teeth_28_valueList=null;
					StringBuilder  tempTeeth_28_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
						teeth_28_valueList=request.getParameterValues("teeth_28_value");
						for(String teeth28Value:teeth_28_valueList){
							tempTeeth_28_value.append(teeth28Value);
							tempTeeth_28_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
					}
					
					if(null != box.getString("data48") && !box.getString("data48").equals(""))
						opdPreAssessmentClinicDental.setTeeth48("y");
					else
						opdPreAssessmentClinicDental.setTeeth48("n");
					
					// for dropdown value
					String[] teeth_48_valueList=null;
					StringBuilder  tempTeeth_48_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
						teeth_48_valueList=request.getParameterValues("teeth_48_value");
						for(String teeth48Value:teeth_48_valueList){
							tempTeeth_48_value.append(teeth48Value);
							tempTeeth_48_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
					}
					
					if(null != box.getString("data47") && !box.getString("data47").equals(""))
						opdPreAssessmentClinicDental.setTeeth47("y");
					else
						opdPreAssessmentClinicDental.setTeeth47("n");
					
					String[] teeth_47_valueList=null;
					StringBuilder  tempTeeth_47_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
						teeth_47_valueList=request.getParameterValues("teeth_47_value");
						for(String teeth47Value:teeth_47_valueList){
							tempTeeth_47_value.append(teeth47Value);
							tempTeeth_47_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
					}
					
					if(null != box.getString("data46") && !box.getString("data46").equals(""))
						opdPreAssessmentClinicDental.setTeeth46("y");
					else
						opdPreAssessmentClinicDental.setTeeth46("n");
					
					String[] teeth_46_valueList=null;
					StringBuilder  tempTeeth_46_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
						teeth_46_valueList=request.getParameterValues("teeth_46_value");
						for(String teeth46Value:teeth_46_valueList){
							tempTeeth_46_value.append(teeth46Value);
							tempTeeth_46_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
					}
					
					if(null != box.getString("data45") && !box.getString("data45").equals(""))
						opdPreAssessmentClinicDental.setTeeth45("y");
					else
						opdPreAssessmentClinicDental.setTeeth45("n");

					String[] teeth_45_valueList=null;
					StringBuilder  tempTeeth_45_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
						teeth_45_valueList = request.getParameterValues("teeth_45_value");
						for(String teeth45Value : teeth_45_valueList){
							tempTeeth_45_value.append(teeth45Value);
							tempTeeth_45_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
					}
					
					if(null != box.getString("data44") && !box.getString("data44").equals(""))
						opdPreAssessmentClinicDental.setTeeth44("y");
					else
						opdPreAssessmentClinicDental.setTeeth44("n");
					
					String[] teeth_44_valueList=null;
					StringBuilder  tempTeeth_44_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
						teeth_44_valueList=request.getParameterValues("teeth_44_value");
						for(String teeth44Value:teeth_44_valueList){
							tempTeeth_44_value.append(teeth44Value);
							tempTeeth_44_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
					}
					
					if(null != box.getString("data43") && !box.getString("data43").equals(""))
						opdPreAssessmentClinicDental.setTeeth43("y");
					else
						opdPreAssessmentClinicDental.setTeeth43("n");
					
					String[] teeth_43_valueList=null;
					StringBuilder  tempTeeth_43_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
						teeth_43_valueList=request.getParameterValues("teeth_43_value");
						for(String teeth43Value:teeth_43_valueList){
							tempTeeth_43_value.append(teeth43Value);
							tempTeeth_43_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
					}
					
					if(null != box.getString("data42") && !box.getString("data42").equals(""))
						opdPreAssessmentClinicDental.setTeeth42("y");
					else
						opdPreAssessmentClinicDental.setTeeth42("n");
					
					String[] teeth_42_valueList=null;
					StringBuilder  tempTeeth_42_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
						teeth_42_valueList=request.getParameterValues("teeth_42_value");
						for(String teeth42Value:teeth_42_valueList){
							tempTeeth_42_value.append(teeth42Value);
							tempTeeth_42_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
					}
					
					if(null != box.getString("data41") && !box.getString("data41").equals(""))
						opdPreAssessmentClinicDental.setTeeth41("y");
					else
						opdPreAssessmentClinicDental.setTeeth41("n");
					
					String[] teeth_41_valueList=null;
					StringBuilder  tempTeeth_41_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
						teeth_41_valueList=request.getParameterValues("teeth_41_value");
						for(String teeth41Value:teeth_41_valueList){
							tempTeeth_41_value.append(teeth41Value);
							tempTeeth_41_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
					}
					
					if(null != box.getString("data31") && !box.getString("data31").equals(""))
						opdPreAssessmentClinicDental.setTeeth31("y");
					else
						opdPreAssessmentClinicDental.setTeeth31("n");
					
					String[] teeth_31_valueList=null;
					StringBuilder  tempTeeth_31_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
						teeth_31_valueList=request.getParameterValues("teeth_31_value");
						for(String teeth31Value:teeth_31_valueList){
							tempTeeth_31_value.append(teeth31Value);
							tempTeeth_31_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
					}
					
					
					if(null != box.getString("data32") && !box.getString("data32").equals(""))
						opdPreAssessmentClinicDental.setTeeth32("y");
					else
						opdPreAssessmentClinicDental.setTeeth32("n");
					
					String[] teeth_32_valueList=null;
					StringBuilder  tempTeeth_32_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
						teeth_32_valueList=request.getParameterValues("teeth_32_value");
						for(String teeth32Value:teeth_32_valueList){
							tempTeeth_32_value.append(teeth32Value);
							tempTeeth_32_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
					}
					
					if(null != box.getString("data33") && !box.getString("data33").equals(""))
						opdPreAssessmentClinicDental.setTeeth33("y");
					else
						opdPreAssessmentClinicDental.setTeeth33("n");
					
					String[] teeth_33_valueList=null;
					StringBuilder  tempTeeth_33_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
						teeth_33_valueList=request.getParameterValues("teeth_33_value");
						for(String teeth33Value:teeth_33_valueList){
							tempTeeth_33_value.append(teeth33Value);
							tempTeeth_33_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
					}
					
					
					if(null != box.getString("data34") && !box.getString("data34").equals(""))
						opdPreAssessmentClinicDental.setTeeth34("y");
					else
						opdPreAssessmentClinicDental.setTeeth34("n");
					
					String[] teeth_34_valueList=null;
					StringBuilder  tempTeeth_34_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
						teeth_34_valueList=request.getParameterValues("teeth_34_value");
						for(String teeth34Value:teeth_34_valueList){
							tempTeeth_34_value.append(teeth34Value);
							tempTeeth_34_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
					}
					
					if(null != box.getString("data35") && !box.getString("data35").equals(""))
						opdPreAssessmentClinicDental.setTeeth35("y");
					else
						opdPreAssessmentClinicDental.setTeeth35("n");
					
					String[] teeth_35_valueList=null;
					StringBuilder  tempTeeth_35_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
						teeth_35_valueList=request.getParameterValues("teeth_35_value");
						for(String teeth35Value:teeth_35_valueList){
							tempTeeth_35_value.append(teeth35Value);
							tempTeeth_35_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
					}
					
					if(null != box.getString("data36") && !box.getString("data36").equals(""))
						opdPreAssessmentClinicDental.setTeeth36("y");
					else
						opdPreAssessmentClinicDental.setTeeth36("n");
					
					String[] teeth_36_valueList=null;
					StringBuilder  tempTeeth_36_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
						teeth_36_valueList=request.getParameterValues("teeth_36_value");
						for(String teeth36Value:teeth_36_valueList){
							tempTeeth_36_value.append(teeth36Value);
							tempTeeth_36_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
					}
					
					if(null != box.getString("data37") && !box.getString("data37").equals(""))
						opdPreAssessmentClinicDental.setTeeth37("y");
					else
						opdPreAssessmentClinicDental.setTeeth37("n");
					
					String[] teeth_37_valueList=null;
					StringBuilder  tempTeeth_37_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
						teeth_37_valueList=request.getParameterValues("teeth_37_value");
						for(String teeth37Value:teeth_37_valueList){
							tempTeeth_37_value.append(teeth37Value);
							tempTeeth_37_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
					}
					
					if(null != box.getString("data38") && !box.getString("data38").equals(""))
						opdPreAssessmentClinicDental.setTeeth38("y");
					else
						opdPreAssessmentClinicDental.setTeeth38("n");
					
					String[] teeth_38_valueList=null;
					StringBuilder  tempTeeth_38_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
						teeth_38_valueList=request.getParameterValues("teeth_38_value");
						for(String teeth38Value:teeth_38_valueList){
							tempTeeth_38_value.append(teeth38Value);
							tempTeeth_38_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
					}
					
					if(null != box.getString("data51") && !box.getString("data51").equals(""))
						opdPreAssessmentClinicDental.setTeeth51("y");
					else
						opdPreAssessmentClinicDental.setTeeth51("n");
					
					String[] teeth_51_valueList=null;
					StringBuilder  tempTeeth_51_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_51_value") && !request.getParameterValues("teeth_51_value").equals("")){
						teeth_51_valueList=request.getParameterValues("teeth_51_value");
						for(String teeth51Value:teeth_51_valueList){
							tempTeeth_51_value.append(teeth51Value);
							tempTeeth_51_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth51Value(tempTeeth_51_value.toString());
					}
					
					
					if(null != box.getString("data52") && !box.getString("data52").equals(""))
						opdPreAssessmentClinicDental.setTeeth52("y");
					else
						opdPreAssessmentClinicDental.setTeeth52("n");
					
					String[] teeth_52_valueList=null;
					StringBuilder  tempTeeth_52_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_52_value") && !request.getParameterValues("teeth_52_value").equals("")){
						teeth_52_valueList=request.getParameterValues("teeth_52_value");
						for(String teeth52Value:teeth_52_valueList){
							tempTeeth_52_value.append(teeth52Value);
							tempTeeth_52_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth52Value(tempTeeth_52_value.toString());
					}
					
					if(null != box.getString("data53") && !box.getString("data53").equals(""))
						opdPreAssessmentClinicDental.setTeeth53("y");
					else
						opdPreAssessmentClinicDental.setTeeth53("n");
					
					String[] teeth_53_valueList=null;
					StringBuilder  tempTeeth_53_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_53_value") && !request.getParameterValues("teeth_53_value").equals("")){
						teeth_53_valueList=request.getParameterValues("teeth_53_value");
						for(String teeth53Value:teeth_53_valueList){
							tempTeeth_53_value.append(teeth53Value);
							tempTeeth_53_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth53Value(tempTeeth_53_value.toString());
					}
					
					
					if(null != box.getString("data54") && !box.getString("data54").equals(""))
						opdPreAssessmentClinicDental.setTeeth54("y");
					else
						opdPreAssessmentClinicDental.setTeeth54("n");
					
					String[] teeth_54_valueList=null;
					StringBuilder  tempTeeth_54_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_54_value") && !request.getParameterValues("teeth_54_value").equals("")){
						teeth_54_valueList=request.getParameterValues("teeth_54_value");
						for(String teeth54Value:teeth_54_valueList){
							tempTeeth_54_value.append(teeth54Value);
							tempTeeth_54_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth54Value(tempTeeth_54_value.toString());
					}
					
					if(null != box.getString("data55") && !box.getString("data55").equals(""))
						opdPreAssessmentClinicDental.setTeeth55("y");
					else
						opdPreAssessmentClinicDental.setTeeth55("n");
					
					String[] teeth_55_valueList=null;
					StringBuilder  tempTeeth_55_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_55_value") && !request.getParameterValues("teeth_55_value").equals("")){
						teeth_55_valueList=request.getParameterValues("teeth_55_value");
						for(String teeth55Value:teeth_55_valueList){
							tempTeeth_55_value.append(teeth55Value);
							tempTeeth_55_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth55Value(tempTeeth_55_value.toString());
					}
					
					
					if(null != box.getString("data61") && !box.getString("data61").equals(""))
						opdPreAssessmentClinicDental.setTeeth61("y");
					else
						opdPreAssessmentClinicDental.setTeeth61("n");
					
					String[] teeth_61_valueList=null;
					StringBuilder  tempTeeth_61_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_61_value") && !request.getParameterValues("teeth_61_value").equals("")){
						teeth_61_valueList=request.getParameterValues("teeth_61_value");
						for(String teeth61Value:teeth_61_valueList){
							tempTeeth_61_value.append(teeth61Value);
							tempTeeth_61_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth61Value(tempTeeth_61_value.toString());
					}
					
					
					if(null != box.getString("data62") && !box.getString("data62").equals(""))
						opdPreAssessmentClinicDental.setTeeth62("y");
					else
						opdPreAssessmentClinicDental.setTeeth62("n");
					
					String[] teeth_62_valueList=null;
					StringBuilder  tempTeeth_62_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_62_value") && !request.getParameterValues("teeth_62_value").equals("")){
						teeth_62_valueList=request.getParameterValues("teeth_62_value");
						for(String teeth62Value:teeth_62_valueList){
							tempTeeth_62_value.append(teeth62Value);
							tempTeeth_62_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth62Value(tempTeeth_62_value.toString());
					}
					
					if(null != box.getString("data63") && !box.getString("data63").equals(""))
						opdPreAssessmentClinicDental.setTeeth63("y");
					else
						opdPreAssessmentClinicDental.setTeeth63("n");
					
					String[] teeth_63_valueList=null;
					StringBuilder  tempTeeth_63_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_63_value") && !request.getParameterValues("teeth_63_value").equals("")){
						teeth_63_valueList=request.getParameterValues("teeth_63_value");
						for(String teeth63Value:teeth_63_valueList){
							tempTeeth_63_value.append(teeth63Value);
							tempTeeth_63_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth63Value(tempTeeth_63_value.toString());
					}
					
					
					if(null != box.getString("data64") && !box.getString("data64").equals(""))
						opdPreAssessmentClinicDental.setTeeth64("y");
					else
						opdPreAssessmentClinicDental.setTeeth64("n");
					
					String[] teeth_64_valueList=null;
					StringBuilder  tempTeeth_64_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_64_value") && !request.getParameterValues("teeth_64_value").equals("")){
						teeth_64_valueList=request.getParameterValues("teeth_64_value");
						for(String teeth64Value:teeth_64_valueList){
							tempTeeth_64_value.append(teeth64Value);
							tempTeeth_64_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth64Value(tempTeeth_64_value.toString());
					}
					
					if(null != box.getString("data65") && !box.getString("data65").equals(""))
						opdPreAssessmentClinicDental.setTeeth65("y");
					else
						opdPreAssessmentClinicDental.setTeeth65("n");
					
					String[] teeth_65_valueList=null;
					StringBuilder  tempTeeth_65_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_65_value") && !request.getParameterValues("teeth_65_value").equals("")){
						teeth_65_valueList=request.getParameterValues("teeth_65_value");
						for(String teeth65Value:teeth_65_valueList){
							tempTeeth_65_value.append(teeth65Value);
							tempTeeth_65_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth65Value(tempTeeth_65_value.toString());
					}
					
					if(null != box.getString("data81") && !box.getString("data81").equals(""))
						opdPreAssessmentClinicDental.setTeeth81("y");
					else
						opdPreAssessmentClinicDental.setTeeth81("n");
					
					String[] teeth_81_valueList=null;
					StringBuilder  tempTeeth_81_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_81_value") && !request.getParameterValues("teeth_81_value").equals("")){
						teeth_81_valueList=request.getParameterValues("teeth_81_value");
						for(String teeth81Value:teeth_81_valueList){
							tempTeeth_81_value.append(teeth81Value);
							tempTeeth_81_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth81Value(tempTeeth_81_value.toString());
					}
					
					
					if(null != box.getString("data82") && !box.getString("data82").equals(""))
						opdPreAssessmentClinicDental.setTeeth82("y");
					else
						opdPreAssessmentClinicDental.setTeeth82("n");
					
					String[] teeth_82_valueList=null;
					StringBuilder  tempTeeth_82_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_82_value") && !request.getParameterValues("teeth_82_value").equals("")){
						teeth_82_valueList=request.getParameterValues("teeth_82_value");
						for(String teeth82Value:teeth_82_valueList){
							tempTeeth_82_value.append(teeth82Value);
							tempTeeth_82_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth82Value(tempTeeth_82_value.toString());
					}
					
					if(null != box.getString("data83") && !box.getString("data83").equals(""))
						opdPreAssessmentClinicDental.setTeeth83("y");
					else
						opdPreAssessmentClinicDental.setTeeth83("n");
					
					String[] teeth_83_valueList=null;

					StringBuilder  tempTeeth_83_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_83_value") && !request.getParameterValues("teeth_83_value").equals("")){
						teeth_83_valueList=request.getParameterValues("teeth_83_value");
						for(String teeth83Value:teeth_83_valueList){
							tempTeeth_83_value.append(teeth83Value);
							tempTeeth_83_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth83Value(tempTeeth_83_value.toString());
					}
					
					
					if(null != box.getString("data84") && !box.getString("data84").equals(""))
						opdPreAssessmentClinicDental.setTeeth84("y");
					else
						opdPreAssessmentClinicDental.setTeeth84("n");
					
					String[] teeth_84_valueList=null;
					StringBuilder  tempTeeth_84_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_84_value") && !request.getParameterValues("teeth_84_value").equals("")){
						teeth_84_valueList=request.getParameterValues("teeth_84_value");
						for(String teeth84Value:teeth_84_valueList){
							tempTeeth_84_value.append(teeth84Value);
							tempTeeth_84_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth84Value(tempTeeth_84_value.toString());
					}
					
					if(null != box.getString("data85") && !box.getString("data85").equals(""))
						opdPreAssessmentClinicDental.setTeeth85("y");
					else
						opdPreAssessmentClinicDental.setTeeth85("n");
					
					String[] teeth_85_valueList=null;
					StringBuilder  tempTeeth_85_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_85_value") && !request.getParameterValues("teeth_85_value").equals("")){
						teeth_85_valueList=request.getParameterValues("teeth_85_value");
						for(String teeth85Value:teeth_85_valueList){
							tempTeeth_85_value.append(teeth85Value);
							tempTeeth_85_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth85Value(tempTeeth_85_value.toString());
					}
					

					if(null != box.getString("data71") && !box.getString("data71").equals(""))
						opdPreAssessmentClinicDental.setTeeth71("y");
					else
						opdPreAssessmentClinicDental.setTeeth71("n");
					
					String[] teeth_71_valueList=null;
					StringBuilder  tempTeeth_71_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_71_value") && !request.getParameterValues("teeth_71_value").equals("")){
						teeth_71_valueList=request.getParameterValues("teeth_71_value");
						for(String teeth71Value:teeth_71_valueList){
							tempTeeth_71_value.append(teeth71Value);
							tempTeeth_71_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth71Value(tempTeeth_71_value.toString());
					}
					
					
					if(null != box.getString("data72") && !box.getString("data72").equals(""))
						opdPreAssessmentClinicDental.setTeeth72("y");
					else
						opdPreAssessmentClinicDental.setTeeth72("n");
					
					String[] teeth_72_valueList=null;
					StringBuilder  tempTeeth_72_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_72_value") && !request.getParameterValues("teeth_72_value").equals("")){
						teeth_72_valueList=request.getParameterValues("teeth_72_value");
						for(String teeth72Value:teeth_72_valueList){
							tempTeeth_72_value.append(teeth72Value);
							tempTeeth_72_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth72Value(tempTeeth_72_value.toString());
					}
					
					if(null != box.getString("data73") && !box.getString("data73").equals(""))
						opdPreAssessmentClinicDental.setTeeth73("y");
					else
						opdPreAssessmentClinicDental.setTeeth73("n");
					
					String[] teeth_73_valueList=null;
					StringBuilder  tempTeeth_73_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_73_value") && !request.getParameterValues("teeth_73_value").equals("")){
						teeth_73_valueList=request.getParameterValues("teeth_73_value");
						for(String teeth73Value:teeth_73_valueList){
							tempTeeth_73_value.append(teeth73Value);
							tempTeeth_73_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth73Value(tempTeeth_73_value.toString());
					}
					
					
					if(null != box.getString("data74") && !box.getString("data74").equals(""))
						opdPreAssessmentClinicDental.setTeeth74("y");
					else
						opdPreAssessmentClinicDental.setTeeth74("n");
					
					String[] teeth_74_valueList=null;
					StringBuilder  tempTeeth_74_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_74_value") && !request.getParameterValues("teeth_74_value").equals("")){
						teeth_74_valueList=request.getParameterValues("teeth_74_value");
						for(String teeth74Value:teeth_74_valueList){
							tempTeeth_74_value.append(teeth74Value);
							tempTeeth_74_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth74Value(tempTeeth_74_value.toString());
					}
					
					if(null != box.getString("data75") && !box.getString("data75").equals(""))
						opdPreAssessmentClinicDental.setTeeth75("y");
					else
						opdPreAssessmentClinicDental.setTeeth75("n");
					
					String[] teeth_75_valueList=null;
					StringBuilder  tempTeeth_75_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_75_value") && !request.getParameterValues("teeth_75_value").equals("")){
						teeth_75_valueList=request.getParameterValues("teeth_75_value");
						for(String teeth75Value:teeth_75_valueList){
							tempTeeth_75_value.append(teeth75Value);
							tempTeeth_75_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth75Value(tempTeeth_75_value.toString());
					}
					hbt.save(opdPreAssessmentClinicDental);
					tnx.commit();
					map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
				}catch(Exception e){
					e.printStackTrace();
				}
				return map;
			}
			
			@Override
			public Map<String, Object> submitOutsideLab(Box box) {
				Session session = (Session) getSession();
				Transaction trx=session.beginTransaction();
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				List<DgOrderdt> orderDetList = new ArrayList<DgOrderdt>();
				Map<String, Object> map = new HashMap<String, Object>();				
				int orderId=0,chargeCode =0,count=0;
				orderId=box.getInt("orderId");
			    chargeCode=box.getInt("chargeCode");
				count=box.getInt("count");
				String outsideLab=null,outsideLabName=null,outsideLabValue=null;
				if(box.getString("outsideLab")!=null){
					outsideLab=box.getString("outsideLab");
				}
				if(box.getString("outsideLabName")!=null){
					outsideLabName=box.getString("outsideLabName");
				}
				if(box.getString("outsideLabValue")!=null){
					outsideLabValue=box.getString("outsideLabValue");
				}
				
				DgOrderdt orderDet = (DgOrderdt)hbt.load(DgOrderdt.class, orderId);
				
				 logger.info("real orderId "+orderDet.getId());
				
				//if(outsideLab!=null){
				//orderDet.setOutsideLab("y");
				//}
				orderDet.setOutsideLab(outsideLab);
				orderDet.setOutsideLabName(outsideLabName);
				orderDet.setOutsideLabValues(outsideLabValue);
				
				hbt.update(orderDet);
				trx.commit();
				 logger.info("updated successfully");
				return map;
			}

			
			
			public Map<String, Object> saveMaxillofacialTraumaProforma(Map<String, Object> mapForDs, Box box, HttpServletRequest request) {
				Map<String, Object> map = new HashMap<String, Object>();
				MasSpecialtyTemplate masSpecialtyTemplate = null;
				Transaction tnx=null;
				try{
					Session session = (Session) getSession();
					tnx=session.beginTransaction();
					HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					OpdMaxillofacialTraumaHeader opdMaxillofacialTraumaHeader = new OpdMaxillofacialTraumaHeader();
					
					Integer hinId=0;
					Integer departmentId=0;
					Integer visitId=0;
					Integer hospitalId=0;
					Integer specialtyId=0;
					Integer userId=0;
					String templateName = "";
					
					if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
						hinId = (Integer) mapForDs.get("hinId");
					}
					if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
						visitId = (Integer) mapForDs.get("visitId");
					}
					if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
						departmentId = (Integer) mapForDs.get("departmentId");
					}
					if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
						hospitalId = (Integer) mapForDs.get("hospitalId");
					}
					if(map.get("userId")!=null){
						userId=(Integer)  map.get("userId");	
					}
					
					if(map.get("specialtyId")!=null){
						specialtyId=(Integer)  map.get("specialtyId");	
					}
					if(map.get("templateName")!=null){
						templateName=(String)  map.get("templateName");	
					}
					
					Patient patient = new Patient();
					patient.setId(hinId);
					opdMaxillofacialTraumaHeader.setHin(patient);
					
					Visit visit = new Visit();
					visit.setId(visitId);
					opdMaxillofacialTraumaHeader.setVisit(visit);
					
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					opdMaxillofacialTraumaHeader.setDepartment(masDepartment);
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					opdMaxillofacialTraumaHeader.setHospital(masHospital);
					
					if(null != box.getString("caseOfInjury") && !box.getString("caseOfInjury").equals(""))
						opdMaxillofacialTraumaHeader.setCaseOfInjury(box.getString("caseOfInjury"));
					
					if(null != box.getString("clinicalFeatures") && !box.getString("clinicalFeatures").equals(""))
						opdMaxillofacialTraumaHeader.setClinicalFeatures(box.getString("clinicalFeatures"));
					
					
					if(null != box.getString("maxillaFracture") && !box.getString("maxillaFracture").equals(""))
						opdMaxillofacialTraumaHeader.setMaxillaFracture(box.getString("maxillaFracture"));
					
					if(null != box.getString("mandibleFracture") && !box.getString("mandibleFracture").equals(""))
						opdMaxillofacialTraumaHeader.setMandibleFracture(box.getString("mandibleFracture"));
					
					
					if(null != box.getString("difficultyInMastication") && !box.getString("difficultyInMastication").equals(""))
						opdMaxillofacialTraumaHeader.setDifficultyInMastication("Yes");
					else
						opdMaxillofacialTraumaHeader.setDifficultyInMastication("No");
					
					if(null != box.getString("earBleed") && !box.getString("earBleed").equals(""))
						opdMaxillofacialTraumaHeader.setEarBleed("Yes");
					else
						opdMaxillofacialTraumaHeader.setEarBleed("No");
					
					
					if(null != box.getString("sublingualHematoma") && !box.getString("sublingualHematoma").equals(""))
						opdMaxillofacialTraumaHeader.setSublingualHematoma("Yes");
					else
						opdMaxillofacialTraumaHeader.setSublingualHematoma("No");
					
					
					if(null != box.getString("derangedOcclusion") && !box.getString("derangedOcclusion").equals(""))
						opdMaxillofacialTraumaHeader.setDerangedOcclusion("Yes");
					else
						opdMaxillofacialTraumaHeader.setDerangedOcclusion("No");
					
					
					if(null != box.getString("crepitus") && !box.getString("crepitus").equals(""))
						opdMaxillofacialTraumaHeader.setCrepitus("Yes");
					else
						opdMaxillofacialTraumaHeader.setCrepitus("No");
					
					if(null != box.getString("stepDefectOnPalpation") && !box.getString("stepDefectOnPalpation").equals(""))
						opdMaxillofacialTraumaHeader.setStepDefectOnPalpation("Yes");
					else
						opdMaxillofacialTraumaHeader.setStepDefectOnPalpation("No");
					
					
					if(null != box.getString("painAtRest") && !box.getString("painAtRest").equals(""))
						opdMaxillofacialTraumaHeader.setPainAtRest("Yes");
					else
						opdMaxillofacialTraumaHeader.setPainAtRest("No");
					
					
					if(null != box.getString("painOnMouthOpening") && !box.getString("painOnMouthOpening").equals(""))
						opdMaxillofacialTraumaHeader.setPainOnMouthOpening("Yes");
					else
						opdMaxillofacialTraumaHeader.setPainOnMouthOpening("No");
					
					
					if(null != box.getString("swelling") && !box.getString("swelling").equals(""))
						opdMaxillofacialTraumaHeader.setSwelling("Yes");
					else
						opdMaxillofacialTraumaHeader.setSwelling("No");
					
					
					if(null != box.getString("laceration") && !box.getString("laceration").equals(""))
						opdMaxillofacialTraumaHeader.setLaceration("Yes");
					else
						opdMaxillofacialTraumaHeader.setLaceration("No");
					
					
					if(null != box.getString("intraOralBleed") && !box.getString("intraOralBleed").equals(""))
						opdMaxillofacialTraumaHeader.setIntraOralBleed("Yes");
					else
						opdMaxillofacialTraumaHeader.setIntraOralBleed("No");
					
					
					
					if(null != box.getString("trismus") && !box.getString("trismus").equals(""))
						opdMaxillofacialTraumaHeader.setTrismus("Yes");
					else
						opdMaxillofacialTraumaHeader.setTrismus("No");
					
					
					if(null != box.getString("brokenTeeth") && !box.getString("brokenTeeth").equals(""))
						opdMaxillofacialTraumaHeader.setBrokenTeeth("Yes");
					else
						opdMaxillofacialTraumaHeader.setBrokenTeeth("No");
					
					
					if(null != box.getString("lossOfTeeth") && !box.getString("lossOfTeeth").equals(""))
						opdMaxillofacialTraumaHeader.setLossOfTeeth("Yes");
					else
						opdMaxillofacialTraumaHeader.setLossOfTeeth("No");
					
					
					if(null != box.getString("tenderness") && !box.getString("tenderness").equals(""))
						opdMaxillofacialTraumaHeader.setTenderness("Yes");
					else
						opdMaxillofacialTraumaHeader.setTenderness("No");
					
					
					if(null != box.getString("mouthOpening") && !box.getString("mouthOpening").equals(""))
						opdMaxillofacialTraumaHeader.setMouthOpening("Yes");
					else
						opdMaxillofacialTraumaHeader.setMouthOpening("No");
					
					
					if(null != box.getString("lateralJawMovements") && !box.getString("lateralJawMovements").equals(""))
						opdMaxillofacialTraumaHeader.setLateralJawMovements("Yes");
					else
						opdMaxillofacialTraumaHeader.setLateralJawMovements("No");
					
					if(null != box.getString("stepDefect") && !box.getString("stepDefect").equals(""))
						opdMaxillofacialTraumaHeader.setStepDefectRadio("Yes");
					else
						opdMaxillofacialTraumaHeader.setStepDefectRadio("No");
					
					if(null != box.getString("derangedOcclusion") && !box.getString("derangedOcclusion").equals(""))
						opdMaxillofacialTraumaHeader.setDerangedOcclusionRadio("Yes");
					else
						opdMaxillofacialTraumaHeader.setDerangedOcclusionRadio("No");
					
					if(null != box.getString("crepitus") && !box.getString("crepitus").equals(""))
						opdMaxillofacialTraumaHeader.setCrepitusRadio("Yes");
					else
						opdMaxillofacialTraumaHeader.setCrepitusRadio("No");
					
					if(null != box.getString("sublingualHematoma") && !box.getString("sublingualHematoma").equals(""))
						opdMaxillofacialTraumaHeader.setSublingualHematomaRadio("Yes");
					else
						opdMaxillofacialTraumaHeader.setSublingualHematomaRadio("No");
					
					if(null != box.getString("otherRadigraphicValue") && !box.getString("otherRadigraphicValue").equals(""))
						opdMaxillofacialTraumaHeader.setOtherRadigraphicValue(box.getString("otherRadigraphicValue"));
					
					
					
					if(null != box.getString("siteOfFarcture") && !box.getString("siteOfFarcture").equals(""))
						opdMaxillofacialTraumaHeader.setSiteOfFracture(box.getString("siteOfFarcture"));
					
					
					
					if(null != box.getString("radioGraphicDiagnosis") && !box.getString("radioGraphicDiagnosis").equals(""))
						opdMaxillofacialTraumaHeader.setRadioGraphicDiagnosis(box.getString("radioGraphicDiagnosis"));
					
					
					hbt.save(opdMaxillofacialTraumaHeader);
					tnx.commit();
					map.put("opdMaxillofacialTraumaHeader",opdMaxillofacialTraumaHeader);
					int opdMaxillofacialTraumaHeaderId=opdMaxillofacialTraumaHeader.getId();
					if(opdMaxillofacialTraumaHeaderId!=0){
						
						OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
						
						
						
						
						opdPreAssessmentClinicDental.setHin(patient);
						
						
						opdPreAssessmentClinicDental.setVisit(visit);
						
						
						opdPreAssessmentClinicDental.setDepartment(masDepartment);
						
						
						opdPreAssessmentClinicDental.setHospital(masHospital);
						
						opdPreAssessmentClinicDental.setMaxillofacialTraumaHeader(opdMaxillofacialTraumaHeader);
						
						
					// for reading the checkBox value
					if(null != box.getString("data18") && !box.getString("data18").equals(""))
						opdPreAssessmentClinicDental.setTeeth18("y");
					else
						opdPreAssessmentClinicDental.setTeeth18("n");
					// for dropdown value
					String[] teeth_18_valueList=null;
					StringBuilder  tempTeeth_18_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
						teeth_18_valueList=request.getParameterValues("teeth_18_value");
						for(String teeth18Value:teeth_18_valueList){
							tempTeeth_18_value.append(teeth18Value);
							tempTeeth_18_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
					}
					
					if(null != box.getString("data17") && !box.getString("data17").equals(""))
						opdPreAssessmentClinicDental.setTeeth17("y");
					else
						opdPreAssessmentClinicDental.setTeeth17("n");
					
					String[] teeth_17_valueList=null;
					StringBuilder  tempTeeth_17_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
						teeth_17_valueList=request.getParameterValues("teeth_17_value");
						for(String teeth17Value:teeth_17_valueList){
							tempTeeth_17_value.append(teeth17Value);
							tempTeeth_17_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
					}
					
					if(null != box.getString("data16") && !box.getString("data16").equals(""))
						opdPreAssessmentClinicDental.setTeeth16("y");
					else
						opdPreAssessmentClinicDental.setTeeth16("n");
					
					String[] teeth_16_valueList=null;
					StringBuilder  tempTeeth_16_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
						teeth_16_valueList=request.getParameterValues("teeth_16_value");
						for(String teeth16Value:teeth_16_valueList){
							tempTeeth_16_value.append(teeth16Value);
							tempTeeth_16_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
					}
					
					if(null != box.getString("data15") && !box.getString("data15").equals(""))
						opdPreAssessmentClinicDental.setTeeth15("y");
					else
						opdPreAssessmentClinicDental.setTeeth15("n");

					String[] teeth_15_valueList=null;
					StringBuilder  tempTeeth_15_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
						teeth_15_valueList = request.getParameterValues("teeth_15_value");
						for(String teeth15Value : teeth_15_valueList){
							tempTeeth_15_value.append(teeth15Value);
							tempTeeth_15_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
					}
					
					if(null != box.getString("data14") && !box.getString("data14").equals(""))
						opdPreAssessmentClinicDental.setTeeth14("y");
					else
						opdPreAssessmentClinicDental.setTeeth14("n");
					
					String[] teeth_14_valueList=null;
					StringBuilder  tempTeeth_14_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
						teeth_14_valueList=request.getParameterValues("teeth_14_value");
						for(String teeth14Value:teeth_14_valueList){
							tempTeeth_14_value.append(teeth14Value);
							tempTeeth_14_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
					}
					
					if(null != box.getString("data13") && !box.getString("data13").equals(""))
						opdPreAssessmentClinicDental.setTeeth13("y");
					else
						opdPreAssessmentClinicDental.setTeeth13("n");
					
					String[] teeth_13_valueList=null;
					StringBuilder  tempTeeth_13_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
						teeth_13_valueList=request.getParameterValues("teeth_13_value");
						for(String teeth13Value:teeth_13_valueList){
							tempTeeth_13_value.append(teeth13Value);
							tempTeeth_13_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
					}
					
					if(null != box.getString("data12") && !box.getString("data12").equals(""))
						opdPreAssessmentClinicDental.setTeeth12("y");
					else
						opdPreAssessmentClinicDental.setTeeth12("n");
					
					String[] teeth_12_valueList=null;
					StringBuilder  tempTeeth_12_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
						teeth_12_valueList=request.getParameterValues("teeth_12_value");
						for(String teeth12Value:teeth_12_valueList){
							tempTeeth_12_value.append(teeth12Value);
							tempTeeth_12_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
					}
					
					if(null != box.getString("data11") && !box.getString("data11").equals(""))
						opdPreAssessmentClinicDental.setTeeth11("y");
					else
						opdPreAssessmentClinicDental.setTeeth11("n");
					
					String[] teeth_11_valueList=null;
					StringBuilder  tempTeeth_11_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
						teeth_11_valueList=request.getParameterValues("teeth_11_value");
						for(String teeth11Value:teeth_11_valueList){
							tempTeeth_11_value.append(teeth11Value);
							tempTeeth_11_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
					}
					
					if(null != box.getString("data21") && !box.getString("data21").equals(""))
						opdPreAssessmentClinicDental.setTeeth21("y");
					else
						opdPreAssessmentClinicDental.setTeeth21("n");
					
					String[] teeth_21_valueList=null;
					StringBuilder  tempTeeth_21_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
						teeth_21_valueList=request.getParameterValues("teeth_21_value");
						for(String teeth21Value:teeth_21_valueList){
							tempTeeth_21_value.append(teeth21Value);
							tempTeeth_21_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
					}
					
					
					if(null != box.getString("data22") && !box.getString("data22").equals(""))
						opdPreAssessmentClinicDental.setTeeth22("y");
					else
						opdPreAssessmentClinicDental.setTeeth22("n");
					
					String[] teeth_22_valueList=null;
					StringBuilder  tempTeeth_22_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
						teeth_22_valueList=request.getParameterValues("teeth_22_value");
						for(String teeth22Value:teeth_22_valueList){
							tempTeeth_22_value.append(teeth22Value);
							tempTeeth_22_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
					}
					
					if(null != box.getString("data23") && !box.getString("data23").equals(""))
						opdPreAssessmentClinicDental.setTeeth23("y");
					else
						opdPreAssessmentClinicDental.setTeeth23("n");
					
					String[] teeth_23_valueList=null;
					StringBuilder  tempTeeth_23_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
						teeth_23_valueList=request.getParameterValues("teeth_23_value");
						for(String teeth23Value:teeth_23_valueList){
							tempTeeth_23_value.append(teeth23Value);
							tempTeeth_23_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
					}
					
					
					if(null != box.getString("data24") && !box.getString("data24").equals(""))
						opdPreAssessmentClinicDental.setTeeth24("y");
					else
						opdPreAssessmentClinicDental.setTeeth24("n");
					
					String[] teeth_24_valueList=null;
					StringBuilder  tempTeeth_24_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
						teeth_24_valueList=request.getParameterValues("teeth_24_value");
						for(String teeth24Value:teeth_24_valueList){
							tempTeeth_24_value.append(teeth24Value);
							tempTeeth_24_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
					}
					
					if(null != box.getString("data25") && !box.getString("data25").equals(""))
						opdPreAssessmentClinicDental.setTeeth25("y");
					else
						opdPreAssessmentClinicDental.setTeeth25("n");
					
					String[] teeth_25_valueList=null;
					StringBuilder  tempTeeth_25_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
						teeth_25_valueList=request.getParameterValues("teeth_25_value");
						for(String teeth25Value:teeth_25_valueList){
							tempTeeth_25_value.append(teeth25Value);
							tempTeeth_25_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
					}
					
					if(null != box.getString("data26") && !box.getString("data26").equals(""))
						opdPreAssessmentClinicDental.setTeeth26("y");
					else
						opdPreAssessmentClinicDental.setTeeth26("n");
					
					String[] teeth_26_valueList=null;
					StringBuilder  tempTeeth_26_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
						teeth_26_valueList=request.getParameterValues("teeth_26_value");
						for(String teeth26Value:teeth_26_valueList){
							tempTeeth_26_value.append(teeth26Value);
							tempTeeth_26_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
					}
					
					if(null != box.getString("data27") && !box.getString("data27").equals(""))
						opdPreAssessmentClinicDental.setTeeth27("y");
					else
						opdPreAssessmentClinicDental.setTeeth27("n");
					
					String[] teeth_27_valueList=null;
					StringBuilder  tempTeeth_27_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
						teeth_27_valueList=request.getParameterValues("teeth_27_value");
						for(String teeth27Value:teeth_27_valueList){
							tempTeeth_27_value.append(teeth27Value);
							tempTeeth_27_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
					}
					
					if(null != box.getString("data28") && !box.getString("data28").equals(""))
						opdPreAssessmentClinicDental.setTeeth28("y");
					else
						opdPreAssessmentClinicDental.setTeeth28("n");
					
					String[] teeth_28_valueList=null;
					StringBuilder  tempTeeth_28_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
						teeth_28_valueList=request.getParameterValues("teeth_28_value");
						for(String teeth28Value:teeth_28_valueList){
							tempTeeth_28_value.append(teeth28Value);
							tempTeeth_28_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
					}
					
					if(null != box.getString("data48") && !box.getString("data48").equals(""))
						opdPreAssessmentClinicDental.setTeeth48("y");
					else
						opdPreAssessmentClinicDental.setTeeth48("n");
					
					// for dropdown value
					String[] teeth_48_valueList=null;
					StringBuilder  tempTeeth_48_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
						teeth_48_valueList=request.getParameterValues("teeth_48_value");
						for(String teeth48Value:teeth_48_valueList){
							tempTeeth_48_value.append(teeth48Value);
							tempTeeth_48_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
					}
					
					if(null != box.getString("data47") && !box.getString("data47").equals(""))
						opdPreAssessmentClinicDental.setTeeth47("y");
					else
						opdPreAssessmentClinicDental.setTeeth47("n");
					
					String[] teeth_47_valueList=null;
					StringBuilder  tempTeeth_47_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
						teeth_47_valueList=request.getParameterValues("teeth_47_value");
						for(String teeth47Value:teeth_47_valueList){
							tempTeeth_47_value.append(teeth47Value);
							tempTeeth_47_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
					}
					
					if(null != box.getString("data46") && !box.getString("data46").equals(""))
						opdPreAssessmentClinicDental.setTeeth46("y");
					else
						opdPreAssessmentClinicDental.setTeeth46("n");
					
					String[] teeth_46_valueList=null;
					StringBuilder  tempTeeth_46_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
						teeth_46_valueList=request.getParameterValues("teeth_46_value");
						for(String teeth46Value:teeth_46_valueList){
							tempTeeth_46_value.append(teeth46Value);
							tempTeeth_46_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
					}
					
					if(null != box.getString("data45") && !box.getString("data45").equals(""))
						opdPreAssessmentClinicDental.setTeeth45("y");
					else
						opdPreAssessmentClinicDental.setTeeth45("n");

					String[] teeth_45_valueList=null;
					StringBuilder  tempTeeth_45_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
						teeth_45_valueList = request.getParameterValues("teeth_45_value");
						for(String teeth45Value : teeth_45_valueList){
							tempTeeth_45_value.append(teeth45Value);
							tempTeeth_45_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
					}
					
					if(null != box.getString("data44") && !box.getString("data44").equals(""))
						opdPreAssessmentClinicDental.setTeeth44("y");
					else
						opdPreAssessmentClinicDental.setTeeth44("n");
					
					String[] teeth_44_valueList=null;
					StringBuilder  tempTeeth_44_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
						teeth_44_valueList=request.getParameterValues("teeth_44_value");
						for(String teeth44Value:teeth_44_valueList){
							tempTeeth_44_value.append(teeth44Value);
							tempTeeth_44_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
					}
					
					if(null != box.getString("data43") && !box.getString("data43").equals(""))
						opdPreAssessmentClinicDental.setTeeth43("y");
					else
						opdPreAssessmentClinicDental.setTeeth43("n");
					
					String[] teeth_43_valueList=null;
					StringBuilder  tempTeeth_43_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
						teeth_43_valueList=request.getParameterValues("teeth_43_value");
						for(String teeth43Value:teeth_43_valueList){
							tempTeeth_43_value.append(teeth43Value);
							tempTeeth_43_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
					}
					
					if(null != box.getString("data42") && !box.getString("data42").equals(""))
						opdPreAssessmentClinicDental.setTeeth42("y");
					else
						opdPreAssessmentClinicDental.setTeeth42("n");
					
					String[] teeth_42_valueList=null;
					StringBuilder  tempTeeth_42_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
						teeth_42_valueList=request.getParameterValues("teeth_42_value");
						for(String teeth42Value:teeth_42_valueList){
							tempTeeth_42_value.append(teeth42Value);
							tempTeeth_42_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
					}
					
					if(null != box.getString("data41") && !box.getString("data41").equals(""))
						opdPreAssessmentClinicDental.setTeeth41("y");
					else
						opdPreAssessmentClinicDental.setTeeth41("n");
					
					String[] teeth_41_valueList=null;
					StringBuilder  tempTeeth_41_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
						teeth_41_valueList=request.getParameterValues("teeth_41_value");
						for(String teeth41Value:teeth_41_valueList){
							tempTeeth_41_value.append(teeth41Value);
							tempTeeth_41_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
					}
					
					if(null != box.getString("data31") && !box.getString("data31").equals(""))
						opdPreAssessmentClinicDental.setTeeth31("y");
					else
						opdPreAssessmentClinicDental.setTeeth31("n");
					
					String[] teeth_31_valueList=null;
					StringBuilder  tempTeeth_31_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
						teeth_31_valueList=request.getParameterValues("teeth_31_value");
						for(String teeth31Value:teeth_31_valueList){
							tempTeeth_31_value.append(teeth31Value);
							tempTeeth_31_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
					}
					
					
					if(null != box.getString("data32") && !box.getString("data32").equals(""))
						opdPreAssessmentClinicDental.setTeeth32("y");
					else
						opdPreAssessmentClinicDental.setTeeth32("n");
					
					String[] teeth_32_valueList=null;
					StringBuilder  tempTeeth_32_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
						teeth_32_valueList=request.getParameterValues("teeth_32_value");
						for(String teeth32Value:teeth_32_valueList){
							tempTeeth_32_value.append(teeth32Value);
							tempTeeth_32_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
					}
					
					if(null != box.getString("data33") && !box.getString("data33").equals(""))
						opdPreAssessmentClinicDental.setTeeth33("y");
					else
						opdPreAssessmentClinicDental.setTeeth33("n");
					
					String[] teeth_33_valueList=null;
					StringBuilder  tempTeeth_33_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
						teeth_33_valueList=request.getParameterValues("teeth_33_value");
						for(String teeth33Value:teeth_33_valueList){
							tempTeeth_33_value.append(teeth33Value);
							tempTeeth_33_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
					}
					
					
					if(null != box.getString("data34") && !box.getString("data34").equals(""))
						opdPreAssessmentClinicDental.setTeeth34("y");
					else
						opdPreAssessmentClinicDental.setTeeth34("n");
					
					String[] teeth_34_valueList=null;
					StringBuilder  tempTeeth_34_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
						teeth_34_valueList=request.getParameterValues("teeth_34_value");
						for(String teeth34Value:teeth_34_valueList){
							tempTeeth_34_value.append(teeth34Value);
							tempTeeth_34_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
					}
					
					if(null != box.getString("data35") && !box.getString("data35").equals(""))
						opdPreAssessmentClinicDental.setTeeth35("y");
					else
						opdPreAssessmentClinicDental.setTeeth35("n");
					
					String[] teeth_35_valueList=null;
					StringBuilder  tempTeeth_35_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
						teeth_35_valueList=request.getParameterValues("teeth_35_value");
						for(String teeth35Value:teeth_35_valueList){
							tempTeeth_35_value.append(teeth35Value);
							tempTeeth_35_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
					}
					
					if(null != box.getString("data36") && !box.getString("data36").equals(""))
						opdPreAssessmentClinicDental.setTeeth36("y");
					else
						opdPreAssessmentClinicDental.setTeeth36("n");
					
					String[] teeth_36_valueList=null;
					StringBuilder  tempTeeth_36_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
						teeth_36_valueList=request.getParameterValues("teeth_36_value");
						for(String teeth36Value:teeth_36_valueList){
							tempTeeth_36_value.append(teeth36Value);
							tempTeeth_36_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
					}
					
					if(null != box.getString("data37") && !box.getString("data37").equals(""))
						opdPreAssessmentClinicDental.setTeeth37("y");
					else
						opdPreAssessmentClinicDental.setTeeth37("n");
					
					String[] teeth_37_valueList=null;
					StringBuilder  tempTeeth_37_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
						teeth_37_valueList=request.getParameterValues("teeth_37_value");
						for(String teeth37Value:teeth_37_valueList){
							tempTeeth_37_value.append(teeth37Value);
							tempTeeth_37_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
					}
					
					if(null != box.getString("data38") && !box.getString("data38").equals(""))
						opdPreAssessmentClinicDental.setTeeth38("y");
					else
						opdPreAssessmentClinicDental.setTeeth38("n");
					
					String[] teeth_38_valueList=null;
					StringBuilder  tempTeeth_38_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
						teeth_38_valueList=request.getParameterValues("teeth_38_value");
						for(String teeth38Value:teeth_38_valueList){
							tempTeeth_38_value.append(teeth38Value);
							tempTeeth_38_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
					}
					
					if(null != box.getString("data51") && !box.getString("data51").equals(""))
						opdPreAssessmentClinicDental.setTeeth51("y");
					else
						opdPreAssessmentClinicDental.setTeeth51("n");
					
					String[] teeth_51_valueList=null;
					StringBuilder  tempTeeth_51_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_51_value") && !request.getParameterValues("teeth_51_value").equals("")){
						teeth_51_valueList=request.getParameterValues("teeth_51_value");
						for(String teeth51Value:teeth_51_valueList){
							tempTeeth_51_value.append(teeth51Value);
							tempTeeth_51_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth51Value(tempTeeth_51_value.toString());
					}
					
					
					if(null != box.getString("data52") && !box.getString("data52").equals(""))
						opdPreAssessmentClinicDental.setTeeth52("y");
					else
						opdPreAssessmentClinicDental.setTeeth52("n");
					
					String[] teeth_52_valueList=null;
					StringBuilder  tempTeeth_52_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_52_value") && !request.getParameterValues("teeth_52_value").equals("")){
						teeth_52_valueList=request.getParameterValues("teeth_52_value");
						for(String teeth52Value:teeth_52_valueList){
							tempTeeth_52_value.append(teeth52Value);
							tempTeeth_52_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth52Value(tempTeeth_52_value.toString());
					}
					
					if(null != box.getString("data53") && !box.getString("data53").equals(""))
						opdPreAssessmentClinicDental.setTeeth53("y");
					else
						opdPreAssessmentClinicDental.setTeeth53("n");
					
					String[] teeth_53_valueList=null;
					StringBuilder  tempTeeth_53_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_53_value") && !request.getParameterValues("teeth_53_value").equals("")){
						teeth_53_valueList=request.getParameterValues("teeth_53_value");
						for(String teeth53Value:teeth_53_valueList){
							tempTeeth_53_value.append(teeth53Value);
							tempTeeth_53_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth53Value(tempTeeth_53_value.toString());
					}
					
					
					if(null != box.getString("data54") && !box.getString("data54").equals(""))
						opdPreAssessmentClinicDental.setTeeth54("y");
					else
						opdPreAssessmentClinicDental.setTeeth54("n");
					
					String[] teeth_54_valueList=null;
					StringBuilder  tempTeeth_54_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_54_value") && !request.getParameterValues("teeth_54_value").equals("")){
						teeth_54_valueList=request.getParameterValues("teeth_54_value");
						for(String teeth54Value:teeth_54_valueList){
							tempTeeth_54_value.append(teeth54Value);
							tempTeeth_54_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth54Value(tempTeeth_54_value.toString());
					}
					
					if(null != box.getString("data55") && !box.getString("data55").equals(""))
						opdPreAssessmentClinicDental.setTeeth55("y");
					else
						opdPreAssessmentClinicDental.setTeeth55("n");
					
					String[] teeth_55_valueList=null;
					StringBuilder  tempTeeth_55_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_55_value") && !request.getParameterValues("teeth_55_value").equals("")){
						teeth_55_valueList=request.getParameterValues("teeth_55_value");
						for(String teeth55Value:teeth_55_valueList){
							tempTeeth_55_value.append(teeth55Value);
							tempTeeth_55_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth55Value(tempTeeth_55_value.toString());
					}
					
					
					if(null != box.getString("data61") && !box.getString("data61").equals(""))
						opdPreAssessmentClinicDental.setTeeth61("y");
					else
						opdPreAssessmentClinicDental.setTeeth61("n");
					
					String[] teeth_61_valueList=null;
					StringBuilder  tempTeeth_61_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_61_value") && !request.getParameterValues("teeth_61_value").equals("")){
						teeth_61_valueList=request.getParameterValues("teeth_61_value");
						for(String teeth61Value:teeth_61_valueList){
							tempTeeth_61_value.append(teeth61Value);
							tempTeeth_61_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth61Value(tempTeeth_61_value.toString());
					}
					
					
					if(null != box.getString("data62") && !box.getString("data62").equals(""))
						opdPreAssessmentClinicDental.setTeeth62("y");
					else
						opdPreAssessmentClinicDental.setTeeth62("n");
					
					String[] teeth_62_valueList=null;
					StringBuilder  tempTeeth_62_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_62_value") && !request.getParameterValues("teeth_62_value").equals("")){
						teeth_62_valueList=request.getParameterValues("teeth_62_value");
						for(String teeth62Value:teeth_62_valueList){
							tempTeeth_62_value.append(teeth62Value);
							tempTeeth_62_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth62Value(tempTeeth_62_value.toString());
					}
					
					if(null != box.getString("data63") && !box.getString("data63").equals(""))
						opdPreAssessmentClinicDental.setTeeth63("y");
					else
						opdPreAssessmentClinicDental.setTeeth63("n");
					
					String[] teeth_63_valueList=null;
					StringBuilder  tempTeeth_63_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_63_value") && !request.getParameterValues("teeth_63_value").equals("")){
						teeth_63_valueList=request.getParameterValues("teeth_63_value");
						for(String teeth63Value:teeth_63_valueList){
							tempTeeth_63_value.append(teeth63Value);
							tempTeeth_63_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth63Value(tempTeeth_63_value.toString());
					}
					
					
					if(null != box.getString("data64") && !box.getString("data64").equals(""))
						opdPreAssessmentClinicDental.setTeeth64("y");
					else
						opdPreAssessmentClinicDental.setTeeth64("n");
					
					String[] teeth_64_valueList=null;
					StringBuilder  tempTeeth_64_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_64_value") && !request.getParameterValues("teeth_64_value").equals("")){
						teeth_64_valueList=request.getParameterValues("teeth_64_value");
						for(String teeth64Value:teeth_64_valueList){
							tempTeeth_64_value.append(teeth64Value);
							tempTeeth_64_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth64Value(tempTeeth_64_value.toString());
					}
					
					if(null != box.getString("data65") && !box.getString("data65").equals(""))
						opdPreAssessmentClinicDental.setTeeth65("y");
					else
						opdPreAssessmentClinicDental.setTeeth65("n");
					
					String[] teeth_65_valueList=null;
					StringBuilder  tempTeeth_65_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_65_value") && !request.getParameterValues("teeth_65_value").equals("")){
						teeth_65_valueList=request.getParameterValues("teeth_65_value");
						for(String teeth65Value:teeth_65_valueList){
							tempTeeth_65_value.append(teeth65Value);
							tempTeeth_65_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth65Value(tempTeeth_65_value.toString());
					}
					
					if(null != box.getString("data81") && !box.getString("data81").equals(""))
						opdPreAssessmentClinicDental.setTeeth81("y");
					else
						opdPreAssessmentClinicDental.setTeeth81("n");
					
					String[] teeth_81_valueList=null;
					StringBuilder  tempTeeth_81_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_81_value") && !request.getParameterValues("teeth_81_value").equals("")){
						teeth_81_valueList=request.getParameterValues("teeth_81_value");
						for(String teeth81Value:teeth_81_valueList){
							tempTeeth_81_value.append(teeth81Value);
							tempTeeth_81_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth81Value(tempTeeth_81_value.toString());
					}
					
					
					if(null != box.getString("data82") && !box.getString("data82").equals(""))
						opdPreAssessmentClinicDental.setTeeth82("y");
					else
						opdPreAssessmentClinicDental.setTeeth82("n");
					
					String[] teeth_82_valueList=null;
					StringBuilder  tempTeeth_82_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_82_value") && !request.getParameterValues("teeth_82_value").equals("")){
						teeth_82_valueList=request.getParameterValues("teeth_82_value");
						for(String teeth82Value:teeth_82_valueList){
							tempTeeth_82_value.append(teeth82Value);
							tempTeeth_82_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth82Value(tempTeeth_82_value.toString());
					}
					
					if(null != box.getString("data83") && !box.getString("data83").equals(""))
						opdPreAssessmentClinicDental.setTeeth83("y");
					else
						opdPreAssessmentClinicDental.setTeeth83("n");
					
					String[] teeth_83_valueList=null;

					StringBuilder  tempTeeth_83_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_83_value") && !request.getParameterValues("teeth_83_value").equals("")){
						teeth_83_valueList=request.getParameterValues("teeth_83_value");
						for(String teeth83Value:teeth_83_valueList){
							tempTeeth_83_value.append(teeth83Value);
							tempTeeth_83_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth83Value(tempTeeth_83_value.toString());
					}
					
					
					if(null != box.getString("data84") && !box.getString("data84").equals(""))
						opdPreAssessmentClinicDental.setTeeth84("y");
					else
						opdPreAssessmentClinicDental.setTeeth84("n");
					
					String[] teeth_84_valueList=null;
					StringBuilder  tempTeeth_84_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_84_value") && !request.getParameterValues("teeth_84_value").equals("")){
						teeth_84_valueList=request.getParameterValues("teeth_84_value");
						for(String teeth84Value:teeth_84_valueList){
							tempTeeth_84_value.append(teeth84Value);
							tempTeeth_84_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth84Value(tempTeeth_84_value.toString());
					}
					
					if(null != box.getString("data85") && !box.getString("data85").equals(""))
						opdPreAssessmentClinicDental.setTeeth85("y");
					else
						opdPreAssessmentClinicDental.setTeeth85("n");
					
					String[] teeth_85_valueList=null;
					StringBuilder  tempTeeth_85_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_85_value") && !request.getParameterValues("teeth_85_value").equals("")){
						teeth_85_valueList=request.getParameterValues("teeth_85_value");
						for(String teeth85Value:teeth_85_valueList){
							tempTeeth_85_value.append(teeth85Value);
							tempTeeth_85_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth85Value(tempTeeth_85_value.toString());
					}
					

					if(null != box.getString("data71") && !box.getString("data71").equals(""))
						opdPreAssessmentClinicDental.setTeeth71("y");
					else
						opdPreAssessmentClinicDental.setTeeth71("n");
					
					String[] teeth_71_valueList=null;
					StringBuilder  tempTeeth_71_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_71_value") && !request.getParameterValues("teeth_71_value").equals("")){
						teeth_71_valueList=request.getParameterValues("teeth_71_value");
						for(String teeth71Value:teeth_71_valueList){
							tempTeeth_71_value.append(teeth71Value);
							tempTeeth_71_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth71Value(tempTeeth_71_value.toString());
					}
					
					
					if(null != box.getString("data72") && !box.getString("data72").equals(""))
						opdPreAssessmentClinicDental.setTeeth72("y");
					else
						opdPreAssessmentClinicDental.setTeeth72("n");
					
					String[] teeth_72_valueList=null;
					StringBuilder  tempTeeth_72_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_72_value") && !request.getParameterValues("teeth_72_value").equals("")){
						teeth_72_valueList=request.getParameterValues("teeth_72_value");
						for(String teeth72Value:teeth_72_valueList){
							tempTeeth_72_value.append(teeth72Value);
							tempTeeth_72_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth72Value(tempTeeth_72_value.toString());
					}
					
					if(null != box.getString("data73") && !box.getString("data73").equals(""))
						opdPreAssessmentClinicDental.setTeeth73("y");
					else
						opdPreAssessmentClinicDental.setTeeth73("n");
					
					String[] teeth_73_valueList=null;
					StringBuilder  tempTeeth_73_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_73_value") && !request.getParameterValues("teeth_73_value").equals("")){
						teeth_73_valueList=request.getParameterValues("teeth_73_value");
						for(String teeth73Value:teeth_73_valueList){
							tempTeeth_73_value.append(teeth73Value);
							tempTeeth_73_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth73Value(tempTeeth_73_value.toString());
					}
					
					
					if(null != box.getString("data74") && !box.getString("data74").equals(""))
						opdPreAssessmentClinicDental.setTeeth74("y");
					else
						opdPreAssessmentClinicDental.setTeeth74("n");
					
					String[] teeth_74_valueList=null;
					StringBuilder  tempTeeth_74_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_74_value") && !request.getParameterValues("teeth_74_value").equals("")){
						teeth_74_valueList=request.getParameterValues("teeth_74_value");
						for(String teeth74Value:teeth_74_valueList){
							tempTeeth_74_value.append(teeth74Value);
							tempTeeth_74_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth74Value(tempTeeth_74_value.toString());
					}
					
					if(null != box.getString("data75") && !box.getString("data75").equals(""))
						opdPreAssessmentClinicDental.setTeeth75("y");
					else
						opdPreAssessmentClinicDental.setTeeth75("n");
					
					String[] teeth_75_valueList=null;
					StringBuilder  tempTeeth_75_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_75_value") && !request.getParameterValues("teeth_75_value").equals("")){
						teeth_75_valueList=request.getParameterValues("teeth_75_value");
						for(String teeth75Value:teeth_75_valueList){
							tempTeeth_75_value.append(teeth75Value);
							tempTeeth_75_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth75Value(tempTeeth_75_value.toString());
					}
					hbt.save(opdPreAssessmentClinicDental);
					tnx.commit();
					map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
					}
				}catch(Exception e){
					e.printStackTrace();
				}
				return map;
			}

		

			@Override
			public Map<String, Object> saveCaseRecordOfPeriodontics(
					Map<String, Object> mapForDs, Box box,
					HttpServletRequest request) {
				Map<String, Object> map = new HashMap<String, Object>();
				MasSpecialtyTemplate masSpecialtyTemplate = null;
				Transaction tnx=null;
				try{
					Session session = (Session) getSession();
					tnx=session.beginTransaction();
					HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					OpdCaseRecordPeriodonticsHeader opdCaseRecordPeriodonticsHeader = new OpdCaseRecordPeriodonticsHeader();
					
					Integer hinId=0;
					Integer departmentId=0;
					Integer visitId=0;
					Integer hospitalId=0;
					Integer specialtyId=0;
					Integer userId=0;
					String templateName = "";
					
					if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
						hinId = (Integer) mapForDs.get("hinId");
					}
					if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
						visitId = (Integer) mapForDs.get("visitId");
					}
					if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
						departmentId = (Integer) mapForDs.get("departmentId");
					}
					if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
						hospitalId = (Integer) mapForDs.get("hospitalId");
					}
					if(map.get("userId")!=null){
						userId=(Integer)  map.get("userId");	
					}
					
					if(map.get("specialtyId")!=null){
						specialtyId=(Integer)  map.get("specialtyId");	
					}
					if(map.get("templateName")!=null){
						templateName=(String)  map.get("templateName");	
					}
					
					Patient patient = new Patient();
					patient.setId(hinId);
					opdCaseRecordPeriodonticsHeader.setHin(patient);
					
					Visit visit = new Visit();
					visit.setId(visitId);
					opdCaseRecordPeriodonticsHeader.setVisit(visit);
					
					MasDepartment masDepartment = new MasDepartment();
					masDepartment.setId(departmentId);
					opdCaseRecordPeriodonticsHeader.setDepartment(masDepartment);
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);
					opdCaseRecordPeriodonticsHeader.setHospital(masHospital);
					
					
					if(null != box.getString("chiefComplaint") && !box.getString("chiefComplaint").equals(""))
						opdCaseRecordPeriodonticsHeader.setChiefComplaint(box.getString("chiefComplaint"));
				
					if(null != box.getString("historyOfPresentIllness") && !box.getString("historyOfPresentIllness").equals(""))
						opdCaseRecordPeriodonticsHeader.setHistoryOfPresentIllness(box.getString("historyOfPresentIllness"));
				

					if(null != box.getString("abnormalBleedingTendancy") && !box.getString("abnormalBleedingTendancy").equals(""))
						opdCaseRecordPeriodonticsHeader.setAbnormalBleedingTendancy(box.getString("abnormalBleedingTendancy"));
				
					

					if(null != box.getString("habits") && !box.getString("habits").equals(""))
						opdCaseRecordPeriodonticsHeader.setHabits(box.getString("habits"));
				
					String[] parafunctionalHabitsList=null;
					StringBuilder  tempparafunctionalHabits=new StringBuilder();
					if(null != request.getParameterValues("parafunctionalHabits") && !request.getParameterValues("parafunctionalHabits").equals("")){
						parafunctionalHabitsList=request.getParameterValues("parafunctionalHabits");
						for(String parafunctionalHabitsValue:parafunctionalHabitsList){
							tempparafunctionalHabits.append(parafunctionalHabitsValue);
							tempparafunctionalHabits.append(",");
						}
						opdCaseRecordPeriodonticsHeader.setParaFunctionalHabits(tempparafunctionalHabits.toString());
					}
				
							String[] maxillaryAttachmentList=null;
					StringBuilder  tempmaxillaryAttachment=new StringBuilder();
					if(null != request.getParameterValues("maxillaryAttachment") && !request.getParameterValues("maxillaryAttachment").equals("")){
						maxillaryAttachmentList=request.getParameterValues("maxillaryAttachment");
						for(String maxillaryAttachmentValue:maxillaryAttachmentList){
							tempmaxillaryAttachment.append(maxillaryAttachmentValue);
							tempmaxillaryAttachment.append(",");
						}
						opdCaseRecordPeriodonticsHeader.setMaxillaryAttachment(tempmaxillaryAttachment.toString());
					}
					String[] mandibularAttachmentList=null;
					StringBuilder  tempmandibularAttachment=new StringBuilder();
					if(null != request.getParameterValues("mandibularAttachment") && !request.getParameterValues("mandibularAttachment").equals("")){
						mandibularAttachmentList=request.getParameterValues("mandibularAttachment");
						for(String mandibularAttachmentValue:mandibularAttachmentList){
							tempmandibularAttachment.append(mandibularAttachmentValue);
							tempmandibularAttachment.append(",");
						}
						opdCaseRecordPeriodonticsHeader.setMandibularAttachment(tempmandibularAttachment.toString());
					}
				
				
					
					String[] medicalStatusList=null;
					StringBuilder  tempmedicalStatus=new StringBuilder();
					if(null != request.getParameterValues("medicalStatus") && !request.getParameterValues("medicalStatus").equals("")){
						medicalStatusList=request.getParameterValues("medicalStatus");
						for(String medicalStatusValue:medicalStatusList){
							tempmedicalStatus.append(medicalStatusValue);
							tempmedicalStatus.append(",");
						}
						opdCaseRecordPeriodonticsHeader.setMedicalStatus(tempmedicalStatus.toString());
					}
					
					
					
					

					if(null != box.getString("fequency") && !box.getString("fequency").equals(""))
						opdCaseRecordPeriodonticsHeader.setFequency(box.getString("fequency"));

					if(null != box.getString("dentrifices") && !box.getString("dentrifices").equals(""))
						opdCaseRecordPeriodonticsHeader.setDentrifices(box.getString("dentrifices"));
				

					if(null != box.getString("method") && !box.getString("method").equals(""))
						opdCaseRecordPeriodonticsHeader.setMethod(box.getString("method"));
				

					if(null != box.getString("adverseHabits") && !box.getString("adverseHabits").equals(""))
						opdCaseRecordPeriodonticsHeader.setAdverseHabits(box.getString("adverseHabits"));
				

				/*	if(null != box.getString("parafunctionalHabits") && !box.getString("parafunctionalHabits").equals(""))
						opdCaseRecordPeriodonticsHeader.setParaFunctionalHabits(box.getString("parafunctionalHabits"));
				
*/
					if(null != box.getString("cyanosis") && !box.getString("cyanosis").equals(""))
						opdCaseRecordPeriodonticsHeader.setCyanosis(box.getString("cyanosis"));
				

					if(null != box.getString("icterus") && !box.getString("icterus").equals(""))
						opdCaseRecordPeriodonticsHeader.setIcterus(box.getString("icterus"));
				

					if(null != box.getString("clubbing") && !box.getString("clubbing").equals(""))
						opdCaseRecordPeriodonticsHeader.setClubbing(box.getString("clubbing"));
				

					if(null != box.getString("facialSymmetry") && !box.getString("facialSymmetry").equals(""))
						opdCaseRecordPeriodonticsHeader.setFacialSymmetry(box.getString("facialSymmetry"));
				

					if(null != box.getString("eyesEarsNose") && !box.getString("eyesEarsNose").equals(""))
						opdCaseRecordPeriodonticsHeader.setEyesEarsNose(box.getString("eyesEarsNose"));
				

					if(null != box.getString("lipCompetance") && !box.getString("lipCompetance").equals(""))
						opdCaseRecordPeriodonticsHeader.setLipCompetance(box.getString("lipCompetance"));
				

					if(null != box.getString("tmjExamination") && !box.getString("tmjExamination").equals(""))
						opdCaseRecordPeriodonticsHeader.setTmjExamination(box.getString("tmjExamination"));
				

					if(null != box.getString("lymphNodeExamination") && !box.getString("lymphNodeExamination").equals(""))
						opdCaseRecordPeriodonticsHeader.setLymphNodeExamination(box.getString("lymphNodeExamination"));
				

					if(null != box.getString("others") && !box.getString("others").equals(""))
						opdCaseRecordPeriodonticsHeader.setOthers(box.getString("others"));
				

					if(null != box.getString("buccalMucosa") && !box.getString("buccalMucosa").equals(""))
						opdCaseRecordPeriodonticsHeader.setBuccalMucosa(box.getString("buccalMucosa"));
				

					if(null != box.getString("labialMucosa") && !box.getString("labialMucosa").equals(""))
						opdCaseRecordPeriodonticsHeader.setLabialMucosa(box.getString("labialMucosa"));
				

					if(null != box.getString("tongue") && !box.getString("tongue").equals(""))
						opdCaseRecordPeriodonticsHeader.setTongue(box.getString("tongue"));
				

					if(null != box.getString("hardPalate") && !box.getString("hardPalate").equals(""))
						opdCaseRecordPeriodonticsHeader.setHardPalate(box.getString("hardPalate"));
				

					if(null != box.getString("softPalate") && !box.getString("softPalate").equals(""))
						opdCaseRecordPeriodonticsHeader.setSoftPalate(box.getString("softPalate"));

					if(null != box.getString("floorOfMouth") && !box.getString("floorOfMouth").equals(""))
						opdCaseRecordPeriodonticsHeader.setFloorOfMouth(box.getString("floorOfMouth"));
				

					if(null != box.getString("tonsils") && !box.getString("tonsils").equals(""))
						opdCaseRecordPeriodonticsHeader.setTonsils(box.getString("tonsils"));
				

					if(null != box.getString("frenalAttachment") && !box.getString("frenalAttachment").equals(""))
						opdCaseRecordPeriodonticsHeader.setFrenalAttachment(box.getString("frenalAttachment"));
				

					/*if(null != box.getString("maxillaryAttachment") && !box.getString("maxillaryAttachment").equals(""))
						opdCaseRecordPeriodonticsHeader.setMaxillaryAttachment(box.getString("maxillaryAttachment"));
				*/

					if(null != box.getString("tensionTest1") && !box.getString("tensionTest1").equals(""))
						opdCaseRecordPeriodonticsHeader.setTensionTest1(box.getString("tensionTest1"));
				

				/*	if(null != box.getString("mandibularAttachment") && !box.getString("mandibularAttachment").equals(""))
						opdCaseRecordPeriodonticsHeader.setMandibularAttachment(box.getString("mandibularAttachment"));
				*/

					if(null != box.getString("tensionTest2") && !box.getString("tensionTest2").equals(""))
						opdCaseRecordPeriodonticsHeader.setTensionTest2(box.getString("tensionTest2"));
				

					if(null != box.getString("mucogingivalProblems") && !box.getString("mucogingivalProblems").equals(""))
						opdCaseRecordPeriodonticsHeader.setMucogingivalProblems(box.getString("mucogingivalProblems"));
				

					if(null != box.getString("tensionTest") && !box.getString("tensionTest").equals(""))
						opdCaseRecordPeriodonticsHeader.setTensionTest(box.getString("tensionTest"));
				

					if(null != box.getString("attachedGingiva") && !box.getString("attachedGingiva").equals(""))
						opdCaseRecordPeriodonticsHeader.setAttachedGingiva(box.getString("attachedGingiva"));
				

					if(null != box.getString("vestibularDepth") && !box.getString("vestibularDepth").equals(""))
						opdCaseRecordPeriodonticsHeader.setVestibularDepth(box.getString("vestibularDepth"));
				

					if(null != box.getString("ulceration") && !box.getString("ulceration").equals(""))
						opdCaseRecordPeriodonticsHeader.setUlceration(box.getString("ulceration"));
				

					if(null != box.getString("gingivalAbscess") && !box.getString("gingivalAbscess").equals(""))
						opdCaseRecordPeriodonticsHeader.setGingivalAbscess(box.getString("gingivalAbscess"));
				

					if(null != box.getString("periodontalAbscess") && !box.getString("periodontalAbscess").equals(""))
						opdCaseRecordPeriodonticsHeader.setPeriodontalAbscess(box.getString("periodontalAbscess"));
				

					if(null != box.getString("pericoronnalAbscess") && !box.getString("pericoronnalAbscess").equals(""))
						opdCaseRecordPeriodonticsHeader.setPericoronnalAbscess(box.getString("pericoronnalAbscess"));
				
					
					if(null != box.getString("hardTissueExamination") && !box.getString("hardTissueExamination").equals(""))
						opdCaseRecordPeriodonticsHeader.setHardTissueExamination(box.getString("hardTissueExamination"));
				
					
				
				
					if(null != box.getString("missingTeeth") && !box.getString("missingTeeth").equals(""))
						opdCaseRecordPeriodonticsHeader.setMissingTeethAndReasonForIT(box.getString("missingTeeth"));
				
					
					if(null != box.getString("anglesClassification") && !box.getString("anglesClassification").equals(""))
						opdCaseRecordPeriodonticsHeader.setAnglesClassification(box.getString("anglesClassification"));
				
					
					if(null != box.getString("overjet") && !box.getString("overjet").equals(""))
						opdCaseRecordPeriodonticsHeader.setOverjet(box.getString("overjet"));
				
					
					if(null != box.getString("overbite") && !box.getString("overbite").equals(""))
						opdCaseRecordPeriodonticsHeader.setOverbite(box.getString("overbite"));
				
					
					if(null != box.getString("crossbite") && !box.getString("crossbite").equals(""))
						opdCaseRecordPeriodonticsHeader.setCrossbite(box.getString("crossbite"));
				
					if(null != box.getString("prematureContacts") && !box.getString("prematureContacts").equals(""))
						opdCaseRecordPeriodonticsHeader.setPrematureContacts(box.getString("prematureContacts"));
				
					
					if(null != box.getString("fremitus") && !box.getString("fremitus").equals(""))
						opdCaseRecordPeriodonticsHeader.setFremitus(box.getString("fremitus"));
				
					
					if(null != box.getString("fremitusVal") && !box.getString("fremitusVal").equals(""))
						opdCaseRecordPeriodonticsHeader.setFremitusVal(box.getString("fremitusVal"));
				
					
					if(null != box.getString("workingSide") && !box.getString("workingSide").equals(""))
						opdCaseRecordPeriodonticsHeader.setWorkingSide(box.getString("workingSide"));
				
					
					if(null != box.getString("balancingSide") && !box.getString("balancingSide").equals(""))
						opdCaseRecordPeriodonticsHeader.setBalancingSide(box.getString("balancingSide"));
				
					
					if(null != box.getString("mobility") && !box.getString("mobility").equals(""))
						opdCaseRecordPeriodonticsHeader.setMobility(box.getString("mobility"));
				
					
					if(null != box.getString("mobilityVal") && !box.getString("mobilityVal").equals(""))
						opdCaseRecordPeriodonticsHeader.setMobilityVal(box.getString("mobilityVal"));
				
					
					if(null != box.getString("furcationInvolvement") && !box.getString("furcationInvolvement").equals(""))
						opdCaseRecordPeriodonticsHeader.setFurcationInvolvement(box.getString("furcationInvolvement"));
				
					if(null != box.getString("furcationInvolvementVal") && !box.getString("furcationInvolvementVal").equals(""))
						opdCaseRecordPeriodonticsHeader.setFurcationInvolvementVal(box.getString("furcationInvolvementVal"));
				
					

					if(null != box.getString("attrition") && !box.getString("attrition").equals(""))
						opdCaseRecordPeriodonticsHeader.setAttrition(box.getString("attrition"));
				
					
					

					if(null != box.getString("abrasion") && !box.getString("abrasion").equals(""))
						opdCaseRecordPeriodonticsHeader.setAbrasion(box.getString("abrasion"));

					if(null != box.getString("erosion") && !box.getString("erosion").equals(""))
						opdCaseRecordPeriodonticsHeader.setErosion(box.getString("erosion"));

					if(null != box.getString("abfractioin") && !box.getString("abfractioin").equals(""))
						opdCaseRecordPeriodonticsHeader.setAbfractioin(box.getString("abfractioin"));

					if(null != box.getString("filledTeeth") && !box.getString("filledTeeth").equals(""))
						opdCaseRecordPeriodonticsHeader.setFilledTeeth(box.getString("filledTeeth"));

					if(null != box.getString("toothFracture") && !box.getString("toothFracture").equals(""))
						opdCaseRecordPeriodonticsHeader.setToothFracture(box.getString("toothFracture"));

					if(null != box.getString("hypoplasiaFlurosis") && !box.getString("hypoplasiaFlurosis").equals(""))
						opdCaseRecordPeriodonticsHeader.setHypoplasiaFlurosis(box.getString("hypoplasiaFlurosis"));

					if(null != box.getString("preOperative1") && !box.getString("preOperative1").equals(""))
						opdCaseRecordPeriodonticsHeader.setStudyModelsPreOperative(box.getString("preOperative1"));
					

					if(null != box.getString("postOperative1") && !box.getString("postOperative1").equals(""))
						opdCaseRecordPeriodonticsHeader.setStudyModelsPostOperative(box.getString("postOperative1"));
					
					
					

					if(null != box.getString("preOperative3") && !box.getString("preOperative3").equals(""))
						opdCaseRecordPeriodonticsHeader.setPhotographsPreOperative(box.getString("preOperative3"));
					

					if(null != box.getString("postOperative2") && !box.getString("postOperative2").equals(""))
						opdCaseRecordPeriodonticsHeader.setPhotographsPostOperative(box.getString("postOperative2"));
					

					if(null != box.getString("iopaView") && !box.getString("iopaView").equals(""))
						opdCaseRecordPeriodonticsHeader.setIOPAView(box.getString("iopaView"));
					

					if(null != box.getString("opgView") && !box.getString("opgView").equals(""))
						opdCaseRecordPeriodonticsHeader.setOPGView(box.getString("opgView"));
					

					if(null != box.getString("others1") && !box.getString("others1").equals(""))
						opdCaseRecordPeriodonticsHeader.setOthers(box.getString("others1"));
					

					hbt.save(opdCaseRecordPeriodonticsHeader);
					//tnx.commit();
					map.put("opdCaseRecordPeriodonticsHeader",opdCaseRecordPeriodonticsHeader);
					//int caseRecordPeriodonticsHeaderId=opdCaseRecordPeriodonticsHeader.getId();
					if((!box.getString("data18").equals(""))||(!box.getString("data17").equals(""))||(!box.getString("data16").equals(""))||(!box.getString("data15").equals(""))||
							(!box.getString("data14").equals(""))||(!box.getString("data47").equals(""))||(!box.getString("data31").equals(""))||(!box.getString("data38").equals(""))||
							(!box.getString("data21").equals(""))||(!box.getString("data46").equals(""))||(!box.getString("data32").equals(""))||
							(!box.getString("data22").equals(""))||(!box.getString("data45").equals(""))||(!box.getString("data33").equals(""))||
							(!box.getString("data23").equals(""))||(!box.getString("data44").equals(""))||(!box.getString("data34").equals(""))||
							(!box.getString("data24").equals(""))||(!box.getString("data43").equals(""))||(!box.getString("data35").equals(""))||
							(!box.getString("data25").equals(""))||(!box.getString("data42").equals(""))||(!box.getString("data36").equals(""))||
							(!box.getString("data48").equals(""))||(!box.getString("data41").equals(""))||(!box.getString("data37").equals(""))){
						
						OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
						
						opdPreAssessmentClinicDental.setHin(patient);
						
						
						opdPreAssessmentClinicDental.setVisit(visit);
						
						
						opdPreAssessmentClinicDental.setDepartment(masDepartment);
						
						
						opdPreAssessmentClinicDental.setHospital(masHospital);
						
						opdPreAssessmentClinicDental.setCaseRecordPeriodonticsHeader(opdCaseRecordPeriodonticsHeader);
						
						
					// for reading the checkBox value
					if(null != box.getString("data18") && !box.getString("data18").equals(""))
						opdPreAssessmentClinicDental.setTeeth18("y");
					else
						opdPreAssessmentClinicDental.setTeeth18("n");
					// for dropdown value
					String[] teeth_18_valueList=null;
					StringBuilder  tempTeeth_18_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
						teeth_18_valueList=request.getParameterValues("teeth_18_value");
						for(String teeth18Value:teeth_18_valueList){
							tempTeeth_18_value.append(teeth18Value);
							tempTeeth_18_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
					}
					
					if(null != box.getString("data17") && !box.getString("data17").equals(""))
						opdPreAssessmentClinicDental.setTeeth17("y");
					else
						opdPreAssessmentClinicDental.setTeeth17("n");
					
					String[] teeth_17_valueList=null;
					StringBuilder  tempTeeth_17_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
						teeth_17_valueList=request.getParameterValues("teeth_17_value");
						for(String teeth17Value:teeth_17_valueList){
							tempTeeth_17_value.append(teeth17Value);
							tempTeeth_17_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
					}
					
					if(null != box.getString("data16") && !box.getString("data16").equals(""))
						opdPreAssessmentClinicDental.setTeeth16("y");
					else
						opdPreAssessmentClinicDental.setTeeth16("n");
					
					String[] teeth_16_valueList=null;
					StringBuilder  tempTeeth_16_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
						teeth_16_valueList=request.getParameterValues("teeth_16_value");
						for(String teeth16Value:teeth_16_valueList){
							tempTeeth_16_value.append(teeth16Value);
							tempTeeth_16_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
					}
					
					if(null != box.getString("data15") && !box.getString("data15").equals(""))
						opdPreAssessmentClinicDental.setTeeth15("y");
					else
						opdPreAssessmentClinicDental.setTeeth15("n");

					String[] teeth_15_valueList=null;
					StringBuilder  tempTeeth_15_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
						teeth_15_valueList = request.getParameterValues("teeth_15_value");
						for(String teeth15Value : teeth_15_valueList){
							tempTeeth_15_value.append(teeth15Value);
							tempTeeth_15_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
					}
					
					if(null != box.getString("data14") && !box.getString("data14").equals(""))
						opdPreAssessmentClinicDental.setTeeth14("y");
					else
						opdPreAssessmentClinicDental.setTeeth14("n");
					
					String[] teeth_14_valueList=null;
					StringBuilder  tempTeeth_14_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
						teeth_14_valueList=request.getParameterValues("teeth_14_value");
						for(String teeth14Value:teeth_14_valueList){
							tempTeeth_14_value.append(teeth14Value);
							tempTeeth_14_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
					}
					
					if(null != box.getString("data13") && !box.getString("data13").equals(""))
						opdPreAssessmentClinicDental.setTeeth13("y");
					else
						opdPreAssessmentClinicDental.setTeeth13("n");
					
					String[] teeth_13_valueList=null;
					StringBuilder  tempTeeth_13_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
						teeth_13_valueList=request.getParameterValues("teeth_13_value");
						for(String teeth13Value:teeth_13_valueList){
							tempTeeth_13_value.append(teeth13Value);
							tempTeeth_13_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
					}
					
					if(null != box.getString("data12") && !box.getString("data12").equals(""))
						opdPreAssessmentClinicDental.setTeeth12("y");
					else
						opdPreAssessmentClinicDental.setTeeth12("n");
					
					String[] teeth_12_valueList=null;
					StringBuilder  tempTeeth_12_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
						teeth_12_valueList=request.getParameterValues("teeth_12_value");
						for(String teeth12Value:teeth_12_valueList){
							tempTeeth_12_value.append(teeth12Value);
							tempTeeth_12_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
					}
					
					if(null != box.getString("data11") && !box.getString("data11").equals(""))
						opdPreAssessmentClinicDental.setTeeth11("y");
					else
						opdPreAssessmentClinicDental.setTeeth11("n");
					
					String[] teeth_11_valueList=null;
					StringBuilder  tempTeeth_11_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
						teeth_11_valueList=request.getParameterValues("teeth_11_value");
						for(String teeth11Value:teeth_11_valueList){
							tempTeeth_11_value.append(teeth11Value);
							tempTeeth_11_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
					}
					
					if(null != box.getString("data21") && !box.getString("data21").equals(""))
						opdPreAssessmentClinicDental.setTeeth21("y");
					else
						opdPreAssessmentClinicDental.setTeeth21("n");
					
					String[] teeth_21_valueList=null;
					StringBuilder  tempTeeth_21_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
						teeth_21_valueList=request.getParameterValues("teeth_21_value");
						for(String teeth21Value:teeth_21_valueList){
							tempTeeth_21_value.append(teeth21Value);
							tempTeeth_21_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
					}
					
					
					if(null != box.getString("data22") && !box.getString("data22").equals(""))
						opdPreAssessmentClinicDental.setTeeth22("y");
					else
						opdPreAssessmentClinicDental.setTeeth22("n");
					
					String[] teeth_22_valueList=null;
					StringBuilder  tempTeeth_22_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
						teeth_22_valueList=request.getParameterValues("teeth_22_value");
						for(String teeth22Value:teeth_22_valueList){
							tempTeeth_22_value.append(teeth22Value);
							tempTeeth_22_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
					}
					
					if(null != box.getString("data23") && !box.getString("data23").equals(""))
						opdPreAssessmentClinicDental.setTeeth23("y");
					else
						opdPreAssessmentClinicDental.setTeeth23("n");
					
					String[] teeth_23_valueList=null;
					StringBuilder  tempTeeth_23_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
						teeth_23_valueList=request.getParameterValues("teeth_23_value");
						for(String teeth23Value:teeth_23_valueList){
							tempTeeth_23_value.append(teeth23Value);
							tempTeeth_23_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
					}
					
					
					if(null != box.getString("data24") && !box.getString("data24").equals(""))
						opdPreAssessmentClinicDental.setTeeth24("y");
					else
						opdPreAssessmentClinicDental.setTeeth24("n");
					
					String[] teeth_24_valueList=null;
					StringBuilder  tempTeeth_24_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
						teeth_24_valueList=request.getParameterValues("teeth_24_value");
						for(String teeth24Value:teeth_24_valueList){
							tempTeeth_24_value.append(teeth24Value);
							tempTeeth_24_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
					}
					
					if(null != box.getString("data25") && !box.getString("data25").equals(""))
						opdPreAssessmentClinicDental.setTeeth25("y");
					else
						opdPreAssessmentClinicDental.setTeeth25("n");
					
					String[] teeth_25_valueList=null;
					StringBuilder  tempTeeth_25_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
						teeth_25_valueList=request.getParameterValues("teeth_25_value");
						for(String teeth25Value:teeth_25_valueList){
							tempTeeth_25_value.append(teeth25Value);
							tempTeeth_25_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
					}
					
					if(null != box.getString("data26") && !box.getString("data26").equals(""))
						opdPreAssessmentClinicDental.setTeeth26("y");
					else
						opdPreAssessmentClinicDental.setTeeth26("n");
					
					String[] teeth_26_valueList=null;
					StringBuilder  tempTeeth_26_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
						teeth_26_valueList=request.getParameterValues("teeth_26_value");
						for(String teeth26Value:teeth_26_valueList){
							tempTeeth_26_value.append(teeth26Value);
							tempTeeth_26_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
					}
					
					if(null != box.getString("data27") && !box.getString("data27").equals(""))
						opdPreAssessmentClinicDental.setTeeth27("y");
					else
						opdPreAssessmentClinicDental.setTeeth27("n");
					
					String[] teeth_27_valueList=null;
					StringBuilder  tempTeeth_27_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
						teeth_27_valueList=request.getParameterValues("teeth_27_value");
						for(String teeth27Value:teeth_27_valueList){
							tempTeeth_27_value.append(teeth27Value);
							tempTeeth_27_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
					}
					
					if(null != box.getString("data28") && !box.getString("data28").equals(""))
						opdPreAssessmentClinicDental.setTeeth28("y");
					else
						opdPreAssessmentClinicDental.setTeeth28("n");
					
					String[] teeth_28_valueList=null;
					StringBuilder  tempTeeth_28_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
						teeth_28_valueList=request.getParameterValues("teeth_28_value");
						for(String teeth28Value:teeth_28_valueList){
							tempTeeth_28_value.append(teeth28Value);
							tempTeeth_28_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
					}
					
					if(null != box.getString("data48") && !box.getString("data48").equals(""))
						opdPreAssessmentClinicDental.setTeeth48("y");
					else
						opdPreAssessmentClinicDental.setTeeth48("n");
					
					// for dropdown value
					String[] teeth_48_valueList=null;
					StringBuilder  tempTeeth_48_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
						teeth_48_valueList=request.getParameterValues("teeth_48_value");
						for(String teeth48Value:teeth_48_valueList){
							tempTeeth_48_value.append(teeth48Value);
							tempTeeth_48_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
					}
					
					if(null != box.getString("data47") && !box.getString("data47").equals(""))
						opdPreAssessmentClinicDental.setTeeth47("y");
					else
						opdPreAssessmentClinicDental.setTeeth47("n");
					
					String[] teeth_47_valueList=null;
					StringBuilder  tempTeeth_47_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
						teeth_47_valueList=request.getParameterValues("teeth_47_value");
						for(String teeth47Value:teeth_47_valueList){
							tempTeeth_47_value.append(teeth47Value);
							tempTeeth_47_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
					}
					
					if(null != box.getString("data46") && !box.getString("data46").equals(""))
						opdPreAssessmentClinicDental.setTeeth46("y");
					else
						opdPreAssessmentClinicDental.setTeeth46("n");
					
					String[] teeth_46_valueList=null;
					StringBuilder  tempTeeth_46_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
						teeth_46_valueList=request.getParameterValues("teeth_46_value");
						for(String teeth46Value:teeth_46_valueList){
							tempTeeth_46_value.append(teeth46Value);
							tempTeeth_46_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
					}
					
					if(null != box.getString("data45") && !box.getString("data45").equals(""))
						opdPreAssessmentClinicDental.setTeeth45("y");
					else
						opdPreAssessmentClinicDental.setTeeth45("n");

					String[] teeth_45_valueList=null;
					StringBuilder  tempTeeth_45_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
						teeth_45_valueList = request.getParameterValues("teeth_45_value");
						for(String teeth45Value : teeth_45_valueList){
							tempTeeth_45_value.append(teeth45Value);
							tempTeeth_45_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
					}
					
					if(null != box.getString("data44") && !box.getString("data44").equals(""))
						opdPreAssessmentClinicDental.setTeeth44("y");
					else
						opdPreAssessmentClinicDental.setTeeth44("n");
					
					String[] teeth_44_valueList=null;
					StringBuilder  tempTeeth_44_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
						teeth_44_valueList=request.getParameterValues("teeth_44_value");
						for(String teeth44Value:teeth_44_valueList){
							tempTeeth_44_value.append(teeth44Value);
							tempTeeth_44_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
					}
					
					if(null != box.getString("data43") && !box.getString("data43").equals(""))
						opdPreAssessmentClinicDental.setTeeth43("y");
					else
						opdPreAssessmentClinicDental.setTeeth43("n");
					
					String[] teeth_43_valueList=null;
					StringBuilder  tempTeeth_43_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
						teeth_43_valueList=request.getParameterValues("teeth_43_value");
						for(String teeth43Value:teeth_43_valueList){
							tempTeeth_43_value.append(teeth43Value);
							tempTeeth_43_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
					}
					
					if(null != box.getString("data42") && !box.getString("data42").equals(""))
						opdPreAssessmentClinicDental.setTeeth42("y");
					else
						opdPreAssessmentClinicDental.setTeeth42("n");
					
					String[] teeth_42_valueList=null;
					StringBuilder  tempTeeth_42_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
						teeth_42_valueList=request.getParameterValues("teeth_42_value");
						for(String teeth42Value:teeth_42_valueList){
							tempTeeth_42_value.append(teeth42Value);
							tempTeeth_42_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
					}
					
					if(null != box.getString("data41") && !box.getString("data41").equals(""))
						opdPreAssessmentClinicDental.setTeeth41("y");
					else
						opdPreAssessmentClinicDental.setTeeth41("n");
					
					String[] teeth_41_valueList=null;
					StringBuilder  tempTeeth_41_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
						teeth_41_valueList=request.getParameterValues("teeth_41_value");
						for(String teeth41Value:teeth_41_valueList){
							tempTeeth_41_value.append(teeth41Value);
							tempTeeth_41_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
					}
					
					if(null != box.getString("data31") && !box.getString("data31").equals(""))
						opdPreAssessmentClinicDental.setTeeth31("y");
					else
						opdPreAssessmentClinicDental.setTeeth31("n");
					
					String[] teeth_31_valueList=null;
					StringBuilder  tempTeeth_31_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
						teeth_31_valueList=request.getParameterValues("teeth_31_value");
						for(String teeth31Value:teeth_31_valueList){
							tempTeeth_31_value.append(teeth31Value);
							tempTeeth_31_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
					}
					
					
					if(null != box.getString("data32") && !box.getString("data32").equals(""))
						opdPreAssessmentClinicDental.setTeeth32("y");
					else
						opdPreAssessmentClinicDental.setTeeth32("n");
					
					String[] teeth_32_valueList=null;
					StringBuilder  tempTeeth_32_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
						teeth_32_valueList=request.getParameterValues("teeth_32_value");
						for(String teeth32Value:teeth_32_valueList){
							tempTeeth_32_value.append(teeth32Value);
							tempTeeth_32_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
					}
					
					if(null != box.getString("data33") && !box.getString("data33").equals(""))
						opdPreAssessmentClinicDental.setTeeth33("y");
					else
						opdPreAssessmentClinicDental.setTeeth33("n");
					
					String[] teeth_33_valueList=null;
					StringBuilder  tempTeeth_33_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
						teeth_33_valueList=request.getParameterValues("teeth_33_value");
						for(String teeth33Value:teeth_33_valueList){
							tempTeeth_33_value.append(teeth33Value);
							tempTeeth_33_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
					}
					
					
					if(null != box.getString("data34") && !box.getString("data34").equals(""))
						opdPreAssessmentClinicDental.setTeeth34("y");
					else
						opdPreAssessmentClinicDental.setTeeth34("n");
					
					String[] teeth_34_valueList=null;
					StringBuilder  tempTeeth_34_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
						teeth_34_valueList=request.getParameterValues("teeth_34_value");
						for(String teeth34Value:teeth_34_valueList){
							tempTeeth_34_value.append(teeth34Value);
							tempTeeth_34_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
					}
					
					if(null != box.getString("data35") && !box.getString("data35").equals(""))
						opdPreAssessmentClinicDental.setTeeth35("y");
					else
						opdPreAssessmentClinicDental.setTeeth35("n");
					
					String[] teeth_35_valueList=null;
					StringBuilder  tempTeeth_35_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
						teeth_35_valueList=request.getParameterValues("teeth_35_value");
						for(String teeth35Value:teeth_35_valueList){
							tempTeeth_35_value.append(teeth35Value);
							tempTeeth_35_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
					}
					
					if(null != box.getString("data36") && !box.getString("data36").equals(""))
						opdPreAssessmentClinicDental.setTeeth36("y");
					else
						opdPreAssessmentClinicDental.setTeeth36("n");
					
					String[] teeth_36_valueList=null;
					StringBuilder  tempTeeth_36_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
						teeth_36_valueList=request.getParameterValues("teeth_36_value");
						for(String teeth36Value:teeth_36_valueList){
							tempTeeth_36_value.append(teeth36Value);
							tempTeeth_36_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
					}
					
					if(null != box.getString("data37") && !box.getString("data37").equals(""))
						opdPreAssessmentClinicDental.setTeeth37("y");
					else
						opdPreAssessmentClinicDental.setTeeth37("n");
					
					String[] teeth_37_valueList=null;
					StringBuilder  tempTeeth_37_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
						teeth_37_valueList=request.getParameterValues("teeth_37_value");
						for(String teeth37Value:teeth_37_valueList){
							tempTeeth_37_value.append(teeth37Value);
							tempTeeth_37_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
					}
					
					if(null != box.getString("data38") && !box.getString("data38").equals(""))
						opdPreAssessmentClinicDental.setTeeth38("y");
					else
						opdPreAssessmentClinicDental.setTeeth38("n");
					
					String[] teeth_38_valueList=null;
					StringBuilder  tempTeeth_38_value=new StringBuilder();
					if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
						teeth_38_valueList=request.getParameterValues("teeth_38_value");
						for(String teeth38Value:teeth_38_valueList){
							tempTeeth_38_value.append(teeth38Value);
							tempTeeth_38_value.append(",");
						}
						opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
					}
					
				
					
				
					hbt.save(opdPreAssessmentClinicDental);
					//tnx.commit();
					map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
					}
					
					
					int hdbMaxillary = 0;
					
					if(null != box.getString("hdbMaxillary") && !box.getString("hdbMaxillary").equals("")) {
						hdbMaxillary = box.getInt("hdbMaxillary");
					}
					
					OpdExaminationOfGingiva opdExaminationOfGingiva = new OpdExaminationOfGingiva();
					//for (int j = 0; j <=hdbMaxillary; j++) {
						for(int j = 1; j <= hdbMaxillary; j++) {
							if((!box.getString("maxRightPosterior" + j).equals(""))||(!box.getString("maxLeftPosterior" +j).equals(""))||(!box.getString("maxClinicalFeature" +j).equals(""))||
									(!box.getString("maxAnterior" + j).equals(""))){
							opdExaminationOfGingiva = new OpdExaminationOfGingiva();
							opdExaminationOfGingiva.setFlag("Maxillary");
							opdExaminationOfGingiva.setCaseRecordPeriodonticsHeader(opdCaseRecordPeriodonticsHeader);
							
						if (!box.getString("maxRightPosterior" + j).equals("")) {
							opdExaminationOfGingiva.setRightPosterior(box.getString("maxRightPosterior" + j));
						}
						if (!box.getString("maxAnterior" + j).equals("")) {
							opdExaminationOfGingiva.setAnterior(box.getString("maxAnterior" + j));
						}
						if (!box.getString("maxLeftPosterior" + j).equals("")) {
							opdExaminationOfGingiva.setLeftPosterior(box.getString("maxLeftPosterior" + j));
						}
						if (!box.getString("maxClinicalFeature" + j).equals("")) {
							opdExaminationOfGingiva.setClinicalFeature(box.getString("maxClinicalFeature" + j));
						}
		
						
						hbt.save(opdExaminationOfGingiva);
						}
					}
						
						
											
					int hdbMandibular = 0;
				
					if(null != box.getString("hdbMandibular") && !box.getString("hdbMandibular").equals("")) {
						hdbMandibular = box.getInt("hdbMandibular");
					}
					
				
						for(int i = 1; i <= hdbMandibular; i++) {
							if((!box.getString("manClinicalFeature" + i).equals(""))||(!box.getString("manClinicalFeature" +i).equals(""))||(!box.getString("manAnterior" + i).equals(""))||
									(!box.getString("manLeftPosterior" + i).equals(""))){
								
							opdExaminationOfGingiva = new OpdExaminationOfGingiva();
						opdExaminationOfGingiva.setFlag("Mandibular");
						opdExaminationOfGingiva.setCaseRecordPeriodonticsHeader(opdCaseRecordPeriodonticsHeader);
							
						if (!box.getString("manClinicalFeature" + i).equals("")) {
							opdExaminationOfGingiva.setClinicalFeature(box.getString("manClinicalFeature" + i));
						}
						if (!box.getString("manClinicalFeature" + i).equals("")) {
							opdExaminationOfGingiva.setRightPosterior(box.getString("manRightPosterior" + i));
						}
						if (!box.getString("manAnterior" + i).equals("")) {
							opdExaminationOfGingiva.setAnterior(box.getString("manAnterior" + i));
						}
						if (!box.getString("manLeftPosterior" + i).equals("")) {
							opdExaminationOfGingiva.setLeftPosterior(box.getString("manLeftPosterior" + i));
						}
						
						
						hbt.save(opdExaminationOfGingiva);
						}
						
					}	
					
						
					
					
					
					int hdbUpperTooth = 0;
						
					if(null != box.getString("hdbUpperTooth") && !box.getString("hdbUpperTooth").equals("")) {
						hdbUpperTooth = box.getInt("hdbUpperTooth");
					}
					
					
					for(int j = 1; j <= hdbUpperTooth; j++) {
						OpdPathologicMigration opdPathologicMigration = new OpdPathologicMigration();
						if((!box.getString("utooth_1" + j).equals(""))||(!box.getString("utooth_2" + j).equals(""))||(!box.getString("utooth_3" + j).equals(""))||
						(!box.getString("utooth_4" + j).equals(""))||(!box.getString("utooth_8" + j).equals(""))||(!box.getString("utooth_12" + j).equals(""))||
						(!box.getString("utooth_5" + j).equals(""))||(!box.getString("utooth_9" + j).equals(""))||(!box.getString("utooth_13" + j).equals(""))||
						(!box.getString("utooth_6" + j).equals(""))||(!box.getString("utooth_10" + j).equals(""))||(!box.getString("utooth_14" + j).equals(""))||
						(!box.getString("utooth_7" + j).equals(""))||(!box.getString("utooth_11" + j).equals(""))||(!box.getString("utooth_16" + j).equals(""))||
						(!box.getString("utooth_15" + j).equals(""))){
						
						
						if (!box.getString("utooth_1" + j).equals("")) {
							opdPathologicMigration.setTeeth1(box.getString("utooth_1" + j));
						}
						if (!box.getString("utooth_2" + j).equals("")) {
							opdPathologicMigration.setTeeth2(box.getString("utooth_2" + j));
						}
						if (!box.getString("utooth_3" + j).equals("")) {
							opdPathologicMigration.setTeeth3(box.getString("utooth_3" + j));
						}
						if (!box.getString("utooth_4" + j).equals("")) {
							opdPathologicMigration.setTeeth4(box.getString("utooth_4" + j));
						}
						if (!box.getString("utooth_5" + j).equals("")) {
							opdPathologicMigration.setTeeth5(box.getString("utooth_5" + j));
						}
						if (!box.getString("utooth_6" + j).equals("")) {
							opdPathologicMigration.setTeeth6(box.getString("utooth_6" + j));
						}
						if (!box.getString("utooth_7" + j).equals("")) {
							opdPathologicMigration.setTeeth7(box.getString("utooth_7" + j));
						}
						if (!box.getString("utooth_8" + j).equals("")) {
							opdPathologicMigration.setTeeth8(box.getString("utooth_8" + j));
						}
						if (!box.getString("utooth_9" + j).equals("")) {
							opdPathologicMigration.setTeeth9(box.getString("utooth_9" + j));
						}
						if (!box.getString("utooth_10" + j).equals("")) {
							opdPathologicMigration.setTeeth10(box.getString("utooth_10" + j));
						}
						if (!box.getString("utooth_11" + j).equals("")) {
							opdPathologicMigration.setTeeth11(box.getString("utooth_11" + j));
						}
						if (!box.getString("utooth_12" + j).equals("")) {
							opdPathologicMigration.setTeeth12(box.getString("utooth_12" + j));
						}
						if (!box.getString("utooth_13" + j).equals("")) {
							opdPathologicMigration.setTeeth13(box.getString("utooth_13" + j));
						}
						if (!box.getString("utooth_14" + j).equals("")) {
							opdPathologicMigration.setTeeth14(box.getString("utooth_14" + j));
												}
						if (!box.getString("utooth_15" + j).equals("")) {
							opdPathologicMigration.setTeeth15(box.getString("utooth_15" + j));
						}
						if (!box.getString("utooth_16" + j).equals("")) {
							opdPathologicMigration.setTeeth16(box.getString("utooth_16" + j));
						}
						if (!box.getString("tooth" + j).equals("")) {
							opdPathologicMigration.setTooth(box.getString("tooth" + j));
						}
										
						if (!box.getString("flag" + j).equals("")) {
							opdPathologicMigration.setFlag(box.getString("flag" + j));
						}
						opdPathologicMigration.setCaseRecordPeriodonticsHeader(opdCaseRecordPeriodonticsHeader);
						opdPathologicMigration.setVisit(visit);
						hbt.save(opdPathologicMigration);
					}			
					}
						tnx.commit();
						
							
				
						
							
							
				}catch(Exception e){
					e.printStackTrace();
				}
				return map;
			}

				@Override
			public Map<String, Object> saveOralAndMaxillofacialSurgery(
					Map<String, Object> mapForDs, Box box,
					HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						OpdOralAndMaxillofacialSurgery opdOralAndMaxillofacialSurgery = new OpdOralAndMaxillofacialSurgery();
						
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
							hinId = (Integer) mapForDs.get("hinId");
						}
						if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
							visitId = (Integer) mapForDs.get("visitId");
						}
						if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
							departmentId = (Integer) mapForDs.get("departmentId");
						}
						if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
							hospitalId = (Integer) mapForDs.get("hospitalId");
						}
						int masMaritalStatusId=0;
						if(null != box.getString("masMaritalStatusId") && !box.getString("masMaritalStatusId").equals("0")){
							masMaritalStatusId=	box.getInt("masMaritalStatusId");
						}
						
						
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
						
						Patient patient = new Patient();
						patient.setId(hinId);
						opdOralAndMaxillofacialSurgery.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdOralAndMaxillofacialSurgery.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdOralAndMaxillofacialSurgery.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdOralAndMaxillofacialSurgery.setHospital(masHospital);
						
						MasMaritalStatus masMaritalStatus= new MasMaritalStatus();
						masMaritalStatus.setId(masMaritalStatusId);
						opdOralAndMaxillofacialSurgery.setMaritalStatus(masMaritalStatus);
						
						
					
						String[] pastMedicalHistoryList=null;
						StringBuilder  temppastMedicalHistory=new StringBuilder();
						if(null != request.getParameterValues("pastMedicalHistory") && !request.getParameterValues("pastMedicalHistory").equals("")){
							pastMedicalHistoryList=request.getParameterValues("pastMedicalHistory");
							for(String pastMedicalHistoryValue:pastMedicalHistoryList){
								temppastMedicalHistory.append(pastMedicalHistoryValue);
								temppastMedicalHistory.append(",");
							}
							opdOralAndMaxillofacialSurgery.setPastMedicalHistory(temppastMedicalHistory.toString());
						}
					
								String[] pastDentalHistoryList=null;
						StringBuilder  temppastDentalHistory=new StringBuilder();
						if(null != request.getParameterValues("pastDentalHistory") && !request.getParameterValues("pastDentalHistory").equals("")){
							pastDentalHistoryList=request.getParameterValues("pastDentalHistory");
							for(String pastDentalHistoryValue:pastDentalHistoryList){
								temppastDentalHistory.append(pastDentalHistoryValue);
								temppastDentalHistory.append(",");
							}
							opdOralAndMaxillofacialSurgery.setPastDentalHistory(temppastDentalHistory.toString());
						}
						String[] habbitsList=null;
						StringBuilder  temphabbits=new StringBuilder();
						if(null != request.getParameterValues("habbits") && !request.getParameterValues("habbits").equals("")){
							habbitsList=request.getParameterValues("habbits");
							for(String habbitsValue:habbitsList){
								temphabbits.append(habbitsValue);
								temphabbits.append(",");
							}
							opdOralAndMaxillofacialSurgery.setHabbits(temphabbits.toString());
						}
					
					
						
						String[] femalesList=null;
						StringBuilder  tempfemales=new StringBuilder();
						if(null != request.getParameterValues("females") && !request.getParameterValues("females").equals("")){
							femalesList=request.getParameterValues("females");
							for(String femalesValue:femalesList){
								tempfemales.append(femalesValue);
								tempfemales.append(",");
							}
							opdOralAndMaxillofacialSurgery.setFemales(tempfemales.toString());
						}
						
						if(null != box.getString("chiefComplaint") && !box.getString("chiefComplaint").equals(""))
							opdOralAndMaxillofacialSurgery.setChiefComplaint(box.getString("chiefComplaint"));
						
						if(null != box.getString("hOPresentingComplaints") && !box.getString("hOPresentingComplaints").equals(""))
							opdOralAndMaxillofacialSurgery.setHOPresentingComplaints(box.getString("hOPresentingComplaints"));

						
						if(null != box.getString("pastMedicalHistoryValue") && !box.getString("pastMedicalHistoryValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPastMedicalHistoryValue(box.getString("pastMedicalHistoryValue"));

						if(null != box.getString("pastDentalHistoryValue") && !box.getString("pastDentalHistoryValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPastDentalHistoryValue(box.getString("pastDentalHistoryValue"));

						if(null != box.getString("familyHistoryOne") && !box.getString("familyHistoryOne").equals(""))
							opdOralAndMaxillofacialSurgery.setFamilyHistory(box.getString("familyHistoryOne"));

						
						if(null != box.getString("personalHistoryOne") && !box.getString("personalHistoryOne").equals(""))
							opdOralAndMaxillofacialSurgery.setPersonalHistory(box.getString("personalHistoryOne"));

						
						if(null != box.getString("habbitsValue") && !box.getString("habbitsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setHabbitsValue(box.getString("habbitsValue"));

						if(null != box.getString("femalesValue") && !box.getString("femalesValue").equals(""))
							opdOralAndMaxillofacialSurgery.setFemalesValue(box.getString("femalesValue"));

						if(null != box.getString("built") && !box.getString("built").equals(""))
							opdOralAndMaxillofacialSurgery.setBuilt(box.getString("built"));

						
						if(null != box.getString("gait") && !box.getString("gait").equals(""))
							opdOralAndMaxillofacialSurgery.setGait(box.getString("gait"));

						
						if(null != box.getString("nourishment") && !box.getString("nourishment").equals(""))
							opdOralAndMaxillofacialSurgery.setNourishment(box.getString("nourishment"));

						if(null != box.getString("rate") && !box.getString("rate").equals(""))
							opdOralAndMaxillofacialSurgery.setRate(box.getString("rate"));

						if(null != box.getString("rateValue") && !box.getString("rateValue").equals(""))
							opdOralAndMaxillofacialSurgery.setRateValue(box.getString("rateValue"));

						
						
						if(null != box.getString("rhythm") && !box.getString("rhythm").equals(""))
							opdOralAndMaxillofacialSurgery.setRhythm(box.getString("rhythm"));

						
						if(null != box.getString("volume") && !box.getString("volume").equals(""))
							opdOralAndMaxillofacialSurgery.setVolume(box.getString("volume"));

						if(null != box.getString("temperature") && !box.getString("temperature").equals(""))
							opdOralAndMaxillofacialSurgery.setTemperature(box.getString("temperature"));

						if(null != box.getString("temperatureValue") && !box.getString("temperatureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setTemperatureVal(box.getString("temperatureValue"));


						if(null != box.getString("bloodPressure") && !box.getString("bloodPressure").equals(""))
							opdOralAndMaxillofacialSurgery.setBloodPressure(box.getString("bloodPressure"));
						
						if(null != box.getString("resoiratoryRate") && !box.getString("resoiratoryRate").equals(""))
							opdOralAndMaxillofacialSurgery.setResoiratoryRate(box.getString("resoiratoryRate"));

						if(null != box.getString("temperatureOne") && !box.getString("temperatureOne").equals(""))
							opdOralAndMaxillofacialSurgery.setTemperaturePulse(box.getString("temperatureOne"));

				
						if(null != box.getString("bloodPressureValue") && !box.getString("bloodPressureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setBloodPressureValue(box.getString("bloodPressureValue"));

						
						if(null != box.getString("pallor") && !box.getString("pallor").equals(""))
							opdOralAndMaxillofacialSurgery.setPallor(box.getString("pallor"));

						if(null != box.getString("icterus") && !box.getString("icterus").equals(""))
							opdOralAndMaxillofacialSurgery.setIcterus(box.getString("icterus"));

						if(null != box.getString("cyanosis") && !box.getString("cyanosis").equals(""))
							opdOralAndMaxillofacialSurgery.setCyanosis(box.getString("cyanosis"));


						if(null != box.getString("clubbing") && !box.getString("clubbing").equals(""))
							opdOralAndMaxillofacialSurgery.setClubbing(box.getString("clubbing"));
						
						

						if(null != box.getString("lymphadenopathy") && !box.getString("lymphadenopathy").equals(""))
							opdOralAndMaxillofacialSurgery.setLymphadenopathy(box.getString("lymphadenopathy"));
						
						if(null != box.getString("submeantal") && !box.getString("submeantal").equals(""))
							opdOralAndMaxillofacialSurgery.setSubmeantal(box.getString("submeantal"));

						
						if(null != box.getString("upperJuglodidastric") && !box.getString("upperJuglodidastric").equals(""))
							opdOralAndMaxillofacialSurgery.setUpperJuglodidastric(box.getString("upperJuglodidastric"));

						
						if(null != box.getString("subMandibular") && !box.getString("subMandibular").equals(""))
							opdOralAndMaxillofacialSurgery.setSubMandibular(box.getString("subMandibular"));

						
						if(null != box.getString("midJuglodigastric") && !box.getString("midJuglodigastric").equals(""))
							opdOralAndMaxillofacialSurgery.setMidJuglodigastric(box.getString("midJuglodigastric"));

						
						if(null != box.getString("supraClavicular") && !box.getString("supraClavicular").equals(""))
							opdOralAndMaxillofacialSurgery.setSupraClavicular(box.getString("supraClavicular"));
						
						if(null != box.getString("posteriorTriangle") && !box.getString("posteriorTriangle").equals(""))
							opdOralAndMaxillofacialSurgery.setPosteriorTriangle(box.getString("posteriorTriangle"));

						
						if(null != box.getString("edema") && !box.getString("edema").equals(""))
							opdOralAndMaxillofacialSurgery.setEdema(box.getString("edema"));

						if(null != box.getString("edemaPitting") && !box.getString("edemaPitting").equals(""))
							opdOralAndMaxillofacialSurgery.setEdemaPitting(box.getString("edemaPitting"));
						
						if(null != box.getString("edemaNonPitting") && !box.getString("edemaNonPitting").equals(""))
							opdOralAndMaxillofacialSurgery.setEdemaNonPitting(box.getString("edemaNonPitting"));

						if(null != box.getString("chestPain") && !box.getString("chestPain").equals(""))
							opdOralAndMaxillofacialSurgery.setChestPain(box.getString("chestPain"));


						if(null != box.getString("palpitation") && !box.getString("palpitation").equals(""))
							opdOralAndMaxillofacialSurgery.setPalpitation(box.getString("palpitation"));
						
						if(null != box.getString("palpitationValue") && !box.getString("palpitationValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPalpitationValue(box.getString("palpitationValue"));
						
						if(null != box.getString("hypertension") && !box.getString("hypertension").equals(""))
							opdOralAndMaxillofacialSurgery.setHypertension(box.getString("hypertension"));

						if(null != box.getString("murmers") && !box.getString("murmers").equals(""))
							opdOralAndMaxillofacialSurgery.setMurmers(box.getString("murmers"));
						
						if(null != box.getString("murmersValue") && !box.getString("murmersValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMurmersValue(box.getString("murmersValue"));
						
						if(null != box.getString("cough") && !box.getString("cough").equals(""))
							opdOralAndMaxillofacialSurgery.setCough(box.getString("cough"));
						
						if(null != box.getString("coughValue") && !box.getString("coughValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCoughValue(box.getString("coughValue"));
						
						if(null != box.getString("wheezing") && !box.getString("wheezing").equals(""))
							opdOralAndMaxillofacialSurgery.setWheezing(box.getString("wheezing"));
						
						if(null != box.getString("wheezingValue") && !box.getString("wheezingValue").equals(""))
							opdOralAndMaxillofacialSurgery.setWheezingValue(box.getString("wheezingValue"));
						
						if(null != box.getString("dyspnoea") && !box.getString("dyspnoea").equals(""))
							opdOralAndMaxillofacialSurgery.setDyspnoea(box.getString("dyspnoea"));
						
						if(null != box.getString("dyspnoeaValue") && !box.getString("dyspnoeaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDyspnoeaValue(box.getString("dyspnoeaValue"));
						
						if(null != box.getString("nasalBlock") && !box.getString("nasalBlock").equals(""))
							opdOralAndMaxillofacialSurgery.setNasalBlock(box.getString("nasalBlock"));
						
						if(null != box.getString("nasalBlockValue") && !box.getString("nasalBlockValue").equals(""))
							opdOralAndMaxillofacialSurgery.setNasalBlockValue(box.getString("nasalBlockValue"));
						
						if(null != box.getString("dizziness") && !box.getString("dizziness").equals(""))
							opdOralAndMaxillofacialSurgery.setDizziness(box.getString("dizziness"));
						
						if(null != box.getString("dizzinessValue") && !box.getString("dizzinessValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDizzinessValue(box.getString("dizzinessValue"));
						
						if(null != box.getString("tremors") && !box.getString("tremors").equals(""))
							opdOralAndMaxillofacialSurgery.setTremors(box.getString("tremors"));
						
						if(null != box.getString("tremorsValue") && !box.getString("tremorsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setTremorsValue(box.getString("tremorsValue"));
						
						if(null != box.getString("headache") && !box.getString("headache").equals(""))
							opdOralAndMaxillofacialSurgery.setHeadache(box.getString("headache"));
						
						if(null != box.getString("headacheValue") && !box.getString("headacheValue").equals(""))
							opdOralAndMaxillofacialSurgery.setHeadacheValue(box.getString("headacheValue"));
						
						if(null != box.getString("vommitting") && !box.getString("vommitting").equals(""))
							opdOralAndMaxillofacialSurgery.setVommitting(box.getString("vommitting"));
						
						if(null != box.getString("vommittingValue") && !box.getString("vommittingValue").equals(""))
							opdOralAndMaxillofacialSurgery.setVommittingValue(box.getString("vommittingValue"));
						
						if(null != box.getString("parathesisa") && !box.getString("parathesisa").equals(""))
							opdOralAndMaxillofacialSurgery.setParathesisa(box.getString("parathesisa"));
						
						if(null != box.getString("parathesisaValue") && !box.getString("parathesisaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setParathesisaValue(box.getString("parathesisaValue"));
						
						if(null != box.getString("convulsion") && !box.getString("convulsion").equals(""))
							opdOralAndMaxillofacialSurgery.setConvulsion(box.getString("convulsion"));
						
						if(null != box.getString("convulsionValue") && !box.getString("palpitation").equals(""))
							opdOralAndMaxillofacialSurgery.setConvulsionValue(box.getString("convulsionValue"));
						
						if(null != box.getString("gastroIntestinalSystem") && !box.getString("gastroIntestinalSystem").equals(""))
							opdOralAndMaxillofacialSurgery.setGastroIntestinalSystem(box.getString("gastroIntestinalSystem"));
						
						if(null != box.getString("skeltalSystem") && !box.getString("skeltalSystem").equals(""))
							opdOralAndMaxillofacialSurgery.setSkeltalSystem(box.getString("skeltalSystem"));
						
						if(null != box.getString("polyuria") && !box.getString("polyuria").equals(""))
							opdOralAndMaxillofacialSurgery.setPolyuria(box.getString("polyuria"));
						
						if(null != box.getString("polyuriaValue") && !box.getString("polyuriaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPolyuriaValue(box.getString("polyuriaValue"));
						
						if(null != box.getString("oligouria") && !box.getString("oligouria").equals(""))
							opdOralAndMaxillofacialSurgery.setOligouria(box.getString("oligouria"));
						
						if(null != box.getString("oligouriaValue") && !box.getString("oligouriaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setOligouriaValue(box.getString("oligouriaValue"));
						
						if(null != box.getString("heamatuia") && !box.getString("heamatuia").equals(""))
							opdOralAndMaxillofacialSurgery.setHeamatuia(box.getString("heamatuia"));
						
						
						if(null != box.getString("heamatuiaValue") && !box.getString("heamatuiaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setHeamatuiaValue(box.getString("heamatuiaValue"));
						
						
						if(null != box.getString("temperature") && !box.getString("temperature").equals(""))
							opdOralAndMaxillofacialSurgery.setTemperature(box.getString("temperature"));
						
						if(null != box.getString("conistency") && !box.getString("conistency").equals(""))
							opdOralAndMaxillofacialSurgery.setConistency(box.getString("conistency"));
						
						if(null != box.getString("tenderness") && !box.getString("tenderness").equals(""))
							opdOralAndMaxillofacialSurgery.setTenderness(box.getString("tenderness"));
						
						
						if(null != box.getString("attachment") && !box.getString("attachment").equals(""))
							opdOralAndMaxillofacialSurgery.setAttachment(box.getString("attachment"));
						
						
						
						if(null != box.getString("margins") && !box.getString("margins").equals(""))
							opdOralAndMaxillofacialSurgery.setMargins(box.getString("margins"));
						
						if (!box.getString("dateOfReporting").equals("")) {
							opdOralAndMaxillofacialSurgery.setDateOfReporting(HMSUtil.convertStringTypeDateToDateType(box
									.getString("dateOfReporting")));
						}
						
						if (!box.getString("dateOfOperation").equals("")) {
							opdOralAndMaxillofacialSurgery.setDateOfOperation(HMSUtil.convertStringTypeDateToDateType(box
									.getString("dateOfOperation")));
						}
						
						if (!box.getString("dateOfDischarge").equals("")) {
							opdOralAndMaxillofacialSurgery.setDateOfDischarge(HMSUtil.convertStringTypeDateToDateType(box
									.getString("dateOfDischarge")));
						}
						if(null != box.getString("compressble") && !box.getString("compressble").equals(""))
							opdOralAndMaxillofacialSurgery.setCompressble(box.getString("compressble"));
						
						
						
						if(null != box.getString("reducble") && !box.getString("reducble").equals(""))
							opdOralAndMaxillofacialSurgery.setReducble(box.getString("reducble"));
						
						
						if(null != box.getString("edge") && !box.getString("edge").equals(""))
							opdOralAndMaxillofacialSurgery.setEdge(box.getString("edge"));
						
						
						
						if(null != box.getString("pressure") && !box.getString("pressure").equals(""))
							opdOralAndMaxillofacialSurgery.setPressure(box.getString("pressure"));
						
						if(null != box.getString("dischargeOnPressure") && !box.getString("dischargeOnPressure").equals(""))
							opdOralAndMaxillofacialSurgery.setDischargeOnPressure(box.getString("dischargeOnPressure"));
						
						
						if(null != box.getString("percussion") && !box.getString("percussion").equals(""))
							opdOralAndMaxillofacialSurgery.setPercussion(box.getString("percussion"));
						
						
						if(null != box.getString("number") && !box.getString("number").equals(""))
							opdOralAndMaxillofacialSurgery.setNumberTeeth(box.getString("number"));
						
						
						if(null != box.getString("rootStumps") && !box.getString("rootStumps").equals(""))
							opdOralAndMaxillofacialSurgery.setRootStumps(box.getString("rootStumps"));
						
						
						if(null != box.getString("rootStumps") && !box.getString("rootStumps").equals(""))
							opdOralAndMaxillofacialSurgery.setRootStumps(box.getString("rootStumps"));
						
						
						if(null != box.getString("decayedTeeth") && !box.getString("decayedTeeth").equals(""))
							opdOralAndMaxillofacialSurgery.setDecayedTeeth(box.getString("decayedTeeth"));
						
						
						
						if(null != box.getString("missingAvulsedTeeth") && !box.getString("missingAvulsedTeeth").equals(""))
							opdOralAndMaxillofacialSurgery.setMissingAvulsedTeeth(box.getString("missingAvulsedTeeth"));
						
						
						if(null != box.getString("gingiva") && !box.getString("gingiva").equals(""))
							opdOralAndMaxillofacialSurgery.setGingiva(box.getString("gingiva"));
						
						
						if(null != box.getString("alveloarMucosa") && !box.getString("alveloarMucosa").equals(""))
							opdOralAndMaxillofacialSurgery.setAlveloarMucosa(box.getString("alveloarMucosa"));
						
						
						if(null != box.getString("labialMucosa") && !box.getString("labialMucosa").equals(""))
							opdOralAndMaxillofacialSurgery.setLabialMucosa(box.getString("labialMucosa"));
						
						
						if(null != box.getString("buccalMucosa") && !box.getString("buccalMucosa").equals(""))
							opdOralAndMaxillofacialSurgery.setBuccalMucosaTeeth(box.getString("buccalMucosa"));
						
						
						if(null != box.getString("palateAndFauces") && !box.getString("palateAndFauces").equals(""))
							opdOralAndMaxillofacialSurgery.setPalateAndFauces(box.getString("palateAndFauces"));
						
						
						if(null != box.getString("tongue") && !box.getString("tongue").equals(""))
							opdOralAndMaxillofacialSurgery.setTongueTeeth(box.getString("tongue"));
						
						
						if(null != box.getString("floorOfMouth") && !box.getString("floorOfMouth").equals(""))
							opdOralAndMaxillofacialSurgery.setFloorOfMouthTeeth(box.getString("floorOfMouth"));
						
						
						if(null != box.getString("mouthOpening") && !box.getString("mouthOpening").equals(""))
							opdOralAndMaxillofacialSurgery.setMouthOpening(box.getString("mouthOpening"));
						
						
						if(null != box.getString("jawMovements") && !box.getString("jawMovements").equals(""))
							opdOralAndMaxillofacialSurgery.setJawMovements(box.getString("jawMovements"));
						
						if(null != box.getString("lateralMovements") && !box.getString("lateralMovements").equals(""))
							opdOralAndMaxillofacialSurgery.setLateralMovements(box.getString("lateralMovements"));
						
						
						if(null != box.getString("retrusion") && !box.getString("retrusion").equals(""))
							opdOralAndMaxillofacialSurgery.setRetrusion(box.getString("retrusion"));
						
						
						if(null != box.getString("protrusion") && !box.getString("protrusion").equals(""))
							opdOralAndMaxillofacialSurgery.setProtrusion(box.getString("protrusion"));
						
						
						if(null != box.getString("tMJoints") && !box.getString("tMJoints").equals(""))
							opdOralAndMaxillofacialSurgery.setTMJoints(box.getString("tMJoints"));
						
						
						if(null != box.getString("infection") && !box.getString("infection").equals(""))
							opdOralAndMaxillofacialSurgery.setInfection(box.getString("infection"));
						
						
						if(null != box.getString("aPDeficiencyMaxilla") && !box.getString("aPDeficiencyMaxilla").equals(""))
							opdOralAndMaxillofacialSurgery.setAPDeficiencyMaxilla(box.getString("aPDeficiencyMaxilla"));
						
						
						if(null != box.getString("aPExcessMaxilla") && !box.getString("aPExcessMaxilla").equals(""))
							opdOralAndMaxillofacialSurgery.setAPExcessMaxilla(box.getString("aPExcessMaxilla"));
						
						
						if(null != box.getString("aPDeficiencyMandible") && !box.getString("aPDeficiencyMandible").equals(""))
							opdOralAndMaxillofacialSurgery.setAPDeficiencyMandible(box.getString("aPDeficiencyMandible"));
						
						
						if(null != box.getString("aPExcessMandible") && !box.getString("aPExcessMandible").equals(""))
							opdOralAndMaxillofacialSurgery.setAPExcessMandible(box.getString("aPExcessMandible"));
						
						if(null != box.getString("buccalValue") && !box.getString("buccalValue").equals(""))
							opdOralAndMaxillofacialSurgery.setBuccalValue(box.getString("buccalValue"));
						
						
						if(null != box.getString("canineValue") && !box.getString("canineValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCanineValue(box.getString("canineValue"));
						
						if(null != box.getString("lefort3FractureValue") && !box.getString("lefort3FractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLefort3FractureValue(box.getString("lefort3FractureValue"));
						
						if(null != box.getString("lefort2FractureValue") && !box.getString("lefort2FractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLefort2FractureValue(box.getString("lefort2FractureValue"));
						
						
						if(null != box.getString("lefort1FractureValue") && !box.getString("lefort1FractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLefort1FractureValue(box.getString("lefort1FractureValue"));
						
						if(null != box.getString("maxillaryDentoAlveolarFractureValue") && !box.getString("maxillaryDentoAlveolarFractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMaxillaryDentoAlveolarFractureValue(box.getString("maxillaryDentoAlveolarFractureValue"));
						
						
						if(null != box.getString("rta") && !box.getString("rta").equals(""))
							opdOralAndMaxillofacialSurgery.setRTA(box.getString("rta"));
						
						if(null != box.getString("history") && !box.getString("history").equals(""))
							opdOralAndMaxillofacialSurgery.setHistory(box.getString("history"));
						
						if(null != box.getString("mediastemitisValue") && !box.getString("mediastemitisValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMediastemitisValue(box.getString("mediastemitisValue"));
						
						if(null != box.getString("retroopharyngealValue") && !box.getString("retroopharyngealValue").equals(""))
							opdOralAndMaxillofacialSurgery.setRetroopharyngealValue(box.getString("retroopharyngealValue"));
						
						if(null != box.getString("lateralPharyngealValue") && !box.getString("lateralPharyngealValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLateralPharyngealValue(box.getString("lateralPharyngealValue"));
						
						if(null != box.getString("nasalBoneFractureValue") && !box.getString("nasalBoneFractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setNasalBoneFractureValue(box.getString("nasalBoneFractureValue"));
						
						
						if(null != box.getString("zygomaticArchFractureValue") && !box.getString("zygomaticArchFractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setZygomaticarchFractureValue(box.getString("zygomaticArchFractureValue"));
						
						

						if(null != box.getString("zygomaticComplexValue") && !box.getString("zygomaticComplexValue").equals(""))
							opdOralAndMaxillofacialSurgery.setZygomaticComplexValue(box.getString("zygomaticComplexValue"));
						
						
						if(null != box.getString("orbitalFractureValue") && !box.getString("orbitalFractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setOrbitalFractureValue(box.getString("orbitalFractureValue"));
						

						if(null != box.getString("frontalBoneFractureValue") && !box.getString("frontalBoneFractureValue").equals(""))
							opdOralAndMaxillofacialSurgery.setFrontalBoneFractureValue(box.getString("frontalBoneFractureValue"));
						
						

						if(null != box.getString("dentoalveolarValue") && !box.getString("dentoalveolarValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDentoalveolarValue(box.getString("dentoalveolarValue"));
						
						

						if(null != box.getString("symphysisValue") && !box.getString("symphysisValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSymphysisValue(box.getString("symphysisValue"));
						
						

						if(null != box.getString("ramusValue") && !box.getString("ramusValue").equals(""))
							opdOralAndMaxillofacialSurgery.setRamusValue(box.getString("ramusValue"));
						
						

						if(null != box.getString("angleValue") && !box.getString("angleValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAngleValue(box.getString("angleValue"));
						
						

						if(null != box.getString("bodyValue") && !box.getString("bodyValue").equals(""))
							opdOralAndMaxillofacialSurgery.setBodyValue(box.getString("bodyValue"));
						
						

						if(null != box.getString("condyleValue") && !box.getString("condyleValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCondyleValue(box.getString("condyleValue"));
						
						

						if(null != box.getString("coronoidValue") && !box.getString("coronoidValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCoronoidValue(box.getString("coronoidValue"));
						
						

						if(null != box.getString("subcondylarValue") && !box.getString("subcondylarValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSubcondylarValue(box.getString("subcondylarValue"));
						
						

						if(null != box.getString("occusion") && !box.getString("occusion").equals(""))
							opdOralAndMaxillofacialSurgery.setOccusion(box.getString("occusion"));
						
						

						if(null != box.getString("mobility") && !box.getString("mobility").equals(""))
							opdOralAndMaxillofacialSurgery.setMobilityOnPressure(box.getString("mobility"));
						
						

						if(null != box.getString("surgicalRemoval") && !box.getString("surgicalRemoval").equals(""))
							opdOralAndMaxillofacialSurgery.setSurgicalRemoval(box.getString("surgicalRemoval"));
						
						

						if(null != box.getString("surgicalExposure") && !box.getString("surgicalExposure").equals(""))
							opdOralAndMaxillofacialSurgery.setSurgicalExposure(box.getString("surgicalExposure"));
						
						

						if(null != box.getString("maxillaValue") && !box.getString("maxillaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMaxillaValue(box.getString("maxillaValue"));
						
						

						if(null != box.getString("mandibleValue") && !box.getString("mandibleValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMandibleValue(box.getString("mandibleValue"));
						
						
						if(box.getString("mandible") != null && !box.getString("mandible").equals("")){
							opdOralAndMaxillofacialSurgery.setMandible(box.getString("mandible"));
						}
						

						if(null != box.getString("buccalMucosaValue") && !box.getString("buccalMucosaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setBuccalMucosaValue(box.getString("buccalMucosaValue"));
						
						

						if(null != box.getString("tongueValue") && !box.getString("tongueValue").equals(""))
							opdOralAndMaxillofacialSurgery.setTongueValue(box.getString("tongueValue"));
						
						

						if(null != box.getString("retromolarMucosaValue") && !box.getString("retromolarMucosaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setRetromolarMucosa(box.getString("retromolarMucosaValue"));
						
						

						if(null != box.getString("floorOfMouthValue") && !box.getString("floorOfMouthValue").equals(""))
							opdOralAndMaxillofacialSurgery.setFloorOfMouthValue(box.getString("floorOfMouthValue"));
						
						

						if(null != box.getString("alveolusValue") && !box.getString("alveolusValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAlveolusValue(box.getString("alveolusValue"));
						
						

						if(null != box.getString("lipsValue") && !box.getString("lipsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLipsValue(box.getString("lipsValue"));
						
						

						if(null != box.getString("preCancerousLesionsValue") && !box.getString("preCancerousLesionsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPreCancerousLesionsValue(box.getString("preCancerousLesionsValue"));
						
						

						if(null != box.getString("preCancerousConditionsValue") && !box.getString("preCancerousConditionsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPreCancerousConditionsValue(box.getString("preCancerousConditionsValue"));
						
						

						if(null != box.getString("othersValue") && !box.getString("othersValue").equals(""))
							opdOralAndMaxillofacialSurgery.setOthersValue(box.getString("othersValue"));
						
						
				
						if(null != box.getString("ewigsSarcoma") && !box.getString("ewigsSarcoma").equals(""))
							opdOralAndMaxillofacialSurgery.setEwigsSarcoma("Yes");
						else
							opdOralAndMaxillofacialSurgery.setEwigsSarcoma("No");
					
						if(null != box.getString("fibrousDysplasiaValue") && !box.getString("fibrousDysplasiaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setFibrousDysplasiaValue(box.getString("fibrousDysplasiaValue"));
						
						

						if(null != box.getString("lymphangiomaValue") && !box.getString("lymphangiomaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLymphangiomaValue(box.getString("lymphangiomaValue"));
						
						

						if(null != box.getString("ewigsSarcomaValue") && !box.getString("ewigsSarcomaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setEwigssarcomaValue(box.getString("ewigsSarcomaValue"));
						
						

						if(null != box.getString("hemangiomaValue") && !box.getString("hemangiomaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setHemangiomaValue(box.getString("hemangiomaValue"));
						
						

						if(null != box.getString("centralGiantValue") && !box.getString("centralGiantValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCentralGiantValue(box.getString("centralGiantValue"));
						
						

						if(null != box.getString("peripheralGiantValue") && !box.getString("peripheralGiantValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPeripheralGiantValue(box.getString("peripheralGiantValue"));
						
						

						if(null != box.getString("anteriovenousMalfromationValue") && !box.getString("anteriovenousMalfromationValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAnteriovenousMalfromationValue(box.getString("anteriovenousMalfromationValue"));
						
						

						if(null != box.getString("excisionValue") && !box.getString("excisionValue").equals(""))
							opdOralAndMaxillofacialSurgery.setExcisionValue(box.getString("excisionValue"));
						
						

											

						if(null != box.getString("others1Value") && !box.getString("others1Value").equals(""))
							opdOralAndMaxillofacialSurgery.setOthers1Value(box.getString("others1Value"));
						
						

						if(null != box.getString("dentigerousCystsValue") && !box.getString("dentigerousCystsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDentigerousCystsValue(box.getString("dentigerousCystsValue"));
						
						

						if(null != box.getString("okcValue") && !box.getString("okcValue").equals(""))
							opdOralAndMaxillofacialSurgery.setOkcValue(box.getString("okcValue"));
						
						

						if(null != box.getString("periapicalCystsValue") && !box.getString("periapicalCystsValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPeriapicalCystsValue(box.getString("periapicalCystsValue"));
						
						
						if(null != box.getString("dermoidCystValue") && !box.getString("dermoidCystValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDermoidCystValue(box.getString("dermoidCystValue"));
						
						if(null != box.getString("sebeceousCystValue") && !box.getString("sebeceousCystValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSebeceousCystValue(box.getString("sebeceousCystValue"));
						
						if(null != box.getString("marsupializationValue") && !box.getString("marsupializationValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMarsupializationValue(box.getString("marsupializationValue"));
						
						if(null != box.getString("enucleationValue") && !box.getString("enucleationValue").equals(""))
							opdOralAndMaxillofacialSurgery.setEnucleationValue(box.getString("enucleationValue"));
						
						if(null != box.getString("others3Value") && !box.getString("others3Value").equals(""))
							opdOralAndMaxillofacialSurgery.setOthers3Value(box.getString("others3Value"));
						
						if(null != box.getString("inflammatoryValue") && !box.getString("inflammatoryValue").equals(""))
							opdOralAndMaxillofacialSurgery.setInflammatoryValue(box.getString("inflammatoryValue"));
						
						if(null != box.getString("obstructiveValue") && !box.getString("obstructiveValue").equals(""))
							opdOralAndMaxillofacialSurgery.setObstructiveValue(box.getString("obstructiveValue"));
						
						if(null != box.getString("mucoceleValue") && !box.getString("mucoceleValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMucoceleValue(box.getString("mucoceleValue"));
						
						if(null != box.getString("ranulaValue") && !box.getString("ranulaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setRanulaValue(box.getString("ranulaValue"));
						
						if(null != box.getString("tumors") && !box.getString("tumors").equals(""))
							opdOralAndMaxillofacialSurgery.setTumors(box.getString("tumors"));
						
						if(null != box.getString("treatment") && !box.getString("treatment").equals(""))
							opdOralAndMaxillofacialSurgery.setTreatment(box.getString("treatment"));
						
						if(null != box.getString("inflammationValue") && !box.getString("inflammationValue").equals(""))
							opdOralAndMaxillofacialSurgery.setInflammationValue(box.getString("inflammationValue"));
						
						if(null != box.getString("ankylosisBonyValue") && !box.getString("ankylosisBonyValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAnkylosisBonyValue(box.getString("ankylosisBonyValue"));
						
						if(null != box.getString("ankylosisFibrousValue") && !box.getString("ankylosisFibrousValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAnkylosisFibrousValue(box.getString("ankylosisFibrousValue"));
						
						if(null != box.getString("dislocationAcuteValue") && !box.getString("dislocationAcuteValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDislocationAcuteValue(box.getString("dislocationAcuteValue"));
						
						if(null != box.getString("dislocationChronicValue") && !box.getString("dislocationChronicValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDislocationChronicValue(box.getString("dislocationChronicValue"));
						
									
						if(null != box.getString("treatmentDiseasese") && !box.getString("treatmentDiseasese").equals(""))
							opdOralAndMaxillofacialSurgery.setTreatmentDiseasese(box.getString("treatmentDiseasese"));
						
						if(null != box.getString("openBiteValue") && !box.getString("openBiteValue").equals(""))
							opdOralAndMaxillofacialSurgery.setOpenBiteValue(box.getString("openBiteValue"));
						
						if(null != box.getString("asymmetryValue") && !box.getString("asymmetryValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAsymmetryValue(box.getString("asymmetryValue"));
						
						if(null != box.getString("anteriorMaxillaryOsteotomyValue") && !box.getString("anteriorMaxillaryOsteotomyValue").equals(""))
							opdOralAndMaxillofacialSurgery.setAnteriorMaxillaryOsteotomyValue(box.getString("anteriorMaxillaryOsteotomyValue"));
						
						if(null != box.getString("leforte1OsteotomyValue") && !box.getString("leforte1OsteotomyValue").equals(""))
							opdOralAndMaxillofacialSurgery.setLeforte1osteotomyValue(box.getString("leforte1OsteotomyValue"));
						
						if(null != box.getString("bssoValue") && !box.getString("bssoValue").equals(""))
							opdOralAndMaxillofacialSurgery.setBssoValue(box.getString("bssoValue"));
						
						if(null != box.getString("ivroValue") && !box.getString("ivroValue").equals(""))
							opdOralAndMaxillofacialSurgery.setIvroValue(box.getString("ivroValue"));
						
						if(null != box.getString("subapicalValue") && !box.getString("subapicalValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSubapicalValue(box.getString("subapicalValue"));
						
						if(null != box.getString("condyletomyValue") && !box.getString("condyletomyValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCondyletomyValue(box.getString("condyletomyValue"));
						
						if(null != box.getString("genioplastyValue") && !box.getString("genioplastyValue").equals(""))
							opdOralAndMaxillofacialSurgery.setGenioplastyValue(box.getString("genioplastyValue"));
						
						if(null != box.getString("distractionOsteogenesisValue") && !box.getString("distractionOsteogenesisValue").equals(""))
							opdOralAndMaxillofacialSurgery.setDistractionOsteogenesisValue(box.getString("distractionOsteogenesisValue"));
						
						if(null != box.getString("trgeminalNeuralgiaValue") && !box.getString("trgeminalNeuralgiaValue").equals(""))
							opdOralAndMaxillofacialSurgery.setTrgeminalNeuralgiaValue(box.getString("trgeminalNeuralgiaValue"));
						
						if(null != box.getString("facialParalysisValue") && !box.getString("facialParalysisValue").equals(""))
							opdOralAndMaxillofacialSurgery.setFacialparalysisValue(box.getString("facialParalysisValue"));
						
						if(null != box.getString("others4Value") && !box.getString("others4Value").equals(""))
							opdOralAndMaxillofacialSurgery.setOthers4Value(box.getString("others4Value"));
						
						if(null != box.getString("medicalValue") && !box.getString("medicalValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMedicalValue(box.getString("medicalValue"));
						
						if(null != box.getString("surgicalValue") && !box.getString("surgicalValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSurgicalValue(box.getString("surgicalValue"));
						
						if(null != box.getString("syndromes") && !box.getString("syndromes").equals(""))
							opdOralAndMaxillofacialSurgery.setSyndromes(box.getString("syndromes"));
						
						if(null != box.getString("cleftLipValue") && !box.getString("cleftLipValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCleftLipValue(box.getString("cleftLipValue"));
						
						if(null != box.getString("cleftPalateValue") && !box.getString("cleftPalateValue").equals(""))
							opdOralAndMaxillofacialSurgery.setCleftPalateValue(box.getString("cleftPalateValue"));
						
						if(null != box.getString("others5Value") && !box.getString("others5Value").equals(""))
							opdOralAndMaxillofacialSurgery.setOthers5Value(box.getString("others5Value"));
					
						
						
						
						
						
						
						
						
						
						
					
						if(null != box.getString("pterygomandibularValue") && !box.getString("pterygomandibularValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPterygomandibularValue(box.getString("pterygomandibularValue"));
						
						if(null != box.getString("retromolarValue") && !box.getString("retromolarValue").equals(""))
							opdOralAndMaxillofacialSurgery.setRetromolarValue(box.getString("retromolarValue"));
						
						if(null != box.getString("submetalValue") && !box.getString("submetalValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSubmetalValue(box.getString("submetalValue"));
						
						if(null != box.getString("sublingualValue") && !box.getString("sublingualValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSublingualValue(box.getString("sublingualValue"));
						
						if(null != box.getString("submandiblarValue") && !box.getString("submandiblarValue").equals(""))
							opdOralAndMaxillofacialSurgery.setSubmandiblarValue(box.getString("submandiblarValue"));
						
						if(null != box.getString("massetericValue") && !box.getString("massetericValue").equals(""))
							opdOralAndMaxillofacialSurgery.setMassetericValue(box.getString("massetericValue"));
						
						if(null != box.getString("pericoronalValue") && !box.getString("pericoronalValue").equals(""))
							opdOralAndMaxillofacialSurgery.setPericoronalValue(box.getString("pericoronalValue"));
						
						
						
						if(null != box.getString("pterygomandibular") && !box.getString("pterygomandibular").equals(""))
								opdOralAndMaxillofacialSurgery.setPterygomandibular("Yes");
							else
								opdOralAndMaxillofacialSurgery.setPterygomandibular("No");
						
						if(null != box.getString("retromolar") && !box.getString("retromolar").equals(""))
						opdOralAndMaxillofacialSurgery.setRetromolar("Yes");
						else
							opdOralAndMaxillofacialSurgery.setRetromolar("No");
						
						if(null != box.getString("submetal") && !box.getString("submetal").equals(""))
						opdOralAndMaxillofacialSurgery.setSubmetal("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSubmetal("No");
						
						if(null != box.getString("sublingual") && !box.getString("sublingual").equals(""))
						opdOralAndMaxillofacialSurgery.setSublingual("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSublingual("No");
						
						if(null != box.getString("submandiblar") && !box.getString("submandiblar").equals(""))
						opdOralAndMaxillofacialSurgery.setSubmandiblar("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSubmandiblar("No");

						if(null != box.getString("retroopharyngeal") && !box.getString("retroopharyngeal").equals(""))
						opdOralAndMaxillofacialSurgery.setRetroopharyngeal("Yes");
						else
							opdOralAndMaxillofacialSurgery.setRetroopharyngeal("No");
						
						if(null != box.getString("lateralPharyngeal") && !box.getString("lateralPharyngeal").equals(""))
							opdOralAndMaxillofacialSurgery.setLateralPharyngeal("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLateralPharyngeal("No");
						
						if(null != box.getString("mediastemitis") && !box.getString("mediastemitis").equals(""))
							opdOralAndMaxillofacialSurgery.setMediastemitis("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMediastemitis("No");
						
						
						
						
						
						
						
						
						if(null != box.getString("buccal") && !box.getString("buccal").equals(""))
							opdOralAndMaxillofacialSurgery.setBuccal("Yes");
						else
							opdOralAndMaxillofacialSurgery.setBuccal("No");
					
						
						if(null != box.getString("canine") && !box.getString("canine").equals(""))
							opdOralAndMaxillofacialSurgery.setCanine("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCanine("No");
						
						if(null != box.getString("pericoronal") && !box.getString("pericoronal").equals(""))
							opdOralAndMaxillofacialSurgery.setPericoronal("Yes");
						else
							opdOralAndMaxillofacialSurgery.setPericoronal("No");
						
						if(null != box.getString("masseteric") && !box.getString("masseteric").equals(""))
							opdOralAndMaxillofacialSurgery.setMasseteric("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMasseteric("No");
						
						if(null != box.getString("maxillaryDentoAlveolarFracture") && !box.getString("maxillaryDentoAlveolarFracture").equals(""))
							opdOralAndMaxillofacialSurgery.setMaxillaryDentoAlveolarFracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMaxillaryDentoAlveolarFracture("No");
						
						if(null != box.getString("lefort1Fracture") && !box.getString("lefort1Fracture").equals(""))
							opdOralAndMaxillofacialSurgery.setLefort1Fracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLefort1Fracture("No");
						
						if(null != box.getString("lefort2Fracture") && !box.getString("lefort2Fracture").equals(""))
							opdOralAndMaxillofacialSurgery.setLefort2Fracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLefort2Fracture("No");
						
						if(null != box.getString("lefort3Fracture") && !box.getString("lefort3Fracture").equals(""))
							opdOralAndMaxillofacialSurgery.setLefort3Fracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLefort3Fracture("No");
						
						if(null != box.getString("nasalBoneFracture") && !box.getString("nasalBoneFracture").equals(""))
							opdOralAndMaxillofacialSurgery.setNasalBoneFracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setNasalBoneFracture("No");
						
						if(null != box.getString("zygomaticArchFracture") && !box.getString("zygomaticArchFracture").equals(""))
							opdOralAndMaxillofacialSurgery.setZygomaticArcFracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setZygomaticArcFracture("No");
						
						if(null != box.getString("zygomaticComplex") && !box.getString("zygomaticComplex").equals(""))
							opdOralAndMaxillofacialSurgery.setZygomaticComplex("Yes");
						else
							opdOralAndMaxillofacialSurgery.setZygomaticComplex("No");
						
						if(null != box.getString("orbitalFracture") && !box.getString("orbitalFracture").equals(""))
							opdOralAndMaxillofacialSurgery.setOrbitalFracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOrbitalFracture("No");
						
						if(null != box.getString("frontalBoneFracture") && !box.getString("frontalBoneFracture").equals(""))
							opdOralAndMaxillofacialSurgery.setFrontalBoneFracture("Yes");
						else
							opdOralAndMaxillofacialSurgery.setFrontalBoneFracture("No");
						
						if(null != box.getString("dentoalveolar") && !box.getString("dentoalveolar").equals(""))
							opdOralAndMaxillofacialSurgery.setDentoalveolar("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDentoalveolar("No");
						
						if(null != box.getString("symphysis") && !box.getString("symphysis").equals(""))
							opdOralAndMaxillofacialSurgery.setSymphysis("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSymphysis("No");
						
						if(null != box.getString("ramus") && !box.getString("ramus").equals(""))
							opdOralAndMaxillofacialSurgery.setRamus("Yes");
						else
							opdOralAndMaxillofacialSurgery.setRamus("No");
						
						if(null != box.getString("angle") && !box.getString("angle").equals(""))
							opdOralAndMaxillofacialSurgery.setAngle("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAngle("No");
						
						if(null != box.getString("body") && !box.getString("body").equals(""))
							opdOralAndMaxillofacialSurgery.setBody("Yes");
						else
							opdOralAndMaxillofacialSurgery.setBody("No");
						
						if(null != box.getString("condyle") && !box.getString("condyle").equals(""))
							opdOralAndMaxillofacialSurgery.setCondyle("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCondyle("No");
						
						if(null != box.getString("coronoid") && !box.getString("coronoid").equals(""))
							opdOralAndMaxillofacialSurgery.setCoronoid("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCoronoid("No");
						
						if(null != box.getString("subcondylar") && !box.getString("subcondylar").equals(""))
							opdOralAndMaxillofacialSurgery.setSubcondylar("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSubcondylar("No");
						
				
						
						if(null != box.getString("maxilla") && !box.getString("maxilla").equals(""))
							opdOralAndMaxillofacialSurgery.setMaxilla("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMaxilla("No");
						
						if(null != box.getString("buccalMucosa1") && !box.getString("buccalMucosa1").equals(""))
							opdOralAndMaxillofacialSurgery.setBuccalMucosa("Yes");
						else
							opdOralAndMaxillofacialSurgery.setBuccalMucosa("No");
						
						if(null != box.getString("tongue1") && !box.getString("tongue1").equals(""))
							opdOralAndMaxillofacialSurgery.setTongue("Yes");
						else
							opdOralAndMaxillofacialSurgery.setTongue("No");
						
						if(null != box.getString("retromolarMucosa") && !box.getString("retromolarMucosa").equals(""))
							opdOralAndMaxillofacialSurgery.setRetromolarMucosa("Yes");
						else
							opdOralAndMaxillofacialSurgery.setRetromolarMucosa("No");
						
						if(null != box.getString("floorOfMouth1") && !box.getString("floorOfMouth1").equals(""))
							opdOralAndMaxillofacialSurgery.setFloorOfMouth("Yes");
						else
							opdOralAndMaxillofacialSurgery.setFloorOfMouth("No");
						
						if(null != box.getString("alveolus") && !box.getString("alveolus").equals(""))
							opdOralAndMaxillofacialSurgery.setAlveolus("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAlveolus("No");
						
						if(null != box.getString("lips") && !box.getString("lips").equals(""))
							opdOralAndMaxillofacialSurgery.setLips("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLips("No");
						
						if(null != box.getString("preCancerousLesions") && !box.getString("preCancerousLesions").equals(""))
							opdOralAndMaxillofacialSurgery.setPreCancerousLesions("Yes");
						else
							opdOralAndMaxillofacialSurgery.setPreCancerousLesions("No");
						


						if(null != box.getString("preCancerousConditions") && !box.getString("preCancerousConditions").equals(""))
							opdOralAndMaxillofacialSurgery.setPreCancerousConditions("Yes");
						else
							opdOralAndMaxillofacialSurgery.setPreCancerousConditions("No");
						
						
						
						if(null != box.getString("others") && !box.getString("others").equals(""))
							opdOralAndMaxillofacialSurgery.setOthersFibroma("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOthersFibroma("No");
						
						
						if(null != box.getString("fibrousDysplasia") && !box.getString("fibrousDysplasia").equals(""))
							opdOralAndMaxillofacialSurgery.setFibrousDysplasia("Yes");
						else
							opdOralAndMaxillofacialSurgery.setFibrousDysplasia("No");
						
						if(null != box.getString("lymphangioma") && !box.getString("lymphangioma").equals(""))
							opdOralAndMaxillofacialSurgery.setLymphangioma("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLymphangioma("No");
						
						
						
						if(null != box.getString("hemangioma") && !box.getString("hemangioma").equals(""))
							opdOralAndMaxillofacialSurgery.setHemangioma("Yes");
						else
							opdOralAndMaxillofacialSurgery.setHemangioma("No");
						
						if(null != box.getString("centralGiant") && !box.getString("centralGiant").equals(""))
							opdOralAndMaxillofacialSurgery.setCentralGiantCellGranuloma("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCentralGiantCellGranuloma("No");
						
						if(null != box.getString("peripheralGiant") && !box.getString("peripheralGiant").equals(""))
							opdOralAndMaxillofacialSurgery.setPeripheralGiantCellGranuloma("Yes");
						else
							opdOralAndMaxillofacialSurgery.setPeripheralGiantCellGranuloma("No");
						
						if(null != box.getString("anteriovenousMalfromation") && !box.getString("anteriovenousMalfromation").equals(""))
							opdOralAndMaxillofacialSurgery.setAnteriovenousmalfromation("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAnteriovenousmalfromation("No");
						
						if(null != box.getString("excision") && !box.getString("excision").equals(""))
							opdOralAndMaxillofacialSurgery.setExcision("Yes");
						else
							opdOralAndMaxillofacialSurgery.setExcision("No");
						
						if(null != box.getString("resection") && !box.getString("resection").equals(""))
							opdOralAndMaxillofacialSurgery.setResection("Yes");
						else
							opdOralAndMaxillofacialSurgery.setResection("No");
						
						if(null != box.getString("others1") && !box.getString("others1").equals(""))
							opdOralAndMaxillofacialSurgery.setOthers("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOthers("No");
						
						if(null != box.getString("dentigerousCysts") && !box.getString("dentigerousCysts").equals(""))
							opdOralAndMaxillofacialSurgery.setDentigerousCysts("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDentigerousCysts("No");
						
						if(null != box.getString("okc") && !box.getString("okc").equals(""))
							opdOralAndMaxillofacialSurgery.setOKC("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOKC("No");
						
						if(null != box.getString("periapicalCysts") && !box.getString("periapicalCysts").equals(""))
							opdOralAndMaxillofacialSurgery.setPeriapicalCysts("Yes");
						else
							opdOralAndMaxillofacialSurgery.setPeriapicalCysts("No");
						
						if(null != box.getString("dermoidCyst") && !box.getString("dermoidCyst").equals(""))
							opdOralAndMaxillofacialSurgery.setDermoidCyst("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDermoidCyst("No");
						
						if(null != box.getString("sebeceousCyst") && !box.getString("sebeceousCyst").equals(""))
							opdOralAndMaxillofacialSurgery.setSebeceousCyst("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSebeceousCyst("No");
						
						if(null != box.getString("marsupialization") && !box.getString("marsupialization").equals(""))
							opdOralAndMaxillofacialSurgery.setMarsupialization("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMarsupialization("No");
						
						if(null != box.getString("enucleation") && !box.getString("enucleation").equals(""))
							opdOralAndMaxillofacialSurgery.setEnucleation("Yes");
						else
							opdOralAndMaxillofacialSurgery.setEnucleation("No");
						
						if(null != box.getString("others3") && !box.getString("others3").equals(""))
							opdOralAndMaxillofacialSurgery.setOthersTreatment("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOthersTreatment("No");
						
						if(null != box.getString("inflammatory") && !box.getString("inflammatory").equals(""))
							opdOralAndMaxillofacialSurgery.setInflammatory("Yes");
						else
							opdOralAndMaxillofacialSurgery.setInflammatory("No");
						
						if(null != box.getString("obstructive") && !box.getString("obstructive").equals(""))
							opdOralAndMaxillofacialSurgery.setObstructive("Yes");
						else
							opdOralAndMaxillofacialSurgery.setObstructive("No");
						
						if(null != box.getString("mucocele") && !box.getString("mucocele").equals(""))
							opdOralAndMaxillofacialSurgery.setMucocele("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMucocele("No");
						
						if(null != box.getString("ranula") && !box.getString("ranula").equals(""))
							opdOralAndMaxillofacialSurgery.setRanula("Yes");
						else
							opdOralAndMaxillofacialSurgery.setRanula("No");
						
						if(null != box.getString("inflammation") && !box.getString("inflammation").equals(""))
							opdOralAndMaxillofacialSurgery.setInflammation("Yes");
						else
							opdOralAndMaxillofacialSurgery.setInflammation("No");
						
						if(null != box.getString("ankylosisBony") && !box.getString("ankylosisBony").equals(""))
							opdOralAndMaxillofacialSurgery.setAnkylosisbony("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAnkylosisbony("No");
						
						if(null != box.getString("ankylosisFibrous") && !box.getString("ankylosisFibrous").equals(""))
							opdOralAndMaxillofacialSurgery.setAnkylosisfibrous("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAnkylosisfibrous("No");
						
						if(null != box.getString("dislocationAcute") && !box.getString("dislocationAcute").equals(""))
							opdOralAndMaxillofacialSurgery.setDislocationacute("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDislocationacute("No");
						
						if(null != box.getString("dislocationChronic") && !box.getString("dislocationChronic").equals(""))
							opdOralAndMaxillofacialSurgery.setDislocationchronic("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDislocationchronic("No");
						
						if(null != box.getString("dislocationSubluxation") && !box.getString("dislocationSubluxation").equals(""))
							opdOralAndMaxillofacialSurgery.setDislocationsubluxation("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDislocationsubluxation("No");
						
						if(null != box.getString("openBite") && !box.getString("openBite").equals(""))
							opdOralAndMaxillofacialSurgery.setOpenBite("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOpenBite("No");
						
						if(null != box.getString("asymmetry") && !box.getString("asymmetry").equals(""))
							opdOralAndMaxillofacialSurgery.setAsymmetry("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAsymmetry("No");
						
						
						
						if(null != box.getString("anteriorMaxillaryOsteotomy") && !box.getString("anteriorMaxillaryOsteotomy").equals(""))
							opdOralAndMaxillofacialSurgery.setAnteriorMaxillaryOsteotomy("Yes");
						else
							opdOralAndMaxillofacialSurgery.setAnteriorMaxillaryOsteotomy("No");
						
						
						
						if(null != box.getString("leforte1Osteotomy") && !box.getString("leforte1Osteotomy").equals(""))
							opdOralAndMaxillofacialSurgery.setLeforte1Osteotomy("Yes");
						else
							opdOralAndMaxillofacialSurgery.setLeforte1Osteotomy("No");
						
						
						
						
						if(null != box.getString("bsso") && !box.getString("bsso").equals(""))
							opdOralAndMaxillofacialSurgery.setBSSO("Yes");
						else
							opdOralAndMaxillofacialSurgery.setBSSO("No");
						
						
						
						if(null != box.getString("ivro") && !box.getString("ivro").equals(""))
							opdOralAndMaxillofacialSurgery.setIVRO("Yes");
						else
							opdOralAndMaxillofacialSurgery.setIVRO("No");
						
						
						if(null != box.getString("subapical") && !box.getString("subapical").equals(""))
							opdOralAndMaxillofacialSurgery.setSubapical("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSubapical("No");
						
						
						if(null != box.getString("condyletomy") && !box.getString("condyletomy").equals(""))
							opdOralAndMaxillofacialSurgery.setCondyletomy("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCondyletomy("No");
						
						
						if(null != box.getString("genioplasty") && !box.getString("genioplasty").equals(""))
							opdOralAndMaxillofacialSurgery.setGenioplasty("Yes");
						else
							opdOralAndMaxillofacialSurgery.setGenioplasty("No");
						
						
						if(null != box.getString("distractionOsteogenesis") && !box.getString("distractionOsteogenesis").equals(""))
							opdOralAndMaxillofacialSurgery.setDistractionOsteogenesis("Yes");
						else
							opdOralAndMaxillofacialSurgery.setDistractionOsteogenesis("No");
						
						
						if(null != box.getString("trgeminalNeuralgia") && !box.getString("trgeminalNeuralgia").equals(""))
							opdOralAndMaxillofacialSurgery.setTrgeminalNeuralgia("Yes");
						else
							opdOralAndMaxillofacialSurgery.setTrgeminalNeuralgia("No");
						
						
						if(null != box.getString("facialParalysis") && !box.getString("facialParalysis").equals(""))
							opdOralAndMaxillofacialSurgery.setFacialParalysis("Yes");
						else
							opdOralAndMaxillofacialSurgery.setFacialParalysis("No");
						
						
						if(null != box.getString("others4") && !box.getString("others4").equals(""))
							opdOralAndMaxillofacialSurgery.setOthersNeurologicalDiseases("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOthersNeurologicalDiseases("No");
						
						
						if(null != box.getString("medical") && !box.getString("medical").equals(""))
							opdOralAndMaxillofacialSurgery.setMedical("Yes");
						else
							opdOralAndMaxillofacialSurgery.setMedical("No");
						
						
						if(null != box.getString("surgical") && !box.getString("surgical").equals(""))
							opdOralAndMaxillofacialSurgery.setSurgical("Yes");
						else
							opdOralAndMaxillofacialSurgery.setSurgical("No");
						
						
						if(null != box.getString("cleftLip") && !box.getString("cleftLip").equals(""))
							opdOralAndMaxillofacialSurgery.setCleftLip("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCleftLip("No");
						
						
						if(null != box.getString("cleftPalate") && !box.getString("cleftPalate").equals(""))
							opdOralAndMaxillofacialSurgery.setCleftPalate("Yes");
						else
							opdOralAndMaxillofacialSurgery.setCleftPalate("No");
						
						
						if(null != box.getString("others5") && !box.getString("others5").equals(""))
							opdOralAndMaxillofacialSurgery.setOthersCongenitalAnomalies("Yes");
						else
							opdOralAndMaxillofacialSurgery.setOthersCongenitalAnomalies("No");
						
						
						
						hbt.save(opdOralAndMaxillofacialSurgery);
						//tnx.commit();
						map.put("opdOralAndMaxillofacialSurgery",opdOralAndMaxillofacialSurgery);
						//int caseRecordPeriodonticsHeaderId=opdCaseRecordPeriodonticsHeader.getId();
						if((!box.getString("data18").equals(""))||(!box.getString("data17").equals(""))||(!box.getString("data16").equals(""))||(!box.getString("data15").equals(""))||
								(!box.getString("data14").equals(""))||(!box.getString("data47").equals(""))||(!box.getString("data31").equals(""))||(!box.getString("data38").equals(""))||
								(!box.getString("data21").equals(""))||(!box.getString("data46").equals(""))||(!box.getString("data32").equals(""))||
								(!box.getString("data22").equals(""))||(!box.getString("data45").equals(""))||(!box.getString("data33").equals(""))||
								(!box.getString("data23").equals(""))||(!box.getString("data44").equals(""))||(!box.getString("data34").equals(""))||
								(!box.getString("data24").equals(""))||(!box.getString("data43").equals(""))||(!box.getString("data35").equals(""))||
								(!box.getString("data25").equals(""))||(!box.getString("data42").equals(""))||(!box.getString("data36").equals(""))||
								(!box.getString("data48").equals(""))||(!box.getString("data41").equals(""))||(!box.getString("data37").equals(""))){
							
							OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
							
							opdPreAssessmentClinicDental.setHin(patient);
							
							
							opdPreAssessmentClinicDental.setVisit(visit);
							
							
							opdPreAssessmentClinicDental.setDepartment(masDepartment);
							
							opdPreAssessmentClinicDental.setFlag("Dental Extractions");
							opdPreAssessmentClinicDental.setHospital(masHospital);
							
							opdPreAssessmentClinicDental.setOralAndMaxillofacialSurgery(opdOralAndMaxillofacialSurgery);
							
							
						// for reading the checkBox value
						if(null != box.getString("data18") && !box.getString("data18").equals(""))
							opdPreAssessmentClinicDental.setTeeth18("y");
						else
							opdPreAssessmentClinicDental.setTeeth18("n");
						// for dropdown value
						String[] teeth_18_valueList=null;
						StringBuilder  tempTeeth_18_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
							teeth_18_valueList=request.getParameterValues("teeth_18_value");
							for(String teeth18Value:teeth_18_valueList){
								tempTeeth_18_value.append(teeth18Value);
								tempTeeth_18_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
						}
						
						if(null != box.getString("data17") && !box.getString("data17").equals(""))
							opdPreAssessmentClinicDental.setTeeth17("y");
						else
							opdPreAssessmentClinicDental.setTeeth17("n");
						
						String[] teeth_17_valueList=null;
						StringBuilder  tempTeeth_17_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
							teeth_17_valueList=request.getParameterValues("teeth_17_value");
							for(String teeth17Value:teeth_17_valueList){
								tempTeeth_17_value.append(teeth17Value);
								tempTeeth_17_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
						}
						
						if(null != box.getString("data16") && !box.getString("data16").equals(""))
							opdPreAssessmentClinicDental.setTeeth16("y");
						else
							opdPreAssessmentClinicDental.setTeeth16("n");
						
						String[] teeth_16_valueList=null;
						StringBuilder  tempTeeth_16_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
							teeth_16_valueList=request.getParameterValues("teeth_16_value");
							for(String teeth16Value:teeth_16_valueList){
								tempTeeth_16_value.append(teeth16Value);
								tempTeeth_16_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
						}
						
						if(null != box.getString("data15") && !box.getString("data15").equals(""))
							opdPreAssessmentClinicDental.setTeeth15("y");
						else
							opdPreAssessmentClinicDental.setTeeth15("n");

						String[] teeth_15_valueList=null;
						StringBuilder  tempTeeth_15_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
							teeth_15_valueList = request.getParameterValues("teeth_15_value");
							for(String teeth15Value : teeth_15_valueList){
								tempTeeth_15_value.append(teeth15Value);
								tempTeeth_15_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
						}
						
						if(null != box.getString("data14") && !box.getString("data14").equals(""))
							opdPreAssessmentClinicDental.setTeeth14("y");
						else
							opdPreAssessmentClinicDental.setTeeth14("n");
						
						String[] teeth_14_valueList=null;
						StringBuilder  tempTeeth_14_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
							teeth_14_valueList=request.getParameterValues("teeth_14_value");
							for(String teeth14Value:teeth_14_valueList){
								tempTeeth_14_value.append(teeth14Value);
								tempTeeth_14_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
						}
						
						if(null != box.getString("data13") && !box.getString("data13").equals(""))
							opdPreAssessmentClinicDental.setTeeth13("y");
						else
							opdPreAssessmentClinicDental.setTeeth13("n");
						
						String[] teeth_13_valueList=null;
						StringBuilder  tempTeeth_13_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
							teeth_13_valueList=request.getParameterValues("teeth_13_value");
							for(String teeth13Value:teeth_13_valueList){
								tempTeeth_13_value.append(teeth13Value);
								tempTeeth_13_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
						}
						
						if(null != box.getString("data12") && !box.getString("data12").equals(""))
							opdPreAssessmentClinicDental.setTeeth12("y");
						else
							opdPreAssessmentClinicDental.setTeeth12("n");
						
						String[] teeth_12_valueList=null;
						StringBuilder  tempTeeth_12_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
							teeth_12_valueList=request.getParameterValues("teeth_12_value");
							for(String teeth12Value:teeth_12_valueList){
								tempTeeth_12_value.append(teeth12Value);
								tempTeeth_12_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
						}
						
						if(null != box.getString("data11") && !box.getString("data11").equals(""))
							opdPreAssessmentClinicDental.setTeeth11("y");
						else
							opdPreAssessmentClinicDental.setTeeth11("n");
						
						String[] teeth_11_valueList=null;
						StringBuilder  tempTeeth_11_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
							teeth_11_valueList=request.getParameterValues("teeth_11_value");
							for(String teeth11Value:teeth_11_valueList){
								tempTeeth_11_value.append(teeth11Value);
								tempTeeth_11_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
						}
						
						if(null != box.getString("data21") && !box.getString("data21").equals(""))
							opdPreAssessmentClinicDental.setTeeth21("y");
						else
							opdPreAssessmentClinicDental.setTeeth21("n");
						
						String[] teeth_21_valueList=null;
						StringBuilder  tempTeeth_21_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
							teeth_21_valueList=request.getParameterValues("teeth_21_value");
							for(String teeth21Value:teeth_21_valueList){
								tempTeeth_21_value.append(teeth21Value);
								tempTeeth_21_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
						}
						
						
						if(null != box.getString("data22") && !box.getString("data22").equals(""))
							opdPreAssessmentClinicDental.setTeeth22("y");
						else
							opdPreAssessmentClinicDental.setTeeth22("n");
						
						String[] teeth_22_valueList=null;
						StringBuilder  tempTeeth_22_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
							teeth_22_valueList=request.getParameterValues("teeth_22_value");
							for(String teeth22Value:teeth_22_valueList){
								tempTeeth_22_value.append(teeth22Value);
								tempTeeth_22_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
						}
						
						if(null != box.getString("data23") && !box.getString("data23").equals(""))
							opdPreAssessmentClinicDental.setTeeth23("y");
						else
							opdPreAssessmentClinicDental.setTeeth23("n");
						
						String[] teeth_23_valueList=null;
						StringBuilder  tempTeeth_23_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
							teeth_23_valueList=request.getParameterValues("teeth_23_value");
							for(String teeth23Value:teeth_23_valueList){
								tempTeeth_23_value.append(teeth23Value);
								tempTeeth_23_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
						}
						
						
						if(null != box.getString("data24") && !box.getString("data24").equals(""))
							opdPreAssessmentClinicDental.setTeeth24("y");
						else
							opdPreAssessmentClinicDental.setTeeth24("n");
						
						String[] teeth_24_valueList=null;
						StringBuilder  tempTeeth_24_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
							teeth_24_valueList=request.getParameterValues("teeth_24_value");
							for(String teeth24Value:teeth_24_valueList){
								tempTeeth_24_value.append(teeth24Value);
								tempTeeth_24_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
						}
						
						if(null != box.getString("data25") && !box.getString("data25").equals(""))
							opdPreAssessmentClinicDental.setTeeth25("y");
						else
							opdPreAssessmentClinicDental.setTeeth25("n");
						
						String[] teeth_25_valueList=null;
						StringBuilder  tempTeeth_25_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
							teeth_25_valueList=request.getParameterValues("teeth_25_value");
							for(String teeth25Value:teeth_25_valueList){
								tempTeeth_25_value.append(teeth25Value);
								tempTeeth_25_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
						}
						
						if(null != box.getString("data26") && !box.getString("data26").equals(""))
							opdPreAssessmentClinicDental.setTeeth26("y");
						else
							opdPreAssessmentClinicDental.setTeeth26("n");
						
						String[] teeth_26_valueList=null;
						StringBuilder  tempTeeth_26_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
							teeth_26_valueList=request.getParameterValues("teeth_26_value");
							for(String teeth26Value:teeth_26_valueList){
								tempTeeth_26_value.append(teeth26Value);
								tempTeeth_26_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
						}
						
						if(null != box.getString("data27") && !box.getString("data27").equals(""))
							opdPreAssessmentClinicDental.setTeeth27("y");
						else
							opdPreAssessmentClinicDental.setTeeth27("n");
						
						String[] teeth_27_valueList=null;
						StringBuilder  tempTeeth_27_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
							teeth_27_valueList=request.getParameterValues("teeth_27_value");
							for(String teeth27Value:teeth_27_valueList){
								tempTeeth_27_value.append(teeth27Value);
								tempTeeth_27_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
						}
						
						if(null != box.getString("data28") && !box.getString("data28").equals(""))
							opdPreAssessmentClinicDental.setTeeth28("y");
						else
							opdPreAssessmentClinicDental.setTeeth28("n");
						
						String[] teeth_28_valueList=null;
						StringBuilder  tempTeeth_28_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
							teeth_28_valueList=request.getParameterValues("teeth_28_value");
							for(String teeth28Value:teeth_28_valueList){
								tempTeeth_28_value.append(teeth28Value);
								tempTeeth_28_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
						}
						
						if(null != box.getString("data48") && !box.getString("data48").equals(""))
							opdPreAssessmentClinicDental.setTeeth48("y");
						else
							opdPreAssessmentClinicDental.setTeeth48("n");
						
						// for dropdown value
						String[] teeth_48_valueList=null;
						StringBuilder  tempTeeth_48_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
							teeth_48_valueList=request.getParameterValues("teeth_48_value");
							for(String teeth48Value:teeth_48_valueList){
								tempTeeth_48_value.append(teeth48Value);
								tempTeeth_48_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
						}
						
						if(null != box.getString("data47") && !box.getString("data47").equals(""))
							opdPreAssessmentClinicDental.setTeeth47("y");
						else
							opdPreAssessmentClinicDental.setTeeth47("n");
						
						String[] teeth_47_valueList=null;
						StringBuilder  tempTeeth_47_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
							teeth_47_valueList=request.getParameterValues("teeth_47_value");
							for(String teeth47Value:teeth_47_valueList){
								tempTeeth_47_value.append(teeth47Value);
								tempTeeth_47_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
						}
						
						if(null != box.getString("data46") && !box.getString("data46").equals(""))
							opdPreAssessmentClinicDental.setTeeth46("y");
						else
							opdPreAssessmentClinicDental.setTeeth46("n");
						
						String[] teeth_46_valueList=null;
						StringBuilder  tempTeeth_46_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
							teeth_46_valueList=request.getParameterValues("teeth_46_value");
							for(String teeth46Value:teeth_46_valueList){
								tempTeeth_46_value.append(teeth46Value);
								tempTeeth_46_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
						}
						
						if(null != box.getString("data45") && !box.getString("data45").equals(""))
							opdPreAssessmentClinicDental.setTeeth45("y");
						else
							opdPreAssessmentClinicDental.setTeeth45("n");

						String[] teeth_45_valueList=null;
						StringBuilder  tempTeeth_45_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
							teeth_45_valueList = request.getParameterValues("teeth_45_value");
							for(String teeth45Value : teeth_45_valueList){
								tempTeeth_45_value.append(teeth45Value);
								tempTeeth_45_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
						}
						
						if(null != box.getString("data44") && !box.getString("data44").equals(""))
							opdPreAssessmentClinicDental.setTeeth44("y");
						else
							opdPreAssessmentClinicDental.setTeeth44("n");
						
						String[] teeth_44_valueList=null;
						StringBuilder  tempTeeth_44_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
							teeth_44_valueList=request.getParameterValues("teeth_44_value");
							for(String teeth44Value:teeth_44_valueList){
								tempTeeth_44_value.append(teeth44Value);
								tempTeeth_44_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
						}
						
						if(null != box.getString("data43") && !box.getString("data43").equals(""))
							opdPreAssessmentClinicDental.setTeeth43("y");
						else
							opdPreAssessmentClinicDental.setTeeth43("n");
						
						String[] teeth_43_valueList=null;
						StringBuilder  tempTeeth_43_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
							teeth_43_valueList=request.getParameterValues("teeth_43_value");
							for(String teeth43Value:teeth_43_valueList){
								tempTeeth_43_value.append(teeth43Value);
								tempTeeth_43_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
						}
						
						if(null != box.getString("data42") && !box.getString("data42").equals(""))
							opdPreAssessmentClinicDental.setTeeth42("y");
						else
							opdPreAssessmentClinicDental.setTeeth42("n");
						
						String[] teeth_42_valueList=null;
						StringBuilder  tempTeeth_42_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
							teeth_42_valueList=request.getParameterValues("teeth_42_value");
							for(String teeth42Value:teeth_42_valueList){
								tempTeeth_42_value.append(teeth42Value);
								tempTeeth_42_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
						}
						
						if(null != box.getString("data41") && !box.getString("data41").equals(""))
							opdPreAssessmentClinicDental.setTeeth41("y");
						else
							opdPreAssessmentClinicDental.setTeeth41("n");
						
						String[] teeth_41_valueList=null;
						StringBuilder  tempTeeth_41_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
							teeth_41_valueList=request.getParameterValues("teeth_41_value");
							for(String teeth41Value:teeth_41_valueList){
								tempTeeth_41_value.append(teeth41Value);
								tempTeeth_41_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
						}
						
						if(null != box.getString("data31") && !box.getString("data31").equals(""))
							opdPreAssessmentClinicDental.setTeeth31("y");
						else
							opdPreAssessmentClinicDental.setTeeth31("n");
						
						String[] teeth_31_valueList=null;
						StringBuilder  tempTeeth_31_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
							teeth_31_valueList=request.getParameterValues("teeth_31_value");
							for(String teeth31Value:teeth_31_valueList){
								tempTeeth_31_value.append(teeth31Value);
								tempTeeth_31_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
						}
						
						
						if(null != box.getString("data32") && !box.getString("data32").equals(""))
							opdPreAssessmentClinicDental.setTeeth32("y");
						else
							opdPreAssessmentClinicDental.setTeeth32("n");
						
						String[] teeth_32_valueList=null;
						StringBuilder  tempTeeth_32_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
							teeth_32_valueList=request.getParameterValues("teeth_32_value");
							for(String teeth32Value:teeth_32_valueList){
								tempTeeth_32_value.append(teeth32Value);
								tempTeeth_32_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
						}
						
						if(null != box.getString("data33") && !box.getString("data33").equals(""))
							opdPreAssessmentClinicDental.setTeeth33("y");
						else
							opdPreAssessmentClinicDental.setTeeth33("n");
						
						String[] teeth_33_valueList=null;
						StringBuilder  tempTeeth_33_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
							teeth_33_valueList=request.getParameterValues("teeth_33_value");
							for(String teeth33Value:teeth_33_valueList){
								tempTeeth_33_value.append(teeth33Value);
								tempTeeth_33_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
						}
						
						
						if(null != box.getString("data34") && !box.getString("data34").equals(""))
							opdPreAssessmentClinicDental.setTeeth34("y");
						else
							opdPreAssessmentClinicDental.setTeeth34("n");
						
						String[] teeth_34_valueList=null;
						StringBuilder  tempTeeth_34_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
							teeth_34_valueList=request.getParameterValues("teeth_34_value");
							for(String teeth34Value:teeth_34_valueList){
								tempTeeth_34_value.append(teeth34Value);
								tempTeeth_34_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
						}
						
						if(null != box.getString("data35") && !box.getString("data35").equals(""))
							opdPreAssessmentClinicDental.setTeeth35("y");
						else
							opdPreAssessmentClinicDental.setTeeth35("n");
						
						String[] teeth_35_valueList=null;
						StringBuilder  tempTeeth_35_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
							teeth_35_valueList=request.getParameterValues("teeth_35_value");
							for(String teeth35Value:teeth_35_valueList){
								tempTeeth_35_value.append(teeth35Value);
								tempTeeth_35_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
						}
						
						if(null != box.getString("data36") && !box.getString("data36").equals(""))
							opdPreAssessmentClinicDental.setTeeth36("y");
						else
							opdPreAssessmentClinicDental.setTeeth36("n");
						
						String[] teeth_36_valueList=null;
						StringBuilder  tempTeeth_36_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
							teeth_36_valueList=request.getParameterValues("teeth_36_value");
							for(String teeth36Value:teeth_36_valueList){
								tempTeeth_36_value.append(teeth36Value);
								tempTeeth_36_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
						}
						
						if(null != box.getString("data37") && !box.getString("data37").equals(""))
							opdPreAssessmentClinicDental.setTeeth37("y");
						else
							opdPreAssessmentClinicDental.setTeeth37("n");
						
						String[] teeth_37_valueList=null;
						StringBuilder  tempTeeth_37_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
							teeth_37_valueList=request.getParameterValues("teeth_37_value");
							for(String teeth37Value:teeth_37_valueList){
								tempTeeth_37_value.append(teeth37Value);
								tempTeeth_37_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
						}
						
						if(null != box.getString("data38") && !box.getString("data38").equals(""))
							opdPreAssessmentClinicDental.setTeeth38("y");
						else
							opdPreAssessmentClinicDental.setTeeth38("n");
						
						String[] teeth_38_valueList=null;
						StringBuilder  tempTeeth_38_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
							teeth_38_valueList=request.getParameterValues("teeth_38_value");
							for(String teeth38Value:teeth_38_valueList){
								tempTeeth_38_value.append(teeth38Value);
								tempTeeth_38_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
						}
						
					
						
					
						hbt.save(opdPreAssessmentClinicDental);
						//tnx.commit();
						map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
						}
						
						if((!box.getString("dataAnother18").equals(""))||(!box.getString("dataAnother17").equals(""))||(!box.getString("dataAnother16").equals(""))||(!box.getString("dataAnother15").equals(""))||
								(!box.getString("dataAnother14").equals(""))||(!box.getString("dataAnother47").equals(""))||(!box.getString("dataAnother31").equals(""))||(!box.getString("dataAnother38").equals(""))||
								(!box.getString("dataAnother21").equals(""))||(!box.getString("dataAnother46").equals(""))||(!box.getString("dataAnother32").equals(""))||
								(!box.getString("dataAnother22").equals(""))||(!box.getString("dataAnother45").equals(""))||(!box.getString("dataAnother33").equals(""))||
								(!box.getString("dataAnother23").equals(""))||(!box.getString("dataAnother44").equals(""))||(!box.getString("dataAnother34").equals(""))||
								(!box.getString("dataAnother24").equals(""))||(!box.getString("dataAnother43").equals(""))||(!box.getString("dataAnother35").equals(""))||
								(!box.getString("dataAnother25").equals(""))||(!box.getString("dataAnother42").equals(""))||(!box.getString("dataAnother36").equals(""))||
								(!box.getString("dataAnother48").equals(""))||(!box.getString("dataAnother41").equals(""))||(!box.getString("dataAnother37").equals(""))){
							
							OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
							
							opdPreAssessmentClinicDental.setHin(patient);
							
							
							opdPreAssessmentClinicDental.setVisit(visit);
							
							
							opdPreAssessmentClinicDental.setDepartment(masDepartment);
							
							opdPreAssessmentClinicDental.setFlag("Impactions");
							opdPreAssessmentClinicDental.setHospital(masHospital);
							
							opdPreAssessmentClinicDental.setOralAndMaxillofacialSurgery(opdOralAndMaxillofacialSurgery);
							
							
						// for reading the checkBox value
						if(null != box.getString("dataAnother18") && !box.getString("dataAnother18").equals(""))
							opdPreAssessmentClinicDental.setTeeth18("y");
						else
							opdPreAssessmentClinicDental.setTeeth18("n");
						// for dropdown value
						String[] teeth_18_valueList=null;
						StringBuilder  tempTeeth_18_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_18_valueAnother") && !request.getParameterValues("teeth_18_valueAnother").equals("")){
							teeth_18_valueList=request.getParameterValues("teeth_18_valueAnother");
							for(String teeth18Value:teeth_18_valueList){
								tempTeeth_18_value.append(teeth18Value);
								tempTeeth_18_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
						}
						
						if(null != box.getString("dataAnother17") && !box.getString("dataAnother17").equals(""))
							opdPreAssessmentClinicDental.setTeeth17("y");
						else
							opdPreAssessmentClinicDental.setTeeth17("n");
						
						String[] teeth_17_valueList=null;
						StringBuilder  tempTeeth_17_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_17_valueAnother") && !request.getParameterValues("teeth_17_valueAnother").equals("")){
							teeth_17_valueList=request.getParameterValues("teeth_17_valueAnother");
							for(String teeth17Value:teeth_17_valueList){
								tempTeeth_17_value.append(teeth17Value);
								tempTeeth_17_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
						}
						
						if(null != box.getString("dataAnother16") && !box.getString("dataAnother16").equals(""))
							opdPreAssessmentClinicDental.setTeeth16("y");
						else
							opdPreAssessmentClinicDental.setTeeth16("n");
						
						String[] teeth_16_valueList=null;
						StringBuilder  tempTeeth_16_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_16_valueAnother") && !request.getParameterValues("teeth_16_valueAnother").equals("")){
							teeth_16_valueList=request.getParameterValues("teeth_16_valueAnother");
							for(String teeth16Value:teeth_16_valueList){
								tempTeeth_16_value.append(teeth16Value);
								tempTeeth_16_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
						}
						
						if(null != box.getString("dataAnother15") && !box.getString("dataAnother15").equals(""))
							opdPreAssessmentClinicDental.setTeeth15("y");
						else
							opdPreAssessmentClinicDental.setTeeth15("n");

						String[] teeth_15_valueList=null;
						StringBuilder  tempTeeth_15_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_15_valueAnother") && !request.getParameterValues("teeth_15_valueAnother").equals("")){
							teeth_15_valueList = request.getParameterValues("teeth_15_valueAnother");
							for(String teeth15Value : teeth_15_valueList){
								tempTeeth_15_value.append(teeth15Value);
								tempTeeth_15_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
						}
						
						if(null != box.getString("dataAnother14") && !box.getString("dataAnother14").equals(""))
							opdPreAssessmentClinicDental.setTeeth14("y");
						else
							opdPreAssessmentClinicDental.setTeeth14("n");
						
						String[] teeth_14_valueList=null;
						StringBuilder  tempTeeth_14_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_14_valueAnother") && !request.getParameterValues("teeth_14_valueAnother").equals("")){
							teeth_14_valueList=request.getParameterValues("teeth_14_valueAnother");
							for(String teeth14Value:teeth_14_valueList){
								tempTeeth_14_value.append(teeth14Value);
								tempTeeth_14_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
						}
						
						if(null != box.getString("dataAnother13") && !box.getString("dataAnother13").equals(""))
							opdPreAssessmentClinicDental.setTeeth13("y");
						else
							opdPreAssessmentClinicDental.setTeeth13("n");
						
						String[] teeth_13_valueList=null;
						StringBuilder  tempTeeth_13_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_13_valueAnother") && !request.getParameterValues("teeth_13_valueAnother").equals("")){
							teeth_13_valueList=request.getParameterValues("teeth_13_valueAnother");
							for(String teeth13Value:teeth_13_valueList){
								tempTeeth_13_value.append(teeth13Value);
								tempTeeth_13_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
						}
						
						if(null != box.getString("dataAnother12") && !box.getString("dataAnother12").equals(""))
							opdPreAssessmentClinicDental.setTeeth12("y");
						else
							opdPreAssessmentClinicDental.setTeeth12("n");
						
						String[] teeth_12_valueList=null;
						StringBuilder  tempTeeth_12_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_12_valueAnother") && !request.getParameterValues("teeth_12_valueAnother").equals("")){
							teeth_12_valueList=request.getParameterValues("teeth_12_valueAnother");
							for(String teeth12Value:teeth_12_valueList){
								tempTeeth_12_value.append(teeth12Value);
								tempTeeth_12_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
						}
						
						if(null != box.getString("dataAnother11") && !box.getString("dataAnother11").equals(""))
							opdPreAssessmentClinicDental.setTeeth11("y");
						else
							opdPreAssessmentClinicDental.setTeeth11("n");
						
						String[] teeth_11_valueList=null;
						StringBuilder  tempTeeth_11_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_11_valueAnother") && !request.getParameterValues("teeth_11_valueAnother").equals("")){
							teeth_11_valueList=request.getParameterValues("teeth_11_valueAnother");
							for(String teeth11Value:teeth_11_valueList){
								tempTeeth_11_value.append(teeth11Value);
								tempTeeth_11_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
						}
						
						if(null != box.getString("dataAnother21") && !box.getString("dataAnother21").equals(""))
							opdPreAssessmentClinicDental.setTeeth21("y");
						else
							opdPreAssessmentClinicDental.setTeeth21("n");
						
						String[] teeth_21_valueList=null;
						StringBuilder  tempTeeth_21_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_21_valueAnother") && !request.getParameterValues("teeth_21_valueAnother").equals("")){
							teeth_21_valueList=request.getParameterValues("teeth_21_valueAnother");
							for(String teeth21Value:teeth_21_valueList){
								tempTeeth_21_value.append(teeth21Value);
								tempTeeth_21_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
						}
						
						
						if(null != box.getString("dataAnother22") && !box.getString("dataAnother22").equals(""))
							opdPreAssessmentClinicDental.setTeeth22("y");
						else
							opdPreAssessmentClinicDental.setTeeth22("n");
						
						String[] teeth_22_valueList=null;
						StringBuilder  tempTeeth_22_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_22_valueAnother") && !request.getParameterValues("teeth_22_valueAnother").equals("")){
							teeth_22_valueList=request.getParameterValues("teeth_22_valueAnother");
							for(String teeth22Value:teeth_22_valueList){
								tempTeeth_22_value.append(teeth22Value);
								tempTeeth_22_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
						}
						
						if(null != box.getString("dataAnother23") && !box.getString("dataAnother23").equals(""))
							opdPreAssessmentClinicDental.setTeeth23("y");
						else
							opdPreAssessmentClinicDental.setTeeth23("n");
						
						String[] teeth_23_valueList=null;
						StringBuilder  tempTeeth_23_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_23_valueAnother") && !request.getParameterValues("teeth_23_valueAnother").equals("")){
							teeth_23_valueList=request.getParameterValues("teeth_23_valueAnother");
							for(String teeth23Value:teeth_23_valueList){
								tempTeeth_23_value.append(teeth23Value);
								tempTeeth_23_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
						}
						
						
						if(null != box.getString("dataAnother24") && !box.getString("dataAnother24").equals(""))
							opdPreAssessmentClinicDental.setTeeth24("y");
						else
							opdPreAssessmentClinicDental.setTeeth24("n");
						
						String[] teeth_24_valueList=null;
						StringBuilder  tempTeeth_24_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_24_valueAnother") && !request.getParameterValues("teeth_24_valueAnother").equals("")){
							teeth_24_valueList=request.getParameterValues("teeth_24_valueAnother");
							for(String teeth24Value:teeth_24_valueList){
								tempTeeth_24_value.append(teeth24Value);
								tempTeeth_24_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
						}
						
						if(null != box.getString("dataAnother25") && !box.getString("dataAnother25").equals(""))
							opdPreAssessmentClinicDental.setTeeth25("y");
						else
							opdPreAssessmentClinicDental.setTeeth25("n");
						
						String[] teeth_25_valueList=null;
						StringBuilder  tempTeeth_25_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_25_valueAnother") && !request.getParameterValues("teeth_25_valueAnother").equals("")){
							teeth_25_valueList=request.getParameterValues("teeth_25_valueAnother");
							for(String teeth25Value:teeth_25_valueList){
								tempTeeth_25_value.append(teeth25Value);
								tempTeeth_25_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
						}
						
						if(null != box.getString("dataAnother26") && !box.getString("dataAnother26").equals(""))
							opdPreAssessmentClinicDental.setTeeth26("y");
						else
							opdPreAssessmentClinicDental.setTeeth26("n");
						
						String[] teeth_26_valueList=null;
						StringBuilder  tempTeeth_26_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_26_valueAnother") && !request.getParameterValues("teeth_26_valueAnother").equals("")){
							teeth_26_valueList=request.getParameterValues("teeth_26_valueAnother");
							for(String teeth26Value:teeth_26_valueList){
								tempTeeth_26_value.append(teeth26Value);
								tempTeeth_26_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
						}
						
						if(null != box.getString("dataAnother27") && !box.getString("dataAnother27").equals(""))
							opdPreAssessmentClinicDental.setTeeth27("y");
						else
							opdPreAssessmentClinicDental.setTeeth27("n");
						
						String[] teeth_27_valueList=null;
						StringBuilder  tempTeeth_27_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_27_valueAnother") && !request.getParameterValues("teeth_27_valueAnother").equals("")){
							teeth_27_valueList=request.getParameterValues("teeth_27_valueAnother");
							for(String teeth27Value:teeth_27_valueList){
								tempTeeth_27_value.append(teeth27Value);
								tempTeeth_27_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
						}
						
						if(null != box.getString("dataAnother28") && !box.getString("dataAnother28").equals(""))
							opdPreAssessmentClinicDental.setTeeth28("y");
						else
							opdPreAssessmentClinicDental.setTeeth28("n");
						
						String[] teeth_28_valueList=null;
						StringBuilder  tempTeeth_28_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_28_valueAnother") && !request.getParameterValues("teeth_28_valueAnother").equals("")){
							teeth_28_valueList=request.getParameterValues("teeth_28_valueAnother");
							for(String teeth28Value:teeth_28_valueList){
								tempTeeth_28_value.append(teeth28Value);
								tempTeeth_28_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
						}
						
						if(null != box.getString("dataAnother48") && !box.getString("dataAnother48").equals(""))
							opdPreAssessmentClinicDental.setTeeth48("y");
						else
							opdPreAssessmentClinicDental.setTeeth48("n");
						
						// for dropdown value
						String[] teeth_48_valueList=null;
						StringBuilder  tempTeeth_48_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_48_valueAnother") && !request.getParameterValues("teeth_48_valueAnother").equals("")){
							teeth_48_valueList=request.getParameterValues("teeth_48_valueAnother");
							for(String teeth48Value:teeth_48_valueList){
								tempTeeth_48_value.append(teeth48Value);
								tempTeeth_48_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
						}
						
						if(null != box.getString("dataAnother47") && !box.getString("dataAnother47").equals(""))
							opdPreAssessmentClinicDental.setTeeth47("y");
						else
							opdPreAssessmentClinicDental.setTeeth47("n");
						
						String[] teeth_47_valueList=null;
						StringBuilder  tempTeeth_47_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_47_valueAnother") && !request.getParameterValues("teeth_47_valueAnother").equals("")){
							teeth_47_valueList=request.getParameterValues("teeth_47_valueAnother");
							for(String teeth47Value:teeth_47_valueList){
								tempTeeth_47_value.append(teeth47Value);
								tempTeeth_47_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
						}
						
						if(null != box.getString("dataAnother46") && !box.getString("dataAnother46").equals(""))
							opdPreAssessmentClinicDental.setTeeth46("y");
						else
							opdPreAssessmentClinicDental.setTeeth46("n");
						
						String[] teeth_46_valueList=null;
						StringBuilder  tempTeeth_46_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_46_valueAnother") && !request.getParameterValues("teeth_46_valueAnother").equals("")){
							teeth_46_valueList=request.getParameterValues("teeth_46_valueAnother");
							for(String teeth46Value:teeth_46_valueList){
								tempTeeth_46_value.append(teeth46Value);
								tempTeeth_46_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
						}
						
						if(null != box.getString("dataAnother45") && !box.getString("dataAnother45").equals(""))
							opdPreAssessmentClinicDental.setTeeth45("y");
						else
							opdPreAssessmentClinicDental.setTeeth45("n");

						String[] teeth_45_valueList=null;
						StringBuilder  tempTeeth_45_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_45_valueAnother") && !request.getParameterValues("teeth_45_valueAnother").equals("")){
							teeth_45_valueList = request.getParameterValues("teeth_45_valueAnother");
							for(String teeth45Value : teeth_45_valueList){
								tempTeeth_45_value.append(teeth45Value);
								tempTeeth_45_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
						}
						
						if(null != box.getString("dataAnother44") && !box.getString("dataAnother44").equals(""))
							opdPreAssessmentClinicDental.setTeeth44("y");
						else
							opdPreAssessmentClinicDental.setTeeth44("n");
						
						String[] teeth_44_valueList=null;
						StringBuilder  tempTeeth_44_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_44_valueAnother") && !request.getParameterValues("teeth_44_valueAnother").equals("")){
							teeth_44_valueList=request.getParameterValues("teeth_44_valueAnother");
							for(String teeth44Value:teeth_44_valueList){
								tempTeeth_44_value.append(teeth44Value);
								tempTeeth_44_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
						}
						
						if(null != box.getString("dataAnother43") && !box.getString("dataAnother43").equals(""))
							opdPreAssessmentClinicDental.setTeeth43("y");
						else
							opdPreAssessmentClinicDental.setTeeth43("n");
						
						String[] teeth_43_valueList=null;
						StringBuilder  tempTeeth_43_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_43_valueAnother") && !request.getParameterValues("teeth_43_valueAnother").equals("")){
							teeth_43_valueList=request.getParameterValues("teeth_43_valueAnother");
							for(String teeth43Value:teeth_43_valueList){
								tempTeeth_43_value.append(teeth43Value);
								tempTeeth_43_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
						}
						
						if(null != box.getString("dataAnother42") && !box.getString("dataAnother42").equals(""))
							opdPreAssessmentClinicDental.setTeeth42("y");
						else
							opdPreAssessmentClinicDental.setTeeth42("n");
						
						String[] teeth_42_valueList=null;
						StringBuilder  tempTeeth_42_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_42_valueAnother") && !request.getParameterValues("teeth_42_valueAnother").equals("")){
							teeth_42_valueList=request.getParameterValues("teeth_42_valueAnother");
							for(String teeth42Value:teeth_42_valueList){
								tempTeeth_42_value.append(teeth42Value);
								tempTeeth_42_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
						}
						
						if(null != box.getString("dataAnother41") && !box.getString("dataAnother41").equals(""))
							opdPreAssessmentClinicDental.setTeeth41("y");
						else
							opdPreAssessmentClinicDental.setTeeth41("n");
						
						String[] teeth_41_valueList=null;
						StringBuilder  tempTeeth_41_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_41_valueAnother") && !request.getParameterValues("teeth_41_valueAnother").equals("")){
							teeth_41_valueList=request.getParameterValues("teeth_41_valueAnother");
							for(String teeth41Value:teeth_41_valueList){
								tempTeeth_41_value.append(teeth41Value);
								tempTeeth_41_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
						}
						
						if(null != box.getString("dataAnother31") && !box.getString("dataAnother31").equals(""))
							opdPreAssessmentClinicDental.setTeeth31("y");
						else
							opdPreAssessmentClinicDental.setTeeth31("n");
						
						String[] teeth_31_valueList=null;
						StringBuilder  tempTeeth_31_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_31_valueAnother") && !request.getParameterValues("teeth_31_valueAnother").equals("")){
							teeth_31_valueList=request.getParameterValues("teeth_31_valueAnother");
							for(String teeth31Value:teeth_31_valueList){
								tempTeeth_31_value.append(teeth31Value);
								tempTeeth_31_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
						}
						
						
						if(null != box.getString("dataAnother32") && !box.getString("dataAnother32").equals(""))
							opdPreAssessmentClinicDental.setTeeth32("y");
						else
							opdPreAssessmentClinicDental.setTeeth32("n");
						
						String[] teeth_32_valueList=null;
						StringBuilder  tempTeeth_32_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_32_valueAnother") && !request.getParameterValues("teeth_32_valueAnother").equals("")){
							teeth_32_valueList=request.getParameterValues("teeth_32_valueAnother");
							for(String teeth32Value:teeth_32_valueList){
								tempTeeth_32_value.append(teeth32Value);
								tempTeeth_32_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
						}
						
						if(null != box.getString("dataAnother33") && !box.getString("dataAnother33").equals(""))
							opdPreAssessmentClinicDental.setTeeth33("y");
						else
							opdPreAssessmentClinicDental.setTeeth33("n");
						
						String[] teeth_33_valueList=null;
						StringBuilder  tempTeeth_33_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_33_valueAnother") && !request.getParameterValues("teeth_33_valueAnother").equals("")){
							teeth_33_valueList=request.getParameterValues("teeth_33_valueAnother");
							for(String teeth33Value:teeth_33_valueList){
								tempTeeth_33_value.append(teeth33Value);
								tempTeeth_33_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
						}
						
						
						if(null != box.getString("dataAnother34") && !box.getString("dataAnother34").equals(""))
							opdPreAssessmentClinicDental.setTeeth34("y");
						else
							opdPreAssessmentClinicDental.setTeeth34("n");
						
						String[] teeth_34_valueList=null;
						StringBuilder  tempTeeth_34_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_34_valueAnother") && !request.getParameterValues("teeth_34_valueAnother").equals("")){
							teeth_34_valueList=request.getParameterValues("teeth_34_valueAnother");
							for(String teeth34Value:teeth_34_valueList){
								tempTeeth_34_value.append(teeth34Value);
								tempTeeth_34_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
						}
						
						if(null != box.getString("dataAnother35") && !box.getString("dataAnother35").equals(""))
							opdPreAssessmentClinicDental.setTeeth35("y");
						else
							opdPreAssessmentClinicDental.setTeeth35("n");
						
						String[] teeth_35_valueList=null;
						StringBuilder  tempTeeth_35_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_35_valueAnother") && !request.getParameterValues("teeth_35_valueAnother").equals("")){
							teeth_35_valueList=request.getParameterValues("teeth_35_valueAnother");
							for(String teeth35Value:teeth_35_valueList){
								tempTeeth_35_value.append(teeth35Value);
								tempTeeth_35_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
						}
						
						if(null != box.getString("dataAnother36") && !box.getString("dataAnother36").equals(""))
							opdPreAssessmentClinicDental.setTeeth36("y");
						else
							opdPreAssessmentClinicDental.setTeeth36("n");
						
						String[] teeth_36_valueList=null;
						StringBuilder  tempTeeth_36_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_36_valueAnother") && !request.getParameterValues("teeth_36_valueAnother").equals("")){
							teeth_36_valueList=request.getParameterValues("teeth_36_valueAnother");
							for(String teeth36Value:teeth_36_valueList){
								tempTeeth_36_value.append(teeth36Value);
								tempTeeth_36_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
						}
						
						if(null != box.getString("dataAnother37") && !box.getString("dataAnother37").equals(""))
							opdPreAssessmentClinicDental.setTeeth37("y");
						else
							opdPreAssessmentClinicDental.setTeeth37("n");
						
						String[] teeth_37_valueList=null;
						StringBuilder  tempTeeth_37_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_37_valueAnother") && !request.getParameterValues("teeth_37_valueAnother").equals("")){
							teeth_37_valueList=request.getParameterValues("teeth_37_valueAnother");
							for(String teeth37Value:teeth_37_valueList){
								tempTeeth_37_value.append(teeth37Value);
								tempTeeth_37_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
						}
						
						if(null != box.getString("dataAnother38") && !box.getString("dataAnother38").equals(""))
							opdPreAssessmentClinicDental.setTeeth38("y");
						else
							opdPreAssessmentClinicDental.setTeeth38("n");
						
						String[] teeth_38_valueList=null;
						StringBuilder  tempTeeth_38_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_38_valueAnother") && !request.getParameterValues("teeth_38_valueAnother").equals("")){
							teeth_38_valueList=request.getParameterValues("teeth_38_valueAnother");
							for(String teeth38Value:teeth_38_valueList){
								tempTeeth_38_value.append(teeth38Value);
								tempTeeth_38_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
						}
						
						opdPreAssessmentClinicDental.setFlag("IMPACTIONS");
					
						hbt.save(opdPreAssessmentClinicDental);
						//tnx.commit();
						map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
						}
						int hdbInspection = 0;
						
						if(null != box.getString("hdbInspection") && !box.getString("hdbInspection").equals("")) {
							hdbInspection = box.getInt("hdbInspection");
						}
						
						OpdInspectionSoftTissue opdInspectionSoftTissue = new OpdInspectionSoftTissue();
						//for (int j = 0; j <=hdbMaxillary; j++) {
							for(int j = 1; j <= hdbInspection; j++) {
								if((!box.getString("site" + j).equals(""))||(!box.getString("numberInspection" +j).equals(""))||(!box.getString("size" +j).equals(""))||
										(!box.getString("shape" + j).equals(""))||(!box.getString("discharge" + j).equals(""))||(!box.getString("colour" + j).equals(""))
										||(!box.getString("skinOverTheSwelling" + j).equals(""))||(!box.getString("surface" + j).equals(""))){
									opdInspectionSoftTissue = new OpdInspectionSoftTissue();
									opdInspectionSoftTissue.setFlag("Inspection");
									opdInspectionSoftTissue.setOralAndMaxillofacialSurgery(opdOralAndMaxillofacialSurgery);
								
							if (!box.getString("site" + j).equals("")) {
								opdInspectionSoftTissue.setSite(box.getString("site" + j));
							}
							if (!box.getString("numberInspection" + j).equals("")) {
								opdInspectionSoftTissue.setNumberInspection(box.getString("numberInspection" + j));
							}
							if (!box.getString("size" + j).equals("")) {
								opdInspectionSoftTissue.setSize(box.getString("size" + j));
							}
							if (!box.getString("shape" + j).equals("")) {
								opdInspectionSoftTissue.setShape(box.getString("shape" + j));
							}
			
							if (!box.getString("discharge" + j).equals("")) {
								opdInspectionSoftTissue.setDischarge(box.getString("discharge" + j));
							}
							if (!box.getString("colour" + j).equals("")) {
								opdInspectionSoftTissue.setColour(box.getString("colour" + j));
							}
							if (!box.getString("surface" + j).equals("")) {
								opdInspectionSoftTissue.setSurface(box.getString("surface" + j));
							}
							if (!box.getString("skinOverTheSwelling" + j).equals("")) {
								opdInspectionSoftTissue.setSurface(box.getString("skinOverTheSwelling" + j));
							}
							hbt.save(opdInspectionSoftTissue);
							}
						}
							
							
												
							int hdbSoftTissueInjury = 0;
							
							if(null != box.getString("hdbSoftTissueInjury") && !box.getString("hdbSoftTissueInjury").equals("")) {
								hdbSoftTissueInjury = box.getInt("hdbSoftTissueInjury");
							}
							
						
							for(int j = 1; j <= hdbSoftTissueInjury; j++) {
								if((!box.getString("site" + j).equals(""))||(!box.getString("typeOfInjury" +j).equals(""))||(!box.getString("size" +j).equals(""))||
										(!box.getString("leftSoftTissue" + j).equals(""))||(!box.getString("rightSoftTissue" + j).equals(""))
										||(!box.getString("commentsSoftTissue" + j).equals(""))){
									opdInspectionSoftTissue = new OpdInspectionSoftTissue();
									opdInspectionSoftTissue.setFlag("SOFT TISSUE INJURY");
									opdInspectionSoftTissue.setOralAndMaxillofacialSurgery(opdOralAndMaxillofacialSurgery);
								
							if (!box.getString("site" + j).equals("")) {
								opdInspectionSoftTissue.setSite(box.getString("site" + j));
							}
							if (!box.getString("typeOfInjury" + j).equals("")) {
								opdInspectionSoftTissue.setTypeOfInjury(box.getString("typeOfInjury" + j));
							}
							if (!box.getString("size" + j).equals("")) {
								opdInspectionSoftTissue.setSize(box.getString("size" + j));
							}
							if (!box.getString("leftSoftTissue" + j).equals("")) {
								opdInspectionSoftTissue.setLeftSoftTissue(box.getString("leftSoftTissue" + j));
							}
			
							if (!box.getString("rightSoftTissueInjury" + j).equals("")) {
								opdInspectionSoftTissue.setRightSoftTissue(box.getString("rightSoftTissueI" + j));
							}
							if (!box.getString("commentsSoftTissueInjury" + j).equals("")) {
								opdInspectionSoftTissue.setCommentsSoftTissue(box.getString("commentsSoftTissue" + j));
							}
						
							hbt.save(opdInspectionSoftTissue);
							}
						}
						
					
							tnx.commit();
							
								
					
							
								
								
					}catch(Exception e){
						e.printStackTrace();
					}
					return map;
				}
				
				public Map<String, Object> showOralAndMaxillofacialSurgery() 
				{
					Map<String, Object> map = new HashMap<String, Object>();
					Session session = (Session) getSession();
					List<MasMaritalStatus> masMaritalStatusList = new ArrayList<MasMaritalStatus>();
					try {

						masMaritalStatusList = session.createCriteria(
								MasMaritalStatus.class).list();
						

					} catch (Exception e) {
						e.printStackTrace();
					}
					map.put("masMaritalStatusList", masMaritalStatusList);
					return map;
				}

				

				@Override
				public Map<String, Object> saveImplantPlanning(
						Map<String, Object> mapForDs, Box box,
						HttpServletRequest request) {	Map<String, Object> map = new HashMap<String, Object>();
						MasSpecialtyTemplate masSpecialtyTemplate = null;
						Transaction tnx=null;
						try{
							Session session = (Session) getSession();
							tnx=session.beginTransaction();
							HibernateTemplate hbt = getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							OpdImplantPlanningHeader opdImplantPlanningHeader = new OpdImplantPlanningHeader();
							
							Integer hinId=0;
							Integer departmentId=0;
							Integer visitId=0;
							Integer hospitalId=0;
							Integer specialtyId=0;
							Integer userId=0;
							String templateName = "";
							
							if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
								hinId = (Integer) mapForDs.get("hinId");
							}
							if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
								visitId = (Integer) mapForDs.get("visitId");
							}
							if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
								departmentId = (Integer) mapForDs.get("departmentId");
							}
							if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
								hospitalId = (Integer) mapForDs.get("hospitalId");
							}
							if(map.get("userId")!=null){
								userId=(Integer)  map.get("userId");	
							}
							
							if(map.get("specialtyId")!=null){
								specialtyId=(Integer)  map.get("specialtyId");	
							}
							if(map.get("templateName")!=null){
								templateName=(String)  map.get("templateName");	
							}
							
							Patient patient = new Patient();
							patient.setId(hinId);
							opdImplantPlanningHeader.setHin(patient);
							
							Visit visit = new Visit();
							visit.setId(visitId);
							opdImplantPlanningHeader.setVisit(visit);
							
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(departmentId);
							opdImplantPlanningHeader.setDepartment(masDepartment);
							
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							opdImplantPlanningHeader.setHospital(masHospital);
							
							
							if(null != box.getString("medicalHistory") && !box.getString("medicalHistory").equals(""))
								opdImplantPlanningHeader.setMedicalHistory(box.getString("medicalHistory"));
						
						
							if(null != box.getString("historyOfAllergyImplantPlanning") && !box.getString("historyOfAllergyImplantPlanning").equals(""))
							{
								opdImplantPlanningHeader.setHistoryOfAllergy(box.getString("historyOfAllergyImplantPlanning"));
								if(null != box.getString("historyOfAllergyImplantPlanningValue") && !box.getString("historyOfAllergyImplantPlanningValue").equals(""))
									opdImplantPlanningHeader.setHistoryOfAllergyValue(box.getString("historyOfAllergyImplantPlanningValue"));
								
								
							}
							else{
								opdImplantPlanningHeader.setHistoryOfAllergy(box.getString("historyOfAllergyImplantPlanning"));
								opdImplantPlanningHeader.setHistoryOfAllergyValue("");
							}
						

							if(null != box.getString("dentalHistoryImplantPlanning") && !box.getString("dentalHistoryImplantPlanning").equals(""))
								opdImplantPlanningHeader.setDentalHistory(box.getString("dentalHistoryImplantPlanning"));
							
							
							if(null != box.getString("adjacentSoftTissues") && !box.getString("adjacentSoftTissues").equals(""))
								opdImplantPlanningHeader.setAdjacentSoftTissues(box.getString("adjacentSoftTissues"));
							
						
							
							if(null != box.getString("tmjFunction") && !box.getString("tmjFunction").equals(""))
								opdImplantPlanningHeader.setTmjFunction(box.getString("tmjFunction"));
							
						
							
							
							
							
							
							if(null != box.getString("parafunctionalHabits") && !box.getString("parafunctionalHabits").equals(""))
								opdImplantPlanningHeader.setParafunctionalHabits(box.getString("parafunctionalHabits"));
							
						
							
							
							if(null != box.getString("edentulousRidge") && !box.getString("edentulousRidge").equals(""))
								opdImplantPlanningHeader.setEdentulousRidge(box.getString("edentulousRidge"));
							
						
							
							
							
							if(null != box.getString("amountOfResorption") && !box.getString("amountOfResorption").equals(""))
								opdImplantPlanningHeader.setAmountOfResorption(box.getString("amountOfResorption"));
							
						
							
							
							
							if(null != box.getString("softHardTissue") && !box.getString("softHardTissue").equals(""))
								opdImplantPlanningHeader.setSoftHardTissue(box.getString("softHardTissue"));
							
						
							
							
							
							if(null != box.getString("suitabilityForImplants") && !box.getString("suitabilityForImplants").equals(""))
								opdImplantPlanningHeader.setSuitabilityForImplants(box.getString("suitabilityForImplants"));
							
						
							
							
							
							if(null != box.getString("radiographicEvaluation") && !box.getString("radiographicEvaluation").equals(""))
								opdImplantPlanningHeader.setRadiographicEvaluation(box.getString("radiographicEvaluation"));
							
						
							
							
							
							if(null != box.getString("boneQuantity") && !box.getString("boneQuantity").equals(""))
								opdImplantPlanningHeader.setBoneQuantity(box.getString("boneQuantity"));
							
						
							
							if(null != box.getString("grafts") && !box.getString("grafts").equals(""))
								opdImplantPlanningHeader.setGrafts(box.getString("grafts"));
							
						
						
							if(null != box.getString("osteoplasties") && !box.getString("osteoplasties").equals(""))
								opdImplantPlanningHeader.setOsteoplasties(box.getString("osteoplasties"));
							
						
							
							if(null != box.getString("gingivoplasties") && !box.getString("gingivoplasties").equals(""))
								opdImplantPlanningHeader.setGingivoplasties(box.getString("gingivoplasties"));
							
						
							
							if(null != box.getString("typeValue") && !box.getString("typeValue").equals(""))
								opdImplantPlanningHeader.setTypeValue(box.getString("typeValue"));
							
						
							
							
							if(null != box.getString("numberValue") && !box.getString("numberValue").equals(""))
								opdImplantPlanningHeader.setNumberValue(box.getString("numberValue"));
							
						
							
							if(null != box.getString("placementPosition") && !box.getString("placementPosition").equals(""))
								opdImplantPlanningHeader.setPlacementPosition(box.getString("placementPosition"));
							
						
							
							hbt.save(opdImplantPlanningHeader);
							tnx.commit();
							map.put("opdImplantPlanningHeader",opdImplantPlanningHeader);
							int opdMaxillofacialTraumaHeaderId=opdImplantPlanningHeader.getId();
							
							if((!box.getString("data18").equals(""))||(!box.getString("data17").equals(""))||(!box.getString("data16").equals(""))||(!box.getString("data15").equals(""))||
									(!box.getString("data14").equals(""))||(!box.getString("data47").equals(""))||(!box.getString("data31").equals(""))||(!box.getString("data38").equals(""))||
									(!box.getString("data21").equals(""))||(!box.getString("data46").equals(""))||(!box.getString("data32").equals(""))||
									(!box.getString("data22").equals(""))||(!box.getString("data45").equals(""))||(!box.getString("data33").equals(""))||
									(!box.getString("data23").equals(""))||(!box.getString("data44").equals(""))||(!box.getString("data34").equals(""))||
									(!box.getString("data24").equals(""))||(!box.getString("data43").equals(""))||(!box.getString("data35").equals(""))||
									(!box.getString("data25").equals(""))||(!box.getString("data42").equals(""))||(!box.getString("data36").equals(""))||
									(!box.getString("data48").equals(""))||(!box.getString("data41").equals(""))||(!box.getString("data37").equals(""))){
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								
								opdPreAssessmentClinicDental.setFlag("Implant Planning");
								opdPreAssessmentClinicDental.setTemplateName("Implant Planning");
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setImplantPlanningHeader(opdImplantPlanningHeader);
								
								
								if(null != box.getString("dentalhiddenValue") && !box.getString("dentalhiddenValue").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));

						
							
								
							// for reading the checkBox value
							if(null != box.getString("data18") && !box.getString("data18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_value");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("data17") && !box.getString("data17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_value");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("data16") && !box.getString("data16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_value");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("data15") && !box.getString("data15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_value");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("data14") && !box.getString("data14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_value");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("data13") && !box.getString("data13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_value");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("data12") && !box.getString("data12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_value");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("data11") && !box.getString("data11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_value");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("data21") && !box.getString("data21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_value");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("data22") && !box.getString("data22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_value");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("data23") && !box.getString("data23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_value");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("data24") && !box.getString("data24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_value");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("data25") && !box.getString("data25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_value");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("data26") && !box.getString("data26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_value");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("data27") && !box.getString("data27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_value");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("data28") && !box.getString("data28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_value");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("data48") && !box.getString("data48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_value");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("data47") && !box.getString("data47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_value");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("data46") && !box.getString("data46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_value");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("data45") && !box.getString("data45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_value");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("data44") && !box.getString("data44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_value");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("data43") && !box.getString("data43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_value");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("data42") && !box.getString("data42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_value");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("data41") && !box.getString("data41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_value");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("data31") && !box.getString("data31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_value");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("data32") && !box.getString("data32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_value");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("data33") && !box.getString("data33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_value");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("data34") && !box.getString("data34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_value");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("data35") && !box.getString("data35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_value");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("data36") && !box.getString("data36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_value");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("data37") && !box.getString("data37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_value");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("data38") && !box.getString("data38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_value");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
							hbt.save(opdPreAssessmentClinicDental);
						
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							tnx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
						return map;
					}
	
				
				
				public Map<String, Object> saveRemovablePartialProsthodontics(Map<String, Object> mapForDs, Box box,
						HttpServletRequest request) {
						Map<String, Object> map = new HashMap<String, Object>();
						MasSpecialtyTemplate masSpecialtyTemplate = null;
						Transaction tnx=null;
						try{
							Session session = (Session) getSession();
							tnx=session.beginTransaction();
							HibernateTemplate hbt = getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							OpdRemovablePartialProsthodonticsHeader opdRemovablePartialProsthodonticsHeader = new OpdRemovablePartialProsthodonticsHeader();
							
							Integer hinId=0;
							Integer departmentId=0;
							Integer visitId=0;
							Integer hospitalId=0;
							Integer specialtyId=0;
							Integer userId=0;
							String templateName = "";
							
							if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
								hinId = (Integer) mapForDs.get("hinId");
							}
							if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
								visitId = (Integer) mapForDs.get("visitId");
							}
							if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
								departmentId = (Integer) mapForDs.get("departmentId");
							}
							if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
								hospitalId = (Integer) mapForDs.get("hospitalId");
							}
							if(map.get("userId")!=null){
								userId=(Integer)  map.get("userId");	
							}
							
							if(map.get("specialtyId")!=null){
								specialtyId=(Integer)  map.get("specialtyId");	
							}
							if(map.get("templateName")!=null){
								templateName=(String)  map.get("templateName");	
							}
							
							Patient patient = new Patient();
							patient.setId(hinId);
							opdRemovablePartialProsthodonticsHeader.setHin(patient);
							
							Visit visit = new Visit();
							visit.setId(visitId);
							opdRemovablePartialProsthodonticsHeader.setVisit(visit);
							
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(departmentId);
							opdRemovablePartialProsthodonticsHeader.setDepartment(masDepartment);
							
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							opdRemovablePartialProsthodonticsHeader.setHospital(masHospital);
							
							
							if(null != box.getString("medicalHistory") && !box.getString("medicalHistory").equals(""))
								opdRemovablePartialProsthodonticsHeader.setMedicalHistory(box.getString("medicalHistory"));
						
						
							if(null != box.getString("treatmentPlanning") && !box.getString("treatmentPlanning").equals(""))
								opdRemovablePartialProsthodonticsHeader.setTreatmentPlanning(box.getString("treatmentPlanning"));
						
							
							if(null != box.getString("historyOfAllergy") && !box.getString("historyOfAllergy").equals("")){
								opdRemovablePartialProsthodonticsHeader.setHistoryOfAllergy(box.getString("historyOfAllergy"));
								if(null != box.getString("historyOfAllergyValue") && !box.getString("historyOfAllergyValue").equals(""))
								{
								opdRemovablePartialProsthodonticsHeader.setHistoryOfAllergyValue(box.getString("historyOfAllergyValue"));
								}}else{
								opdRemovablePartialProsthodonticsHeader.setHistoryOfAllergy(box.getString("historyOfAllergy"));
								opdRemovablePartialProsthodonticsHeader.setHistoryOfAllergyValue("");
								}
						
							
							
							

							if(null != box.getString("dentalHistory") && !box.getString("dentalHistory").equals(""))
								opdRemovablePartialProsthodonticsHeader.setDentalHistory(box.getString("dentalHistory"));
							
							
							if(null != box.getString("oralHygieneStatus") && !box.getString("oralHygieneStatus").equals(""))
								opdRemovablePartialProsthodonticsHeader.setOralHygieneStatus(box.getString("oralHygieneStatus"));
							
						
							
							if(null != box.getString("conditionOfPeriodontium") && !box.getString("conditionOfPeriodontium").equals(""))
								opdRemovablePartialProsthodonticsHeader.setConditionOfPeriodontium(box.getString("conditionOfPeriodontium"));
							
						
							
							
							
							
							
							if(null != box.getString("colorOfGingiva") && !box.getString("colorOfGingiva").equals(""))
								opdRemovablePartialProsthodonticsHeader.setColorOfGingiva(box.getString("colorOfGingiva"));
							
						
							
							
							if(null != box.getString("contourOfGingiva") && !box.getString("contourOfGingiva").equals(""))
								opdRemovablePartialProsthodonticsHeader.setContourOfGingiva(box.getString("contourOfGingiva"));
							
						
							
							
							
							if(null != box.getString("clicking") && !box.getString("clicking").equals(""))
								opdRemovablePartialProsthodonticsHeader.setClicking(box.getString("clicking"));
							
						
							
							
							
							if(null != box.getString("clickingValue") && !box.getString("clickingValue").equals(""))
								opdRemovablePartialProsthodonticsHeader.setClickingValue(box.getString("clickingValue"));
							
						
							
							
							
							if(null != box.getString("pain") && !box.getString("pain").equals(""))
								opdRemovablePartialProsthodonticsHeader.setPain(box.getString("pain"));
							
						
							
							
							
							if(null != box.getString("painValue") && !box.getString("painValue").equals(""))
								opdRemovablePartialProsthodonticsHeader.setPainValue(box.getString("painValue"));
							
						
							
							
							
							if(null != box.getString("deviation") && !box.getString("deviation").equals(""))
								opdRemovablePartialProsthodonticsHeader.setDeviation(box.getString("deviation"));
							
						
							
							if(null != box.getString("deviationValue") && !box.getString("deviationValue").equals(""))
								opdRemovablePartialProsthodonticsHeader.setDeviationValue(box.getString("deviationValue"));
							
						
						
							if(null != box.getString("typeOfGuidance") && !box.getString("typeOfGuidance").equals(""))
								opdRemovablePartialProsthodonticsHeader.setTypeOfGuidance(box.getString("typeOfGuidance"));
							
						
							
							if(null != box.getString("interferencesInMovements") && !box.getString("interferencesInMovements").equals(""))
								opdRemovablePartialProsthodonticsHeader.setInterferencesInMovements(box.getString("interferencesInMovements"));
							
						
							
							if(null != box.getString("examinationOfRidge") && !box.getString("examinationOfRidge").equals(""))
								opdRemovablePartialProsthodonticsHeader.setExaminationOfRidge(box.getString("examinationOfRidge"));
							
						
							
							
							
						
							
							hbt.save(opdRemovablePartialProsthodonticsHeader);
							
							map.put("opdRemovablePartialProsthodonticsHeader",opdRemovablePartialProsthodonticsHeader);
							
							
							if((!box.getString("data18").equals(""))||(!box.getString("data17").equals(""))||(!box.getString("data16").equals(""))||(!box.getString("data15").equals(""))||
									(!box.getString("data14").equals(""))||(!box.getString("data47").equals(""))||(!box.getString("data31").equals(""))||(!box.getString("data38").equals(""))||
									(!box.getString("data21").equals(""))||(!box.getString("data46").equals(""))||(!box.getString("data32").equals(""))||
									(!box.getString("data22").equals(""))||(!box.getString("data45").equals(""))||(!box.getString("data33").equals(""))||
									(!box.getString("data23").equals(""))||(!box.getString("data44").equals(""))||(!box.getString("data34").equals(""))||
									(!box.getString("data24").equals(""))||(!box.getString("data43").equals(""))||(!box.getString("data35").equals(""))||
									(!box.getString("data25").equals(""))||(!box.getString("data42").equals(""))||(!box.getString("data36").equals(""))||
									(!box.getString("data48").equals(""))||(!box.getString("data41").equals(""))||(!box.getString("data37").equals(""))){
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								
								opdPreAssessmentClinicDental.setFlag("Pockets");
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
								opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
								
								if(null != box.getString("dentalhiddenValue") && !box.getString("dentalhiddenValue").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));

						
							
								
							// for reading the checkBox value
							if(null != box.getString("data18") && !box.getString("data18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_value");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("data17") && !box.getString("data17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_value");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("data16") && !box.getString("data16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_value");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("data15") && !box.getString("data15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_value");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("data14") && !box.getString("data14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_value");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("data13") && !box.getString("data13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_value");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("data12") && !box.getString("data12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_value");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("data11") && !box.getString("data11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_value");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("data21") && !box.getString("data21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_value");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("data22") && !box.getString("data22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_value");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("data23") && !box.getString("data23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_value");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("data24") && !box.getString("data24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_value");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("data25") && !box.getString("data25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_value");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("data26") && !box.getString("data26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_value");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("data27") && !box.getString("data27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_value");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("data28") && !box.getString("data28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_value");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("data48") && !box.getString("data48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_value");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("data47") && !box.getString("data47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_value");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("data46") && !box.getString("data46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_value");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("data45") && !box.getString("data45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_value");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("data44") && !box.getString("data44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_value");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("data43") && !box.getString("data43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_value");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("data42") && !box.getString("data42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_value");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("data41") && !box.getString("data41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_value");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("data31") && !box.getString("data31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_value");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("data32") && !box.getString("data32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_value");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("data33") && !box.getString("data33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_value");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("data34") && !box.getString("data34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_value");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("data35") && !box.getString("data35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_value");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("data36") && !box.getString("data36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_value");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("data37") && !box.getString("data37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_value");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("data38") && !box.getString("data38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_value");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
							hbt.save(opdPreAssessmentClinicDental);
				
							}
							
							
							
							if((!box.getString("dataAnother18").equals(""))||(!box.getString("dataAnother17").equals(""))||(!box.getString("dataAnother16").equals(""))||(!box.getString("dataAnother15").equals(""))||
									(!box.getString("dataAnother14").equals(""))||(!box.getString("dataAnother47").equals(""))||(!box.getString("dataAnother31").equals(""))||(!box.getString("dataAnother38").equals(""))||
									(!box.getString("dataAnother21").equals(""))||(!box.getString("dataAnother46").equals(""))||(!box.getString("dataAnother32").equals(""))||
									(!box.getString("dataAnother22").equals(""))||(!box.getString("dataAnother45").equals(""))||(!box.getString("dataAnother33").equals(""))||
									(!box.getString("dataAnother23").equals(""))||(!box.getString("dataAnother44").equals(""))||(!box.getString("dataAnother34").equals(""))||
									(!box.getString("dataAnother24").equals(""))||(!box.getString("dataAnother43").equals(""))||(!box.getString("dataAnother35").equals(""))||
									(!box.getString("dataAnother25").equals(""))||(!box.getString("dataAnother42").equals(""))||(!box.getString("dataAnother36").equals(""))||
									(!box.getString("dataAnother48").equals(""))||(!box.getString("dataAnother41").equals(""))||(!box.getString("dataAnother37").equals("")))
							{
								
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Tooth Mobility");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
								opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
								
								if(null != box.getString("dentalhiddenValueAnother") && !box.getString("dentalhiddenValueAnother").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
								
							// for reading the checkBox value
							if(null != box.getString("dataAnother18") && !box.getString("dataAnother18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_valueAnother") && !request.getParameterValues("teeth_18_valueAnother").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_valueAnother");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("dataAnother17") && !box.getString("dataAnother17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_valueAnother") && !request.getParameterValues("teeth_17_valueAnother").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_valueAnother");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("dataAnother16") && !box.getString("dataAnother16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_valueAnother") && !request.getParameterValues("teeth_16_valueAnother").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_valueAnother");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("dataAnother15") && !box.getString("dataAnother15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_valueAnother") && !request.getParameterValues("teeth_15_valueAnother").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_valueAnother");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("dataAnother14") && !box.getString("dataAnother14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_valueAnother") && !request.getParameterValues("teeth_14_valueAnother").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_valueAnother");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("dataAnother13") && !box.getString("dataAnother13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_valueAnother") && !request.getParameterValues("teeth_13_valueAnother").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_valueAnother");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("dataAnother12") && !box.getString("dataAnother12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_valueAnother") && !request.getParameterValues("teeth_12_valueAnother").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_valueAnother");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("dataAnother11") && !box.getString("dataAnother11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_valueAnother") && !request.getParameterValues("teeth_11_valueAnother").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_valueAnother");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("dataAnother21") && !box.getString("dataAnother21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_valueAnother") && !request.getParameterValues("teeth_21_valueAnother").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_valueAnother");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("dataAnother22") && !box.getString("dataAnother22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_valueAnother") && !request.getParameterValues("teeth_22_valueAnother").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_valueAnother");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("dataAnother23") && !box.getString("dataAnother23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_valueAnother") && !request.getParameterValues("teeth_23_valueAnother").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_valueAnother");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("dataAnother24") && !box.getString("dataAnother24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_valueAnother") && !request.getParameterValues("teeth_24_valueAnother").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_valueAnother");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("dataAnother25") && !box.getString("dataAnother25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_valueAnother") && !request.getParameterValues("teeth_25_valueAnother").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_valueAnother");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("dataAnother26") && !box.getString("dataAnother26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_valueAnother") && !request.getParameterValues("teeth_26_valueAnother").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_valueAnother");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("dataAnother27") && !box.getString("dataAnother27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_valueAnother") && !request.getParameterValues("teeth_27_valueAnother").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_valueAnother");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("dataAnother28") && !box.getString("dataAnother28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_valueAnother") && !request.getParameterValues("teeth_28_valueAnother").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_valueAnother");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("dataAnother48") && !box.getString("dataAnother48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_valueAnother") && !request.getParameterValues("teeth_48_valueAnother").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_valueAnother");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("dataAnother47") && !box.getString("dataAnother47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_valueAnother") && !request.getParameterValues("teeth_47_valueAnother").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_valueAnother");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("dataAnother46") && !box.getString("dataAnother46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_valueAnother") && !request.getParameterValues("teeth_46_valueAnother").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_valueAnother");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("dataAnother45") && !box.getString("dataAnother45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_valueAnother") && !request.getParameterValues("teeth_45_valueAnother").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_valueAnother");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("dataAnother44") && !box.getString("dataAnother44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_valueAnother") && !request.getParameterValues("teeth_44_valueAnother").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_valueAnother");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("dataAnother43") && !box.getString("dataAnother43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_valueAnother") && !request.getParameterValues("teeth_43_valueAnother").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_valueAnother");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("dataAnother42") && !box.getString("dataAnother42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_valueAnother") && !request.getParameterValues("teeth_42_valueAnother").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_valueAnother");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("dataAnother41") && !box.getString("dataAnother41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_valueAnother") && !request.getParameterValues("teeth_41_valueAnother").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_valueAnother");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("dataAnother31") && !box.getString("dataAnother31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_valueAnother") && !request.getParameterValues("teeth_31_valueAnother").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_valueAnother");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("dataAnother32") && !box.getString("dataAnother32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_valueAnother") && !request.getParameterValues("teeth_32_valueAnother").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_valueAnother");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("dataAnother33") && !box.getString("dataAnother33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_valueAnother") && !request.getParameterValues("teeth_33_valueAnother").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_valueAnother");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("dataAnother34") && !box.getString("dataAnother34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_valueAnother") && !request.getParameterValues("teeth_34_valueAnother").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_valueAnother");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("dataAnother35") && !box.getString("dataAnother35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_valueAnother") && !request.getParameterValues("teeth_35_valueAnother").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_valueAnother");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("dataAnother36") && !box.getString("dataAnother36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_valueAnother") && !request.getParameterValues("teeth_36_valueAnother").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_valueAnother");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("dataAnother37") && !box.getString("dataAnother37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_valueAnother") && !request.getParameterValues("teeth_37_valueAnother").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_valueAnother");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("dataAnother38") && !box.getString("dataAnother38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_valueAnother") && !request.getParameterValues("teeth_38_valueAnother").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_valueAnother");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
						
							}
							
												
							if((!box.getString("dataAnotherOne18").equals(""))||(!box.getString("dataAnotherOne17").equals(""))||(!box.getString("dataAnotherOne16").equals(""))||(!box.getString("dataAnotherOne15").equals(""))||
									(!box.getString("dataAnotherOne14").equals(""))||(!box.getString("dataAnotherOne47").equals(""))||(!box.getString("dataAnotherOne31").equals(""))||(!box.getString("dataAnotherOne38").equals(""))||
									(!box.getString("dataAnotherOne21").equals(""))||(!box.getString("dataAnotherOne46").equals(""))||(!box.getString("dataAnotherOne32").equals(""))||
									(!box.getString("dataAnotherOne22").equals(""))||(!box.getString("dataAnotherOne45").equals(""))||(!box.getString("dataAnotherOne33").equals(""))||
									(!box.getString("dataAnotherOne23").equals(""))||(!box.getString("dataAnotherOne44").equals(""))||(!box.getString("dataAnotherOne34").equals(""))||
									(!box.getString("dataAnotherOne24").equals(""))||(!box.getString("dataAnotherOne43").equals(""))||(!box.getString("dataAnotherOne35").equals(""))||
									(!box.getString("dataAnotherOne25").equals(""))||(!box.getString("dataAnotherOne42").equals(""))||(!box.getString("dataAnotherOne36").equals(""))||
									(!box.getString("dataAnotherOne48").equals(""))||(!box.getString("dataAnotherOne41").equals(""))||(!box.getString("dataAnotherOne37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Carious Lesion");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
								opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
										
								if(null != box.getString("dentalhiddenValueOne") && !box.getString("dentalhiddenValueOne").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
								
									// for reading the checkBox value
									if(null != box.getString("dataAnotherOne18") && !box.getString("dataAnotherOne18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									// for dropdown value
									String[] teeth_18_valueList=null;
									StringBuilder  tempTeeth_18_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_18_valueAnotherOne") && !request.getParameterValues("teeth_18_valueAnotherOne").equals("")){
										teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherOne");
										for(String teeth18Value:teeth_18_valueList){
											tempTeeth_18_value.append(teeth18Value);
											tempTeeth_18_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne17") && !box.getString("dataAnotherOne17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									String[] teeth_17_valueList=null;
									StringBuilder  tempTeeth_17_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_17_valueAnotherOne") && !request.getParameterValues("teeth_17_valueAnotherOne").equals("")){
										teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherOne");
										for(String teeth17Value:teeth_17_valueList){
											tempTeeth_17_value.append(teeth17Value);
											tempTeeth_17_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne16") && !box.getString("dataAnotherOne16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									String[] teeth_16_valueList=null;
									StringBuilder  tempTeeth_16_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_16_valueAnotherOne") && !request.getParameterValues("teeth_16_valueAnotherOne").equals("")){
										teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherOne");
										for(String teeth16Value:teeth_16_valueList){
											tempTeeth_16_value.append(teeth16Value);
											tempTeeth_16_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne15") && !box.getString("dataAnotherOne15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									String[] teeth_15_valueList=null;
									StringBuilder  tempTeeth_15_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_15_valueAnotherOne") && !request.getParameterValues("teeth_15_valueAnotherOne").equals("")){
										teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherOne");
										for(String teeth15Value : teeth_15_valueList){
											tempTeeth_15_value.append(teeth15Value);
											tempTeeth_15_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne14") && !box.getString("dataAnotherOne14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									String[] teeth_14_valueList=null;
									StringBuilder  tempTeeth_14_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_14_valueAnotherOne") && !request.getParameterValues("teeth_14_valueAnotherOne").equals("")){
										teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherOne");
										for(String teeth14Value:teeth_14_valueList){
											tempTeeth_14_value.append(teeth14Value);
											tempTeeth_14_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne13") && !box.getString("dataAnotherOne13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									String[] teeth_13_valueList=null;
									StringBuilder  tempTeeth_13_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_13_valueAnotherOne") && !request.getParameterValues("teeth_13_valueAnotherOne").equals("")){
										teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherOne");
										for(String teeth13Value:teeth_13_valueList){
											tempTeeth_13_value.append(teeth13Value);
											tempTeeth_13_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne12") && !box.getString("dataAnotherOne12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									String[] teeth_12_valueList=null;
									StringBuilder  tempTeeth_12_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_12_valueAnotherOne") && !request.getParameterValues("teeth_12_valueAnotherOne").equals("")){
										teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherOne");
										for(String teeth12Value:teeth_12_valueList){
											tempTeeth_12_value.append(teeth12Value);
											tempTeeth_12_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne11") && !box.getString("dataAnotherOne11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									String[] teeth_11_valueList=null;
									StringBuilder  tempTeeth_11_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_11_valueAnotherOne") && !request.getParameterValues("teeth_11_valueAnotherOne").equals("")){
										teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherOne");
										for(String teeth11Value:teeth_11_valueList){
											tempTeeth_11_value.append(teeth11Value);
											tempTeeth_11_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne21") && !box.getString("dataAnotherOne21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									String[] teeth_21_valueList=null;
									StringBuilder  tempTeeth_21_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_21_valueAnotherOne") && !request.getParameterValues("teeth_21_valueAnotherOne").equals("")){
										teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherOne");
										for(String teeth21Value:teeth_21_valueList){
											tempTeeth_21_value.append(teeth21Value);
											tempTeeth_21_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherOne22") && !box.getString("dataAnotherOne22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									String[] teeth_22_valueList=null;
									StringBuilder  tempTeeth_22_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_22_valueAnotherOne") && !request.getParameterValues("teeth_22_valueAnotherOne").equals("")){
										teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherOne");
										for(String teeth22Value:teeth_22_valueList){
											tempTeeth_22_value.append(teeth22Value);
											tempTeeth_22_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne23") && !box.getString("dataAnotherOne23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									String[] teeth_23_valueList=null;
									StringBuilder  tempTeeth_23_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_23_valueAnotherOne") && !request.getParameterValues("teeth_23_valueAnotherOne").equals("")){
										teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherOne");
										for(String teeth23Value:teeth_23_valueList){
											tempTeeth_23_value.append(teeth23Value);
											tempTeeth_23_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherOne24") && !box.getString("dataAnotherOne24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									String[] teeth_24_valueList=null;
									StringBuilder  tempTeeth_24_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_24_valueAnotherOne") && !request.getParameterValues("teeth_24_valueAnotherOne").equals("")){
										teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherOne");
										for(String teeth24Value:teeth_24_valueList){
											tempTeeth_24_value.append(teeth24Value);
											tempTeeth_24_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne25") && !box.getString("dataAnotherOne25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									String[] teeth_25_valueList=null;
									StringBuilder  tempTeeth_25_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_25_valueAnotherOne") && !request.getParameterValues("teeth_25_valueAnotherOne").equals("")){
										teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherOne");
										for(String teeth25Value:teeth_25_valueList){
											tempTeeth_25_value.append(teeth25Value);
											tempTeeth_25_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne26") && !box.getString("dataAnotherOne26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									String[] teeth_26_valueList=null;
									StringBuilder  tempTeeth_26_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_26_valueAnotherOne") && !request.getParameterValues("teeth_26_valueAnotherOne").equals("")){
										teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherOne");
										for(String teeth26Value:teeth_26_valueList){
											tempTeeth_26_value.append(teeth26Value);
											tempTeeth_26_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne27") && !box.getString("dataAnotherOne27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									String[] teeth_27_valueList=null;
									StringBuilder  tempTeeth_27_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_27_valueAnotherOne") && !request.getParameterValues("teeth_27_valueAnotherOne").equals("")){
										teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherOne");
										for(String teeth27Value:teeth_27_valueList){
											tempTeeth_27_value.append(teeth27Value);
											tempTeeth_27_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne28") && !box.getString("dataAnotherOne28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
									String[] teeth_28_valueList=null;
									StringBuilder  tempTeeth_28_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_28_valueAnotherOne") && !request.getParameterValues("teeth_28_valueAnotherOne").equals("")){
										teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherOne");
										for(String teeth28Value:teeth_28_valueList){
											tempTeeth_28_value.append(teeth28Value);
											tempTeeth_28_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne48") && !box.getString("dataAnotherOne48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
									// for dropdown value
									String[] teeth_48_valueList=null;
									StringBuilder  tempTeeth_48_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_48_valueAnotherOne") && !request.getParameterValues("teeth_48_valueAnotherOne").equals("")){
										teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherOne");
										for(String teeth48Value:teeth_48_valueList){
											tempTeeth_48_value.append(teeth48Value);
											tempTeeth_48_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne47") && !box.getString("dataAnotherOne47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									String[] teeth_47_valueList=null;
									StringBuilder  tempTeeth_47_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_47_valueAnotherOne") && !request.getParameterValues("teeth_47_valueAnotherOne").equals("")){
										teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherOne");
										for(String teeth47Value:teeth_47_valueList){
											tempTeeth_47_value.append(teeth47Value);
											tempTeeth_47_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne46") && !box.getString("dataAnotherOne46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									String[] teeth_46_valueList=null;
									StringBuilder  tempTeeth_46_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_46_valueAnotherOne") && !request.getParameterValues("teeth_46_valueAnotherOne").equals("")){
										teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherOne");
										for(String teeth46Value:teeth_46_valueList){
											tempTeeth_46_value.append(teeth46Value);
											tempTeeth_46_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne45") && !box.getString("dataAnotherOne45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

									String[] teeth_45_valueList=null;
									StringBuilder  tempTeeth_45_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_45_valueAnotherOne") && !request.getParameterValues("teeth_45_valueAnotherOne").equals("")){
										teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherOne");
										for(String teeth45Value : teeth_45_valueList){
											tempTeeth_45_value.append(teeth45Value);
											tempTeeth_45_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne44") && !box.getString("dataAnotherOne44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									String[] teeth_44_valueList=null;
									StringBuilder  tempTeeth_44_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_44_valueAnotherOne") && !request.getParameterValues("teeth_44_valueAnotherOne").equals("")){
										teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherOne");
										for(String teeth44Value:teeth_44_valueList){
											tempTeeth_44_value.append(teeth44Value);
											tempTeeth_44_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne43") && !box.getString("dataAnotherOne43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									String[] teeth_43_valueList=null;
									StringBuilder  tempTeeth_43_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_43_valueAnotherOne") && !request.getParameterValues("teeth_43_valueAnotherOne").equals("")){
										teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherOne");
										for(String teeth43Value:teeth_43_valueList){
											tempTeeth_43_value.append(teeth43Value);
											tempTeeth_43_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne42") && !box.getString("dataAnotherOne42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									String[] teeth_42_valueList=null;
									StringBuilder  tempTeeth_42_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_42_valueAnotherOne") && !request.getParameterValues("teeth_42_valueAnotherOne").equals("")){
										teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherOne");
										for(String teeth42Value:teeth_42_valueList){
											tempTeeth_42_value.append(teeth42Value);
											tempTeeth_42_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne41") && !box.getString("dataAnotherOne41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									String[] teeth_41_valueList=null;
									StringBuilder  tempTeeth_41_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_41_valueAnotherOne") && !request.getParameterValues("teeth_41_valueAnotherOne").equals("")){
										teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherOne");
										for(String teeth41Value:teeth_41_valueList){
											tempTeeth_41_value.append(teeth41Value);
											tempTeeth_41_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne31") && !box.getString("dataAnotherOne31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									String[] teeth_31_valueList=null;
									StringBuilder  tempTeeth_31_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_31_valueAnotherOne") && !request.getParameterValues("teeth_31_valueAnotherOne").equals("")){
										teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherOne");
										for(String teeth31Value:teeth_31_valueList){
											tempTeeth_31_value.append(teeth31Value);
											tempTeeth_31_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherOne32") && !box.getString("dataAnotherOne32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									String[] teeth_32_valueList=null;
									StringBuilder  tempTeeth_32_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_32_valueAnotherOne") && !request.getParameterValues("teeth_32_valueAnotherOne").equals("")){
										teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherOne");
										for(String teeth32Value:teeth_32_valueList){
											tempTeeth_32_value.append(teeth32Value);
											tempTeeth_32_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne33") && !box.getString("dataAnotherOne33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									String[] teeth_33_valueList=null;
									StringBuilder  tempTeeth_33_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_33_valueAnotherOne") && !request.getParameterValues("teeth_33_valueAnotherOne").equals("")){
										teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherOne");
										for(String teeth33Value:teeth_33_valueList){
											tempTeeth_33_value.append(teeth33Value);
											tempTeeth_33_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherOne34") && !box.getString("dataAnotherOne34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									String[] teeth_34_valueList=null;
									StringBuilder  tempTeeth_34_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_34_valueAnotherOne") && !request.getParameterValues("teeth_34_valueAnotherOne").equals("")){
										teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherOne");
										for(String teeth34Value:teeth_34_valueList){
											tempTeeth_34_value.append(teeth34Value);
											tempTeeth_34_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne35") && !box.getString("dataAnotherOne35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									String[] teeth_35_valueList=null;
									StringBuilder  tempTeeth_35_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_35_valueAnotherOne") && !request.getParameterValues("teeth_35_valueAnotherOne").equals("")){
										teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherOne");
										for(String teeth35Value:teeth_35_valueList){
											tempTeeth_35_value.append(teeth35Value);
											tempTeeth_35_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne36") && !box.getString("dataAnotherOne36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									String[] teeth_36_valueList=null;
									StringBuilder  tempTeeth_36_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_36_valueAnotherOne") && !request.getParameterValues("teeth_36_valueAnotherOne").equals("")){
										teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherOne");
										for(String teeth36Value:teeth_36_valueList){
											tempTeeth_36_value.append(teeth36Value);
											tempTeeth_36_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne37") && !box.getString("dataAnotherOne37").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									String[] teeth_37_valueList=null;
									StringBuilder  tempTeeth_37_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_37_valueAnotherOne") && !request.getParameterValues("teeth_37_valueAnotherOne").equals("")){
										teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherOne");
										for(String teeth37Value:teeth_37_valueList){
											tempTeeth_37_value.append(teeth37Value);
											tempTeeth_37_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
									}
									
									if(null != box.getString("dataAnotherOne38") && !box.getString("dataAnotherOne38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									String[] teeth_38_valueList=null;
									StringBuilder  tempTeeth_38_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_38_valueAnotherOne") && !request.getParameterValues("teeth_38_valueAnotherOne").equals("")){
										teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherOne");
										for(String teeth38Value:teeth_38_valueList){
											tempTeeth_38_value.append(teeth38Value);
											tempTeeth_38_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
									}
									
							
							
							
								hbt.save(opdPreAssessmentClinicDental);
								//tnx.commit();
								map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
								}
								
								if((!box.getString("dataAnotherTwo18").equals(""))||(!box.getString("dataAnotherTwo17").equals(""))||(!box.getString("dataAnotherTwo16").equals(""))||(!box.getString("dataAnotherTwo15").equals(""))||
										(!box.getString("dataAnotherTwo14").equals(""))||(!box.getString("dataAnotherTwo47").equals(""))||(!box.getString("dataAnotherTwo31").equals(""))||(!box.getString("dataAnotherTwo38").equals(""))||
										(!box.getString("dataAnotherTwo21").equals(""))||(!box.getString("dataAnotherTwo46").equals(""))||(!box.getString("dataAnotherTwo32").equals(""))||
										(!box.getString("dataAnotherTwo22").equals(""))||(!box.getString("dataAnotherTwo45").equals(""))||(!box.getString("dataAnotherTwo33").equals(""))||
										(!box.getString("dataAnotherTwo23").equals(""))||(!box.getString("dataAnotherTwo44").equals(""))||(!box.getString("dataAnotherTwo34").equals(""))||
										(!box.getString("dataAnotherTwo24").equals(""))||(!box.getString("dataAnotherTwo43").equals(""))||(!box.getString("dataAnotherTwo35").equals(""))||
										(!box.getString("dataAnotherTwo25").equals(""))||(!box.getString("dataAnotherTwo42").equals(""))||(!box.getString("dataAnotherTwo36").equals(""))||
										(!box.getString("dataAnotherTwo48").equals(""))||(!box.getString("dataAnotherTwo41").equals(""))||(!box.getString("dataAnotherTwo37").equals("")))
								{
									
									OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
									
									opdPreAssessmentClinicDental.setHin(patient);
									
									
									opdPreAssessmentClinicDental.setVisit(visit);
									
									
									opdPreAssessmentClinicDental.setDepartment(masDepartment);
									
									opdPreAssessmentClinicDental.setFlag("Colour Variation of Enamel");
									opdPreAssessmentClinicDental.setHospital(masHospital);
									opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
									opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
									
									if(null != box.getString("dentalhiddenValueTwo") && !box.getString("dentalhiddenValueTwo").equals(""))
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueTwo"));
									else
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueTwo"));
								
									
									
									// for reading the checkBox value
									if(null != box.getString("dataAnotherTwo18") && !box.getString("dataAnotherTwo18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									// for dropdown value
									String[] teeth_18_valueList=null;
									StringBuilder  tempTeeth_18_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_18_valueAnotherTwo") && !request.getParameterValues("teeth_18_valueAnotherTwo").equals("")){
										teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherTwo");
										for(String teeth18Value:teeth_18_valueList){
											tempTeeth_18_value.append(teeth18Value);
											tempTeeth_18_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo17") && !box.getString("dataAnotherTwo17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									String[] teeth_17_valueList=null;
									StringBuilder  tempTeeth_17_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_17_valueAnotherTwo") && !request.getParameterValues("teeth_17_valueAnotherTwo").equals("")){
										teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherTwo");
										for(String teeth17Value:teeth_17_valueList){
											tempTeeth_17_value.append(teeth17Value);
											tempTeeth_17_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo16") && !box.getString("dataAnotherTwo16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									String[] teeth_16_valueList=null;
									StringBuilder  tempTeeth_16_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_16_valueAnotherTwo") && !request.getParameterValues("teeth_16_valueAnotherTwo").equals("")){
										teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherTwo");
										for(String teeth16Value:teeth_16_valueList){
											tempTeeth_16_value.append(teeth16Value);
											tempTeeth_16_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo15") && !box.getString("dataAnotherTwo15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									String[] teeth_15_valueList=null;
									StringBuilder  tempTeeth_15_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_15_valueAnotherTwo") && !request.getParameterValues("teeth_15_valueAnotherTwo").equals("")){
										teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherTwo");
										for(String teeth15Value : teeth_15_valueList){
											tempTeeth_15_value.append(teeth15Value);
											tempTeeth_15_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo14") && !box.getString("dataAnotherTwo14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									String[] teeth_14_valueList=null;
									StringBuilder  tempTeeth_14_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_14_valueAnotherTwo") && !request.getParameterValues("teeth_14_valueAnotherTwo").equals("")){
										teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherTwo");
										for(String teeth14Value:teeth_14_valueList){
											tempTeeth_14_value.append(teeth14Value);
											tempTeeth_14_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo13") && !box.getString("dataAnotherTwo13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									String[] teeth_13_valueList=null;
									StringBuilder  tempTeeth_13_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_13_valueAnotherTwo") && !request.getParameterValues("teeth_13_valueAnotherTwo").equals("")){
										teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherTwo");
										for(String teeth13Value:teeth_13_valueList){
											tempTeeth_13_value.append(teeth13Value);
											tempTeeth_13_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo12") && !box.getString("dataAnotherTwo12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									String[] teeth_12_valueList=null;
									StringBuilder  tempTeeth_12_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_12_valueAnotherTwo") && !request.getParameterValues("teeth_12_valueAnotherTwo").equals("")){
										teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherTwo");
										for(String teeth12Value:teeth_12_valueList){
											tempTeeth_12_value.append(teeth12Value);
											tempTeeth_12_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo11") && !box.getString("dataAnotherTwo11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									String[] teeth_11_valueList=null;
									StringBuilder  tempTeeth_11_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_11_valueAnotherTwo") && !request.getParameterValues("teeth_11_valueAnotherTwo").equals("")){
										teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherTwo");
										for(String teeth11Value:teeth_11_valueList){
											tempTeeth_11_value.append(teeth11Value);
											tempTeeth_11_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo21") && !box.getString("dataAnotherTwo21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									String[] teeth_21_valueList=null;
									StringBuilder  tempTeeth_21_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_21_valueAnotherTwo") && !request.getParameterValues("teeth_21_valueAnotherTwo").equals("")){
										teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherTwo");
										for(String teeth21Value:teeth_21_valueList){
											tempTeeth_21_value.append(teeth21Value);
											tempTeeth_21_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherTwo22") && !box.getString("dataAnotherTwo22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									String[] teeth_22_valueList=null;
									StringBuilder  tempTeeth_22_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_22_valueAnotherTwo") && !request.getParameterValues("teeth_22_valueAnotherTwo").equals("")){
										teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherTwo");
										for(String teeth22Value:teeth_22_valueList){
											tempTeeth_22_value.append(teeth22Value);
											tempTeeth_22_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo23") && !box.getString("dataAnotherTwo23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									String[] teeth_23_valueList=null;
									StringBuilder  tempTeeth_23_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_23_valueAnotherTwo") && !request.getParameterValues("teeth_23_valueAnotherTwo").equals("")){
										teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherTwo");
										for(String teeth23Value:teeth_23_valueList){
											tempTeeth_23_value.append(teeth23Value);
											tempTeeth_23_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherTwo24") && !box.getString("dataAnotherTwo24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									String[] teeth_24_valueList=null;
									StringBuilder  tempTeeth_24_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_24_valueAnotherTwo") && !request.getParameterValues("teeth_24_valueAnotherTwo").equals("")){
										teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherTwo");
										for(String teeth24Value:teeth_24_valueList){
											tempTeeth_24_value.append(teeth24Value);
											tempTeeth_24_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo25") && !box.getString("dataAnotherTwo25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									String[] teeth_25_valueList=null;
									StringBuilder  tempTeeth_25_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_25_valueAnotherTwo") && !request.getParameterValues("teeth_25_valueAnotherTwo").equals("")){
										teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherTwo");
										for(String teeth25Value:teeth_25_valueList){
											tempTeeth_25_value.append(teeth25Value);
											tempTeeth_25_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo26") && !box.getString("dataAnotherTwo26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									String[] teeth_26_valueList=null;
									StringBuilder  tempTeeth_26_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_26_valueAnotherTwo") && !request.getParameterValues("teeth_26_valueAnotherTwo").equals("")){
										teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherTwo");
										for(String teeth26Value:teeth_26_valueList){
											tempTeeth_26_value.append(teeth26Value);
											tempTeeth_26_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo27") && !box.getString("dataAnotherTwo27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									String[] teeth_27_valueList=null;
									StringBuilder  tempTeeth_27_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_27_valueAnotherTwo") && !request.getParameterValues("teeth_27_valueAnotherTwo").equals("")){
										teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherTwo");
										for(String teeth27Value:teeth_27_valueList){
											tempTeeth_27_value.append(teeth27Value);
											tempTeeth_27_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo28") && !box.getString("dataAnotherTwo28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
									String[] teeth_28_valueList=null;
									StringBuilder  tempTeeth_28_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_28_valueAnotherTwo") && !request.getParameterValues("teeth_28_valueAnotherTwo").equals("")){
										teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherTwo");
										for(String teeth28Value:teeth_28_valueList){
											tempTeeth_28_value.append(teeth28Value);
											tempTeeth_28_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo48") && !box.getString("dataAnotherTwo48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
									// for dropdown value
									String[] teeth_48_valueList=null;
									StringBuilder  tempTeeth_48_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_48_valueAnotherTwo") && !request.getParameterValues("teeth_48_valueAnotherTwo").equals("")){
										teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherTwo");
										for(String teeth48Value:teeth_48_valueList){
											tempTeeth_48_value.append(teeth48Value);
											tempTeeth_48_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo47") && !box.getString("dataAnotherTwo47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									String[] teeth_47_valueList=null;
									StringBuilder  tempTeeth_47_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_47_valueAnotherTwo") && !request.getParameterValues("teeth_47_valueAnotherTwo").equals("")){
										teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherTwo");
										for(String teeth47Value:teeth_47_valueList){
											tempTeeth_47_value.append(teeth47Value);
											tempTeeth_47_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo46") && !box.getString("dataAnotherTwo46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									String[] teeth_46_valueList=null;
									StringBuilder  tempTeeth_46_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_46_valueAnotherTwo") && !request.getParameterValues("teeth_46_valueAnotherTwo").equals("")){
										teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherTwo");
										for(String teeth46Value:teeth_46_valueList){
											tempTeeth_46_value.append(teeth46Value);
											tempTeeth_46_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo45") && !box.getString("dataAnotherTwo45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

									String[] teeth_45_valueList=null;
									StringBuilder  tempTeeth_45_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_45_valueAnotherTwo") && !request.getParameterValues("teeth_45_valueAnotherTwo").equals("")){
										teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherTwo");
										for(String teeth45Value : teeth_45_valueList){
											tempTeeth_45_value.append(teeth45Value);
											tempTeeth_45_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo44") && !box.getString("dataAnotherTwo44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									String[] teeth_44_valueList=null;
									StringBuilder  tempTeeth_44_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_44_valueAnotherTwo") && !request.getParameterValues("teeth_44_valueAnotherTwo").equals("")){
										teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherTwo");
										for(String teeth44Value:teeth_44_valueList){
											tempTeeth_44_value.append(teeth44Value);
											tempTeeth_44_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo43") && !box.getString("dataAnotherTwo43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									String[] teeth_43_valueList=null;
									StringBuilder  tempTeeth_43_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_43_valueAnotherTwo") && !request.getParameterValues("teeth_43_valueAnotherTwo").equals("")){
										teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherTwo");
										for(String teeth43Value:teeth_43_valueList){
											tempTeeth_43_value.append(teeth43Value);
											tempTeeth_43_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo42") && !box.getString("dataAnotherTwo42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									String[] teeth_42_valueList=null;
									StringBuilder  tempTeeth_42_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_42_valueAnotherTwo") && !request.getParameterValues("teeth_42_valueAnotherTwo").equals("")){
										teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherTwo");
										for(String teeth42Value:teeth_42_valueList){
											tempTeeth_42_value.append(teeth42Value);
											tempTeeth_42_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo41") && !box.getString("dataAnotherTwo41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									String[] teeth_41_valueList=null;
									StringBuilder  tempTeeth_41_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_41_valueAnotherTwo") && !request.getParameterValues("teeth_41_valueAnotherTwo").equals("")){
										teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherTwo");
										for(String teeth41Value:teeth_41_valueList){
											tempTeeth_41_value.append(teeth41Value);
											tempTeeth_41_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo31") && !box.getString("dataAnotherTwo31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									String[] teeth_31_valueList=null;
									StringBuilder  tempTeeth_31_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_31_valueAnotherTwo") && !request.getParameterValues("teeth_31_valueAnotherTwo").equals("")){
										teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherTwo");
										for(String teeth31Value:teeth_31_valueList){
											tempTeeth_31_value.append(teeth31Value);
											tempTeeth_31_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherTwo32") && !box.getString("dataAnotherTwo32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									String[] teeth_32_valueList=null;
									StringBuilder  tempTeeth_32_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_32_valueAnotherTwo") && !request.getParameterValues("teeth_32_valueAnotherTwo").equals("")){
										teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherTwo");
										for(String teeth32Value:teeth_32_valueList){
											tempTeeth_32_value.append(teeth32Value);
											tempTeeth_32_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo33") && !box.getString("dataAnotherTwo33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									String[] teeth_33_valueList=null;
									StringBuilder  tempTeeth_33_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_33_valueAnotherTwo") && !request.getParameterValues("teeth_33_valueAnotherTwo").equals("")){
										teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherTwo");
										for(String teeth33Value:teeth_33_valueList){
											tempTeeth_33_value.append(teeth33Value);
											tempTeeth_33_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherTwo34") && !box.getString("dataAnotherTwo34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									String[] teeth_34_valueList=null;
									StringBuilder  tempTeeth_34_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_34_valueAnotherTwo") && !request.getParameterValues("teeth_34_valueAnotherTwo").equals("")){
										teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherTwo");
										for(String teeth34Value:teeth_34_valueList){
											tempTeeth_34_value.append(teeth34Value);
											tempTeeth_34_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo35") && !box.getString("dataAnotherTwo35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									String[] teeth_35_valueList=null;
									StringBuilder  tempTeeth_35_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_35_valueAnotherTwo") && !request.getParameterValues("teeth_35_valueAnotherTwo").equals("")){
										teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherTwo");
										for(String teeth35Value:teeth_35_valueList){
											tempTeeth_35_value.append(teeth35Value);
											tempTeeth_35_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo36") && !box.getString("dataAnotherTwo36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									String[] teeth_36_valueList=null;
									StringBuilder  tempTeeth_36_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_36_valueAnotherTwo") && !request.getParameterValues("teeth_36_valueAnotherTwo").equals("")){
										teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherTwo");
										for(String teeth36Value:teeth_36_valueList){
											tempTeeth_36_value.append(teeth36Value);
											tempTeeth_36_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo37") && !box.getString("dataAnotherTwo37").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									String[] teeth_37_valueList=null;
									StringBuilder  tempTeeth_37_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_37_valueAnotherTwo") && !request.getParameterValues("teeth_37_valueAnotherTwo").equals("")){
										teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherTwo");
										for(String teeth37Value:teeth_37_valueList){
											tempTeeth_37_value.append(teeth37Value);
											tempTeeth_37_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
									}
									
									if(null != box.getString("dataAnotherTwo38") && !box.getString("dataAnotherTwo38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									String[] teeth_38_valueList=null;
									StringBuilder  tempTeeth_38_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_38_valueAnotherTwo") && !request.getParameterValues("teeth_38_valueAnotherTwo").equals("")){
										teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherTwo");
										for(String teeth38Value:teeth_38_valueList){
											tempTeeth_38_value.append(teeth38Value);
											tempTeeth_38_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
									}
									
							
							
							
								hbt.save(opdPreAssessmentClinicDental);
								//tnx.commit();
								map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
								}
								
								if((!box.getString("dataAnotherThree18").equals(""))||(!box.getString("dataAnotherThree17").equals(""))||(!box.getString("dataAnotherThree16").equals(""))||(!box.getString("dataAnotherThree15").equals(""))||
										(!box.getString("dataAnotherThree14").equals(""))||(!box.getString("dataAnotherThree47").equals(""))||(!box.getString("dataAnotherThree31").equals(""))||(!box.getString("dataAnotherThree38").equals(""))||
										(!box.getString("dataAnotherThree21").equals(""))||(!box.getString("dataAnotherThree46").equals(""))||(!box.getString("dataAnotherThree32").equals(""))||
										(!box.getString("dataAnotherThree22").equals(""))||(!box.getString("dataAnotherThree45").equals(""))||(!box.getString("dataAnotherThree33").equals(""))||
										(!box.getString("dataAnotherThree23").equals(""))||(!box.getString("dataAnotherThree44").equals(""))||(!box.getString("dataAnotherThree34").equals(""))||
										(!box.getString("dataAnotherThree24").equals(""))||(!box.getString("dataAnotherThree43").equals(""))||(!box.getString("dataAnotherThree35").equals(""))||
										(!box.getString("dataAnotherThree25").equals(""))||(!box.getString("dataAnotherThree42").equals(""))||(!box.getString("dataAnotherThree36").equals(""))||
										(!box.getString("dataAnotherThree48").equals(""))||(!box.getString("dataAnotherThree41").equals(""))||(!box.getString("dataAnotherThree37").equals("")))
								{
									
									OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
									
									opdPreAssessmentClinicDental.setHin(patient);
									
									
									opdPreAssessmentClinicDental.setVisit(visit);
									
									
									opdPreAssessmentClinicDental.setDepartment(masDepartment);
									
									opdPreAssessmentClinicDental.setFlag("Evidence of Erosion");
									opdPreAssessmentClinicDental.setHospital(masHospital);
									opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
									opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
												
									if(null != box.getString("dentalhiddenValueThree") && !box.getString("dentalhiddenValueThree").equals(""))
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueThree"));
									else
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueThree"));
								
									
									
									// for reading the checkBox value
									if(null != box.getString("dataAnotherThree18") && !box.getString("dataAnotherThree18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									// for dropdown value
									String[] teeth_18_valueList=null;
									StringBuilder  tempTeeth_18_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_18_valueAnotherThree") && !request.getParameterValues("teeth_18_valueAnotherThree").equals("")){
										teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherThree");
										for(String teeth18Value:teeth_18_valueList){
											tempTeeth_18_value.append(teeth18Value);
											tempTeeth_18_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree17") && !box.getString("dataAnotherThree17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									String[] teeth_17_valueList=null;
									StringBuilder  tempTeeth_17_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_17_valueAnotherThree") && !request.getParameterValues("teeth_17_valueAnotherThree").equals("")){
										teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherThree");
										for(String teeth17Value:teeth_17_valueList){
											tempTeeth_17_value.append(teeth17Value);
											tempTeeth_17_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree16") && !box.getString("dataAnotherThree16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									String[] teeth_16_valueList=null;
									StringBuilder  tempTeeth_16_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_16_valueAnotherThree") && !request.getParameterValues("teeth_16_valueAnotherThree").equals("")){
										teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherThree");
										for(String teeth16Value:teeth_16_valueList){
											tempTeeth_16_value.append(teeth16Value);
											tempTeeth_16_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree15") && !box.getString("dataAnotherThree15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									String[] teeth_15_valueList=null;
									StringBuilder  tempTeeth_15_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_15_valueAnotherThree") && !request.getParameterValues("teeth_15_valueAnotherThree").equals("")){
										teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherThree");
										for(String teeth15Value : teeth_15_valueList){
											tempTeeth_15_value.append(teeth15Value);
											tempTeeth_15_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree14") && !box.getString("dataAnotherThree14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									String[] teeth_14_valueList=null;
									StringBuilder  tempTeeth_14_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_14_valueAnotherThree") && !request.getParameterValues("teeth_14_valueAnotherThree").equals("")){
										teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherThree");
										for(String teeth14Value:teeth_14_valueList){
											tempTeeth_14_value.append(teeth14Value);
											tempTeeth_14_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree13") && !box.getString("dataAnotherThree13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									String[] teeth_13_valueList=null;
									StringBuilder  tempTeeth_13_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_13_valueAnotherThree") && !request.getParameterValues("teeth_13_valueAnotherThree").equals("")){
										teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherThree");
										for(String teeth13Value:teeth_13_valueList){
											tempTeeth_13_value.append(teeth13Value);
											tempTeeth_13_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree12") && !box.getString("dataAnotherThree12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									String[] teeth_12_valueList=null;
									StringBuilder  tempTeeth_12_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_12_valueAnotherThree") && !request.getParameterValues("teeth_12_valueAnotherThree").equals("")){
										teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherThree");
										for(String teeth12Value:teeth_12_valueList){
											tempTeeth_12_value.append(teeth12Value);
											tempTeeth_12_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree11") && !box.getString("dataAnotherThree11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									String[] teeth_11_valueList=null;
									StringBuilder  tempTeeth_11_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_11_valueAnotherThree") && !request.getParameterValues("teeth_11_valueAnotherThree").equals("")){
										teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherThree");
										for(String teeth11Value:teeth_11_valueList){
											tempTeeth_11_value.append(teeth11Value);
											tempTeeth_11_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree21") && !box.getString("dataAnotherThree21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									String[] teeth_21_valueList=null;
									StringBuilder  tempTeeth_21_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_21_valueAnotherThree") && !request.getParameterValues("teeth_21_valueAnotherThree").equals("")){
										teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherThree");
										for(String teeth21Value:teeth_21_valueList){
											tempTeeth_21_value.append(teeth21Value);
											tempTeeth_21_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherThree22") && !box.getString("dataAnotherThree22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									String[] teeth_22_valueList=null;
									StringBuilder  tempTeeth_22_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_22_valueAnotherThree") && !request.getParameterValues("teeth_22_valueAnotherThree").equals("")){
										teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherThree");
										for(String teeth22Value:teeth_22_valueList){
											tempTeeth_22_value.append(teeth22Value);
											tempTeeth_22_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree23") && !box.getString("dataAnotherThree23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									String[] teeth_23_valueList=null;
									StringBuilder  tempTeeth_23_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_23_valueAnotherThree") && !request.getParameterValues("teeth_23_valueAnotherThree").equals("")){
										teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherThree");
										for(String teeth23Value:teeth_23_valueList){
											tempTeeth_23_value.append(teeth23Value);
											tempTeeth_23_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherThree24") && !box.getString("dataAnotherThree24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									String[] teeth_24_valueList=null;
									StringBuilder  tempTeeth_24_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_24_valueAnotherThree") && !request.getParameterValues("teeth_24_valueAnotherThree").equals("")){
										teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherThree");
										for(String teeth24Value:teeth_24_valueList){
											tempTeeth_24_value.append(teeth24Value);
											tempTeeth_24_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree25") && !box.getString("dataAnotherThree25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									String[] teeth_25_valueList=null;
									StringBuilder  tempTeeth_25_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_25_valueAnotherThree") && !request.getParameterValues("teeth_25_valueAnotherThree").equals("")){
										teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherThree");
										for(String teeth25Value:teeth_25_valueList){
											tempTeeth_25_value.append(teeth25Value);
											tempTeeth_25_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree26") && !box.getString("dataAnotherThree26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									String[] teeth_26_valueList=null;
									StringBuilder  tempTeeth_26_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_26_valueAnotherThree") && !request.getParameterValues("teeth_26_valueAnotherThree").equals("")){
										teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherThree");
										for(String teeth26Value:teeth_26_valueList){
											tempTeeth_26_value.append(teeth26Value);
											tempTeeth_26_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree27") && !box.getString("dataAnotherThree27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									String[] teeth_27_valueList=null;
									StringBuilder  tempTeeth_27_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_27_valueAnotherThree") && !request.getParameterValues("teeth_27_valueAnotherThree").equals("")){
										teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherThree");
										for(String teeth27Value:teeth_27_valueList){
											tempTeeth_27_value.append(teeth27Value);
											tempTeeth_27_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree28") && !box.getString("dataAnotherThree28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
									String[] teeth_28_valueList=null;
									StringBuilder  tempTeeth_28_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_28_valueAnotherThree") && !request.getParameterValues("teeth_28_valueAnotherThree").equals("")){
										teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherThree");
										for(String teeth28Value:teeth_28_valueList){
											tempTeeth_28_value.append(teeth28Value);
											tempTeeth_28_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree48") && !box.getString("dataAnotherThree48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
									// for dropdown value
									String[] teeth_48_valueList=null;
									StringBuilder  tempTeeth_48_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_48_valueAnotherThree") && !request.getParameterValues("teeth_48_valueAnotherThree").equals("")){
										teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherThree");
										for(String teeth48Value:teeth_48_valueList){
											tempTeeth_48_value.append(teeth48Value);
											tempTeeth_48_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree47") && !box.getString("dataAnotherThree47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									String[] teeth_47_valueList=null;
									StringBuilder  tempTeeth_47_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_47_valueAnotherThree") && !request.getParameterValues("teeth_47_valueAnotherThree").equals("")){
										teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherThree");
										for(String teeth47Value:teeth_47_valueList){
											tempTeeth_47_value.append(teeth47Value);
											tempTeeth_47_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree46") && !box.getString("dataAnotherThree46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									String[] teeth_46_valueList=null;
									StringBuilder  tempTeeth_46_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_46_valueAnotherThree") && !request.getParameterValues("teeth_46_valueAnotherThree").equals("")){
										teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherThree");
										for(String teeth46Value:teeth_46_valueList){
											tempTeeth_46_value.append(teeth46Value);
											tempTeeth_46_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree45") && !box.getString("dataAnotherThree45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

									String[] teeth_45_valueList=null;
									StringBuilder  tempTeeth_45_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_45_valueAnotherThree") && !request.getParameterValues("teeth_45_valueAnotherThree").equals("")){
										teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherThree");
										for(String teeth45Value : teeth_45_valueList){
											tempTeeth_45_value.append(teeth45Value);
											tempTeeth_45_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree44") && !box.getString("dataAnotherThree44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									String[] teeth_44_valueList=null;
									StringBuilder  tempTeeth_44_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_44_valueAnotherThree") && !request.getParameterValues("teeth_44_valueAnotherThree").equals("")){
										teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherThree");
										for(String teeth44Value:teeth_44_valueList){
											tempTeeth_44_value.append(teeth44Value);
											tempTeeth_44_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree43") && !box.getString("dataAnotherThree43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									String[] teeth_43_valueList=null;
									StringBuilder  tempTeeth_43_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_43_valueAnotherThree") && !request.getParameterValues("teeth_43_valueAnotherThree").equals("")){
										teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherThree");
										for(String teeth43Value:teeth_43_valueList){
											tempTeeth_43_value.append(teeth43Value);
											tempTeeth_43_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree42") && !box.getString("dataAnotherThree42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									String[] teeth_42_valueList=null;
									StringBuilder  tempTeeth_42_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_42_valueAnotherThree") && !request.getParameterValues("teeth_42_valueAnotherThree").equals("")){
										teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherThree");
										for(String teeth42Value:teeth_42_valueList){
											tempTeeth_42_value.append(teeth42Value);
											tempTeeth_42_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree41") && !box.getString("dataAnotherThree41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									String[] teeth_41_valueList=null;
									StringBuilder  tempTeeth_41_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_41_valueAnotherThree") && !request.getParameterValues("teeth_41_valueAnotherThree").equals("")){
										teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherThree");
										for(String teeth41Value:teeth_41_valueList){
											tempTeeth_41_value.append(teeth41Value);
											tempTeeth_41_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree31") && !box.getString("dataAnotherThree31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									String[] teeth_31_valueList=null;
									StringBuilder  tempTeeth_31_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_31_valueAnotherThree") && !request.getParameterValues("teeth_31_valueAnotherThree").equals("")){
										teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherThree");
										for(String teeth31Value:teeth_31_valueList){
											tempTeeth_31_value.append(teeth31Value);
											tempTeeth_31_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherThree32") && !box.getString("dataAnotherThree32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									String[] teeth_32_valueList=null;
									StringBuilder  tempTeeth_32_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_32_valueAnotherThree") && !request.getParameterValues("teeth_32_valueAnotherThree").equals("")){
										teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherThree");
										for(String teeth32Value:teeth_32_valueList){
											tempTeeth_32_value.append(teeth32Value);
											tempTeeth_32_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree33") && !box.getString("dataAnotherThree33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									String[] teeth_33_valueList=null;
									StringBuilder  tempTeeth_33_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_33_valueAnotherThree") && !request.getParameterValues("teeth_33_valueAnotherThree").equals("")){
										teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherThree");
										for(String teeth33Value:teeth_33_valueList){
											tempTeeth_33_value.append(teeth33Value);
											tempTeeth_33_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherThree34") && !box.getString("dataAnotherThree34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									String[] teeth_34_valueList=null;
									StringBuilder  tempTeeth_34_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_34_valueAnotherThree") && !request.getParameterValues("teeth_34_valueAnotherThree").equals("")){
										teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherThree");
										for(String teeth34Value:teeth_34_valueList){
											tempTeeth_34_value.append(teeth34Value);
											tempTeeth_34_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree35") && !box.getString("dataAnotherThree35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									String[] teeth_35_valueList=null;
									StringBuilder  tempTeeth_35_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_35_valueAnotherThree") && !request.getParameterValues("teeth_35_valueAnotherThree").equals("")){
										teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherThree");
										for(String teeth35Value:teeth_35_valueList){
											tempTeeth_35_value.append(teeth35Value);
											tempTeeth_35_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree36") && !box.getString("dataAnotherThree36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									String[] teeth_36_valueList=null;
									StringBuilder  tempTeeth_36_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_36_valueAnotherThree") && !request.getParameterValues("teeth_36_valueAnotherThree").equals("")){
										teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherThree");
										for(String teeth36Value:teeth_36_valueList){
											tempTeeth_36_value.append(teeth36Value);
											tempTeeth_36_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree37") && !box.getString("dataAnotherThree37").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									String[] teeth_37_valueList=null;
									StringBuilder  tempTeeth_37_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_37_valueAnotherThree") && !request.getParameterValues("teeth_37_valueAnotherThree").equals("")){
										teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherThree");
										for(String teeth37Value:teeth_37_valueList){
											tempTeeth_37_value.append(teeth37Value);
											tempTeeth_37_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
									}
									
									if(null != box.getString("dataAnotherThree38") && !box.getString("dataAnotherThree38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									String[] teeth_38_valueList=null;
									StringBuilder  tempTeeth_38_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_38_valueAnotherThree") && !request.getParameterValues("teeth_38_valueAnotherThree").equals("")){
										teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherThree");
										for(String teeth38Value:teeth_38_valueList){
											tempTeeth_38_value.append(teeth38Value);
											tempTeeth_38_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
									}
									
								
								
							
							
								hbt.save(opdPreAssessmentClinicDental);
								map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
								}
								
								if((!box.getString("dataAnotherFour18").equals(""))||(!box.getString("dataAnotherFour17").equals(""))||(!box.getString("dataAnotherFour16").equals(""))||(!box.getString("dataAnotherFour15").equals(""))||
										(!box.getString("dataAnotherFour14").equals(""))||(!box.getString("dataAnotherFour47").equals(""))||(!box.getString("dataAnotherFour31").equals(""))||(!box.getString("dataAnotherFour38").equals(""))||
										(!box.getString("dataAnotherFour21").equals(""))||(!box.getString("dataAnotherFour46").equals(""))||(!box.getString("dataAnotherFour32").equals(""))||
										(!box.getString("dataAnotherFour22").equals(""))||(!box.getString("dataAnotherFour45").equals(""))||(!box.getString("dataAnotherFour33").equals(""))||
										(!box.getString("dataAnotherFour23").equals(""))||(!box.getString("dataAnotherFour44").equals(""))||(!box.getString("dataAnotherFour34").equals(""))||
										(!box.getString("dataAnotherFour24").equals(""))||(!box.getString("dataAnotherFour43").equals(""))||(!box.getString("dataAnotherFour35").equals(""))||
										(!box.getString("dataAnotherFour25").equals(""))||(!box.getString("dataAnotherFour42").equals(""))||(!box.getString("dataAnotherFour36").equals(""))||
										(!box.getString("dataAnotherFour48").equals(""))||(!box.getString("dataAnotherFour41").equals(""))||(!box.getString("dataAnotherFour37").equals("")))
								{
									
									OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
									
									opdPreAssessmentClinicDental.setHin(patient);
									
									
									opdPreAssessmentClinicDental.setVisit(visit);
									
									
									opdPreAssessmentClinicDental.setDepartment(masDepartment);
									
									opdPreAssessmentClinicDental.setFlag("Areas of Abrasion");
									opdPreAssessmentClinicDental.setHospital(masHospital);
									opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
									opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
									
									
									if(null != box.getString("dentalhiddenValueFour") && !box.getString("dentalhiddenValueFour").equals(""))
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFour"));
									else
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFour"));
								
									
									// for reading the checkBox value
									if(null != box.getString("dataAnotherFour18") && !box.getString("dataAnotherFour18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									// for dropdown value
									String[] teeth_18_valueList=null;
									StringBuilder  tempTeeth_18_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_18_valueAnotherFour") && !request.getParameterValues("teeth_18_valueAnotherFour").equals("")){
										teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherFour");
										for(String teeth18Value:teeth_18_valueList){
											tempTeeth_18_value.append(teeth18Value);
											tempTeeth_18_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour17") && !box.getString("dataAnotherFour17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									String[] teeth_17_valueList=null;
									StringBuilder  tempTeeth_17_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_17_valueAnotherFour") && !request.getParameterValues("teeth_17_valueAnotherFour").equals("")){
										teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherFour");
										for(String teeth17Value:teeth_17_valueList){
											tempTeeth_17_value.append(teeth17Value);
											tempTeeth_17_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour16") && !box.getString("dataAnotherFour16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									String[] teeth_16_valueList=null;
									StringBuilder  tempTeeth_16_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_16_valueAnotherFour") && !request.getParameterValues("teeth_16_valueAnotherFour").equals("")){
										teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherFour");
										for(String teeth16Value:teeth_16_valueList){
											tempTeeth_16_value.append(teeth16Value);
											tempTeeth_16_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour15") && !box.getString("dataAnotherFour15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									String[] teeth_15_valueList=null;
									StringBuilder  tempTeeth_15_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_15_valueAnotherFour") && !request.getParameterValues("teeth_15_valueAnotherFour").equals("")){
										teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherFour");
										for(String teeth15Value : teeth_15_valueList){
											tempTeeth_15_value.append(teeth15Value);
											tempTeeth_15_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour14") && !box.getString("dataAnotherFour14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									String[] teeth_14_valueList=null;
									StringBuilder  tempTeeth_14_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_14_valueAnotherFour") && !request.getParameterValues("teeth_14_valueAnotherFour").equals("")){
										teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherFour");
										for(String teeth14Value:teeth_14_valueList){
											tempTeeth_14_value.append(teeth14Value);
											tempTeeth_14_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour13") && !box.getString("dataAnotherFour13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									String[] teeth_13_valueList=null;
									StringBuilder  tempTeeth_13_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_13_valueAnotherFour") && !request.getParameterValues("teeth_13_valueAnotherFour").equals("")){
										teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherFour");
										for(String teeth13Value:teeth_13_valueList){
											tempTeeth_13_value.append(teeth13Value);
											tempTeeth_13_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour12") && !box.getString("dataAnotherFour12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									String[] teeth_12_valueList=null;
									StringBuilder  tempTeeth_12_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_12_valueAnotherFour") && !request.getParameterValues("teeth_12_valueAnotherFour").equals("")){
										teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherFour");
										for(String teeth12Value:teeth_12_valueList){
											tempTeeth_12_value.append(teeth12Value);
											tempTeeth_12_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour11") && !box.getString("dataAnotherFour11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									String[] teeth_11_valueList=null;
									StringBuilder  tempTeeth_11_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_11_valueAnotherFour") && !request.getParameterValues("teeth_11_valueAnotherFour").equals("")){
										teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherFour");
										for(String teeth11Value:teeth_11_valueList){
											tempTeeth_11_value.append(teeth11Value);
											tempTeeth_11_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour21") && !box.getString("dataAnotherFour21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									String[] teeth_21_valueList=null;
									StringBuilder  tempTeeth_21_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_21_valueAnotherFour") && !request.getParameterValues("teeth_21_valueAnotherFour").equals("")){
										teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherFour");
										for(String teeth21Value:teeth_21_valueList){
											tempTeeth_21_value.append(teeth21Value);
											tempTeeth_21_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFour22") && !box.getString("dataAnotherFour22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									String[] teeth_22_valueList=null;
									StringBuilder  tempTeeth_22_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_22_valueAnotherFour") && !request.getParameterValues("teeth_22_valueAnotherFour").equals("")){
										teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherFour");
										for(String teeth22Value:teeth_22_valueList){
											tempTeeth_22_value.append(teeth22Value);
											tempTeeth_22_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour23") && !box.getString("dataAnotherFour23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									String[] teeth_23_valueList=null;
									StringBuilder  tempTeeth_23_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_23_valueAnotherFour") && !request.getParameterValues("teeth_23_valueAnotherFour").equals("")){
										teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherFour");
										for(String teeth23Value:teeth_23_valueList){
											tempTeeth_23_value.append(teeth23Value);
											tempTeeth_23_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFour24") && !box.getString("dataAnotherFour24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									String[] teeth_24_valueList=null;
									StringBuilder  tempTeeth_24_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_24_valueAnotherFour") && !request.getParameterValues("teeth_24_valueAnotherFour").equals("")){
										teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherFour");
										for(String teeth24Value:teeth_24_valueList){
											tempTeeth_24_value.append(teeth24Value);
											tempTeeth_24_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour25") && !box.getString("dataAnotherFour25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									String[] teeth_25_valueList=null;
									StringBuilder  tempTeeth_25_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_25_valueAnotherFour") && !request.getParameterValues("teeth_25_valueAnotherFour").equals("")){
										teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherFour");
										for(String teeth25Value:teeth_25_valueList){
											tempTeeth_25_value.append(teeth25Value);
											tempTeeth_25_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour26") && !box.getString("dataAnotherFour26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									String[] teeth_26_valueList=null;
									StringBuilder  tempTeeth_26_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_26_valueAnotherFour") && !request.getParameterValues("teeth_26_valueAnotherFour").equals("")){
										teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherFour");
										for(String teeth26Value:teeth_26_valueList){
											tempTeeth_26_value.append(teeth26Value);
											tempTeeth_26_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour27") && !box.getString("dataAnotherFour27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									String[] teeth_27_valueList=null;
									StringBuilder  tempTeeth_27_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_27_valueAnotherFour") && !request.getParameterValues("teeth_27_valueAnotherFour").equals("")){
										teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherFour");
										for(String teeth27Value:teeth_27_valueList){
											tempTeeth_27_value.append(teeth27Value);
											tempTeeth_27_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour28") && !box.getString("dataAnotherFour28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
									String[] teeth_28_valueList=null;
									StringBuilder  tempTeeth_28_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_28_valueAnotherFour") && !request.getParameterValues("teeth_28_valueAnotherFour").equals("")){
										teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherFour");
										for(String teeth28Value:teeth_28_valueList){
											tempTeeth_28_value.append(teeth28Value);
											tempTeeth_28_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour48") && !box.getString("dataAnotherFour48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
									// for dropdown value
									String[] teeth_48_valueList=null;
									StringBuilder  tempTeeth_48_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_48_valueAnotherFour") && !request.getParameterValues("teeth_48_valueAnotherFour").equals("")){
										teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherFour");
										for(String teeth48Value:teeth_48_valueList){
											tempTeeth_48_value.append(teeth48Value);
											tempTeeth_48_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour47") && !box.getString("dataAnotherFour47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									String[] teeth_47_valueList=null;
									StringBuilder  tempTeeth_47_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_47_valueAnotherFour") && !request.getParameterValues("teeth_47_valueAnotherFour").equals("")){
										teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherFour");
										for(String teeth47Value:teeth_47_valueList){
											tempTeeth_47_value.append(teeth47Value);
											tempTeeth_47_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour46") && !box.getString("dataAnotherFour46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									String[] teeth_46_valueList=null;
									StringBuilder  tempTeeth_46_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_46_valueAnotherFour") && !request.getParameterValues("teeth_46_valueAnotherFour").equals("")){
										teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherFour");
										for(String teeth46Value:teeth_46_valueList){
											tempTeeth_46_value.append(teeth46Value);
											tempTeeth_46_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour45") && !box.getString("dataAnotherFour45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

									String[] teeth_45_valueList=null;
									StringBuilder  tempTeeth_45_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_45_valueAnotherFour") && !request.getParameterValues("teeth_45_valueAnotherFour").equals("")){
										teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherFour");
										for(String teeth45Value : teeth_45_valueList){
											tempTeeth_45_value.append(teeth45Value);
											tempTeeth_45_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour44") && !box.getString("dataAnotherFour44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									String[] teeth_44_valueList=null;
									StringBuilder  tempTeeth_44_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_44_valueAnotherFour") && !request.getParameterValues("teeth_44_valueAnotherFour").equals("")){
										teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherFour");
										for(String teeth44Value:teeth_44_valueList){
											tempTeeth_44_value.append(teeth44Value);
											tempTeeth_44_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour43") && !box.getString("dataAnotherFour43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									String[] teeth_43_valueList=null;
									StringBuilder  tempTeeth_43_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_43_valueAnotherFour") && !request.getParameterValues("teeth_43_valueAnotherFour").equals("")){
										teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherFour");
										for(String teeth43Value:teeth_43_valueList){
											tempTeeth_43_value.append(teeth43Value);
											tempTeeth_43_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour42") && !box.getString("dataAnotherFour42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									String[] teeth_42_valueList=null;
									StringBuilder  tempTeeth_42_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_42_valueAnotherFour") && !request.getParameterValues("teeth_42_valueAnotherFour").equals("")){
										teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherFour");
										for(String teeth42Value:teeth_42_valueList){
											tempTeeth_42_value.append(teeth42Value);
											tempTeeth_42_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour41") && !box.getString("dataAnotherFour41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									String[] teeth_41_valueList=null;
									StringBuilder  tempTeeth_41_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_41_valueAnotherFour") && !request.getParameterValues("teeth_41_valueAnotherFour").equals("")){
										teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherFour");
										for(String teeth41Value:teeth_41_valueList){
											tempTeeth_41_value.append(teeth41Value);
											tempTeeth_41_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour31") && !box.getString("dataAnotherFour31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									String[] teeth_31_valueList=null;
									StringBuilder  tempTeeth_31_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_31_valueAnotherFour") && !request.getParameterValues("teeth_31_valueAnotherFour").equals("")){
										teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherFour");
										for(String teeth31Value:teeth_31_valueList){
											tempTeeth_31_value.append(teeth31Value);
											tempTeeth_31_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFour32") && !box.getString("dataAnotherFour32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									String[] teeth_32_valueList=null;
									StringBuilder  tempTeeth_32_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_32_valueAnotherFour") && !request.getParameterValues("teeth_32_valueAnotherFour").equals("")){
										teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherFour");
										for(String teeth32Value:teeth_32_valueList){
											tempTeeth_32_value.append(teeth32Value);
											tempTeeth_32_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour33") && !box.getString("dataAnotherFour33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									String[] teeth_33_valueList=null;
									StringBuilder  tempTeeth_33_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_33_valueAnotherFour") && !request.getParameterValues("teeth_33_valueAnotherFour").equals("")){
										teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherFour");
										for(String teeth33Value:teeth_33_valueList){
											tempTeeth_33_value.append(teeth33Value);
											tempTeeth_33_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFour34") && !box.getString("dataAnotherFour34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									String[] teeth_34_valueList=null;
									StringBuilder  tempTeeth_34_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_34_valueAnotherFour") && !request.getParameterValues("teeth_34_valueAnotherFour").equals("")){
										teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherFour");
										for(String teeth34Value:teeth_34_valueList){
											tempTeeth_34_value.append(teeth34Value);
											tempTeeth_34_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour35") && !box.getString("dataAnotherFour35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									String[] teeth_35_valueList=null;
									StringBuilder  tempTeeth_35_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_35_valueAnotherFour") && !request.getParameterValues("teeth_35_valueAnotherFour").equals("")){
										teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherFour");
										for(String teeth35Value:teeth_35_valueList){
											tempTeeth_35_value.append(teeth35Value);
											tempTeeth_35_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour36") && !box.getString("dataAnotherFour36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									String[] teeth_36_valueList=null;
									StringBuilder  tempTeeth_36_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_36_valueAnotherFour") && !request.getParameterValues("teeth_36_valueAnotherFour").equals("")){
										teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherFour");
										for(String teeth36Value:teeth_36_valueList){
											tempTeeth_36_value.append(teeth36Value);
											tempTeeth_36_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour37") && !box.getString("dataAnotherFour37").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									String[] teeth_37_valueList=null;
									StringBuilder  tempTeeth_37_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_37_valueAnotherFour") && !request.getParameterValues("teeth_37_valueAnotherFour").equals("")){
										teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherFour");
										for(String teeth37Value:teeth_37_valueList){
											tempTeeth_37_value.append(teeth37Value);
											tempTeeth_37_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
									}
									
									if(null != box.getString("dataAnotherFour38") && !box.getString("dataAnotherFour38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									String[] teeth_38_valueList=null;
									StringBuilder  tempTeeth_38_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_38_valueAnotherFour") && !request.getParameterValues("teeth_38_valueAnotherFour").equals("")){
										teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherFour");
										for(String teeth38Value:teeth_38_valueList){
											tempTeeth_38_value.append(teeth38Value);
											tempTeeth_38_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
									}
									
								
							
								
							
							
								hbt.save(opdPreAssessmentClinicDental);
							
								}
								
								if((!box.getString("dataAnotherFive18").equals(""))||(!box.getString("dataAnotherFive17").equals(""))||(!box.getString("dataAnotherFive16").equals(""))||(!box.getString("dataAnotherFive15").equals(""))||
										(!box.getString("dataAnotherFive14").equals(""))||(!box.getString("dataAnotherFive47").equals(""))||(!box.getString("dataAnotherFive31").equals(""))||(!box.getString("dataAnotherFive38").equals(""))||
										(!box.getString("dataAnotherFive21").equals(""))||(!box.getString("dataAnotherFive46").equals(""))||(!box.getString("dataAnotherFive32").equals(""))||
										(!box.getString("dataAnotherFive22").equals(""))||(!box.getString("dataAnotherFive45").equals(""))||(!box.getString("dataAnotherFive33").equals(""))||
										(!box.getString("dataAnotherFive23").equals(""))||(!box.getString("dataAnotherFive44").equals(""))||(!box.getString("dataAnotherFive34").equals(""))||
										(!box.getString("dataAnotherFive24").equals(""))||(!box.getString("dataAnotherFive43").equals(""))||(!box.getString("dataAnotherFive35").equals(""))||
										(!box.getString("dataAnotherFive25").equals(""))||(!box.getString("dataAnotherFive42").equals(""))||(!box.getString("dataAnotherFive36").equals(""))||
										(!box.getString("dataAnotherFive48").equals(""))||(!box.getString("dataAnotherFive41").equals(""))||(!box.getString("dataAnotherFive37").equals("")))
								{
									
									OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
									
									opdPreAssessmentClinicDental.setHin(patient);
									
									
									opdPreAssessmentClinicDental.setVisit(visit);
									
									
									opdPreAssessmentClinicDental.setDepartment(masDepartment);
									
									opdPreAssessmentClinicDental.setFlag("Areas of Occlusal Wear");
									opdPreAssessmentClinicDental.setHospital(masHospital);
									opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
									opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
										
									
									if(null != box.getString("dentalhiddenValueFive") && !box.getString("dentalhiddenValueFive").equals(""))
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFive"));
									else
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFive"));
								
								
									// for reading the checkBox value
									if(null != box.getString("dataAnotherFive18") && !box.getString("dataAnotherFive18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									// for dropdown value
									String[] teeth_18_valueList=null;
									StringBuilder  tempTeeth_18_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_18_valueAnotherFive") && !request.getParameterValues("teeth_18_valueAnotherFive").equals("")){
										teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherFive");
										for(String teeth18Value:teeth_18_valueList){
											tempTeeth_18_value.append(teeth18Value);
											tempTeeth_18_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive17") && !box.getString("dataAnotherFive17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									String[] teeth_17_valueList=null;
									StringBuilder  tempTeeth_17_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_17_valueAnotherFive") && !request.getParameterValues("teeth_17_valueAnotherFive").equals("")){
										teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherFive");
										for(String teeth17Value:teeth_17_valueList){
											tempTeeth_17_value.append(teeth17Value);
											tempTeeth_17_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive16") && !box.getString("dataAnotherFive16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									String[] teeth_16_valueList=null;
									StringBuilder  tempTeeth_16_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_16_valueAnotherFive") && !request.getParameterValues("teeth_16_valueAnotherFive").equals("")){
										teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherFive");
										for(String teeth16Value:teeth_16_valueList){
											tempTeeth_16_value.append(teeth16Value);
											tempTeeth_16_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive15") && !box.getString("dataAnotherFive15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									String[] teeth_15_valueList=null;
									StringBuilder  tempTeeth_15_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_15_valueAnotherFive") && !request.getParameterValues("teeth_15_valueAnotherFive").equals("")){
										teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherFive");
										for(String teeth15Value : teeth_15_valueList){
											tempTeeth_15_value.append(teeth15Value);
											tempTeeth_15_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive14") && !box.getString("dataAnotherFive14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									String[] teeth_14_valueList=null;
									StringBuilder  tempTeeth_14_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_14_valueAnotherFive") && !request.getParameterValues("teeth_14_valueAnotherFive").equals("")){
										teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherFive");
										for(String teeth14Value:teeth_14_valueList){
											tempTeeth_14_value.append(teeth14Value);
											tempTeeth_14_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive13") && !box.getString("dataAnotherFive13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									String[] teeth_13_valueList=null;
									StringBuilder  tempTeeth_13_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_13_valueAnotherFive") && !request.getParameterValues("teeth_13_valueAnotherFive").equals("")){
										teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherFive");
										for(String teeth13Value:teeth_13_valueList){
											tempTeeth_13_value.append(teeth13Value);
											tempTeeth_13_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive12") && !box.getString("dataAnotherFive12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									String[] teeth_12_valueList=null;
									StringBuilder  tempTeeth_12_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_12_valueAnotherFive") && !request.getParameterValues("teeth_12_valueAnotherFive").equals("")){
										teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherFive");
										for(String teeth12Value:teeth_12_valueList){
											tempTeeth_12_value.append(teeth12Value);
											tempTeeth_12_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive11") && !box.getString("dataAnotherFive11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									String[] teeth_11_valueList=null;
									StringBuilder  tempTeeth_11_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_11_valueAnotherFive") && !request.getParameterValues("teeth_11_valueAnotherFive").equals("")){
										teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherFive");
										for(String teeth11Value:teeth_11_valueList){
											tempTeeth_11_value.append(teeth11Value);
											tempTeeth_11_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive21") && !box.getString("dataAnotherFive21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									String[] teeth_21_valueList=null;
									StringBuilder  tempTeeth_21_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_21_valueAnotherFive") && !request.getParameterValues("teeth_21_valueAnotherFive").equals("")){
										teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherFive");
										for(String teeth21Value:teeth_21_valueList){
											tempTeeth_21_value.append(teeth21Value);
											tempTeeth_21_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFive22") && !box.getString("dataAnotherFive22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									String[] teeth_22_valueList=null;
									StringBuilder  tempTeeth_22_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_22_valueAnotherFive") && !request.getParameterValues("teeth_22_valueAnotherFive").equals("")){
										teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherFive");
										for(String teeth22Value:teeth_22_valueList){
											tempTeeth_22_value.append(teeth22Value);
											tempTeeth_22_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive23") && !box.getString("dataAnotherFive23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									String[] teeth_23_valueList=null;
									StringBuilder  tempTeeth_23_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_23_valueAnotherFive") && !request.getParameterValues("teeth_23_valueAnotherFive").equals("")){
										teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherFive");
										for(String teeth23Value:teeth_23_valueList){
											tempTeeth_23_value.append(teeth23Value);
											tempTeeth_23_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFive24") && !box.getString("dataAnotherFive24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									String[] teeth_24_valueList=null;
									StringBuilder  tempTeeth_24_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_24_valueAnotherFive") && !request.getParameterValues("teeth_24_valueAnotherFive").equals("")){
										teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherFive");
										for(String teeth24Value:teeth_24_valueList){
											tempTeeth_24_value.append(teeth24Value);
											tempTeeth_24_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive25") && !box.getString("dataAnotherFive25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									String[] teeth_25_valueList=null;
									StringBuilder  tempTeeth_25_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_25_valueAnotherFive") && !request.getParameterValues("teeth_25_valueAnotherFive").equals("")){
										teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherFive");
										for(String teeth25Value:teeth_25_valueList){
											tempTeeth_25_value.append(teeth25Value);
											tempTeeth_25_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive26") && !box.getString("dataAnotherFive26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									String[] teeth_26_valueList=null;
									StringBuilder  tempTeeth_26_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_26_valueAnotherFive") && !request.getParameterValues("teeth_26_valueAnotherFive").equals("")){
										teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherFive");
										for(String teeth26Value:teeth_26_valueList){
											tempTeeth_26_value.append(teeth26Value);
											tempTeeth_26_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive27") && !box.getString("dataAnotherFive27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									String[] teeth_27_valueList=null;
									StringBuilder  tempTeeth_27_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_27_valueAnotherFive") && !request.getParameterValues("teeth_27_valueAnotherFive").equals("")){
										teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherFive");
										for(String teeth27Value:teeth_27_valueList){
											tempTeeth_27_value.append(teeth27Value);
											tempTeeth_27_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive28") && !box.getString("dataAnotherFive28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
									String[] teeth_28_valueList=null;
									StringBuilder  tempTeeth_28_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_28_valueAnotherFive") && !request.getParameterValues("teeth_28_valueAnotherFive").equals("")){
										teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherFive");
										for(String teeth28Value:teeth_28_valueList){
											tempTeeth_28_value.append(teeth28Value);
											tempTeeth_28_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive48") && !box.getString("dataAnotherFive48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
									// for dropdown value
									String[] teeth_48_valueList=null;
									StringBuilder  tempTeeth_48_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_48_valueAnotherFive") && !request.getParameterValues("teeth_48_valueAnotherFive").equals("")){
										teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherFive");
										for(String teeth48Value:teeth_48_valueList){
											tempTeeth_48_value.append(teeth48Value);
											tempTeeth_48_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive47") && !box.getString("dataAnotherFive47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									String[] teeth_47_valueList=null;
									StringBuilder  tempTeeth_47_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_47_valueAnotherFive") && !request.getParameterValues("teeth_47_valueAnotherFive").equals("")){
										teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherFive");
										for(String teeth47Value:teeth_47_valueList){
											tempTeeth_47_value.append(teeth47Value);
											tempTeeth_47_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive46") && !box.getString("dataAnotherFive46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									String[] teeth_46_valueList=null;
									StringBuilder  tempTeeth_46_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_46_valueAnotherFive") && !request.getParameterValues("teeth_46_valueAnotherFive").equals("")){
										teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherFive");
										for(String teeth46Value:teeth_46_valueList){
											tempTeeth_46_value.append(teeth46Value);
											tempTeeth_46_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive45") && !box.getString("dataAnotherFive45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

									String[] teeth_45_valueList=null;
									StringBuilder  tempTeeth_45_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_45_valueAnotherFive") && !request.getParameterValues("teeth_45_valueAnotherFive").equals("")){
										teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherFive");
										for(String teeth45Value : teeth_45_valueList){
											tempTeeth_45_value.append(teeth45Value);
											tempTeeth_45_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive44") && !box.getString("dataAnotherFive44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									String[] teeth_44_valueList=null;
									StringBuilder  tempTeeth_44_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_44_valueAnotherFive") && !request.getParameterValues("teeth_44_valueAnotherFive").equals("")){
										teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherFive");
										for(String teeth44Value:teeth_44_valueList){
											tempTeeth_44_value.append(teeth44Value);
											tempTeeth_44_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive43") && !box.getString("dataAnotherFive43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									String[] teeth_43_valueList=null;
									StringBuilder  tempTeeth_43_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_43_valueAnotherFive") && !request.getParameterValues("teeth_43_valueAnotherFive").equals("")){
										teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherFive");
										for(String teeth43Value:teeth_43_valueList){
											tempTeeth_43_value.append(teeth43Value);
											tempTeeth_43_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive42") && !box.getString("dataAnotherFive42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									String[] teeth_42_valueList=null;
									StringBuilder  tempTeeth_42_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_42_valueAnotherFive") && !request.getParameterValues("teeth_42_valueAnotherFive").equals("")){
										teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherFive");
										for(String teeth42Value:teeth_42_valueList){
											tempTeeth_42_value.append(teeth42Value);
											tempTeeth_42_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive41") && !box.getString("dataAnotherFive41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									String[] teeth_41_valueList=null;
									StringBuilder  tempTeeth_41_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_41_valueAnotherFive") && !request.getParameterValues("teeth_41_valueAnotherFive").equals("")){
										teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherFive");
										for(String teeth41Value:teeth_41_valueList){
											tempTeeth_41_value.append(teeth41Value);
											tempTeeth_41_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive31") && !box.getString("dataAnotherFive31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									String[] teeth_31_valueList=null;
									StringBuilder  tempTeeth_31_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_31_valueAnotherFive") && !request.getParameterValues("teeth_31_valueAnotherFive").equals("")){
										teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherFive");
										for(String teeth31Value:teeth_31_valueList){
											tempTeeth_31_value.append(teeth31Value);
											tempTeeth_31_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFive32") && !box.getString("dataAnotherFive32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									String[] teeth_32_valueList=null;
									StringBuilder  tempTeeth_32_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_32_valueAnotherFive") && !request.getParameterValues("teeth_32_valueAnotherFive").equals("")){
										teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherFive");
										for(String teeth32Value:teeth_32_valueList){
											tempTeeth_32_value.append(teeth32Value);
											tempTeeth_32_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive33") && !box.getString("dataAnotherFive33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									String[] teeth_33_valueList=null;
									StringBuilder  tempTeeth_33_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_33_valueAnotherFive") && !request.getParameterValues("teeth_33_valueAnotherFive").equals("")){
										teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherFive");
										for(String teeth33Value:teeth_33_valueList){
											tempTeeth_33_value.append(teeth33Value);
											tempTeeth_33_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
									}
									
									
									if(null != box.getString("dataAnotherFive34") && !box.getString("dataAnotherFive34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									String[] teeth_34_valueList=null;
									StringBuilder  tempTeeth_34_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_34_valueAnotherFive") && !request.getParameterValues("teeth_34_valueAnotherFive").equals("")){
										teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherFive");
										for(String teeth34Value:teeth_34_valueList){
											tempTeeth_34_value.append(teeth34Value);
											tempTeeth_34_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive35") && !box.getString("dataAnotherFive35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									String[] teeth_35_valueList=null;
									StringBuilder  tempTeeth_35_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_35_valueAnotherFive") && !request.getParameterValues("teeth_35_valueAnotherFive").equals("")){
										teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherFive");
										for(String teeth35Value:teeth_35_valueList){
											tempTeeth_35_value.append(teeth35Value);
											tempTeeth_35_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive36") && !box.getString("dataAnotherFive36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									String[] teeth_36_valueList=null;
									StringBuilder  tempTeeth_36_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_36_valueAnotherFive") && !request.getParameterValues("teeth_36_valueAnotherFive").equals("")){
										teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherFive");
										for(String teeth36Value:teeth_36_valueList){
											tempTeeth_36_value.append(teeth36Value);
											tempTeeth_36_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive37") && !box.getString("dataAnotherFive37").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									String[] teeth_37_valueList=null;
									StringBuilder  tempTeeth_37_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_37_valueAnotherFive") && !request.getParameterValues("teeth_37_valueAnotherFive").equals("")){
										teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherFive");
										for(String teeth37Value:teeth_37_valueList){
											tempTeeth_37_value.append(teeth37Value);
											tempTeeth_37_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
									}
									
									if(null != box.getString("dataAnotherFive38") && !box.getString("dataAnotherFive38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									String[] teeth_38_valueList=null;
									StringBuilder  tempTeeth_38_value=new StringBuilder();
									if(null != request.getParameterValues("teeth_38_valueAnotherFive") && !request.getParameterValues("teeth_38_valueAnotherFive").equals("")){
										teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherFive");
										for(String teeth38Value:teeth_38_valueList){
											tempTeeth_38_value.append(teeth38Value);
											tempTeeth_38_value.append(",");
										}
										opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
									}
									
									
									
							
							
								hbt.save(opdPreAssessmentClinicDental);
								
								}
								
								
								if((!box.getString("dataAnotherSix18").equals(""))||(!box.getString("dataAnotherSix17").equals(""))||(!box.getString("dataAnotherSix16").equals(""))||(!box.getString("dataAnotherSix15").equals(""))||
										(!box.getString("dataAnotherSix14").equals(""))||(!box.getString("dataAnotherSix47").equals(""))||(!box.getString("dataAnotherSix31").equals(""))||(!box.getString("dataAnotherSix38").equals(""))||
										(!box.getString("dataAnotherSix21").equals(""))||(!box.getString("dataAnotherSix46").equals(""))||(!box.getString("dataAnotherSix32").equals(""))||
										(!box.getString("dataAnotherSix22").equals(""))||(!box.getString("dataAnotherSix45").equals(""))||(!box.getString("dataAnotherSix33").equals(""))||
										(!box.getString("dataAnotherSix23").equals(""))||(!box.getString("dataAnotherSix44").equals(""))||(!box.getString("dataAnotherSix34").equals(""))||
										(!box.getString("dataAnotherSix24").equals(""))||(!box.getString("dataAnotherSix43").equals(""))||(!box.getString("dataAnotherSix35").equals(""))||
										(!box.getString("dataAnotherSix25").equals(""))||(!box.getString("dataAnotherSix42").equals(""))||(!box.getString("dataAnotherSix36").equals(""))||
										(!box.getString("dataAnotherSix48").equals(""))||(!box.getString("dataAnotherSix41").equals(""))||(!box.getString("dataAnotherSix37").equals("")))
								{
									
									OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
									
									opdPreAssessmentClinicDental.setHin(patient);
									
									
									opdPreAssessmentClinicDental.setVisit(visit);
									
									
									opdPreAssessmentClinicDental.setDepartment(masDepartment);
									
									opdPreAssessmentClinicDental.setFlag("Restorations");
									opdPreAssessmentClinicDental.setHospital(masHospital);
									opdPreAssessmentClinicDental.setTemplateName("Removable Partial Prosthodontics");
									opdPreAssessmentClinicDental.setRemovablePartialProsthodonticsHeader(opdRemovablePartialProsthodonticsHeader);
									
									if(null != box.getString("dentalhiddenValueSix") && !box.getString("dentalhiddenValueSix").equals(""))
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueSix"));
									else
										opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueSix"));
								
								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherSix18") && !box.getString("dataAnotherSix18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherSix") && !request.getParameterValues("teeth_18_valueAnotherSix").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherSix");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix17") && !box.getString("dataAnotherSix17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherSix") && !request.getParameterValues("teeth_17_valueAnotherSix").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherSix");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix16") && !box.getString("dataAnotherSix16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherSix") && !request.getParameterValues("teeth_16_valueAnotherSix").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherSix");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix15") && !box.getString("dataAnotherSix15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherSix") && !request.getParameterValues("teeth_15_valueAnotherSix").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherSix");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix14") && !box.getString("dataAnotherSix14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherSix") && !request.getParameterValues("teeth_14_valueAnotherSix").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherSix");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix13") && !box.getString("dataAnotherSix13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherSix") && !request.getParameterValues("teeth_13_valueAnotherSix").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherSix");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix12") && !box.getString("dataAnotherSix12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherSix") && !request.getParameterValues("teeth_12_valueAnotherSix").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherSix");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix11") && !box.getString("dataAnotherSix11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherSix") && !request.getParameterValues("teeth_11_valueAnotherSix").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherSix");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix21") && !box.getString("dataAnotherSix21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherSix") && !request.getParameterValues("teeth_21_valueAnotherSix").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherSix");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherSix22") && !box.getString("dataAnotherSix22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherSix") && !request.getParameterValues("teeth_22_valueAnotherSix").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherSix");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix23") && !box.getString("dataAnotherSix23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherSix") && !request.getParameterValues("teeth_23_valueAnotherSix").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherSix");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherSix24") && !box.getString("dataAnotherSix24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherSix") && !request.getParameterValues("teeth_24_valueAnotherSix").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherSix");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix25") && !box.getString("dataAnotherSix25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherSix") && !request.getParameterValues("teeth_25_valueAnotherSix").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherSix");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix26") && !box.getString("dataAnotherSix26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherSix") && !request.getParameterValues("teeth_26_valueAnotherSix").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherSix");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix27") && !box.getString("dataAnotherSix27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherSix") && !request.getParameterValues("teeth_27_valueAnotherSix").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherSix");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix28") && !box.getString("dataAnotherSix28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherSix") && !request.getParameterValues("teeth_28_valueAnotherSix").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherSix");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix48") && !box.getString("dataAnotherSix48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherSix") && !request.getParameterValues("teeth_48_valueAnotherSix").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherSix");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix47") && !box.getString("dataAnotherSix47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherSix") && !request.getParameterValues("teeth_47_valueAnotherSix").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherSix");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix46") && !box.getString("dataAnotherSix46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherSix") && !request.getParameterValues("teeth_46_valueAnotherSix").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherSix");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix45") && !box.getString("dataAnotherSix45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherSix") && !request.getParameterValues("teeth_45_valueAnotherSix").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherSix");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix44") && !box.getString("dataAnotherSix44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherSix") && !request.getParameterValues("teeth_44_valueAnotherSix").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherSix");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix43") && !box.getString("dataAnotherSix43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherSix") && !request.getParameterValues("teeth_43_valueAnotherSix").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherSix");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix42") && !box.getString("dataAnotherSix42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherSix") && !request.getParameterValues("teeth_42_valueAnotherSix").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherSix");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix41") && !box.getString("dataAnotherSix41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherSix") && !request.getParameterValues("teeth_41_valueAnotherSix").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherSix");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix31") && !box.getString("dataAnotherSix31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherSix") && !request.getParameterValues("teeth_31_valueAnotherSix").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherSix");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherSix32") && !box.getString("dataAnotherSix32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherSix") && !request.getParameterValues("teeth_32_valueAnotherSix").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherSix");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix33") && !box.getString("dataAnotherSix33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherSix") && !request.getParameterValues("teeth_33_valueAnotherSix").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherSix");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherSix34") && !box.getString("dataAnotherSix34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherSix") && !request.getParameterValues("teeth_34_valueAnotherSix").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherSix");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix35") && !box.getString("dataAnotherSix35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherSix") && !request.getParameterValues("teeth_35_valueAnotherSix").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherSix");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix36") && !box.getString("dataAnotherSix36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherSix") && !request.getParameterValues("teeth_36_valueAnotherSix").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherSix");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix37") && !box.getString("dataAnotherSix37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherSix") && !request.getParameterValues("teeth_37_valueAnotherSix").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherSix");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherSix38") && !box.getString("dataAnotherSix38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherSix") && !request.getParameterValues("teeth_38_valueAnotherSix").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherSix");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
							
											
						
						
							hbt.save(opdPreAssessmentClinicDental);
							
							}
							tnx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
						return map;
					}
				
				
				
				
				
				public Map<String, Object> saveFixedProsthodontics(Map<String, Object> mapForDs, Box box,
						HttpServletRequest request) {
						Map<String, Object> map = new HashMap<String, Object>();
						MasSpecialtyTemplate masSpecialtyTemplate = null;
						Transaction tnx=null;
						try{
							Session session = (Session) getSession();
							tnx=session.beginTransaction();
							HibernateTemplate hbt = getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							OpdFixedProsthodonticsHeader opdFixedProsthodonticsHeader = new OpdFixedProsthodonticsHeader();
							
							Integer hinId=0;
							Integer departmentId=0;
							Integer visitId=0;
							Integer hospitalId=0;
							Integer specialtyId=0;
							Integer userId=0;
							String templateName = "";
							
							if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
								hinId = (Integer) mapForDs.get("hinId");
							}
							if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
								visitId = (Integer) mapForDs.get("visitId");
							}
							if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
								departmentId = (Integer) mapForDs.get("departmentId");
							}
							if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
								hospitalId = (Integer) mapForDs.get("hospitalId");
							}
							if(map.get("userId")!=null){
								userId=(Integer)  map.get("userId");	
							}
							
							if(map.get("specialtyId")!=null){
								specialtyId=(Integer)  map.get("specialtyId");	
							}
							if(map.get("templateName")!=null){
								templateName=(String)  map.get("templateName");	
							}
							
							Patient patient = new Patient();
							patient.setId(hinId);
							opdFixedProsthodonticsHeader.setHin(patient);
							
							Visit visit = new Visit();
							visit.setId(visitId);
							opdFixedProsthodonticsHeader.setVisit(visit);
							
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(departmentId);
							opdFixedProsthodonticsHeader.setDepartment(masDepartment);
							
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							opdFixedProsthodonticsHeader.setHospital(masHospital);
							
							
							if(null != box.getString("medicalHistory") && !box.getString("medicalHistory").equals(""))
								opdFixedProsthodonticsHeader.setMedicalHistory(box.getString("medicalHistory"));
						

							
							if(null != box.getString("treatmentPlanning") && !box.getString("treatmentPlanning").equals(""))
								opdFixedProsthodonticsHeader.setTreatmentPlanning(box.getString("treatmentPlanning"));
						
						
						
							if(null != box.getString("historyOfAllergy") && !box.getString("historyOfAllergy").equals("")){
								opdFixedProsthodonticsHeader.setHistoryOfAllergy(box.getString("historyOfAllergy"));
								if(null != box.getString("historyOfAllergyValue") && !box.getString("historyOfAllergyValue").equals(""))
								{
									opdFixedProsthodonticsHeader.setHistoryOfAllergyValue(box.getString("historyOfAllergyValue"));
								}}else{
									opdFixedProsthodonticsHeader.setHistoryOfAllergy(box.getString("historyOfAllergy"));
									opdFixedProsthodonticsHeader.setHistoryOfAllergyValue("");
								}
					
							
							
			
							

							if(null != box.getString("dentalHistory") && !box.getString("dentalHistory").equals(""))
								opdFixedProsthodonticsHeader.setDentalHistory(box.getString("dentalHistory"));
							
							
							if(null != box.getString("oralHygieneStatus") && !box.getString("oralHygieneStatus").equals(""))
								opdFixedProsthodonticsHeader.setOralHygieneStatus(box.getString("oralHygieneStatus"));
							
						
							
							if(null != box.getString("conditionOfPeriodontium") && !box.getString("conditionOfPeriodontium").equals(""))
								opdFixedProsthodonticsHeader.setConditionOfPeriodontium(box.getString("conditionOfPeriodontium"));
							
						
							if(null != box.getString("verticalHorizontalValue") && !box.getString("verticalHorizontalValue").equals(""))
								opdFixedProsthodonticsHeader.setVerticalHorizontalValue(box.getString("verticalHorizontalValue"));
							
						

							if(null != box.getString("verticalHorizontal") && !box.getString("verticalHorizontal").equals(""))
								opdFixedProsthodonticsHeader.setVerticalHorizontal(box.getString("verticalHorizontal"));
							
						

							if(null != box.getString("continuityOfLaminaDuraValue") && !box.getString("continuityOfLaminaDuraValue").equals(""))
								opdFixedProsthodonticsHeader.setContinuityOfLaminaDuraValue(box.getString("continuityOfLaminaDuraValue"));
							
						

							if(null != box.getString("continuityOfLaminaDura") && !box.getString("continuityOfLaminaDura").equals(""))
								opdFixedProsthodonticsHeader.setContinuityOfLaminaDura(box.getString("continuityOfLaminaDura"));
							
						

							if(null != box.getString("crownRootRatioValue") && !box.getString("crownRootRatioValue").equals(""))
								opdFixedProsthodonticsHeader.setCrownRootRatioValue(box.getString("crownRootRatioValue"));
							
						

							if(null != box.getString("crownRootRatio") && !box.getString("crownRootRatio").equals(""))
								opdFixedProsthodonticsHeader.setCrownRootRatio(box.getString("crownRootRatio"));
							
						

							if(null != box.getString("rootResorptionValue") && !box.getString("rootResorptionValue").equals(""))
								opdFixedProsthodonticsHeader.setRootResorptionValue(box.getString("rootResorptionValue"));
							
						

							if(null != box.getString("rootResorption") && !box.getString("rootResorption").equals(""))
								opdFixedProsthodonticsHeader.setRootResorption(box.getString("rootResorption"));
							
						

							if(null != box.getString("periapicalStatusValue") && !box.getString("periapicalStatusValue").equals(""))
								opdFixedProsthodonticsHeader.setPeriapicalStatusValue(box.getString("periapicalStatusValue"));
							
						

							if(null != box.getString("periapicalStatus") && !box.getString("periapicalStatus").equals(""))
								opdFixedProsthodonticsHeader.setPeriapicalStatus(box.getString("periapicalStatus"));
							
						
							if(null != box.getString("residualRootsValue") && !box.getString("residualRootsValue").equals(""))
								opdFixedProsthodonticsHeader.setResidualRootsValue(box.getString("residualRootsValue"));
							
						

							if(null != box.getString("residualRoots") && !box.getString("residualRoots").equals(""))
								opdFixedProsthodonticsHeader.setResidualRoots(box.getString("residualRoots"));
							
						
							
							
							
							
							if(null != box.getString("colorOfGingiva") && !box.getString("colorOfGingiva").equals(""))
								opdFixedProsthodonticsHeader.setColorOfGingiva(box.getString("colorOfGingiva"));
							
						
							
							
							if(null != box.getString("contourOfGingiva") && !box.getString("contourOfGingiva").equals(""))
								opdFixedProsthodonticsHeader.setContourOfGingiva(box.getString("contourOfGingiva"));
							
						
							
							
							
							if(null != box.getString("clicking") && !box.getString("clicking").equals(""))
								opdFixedProsthodonticsHeader.setClicking(box.getString("clicking"));
							
						
							
							
							
							if(null != box.getString("clickingValue") && !box.getString("clickingValue").equals(""))
								opdFixedProsthodonticsHeader.setClickingValue(box.getString("clickingValue"));
							
						
							
							
							
							if(null != box.getString("pain") && !box.getString("pain").equals(""))
								opdFixedProsthodonticsHeader.setPain(box.getString("pain"));
							
						
							
							
							
							if(null != box.getString("painValue") && !box.getString("painValue").equals(""))
								opdFixedProsthodonticsHeader.setPainValue(box.getString("painValue"));
							
						
							
							
							
							if(null != box.getString("deviation") && !box.getString("deviation").equals(""))
								opdFixedProsthodonticsHeader.setDeviation(box.getString("deviation"));
							
						
							
							if(null != box.getString("deviationValue") && !box.getString("deviationValue").equals(""))
								opdFixedProsthodonticsHeader.setDeviationValue(box.getString("deviationValue"));
							
						
						
							if(null != box.getString("typeOfGuidance") && !box.getString("typeOfGuidance").equals(""))
								opdFixedProsthodonticsHeader.setTypeOfGuidance(box.getString("typeOfGuidance"));
							
						
							
							if(null != box.getString("interferencesInMovements") && !box.getString("interferencesInMovements").equals(""))
								opdFixedProsthodonticsHeader.setInterferencesInMovements(box.getString("interferencesInMovements"));
							
						
							
							if(null != box.getString("examinationOfRidge") && !box.getString("examinationOfRidge").equals(""))
								opdFixedProsthodonticsHeader.setExaminationOfRidge(box.getString("examinationOfRidge"));
							
						
							
							
							
						
							
							hbt.save(opdFixedProsthodonticsHeader);
							
							map.put("opdFixedProsthodonticsHeader",opdFixedProsthodonticsHeader);
							
							
							if((!box.getString("data18").equals(""))||(!box.getString("data17").equals(""))||(!box.getString("data16").equals(""))||(!box.getString("data15").equals(""))||
									(!box.getString("data14").equals(""))||(!box.getString("data47").equals(""))||(!box.getString("data31").equals(""))||(!box.getString("data38").equals(""))||
									(!box.getString("data21").equals(""))||(!box.getString("data46").equals(""))||(!box.getString("data32").equals(""))||
									(!box.getString("data22").equals(""))||(!box.getString("data45").equals(""))||(!box.getString("data33").equals(""))||
									(!box.getString("data23").equals(""))||(!box.getString("data44").equals(""))||(!box.getString("data34").equals(""))||
									(!box.getString("data24").equals(""))||(!box.getString("data43").equals(""))||(!box.getString("data35").equals(""))||
									(!box.getString("data25").equals(""))||(!box.getString("data42").equals(""))||(!box.getString("data36").equals(""))||
									(!box.getString("data48").equals(""))||(!box.getString("data41").equals(""))||(!box.getString("data37").equals(""))){
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								
								opdPreAssessmentClinicDental.setFlag("Pockets");
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								

								
								if(null != box.getString("dentalhiddenValue") && !box.getString("dentalhiddenValue").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));

							
								
							// for reading the checkBox value
							if(null != box.getString("data18") && !box.getString("data18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_value");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("data17") && !box.getString("data17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_value");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("data16") && !box.getString("data16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_value");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("data15") && !box.getString("data15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_value");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("data14") && !box.getString("data14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_value");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("data13") && !box.getString("data13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_value");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("data12") && !box.getString("data12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_value");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("data11") && !box.getString("data11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_value");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("data21") && !box.getString("data21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_value");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("data22") && !box.getString("data22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_value");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("data23") && !box.getString("data23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_value");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("data24") && !box.getString("data24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_value");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("data25") && !box.getString("data25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_value");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("data26") && !box.getString("data26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_value");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("data27") && !box.getString("data27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_value");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("data28") && !box.getString("data28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_value");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("data48") && !box.getString("data48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_value");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("data47") && !box.getString("data47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_value");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("data46") && !box.getString("data46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_value");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("data45") && !box.getString("data45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_value");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("data44") && !box.getString("data44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_value");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("data43") && !box.getString("data43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_value");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("data42") && !box.getString("data42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_value");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("data41") && !box.getString("data41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_value");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("data31") && !box.getString("data31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_value");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("data32") && !box.getString("data32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_value");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("data33") && !box.getString("data33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_value");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("data34") && !box.getString("data34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_value");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("data35") && !box.getString("data35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_value");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("data36") && !box.getString("data36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_value");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("data37") && !box.getString("data37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_value");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("data38") && !box.getString("data38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_value");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
							hbt.save(opdPreAssessmentClinicDental);
				
							}
							
							
							
							if((!box.getString("dataAnother18").equals(""))||(!box.getString("dataAnother17").equals(""))||(!box.getString("dataAnother16").equals(""))||(!box.getString("dataAnother15").equals(""))||
									(!box.getString("dataAnother14").equals(""))||(!box.getString("dataAnother47").equals(""))||(!box.getString("dataAnother31").equals(""))||(!box.getString("dataAnother38").equals(""))||
									(!box.getString("dataAnother21").equals(""))||(!box.getString("dataAnother46").equals(""))||(!box.getString("dataAnother32").equals(""))||
									(!box.getString("dataAnother22").equals(""))||(!box.getString("dataAnother45").equals(""))||(!box.getString("dataAnother33").equals(""))||
									(!box.getString("dataAnother23").equals(""))||(!box.getString("dataAnother44").equals(""))||(!box.getString("dataAnother34").equals(""))||
									(!box.getString("dataAnother24").equals(""))||(!box.getString("dataAnother43").equals(""))||(!box.getString("dataAnother35").equals(""))||
									(!box.getString("dataAnother25").equals(""))||(!box.getString("dataAnother42").equals(""))||(!box.getString("dataAnother36").equals(""))||
									(!box.getString("dataAnother48").equals(""))||(!box.getString("dataAnother41").equals(""))||(!box.getString("dataAnother37").equals("")))
							{
								
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Tooth Mobility");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
								
								
								if(null != box.getString("dentalhiddenValueAnother") && !box.getString("dentalhiddenValueAnother").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));

								
							// for reading the checkBox value
							if(null != box.getString("dataAnother18") && !box.getString("dataAnother18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_valueAnother") && !request.getParameterValues("teeth_18_valueAnother").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_valueAnother");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("dataAnother17") && !box.getString("dataAnother17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_valueAnother") && !request.getParameterValues("teeth_17_valueAnother").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_valueAnother");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("dataAnother16") && !box.getString("dataAnother16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_valueAnother") && !request.getParameterValues("teeth_16_valueAnother").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_valueAnother");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("dataAnother15") && !box.getString("dataAnother15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_valueAnother") && !request.getParameterValues("teeth_15_valueAnother").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_valueAnother");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("dataAnother14") && !box.getString("dataAnother14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_valueAnother") && !request.getParameterValues("teeth_14_valueAnother").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_valueAnother");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("dataAnother13") && !box.getString("dataAnother13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_valueAnother") && !request.getParameterValues("teeth_13_valueAnother").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_valueAnother");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("dataAnother12") && !box.getString("dataAnother12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_valueAnother") && !request.getParameterValues("teeth_12_valueAnother").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_valueAnother");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("dataAnother11") && !box.getString("dataAnother11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_valueAnother") && !request.getParameterValues("teeth_11_valueAnother").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_valueAnother");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("dataAnother21") && !box.getString("dataAnother21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_valueAnother") && !request.getParameterValues("teeth_21_valueAnother").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_valueAnother");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("dataAnother22") && !box.getString("dataAnother22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_valueAnother") && !request.getParameterValues("teeth_22_valueAnother").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_valueAnother");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("dataAnother23") && !box.getString("dataAnother23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_valueAnother") && !request.getParameterValues("teeth_23_valueAnother").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_valueAnother");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("dataAnother24") && !box.getString("dataAnother24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_valueAnother") && !request.getParameterValues("teeth_24_valueAnother").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_valueAnother");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("dataAnother25") && !box.getString("dataAnother25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_valueAnother") && !request.getParameterValues("teeth_25_valueAnother").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_valueAnother");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("dataAnother26") && !box.getString("dataAnother26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_valueAnother") && !request.getParameterValues("teeth_26_valueAnother").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_valueAnother");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("dataAnother27") && !box.getString("dataAnother27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_valueAnother") && !request.getParameterValues("teeth_27_valueAnother").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_valueAnother");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("dataAnother28") && !box.getString("dataAnother28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_valueAnother") && !request.getParameterValues("teeth_28_valueAnother").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_valueAnother");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("dataAnother48") && !box.getString("dataAnother48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_valueAnother") && !request.getParameterValues("teeth_48_valueAnother").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_valueAnother");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("dataAnother47") && !box.getString("dataAnother47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_valueAnother") && !request.getParameterValues("teeth_47_valueAnother").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_valueAnother");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("dataAnother46") && !box.getString("dataAnother46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_valueAnother") && !request.getParameterValues("teeth_46_valueAnother").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_valueAnother");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("dataAnother45") && !box.getString("dataAnother45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_valueAnother") && !request.getParameterValues("teeth_45_valueAnother").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_valueAnother");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("dataAnother44") && !box.getString("dataAnother44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_valueAnother") && !request.getParameterValues("teeth_44_valueAnother").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_valueAnother");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("dataAnother43") && !box.getString("dataAnother43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_valueAnother") && !request.getParameterValues("teeth_43_valueAnother").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_valueAnother");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("dataAnother42") && !box.getString("dataAnother42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_valueAnother") && !request.getParameterValues("teeth_42_valueAnother").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_valueAnother");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("dataAnother41") && !box.getString("dataAnother41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_valueAnother") && !request.getParameterValues("teeth_41_valueAnother").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_valueAnother");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("dataAnother31") && !box.getString("dataAnother31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_valueAnother") && !request.getParameterValues("teeth_31_valueAnother").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_valueAnother");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("dataAnother32") && !box.getString("dataAnother32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_valueAnother") && !request.getParameterValues("teeth_32_valueAnother").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_valueAnother");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("dataAnother33") && !box.getString("dataAnother33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_valueAnother") && !request.getParameterValues("teeth_33_valueAnother").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_valueAnother");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("dataAnother34") && !box.getString("dataAnother34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_valueAnother") && !request.getParameterValues("teeth_34_valueAnother").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_valueAnother");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("dataAnother35") && !box.getString("dataAnother35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_valueAnother") && !request.getParameterValues("teeth_35_valueAnother").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_valueAnother");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("dataAnother36") && !box.getString("dataAnother36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_valueAnother") && !request.getParameterValues("teeth_36_valueAnother").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_valueAnother");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("dataAnother37") && !box.getString("dataAnother37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_valueAnother") && !request.getParameterValues("teeth_37_valueAnother").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_valueAnother");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("dataAnother38") && !box.getString("dataAnother38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_valueAnother") && !request.getParameterValues("teeth_38_valueAnother").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_valueAnother");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
						
							}
							
												
							if((!box.getString("dataAnotherOne18").equals(""))||(!box.getString("dataAnotherOne17").equals(""))||(!box.getString("dataAnotherOne16").equals(""))||(!box.getString("dataAnotherOne15").equals(""))||
									(!box.getString("dataAnotherOne14").equals(""))||(!box.getString("dataAnotherOne47").equals(""))||(!box.getString("dataAnotherOne31").equals(""))||(!box.getString("dataAnotherOne38").equals(""))||
									(!box.getString("dataAnotherOne21").equals(""))||(!box.getString("dataAnotherOne46").equals(""))||(!box.getString("dataAnotherOne32").equals(""))||
									(!box.getString("dataAnotherOne22").equals(""))||(!box.getString("dataAnotherOne45").equals(""))||(!box.getString("dataAnotherOne33").equals(""))||
									(!box.getString("dataAnotherOne23").equals(""))||(!box.getString("dataAnotherOne44").equals(""))||(!box.getString("dataAnotherOne34").equals(""))||
									(!box.getString("dataAnotherOne24").equals(""))||(!box.getString("dataAnotherOne43").equals(""))||(!box.getString("dataAnotherOne35").equals(""))||
									(!box.getString("dataAnotherOne25").equals(""))||(!box.getString("dataAnotherOne42").equals(""))||(!box.getString("dataAnotherOne36").equals(""))||
									(!box.getString("dataAnotherOne48").equals(""))||(!box.getString("dataAnotherOne41").equals(""))||(!box.getString("dataAnotherOne37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Carious Lesion");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
										
								
								if(null != box.getString("dentalhiddenValueOne") && !box.getString("dentalhiddenValueOne").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));

								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherOne18") && !box.getString("dataAnotherOne18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherOne") && !request.getParameterValues("teeth_18_valueAnotherOne").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherOne");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne17") && !box.getString("dataAnotherOne17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherOne") && !request.getParameterValues("teeth_17_valueAnotherOne").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherOne");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne16") && !box.getString("dataAnotherOne16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherOne") && !request.getParameterValues("teeth_16_valueAnotherOne").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherOne");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne15") && !box.getString("dataAnotherOne15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherOne") && !request.getParameterValues("teeth_15_valueAnotherOne").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherOne");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne14") && !box.getString("dataAnotherOne14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherOne") && !request.getParameterValues("teeth_14_valueAnotherOne").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherOne");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne13") && !box.getString("dataAnotherOne13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherOne") && !request.getParameterValues("teeth_13_valueAnotherOne").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherOne");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne12") && !box.getString("dataAnotherOne12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherOne") && !request.getParameterValues("teeth_12_valueAnotherOne").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherOne");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne11") && !box.getString("dataAnotherOne11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherOne") && !request.getParameterValues("teeth_11_valueAnotherOne").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherOne");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne21") && !box.getString("dataAnotherOne21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherOne") && !request.getParameterValues("teeth_21_valueAnotherOne").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherOne");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne22") && !box.getString("dataAnotherOne22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherOne") && !request.getParameterValues("teeth_22_valueAnotherOne").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherOne");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne23") && !box.getString("dataAnotherOne23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherOne") && !request.getParameterValues("teeth_23_valueAnotherOne").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherOne");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne24") && !box.getString("dataAnotherOne24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherOne") && !request.getParameterValues("teeth_24_valueAnotherOne").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherOne");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne25") && !box.getString("dataAnotherOne25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherOne") && !request.getParameterValues("teeth_25_valueAnotherOne").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherOne");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne26") && !box.getString("dataAnotherOne26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherOne") && !request.getParameterValues("teeth_26_valueAnotherOne").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherOne");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne27") && !box.getString("dataAnotherOne27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherOne") && !request.getParameterValues("teeth_27_valueAnotherOne").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherOne");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne28") && !box.getString("dataAnotherOne28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherOne") && !request.getParameterValues("teeth_28_valueAnotherOne").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherOne");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne48") && !box.getString("dataAnotherOne48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherOne") && !request.getParameterValues("teeth_48_valueAnotherOne").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherOne");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne47") && !box.getString("dataAnotherOne47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherOne") && !request.getParameterValues("teeth_47_valueAnotherOne").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherOne");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne46") && !box.getString("dataAnotherOne46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherOne") && !request.getParameterValues("teeth_46_valueAnotherOne").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherOne");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne45") && !box.getString("dataAnotherOne45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherOne") && !request.getParameterValues("teeth_45_valueAnotherOne").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherOne");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne44") && !box.getString("dataAnotherOne44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherOne") && !request.getParameterValues("teeth_44_valueAnotherOne").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherOne");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne43") && !box.getString("dataAnotherOne43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherOne") && !request.getParameterValues("teeth_43_valueAnotherOne").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherOne");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne42") && !box.getString("dataAnotherOne42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherOne") && !request.getParameterValues("teeth_42_valueAnotherOne").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherOne");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne41") && !box.getString("dataAnotherOne41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherOne") && !request.getParameterValues("teeth_41_valueAnotherOne").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherOne");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne31") && !box.getString("dataAnotherOne31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherOne") && !request.getParameterValues("teeth_31_valueAnotherOne").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherOne");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne32") && !box.getString("dataAnotherOne32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherOne") && !request.getParameterValues("teeth_32_valueAnotherOne").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherOne");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne33") && !box.getString("dataAnotherOne33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherOne") && !request.getParameterValues("teeth_33_valueAnotherOne").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherOne");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne34") && !box.getString("dataAnotherOne34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherOne") && !request.getParameterValues("teeth_34_valueAnotherOne").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherOne");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne35") && !box.getString("dataAnotherOne35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherOne") && !request.getParameterValues("teeth_35_valueAnotherOne").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherOne");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne36") && !box.getString("dataAnotherOne36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherOne") && !request.getParameterValues("teeth_36_valueAnotherOne").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherOne");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne37") && !box.getString("dataAnotherOne37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherOne") && !request.getParameterValues("teeth_37_valueAnotherOne").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherOne");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne38") && !box.getString("dataAnotherOne38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherOne") && !request.getParameterValues("teeth_38_valueAnotherOne").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherOne");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
							//tnx.commit();
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							if((!box.getString("dataAnotherTwo18").equals(""))||(!box.getString("dataAnotherTwo17").equals(""))||(!box.getString("dataAnotherTwo16").equals(""))||(!box.getString("dataAnotherTwo15").equals(""))||
									(!box.getString("dataAnotherTwo14").equals(""))||(!box.getString("dataAnotherTwo47").equals(""))||(!box.getString("dataAnotherTwo31").equals(""))||(!box.getString("dataAnotherTwo38").equals(""))||
									(!box.getString("dataAnotherTwo21").equals(""))||(!box.getString("dataAnotherTwo46").equals(""))||(!box.getString("dataAnotherTwo32").equals(""))||
									(!box.getString("dataAnotherTwo22").equals(""))||(!box.getString("dataAnotherTwo45").equals(""))||(!box.getString("dataAnotherTwo33").equals(""))||
									(!box.getString("dataAnotherTwo23").equals(""))||(!box.getString("dataAnotherTwo44").equals(""))||(!box.getString("dataAnotherTwo34").equals(""))||
									(!box.getString("dataAnotherTwo24").equals(""))||(!box.getString("dataAnotherTwo43").equals(""))||(!box.getString("dataAnotherTwo35").equals(""))||
									(!box.getString("dataAnotherTwo25").equals(""))||(!box.getString("dataAnotherTwo42").equals(""))||(!box.getString("dataAnotherTwo36").equals(""))||
									(!box.getString("dataAnotherTwo48").equals(""))||(!box.getString("dataAnotherTwo41").equals(""))||(!box.getString("dataAnotherTwo37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Colour Variation of Enamel");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
								
								
								if(null != box.getString("dentalhiddenValueTwo") && !box.getString("dentalhiddenValueTwo").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueTwo"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueTwo"));
								
								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherTwo18") && !box.getString("dataAnotherTwo18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherTwo") && !request.getParameterValues("teeth_18_valueAnotherTwo").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherTwo");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo17") && !box.getString("dataAnotherTwo17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherTwo") && !request.getParameterValues("teeth_17_valueAnotherTwo").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherTwo");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo16") && !box.getString("dataAnotherTwo16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherTwo") && !request.getParameterValues("teeth_16_valueAnotherTwo").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherTwo");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo15") && !box.getString("dataAnotherTwo15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherTwo") && !request.getParameterValues("teeth_15_valueAnotherTwo").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherTwo");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo14") && !box.getString("dataAnotherTwo14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherTwo") && !request.getParameterValues("teeth_14_valueAnotherTwo").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherTwo");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo13") && !box.getString("dataAnotherTwo13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherTwo") && !request.getParameterValues("teeth_13_valueAnotherTwo").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherTwo");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo12") && !box.getString("dataAnotherTwo12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherTwo") && !request.getParameterValues("teeth_12_valueAnotherTwo").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherTwo");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo11") && !box.getString("dataAnotherTwo11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherTwo") && !request.getParameterValues("teeth_11_valueAnotherTwo").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherTwo");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo21") && !box.getString("dataAnotherTwo21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherTwo") && !request.getParameterValues("teeth_21_valueAnotherTwo").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherTwo");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherTwo22") && !box.getString("dataAnotherTwo22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherTwo") && !request.getParameterValues("teeth_22_valueAnotherTwo").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherTwo");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo23") && !box.getString("dataAnotherTwo23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherTwo") && !request.getParameterValues("teeth_23_valueAnotherTwo").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherTwo");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherTwo24") && !box.getString("dataAnotherTwo24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherTwo") && !request.getParameterValues("teeth_24_valueAnotherTwo").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherTwo");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo25") && !box.getString("dataAnotherTwo25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherTwo") && !request.getParameterValues("teeth_25_valueAnotherTwo").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherTwo");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo26") && !box.getString("dataAnotherTwo26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherTwo") && !request.getParameterValues("teeth_26_valueAnotherTwo").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherTwo");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo27") && !box.getString("dataAnotherTwo27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherTwo") && !request.getParameterValues("teeth_27_valueAnotherTwo").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherTwo");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo28") && !box.getString("dataAnotherTwo28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherTwo") && !request.getParameterValues("teeth_28_valueAnotherTwo").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherTwo");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo48") && !box.getString("dataAnotherTwo48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherTwo") && !request.getParameterValues("teeth_48_valueAnotherTwo").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherTwo");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo47") && !box.getString("dataAnotherTwo47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherTwo") && !request.getParameterValues("teeth_47_valueAnotherTwo").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherTwo");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo46") && !box.getString("dataAnotherTwo46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherTwo") && !request.getParameterValues("teeth_46_valueAnotherTwo").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherTwo");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo45") && !box.getString("dataAnotherTwo45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherTwo") && !request.getParameterValues("teeth_45_valueAnotherTwo").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherTwo");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo44") && !box.getString("dataAnotherTwo44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherTwo") && !request.getParameterValues("teeth_44_valueAnotherTwo").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherTwo");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo43") && !box.getString("dataAnotherTwo43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherTwo") && !request.getParameterValues("teeth_43_valueAnotherTwo").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherTwo");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo42") && !box.getString("dataAnotherTwo42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherTwo") && !request.getParameterValues("teeth_42_valueAnotherTwo").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherTwo");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo41") && !box.getString("dataAnotherTwo41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherTwo") && !request.getParameterValues("teeth_41_valueAnotherTwo").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherTwo");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo31") && !box.getString("dataAnotherTwo31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherTwo") && !request.getParameterValues("teeth_31_valueAnotherTwo").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherTwo");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherTwo32") && !box.getString("dataAnotherTwo32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherTwo") && !request.getParameterValues("teeth_32_valueAnotherTwo").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherTwo");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo33") && !box.getString("dataAnotherTwo33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherTwo") && !request.getParameterValues("teeth_33_valueAnotherTwo").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherTwo");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherTwo34") && !box.getString("dataAnotherTwo34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherTwo") && !request.getParameterValues("teeth_34_valueAnotherTwo").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherTwo");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo35") && !box.getString("dataAnotherTwo35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherTwo") && !request.getParameterValues("teeth_35_valueAnotherTwo").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherTwo");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo36") && !box.getString("dataAnotherTwo36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherTwo") && !request.getParameterValues("teeth_36_valueAnotherTwo").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherTwo");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo37") && !box.getString("dataAnotherTwo37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherTwo") && !request.getParameterValues("teeth_37_valueAnotherTwo").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherTwo");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherTwo38") && !box.getString("dataAnotherTwo38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherTwo") && !request.getParameterValues("teeth_38_valueAnotherTwo").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherTwo");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
							//tnx.commit();
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							if((!box.getString("dataAnotherThree18").equals(""))||(!box.getString("dataAnotherThree17").equals(""))||(!box.getString("dataAnotherThree16").equals(""))||(!box.getString("dataAnotherThree15").equals(""))||
									(!box.getString("dataAnotherThree14").equals(""))||(!box.getString("dataAnotherThree47").equals(""))||(!box.getString("dataAnotherThree31").equals(""))||(!box.getString("dataAnotherThree38").equals(""))||
									(!box.getString("dataAnotherThree21").equals(""))||(!box.getString("dataAnotherThree46").equals(""))||(!box.getString("dataAnotherThree32").equals(""))||
									(!box.getString("dataAnotherThree22").equals(""))||(!box.getString("dataAnotherThree45").equals(""))||(!box.getString("dataAnotherThree33").equals(""))||
									(!box.getString("dataAnotherThree23").equals(""))||(!box.getString("dataAnotherThree44").equals(""))||(!box.getString("dataAnotherThree34").equals(""))||
									(!box.getString("dataAnotherThree24").equals(""))||(!box.getString("dataAnotherThree43").equals(""))||(!box.getString("dataAnotherThree35").equals(""))||
									(!box.getString("dataAnotherThree25").equals(""))||(!box.getString("dataAnotherThree42").equals(""))||(!box.getString("dataAnotherThree36").equals(""))||
									(!box.getString("dataAnotherThree48").equals(""))||(!box.getString("dataAnotherThree41").equals(""))||(!box.getString("dataAnotherThree37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Evidence of Erosion");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
											
								
								if(null != box.getString("dentalhiddenValueThree") && !box.getString("dentalhiddenValueThree").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueThree"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueThree"));
								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherThree18") && !box.getString("dataAnotherThree18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherThree") && !request.getParameterValues("teeth_18_valueAnotherThree").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherThree");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree17") && !box.getString("dataAnotherThree17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherThree") && !request.getParameterValues("teeth_17_valueAnotherThree").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherThree");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree16") && !box.getString("dataAnotherThree16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherThree") && !request.getParameterValues("teeth_16_valueAnotherThree").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherThree");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree15") && !box.getString("dataAnotherThree15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherThree") && !request.getParameterValues("teeth_15_valueAnotherThree").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherThree");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree14") && !box.getString("dataAnotherThree14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherThree") && !request.getParameterValues("teeth_14_valueAnotherThree").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherThree");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree13") && !box.getString("dataAnotherThree13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherThree") && !request.getParameterValues("teeth_13_valueAnotherThree").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherThree");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree12") && !box.getString("dataAnotherThree12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherThree") && !request.getParameterValues("teeth_12_valueAnotherThree").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherThree");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree11") && !box.getString("dataAnotherThree11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherThree") && !request.getParameterValues("teeth_11_valueAnotherThree").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherThree");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree21") && !box.getString("dataAnotherThree21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherThree") && !request.getParameterValues("teeth_21_valueAnotherThree").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherThree");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherThree22") && !box.getString("dataAnotherThree22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherThree") && !request.getParameterValues("teeth_22_valueAnotherThree").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherThree");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree23") && !box.getString("dataAnotherThree23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherThree") && !request.getParameterValues("teeth_23_valueAnotherThree").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherThree");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherThree24") && !box.getString("dataAnotherThree24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherThree") && !request.getParameterValues("teeth_24_valueAnotherThree").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherThree");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree25") && !box.getString("dataAnotherThree25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherThree") && !request.getParameterValues("teeth_25_valueAnotherThree").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherThree");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree26") && !box.getString("dataAnotherThree26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherThree") && !request.getParameterValues("teeth_26_valueAnotherThree").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherThree");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree27") && !box.getString("dataAnotherThree27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherThree") && !request.getParameterValues("teeth_27_valueAnotherThree").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherThree");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree28") && !box.getString("dataAnotherThree28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherThree") && !request.getParameterValues("teeth_28_valueAnotherThree").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherThree");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree48") && !box.getString("dataAnotherThree48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherThree") && !request.getParameterValues("teeth_48_valueAnotherThree").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherThree");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree47") && !box.getString("dataAnotherThree47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherThree") && !request.getParameterValues("teeth_47_valueAnotherThree").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherThree");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree46") && !box.getString("dataAnotherThree46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherThree") && !request.getParameterValues("teeth_46_valueAnotherThree").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherThree");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree45") && !box.getString("dataAnotherThree45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherThree") && !request.getParameterValues("teeth_45_valueAnotherThree").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherThree");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree44") && !box.getString("dataAnotherThree44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherThree") && !request.getParameterValues("teeth_44_valueAnotherThree").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherThree");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree43") && !box.getString("dataAnotherThree43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherThree") && !request.getParameterValues("teeth_43_valueAnotherThree").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherThree");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree42") && !box.getString("dataAnotherThree42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherThree") && !request.getParameterValues("teeth_42_valueAnotherThree").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherThree");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree41") && !box.getString("dataAnotherThree41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherThree") && !request.getParameterValues("teeth_41_valueAnotherThree").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherThree");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree31") && !box.getString("dataAnotherThree31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherThree") && !request.getParameterValues("teeth_31_valueAnotherThree").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherThree");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherThree32") && !box.getString("dataAnotherThree32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherThree") && !request.getParameterValues("teeth_32_valueAnotherThree").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherThree");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree33") && !box.getString("dataAnotherThree33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherThree") && !request.getParameterValues("teeth_33_valueAnotherThree").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherThree");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherThree34") && !box.getString("dataAnotherThree34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherThree") && !request.getParameterValues("teeth_34_valueAnotherThree").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherThree");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree35") && !box.getString("dataAnotherThree35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherThree") && !request.getParameterValues("teeth_35_valueAnotherThree").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherThree");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree36") && !box.getString("dataAnotherThree36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherThree") && !request.getParameterValues("teeth_36_valueAnotherThree").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherThree");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree37") && !box.getString("dataAnotherThree37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherThree") && !request.getParameterValues("teeth_37_valueAnotherThree").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherThree");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherThree38") && !box.getString("dataAnotherThree38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherThree") && !request.getParameterValues("teeth_38_valueAnotherThree").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherThree");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
							
							
						
						
							hbt.save(opdPreAssessmentClinicDental);
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							if((!box.getString("dataAnotherFour18").equals(""))||(!box.getString("dataAnotherFour17").equals(""))||(!box.getString("dataAnotherFour16").equals(""))||(!box.getString("dataAnotherFour15").equals(""))||
									(!box.getString("dataAnotherFour14").equals(""))||(!box.getString("dataAnotherFour47").equals(""))||(!box.getString("dataAnotherFour31").equals(""))||(!box.getString("dataAnotherFour38").equals(""))||
									(!box.getString("dataAnotherFour21").equals(""))||(!box.getString("dataAnotherFour46").equals(""))||(!box.getString("dataAnotherFour32").equals(""))||
									(!box.getString("dataAnotherFour22").equals(""))||(!box.getString("dataAnotherFour45").equals(""))||(!box.getString("dataAnotherFour33").equals(""))||
									(!box.getString("dataAnotherFour23").equals(""))||(!box.getString("dataAnotherFour44").equals(""))||(!box.getString("dataAnotherFour34").equals(""))||
									(!box.getString("dataAnotherFour24").equals(""))||(!box.getString("dataAnotherFour43").equals(""))||(!box.getString("dataAnotherFour35").equals(""))||
									(!box.getString("dataAnotherFour25").equals(""))||(!box.getString("dataAnotherFour42").equals(""))||(!box.getString("dataAnotherFour36").equals(""))||
									(!box.getString("dataAnotherFour48").equals(""))||(!box.getString("dataAnotherFour41").equals(""))||(!box.getString("dataAnotherFour37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Areas of Abrasion");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
								
								if(null != box.getString("dentalhiddenValueFour") && !box.getString("dentalhiddenValueFour").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFour"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFour"));
								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherFour18") && !box.getString("dataAnotherFour18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherFour") && !request.getParameterValues("teeth_18_valueAnotherFour").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherFour");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour17") && !box.getString("dataAnotherFour17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherFour") && !request.getParameterValues("teeth_17_valueAnotherFour").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherFour");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour16") && !box.getString("dataAnotherFour16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherFour") && !request.getParameterValues("teeth_16_valueAnotherFour").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherFour");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour15") && !box.getString("dataAnotherFour15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherFour") && !request.getParameterValues("teeth_15_valueAnotherFour").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherFour");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour14") && !box.getString("dataAnotherFour14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherFour") && !request.getParameterValues("teeth_14_valueAnotherFour").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherFour");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour13") && !box.getString("dataAnotherFour13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherFour") && !request.getParameterValues("teeth_13_valueAnotherFour").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherFour");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour12") && !box.getString("dataAnotherFour12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherFour") && !request.getParameterValues("teeth_12_valueAnotherFour").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherFour");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour11") && !box.getString("dataAnotherFour11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherFour") && !request.getParameterValues("teeth_11_valueAnotherFour").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherFour");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour21") && !box.getString("dataAnotherFour21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherFour") && !request.getParameterValues("teeth_21_valueAnotherFour").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherFour");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFour22") && !box.getString("dataAnotherFour22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherFour") && !request.getParameterValues("teeth_22_valueAnotherFour").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherFour");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour23") && !box.getString("dataAnotherFour23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherFour") && !request.getParameterValues("teeth_23_valueAnotherFour").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherFour");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFour24") && !box.getString("dataAnotherFour24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherFour") && !request.getParameterValues("teeth_24_valueAnotherFour").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherFour");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour25") && !box.getString("dataAnotherFour25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherFour") && !request.getParameterValues("teeth_25_valueAnotherFour").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherFour");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour26") && !box.getString("dataAnotherFour26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherFour") && !request.getParameterValues("teeth_26_valueAnotherFour").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherFour");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour27") && !box.getString("dataAnotherFour27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherFour") && !request.getParameterValues("teeth_27_valueAnotherFour").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherFour");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour28") && !box.getString("dataAnotherFour28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherFour") && !request.getParameterValues("teeth_28_valueAnotherFour").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherFour");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour48") && !box.getString("dataAnotherFour48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherFour") && !request.getParameterValues("teeth_48_valueAnotherFour").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherFour");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour47") && !box.getString("dataAnotherFour47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherFour") && !request.getParameterValues("teeth_47_valueAnotherFour").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherFour");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour46") && !box.getString("dataAnotherFour46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherFour") && !request.getParameterValues("teeth_46_valueAnotherFour").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherFour");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour45") && !box.getString("dataAnotherFour45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherFour") && !request.getParameterValues("teeth_45_valueAnotherFour").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherFour");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour44") && !box.getString("dataAnotherFour44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherFour") && !request.getParameterValues("teeth_44_valueAnotherFour").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherFour");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour43") && !box.getString("dataAnotherFour43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherFour") && !request.getParameterValues("teeth_43_valueAnotherFour").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherFour");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour42") && !box.getString("dataAnotherFour42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherFour") && !request.getParameterValues("teeth_42_valueAnotherFour").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherFour");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour41") && !box.getString("dataAnotherFour41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherFour") && !request.getParameterValues("teeth_41_valueAnotherFour").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherFour");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour31") && !box.getString("dataAnotherFour31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherFour") && !request.getParameterValues("teeth_31_valueAnotherFour").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherFour");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFour32") && !box.getString("dataAnotherFour32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherFour") && !request.getParameterValues("teeth_32_valueAnotherFour").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherFour");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour33") && !box.getString("dataAnotherFour33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherFour") && !request.getParameterValues("teeth_33_valueAnotherFour").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherFour");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFour34") && !box.getString("dataAnotherFour34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherFour") && !request.getParameterValues("teeth_34_valueAnotherFour").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherFour");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour35") && !box.getString("dataAnotherFour35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherFour") && !request.getParameterValues("teeth_35_valueAnotherFour").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherFour");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour36") && !box.getString("dataAnotherFour36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherFour") && !request.getParameterValues("teeth_36_valueAnotherFour").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherFour");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour37") && !box.getString("dataAnotherFour37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherFour") && !request.getParameterValues("teeth_37_valueAnotherFour").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherFour");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherFour38") && !box.getString("dataAnotherFour38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherFour") && !request.getParameterValues("teeth_38_valueAnotherFour").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherFour");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
							
						
							
						
						
							hbt.save(opdPreAssessmentClinicDental);
						
							}
							
							if((!box.getString("dataAnotherFive18").equals(""))||(!box.getString("dataAnotherFive17").equals(""))||(!box.getString("dataAnotherFive16").equals(""))||(!box.getString("dataAnotherFive15").equals(""))||
									(!box.getString("dataAnotherFive14").equals(""))||(!box.getString("dataAnotherFive47").equals(""))||(!box.getString("dataAnotherFive31").equals(""))||(!box.getString("dataAnotherFive38").equals(""))||
									(!box.getString("dataAnotherFive21").equals(""))||(!box.getString("dataAnotherFive46").equals(""))||(!box.getString("dataAnotherFive32").equals(""))||
									(!box.getString("dataAnotherFive22").equals(""))||(!box.getString("dataAnotherFive45").equals(""))||(!box.getString("dataAnotherFive33").equals(""))||
									(!box.getString("dataAnotherFive23").equals(""))||(!box.getString("dataAnotherFive44").equals(""))||(!box.getString("dataAnotherFive34").equals(""))||
									(!box.getString("dataAnotherFive24").equals(""))||(!box.getString("dataAnotherFive43").equals(""))||(!box.getString("dataAnotherFive35").equals(""))||
									(!box.getString("dataAnotherFive25").equals(""))||(!box.getString("dataAnotherFive42").equals(""))||(!box.getString("dataAnotherFive36").equals(""))||
									(!box.getString("dataAnotherFive48").equals(""))||(!box.getString("dataAnotherFive41").equals(""))||(!box.getString("dataAnotherFive37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Areas of Occlusal Wear");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
									
								if(null != box.getString("dentalhiddenValueFive") && !box.getString("dentalhiddenValueFive").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFive"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFive"));
								

								// for reading the checkBox value
								if(null != box.getString("dataAnotherFive18") && !box.getString("dataAnotherFive18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherFive") && !request.getParameterValues("teeth_18_valueAnotherFive").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherFive");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive17") && !box.getString("dataAnotherFive17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherFive") && !request.getParameterValues("teeth_17_valueAnotherFive").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherFive");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive16") && !box.getString("dataAnotherFive16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherFive") && !request.getParameterValues("teeth_16_valueAnotherFive").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherFive");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive15") && !box.getString("dataAnotherFive15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherFive") && !request.getParameterValues("teeth_15_valueAnotherFive").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherFive");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive14") && !box.getString("dataAnotherFive14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherFive") && !request.getParameterValues("teeth_14_valueAnotherFive").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherFive");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive13") && !box.getString("dataAnotherFive13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherFive") && !request.getParameterValues("teeth_13_valueAnotherFive").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherFive");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive12") && !box.getString("dataAnotherFive12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherFive") && !request.getParameterValues("teeth_12_valueAnotherFive").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherFive");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive11") && !box.getString("dataAnotherFive11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherFive") && !request.getParameterValues("teeth_11_valueAnotherFive").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherFive");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive21") && !box.getString("dataAnotherFive21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherFive") && !request.getParameterValues("teeth_21_valueAnotherFive").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherFive");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFive22") && !box.getString("dataAnotherFive22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherFive") && !request.getParameterValues("teeth_22_valueAnotherFive").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherFive");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive23") && !box.getString("dataAnotherFive23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherFive") && !request.getParameterValues("teeth_23_valueAnotherFive").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherFive");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFive24") && !box.getString("dataAnotherFive24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherFive") && !request.getParameterValues("teeth_24_valueAnotherFive").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherFive");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive25") && !box.getString("dataAnotherFive25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherFive") && !request.getParameterValues("teeth_25_valueAnotherFive").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherFive");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive26") && !box.getString("dataAnotherFive26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherFive") && !request.getParameterValues("teeth_26_valueAnotherFive").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherFive");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive27") && !box.getString("dataAnotherFive27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherFive") && !request.getParameterValues("teeth_27_valueAnotherFive").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherFive");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive28") && !box.getString("dataAnotherFive28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherFive") && !request.getParameterValues("teeth_28_valueAnotherFive").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherFive");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive48") && !box.getString("dataAnotherFive48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherFive") && !request.getParameterValues("teeth_48_valueAnotherFive").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherFive");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive47") && !box.getString("dataAnotherFive47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherFive") && !request.getParameterValues("teeth_47_valueAnotherFive").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherFive");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive46") && !box.getString("dataAnotherFive46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherFive") && !request.getParameterValues("teeth_46_valueAnotherFive").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherFive");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive45") && !box.getString("dataAnotherFive45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherFive") && !request.getParameterValues("teeth_45_valueAnotherFive").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherFive");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive44") && !box.getString("dataAnotherFive44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherFive") && !request.getParameterValues("teeth_44_valueAnotherFive").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherFive");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive43") && !box.getString("dataAnotherFive43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherFive") && !request.getParameterValues("teeth_43_valueAnotherFive").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherFive");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive42") && !box.getString("dataAnotherFive42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherFive") && !request.getParameterValues("teeth_42_valueAnotherFive").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherFive");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive41") && !box.getString("dataAnotherFive41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherFive") && !request.getParameterValues("teeth_41_valueAnotherFive").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherFive");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive31") && !box.getString("dataAnotherFive31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherFive") && !request.getParameterValues("teeth_31_valueAnotherFive").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherFive");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFive32") && !box.getString("dataAnotherFive32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherFive") && !request.getParameterValues("teeth_32_valueAnotherFive").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherFive");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive33") && !box.getString("dataAnotherFive33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherFive") && !request.getParameterValues("teeth_33_valueAnotherFive").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherFive");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherFive34") && !box.getString("dataAnotherFive34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherFive") && !request.getParameterValues("teeth_34_valueAnotherFive").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherFive");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive35") && !box.getString("dataAnotherFive35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherFive") && !request.getParameterValues("teeth_35_valueAnotherFive").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherFive");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive36") && !box.getString("dataAnotherFive36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherFive") && !request.getParameterValues("teeth_36_valueAnotherFive").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherFive");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive37") && !box.getString("dataAnotherFive37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherFive") && !request.getParameterValues("teeth_37_valueAnotherFive").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherFive");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherFive38") && !box.getString("dataAnotherFive38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherFive") && !request.getParameterValues("teeth_38_valueAnotherFive").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherFive");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
								
								
						
						
							hbt.save(opdPreAssessmentClinicDental);
							
							}
							
							
							if((!box.getString("dataAnotherSix18").equals(""))||(!box.getString("dataAnotherSix17").equals(""))||(!box.getString("dataAnotherSix16").equals(""))||(!box.getString("dataAnotherSix15").equals(""))||
									(!box.getString("dataAnotherSix14").equals(""))||(!box.getString("dataAnotherSix47").equals(""))||(!box.getString("dataAnotherSix31").equals(""))||(!box.getString("dataAnotherSix38").equals(""))||
									(!box.getString("dataAnotherSix21").equals(""))||(!box.getString("dataAnotherSix46").equals(""))||(!box.getString("dataAnotherSix32").equals(""))||
									(!box.getString("dataAnotherSix22").equals(""))||(!box.getString("dataAnotherSix45").equals(""))||(!box.getString("dataAnotherSix33").equals(""))||
									(!box.getString("dataAnotherSix23").equals(""))||(!box.getString("dataAnotherSix44").equals(""))||(!box.getString("dataAnotherSix34").equals(""))||
									(!box.getString("dataAnotherSix24").equals(""))||(!box.getString("dataAnotherSix43").equals(""))||(!box.getString("dataAnotherSix35").equals(""))||
									(!box.getString("dataAnotherSix25").equals(""))||(!box.getString("dataAnotherSix42").equals(""))||(!box.getString("dataAnotherSix36").equals(""))||
									(!box.getString("dataAnotherSix48").equals(""))||(!box.getString("dataAnotherSix41").equals(""))||(!box.getString("dataAnotherSix37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Restorations");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setTemplateName("Fixed Prosthodontics");
								opdPreAssessmentClinicDental.setFixedProsthodonticsHeader(opdFixedProsthodonticsHeader);
								
								if(null != box.getString("dentalhiddenValueSix") && !box.getString("dentalhiddenValueSix").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueSix"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueSix"));
								
							// for reading the checkBox value
							if(null != box.getString("dataAnotherSix18") && !box.getString("dataAnotherSix18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_valueAnotherSix") && !request.getParameterValues("teeth_18_valueAnotherSix").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherSix");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix17") && !box.getString("dataAnotherSix17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_valueAnotherSix") && !request.getParameterValues("teeth_17_valueAnotherSix").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherSix");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix16") && !box.getString("dataAnotherSix16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_valueAnotherSix") && !request.getParameterValues("teeth_16_valueAnotherSix").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherSix");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix15") && !box.getString("dataAnotherSix15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_valueAnotherSix") && !request.getParameterValues("teeth_15_valueAnotherSix").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherSix");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix14") && !box.getString("dataAnotherSix14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_valueAnotherSix") && !request.getParameterValues("teeth_14_valueAnotherSix").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherSix");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix13") && !box.getString("dataAnotherSix13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_valueAnotherSix") && !request.getParameterValues("teeth_13_valueAnotherSix").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherSix");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix12") && !box.getString("dataAnotherSix12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_valueAnotherSix") && !request.getParameterValues("teeth_12_valueAnotherSix").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherSix");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix11") && !box.getString("dataAnotherSix11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_valueAnotherSix") && !request.getParameterValues("teeth_11_valueAnotherSix").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherSix");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix21") && !box.getString("dataAnotherSix21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_valueAnotherSix") && !request.getParameterValues("teeth_21_valueAnotherSix").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherSix");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("dataAnotherSix22") && !box.getString("dataAnotherSix22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_valueAnotherSix") && !request.getParameterValues("teeth_22_valueAnotherSix").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherSix");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix23") && !box.getString("dataAnotherSix23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_valueAnotherSix") && !request.getParameterValues("teeth_23_valueAnotherSix").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherSix");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("dataAnotherSix24") && !box.getString("dataAnotherSix24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_valueAnotherSix") && !request.getParameterValues("teeth_24_valueAnotherSix").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherSix");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix25") && !box.getString("dataAnotherSix25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_valueAnotherSix") && !request.getParameterValues("teeth_25_valueAnotherSix").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherSix");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix26") && !box.getString("dataAnotherSix26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_valueAnotherSix") && !request.getParameterValues("teeth_26_valueAnotherSix").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherSix");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix27") && !box.getString("dataAnotherSix27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_valueAnotherSix") && !request.getParameterValues("teeth_27_valueAnotherSix").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherSix");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix28") && !box.getString("dataAnotherSix28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_valueAnotherSix") && !request.getParameterValues("teeth_28_valueAnotherSix").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherSix");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix48") && !box.getString("dataAnotherSix48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_valueAnotherSix") && !request.getParameterValues("teeth_48_valueAnotherSix").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherSix");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix47") && !box.getString("dataAnotherSix47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_valueAnotherSix") && !request.getParameterValues("teeth_47_valueAnotherSix").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherSix");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix46") && !box.getString("dataAnotherSix46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_valueAnotherSix") && !request.getParameterValues("teeth_46_valueAnotherSix").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherSix");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix45") && !box.getString("dataAnotherSix45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_valueAnotherSix") && !request.getParameterValues("teeth_45_valueAnotherSix").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherSix");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix44") && !box.getString("dataAnotherSix44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_valueAnotherSix") && !request.getParameterValues("teeth_44_valueAnotherSix").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherSix");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix43") && !box.getString("dataAnotherSix43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_valueAnotherSix") && !request.getParameterValues("teeth_43_valueAnotherSix").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherSix");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix42") && !box.getString("dataAnotherSix42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_valueAnotherSix") && !request.getParameterValues("teeth_42_valueAnotherSix").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherSix");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix41") && !box.getString("dataAnotherSix41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_valueAnotherSix") && !request.getParameterValues("teeth_41_valueAnotherSix").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherSix");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix31") && !box.getString("dataAnotherSix31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_valueAnotherSix") && !request.getParameterValues("teeth_31_valueAnotherSix").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherSix");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("dataAnotherSix32") && !box.getString("dataAnotherSix32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_valueAnotherSix") && !request.getParameterValues("teeth_32_valueAnotherSix").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherSix");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix33") && !box.getString("dataAnotherSix33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_valueAnotherSix") && !request.getParameterValues("teeth_33_valueAnotherSix").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherSix");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("dataAnotherSix34") && !box.getString("dataAnotherSix34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_valueAnotherSix") && !request.getParameterValues("teeth_34_valueAnotherSix").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherSix");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix35") && !box.getString("dataAnotherSix35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_valueAnotherSix") && !request.getParameterValues("teeth_35_valueAnotherSix").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherSix");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix36") && !box.getString("dataAnotherSix36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_valueAnotherSix") && !request.getParameterValues("teeth_36_valueAnotherSix").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherSix");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix37") && !box.getString("dataAnotherSix37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_valueAnotherSix") && !request.getParameterValues("teeth_37_valueAnotherSix").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherSix");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("dataAnotherSix38") && !box.getString("dataAnotherSix38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_valueAnotherSix") && !request.getParameterValues("teeth_38_valueAnotherSix").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherSix");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
						
							
						
						
							hbt.save(opdPreAssessmentClinicDental);
							
							}
							tnx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
						return map;
					}
				
				
				
				
				
				
				
				
				
				public Map<String, Object> saveEndodontics(Map<String, Object> mapForDs, Box box,
						HttpServletRequest request) {
						Map<String, Object> map = new HashMap<String, Object>();
						MasSpecialtyTemplate masSpecialtyTemplate = null;
						Transaction tnx=null;
						try{
							Session session = (Session) getSession();
							tnx=session.beginTransaction();
							HibernateTemplate hbt = getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							OpdEndodonticsHeader opdEndodonticsHeader = new OpdEndodonticsHeader();
							
							Integer hinId=0;
							Integer departmentId=0;
							Integer visitId=0;
							Integer hospitalId=0;
							Integer specialtyId=0;
							Integer userId=0;
							String templateName = "";
							
							if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
								hinId = (Integer) mapForDs.get("hinId");
							}
							if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
								visitId = (Integer) mapForDs.get("visitId");
							}
							if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
								departmentId = (Integer) mapForDs.get("departmentId");
							}
							if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
								hospitalId = (Integer) mapForDs.get("hospitalId");
							}
							if(map.get("userId")!=null){
								userId=(Integer)  map.get("userId");	
							}
							
							if(map.get("specialtyId")!=null){
								specialtyId=(Integer)  map.get("specialtyId");	
							}
							if(map.get("templateName")!=null){
								templateName=(String)  map.get("templateName");	
							}
							
							Patient patient = new Patient();
							patient.setId(hinId);
							opdEndodonticsHeader.setHin(patient);
							
							Visit visit = new Visit();
							visit.setId(visitId);
							opdEndodonticsHeader.setVisit(visit);
							
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(departmentId);
							opdEndodonticsHeader.setDepartment(masDepartment);
							
							MasHospital masHospital = new MasHospital();
							masHospital.setId(hospitalId);
							opdEndodonticsHeader.setHospital(masHospital);
							
							
							if(null != box.getString("chiefComplaintValue") && !box.getString("chiefComplaintValue").equals(""))
								opdEndodonticsHeader.setChiefComplaintValue(box.getString("chiefComplaintValue"));
						
						
						
							if(null != box.getString("lymphNodeEnlargement") && !box.getString("lymphNodeEnlargement").equals(""))
								opdEndodonticsHeader.setLymphnodeEnlargement("Yes");
							else
								opdEndodonticsHeader.setLymphnodeEnlargement("No");
							
							
						

							if(null != box.getString("swelling") && !box.getString("swelling").equals(""))
								opdEndodonticsHeader.setSwelling("Yes");
							else
								opdEndodonticsHeader.setSwelling("No");
							

							
							

							if(null != box.getString("facialSwellinga") && !box.getString("facialSwellinga").equals(""))
								opdEndodonticsHeader.setFacialswellinga("Yes");
							else
								opdEndodonticsHeader.setFacialswellinga("No");
							

						

							if(null != box.getString("sinusTract") && !box.getString("sinusTract").equals(""))
								opdEndodonticsHeader.setSinusTract("Yes");
							else
								opdEndodonticsHeader.setSinusTract("No");
							

							
							
							if(null != box.getString("sinusTractValue") && !box.getString("sinusTractValue").equals(""))
								opdEndodonticsHeader.setSinusTractvalue(box.getString("sinusTractValue"));
						
							
							if(null != box.getString("location") && !box.getString("location").equals(""))
								opdEndodonticsHeader.setLocationEndodontics(box.getString("location"));
						
							
						/*	if(null != box.getString("location") && !box.getString("location").equals(""))
								opdEndodonticsHeader.setlocation(box.getString("location"));
						*/
							if(null != box.getString("nature") && !box.getString("nature").equals(""))
								opdEndodonticsHeader.setNature(box.getString("nature"));
						
							
							if(null != box.getString("swellingValue") && !box.getString("swellingValue").equals(""))
								opdEndodonticsHeader.setSwellingValue(box.getString("swellingValue"));
						
							
							if(null != box.getString("lymphNodeEnlargementValue") && !box.getString("lymphNodeEnlargementValue").equals(""))
								opdEndodonticsHeader.setLymphnodeEnlargementValue(box.getString("lymphNodeEnlargementValue"));
						
							
							if(null != box.getString("facialSwellingaValue") && !box.getString("facialSwellingaValue").equals(""))
								opdEndodonticsHeader.setFacialswellingaValue(box.getString("facialSwellingaValue"));
						
							
							if(null != box.getString("natureOfPain") && !box.getString("natureOfPain").equals(""))
								opdEndodonticsHeader.setNatureOfPain(box.getString("natureOfPain"));
						
							
							if(null != box.getString("quality") && !box.getString("quality").equals(""))
								opdEndodonticsHeader.setQuality(box.getString("quality"));
						
							
							if(null != box.getString("onset") && !box.getString("onset").equals(""))
								opdEndodonticsHeader.setOnset(box.getString("onset"));
						
							if(null != box.getString("others") && !box.getString("others").equals(""))
								opdEndodonticsHeader.setOthers(box.getString("others"));
						
							
							
							if(null != box.getString("duration") && !box.getString("duration").equals(""))
								opdEndodonticsHeader.setDuration(box.getString("duration"));
						
							
							
							
							if(null != box.getString("initiatedBy") && !box.getString("initiatedBy").equals(""))
								opdEndodonticsHeader.setInitiatedBy(box.getString("initiatedBy"));
						
							
							
							if(null != box.getString("releivedBy") && !box.getString("releivedBy").equals(""))
								opdEndodonticsHeader.setReleivedBy(box.getString("releivedBy"));
						
							
							
							String[] chiefComplaintList=null;
							StringBuilder  tempchiefComplaint=new StringBuilder();
							if(null != request.getParameterValues("chiefComplaint") && !request.getParameterValues("chiefComplaint").equals("")){
								chiefComplaintList=request.getParameterValues("chiefComplaint");
								for(String chiefComplaintValue:chiefComplaintList){
									tempchiefComplaint.append(chiefComplaintValue);
									tempchiefComplaint.append(",");
								}
								opdEndodonticsHeader.setChiefComplaint(tempchiefComplaint.toString());
							}
							
						
							
							hbt.save(opdEndodonticsHeader);
							
							map.put("opdEndodonticsHeader",opdEndodonticsHeader);
							
							
							
							int hdbTreatmentDone = 0;
							
							if(null != box.getString("hdbTreatmentDone") && !box.getString("hdbTreatmentDone").equals("")) {
								hdbTreatmentDone = box.getInt("hdbTreatmentDone");
							}
							
							OpdTreatment opdTreatment = new OpdTreatment();
							//for (int j = 0; j <=hdbMaxillary; j++) {
								for(int j = 1; j <= hdbTreatmentDone; j++) {
									if((!box.getString("toothTreatmentPlan" + j).equals(""))||(!box.getString("treatmentTreatmentPlan" +j).equals(""))||(!box.getString("remarksTreatmentPlan" +j).equals(""))){
											
										opdTreatment = new OpdTreatment();
										opdTreatment.setFlag("Treatment Plan");
										opdTreatment.setEndodonticsHeader(opdEndodonticsHeader);
									
								if (!box.getString("toothTreatmentPlan" + j).equals("")) {
									opdTreatment.setTooth(box.getString("toothTreatmentPlan" + j));
								}
								if (!box.getString("treatmentTreatmentPlan" + j).equals("")) {
									opdTreatment.setTreatment(box.getString("treatmentTreatmentPlan" + j));
								}
								if (!box.getString("remarksTreatmentPlan" + j).equals("")) {
									opdTreatment.setRemarks(box.getString("remarksTreatmentPlan" + j));
								}
								
								hbt.save(opdTreatment);
								}
							}
								int hdbTreatmentPlan=0;
								if(null != box.getString("hdbTreatmentPlan") && !box.getString("hdbTreatmentPlan").equals("")) {
									hdbTreatmentPlan = box.getInt("hdbTreatmentPlan");
								}
								
								//for (int j = 0; j <=hdbMaxillary; j++) {
									for(int j = 1; j <= hdbTreatmentPlan; j++) {
										if((!box.getString("toothTreatmentDone" + j).equals(""))||(!box.getString("treatmentTreatmentDone" +j).equals(""))||(!box.getString("remarksTreatmentDone" +j).equals(""))){
												
											opdTreatment = new OpdTreatment();
											opdTreatment.setFlag("Treatment Done");
											opdTreatment.setEndodonticsHeader(opdEndodonticsHeader);
										
									if (!box.getString("toothTreatmentDone" + j).equals("")) {
										opdTreatment.setTooth(box.getString("toothTreatmentDone" + j));
									}
									if (!box.getString("treatmentTreatmentDone" + j).equals("")) {
										opdTreatment.setTreatment(box.getString("treatmentTreatmentDone" + j));
									}
									if (!box.getString("remarksTreatmentDone" + j).equals("")) {
										opdTreatment.setRemarks(box.getString("remarksTreatmentDone" + j));
									}
									
									hbt.save(opdTreatment);
									}
								}
									
									
								
							
							if((!box.getString("data18").equals(""))||(!box.getString("data17").equals(""))||(!box.getString("data16").equals(""))||(!box.getString("data15").equals(""))||
									(!box.getString("data14").equals(""))||(!box.getString("data47").equals(""))||(!box.getString("data31").equals(""))||(!box.getString("data38").equals(""))||
									(!box.getString("data21").equals(""))||(!box.getString("data46").equals(""))||(!box.getString("data32").equals(""))||
									(!box.getString("data22").equals(""))||(!box.getString("data45").equals(""))||(!box.getString("data33").equals(""))||
									(!box.getString("data23").equals(""))||(!box.getString("data44").equals(""))||(!box.getString("data34").equals(""))||
									(!box.getString("data24").equals(""))||(!box.getString("data43").equals(""))||(!box.getString("data35").equals(""))||
									(!box.getString("data25").equals(""))||(!box.getString("data42").equals(""))||(!box.getString("data36").equals(""))||
									(!box.getString("data48").equals(""))||(!box.getString("data41").equals(""))||(!box.getString("data37").equals(""))){
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								
								opdPreAssessmentClinicDental.setFlag("Tooth");
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setEndodonticsHeader(opdEndodonticsHeader);
								
								

						
							
								
							// for reading the checkBox value
							if(null != box.getString("data18") && !box.getString("data18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_value");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("data17") && !box.getString("data17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_value");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("data16") && !box.getString("data16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_value");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("data15") && !box.getString("data15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_value");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("data14") && !box.getString("data14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_value");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("data13") && !box.getString("data13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_value");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("data12") && !box.getString("data12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_value");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("data11") && !box.getString("data11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_value");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("data21") && !box.getString("data21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_value");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("data22") && !box.getString("data22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_value");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("data23") && !box.getString("data23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_value");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("data24") && !box.getString("data24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_value");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("data25") && !box.getString("data25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_value");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("data26") && !box.getString("data26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_value");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("data27") && !box.getString("data27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_value");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("data28") && !box.getString("data28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_value");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("data48") && !box.getString("data48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_value");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("data47") && !box.getString("data47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_value");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("data46") && !box.getString("data46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_value");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("data45") && !box.getString("data45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_value");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("data44") && !box.getString("data44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_value");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("data43") && !box.getString("data43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_value");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("data42") && !box.getString("data42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_value");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("data41") && !box.getString("data41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_value");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("data31") && !box.getString("data31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_value");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("data32") && !box.getString("data32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_value");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("data33") && !box.getString("data33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_value");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("data34") && !box.getString("data34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_value");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("data35") && !box.getString("data35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_value");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("data36") && !box.getString("data36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_value");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("data37") && !box.getString("data37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_value");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("data38") && !box.getString("data38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_value");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
							hbt.save(opdPreAssessmentClinicDental);
				
							}
							
							
							
							if((!box.getString("dataAnother18").equals(""))||(!box.getString("dataAnother17").equals(""))||(!box.getString("dataAnother16").equals(""))||(!box.getString("dataAnother15").equals(""))||
									(!box.getString("dataAnother14").equals(""))||(!box.getString("dataAnother47").equals(""))||(!box.getString("dataAnother31").equals(""))||(!box.getString("dataAnother38").equals(""))||
									(!box.getString("dataAnother21").equals(""))||(!box.getString("dataAnother46").equals(""))||(!box.getString("dataAnother32").equals(""))||
									(!box.getString("dataAnother22").equals(""))||(!box.getString("dataAnother45").equals(""))||(!box.getString("dataAnother33").equals(""))||
									(!box.getString("dataAnother23").equals(""))||(!box.getString("dataAnother44").equals(""))||(!box.getString("dataAnother34").equals(""))||
									(!box.getString("dataAnother24").equals(""))||(!box.getString("dataAnother43").equals(""))||(!box.getString("dataAnother35").equals(""))||
									(!box.getString("dataAnother25").equals(""))||(!box.getString("dataAnother42").equals(""))||(!box.getString("dataAnother36").equals(""))||
									(!box.getString("dataAnother48").equals(""))||(!box.getString("dataAnother41").equals(""))||(!box.getString("dataAnother37").equals("")))
							{
								
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Radiographic Examination");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setEndodonticsHeader(opdEndodonticsHeader);
								
								
							// for reading the checkBox value
							if(null != box.getString("dataAnother18") && !box.getString("dataAnother18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							// for dropdown value
							String[] teeth_18_valueList=null;
							StringBuilder  tempTeeth_18_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_18_valueAnother") && !request.getParameterValues("teeth_18_valueAnother").equals("")){
								teeth_18_valueList=request.getParameterValues("teeth_18_valueAnother");
								for(String teeth18Value:teeth_18_valueList){
									tempTeeth_18_value.append(teeth18Value);
									tempTeeth_18_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
							}
							
							if(null != box.getString("dataAnother17") && !box.getString("dataAnother17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							String[] teeth_17_valueList=null;
							StringBuilder  tempTeeth_17_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_17_valueAnother") && !request.getParameterValues("teeth_17_valueAnother").equals("")){
								teeth_17_valueList=request.getParameterValues("teeth_17_valueAnother");
								for(String teeth17Value:teeth_17_valueList){
									tempTeeth_17_value.append(teeth17Value);
									tempTeeth_17_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
							}
							
							if(null != box.getString("dataAnother16") && !box.getString("dataAnother16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							String[] teeth_16_valueList=null;
							StringBuilder  tempTeeth_16_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_16_valueAnother") && !request.getParameterValues("teeth_16_valueAnother").equals("")){
								teeth_16_valueList=request.getParameterValues("teeth_16_valueAnother");
								for(String teeth16Value:teeth_16_valueList){
									tempTeeth_16_value.append(teeth16Value);
									tempTeeth_16_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
							}
							
							if(null != box.getString("dataAnother15") && !box.getString("dataAnother15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							String[] teeth_15_valueList=null;
							StringBuilder  tempTeeth_15_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_15_valueAnother") && !request.getParameterValues("teeth_15_valueAnother").equals("")){
								teeth_15_valueList = request.getParameterValues("teeth_15_valueAnother");
								for(String teeth15Value : teeth_15_valueList){
									tempTeeth_15_value.append(teeth15Value);
									tempTeeth_15_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
							}
							
							if(null != box.getString("dataAnother14") && !box.getString("dataAnother14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							String[] teeth_14_valueList=null;
							StringBuilder  tempTeeth_14_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_14_valueAnother") && !request.getParameterValues("teeth_14_valueAnother").equals("")){
								teeth_14_valueList=request.getParameterValues("teeth_14_valueAnother");
								for(String teeth14Value:teeth_14_valueList){
									tempTeeth_14_value.append(teeth14Value);
									tempTeeth_14_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
							}
							
							if(null != box.getString("dataAnother13") && !box.getString("dataAnother13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							String[] teeth_13_valueList=null;
							StringBuilder  tempTeeth_13_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_13_valueAnother") && !request.getParameterValues("teeth_13_valueAnother").equals("")){
								teeth_13_valueList=request.getParameterValues("teeth_13_valueAnother");
								for(String teeth13Value:teeth_13_valueList){
									tempTeeth_13_value.append(teeth13Value);
									tempTeeth_13_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
							}
							
							if(null != box.getString("dataAnother12") && !box.getString("dataAnother12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							String[] teeth_12_valueList=null;
							StringBuilder  tempTeeth_12_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_12_valueAnother") && !request.getParameterValues("teeth_12_valueAnother").equals("")){
								teeth_12_valueList=request.getParameterValues("teeth_12_valueAnother");
								for(String teeth12Value:teeth_12_valueList){
									tempTeeth_12_value.append(teeth12Value);
									tempTeeth_12_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
							}
							
							if(null != box.getString("dataAnother11") && !box.getString("dataAnother11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							String[] teeth_11_valueList=null;
							StringBuilder  tempTeeth_11_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_11_valueAnother") && !request.getParameterValues("teeth_11_valueAnother").equals("")){
								teeth_11_valueList=request.getParameterValues("teeth_11_valueAnother");
								for(String teeth11Value:teeth_11_valueList){
									tempTeeth_11_value.append(teeth11Value);
									tempTeeth_11_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
							}
							
							if(null != box.getString("dataAnother21") && !box.getString("dataAnother21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							String[] teeth_21_valueList=null;
							StringBuilder  tempTeeth_21_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_21_valueAnother") && !request.getParameterValues("teeth_21_valueAnother").equals("")){
								teeth_21_valueList=request.getParameterValues("teeth_21_valueAnother");
								for(String teeth21Value:teeth_21_valueList){
									tempTeeth_21_value.append(teeth21Value);
									tempTeeth_21_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
							}
							
							
							if(null != box.getString("dataAnother22") && !box.getString("dataAnother22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							String[] teeth_22_valueList=null;
							StringBuilder  tempTeeth_22_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_22_valueAnother") && !request.getParameterValues("teeth_22_valueAnother").equals("")){
								teeth_22_valueList=request.getParameterValues("teeth_22_valueAnother");
								for(String teeth22Value:teeth_22_valueList){
									tempTeeth_22_value.append(teeth22Value);
									tempTeeth_22_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
							}
							
							if(null != box.getString("dataAnother23") && !box.getString("dataAnother23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							String[] teeth_23_valueList=null;
							StringBuilder  tempTeeth_23_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_23_valueAnother") && !request.getParameterValues("teeth_23_valueAnother").equals("")){
								teeth_23_valueList=request.getParameterValues("teeth_23_valueAnother");
								for(String teeth23Value:teeth_23_valueList){
									tempTeeth_23_value.append(teeth23Value);
									tempTeeth_23_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
							}
							
							
							if(null != box.getString("dataAnother24") && !box.getString("dataAnother24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							String[] teeth_24_valueList=null;
							StringBuilder  tempTeeth_24_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_24_valueAnother") && !request.getParameterValues("teeth_24_valueAnother").equals("")){
								teeth_24_valueList=request.getParameterValues("teeth_24_valueAnother");
								for(String teeth24Value:teeth_24_valueList){
									tempTeeth_24_value.append(teeth24Value);
									tempTeeth_24_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
							}
							
							if(null != box.getString("dataAnother25") && !box.getString("dataAnother25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							String[] teeth_25_valueList=null;
							StringBuilder  tempTeeth_25_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_25_valueAnother") && !request.getParameterValues("teeth_25_valueAnother").equals("")){
								teeth_25_valueList=request.getParameterValues("teeth_25_valueAnother");
								for(String teeth25Value:teeth_25_valueList){
									tempTeeth_25_value.append(teeth25Value);
									tempTeeth_25_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
							}
							
							if(null != box.getString("dataAnother26") && !box.getString("dataAnother26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							String[] teeth_26_valueList=null;
							StringBuilder  tempTeeth_26_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_26_valueAnother") && !request.getParameterValues("teeth_26_valueAnother").equals("")){
								teeth_26_valueList=request.getParameterValues("teeth_26_valueAnother");
								for(String teeth26Value:teeth_26_valueList){
									tempTeeth_26_value.append(teeth26Value);
									tempTeeth_26_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
							}
							
							if(null != box.getString("dataAnother27") && !box.getString("dataAnother27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							String[] teeth_27_valueList=null;
							StringBuilder  tempTeeth_27_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_27_valueAnother") && !request.getParameterValues("teeth_27_valueAnother").equals("")){
								teeth_27_valueList=request.getParameterValues("teeth_27_valueAnother");
								for(String teeth27Value:teeth_27_valueList){
									tempTeeth_27_value.append(teeth27Value);
									tempTeeth_27_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
							}
							
							if(null != box.getString("dataAnother28") && !box.getString("dataAnother28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
							String[] teeth_28_valueList=null;
							StringBuilder  tempTeeth_28_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_28_valueAnother") && !request.getParameterValues("teeth_28_valueAnother").equals("")){
								teeth_28_valueList=request.getParameterValues("teeth_28_valueAnother");
								for(String teeth28Value:teeth_28_valueList){
									tempTeeth_28_value.append(teeth28Value);
									tempTeeth_28_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
							}
							
							if(null != box.getString("dataAnother48") && !box.getString("dataAnother48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
							// for dropdown value
							String[] teeth_48_valueList=null;
							StringBuilder  tempTeeth_48_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_48_valueAnother") && !request.getParameterValues("teeth_48_valueAnother").equals("")){
								teeth_48_valueList=request.getParameterValues("teeth_48_valueAnother");
								for(String teeth48Value:teeth_48_valueList){
									tempTeeth_48_value.append(teeth48Value);
									tempTeeth_48_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
							}
							
							if(null != box.getString("dataAnother47") && !box.getString("dataAnother47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							String[] teeth_47_valueList=null;
							StringBuilder  tempTeeth_47_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_47_valueAnother") && !request.getParameterValues("teeth_47_valueAnother").equals("")){
								teeth_47_valueList=request.getParameterValues("teeth_47_valueAnother");
								for(String teeth47Value:teeth_47_valueList){
									tempTeeth_47_value.append(teeth47Value);
									tempTeeth_47_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
							}
							
							if(null != box.getString("dataAnother46") && !box.getString("dataAnother46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							String[] teeth_46_valueList=null;
							StringBuilder  tempTeeth_46_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_46_valueAnother") && !request.getParameterValues("teeth_46_valueAnother").equals("")){
								teeth_46_valueList=request.getParameterValues("teeth_46_valueAnother");
								for(String teeth46Value:teeth_46_valueList){
									tempTeeth_46_value.append(teeth46Value);
									tempTeeth_46_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
							}
							
							if(null != box.getString("dataAnother45") && !box.getString("dataAnother45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

							String[] teeth_45_valueList=null;
							StringBuilder  tempTeeth_45_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_45_valueAnother") && !request.getParameterValues("teeth_45_valueAnother").equals("")){
								teeth_45_valueList = request.getParameterValues("teeth_45_valueAnother");
								for(String teeth45Value : teeth_45_valueList){
									tempTeeth_45_value.append(teeth45Value);
									tempTeeth_45_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
							}
							
							if(null != box.getString("dataAnother44") && !box.getString("dataAnother44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							String[] teeth_44_valueList=null;
							StringBuilder  tempTeeth_44_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_44_valueAnother") && !request.getParameterValues("teeth_44_valueAnother").equals("")){
								teeth_44_valueList=request.getParameterValues("teeth_44_valueAnother");
								for(String teeth44Value:teeth_44_valueList){
									tempTeeth_44_value.append(teeth44Value);
									tempTeeth_44_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
							}
							
							if(null != box.getString("dataAnother43") && !box.getString("dataAnother43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							String[] teeth_43_valueList=null;
							StringBuilder  tempTeeth_43_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_43_valueAnother") && !request.getParameterValues("teeth_43_valueAnother").equals("")){
								teeth_43_valueList=request.getParameterValues("teeth_43_valueAnother");
								for(String teeth43Value:teeth_43_valueList){
									tempTeeth_43_value.append(teeth43Value);
									tempTeeth_43_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
							}
							
							if(null != box.getString("dataAnother42") && !box.getString("dataAnother42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							String[] teeth_42_valueList=null;
							StringBuilder  tempTeeth_42_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_42_valueAnother") && !request.getParameterValues("teeth_42_valueAnother").equals("")){
								teeth_42_valueList=request.getParameterValues("teeth_42_valueAnother");
								for(String teeth42Value:teeth_42_valueList){
									tempTeeth_42_value.append(teeth42Value);
									tempTeeth_42_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
							}
							
							if(null != box.getString("dataAnother41") && !box.getString("dataAnother41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							String[] teeth_41_valueList=null;
							StringBuilder  tempTeeth_41_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_41_valueAnother") && !request.getParameterValues("teeth_41_valueAnother").equals("")){
								teeth_41_valueList=request.getParameterValues("teeth_41_valueAnother");
								for(String teeth41Value:teeth_41_valueList){
									tempTeeth_41_value.append(teeth41Value);
									tempTeeth_41_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
							}
							
							if(null != box.getString("dataAnother31") && !box.getString("dataAnother31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							String[] teeth_31_valueList=null;
							StringBuilder  tempTeeth_31_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_31_valueAnother") && !request.getParameterValues("teeth_31_valueAnother").equals("")){
								teeth_31_valueList=request.getParameterValues("teeth_31_valueAnother");
								for(String teeth31Value:teeth_31_valueList){
									tempTeeth_31_value.append(teeth31Value);
									tempTeeth_31_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
							}
							
							
							if(null != box.getString("dataAnother32") && !box.getString("dataAnother32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							String[] teeth_32_valueList=null;
							StringBuilder  tempTeeth_32_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_32_valueAnother") && !request.getParameterValues("teeth_32_valueAnother").equals("")){
								teeth_32_valueList=request.getParameterValues("teeth_32_valueAnother");
								for(String teeth32Value:teeth_32_valueList){
									tempTeeth_32_value.append(teeth32Value);
									tempTeeth_32_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
							}
							
							if(null != box.getString("dataAnother33") && !box.getString("dataAnother33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							String[] teeth_33_valueList=null;
							StringBuilder  tempTeeth_33_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_33_valueAnother") && !request.getParameterValues("teeth_33_valueAnother").equals("")){
								teeth_33_valueList=request.getParameterValues("teeth_33_valueAnother");
								for(String teeth33Value:teeth_33_valueList){
									tempTeeth_33_value.append(teeth33Value);
									tempTeeth_33_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
							}
							
							
							if(null != box.getString("dataAnother34") && !box.getString("dataAnother34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							String[] teeth_34_valueList=null;
							StringBuilder  tempTeeth_34_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_34_valueAnother") && !request.getParameterValues("teeth_34_valueAnother").equals("")){
								teeth_34_valueList=request.getParameterValues("teeth_34_valueAnother");
								for(String teeth34Value:teeth_34_valueList){
									tempTeeth_34_value.append(teeth34Value);
									tempTeeth_34_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
							}
							
							if(null != box.getString("dataAnother35") && !box.getString("dataAnother35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							String[] teeth_35_valueList=null;
							StringBuilder  tempTeeth_35_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_35_valueAnother") && !request.getParameterValues("teeth_35_valueAnother").equals("")){
								teeth_35_valueList=request.getParameterValues("teeth_35_valueAnother");
								for(String teeth35Value:teeth_35_valueList){
									tempTeeth_35_value.append(teeth35Value);
									tempTeeth_35_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
							}
							
							if(null != box.getString("dataAnother36") && !box.getString("dataAnother36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							String[] teeth_36_valueList=null;
							StringBuilder  tempTeeth_36_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_36_valueAnother") && !request.getParameterValues("teeth_36_valueAnother").equals("")){
								teeth_36_valueList=request.getParameterValues("teeth_36_valueAnother");
								for(String teeth36Value:teeth_36_valueList){
									tempTeeth_36_value.append(teeth36Value);
									tempTeeth_36_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
							}
							
							if(null != box.getString("dataAnother37") && !box.getString("dataAnother37").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							String[] teeth_37_valueList=null;
							StringBuilder  tempTeeth_37_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_37_valueAnother") && !request.getParameterValues("teeth_37_valueAnother").equals("")){
								teeth_37_valueList=request.getParameterValues("teeth_37_valueAnother");
								for(String teeth37Value:teeth_37_valueList){
									tempTeeth_37_value.append(teeth37Value);
									tempTeeth_37_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
							}
							
							if(null != box.getString("dataAnother38") && !box.getString("dataAnother38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							String[] teeth_38_valueList=null;
							StringBuilder  tempTeeth_38_value=new StringBuilder();
							if(null != request.getParameterValues("teeth_38_valueAnother") && !request.getParameterValues("teeth_38_valueAnother").equals("")){
								teeth_38_valueList=request.getParameterValues("teeth_38_valueAnother");
								for(String teeth38Value:teeth_38_valueList){
									tempTeeth_38_value.append(teeth38Value);
									tempTeeth_38_value.append(",");
								}
								opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
							}
							
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
						
							}
							
												
							if((!box.getString("dataAnotherOne18").equals(""))||(!box.getString("dataAnotherOne17").equals(""))||(!box.getString("dataAnotherOne16").equals(""))||(!box.getString("dataAnotherOne15").equals(""))||
									(!box.getString("dataAnotherOne14").equals(""))||(!box.getString("dataAnotherOne47").equals(""))||(!box.getString("dataAnotherOne31").equals(""))||(!box.getString("dataAnotherOne38").equals(""))||
									(!box.getString("dataAnotherOne21").equals(""))||(!box.getString("dataAnotherOne46").equals(""))||(!box.getString("dataAnotherOne32").equals(""))||
									(!box.getString("dataAnotherOne22").equals(""))||(!box.getString("dataAnotherOne45").equals(""))||(!box.getString("dataAnotherOne33").equals(""))||
									(!box.getString("dataAnotherOne23").equals(""))||(!box.getString("dataAnotherOne44").equals(""))||(!box.getString("dataAnotherOne34").equals(""))||
									(!box.getString("dataAnotherOne24").equals(""))||(!box.getString("dataAnotherOne43").equals(""))||(!box.getString("dataAnotherOne35").equals(""))||
									(!box.getString("dataAnotherOne25").equals(""))||(!box.getString("dataAnotherOne42").equals(""))||(!box.getString("dataAnotherOne36").equals(""))||
									(!box.getString("dataAnotherOne48").equals(""))||(!box.getString("dataAnotherOne41").equals(""))||(!box.getString("dataAnotherOne37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("PDL Space Widened");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setEndodonticsHeader(opdEndodonticsHeader);
										
								// for reading the checkBox value
								if(null != box.getString("dataAnotherOne18") && !box.getString("dataAnotherOne18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								// for dropdown value
								String[] teeth_18_valueList=null;
								StringBuilder  tempTeeth_18_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_18_valueAnotherOne") && !request.getParameterValues("teeth_18_valueAnotherOne").equals("")){
									teeth_18_valueList=request.getParameterValues("teeth_18_valueAnotherOne");
									for(String teeth18Value:teeth_18_valueList){
										tempTeeth_18_value.append(teeth18Value);
										tempTeeth_18_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne17") && !box.getString("dataAnotherOne17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
								String[] teeth_17_valueList=null;
								StringBuilder  tempTeeth_17_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_17_valueAnotherOne") && !request.getParameterValues("teeth_17_valueAnotherOne").equals("")){
									teeth_17_valueList=request.getParameterValues("teeth_17_valueAnotherOne");
									for(String teeth17Value:teeth_17_valueList){
										tempTeeth_17_value.append(teeth17Value);
										tempTeeth_17_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne16") && !box.getString("dataAnotherOne16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								String[] teeth_16_valueList=null;
								StringBuilder  tempTeeth_16_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_16_valueAnotherOne") && !request.getParameterValues("teeth_16_valueAnotherOne").equals("")){
									teeth_16_valueList=request.getParameterValues("teeth_16_valueAnotherOne");
									for(String teeth16Value:teeth_16_valueList){
										tempTeeth_16_value.append(teeth16Value);
										tempTeeth_16_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne15") && !box.getString("dataAnotherOne15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								String[] teeth_15_valueList=null;
								StringBuilder  tempTeeth_15_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_15_valueAnotherOne") && !request.getParameterValues("teeth_15_valueAnotherOne").equals("")){
									teeth_15_valueList = request.getParameterValues("teeth_15_valueAnotherOne");
									for(String teeth15Value : teeth_15_valueList){
										tempTeeth_15_value.append(teeth15Value);
										tempTeeth_15_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne14") && !box.getString("dataAnotherOne14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								String[] teeth_14_valueList=null;
								StringBuilder  tempTeeth_14_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_14_valueAnotherOne") && !request.getParameterValues("teeth_14_valueAnotherOne").equals("")){
									teeth_14_valueList=request.getParameterValues("teeth_14_valueAnotherOne");
									for(String teeth14Value:teeth_14_valueList){
										tempTeeth_14_value.append(teeth14Value);
										tempTeeth_14_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne13") && !box.getString("dataAnotherOne13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								String[] teeth_13_valueList=null;
								StringBuilder  tempTeeth_13_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_13_valueAnotherOne") && !request.getParameterValues("teeth_13_valueAnotherOne").equals("")){
									teeth_13_valueList=request.getParameterValues("teeth_13_valueAnotherOne");
									for(String teeth13Value:teeth_13_valueList){
										tempTeeth_13_value.append(teeth13Value);
										tempTeeth_13_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne12") && !box.getString("dataAnotherOne12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								String[] teeth_12_valueList=null;
								StringBuilder  tempTeeth_12_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_12_valueAnotherOne") && !request.getParameterValues("teeth_12_valueAnotherOne").equals("")){
									teeth_12_valueList=request.getParameterValues("teeth_12_valueAnotherOne");
									for(String teeth12Value:teeth_12_valueList){
										tempTeeth_12_value.append(teeth12Value);
										tempTeeth_12_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne11") && !box.getString("dataAnotherOne11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								String[] teeth_11_valueList=null;
								StringBuilder  tempTeeth_11_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_11_valueAnotherOne") && !request.getParameterValues("teeth_11_valueAnotherOne").equals("")){
									teeth_11_valueList=request.getParameterValues("teeth_11_valueAnotherOne");
									for(String teeth11Value:teeth_11_valueList){
										tempTeeth_11_value.append(teeth11Value);
										tempTeeth_11_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne21") && !box.getString("dataAnotherOne21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								String[] teeth_21_valueList=null;
								StringBuilder  tempTeeth_21_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_21_valueAnotherOne") && !request.getParameterValues("teeth_21_valueAnotherOne").equals("")){
									teeth_21_valueList=request.getParameterValues("teeth_21_valueAnotherOne");
									for(String teeth21Value:teeth_21_valueList){
										tempTeeth_21_value.append(teeth21Value);
										tempTeeth_21_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne22") && !box.getString("dataAnotherOne22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								String[] teeth_22_valueList=null;
								StringBuilder  tempTeeth_22_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_22_valueAnotherOne") && !request.getParameterValues("teeth_22_valueAnotherOne").equals("")){
									teeth_22_valueList=request.getParameterValues("teeth_22_valueAnotherOne");
									for(String teeth22Value:teeth_22_valueList){
										tempTeeth_22_value.append(teeth22Value);
										tempTeeth_22_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne23") && !box.getString("dataAnotherOne23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								String[] teeth_23_valueList=null;
								StringBuilder  tempTeeth_23_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_23_valueAnotherOne") && !request.getParameterValues("teeth_23_valueAnotherOne").equals("")){
									teeth_23_valueList=request.getParameterValues("teeth_23_valueAnotherOne");
									for(String teeth23Value:teeth_23_valueList){
										tempTeeth_23_value.append(teeth23Value);
										tempTeeth_23_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne24") && !box.getString("dataAnotherOne24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								String[] teeth_24_valueList=null;
								StringBuilder  tempTeeth_24_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_24_valueAnotherOne") && !request.getParameterValues("teeth_24_valueAnotherOne").equals("")){
									teeth_24_valueList=request.getParameterValues("teeth_24_valueAnotherOne");
									for(String teeth24Value:teeth_24_valueList){
										tempTeeth_24_value.append(teeth24Value);
										tempTeeth_24_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne25") && !box.getString("dataAnotherOne25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								String[] teeth_25_valueList=null;
								StringBuilder  tempTeeth_25_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_25_valueAnotherOne") && !request.getParameterValues("teeth_25_valueAnotherOne").equals("")){
									teeth_25_valueList=request.getParameterValues("teeth_25_valueAnotherOne");
									for(String teeth25Value:teeth_25_valueList){
										tempTeeth_25_value.append(teeth25Value);
										tempTeeth_25_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne26") && !box.getString("dataAnotherOne26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								String[] teeth_26_valueList=null;
								StringBuilder  tempTeeth_26_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_26_valueAnotherOne") && !request.getParameterValues("teeth_26_valueAnotherOne").equals("")){
									teeth_26_valueList=request.getParameterValues("teeth_26_valueAnotherOne");
									for(String teeth26Value:teeth_26_valueList){
										tempTeeth_26_value.append(teeth26Value);
										tempTeeth_26_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne27") && !box.getString("dataAnotherOne27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								String[] teeth_27_valueList=null;
								StringBuilder  tempTeeth_27_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_27_valueAnotherOne") && !request.getParameterValues("teeth_27_valueAnotherOne").equals("")){
									teeth_27_valueList=request.getParameterValues("teeth_27_valueAnotherOne");
									for(String teeth27Value:teeth_27_valueList){
										tempTeeth_27_value.append(teeth27Value);
										tempTeeth_27_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne28") && !box.getString("dataAnotherOne28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								String[] teeth_28_valueList=null;
								StringBuilder  tempTeeth_28_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_28_valueAnotherOne") && !request.getParameterValues("teeth_28_valueAnotherOne").equals("")){
									teeth_28_valueList=request.getParameterValues("teeth_28_valueAnotherOne");
									for(String teeth28Value:teeth_28_valueList){
										tempTeeth_28_value.append(teeth28Value);
										tempTeeth_28_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne48") && !box.getString("dataAnotherOne48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								// for dropdown value
								String[] teeth_48_valueList=null;
								StringBuilder  tempTeeth_48_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_48_valueAnotherOne") && !request.getParameterValues("teeth_48_valueAnotherOne").equals("")){
									teeth_48_valueList=request.getParameterValues("teeth_48_valueAnotherOne");
									for(String teeth48Value:teeth_48_valueList){
										tempTeeth_48_value.append(teeth48Value);
										tempTeeth_48_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne47") && !box.getString("dataAnotherOne47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								String[] teeth_47_valueList=null;
								StringBuilder  tempTeeth_47_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_47_valueAnotherOne") && !request.getParameterValues("teeth_47_valueAnotherOne").equals("")){
									teeth_47_valueList=request.getParameterValues("teeth_47_valueAnotherOne");
									for(String teeth47Value:teeth_47_valueList){
										tempTeeth_47_value.append(teeth47Value);
										tempTeeth_47_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne46") && !box.getString("dataAnotherOne46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
								String[] teeth_46_valueList=null;
								StringBuilder  tempTeeth_46_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_46_valueAnotherOne") && !request.getParameterValues("teeth_46_valueAnotherOne").equals("")){
									teeth_46_valueList=request.getParameterValues("teeth_46_valueAnotherOne");
									for(String teeth46Value:teeth_46_valueList){
										tempTeeth_46_value.append(teeth46Value);
										tempTeeth_46_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne45") && !box.getString("dataAnotherOne45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								String[] teeth_45_valueList=null;
								StringBuilder  tempTeeth_45_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_45_valueAnotherOne") && !request.getParameterValues("teeth_45_valueAnotherOne").equals("")){
									teeth_45_valueList = request.getParameterValues("teeth_45_valueAnotherOne");
									for(String teeth45Value : teeth_45_valueList){
										tempTeeth_45_value.append(teeth45Value);
										tempTeeth_45_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne44") && !box.getString("dataAnotherOne44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								String[] teeth_44_valueList=null;
								StringBuilder  tempTeeth_44_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_44_valueAnotherOne") && !request.getParameterValues("teeth_44_valueAnotherOne").equals("")){
									teeth_44_valueList=request.getParameterValues("teeth_44_valueAnotherOne");
									for(String teeth44Value:teeth_44_valueList){
										tempTeeth_44_value.append(teeth44Value);
										tempTeeth_44_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne43") && !box.getString("dataAnotherOne43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								String[] teeth_43_valueList=null;
								StringBuilder  tempTeeth_43_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_43_valueAnotherOne") && !request.getParameterValues("teeth_43_valueAnotherOne").equals("")){
									teeth_43_valueList=request.getParameterValues("teeth_43_valueAnotherOne");
									for(String teeth43Value:teeth_43_valueList){
										tempTeeth_43_value.append(teeth43Value);
										tempTeeth_43_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne42") && !box.getString("dataAnotherOne42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								String[] teeth_42_valueList=null;
								StringBuilder  tempTeeth_42_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_42_valueAnotherOne") && !request.getParameterValues("teeth_42_valueAnotherOne").equals("")){
									teeth_42_valueList=request.getParameterValues("teeth_42_valueAnotherOne");
									for(String teeth42Value:teeth_42_valueList){
										tempTeeth_42_value.append(teeth42Value);
										tempTeeth_42_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne41") && !box.getString("dataAnotherOne41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								String[] teeth_41_valueList=null;
								StringBuilder  tempTeeth_41_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_41_valueAnotherOne") && !request.getParameterValues("teeth_41_valueAnotherOne").equals("")){
									teeth_41_valueList=request.getParameterValues("teeth_41_valueAnotherOne");
									for(String teeth41Value:teeth_41_valueList){
										tempTeeth_41_value.append(teeth41Value);
										tempTeeth_41_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne31") && !box.getString("dataAnotherOne31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
								
								String[] teeth_31_valueList=null;
								StringBuilder  tempTeeth_31_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_31_valueAnotherOne") && !request.getParameterValues("teeth_31_valueAnotherOne").equals("")){
									teeth_31_valueList=request.getParameterValues("teeth_31_valueAnotherOne");
									for(String teeth31Value:teeth_31_valueList){
										tempTeeth_31_value.append(teeth31Value);
										tempTeeth_31_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne32") && !box.getString("dataAnotherOne32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
								String[] teeth_32_valueList=null;
								StringBuilder  tempTeeth_32_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_32_valueAnotherOne") && !request.getParameterValues("teeth_32_valueAnotherOne").equals("")){
									teeth_32_valueList=request.getParameterValues("teeth_32_valueAnotherOne");
									for(String teeth32Value:teeth_32_valueList){
										tempTeeth_32_value.append(teeth32Value);
										tempTeeth_32_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne33") && !box.getString("dataAnotherOne33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
								
								String[] teeth_33_valueList=null;
								StringBuilder  tempTeeth_33_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_33_valueAnotherOne") && !request.getParameterValues("teeth_33_valueAnotherOne").equals("")){
									teeth_33_valueList=request.getParameterValues("teeth_33_valueAnotherOne");
									for(String teeth33Value:teeth_33_valueList){
										tempTeeth_33_value.append(teeth33Value);
										tempTeeth_33_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
								}
								
								
								if(null != box.getString("dataAnotherOne34") && !box.getString("dataAnotherOne34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								String[] teeth_34_valueList=null;
								StringBuilder  tempTeeth_34_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_34_valueAnotherOne") && !request.getParameterValues("teeth_34_valueAnotherOne").equals("")){
									teeth_34_valueList=request.getParameterValues("teeth_34_valueAnotherOne");
									for(String teeth34Value:teeth_34_valueList){
										tempTeeth_34_value.append(teeth34Value);
										tempTeeth_34_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne35") && !box.getString("dataAnotherOne35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								String[] teeth_35_valueList=null;
								StringBuilder  tempTeeth_35_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_35_valueAnotherOne") && !request.getParameterValues("teeth_35_valueAnotherOne").equals("")){
									teeth_35_valueList=request.getParameterValues("teeth_35_valueAnotherOne");
									for(String teeth35Value:teeth_35_valueList){
										tempTeeth_35_value.append(teeth35Value);
										tempTeeth_35_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne36") && !box.getString("dataAnotherOne36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								String[] teeth_36_valueList=null;
								StringBuilder  tempTeeth_36_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_36_valueAnotherOne") && !request.getParameterValues("teeth_36_valueAnotherOne").equals("")){
									teeth_36_valueList=request.getParameterValues("teeth_36_valueAnotherOne");
									for(String teeth36Value:teeth_36_valueList){
										tempTeeth_36_value.append(teeth36Value);
										tempTeeth_36_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne37") && !box.getString("dataAnotherOne37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								String[] teeth_37_valueList=null;
								StringBuilder  tempTeeth_37_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_37_valueAnotherOne") && !request.getParameterValues("teeth_37_valueAnotherOne").equals("")){
									teeth_37_valueList=request.getParameterValues("teeth_37_valueAnotherOne");
									for(String teeth37Value:teeth_37_valueList){
										tempTeeth_37_value.append(teeth37Value);
										tempTeeth_37_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
								}
								
								if(null != box.getString("dataAnotherOne38") && !box.getString("dataAnotherOne38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
								
								String[] teeth_38_valueList=null;
								StringBuilder  tempTeeth_38_value=new StringBuilder();
								if(null != request.getParameterValues("teeth_38_valueAnotherOne") && !request.getParameterValues("teeth_38_valueAnotherOne").equals("")){
									teeth_38_valueList=request.getParameterValues("teeth_38_valueAnotherOne");
									for(String teeth38Value:teeth_38_valueList){
										tempTeeth_38_value.append(teeth38Value);
										tempTeeth_38_value.append(",");
									}
									opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
								}
								
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
							//tnx.commit();
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							if((!box.getString("dataAnotherTwo18").equals(""))||(!box.getString("dataAnotherTwo17").equals(""))||(!box.getString("dataAnotherTwo16").equals(""))||(!box.getString("dataAnotherTwo15").equals(""))||
									(!box.getString("dataAnotherTwo14").equals(""))||(!box.getString("dataAnotherTwo47").equals(""))||(!box.getString("dataAnotherTwo31").equals(""))||(!box.getString("dataAnotherTwo38").equals(""))||
									(!box.getString("dataAnotherTwo21").equals(""))||(!box.getString("dataAnotherTwo46").equals(""))||(!box.getString("dataAnotherTwo32").equals(""))||
									(!box.getString("dataAnotherTwo22").equals(""))||(!box.getString("dataAnotherTwo45").equals(""))||(!box.getString("dataAnotherTwo33").equals(""))||
									(!box.getString("dataAnotherTwo23").equals(""))||(!box.getString("dataAnotherTwo44").equals(""))||(!box.getString("dataAnotherTwo34").equals(""))||
									(!box.getString("dataAnotherTwo24").equals(""))||(!box.getString("dataAnotherTwo43").equals(""))||(!box.getString("dataAnotherTwo35").equals(""))||
									(!box.getString("dataAnotherTwo25").equals(""))||(!box.getString("dataAnotherTwo42").equals(""))||(!box.getString("dataAnotherTwo36").equals(""))||
									(!box.getString("dataAnotherTwo48").equals(""))||(!box.getString("dataAnotherTwo41").equals(""))||(!box.getString("dataAnotherTwo37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Sinus Tracing To");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setEndodonticsHeader(opdEndodonticsHeader);
								
									
								
								
								
							
						
						
						
							hbt.save(opdPreAssessmentClinicDental);
							//tnx.commit();
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							

							if((!box.getString("dataAnotherTwo18").equals(""))||(!box.getString("dataAnotherTwo17").equals(""))||(!box.getString("dataAnotherTwo16").equals(""))||(!box.getString("dataAnotherTwo15").equals(""))||
									(!box.getString("dataAnotherTwo14").equals(""))||(!box.getString("dataAnotherTwo47").equals(""))||(!box.getString("dataAnotherTwo31").equals(""))||(!box.getString("dataAnotherTwo38").equals(""))||
									(!box.getString("dataAnotherTwo21").equals(""))||(!box.getString("dataAnotherTwo46").equals(""))||(!box.getString("dataAnotherTwo32").equals(""))||
									(!box.getString("dataAnotherTwo22").equals(""))||(!box.getString("dataAnotherTwo45").equals(""))||(!box.getString("dataAnotherTwo33").equals(""))||
									(!box.getString("dataAnotherTwo23").equals(""))||(!box.getString("dataAnotherTwo44").equals(""))||(!box.getString("dataAnotherTwo34").equals(""))||
									(!box.getString("dataAnotherTwo24").equals(""))||(!box.getString("dataAnotherTwo43").equals(""))||(!box.getString("dataAnotherTwo35").equals(""))||
									(!box.getString("dataAnotherTwo25").equals(""))||(!box.getString("dataAnotherTwo42").equals(""))||(!box.getString("dataAnotherTwo36").equals(""))||
									(!box.getString("dataAnotherTwo48").equals(""))||(!box.getString("dataAnotherTwo41").equals(""))||(!box.getString("dataAnotherTwo37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Sinus Tracing To");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setEndodonticsHeader(opdEndodonticsHeader);
											
								
							
								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherTwo18") && !box.getString("dataAnotherTwo18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								
								
							
								if(null != box.getString("dataAnotherTwo17") && !box.getString("dataAnotherTwo17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
							
								if(null != box.getString("dataAnotherTwo16") && !box.getString("dataAnotherTwo16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								
								if(null != box.getString("dataAnotherTwo15") && !box.getString("dataAnotherTwo15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								
								if(null != box.getString("dataAnotherTwo14") && !box.getString("dataAnotherTwo14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								
								if(null != box.getString("dataAnotherTwo13") && !box.getString("dataAnotherTwo13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								if(null != box.getString("dataAnotherTwo12") && !box.getString("dataAnotherTwo12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								
								
								if(null != box.getString("dataAnotherTwo11") && !box.getString("dataAnotherTwo11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								
								
								if(null != box.getString("dataAnotherTwo21") && !box.getString("dataAnotherTwo21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								
								
								if(null != box.getString("dataAnotherTwo22") && !box.getString("dataAnotherTwo22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								
								if(null != box.getString("dataAnotherTwo23") && !box.getString("dataAnotherTwo23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								
								
								if(null != box.getString("dataAnotherTwo24") && !box.getString("dataAnotherTwo24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								
								if(null != box.getString("dataAnotherTwo25") && !box.getString("dataAnotherTwo25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								
								
								if(null != box.getString("dataAnotherTwo26") && !box.getString("dataAnotherTwo26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								
								if(null != box.getString("dataAnotherTwo27") && !box.getString("dataAnotherTwo27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								
								if(null != box.getString("dataAnotherTwo28") && !box.getString("dataAnotherTwo28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								
								
								if(null != box.getString("dataAnotherTwo48") && !box.getString("dataAnotherTwo48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								
								
								if(null != box.getString("dataAnotherTwo47") && !box.getString("dataAnotherTwo47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								
								if(null != box.getString("dataAnotherTwo46") && !box.getString("dataAnotherTwo46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
							
								if(null != box.getString("dataAnotherTwo45") && !box.getString("dataAnotherTwo45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								if(null != box.getString("dataAnotherTwo44") && !box.getString("dataAnotherTwo44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								
								
								if(null != box.getString("dataAnotherTwo43") && !box.getString("dataAnotherTwo43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								
								if(null != box.getString("dataAnotherTwo42") && !box.getString("dataAnotherTwo42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								
								
								if(null != box.getString("dataAnotherTwo41") && !box.getString("dataAnotherTwo41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								
								if(null != box.getString("dataAnotherTwo31") && !box.getString("dataAnotherTwo31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
							
								
								if(null != box.getString("dataAnotherTwo32") && !box.getString("dataAnotherTwo32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
							
								
								if(null != box.getString("dataAnotherTwo33") && !box.getString("dataAnotherTwo33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
							
								
								
								if(null != box.getString("dataAnotherTwo34") && !box.getString("dataAnotherTwo34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								
								
								if(null != box.getString("dataAnotherTwo35") && !box.getString("dataAnotherTwo35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								
								if(null != box.getString("dataAnotherTwo36") && !box.getString("dataAnotherTwo36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								
								if(null != box.getString("dataAnotherTwo37") && !box.getString("dataAnotherTwo37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								
								
								if(null != box.getString("dataAnotherTwo38") && !box.getString("dataAnotherTwo38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
															
							
							
												
						
						
								
								if(null != box.getString("sinusTracingDataValue18") && !box.getString("sinusTracingDataValue18").equals(""))
									opdPreAssessmentClinicDental.setTeeth17Value(box.getString("sinusTracingDataValue17"));
								
								
								
							
								if(null != box.getString("sinusTracingDataValue17") && !box.getString("sinusTracingDataValue17").equals(""))
									opdPreAssessmentClinicDental.setTeeth18Value(box.getString("sinusTracingDataValue18"));
								
							
								if(null != box.getString("sinusTracingDataValue16") && !box.getString("sinusTracingDataValue16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16Value(box.getString("sinusTracingDataValue16"));
								
								
								if(null != box.getString("sinusTracingDataValue15") && !box.getString("sinusTracingDataValue15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15Value(box.getString("sinusTracingDataValue15"));

								
								if(null != box.getString("sinusTracingDataValue14") && !box.getString("sinusTracingDataValue14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14Value(box.getString("sinusTracingDataValue14"));
								
								if(null != box.getString("sinusTracingDataValue13") && !box.getString("sinusTracingDataValue13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								if(null != box.getString("sinusTracingDataValue12") && !box.getString("sinusTracingDataValue12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12Value(box.getString("sinusTracingDataValue12"));
								
								
								if(null != box.getString("sinusTracingDataValue11") && !box.getString("sinusTracingDataValue11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11Value(box.getString("sinusTracingDataValue11"));
								
								
								
								if(null != box.getString("sinusTracingDataValue21") && !box.getString("sinusTracingDataValue21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21Value(box.getString("sinusTracingDataValue21"));
								
								
								
								if(null != box.getString("sinusTracingDataValue22") && !box.getString("sinusTracingDataValue22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22Value(box.getString("sinusTracingDataValue22"));
								
								
								if(null != box.getString("sinusTracingDataValue23") && !box.getString("sinusTracingDataValue23").equals(""))
									opdPreAssessmentClinicDental.setTeeth24Value(box.getString("sinusTracingDataValue24"));
								
								
								
								
								
								if(null != box.getString("sinusTracingDataValue24") && !box.getString("sinusTracingDataValue24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24Value(box.getString("sinusTracingDataValue24"));
								
								
								if(null != box.getString("sinusTracingDataValue25") && !box.getString("sinusTracingDataValue25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25Value(box.getString("sinusTracingDataValue25"));
								
								
								if(null != box.getString("sinusTracingDataValue26") && !box.getString("sinusTracingDataValue26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26Value(box.getString("sinusTracingDataValue26"));
								
								
								if(null != box.getString("sinusTracingDataValue27") && !box.getString("sinusTracingDataValue27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27Value(box.getString("sinusTracingDataValue27"));
								
								
								if(null != box.getString("sinusTracingDataValue28") && !box.getString("sinusTracingDataValue28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28Value(box.getString("sinusTracingDataValue28"));
								
								
								
								if(null != box.getString("sinusTracingDataValue48") && !box.getString("sinusTracingDataValue48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48Value(box.getString("sinusTracingDataValue48"));
								
								
								
								if(null != box.getString("sinusTracingDataValue47") && !box.getString("sinusTracingDataValue47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47Value(box.getString("sinusTracingDataValue47"));
								
								
								if(null != box.getString("sinusTracingDataValue46") && !box.getString("sinusTracingDataValue46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46Value(box.getString("sinusTracingDataValue46"));
							
								if(null != box.getString("sinusTracingDataValue45") && !box.getString("sinusTracingDataValue45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45Value(box.getString("sinusTracingDataValue45"));

								if(null != box.getString("sinusTracingDataValue44") && !box.getString("sinusTracingDataValue44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44Value(box.getString("sinusTracingDataValue44"));
								
								
								
								if(null != box.getString("sinusTracingDataValue43") && !box.getString("sinusTracingDataValue43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43Value(box.getString("sinusTracingDataValue18"));
								
								
								if(null != box.getString("sinusTracingDataValue42") && !box.getString("sinusTracingDataValue42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42Value(box.getString("sinusTracingDataValue42"));
								
								
								
								if(null != box.getString("sinusTracingDataValue41") && !box.getString("sinusTracingDataValue41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41Value(box.getString("sinusTracingDataValue41"));
								
								
								if(null != box.getString("sinusTracingDataValue31") && !box.getString("sinusTracingDataValue31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31Value(box.getString("sinusTracingDataValue31"));
							
								
								if(null != box.getString("sinusTracingDataValue32") && !box.getString("sinusTracingDataValue32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32Value(box.getString("sinusTracingDataValue32"));
								
							
								
								if(null != box.getString("sinusTracingDataValue33") && !box.getString("sinusTracingDataValue33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33Value(box.getString("sinusTracingDataValue33"));
							
								
								
								if(null != box.getString("sinusTracingDataValue34") && !box.getString("sinusTracingDataValue34").equals(""))
									opdPreAssessmentClinicDental.setTeeth35Value(box.getString("sinusTracingDataValue34"));
								
								
								
								if(null != box.getString("sinusTracingDataValue35") && !box.getString("sinusTracingDataValue35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35Value(box.getString("sinusTracingDataValue35"));
								
								
								if(null != box.getString("sinusTracingDataValue36") && !box.getString("sinusTracingDataValue36").equals(""))
									opdPreAssessmentClinicDental.setTeeth37Value(box.getString("sinusTracingDataValue36"));
								
								
								if(null != box.getString("sinusTracingDataValue37") && !box.getString("sinusTracingDataValue37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37Value(box.getString("sinusTracingDataValue37"));
								
								
								
								if(null != box.getString("sinusTracingDataValue38") && !box.getString("sinusTracingDataValue38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38Value(box.getString("sinusTracingDataValue38"));
								
						
							hbt.save(opdPreAssessmentClinicDental);
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							if((!box.getString("dataAnotherThree18").equals(""))||(!box.getString("dataAnotherThree17").equals(""))||(!box.getString("dataAnotherThree16").equals(""))||(!box.getString("dataAnotherThree15").equals(""))||
									(!box.getString("dataAnotherThree14").equals(""))||(!box.getString("dataAnotherThree47").equals(""))||(!box.getString("dataAnotherThree31").equals(""))||(!box.getString("dataAnotherThree38").equals(""))||
									(!box.getString("dataAnotherThree21").equals(""))||(!box.getString("dataAnotherThree46").equals(""))||(!box.getString("dataAnotherThree32").equals(""))||
									(!box.getString("dataAnotherThree22").equals(""))||(!box.getString("dataAnotherThree45").equals(""))||(!box.getString("dataAnotherThree33").equals(""))||
									(!box.getString("dataAnotherThree23").equals(""))||(!box.getString("dataAnotherThree44").equals(""))||(!box.getString("dataAnotherThree34").equals(""))||
									(!box.getString("dataAnotherThree24").equals(""))||(!box.getString("dataAnotherThree43").equals(""))||(!box.getString("dataAnotherThree35").equals(""))||
									(!box.getString("dataAnotherThree25").equals(""))||(!box.getString("dataAnotherThree42").equals(""))||(!box.getString("dataAnotherThree36").equals(""))||
									(!box.getString("dataAnotherThree48").equals(""))||(!box.getString("dataAnotherThree41").equals(""))||(!box.getString("dataAnotherThree37").equals("")))
							{
								
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setHin(patient);
								
								
								opdPreAssessmentClinicDental.setVisit(visit);
								
								
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								
								opdPreAssessmentClinicDental.setFlag("Vitality Testing");
								opdPreAssessmentClinicDental.setHospital(masHospital);
								
								opdPreAssessmentClinicDental.setEndodonticsHeader(opdEndodonticsHeader);
											
								
								// for reading the checkBox value
								if(null != box.getString("dataAnotherThree18") && !box.getString("dataAnotherThree18").equals(""))
									opdPreAssessmentClinicDental.setTeeth18("y");
								else
									opdPreAssessmentClinicDental.setTeeth18("n");
								
								
							
								if(null != box.getString("dataAnotherThree17") && !box.getString("dataAnotherThree17").equals(""))
									opdPreAssessmentClinicDental.setTeeth17("y");
								else
									opdPreAssessmentClinicDental.setTeeth17("n");
								
							
								if(null != box.getString("dataAnotherThree16") && !box.getString("dataAnotherThree16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16("y");
								else
									opdPreAssessmentClinicDental.setTeeth16("n");
								
								
								if(null != box.getString("dataAnotherThree15") && !box.getString("dataAnotherThree15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15("y");
								else
									opdPreAssessmentClinicDental.setTeeth15("n");

								
								if(null != box.getString("dataAnotherThree14") && !box.getString("dataAnotherThree14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14("y");
								else
									opdPreAssessmentClinicDental.setTeeth14("n");
								
								
								if(null != box.getString("dataAnotherThree13") && !box.getString("dataAnotherThree13").equals(""))
									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");
								
								if(null != box.getString("dataAnotherThree12") && !box.getString("dataAnotherThree12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12("y");
								else
									opdPreAssessmentClinicDental.setTeeth12("n");
								
								
								
								if(null != box.getString("dataAnotherThree11") && !box.getString("dataAnotherThree11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11("y");
								else
									opdPreAssessmentClinicDental.setTeeth11("n");
								
								
								
								if(null != box.getString("dataAnotherThree21") && !box.getString("dataAnotherThree21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21("y");
								else
									opdPreAssessmentClinicDental.setTeeth21("n");
								
								
								
								if(null != box.getString("dataAnotherThree22") && !box.getString("dataAnotherThree22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22("y");
								else
									opdPreAssessmentClinicDental.setTeeth22("n");
								
								
								if(null != box.getString("dataAnotherThree23") && !box.getString("dataAnotherThree23").equals(""))
									opdPreAssessmentClinicDental.setTeeth23("y");
								else
									opdPreAssessmentClinicDental.setTeeth23("n");
								
								
								
								if(null != box.getString("dataAnotherThree24") && !box.getString("dataAnotherThree24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24("y");
								else
									opdPreAssessmentClinicDental.setTeeth24("n");
								
								
								if(null != box.getString("dataAnotherThree25") && !box.getString("dataAnotherThree25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25("y");
								else
									opdPreAssessmentClinicDental.setTeeth25("n");
								
								
								
								if(null != box.getString("dataAnotherThree26") && !box.getString("dataAnotherThree26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26("y");
								else
									opdPreAssessmentClinicDental.setTeeth26("n");
								
								
								if(null != box.getString("dataAnotherThree27") && !box.getString("dataAnotherThree27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27("y");
								else
									opdPreAssessmentClinicDental.setTeeth27("n");
								
								
								if(null != box.getString("dataAnotherThree28") && !box.getString("dataAnotherThree28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28("y");
								else
									opdPreAssessmentClinicDental.setTeeth28("n");
								
								
								
								if(null != box.getString("dataAnotherThree48") && !box.getString("dataAnotherThree48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48("y");
								else
									opdPreAssessmentClinicDental.setTeeth48("n");
								
								
								
								if(null != box.getString("dataAnotherThree47") && !box.getString("dataAnotherThree47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47("y");
								else
									opdPreAssessmentClinicDental.setTeeth47("n");
								
								
								if(null != box.getString("dataAnotherThree46") && !box.getString("dataAnotherThree46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46("y");
								else
									opdPreAssessmentClinicDental.setTeeth46("n");
								
							
								if(null != box.getString("dataAnotherThree45") && !box.getString("dataAnotherThree45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45("y");
								else
									opdPreAssessmentClinicDental.setTeeth45("n");

								if(null != box.getString("dataAnotherThree44") && !box.getString("dataAnotherThree44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44("y");
								else
									opdPreAssessmentClinicDental.setTeeth44("n");
								
								
								
								if(null != box.getString("dataAnotherThree43") && !box.getString("dataAnotherThree43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43("y");
								else
									opdPreAssessmentClinicDental.setTeeth43("n");
								
								
								if(null != box.getString("dataAnotherThree42") && !box.getString("dataAnotherThree42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42("y");
								else
									opdPreAssessmentClinicDental.setTeeth42("n");
								
								
								
								if(null != box.getString("dataAnotherThree41") && !box.getString("dataAnotherThree41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41("y");
								else
									opdPreAssessmentClinicDental.setTeeth41("n");
								
								
								if(null != box.getString("dataAnotherThree31") && !box.getString("dataAnotherThree31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31("y");
								else
									opdPreAssessmentClinicDental.setTeeth31("n");
							
								
								if(null != box.getString("dataAnotherThree32") && !box.getString("dataAnotherThree32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32("y");
								else
									opdPreAssessmentClinicDental.setTeeth32("n");
								
							
								
								if(null != box.getString("dataAnotherThree33") && !box.getString("dataAnotherThree33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33("y");
								else
									opdPreAssessmentClinicDental.setTeeth33("n");
							
								
								
								if(null != box.getString("dataAnotherThree34") && !box.getString("dataAnotherThree34").equals(""))
									opdPreAssessmentClinicDental.setTeeth34("y");
								else
									opdPreAssessmentClinicDental.setTeeth34("n");
								
								
								
								if(null != box.getString("dataAnotherThree35") && !box.getString("dataAnotherThree35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35("y");
								else
									opdPreAssessmentClinicDental.setTeeth35("n");
								
								
								if(null != box.getString("dataAnotherThree36") && !box.getString("dataAnotherThree36").equals(""))
									opdPreAssessmentClinicDental.setTeeth36("y");
								else
									opdPreAssessmentClinicDental.setTeeth36("n");
								
								
								if(null != box.getString("dataAnotherThree37") && !box.getString("dataAnotherThree37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37("y");
								else
									opdPreAssessmentClinicDental.setTeeth37("n");
								
								
								
								if(null != box.getString("dataAnotherThree38") && !box.getString("dataAnotherThree38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38("y");
								else
									opdPreAssessmentClinicDental.setTeeth38("n");
															
							
							
												

								
								if(null != box.getString("vitalityTestDataValue18") && !box.getString("vitalityTestDataValue18").equals(""))
									opdPreAssessmentClinicDental.setTeeth17Value(box.getString("vitalityTestDataValue17"));
								
								
								
							
								if(null != box.getString("vitalityTestDataValue17") && !box.getString("vitalityTestDataValue17").equals(""))
									opdPreAssessmentClinicDental.setTeeth18Value(box.getString("vitalityTestDataValue18"));
								
							
								if(null != box.getString("vitalityTestDataValue16") && !box.getString("vitalityTestDataValue16").equals(""))
									opdPreAssessmentClinicDental.setTeeth16Value(box.getString("vitalityTestDataValue16"));
								
								
								if(null != box.getString("vitalityTestDataValue15") && !box.getString("vitalityTestDataValue15").equals(""))
									opdPreAssessmentClinicDental.setTeeth15Value(box.getString("vitalityTestDataValue15"));

								
								if(null != box.getString("vitalityTestDataValue14") && !box.getString("vitalityTestDataValue14").equals(""))
									opdPreAssessmentClinicDental.setTeeth14Value(box.getString("vitalityTestDataValue14"));
								
								if(null != box.getString("vitalityTestDataValue13") && !box.getString("vitalityTestDataValue13").equals(""))
/*									opdPreAssessmentClinicDental.setTeeth13("y");
								else
									opdPreAssessmentClinicDental.setTeeth13("n");*/
								opdPreAssessmentClinicDental.setTeeth13Value(box.getString("vitalityTestDataValue13"));
								
								
								if(null != box.getString("vitalityTestDataValue12") && !box.getString("vitalityTestDataValue12").equals(""))
									opdPreAssessmentClinicDental.setTeeth12Value(box.getString("vitalityTestDataValue12"));
								
								
								if(null != box.getString("vitalityTestDataValue11") && !box.getString("vitalityTestDataValue11").equals(""))
									opdPreAssessmentClinicDental.setTeeth11Value(box.getString("vitalityTestDataValue11"));
								
								
								
								if(null != box.getString("vitalityTestDataValue21") && !box.getString("vitalityTestDataValue21").equals(""))
									opdPreAssessmentClinicDental.setTeeth21Value(box.getString("vitalityTestDataValue21"));
								
								
								
								if(null != box.getString("vitalityTestDataValue22") && !box.getString("vitalityTestDataValue22").equals(""))
									opdPreAssessmentClinicDental.setTeeth22Value(box.getString("vitalityTestDataValue22"));
								
								
								if(null != box.getString("vitalityTestDataValue23") && !box.getString("vitalityTestDataValue23").equals(""))
									opdPreAssessmentClinicDental.setTeeth24Value(box.getString("vitalityTestDataValue24"));
								
								
								
								
								
								if(null != box.getString("vitalityTestDataValue24") && !box.getString("vitalityTestDataValue24").equals(""))
									opdPreAssessmentClinicDental.setTeeth24Value(box.getString("vitalityTestDataValue24"));
								
								
								if(null != box.getString("vitalityTestDataValue25") && !box.getString("vitalityTestDataValue25").equals(""))
									opdPreAssessmentClinicDental.setTeeth25Value(box.getString("vitalityTestDataValue25"));
								
								
								if(null != box.getString("vitalityTestDataValue26") && !box.getString("vitalityTestDataValue26").equals(""))
									opdPreAssessmentClinicDental.setTeeth26Value(box.getString("vitalityTestDataValue26"));
								
								
								if(null != box.getString("vitalityTestDataValue27") && !box.getString("vitalityTestDataValue27").equals(""))
									opdPreAssessmentClinicDental.setTeeth27Value(box.getString("vitalityTestDataValue27"));
								
								
								if(null != box.getString("vitalityTestDataValue28") && !box.getString("vitalityTestDataValue28").equals(""))
									opdPreAssessmentClinicDental.setTeeth28Value(box.getString("vitalityTestDataValue28"));
								
								
								
								if(null != box.getString("vitalityTestDataValue48") && !box.getString("vitalityTestDataValue48").equals(""))
									opdPreAssessmentClinicDental.setTeeth48Value(box.getString("vitalityTestDataValue48"));
								
								
								
								if(null != box.getString("vitalityTestDataValue47") && !box.getString("vitalityTestDataValue47").equals(""))
									opdPreAssessmentClinicDental.setTeeth47Value(box.getString("vitalityTestDataValue47"));
								
								
								if(null != box.getString("vitalityTestDataValue46") && !box.getString("vitalityTestDataValue46").equals(""))
									opdPreAssessmentClinicDental.setTeeth46Value(box.getString("vitalityTestDataValue46"));
							
								if(null != box.getString("vitalityTestDataValue45") && !box.getString("vitalityTestDataValue45").equals(""))
									opdPreAssessmentClinicDental.setTeeth45Value(box.getString("vitalityTestDataValue45"));

								if(null != box.getString("vitalityTestDataValue44") && !box.getString("vitalityTestDataValue44").equals(""))
									opdPreAssessmentClinicDental.setTeeth44Value(box.getString("vitalityTestDataValue44"));
								
								
								
								if(null != box.getString("vitalityTestDataValue43") && !box.getString("vitalityTestDataValue43").equals(""))
									opdPreAssessmentClinicDental.setTeeth43Value(box.getString("vitalityTestDataValue18"));
								
								
								if(null != box.getString("vitalityTestDataValue42") && !box.getString("vitalityTestDataValue42").equals(""))
									opdPreAssessmentClinicDental.setTeeth42Value(box.getString("vitalityTestDataValue42"));
								
								
								
								if(null != box.getString("vitalityTestDataValue41") && !box.getString("vitalityTestDataValue41").equals(""))
									opdPreAssessmentClinicDental.setTeeth41Value(box.getString("vitalityTestDataValue41"));
								
								
								if(null != box.getString("vitalityTestDataValue31") && !box.getString("vitalityTestDataValue31").equals(""))
									opdPreAssessmentClinicDental.setTeeth31Value(box.getString("vitalityTestDataValue31"));
							
								
								if(null != box.getString("vitalityTestDataValue32") && !box.getString("vitalityTestDataValue32").equals(""))
									opdPreAssessmentClinicDental.setTeeth32Value(box.getString("vitalityTestDataValue32"));
								
							
								
								if(null != box.getString("vitalityTestDataValue33") && !box.getString("vitalityTestDataValue33").equals(""))
									opdPreAssessmentClinicDental.setTeeth33Value(box.getString("vitalityTestDataValue33"));
							
								
								
								if(null != box.getString("vitalityTestDataValue34") && !box.getString("vitalityTestDataValue34").equals(""))
									opdPreAssessmentClinicDental.setTeeth35Value(box.getString("vitalityTestDataValue34"));
								
								
								
								if(null != box.getString("vitalityTestDataValue35") && !box.getString("vitalityTestDataValue35").equals(""))
									opdPreAssessmentClinicDental.setTeeth35Value(box.getString("vitalityTestDataValue35"));
								
								
								if(null != box.getString("vitalityTestDataValue36") && !box.getString("vitalityTestDataValue36").equals(""))
									opdPreAssessmentClinicDental.setTeeth37Value(box.getString("vitalityTestDataValue36"));
								
								
								if(null != box.getString("vitalityTestDataValue37") && !box.getString("vitalityTestDataValue37").equals(""))
									opdPreAssessmentClinicDental.setTeeth37Value(box.getString("vitalityTestDataValue37"));
								
								
								
								if(null != box.getString("vitalityTestDataValue38") && !box.getString("vitalityTestDataValue38").equals(""))
									opdPreAssessmentClinicDental.setTeeth38Value(box.getString("vitalityTestDataValue38"));
								
								
								
						
							hbt.save(opdPreAssessmentClinicDental);
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
							
							
							
							
							
							tnx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
						return map;
					}

				

				@Override
				public Map<String, Object> saveDiagnosticRecord(Map<String, Object> mapForDS, Box box,HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDS.get("hinId") != null) {
							hinId = (Integer) mapForDS.get("hinId");
						}
						if(mapForDS.get("visitId") != null) {
							visitId = (Integer) mapForDS.get("visitId");
						}
						if(mapForDS.get("departmentId") != null) {
							departmentId = (Integer) mapForDS.get("departmentId");
						}
						if(mapForDS.get("hospitalId") != null) {
							hospitalId = (Integer) mapForDS.get("hospitalId");
						}
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
						
						OpdDiagnosticRecord opdDiagnosticRecord = new OpdDiagnosticRecord();
						Patient patient = new Patient();
						patient.setId(hinId);
						opdDiagnosticRecord.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdDiagnosticRecord.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdDiagnosticRecord.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdDiagnosticRecord.setHospital(masHospital);
						
						
						if(box.getString("medicalHisGenHealth") != null && !box.getString("medicalHisGenHealth").equals("")){
							opdDiagnosticRecord.setMedicalHistory(box.getString("medicalHisGenHealth"));
						}

						if(box.getString("chiefComplaint") != null && !box.getString("chiefComplaint").equals("")){
							opdDiagnosticRecord.setChiefComplaint(box.getString("chiefComplaint"));
						}

						if(box.getString("periodMaxillary") != null && !box.getString("periodMaxillary").equals("")){
							opdDiagnosticRecord.setEdentulousnessMaxillary(box.getString("periodMaxillary"));
						}

						if(box.getString("periodMandibular") != null && !box.getString("periodMandibular").equals("")){
							opdDiagnosticRecord.setEdentulousnessMandibular(box.getString("periodMandibular"));
						}
						if(box.getString("currentMaxillary") != null && !box.getString("currentMaxillary").equals("")){
							opdDiagnosticRecord.setProsthesisMaxillary(box.getString("currentMaxillary"));
						}
						if(box.getString("currentMandibular") != null && !box.getString("currentMandibular").equals("")){
							opdDiagnosticRecord.setProsthesisMandibular(box.getString("currentMandibular"));
						}
						if(box.getString("previousMaxillary") != null && !box.getString("previousMaxillary").equals("")){
							opdDiagnosticRecord.setPreviousMaxillary(box.getString("previousMaxillary"));
						}
						if(box.getString("periodMandibular") != null && !box.getString("periodMandibular").equals("")){
							opdDiagnosticRecord.setPreviousMandibular(box.getString("periodMandibular"));
						}
						if(box.getString("rootStumps") != null && !box.getString("rootStumps").equals("")){
							opdDiagnosticRecord.setRootStumps(box.getString("rootStumps"));
						}
						if(box.getString("rootStumpsValue") != null && !box.getString("rootStumpsValue").equals("")){
							opdDiagnosticRecord.setRootStumpsValue(box.getString("rootStumpsValue"));
						}
						if(box.getString("mobileTeeth") != null && !box.getString("mobileTeeth").equals("")){
							opdDiagnosticRecord.setMobileTeeth(box.getString("mobileTeeth"));
						}
						if(box.getString("mobileTeethValue") != null && !box.getString("mobileTeethValue").equals("")){
							opdDiagnosticRecord.setMobileTeethValue(box.getString("mobileTeethValue"));
						}
						if(box.getString("plaque") != null && !box.getString("plaque").equals("")){
							opdDiagnosticRecord.setPlaque(box.getString("plaque"));
						}
						if(box.getString("plaqueValue") != null && !box.getString("plaqueValue").equals("")){
							opdDiagnosticRecord.setPlaqueValue(box.getString("plaqueValue"));
						}
						if(box.getString("calculus") != null && !box.getString("calculus").equals("")){
							opdDiagnosticRecord.setCalculus(box.getString("calculus"));
						}
						if(box.getString("calculusValue") != null && !box.getString("calculusValue").equals("")){
							opdDiagnosticRecord.setCalculusValue(box.getString("calculusValue"));
						}
						if(box.getString("oralLesions") != null && !box.getString("oralLesions").equals("")){
							opdDiagnosticRecord.setOralLesions(box.getString("oralLesions"));
						}
						if(box.getString("oralLesionsValue") != null && !box.getString("oralLesionsValue").equals("")){
							opdDiagnosticRecord.setOralLesionsValue(box.getString("oralLesionsValue"));
						}
						if(box.getString("defects") != null && !box.getString("defects").equals("")){
							opdDiagnosticRecord.setDefects(box.getString("defects"));
						}
						
						if(box.getString("mouthDefects") != null && !box.getString("mouthDefects").equals("")){
							opdDiagnosticRecord.setMouthOpening(box.getString("mouthDefects"));
						}
						if(box.getString("preprostheticProcedures") != null && !box.getString("preprostheticProcedures").equals("")){
							opdDiagnosticRecord.setPreprostheticProcedures(box.getString("preprostheticProcedures"));
						}
						if(box.getString("preprostheticProceduresValue") != null && !box.getString("preprostheticProceduresValue").equals("")){
							opdDiagnosticRecord.setPreprostheticProceduresValue(box.getString("preprostheticProceduresValue"));
						}
						
						if(box.getString("minorSurgicalProcedures") != null && !box.getString("minorSurgicalProcedures").equals("")){
							opdDiagnosticRecord.setMinorsurgicalProcedures(box.getString("minorSurgicalProcedures"));
						}
						if(box.getString("minorSurgicalProceduresValue") != null && !box.getString("minorSurgicalProceduresValue").equals("")){
							opdDiagnosticRecord.setMinorsurgicalProceduresValue(box.getString("minorSurgicalProceduresValue"));
						}
						
						hbt.save(opdDiagnosticRecord);
						
						map.put("opdDiagnosticRecord",opdDiagnosticRecord);
						//int opdMaxillofacialTraumaHeaderId=opdDiagnosticRecord.getId();
						
						if((!box.getString("missingTeeth18").equals(""))||(!box.getString("missingTeeth17").equals(""))||(!box.getString("missingTeeth16").equals(""))
							||(!box.getString("missingTeeth15").equals(""))|| (!box.getString("missingTeeth14").equals(""))||(!box.getString("missingTeeth13").equals(""))
							||(!box.getString("missingTeeth12").equals("")) ||(!box.getString("missingTeeth11").equals(""))||(!box.getString("missingTeeth21").equals(""))
							||(!box.getString("missingTeeth22").equals("")) ||(!box.getString("missingTeeth23").equals("")) ||(!box.getString("missingTeeth24").equals(""))
							||(!box.getString("missingTeeth25").equals(""))||(!box.getString("missingTeeth26").equals(""))||(!box.getString("missingTeeth27").equals(""))
							|| (!box.getString("missingTeeth28").equals("")) ||(!box.getString("missingTeeth48").equals(""))||(!box.getString("missingTeeth47").equals(""))
							|| (!box.getString("missingTeeth46").equals(""))||(!box.getString("missingTeeth45").equals(""))||(!box.getString("missingTeeth44").equals(""))
							|| (!box.getString("missingTeeth43").equals(""))||(!box.getString("missingTeeth42").equals(""))||(!box.getString("missingTeeth41").equals(""))
							||(!box.getString("missingTeeth31").equals(""))||(!box.getString("missingTeeth32").equals(""))||(!box.getString("missingTeeth33").equals(""))
							||(!box.getString("missingTeeth34").equals(""))||(!box.getString("missingTeeth35").equals(""))||(!box.getString("missingTeeth36").equals(""))
							||(!box.getString("missingTeeth37").equals(""))||(!box.getString("missingTeeth38").equals(""))){
							
							OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
							
							opdPreAssessmentClinicDental.setFlag("Teeth Missing");
							opdPreAssessmentClinicDental.setTemplateName("Diagnostic Record Prosthodontics");
							opdPreAssessmentClinicDental.setHin(patient);
							opdPreAssessmentClinicDental.setVisit(visit);
							opdPreAssessmentClinicDental.setDepartment(masDepartment);
							opdPreAssessmentClinicDental.setHospital(masHospital);
							opdPreAssessmentClinicDental.setDiagnosticRecord(opdDiagnosticRecord);
							
							if(null != box.getString("dentalhiddenValue") && !box.getString("dentalhiddenValue").equals(""))
								opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
							else
								opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
							
							
						// for reading the checkBox value
						if(box.getString("missingTeeth18") != null && !box.getString("missingTeeth18").equals(""))
							opdPreAssessmentClinicDental.setTeeth18("y");
						else
							opdPreAssessmentClinicDental.setTeeth18("n");
						
						
						if(box.getString("missingTeeth17") != null && !box.getString("missingTeeth17").equals(""))
							opdPreAssessmentClinicDental.setTeeth17("y");
						else
							opdPreAssessmentClinicDental.setTeeth17("n");
						
						
						
						if(box.getString("missingTeeth16") != null && !box.getString("missingTeeth16").equals(""))
							opdPreAssessmentClinicDental.setTeeth16("y");
						else
							opdPreAssessmentClinicDental.setTeeth16("n");
						
						
						
						if(box.getString("missingTeeth15") != null && !box.getString("missingTeeth15").equals(""))
							opdPreAssessmentClinicDental.setTeeth15("y");
						else
							opdPreAssessmentClinicDental.setTeeth15("n");

						
						
						if(box.getString("missingTeeth14") != null  && !box.getString("missingTeeth14").equals(""))
							opdPreAssessmentClinicDental.setTeeth14("y");
						else
							opdPreAssessmentClinicDental.setTeeth14("n");
						
						
						if(box.getString("missingTeeth13") != null  && !box.getString("missingTeeth13").equals(""))
							opdPreAssessmentClinicDental.setTeeth13("y");
						else
							opdPreAssessmentClinicDental.setTeeth13("n");
						
						
						
						if(box.getString("missingTeeth12") != null  && !box.getString("missingTeeth12").equals(""))
							opdPreAssessmentClinicDental.setTeeth12("y");
						else
							opdPreAssessmentClinicDental.setTeeth12("n");
						
						
						
						if(box.getString("missingTeeth11") != null  && !box.getString("missingTeeth11").equals(""))
							opdPreAssessmentClinicDental.setTeeth11("y");
						else
							opdPreAssessmentClinicDental.setTeeth11("n");
						
						
						
						if(box.getString("missingTeeth21") != null  && !box.getString("missingTeeth21").equals(""))
							opdPreAssessmentClinicDental.setTeeth21("y");
						else
							opdPreAssessmentClinicDental.setTeeth21("n");
						
						
						
						
						if(box.getString("missingTeeth22") != null && !box.getString("missingTeeth22").equals(""))
							opdPreAssessmentClinicDental.setTeeth22("y");
						else
							opdPreAssessmentClinicDental.setTeeth22("n");
						
						
						
						if(box.getString("missingTeeth23") != null && !box.getString("missingTeeth23").equals(""))
							opdPreAssessmentClinicDental.setTeeth23("y");
						else
							opdPreAssessmentClinicDental.setTeeth23("n");
						
						
						
						
						if(box.getString("missingTeeth24") != null && !box.getString("missingTeeth24").equals(""))
							opdPreAssessmentClinicDental.setTeeth24("y");
						else
							opdPreAssessmentClinicDental.setTeeth24("n");
						
						
						
						if(box.getString("missingTeeth25") != null && !box.getString("missingTeeth25").equals(""))
							opdPreAssessmentClinicDental.setTeeth25("y");
						else
							opdPreAssessmentClinicDental.setTeeth25("n");
						
						
						if(box.getString("missingTeeth26") != null && !box.getString("missingTeeth26").equals(""))
							opdPreAssessmentClinicDental.setTeeth26("y");
						else
							opdPreAssessmentClinicDental.setTeeth26("n");
						
						
						
						if(box.getString("missingTeeth27") != null && !box.getString("missingTeeth27").equals(""))
							opdPreAssessmentClinicDental.setTeeth27("y");
						else
							opdPreAssessmentClinicDental.setTeeth27("n");
						
						
						
						if(null != box.getString("missingTeeth28") && !box.getString("missingTeeth28").equals(""))
							opdPreAssessmentClinicDental.setTeeth28("y");
						else
							opdPreAssessmentClinicDental.setTeeth28("n");
						
					
						
						if(box.getString("missingTeeth48") != null && !box.getString("missingTeeth48").equals(""))
							opdPreAssessmentClinicDental.setTeeth48("y");
						else
							opdPreAssessmentClinicDental.setTeeth48("n");
						
					
						
						if(box.getString("missingTeeth47") != null && !box.getString("missingTeeth47").equals(""))
							opdPreAssessmentClinicDental.setTeeth47("y");
						else
							opdPreAssessmentClinicDental.setTeeth47("n");
						
						
						
						if(box.getString("missingTeeth46") != null && !box.getString("missingTeeth46").equals(""))
							opdPreAssessmentClinicDental.setTeeth46("y");
						else
							opdPreAssessmentClinicDental.setTeeth46("n");
						
						
						if(box.getString("missingTeeth45") != null && !box.getString("missingTeeth45").equals(""))
							opdPreAssessmentClinicDental.setTeeth45("y");
						else
							opdPreAssessmentClinicDental.setTeeth45("n");

					
						if(box.getString("missingTeeth44") != null && !box.getString("missingTeeth44").equals(""))
							opdPreAssessmentClinicDental.setTeeth44("y");
						else
							opdPreAssessmentClinicDental.setTeeth44("n");
						
						
						if(box.getString("missingTeeth43") != null && !box.getString("missingTeeth43").equals(""))
							opdPreAssessmentClinicDental.setTeeth43("y");
						else
							opdPreAssessmentClinicDental.setTeeth43("n");
						
						
						
						if(box.getString("missingTeeth42") != null && !box.getString("missingTeeth42").equals(""))
							opdPreAssessmentClinicDental.setTeeth42("y");
						else
							opdPreAssessmentClinicDental.setTeeth42("n");
						
						
						
						if(box.getString("missingTeeth41") != null && !box.getString("missingTeeth41").equals(""))
							opdPreAssessmentClinicDental.setTeeth41("y");
						else
							opdPreAssessmentClinicDental.setTeeth41("n");
						
						
						
						if(box.getString("missingTeeth31") != null && !box.getString("missingTeeth31").equals(""))
							opdPreAssessmentClinicDental.setTeeth31("y");
						else
							opdPreAssessmentClinicDental.setTeeth31("n");
						
						
						if(box.getString("missingTeeth32") != null && !box.getString("missingTeeth32").equals(""))
							opdPreAssessmentClinicDental.setTeeth32("y");
						else
							opdPreAssessmentClinicDental.setTeeth32("n");
						
						
						
						if(box.getString("missingTeeth33") != null && !box.getString("missingTeeth33").equals(""))
							opdPreAssessmentClinicDental.setTeeth33("y");
						else
							opdPreAssessmentClinicDental.setTeeth33("n");
						
						
						
						
						if(box.getString("missingTeeth34") != null && !box.getString("missingTeeth34").equals(""))
							opdPreAssessmentClinicDental.setTeeth34("y");
						else
							opdPreAssessmentClinicDental.setTeeth34("n");
						
						
						
						if(box.getString("missingTeeth35") != null && !box.getString("missingTeeth35").equals(""))
							opdPreAssessmentClinicDental.setTeeth35("y");
						else
							opdPreAssessmentClinicDental.setTeeth35("n");
						
						
						
						if(box.getString("missingTeeth36") != null && !box.getString("missingTeeth36").equals(""))
							opdPreAssessmentClinicDental.setTeeth36("y");
						else
							opdPreAssessmentClinicDental.setTeeth36("n");
						
						
						
						if(box.getString("missingTeeth37") != null && !box.getString("missingTeeth38").equals(""))
							opdPreAssessmentClinicDental.setTeeth37("y");
						else
							opdPreAssessmentClinicDental.setTeeth37("n");
						
						
						
						if(box.getString("missingTeeth38") != null && !box.getString("missingTeeth38").equals(""))
							opdPreAssessmentClinicDental.setTeeth38("y");
						else
							opdPreAssessmentClinicDental.setTeeth38("n");
						
						hbt.save(opdPreAssessmentClinicDental);
						map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
					}
						
						
				if((!box.getString("cariousTeeth18").equals(""))||(!box.getString("cariousTeeth17").equals(""))||(!box.getString("cariousTeeth16").equals(""))
						||(!box.getString("cariousTeeth15").equals(""))|| (!box.getString("cariousTeeth14").equals(""))||(!box.getString("cariousTeeth13").equals(""))
						||(!box.getString("cariousTeeth12").equals("")) ||(!box.getString("cariousTeeth11").equals(""))||(!box.getString("cariousTeeth21").equals(""))
						||(!box.getString("cariousTeeth22").equals("")) ||(!box.getString("cariousTeeth23").equals("")) ||(!box.getString("cariousTeeth24").equals(""))
						||(!box.getString("cariousTeeth25").equals(""))||(!box.getString("cariousTeeth26").equals(""))||(!box.getString("cariousTeeth27").equals(""))
						|| (!box.getString("cariousTeeth28").equals("")) ||(!box.getString("cariousTeeth48").equals(""))||(!box.getString("cariousTeeth47").equals(""))
						|| (!box.getString("cariousTeeth46").equals(""))||(!box.getString("cariousTeeth45").equals(""))||(!box.getString("cariousTeeth44").equals(""))
						|| (!box.getString("cariousTeeth43").equals(""))||(!box.getString("cariousTeeth42").equals(""))||(!box.getString("cariousTeeth41").equals(""))
						||(!box.getString("cariousTeeth31").equals(""))||(!box.getString("cariousTeeth32").equals(""))||(!box.getString("cariousTeeth33").equals(""))
						||(!box.getString("cariousTeeth34").equals(""))||(!box.getString("cariousTeeth35").equals(""))||(!box.getString("cariousTeeth36").equals(""))
						||(!box.getString("cariousTeeth37").equals(""))||(!box.getString("cariousTeeth38").equals(""))){
						
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setFlag("Carious");
								opdPreAssessmentClinicDental.setTemplateName("Diagnostic Record Prosthodontics");
								opdPreAssessmentClinicDental.setHin(patient);
								opdPreAssessmentClinicDental.setVisit(visit);
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setDiagnosticRecord(opdDiagnosticRecord);
								if(null != box.getString("dentalhiddenValueAnother") && !box.getString("dentalhiddenValueAnother").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
								
							// for reading the checkBox value
							if(box.getString("cariousTeeth18") != null && !box.getString("cariousTeeth18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							
							
							if(box.getString("cariousTeeth17") != null && !box.getString("cariousTeeth17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							
							
							if(box.getString("cariousTeeth16") != null && !box.getString("cariousTeeth16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							
							
							if(box.getString("cariousTeeth15") != null && !box.getString("cariousTeeth15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							
							
							if(box.getString("cariousTeeth14") != null  && !box.getString("cariousTeeth14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							
							if(box.getString("cariousTeeth13") != null  && !box.getString("cariousTeeth13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							
							
							if(box.getString("cariousTeeth12") != null  && !box.getString("cariousTeeth12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							
							
							if(box.getString("cariousTeeth11") != null  && !box.getString("cariousTeeth11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							
							
							if(box.getString("cariousTeeth21") != null  && !box.getString("cariousTeeth21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							
							
							
							if(box.getString("cariousTeeth22") != null && !box.getString("cariousTeeth22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							
							
							if(box.getString("cariousTeeth23") != null && !box.getString("cariousTeeth23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							
							
							
							if(box.getString("cariousTeeth24") != null && !box.getString("cariousTeeth24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							
							
							if(box.getString("cariousTeeth25") != null && !box.getString("cariousTeeth25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							
							if(box.getString("cariousTeeth26") != null && !box.getString("cariousTeeth26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							
							
							if(box.getString("cariousTeeth27") != null && !box.getString("cariousTeeth27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							
							
							if(null != box.getString("cariousTeeth28") && !box.getString("cariousTeeth28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
						
							
							if(box.getString("cariousTeeth48") != null && !box.getString("cariousTeeth48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
						
							
							if(box.getString("cariousTeeth47") != null && !box.getString("cariousTeeth47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							
							
							if(box.getString("cariousTeeth46") != null && !box.getString("cariousTeeth46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							
							if(box.getString("cariousTeeth45") != null && !box.getString("cariousTeeth45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

						
							if(box.getString("cariousTeeth44") != null && !box.getString("cariousTeeth44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							
							if(box.getString("cariousTeeth43") != null && !box.getString("cariousTeeth43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							
							
							if(box.getString("cariousTeeth42") != null && !box.getString("cariousTeeth42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							
							
							if(box.getString("cariousTeeth41") != null && !box.getString("cariousTeeth41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							
							
							if(box.getString("cariousTeeth31") != null && !box.getString("cariousTeeth31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							
							if(box.getString("cariousTeeth32") != null && !box.getString("cariousTeeth32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							
							
							if(box.getString("cariousTeeth33") != null && !box.getString("cariousTeeth33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							if(box.getString("cariousTeeth34") != null && !box.getString("cariousTeeth34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							if(box.getString("cariousTeeth35") != null && !box.getString("cariousTeeth35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							
							if(box.getString("cariousTeeth36") != null && !box.getString("cariousTeeth36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							
							if(box.getString("cariousTeeth37") != null && !box.getString("cariousTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							
							if(box.getString("cariousTeeth38") != null && !box.getString("cariousTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							hbt.save(opdPreAssessmentClinicDental);
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
				
				if((!box.getString("exposedTeeth18").equals(""))||(!box.getString("exposedTeeth17").equals(""))||(!box.getString("exposedTeeth16").equals(""))
						||(!box.getString("exposedTeeth15").equals(""))|| (!box.getString("exposedTeeth14").equals(""))||(!box.getString("exposedTeeth13").equals(""))
						||(!box.getString("exposedTeeth12").equals("")) ||(!box.getString("exposedTeeth11").equals(""))||(!box.getString("exposedTeeth21").equals(""))
						||(!box.getString("exposedTeeth22").equals("")) ||(!box.getString("exposedTeeth23").equals("")) ||(!box.getString("exposedTeeth24").equals(""))
						||(!box.getString("exposedTeeth25").equals(""))||(!box.getString("exposedTeeth26").equals(""))||(!box.getString("exposedTeeth27").equals(""))
						|| (!box.getString("exposedTeeth28").equals("")) ||(!box.getString("exposedTeeth48").equals(""))||(!box.getString("exposedTeeth47").equals(""))
						|| (!box.getString("exposedTeeth46").equals(""))||(!box.getString("exposedTeeth45").equals(""))||(!box.getString("exposedTeeth44").equals(""))
						|| (!box.getString("exposedTeeth43").equals(""))||(!box.getString("exposedTeeth42").equals(""))||(!box.getString("exposedTeeth41").equals(""))
						||(!box.getString("exposedTeeth31").equals(""))||(!box.getString("exposedTeeth32").equals(""))||(!box.getString("exposedTeeth33").equals(""))
						||(!box.getString("exposedTeeth34").equals(""))||(!box.getString("exposedTeeth35").equals(""))||(!box.getString("exposedTeeth36").equals(""))
						||(!box.getString("exposedTeeth37").equals(""))||(!box.getString("exposedTeeth38").equals(""))){
						
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setFlag("Exposed Teeth");
								opdPreAssessmentClinicDental.setTemplateName("Diagnostic Record Prosthodontics");
								opdPreAssessmentClinicDental.setHin(patient);
								opdPreAssessmentClinicDental.setVisit(visit);
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setDiagnosticRecord(opdDiagnosticRecord);
								
								if(null != box.getString("dentalhiddenValueOne") && !box.getString("dentalhiddenValueOne").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
								
								
							// for reading the checkBox value
							if(box.getString("exposedTeeth18") != null && !box.getString("exposedTeeth18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							
							
							if(box.getString("exposedTeeth17") != null && !box.getString("exposedTeeth17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							
							
							if(box.getString("exposedTeeth16") != null && !box.getString("exposedTeeth16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							
							
							if(box.getString("exposedTeeth15") != null && !box.getString("exposedTeeth15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							
							
							if(box.getString("exposedTeeth14") != null  && !box.getString("exposedTeeth14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							
							if(box.getString("exposedTeeth13") != null  && !box.getString("exposedTeeth13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							
							
							if(box.getString("exposedTeeth12") != null  && !box.getString("exposedTeeth12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							
							
							if(box.getString("exposedTeeth11") != null  && !box.getString("exposedTeeth11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							
							
							if(box.getString("exposedTeeth21") != null  && !box.getString("exposedTeeth21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							
							
							
							if(box.getString("exposedTeeth22") != null && !box.getString("exposedTeeth22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							
							
							if(box.getString("exposedTeeth23") != null && !box.getString("exposedTeeth23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							
							
							
							if(box.getString("exposedTeeth24") != null && !box.getString("exposedTeeth24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							
							
							if(box.getString("exposedTeeth25") != null && !box.getString("exposedTeeth25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							
							if(box.getString("exposedTeeth26") != null && !box.getString("exposedTeeth26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							
							
							if(box.getString("exposedTeeth27") != null && !box.getString("exposedTeeth27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							
							
							if(null != box.getString("exposedTeeth28") && !box.getString("exposedTeeth28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
						
							
							if(box.getString("exposedTeeth48") != null && !box.getString("exposedTeeth48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
						
							
							if(box.getString("exposedTeeth47") != null && !box.getString("exposedTeeth47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							
							
							if(box.getString("exposedTeeth46") != null && !box.getString("exposedTeeth46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							
							if(box.getString("exposedTeeth45") != null && !box.getString("exposedTeeth45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

						
							if(box.getString("exposedTeeth44") != null && !box.getString("exposedTeeth44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							
							if(box.getString("exposedTeeth43") != null && !box.getString("exposedTeeth43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							
							
							if(box.getString("exposedTeeth42") != null && !box.getString("exposedTeeth42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							
							
							if(box.getString("exposedTeeth41") != null && !box.getString("exposedTeeth41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							
							
							if(box.getString("exposedTeeth31") != null && !box.getString("exposedTeeth31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							
							if(box.getString("exposedTeeth32") != null && !box.getString("exposedTeeth32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							
							
							if(box.getString("exposedTeeth33") != null && !box.getString("exposedTeeth33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							if(box.getString("exposedTeeth34") != null && !box.getString("exposedTeeth34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							if(box.getString("exposedTeeth35") != null && !box.getString("exposedTeeth35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							
							if(box.getString("exposedTeeth36") != null && !box.getString("exposedTeeth36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							
							if(box.getString("exposedTeeth37") != null && !box.getString("exposedTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							
							if(box.getString("exposedTeeth38") != null && !box.getString("exposedTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							
							hbt.save(opdPreAssessmentClinicDental);
						
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
						tnx.commit();
					}catch(Exception e){
						e.printStackTrace();
					}
					return map;
				}

				@Override
				public Map<String, Object> saveMaxillofacialProsthesis(Map<String, Object> mapForDS, Box box,HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDS.get("hinId") != null) {
							hinId = (Integer) mapForDS.get("hinId");
						}
						if(mapForDS.get("visitId") != null) {
							visitId = (Integer) mapForDS.get("visitId");
						}
						if(mapForDS.get("departmentId") != null) {
							departmentId = (Integer) mapForDS.get("departmentId");
						}
						if(mapForDS.get("hospitalId") != null) {
							hospitalId = (Integer) mapForDS.get("hospitalId");
						}
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
						
						OpdMaxillofacialProsthesis opdMaxillofacialProsthesis = new OpdMaxillofacialProsthesis();
						Patient patient = new Patient();
						patient.setId(hinId);
						opdMaxillofacialProsthesis.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdMaxillofacialProsthesis.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdMaxillofacialProsthesis.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdMaxillofacialProsthesis.setHospital(masHospital);
						
						
						if(box.getString("diabetes") != null && !box.getString("diabetes").equals("")){
							opdMaxillofacialProsthesis.setDiabetes(box.getString("diabetes"));
						}

						if(box.getString("hypertension") != null && !box.getString("hypertension").equals("")){
							opdMaxillofacialProsthesis.setHypertension(box.getString("hypertension"));
						}
						if(box.getString("arthritis") != null && !box.getString("arthritis").equals("")){
							opdMaxillofacialProsthesis.setArthritis(box.getString("arthritis"));
						}
						if(box.getString("asthma") != null && !box.getString("asthma").equals("")){
							opdMaxillofacialProsthesis.setAsthma(box.getString("asthma"));
						}
						if(box.getString("tuberculosis") != null && !box.getString("tuberculosis").equals("")){
							opdMaxillofacialProsthesis.setTuberculosis(box.getString("tuberculosis"));
						}
						if(box.getString("neuromuscularDisorder") != null && !box.getString("neuromuscularDisorder").equals("")){
							opdMaxillofacialProsthesis.setNeuromuscularDisorder(box.getString("neuromuscularDisorder"));
						}
						if(box.getString("cardiovascularDiseases") != null && !box.getString("cardiovascularDiseases").equals("")){
							opdMaxillofacialProsthesis.setCardiovascularDiseases(box.getString("cardiovascularDiseases"));
						}
						if(box.getString("medication") != null && !box.getString("medication").equals("")){
							opdMaxillofacialProsthesis.setMedication(box.getString("medication"));
						}
						/*if(box.getString("historyOfAllergy") != null && !box.getString("historyOfAllergy").equals("")){
							opdMaxillofacialProsthesis.setHistoryOfAllergy(box.getString("historyOfAllergy"));
						}
						if(box.getString("historyOfAllergyValue") != null && !box.getString("historyOfAllergyValue").equals("")){
							opdMaxillofacialProsthesis.setHistoryOfAllergyValue(box.getString("historyOfAllergyValue"));
						}*/
						

						if(null != box.getString("historyOfAllergy") && !box.getString("historyOfAllergy").equals("")){
							opdMaxillofacialProsthesis.setHistoryOfAllergy(box.getString("historyOfAllergy"));
							if(null != box.getString("historyOfAllergyValue") && !box.getString("historyOfAllergyValue").equals(""))
							{
								opdMaxillofacialProsthesis.setHistoryOfAllergyValue(box.getString("historyOfAllergyValue"));
							}}else{
								opdMaxillofacialProsthesis.setHistoryOfAllergy(box.getString("historyOfAllergy"));
								opdMaxillofacialProsthesis.setHistoryOfAllergyValue("");
							}
						if(box.getString("dentalHistory") != null && !box.getString("dentalHistory").equals("")){
							opdMaxillofacialProsthesis.setDentalHistory(box.getString("dentalHistory"));
						}
						if(box.getString("oralHygieneStatus") != null && !box.getString("oralHygieneStatus").equals("")){
							opdMaxillofacialProsthesis.setOralHygieneStatus(box.getString("oralHygieneStatus"));
						}
						if(box.getString("conditionOfPeriodontium") != null && !box.getString("conditionOfPeriodontium").equals("")){
							opdMaxillofacialProsthesis.setConditionOfPeriodontium(box.getString("conditionOfPeriodontium"));
						}
						if(box.getString("colorOfGingiva") != null && !box.getString("colorOfGingiva").equals("")){
							opdMaxillofacialProsthesis.setColorOfGingiva(box.getString("colorOfGingiva"));
						}
						if(box.getString("contourOfGingiva") != null && !box.getString("contourOfGingiva").equals("")){
							opdMaxillofacialProsthesis.setContourOfGingiva(box.getString("contourOfGingiva"));
						}
						if(box.getString("deviation") != null && !box.getString("deviation").equals("")){
							opdMaxillofacialProsthesis.setDeviation(box.getString("deviation"));
						}
						if(box.getString("deviationValue") != null && !box.getString("deviationValue").equals("")){
							opdMaxillofacialProsthesis.setDeviationValue(box.getString("deviationValue"));
						}
						if(box.getString("pain") != null && !box.getString("pain").equals("")){
							opdMaxillofacialProsthesis.setPain(box.getString("pain"));
						}
						if(box.getString("painValue") != null && !box.getString("painValue").equals("")){
							opdMaxillofacialProsthesis.setPainvalue(box.getString("painValue"));
						}
						if(box.getString("clicking") != null && !box.getString("clicking").equals("")){
							opdMaxillofacialProsthesis.setClicking(box.getString("clicking"));
						}
						if(box.getString("clickingValue") != null && !box.getString("clickingValue").equals("")){
							opdMaxillofacialProsthesis.setClickingValue(box.getString("clickingValue"));
						}
						if(box.getString("ear") != null && !box.getString("ear").equals("")){
							opdMaxillofacialProsthesis.setEar(box.getString("ear"));
						}
						if(box.getString("eye") != null && !box.getString("eye").equals("")){
							opdMaxillofacialProsthesis.setEye(box.getString("eye"));
						}
						if(box.getString("nose") != null && !box.getString("nose").equals("")){
							opdMaxillofacialProsthesis.setNose(box.getString("nose"));
						}
						if(box.getString("lips") != null && !box.getString("lips").equals("")){
							opdMaxillofacialProsthesis.setLips(box.getString("lips"));
						}
						if(box.getString("fingers") != null && !box.getString("fingers").equals("")){
							opdMaxillofacialProsthesis.setFingers(box.getString("fingers"));
						}
						if(box.getString("obturator") != null && !box.getString("obturator").equals("")){
							opdMaxillofacialProsthesis.setObturator(box.getString("obturator"));
						}
						if(box.getString("guidingFlange") != null && !box.getString("guidingFlange").equals("")){
							opdMaxillofacialProsthesis.setGuidingFlange(box.getString("guidingFlange"));
						}
						if(box.getString("palatalRamp") != null && !box.getString("palatalRamp").equals("")){
							opdMaxillofacialProsthesis.setPalatalRamp(box.getString("palatalRamp"));
						}
						if(box.getString("presurgicalPlate") != null && !box.getString("presurgicalPlate").equals("")){
							opdMaxillofacialProsthesis.setPresurgicalPlate(box.getString("presurgicalPlate"));
						}
						if(box.getString("acrylicPlug") != null && !box.getString("acrylicPlug").equals("")){
							opdMaxillofacialProsthesis.setAcrylicPlug(box.getString("acrylicPlug"));
						}
						if(box.getString("occlusalSplint") != null && !box.getString("occlusalSplint").equals("")){
							opdMaxillofacialProsthesis.setOcclusalSplint(box.getString("occlusalSplint"));
						}
						if(box.getString("others") != null && !box.getString("others").equals("")){
							opdMaxillofacialProsthesis.setOthers(box.getString("others"));
						}
						hbt.save(opdMaxillofacialProsthesis);
						tnx.commit();
						map.put("opdMaxillofacialProsthesis",opdMaxillofacialProsthesis);
						int opdMaxillofacialTraumaHeaderId=opdMaxillofacialProsthesis.getId();
						
						if((!box.getString("pocketsTeeth18").equals(""))||(!box.getString("pocketsTeeth17").equals(""))||(!box.getString("pocketsTeeth16").equals(""))
								||(!box.getString("pocketsTeeth15").equals(""))|| (!box.getString("pocketsTeeth14").equals(""))||(!box.getString("pocketsTeeth13").equals(""))
								||(!box.getString("pocketsTeeth12").equals("")) ||(!box.getString("pocketsTeeth11").equals(""))||(!box.getString("pocketsTeeth21").equals(""))
								||(!box.getString("pocketsTeeth22").equals("")) ||(!box.getString("pocketsTeeth23").equals("")) ||(!box.getString("pocketsTeeth24").equals(""))
								||(!box.getString("pocketsTeeth25").equals(""))||(!box.getString("pocketsTeeth26").equals(""))||(!box.getString("pocketsTeeth27").equals(""))
								|| (!box.getString("pocketsTeeth28").equals("")) ||(!box.getString("pocketsTeeth48").equals(""))||(!box.getString("pocketsTeeth47").equals(""))
								|| (!box.getString("pocketsTeeth46").equals(""))||(!box.getString("pocketsTeeth45").equals(""))||(!box.getString("pocketsTeeth44").equals(""))
								|| (!box.getString("pocketsTeeth43").equals(""))||(!box.getString("pocketsTeeth42").equals(""))||(!box.getString("pocketsTeeth41").equals(""))
								||(!box.getString("pocketsTeeth31").equals(""))||(!box.getString("pocketsTeeth32").equals(""))||(!box.getString("pocketsTeeth33").equals(""))
								||(!box.getString("pocketsTeeth34").equals(""))||(!box.getString("pocketsTeeth35").equals(""))||(!box.getString("pocketsTeeth36").equals(""))
								||(!box.getString("pocketsTeeth37").equals(""))||(!box.getString("pocketsTeeth38").equals(""))){
								
										OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
										
										opdPreAssessmentClinicDental.setFlag("Pockets");
										opdPreAssessmentClinicDental.setHin(patient);
										opdPreAssessmentClinicDental.setVisit(visit);
										opdPreAssessmentClinicDental.setDepartment(masDepartment);
										opdPreAssessmentClinicDental.setHospital(masHospital);
										opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
										opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
										
										if(null != box.getString("dentalhiddenValue") && !box.getString("dentalhiddenValue").equals(""))
											opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
										else
											opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValue"));
								
										
									// for reading the checkBox value
									if(box.getString("pocketsTeeth18") != null && !box.getString("pocketsTeeth18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									
									
									if(box.getString("pocketsTeeth17") != null && !box.getString("pocketsTeeth17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									
									
									if(box.getString("pocketsTeeth16") != null && !box.getString("pocketsTeeth16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									
									
									if(box.getString("pocketsTeeth15") != null && !box.getString("pocketsTeeth15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									
									
									if(box.getString("pocketsTeeth14") != null  && !box.getString("pocketsTeeth14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									
									if(box.getString("pocketsTeeth13") != null  && !box.getString("pocketsTeeth13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									
									
									if(box.getString("pocketsTeeth12") != null  && !box.getString("pocketsTeeth12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									
									
									if(box.getString("pocketsTeeth11") != null  && !box.getString("pocketsTeeth11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									
									
									if(box.getString("pocketsTeeth21") != null  && !box.getString("pocketsTeeth21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									
									
									
									if(box.getString("pocketsTeeth22") != null && !box.getString("pocketsTeeth22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									
									
									if(box.getString("pocketsTeeth23") != null && !box.getString("pocketsTeeth23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									
									
									
									if(box.getString("pocketsTeeth24") != null && !box.getString("pocketsTeeth24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									
									
									if(box.getString("pocketsTeeth25") != null && !box.getString("pocketsTeeth25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									
									if(box.getString("pocketsTeeth26") != null && !box.getString("pocketsTeeth26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									
									
									if(box.getString("pocketsTeeth27") != null && !box.getString("pocketsTeeth27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									
									
									if(null != box.getString("pocketsTeeth28") && !box.getString("pocketsTeeth28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
								
									
									if(box.getString("pocketsTeeth48") != null && !box.getString("pocketsTeeth48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
								
									
									if(box.getString("pocketsTeeth47") != null && !box.getString("pocketsTeeth47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									
									
									if(box.getString("pocketsTeeth46") != null && !box.getString("pocketsTeeth46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									
									if(box.getString("pocketsTeeth45") != null && !box.getString("pocketsTeeth45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

								
									if(box.getString("pocketsTeeth44") != null && !box.getString("pocketsTeeth44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									
									if(box.getString("pocketsTeeth43") != null && !box.getString("pocketsTeeth43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									
									
									if(box.getString("pocketsTeeth42") != null && !box.getString("pocketsTeeth42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									
									
									if(box.getString("pocketsTeeth41") != null && !box.getString("pocketsTeeth41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									
									
									if(box.getString("pocketsTeeth31") != null && !box.getString("pocketsTeeth31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									
									if(box.getString("pocketsTeeth32") != null && !box.getString("pocketsTeeth32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									
									
									if(box.getString("pocketsTeeth33") != null && !box.getString("pocketsTeeth33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									if(box.getString("pocketsTeeth34") != null && !box.getString("pocketsTeeth34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									if(box.getString("pocketsTeeth35") != null && !box.getString("pocketsTeeth35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									
									if(box.getString("pocketsTeeth36") != null && !box.getString("pocketsTeeth36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									
									if(box.getString("pocketsTeeth37") != null && !box.getString("pocketsTeeth38").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									
									if(box.getString("pocketsTeeth38") != null && !box.getString("pocketsTeeth38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									hbt.save(opdPreAssessmentClinicDental);
									map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
									}
						
						
						if((!box.getString("mobilityTeeth18").equals(""))||(!box.getString("mobilityTeeth17").equals(""))||(!box.getString("mobilityTeeth16").equals(""))
								||(!box.getString("mobilityTeeth15").equals(""))|| (!box.getString("mobilityTeeth14").equals(""))||(!box.getString("mobilityTeeth13").equals(""))
								||(!box.getString("mobilityTeeth12").equals("")) ||(!box.getString("mobilityTeeth11").equals(""))||(!box.getString("mobilityTeeth21").equals(""))
								||(!box.getString("mobilityTeeth22").equals("")) ||(!box.getString("mobilityTeeth23").equals("")) ||(!box.getString("mobilityTeeth24").equals(""))
								||(!box.getString("mobilityTeeth25").equals(""))||(!box.getString("mobilityTeeth26").equals(""))||(!box.getString("mobilityTeeth27").equals(""))
								|| (!box.getString("mobilityTeeth28").equals("")) ||(!box.getString("mobilityTeeth48").equals(""))||(!box.getString("mobilityTeeth47").equals(""))
								|| (!box.getString("mobilityTeeth46").equals(""))||(!box.getString("mobilityTeeth45").equals(""))||(!box.getString("mobilityTeeth44").equals(""))
								|| (!box.getString("mobilityTeeth43").equals(""))||(!box.getString("mobilityTeeth42").equals(""))||(!box.getString("mobilityTeeth41").equals(""))
								||(!box.getString("mobilityTeeth31").equals(""))||(!box.getString("mobilityTeeth32").equals(""))||(!box.getString("mobilityTeeth33").equals(""))
								||(!box.getString("mobilityTeeth34").equals(""))||(!box.getString("mobilityTeeth35").equals(""))||(!box.getString("mobilityTeeth36").equals(""))
								||(!box.getString("mobilityTeeth37").equals(""))||(!box.getString("mobilityTeeth38").equals(""))){
								
										OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
										
										opdPreAssessmentClinicDental.setFlag("Tooth Mobility");
										opdPreAssessmentClinicDental.setHin(patient);
										opdPreAssessmentClinicDental.setVisit(visit);
										opdPreAssessmentClinicDental.setDepartment(masDepartment);
										opdPreAssessmentClinicDental.setHospital(masHospital);
										opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
										opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
										
										if(null != box.getString("dentalhiddenValueTwo") && !box.getString("dentalhiddenValueTwo").equals(""))
											opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueTwo"));
										else
											opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueTwo"));
								
										
									// for reading the checkBox value
									if(box.getString("mobilityTeeth18") != null && !box.getString("mobilityTeeth18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									
									
									if(box.getString("mobilityTeeth17") != null && !box.getString("mobilityTeeth17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									
									
									if(box.getString("mobilityTeeth16") != null && !box.getString("mobilityTeeth16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									
									
									if(box.getString("mobilityTeeth15") != null && !box.getString("mobilityTeeth15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									
									
									if(box.getString("pocketsTeeth") != null  && !box.getString("mobilityTeeth14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									
									if(box.getString("mobilityTeeth13") != null  && !box.getString("mobilityTeeth13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									
									
									if(box.getString("mobilityTeeth12") != null  && !box.getString("mobilityTeeth12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									
									
									if(box.getString("mobilityTeeth11") != null  && !box.getString("mobilityTeeth11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									
									
									if(box.getString("mobilityTeeth21") != null  && !box.getString("mobilityTeeth21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									
									
									
									if(box.getString("mobilityTeeth22") != null && !box.getString("mobilityTeeth22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									
									
									if(box.getString("mobilityTeeth23") != null && !box.getString("mobilityTeeth23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									
									
									
									if(box.getString("mobilityTeeth24") != null && !box.getString("mobilityTeeth24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									
									
									if(box.getString("mobilityTeeth25") != null && !box.getString("mobilityTeeth25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									
									if(box.getString("mobilityTeeth26") != null && !box.getString("mobilityTeeth26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									
									
									if(box.getString("mobilityTeeth27") != null && !box.getString("mobilityTeeth27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									
									
									if(null != box.getString("mobilityTeeth28") && !box.getString("mobilityTeeth28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
								
									
									if(box.getString("mobilityTeeth48") != null && !box.getString("mobilityTeeth48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
								
									
									if(box.getString("mobilityTeeth47") != null && !box.getString("mobilityTeeth47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									
									
									if(box.getString("mobilityTeeth46") != null && !box.getString("mobilityTeeth46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									
									if(box.getString("mobilityTeeth45") != null && !box.getString("mobilityTeeth45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

								
									if(box.getString("mobilityTeeth44") != null && !box.getString("mobilityTeeth44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									
									if(box.getString("mobilityTeeth43") != null && !box.getString("mobilityTeeth43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									
									
									if(box.getString("mobilityTeeth42") != null && !box.getString("mobilityTeeth42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									
									
									if(box.getString("mobilityTeeth41") != null && !box.getString("mobilityTeeth41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									
									
									if(box.getString("mobilityTeeth31") != null && !box.getString("mobilityTeeth31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									
									if(box.getString("mobilityTeeth32") != null && !box.getString("mobilityTeeth32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									
									
									if(box.getString("mobilityTeeth33") != null && !box.getString("mobilityTeeth33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									if(box.getString("mobilityTeeth34") != null && !box.getString("mobilityTeeth34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									if(box.getString("mobilityTeeth35") != null && !box.getString("mobilityTeeth35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									
									if(box.getString("mobilityTeeth36") != null && !box.getString("mobilityTeeth36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									
									if(box.getString("mobilityTeeth37") != null && !box.getString("mobilityTeeth38").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									
									if(box.getString("mobilityTeeth38") != null && !box.getString("mobilityTeeth38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									hbt.save(opdPreAssessmentClinicDental);
									map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
									}
						
						if((!box.getString("cariousTeeth18").equals(""))||(!box.getString("cariousTeeth17").equals(""))||(!box.getString("cariousTeeth16").equals(""))
								||(!box.getString("cariousTeeth15").equals(""))|| (!box.getString("cariousTeeth14").equals(""))||(!box.getString("cariousTeeth13").equals(""))
								||(!box.getString("cariousTeeth12").equals("")) ||(!box.getString("cariousTeeth11").equals(""))||(!box.getString("cariousTeeth21").equals(""))
								||(!box.getString("cariousTeeth22").equals("")) ||(!box.getString("cariousTeeth23").equals("")) ||(!box.getString("cariousTeeth24").equals(""))
								||(!box.getString("cariousTeeth25").equals(""))||(!box.getString("cariousTeeth26").equals(""))||(!box.getString("cariousTeeth27").equals(""))
								|| (!box.getString("cariousTeeth28").equals("")) ||(!box.getString("cariousTeeth48").equals(""))||(!box.getString("cariousTeeth47").equals(""))
								|| (!box.getString("cariousTeeth46").equals(""))||(!box.getString("cariousTeeth45").equals(""))||(!box.getString("cariousTeeth44").equals(""))
								|| (!box.getString("cariousTeeth43").equals(""))||(!box.getString("cariousTeeth42").equals(""))||(!box.getString("cariousTeeth41").equals(""))
								||(!box.getString("cariousTeeth31").equals(""))||(!box.getString("cariousTeeth32").equals(""))||(!box.getString("cariousTeeth33").equals(""))
								||(!box.getString("cariousTeeth34").equals(""))||(!box.getString("cariousTeeth35").equals(""))||(!box.getString("cariousTeeth36").equals(""))
								||(!box.getString("cariousTeeth37").equals(""))||(!box.getString("cariousTeeth38").equals(""))){
								
										OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
										
										opdPreAssessmentClinicDental.setFlag("Carious Lesion");
										opdPreAssessmentClinicDental.setHin(patient);
										opdPreAssessmentClinicDental.setVisit(visit);
										opdPreAssessmentClinicDental.setDepartment(masDepartment);
										opdPreAssessmentClinicDental.setHospital(masHospital);
										opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
										opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
										
										if(null != box.getString("dentalhiddenValueAnother") && !box.getString("dentalhiddenValueAnother").equals(""))
											opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
										else
											opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueAnother"));
								
										
									// for reading the checkBox value
									if(box.getString("cariousTeeth18") != null && !box.getString("cariousTeeth18").equals(""))
										opdPreAssessmentClinicDental.setTeeth18("y");
									else
										opdPreAssessmentClinicDental.setTeeth18("n");
									
									
									if(box.getString("cariousTeeth17") != null && !box.getString("cariousTeeth17").equals(""))
										opdPreAssessmentClinicDental.setTeeth17("y");
									else
										opdPreAssessmentClinicDental.setTeeth17("n");
									
									
									
									if(box.getString("cariousTeeth16") != null && !box.getString("cariousTeeth16").equals(""))
										opdPreAssessmentClinicDental.setTeeth16("y");
									else
										opdPreAssessmentClinicDental.setTeeth16("n");
									
									
									
									if(box.getString("cariousTeeth15") != null && !box.getString("cariousTeeth15").equals(""))
										opdPreAssessmentClinicDental.setTeeth15("y");
									else
										opdPreAssessmentClinicDental.setTeeth15("n");

									
									
									if(box.getString("cariousTeeth14") != null  && !box.getString("cariousTeeth14").equals(""))
										opdPreAssessmentClinicDental.setTeeth14("y");
									else
										opdPreAssessmentClinicDental.setTeeth14("n");
									
									
									if(box.getString("cariousTeeth13") != null  && !box.getString("cariousTeeth13").equals(""))
										opdPreAssessmentClinicDental.setTeeth13("y");
									else
										opdPreAssessmentClinicDental.setTeeth13("n");
									
									
									
									if(box.getString("cariousTeeth12") != null  && !box.getString("cariousTeeth12").equals(""))
										opdPreAssessmentClinicDental.setTeeth12("y");
									else
										opdPreAssessmentClinicDental.setTeeth12("n");
									
									
									
									if(box.getString("cariousTeeth11") != null  && !box.getString("cariousTeeth11").equals(""))
										opdPreAssessmentClinicDental.setTeeth11("y");
									else
										opdPreAssessmentClinicDental.setTeeth11("n");
									
									
									
									if(box.getString("cariousTeeth21") != null  && !box.getString("cariousTeeth21").equals(""))
										opdPreAssessmentClinicDental.setTeeth21("y");
									else
										opdPreAssessmentClinicDental.setTeeth21("n");
									
									
									
									
									if(box.getString("cariousTeeth22") != null && !box.getString("cariousTeeth22").equals(""))
										opdPreAssessmentClinicDental.setTeeth22("y");
									else
										opdPreAssessmentClinicDental.setTeeth22("n");
									
									
									
									if(box.getString("cariousTeeth23") != null && !box.getString("cariousTeeth23").equals(""))
										opdPreAssessmentClinicDental.setTeeth23("y");
									else
										opdPreAssessmentClinicDental.setTeeth23("n");
									
									
									
									
									if(box.getString("cariousTeeth24") != null && !box.getString("cariousTeeth24").equals(""))
										opdPreAssessmentClinicDental.setTeeth24("y");
									else
										opdPreAssessmentClinicDental.setTeeth24("n");
									
									
									
									if(box.getString("cariousTeeth25") != null && !box.getString("cariousTeeth25").equals(""))
										opdPreAssessmentClinicDental.setTeeth25("y");
									else
										opdPreAssessmentClinicDental.setTeeth25("n");
									
									
									if(box.getString("cariousTeeth26") != null && !box.getString("cariousTeeth26").equals(""))
										opdPreAssessmentClinicDental.setTeeth26("y");
									else
										opdPreAssessmentClinicDental.setTeeth26("n");
									
									
									
									if(box.getString("cariousTeeth27") != null && !box.getString("cariousTeeth27").equals(""))
										opdPreAssessmentClinicDental.setTeeth27("y");
									else
										opdPreAssessmentClinicDental.setTeeth27("n");
									
									
									
									if(null != box.getString("cariousTeeth28") && !box.getString("cariousTeeth28").equals(""))
										opdPreAssessmentClinicDental.setTeeth28("y");
									else
										opdPreAssessmentClinicDental.setTeeth28("n");
									
								
									
									if(box.getString("cariousTeeth48") != null && !box.getString("cariousTeeth48").equals(""))
										opdPreAssessmentClinicDental.setTeeth48("y");
									else
										opdPreAssessmentClinicDental.setTeeth48("n");
									
								
									
									if(box.getString("cariousTeeth47") != null && !box.getString("cariousTeeth47").equals(""))
										opdPreAssessmentClinicDental.setTeeth47("y");
									else
										opdPreAssessmentClinicDental.setTeeth47("n");
									
									
									
									if(box.getString("cariousTeeth46") != null && !box.getString("cariousTeeth46").equals(""))
										opdPreAssessmentClinicDental.setTeeth46("y");
									else
										opdPreAssessmentClinicDental.setTeeth46("n");
									
									
									if(box.getString("cariousTeeth45") != null && !box.getString("cariousTeeth45").equals(""))
										opdPreAssessmentClinicDental.setTeeth45("y");
									else
										opdPreAssessmentClinicDental.setTeeth45("n");

								
									if(box.getString("cariousTeeth44") != null && !box.getString("cariousTeeth44").equals(""))
										opdPreAssessmentClinicDental.setTeeth44("y");
									else
										opdPreAssessmentClinicDental.setTeeth44("n");
									
									
									if(box.getString("cariousTeeth43") != null && !box.getString("cariousTeeth43").equals(""))
										opdPreAssessmentClinicDental.setTeeth43("y");
									else
										opdPreAssessmentClinicDental.setTeeth43("n");
									
									
									
									if(box.getString("cariousTeeth42") != null && !box.getString("cariousTeeth42").equals(""))
										opdPreAssessmentClinicDental.setTeeth42("y");
									else
										opdPreAssessmentClinicDental.setTeeth42("n");
									
									
									
									if(box.getString("cariousTeeth41") != null && !box.getString("cariousTeeth41").equals(""))
										opdPreAssessmentClinicDental.setTeeth41("y");
									else
										opdPreAssessmentClinicDental.setTeeth41("n");
									
									
									
									if(box.getString("cariousTeeth31") != null && !box.getString("cariousTeeth31").equals(""))
										opdPreAssessmentClinicDental.setTeeth31("y");
									else
										opdPreAssessmentClinicDental.setTeeth31("n");
									
									
									if(box.getString("cariousTeeth32") != null && !box.getString("cariousTeeth32").equals(""))
										opdPreAssessmentClinicDental.setTeeth32("y");
									else
										opdPreAssessmentClinicDental.setTeeth32("n");
									
									
									
									if(box.getString("cariousTeeth33") != null && !box.getString("cariousTeeth33").equals(""))
										opdPreAssessmentClinicDental.setTeeth33("y");
									else
										opdPreAssessmentClinicDental.setTeeth33("n");
									
									if(box.getString("cariousTeeth34") != null && !box.getString("cariousTeeth34").equals(""))
										opdPreAssessmentClinicDental.setTeeth34("y");
									else
										opdPreAssessmentClinicDental.setTeeth34("n");
									
									if(box.getString("cariousTeeth35") != null && !box.getString("cariousTeeth35").equals(""))
										opdPreAssessmentClinicDental.setTeeth35("y");
									else
										opdPreAssessmentClinicDental.setTeeth35("n");
									
									
									if(box.getString("cariousTeeth36") != null && !box.getString("cariousTeeth36").equals(""))
										opdPreAssessmentClinicDental.setTeeth36("y");
									else
										opdPreAssessmentClinicDental.setTeeth36("n");
									
									
									if(box.getString("cariousTeeth37") != null && !box.getString("cariousTeeth38").equals(""))
										opdPreAssessmentClinicDental.setTeeth37("y");
									else
										opdPreAssessmentClinicDental.setTeeth37("n");
									
									
									if(box.getString("cariousTeeth38") != null && !box.getString("cariousTeeth38").equals(""))
										opdPreAssessmentClinicDental.setTeeth38("y");
									else
										opdPreAssessmentClinicDental.setTeeth38("n");
									
									hbt.save(opdPreAssessmentClinicDental);
									map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
									}
						
						
						if((!box.getString("colourTeeth18").equals(""))||(!box.getString("colourTeeth17").equals(""))||(!box.getString("colourTeeth16").equals(""))
							||(!box.getString("colourTeeth15").equals(""))|| (!box.getString("colourTeeth14").equals(""))||(!box.getString("colourTeeth13").equals(""))
							||(!box.getString("colourTeeth12").equals("")) ||(!box.getString("colourTeeth11").equals(""))||(!box.getString("colourTeeth21").equals(""))
							||(!box.getString("colourTeeth22").equals("")) ||(!box.getString("colourTeeth23").equals("")) ||(!box.getString("colourTeeth24").equals(""))
							||(!box.getString("colourTeeth25").equals(""))||(!box.getString("colourTeeth26").equals(""))||(!box.getString("colourTeeth27").equals(""))
							|| (!box.getString("colourTeeth28").equals("")) ||(!box.getString("colourTeeth48").equals(""))||(!box.getString("colourTeeth47").equals(""))
							|| (!box.getString("colourTeeth46").equals(""))||(!box.getString("colourTeeth45").equals(""))||(!box.getString("colourTeeth44").equals(""))
							|| (!box.getString("colourTeeth43").equals(""))||(!box.getString("colourTeeth42").equals(""))||(!box.getString("colourTeeth41").equals(""))
							||(!box.getString("colourTeeth31").equals(""))||(!box.getString("colourTeeth32").equals(""))||(!box.getString("colourTeeth33").equals(""))
							||(!box.getString("colourTeeth34").equals(""))||(!box.getString("colourTeeth35").equals(""))||(!box.getString("colourTeeth36").equals(""))
							||(!box.getString("colourTeeth37").equals(""))||(!box.getString("colourTeeth38").equals(""))){
							
							OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
							
							opdPreAssessmentClinicDental.setFlag("Colour Variation of Enamel");
							opdPreAssessmentClinicDental.setHin(patient);
							opdPreAssessmentClinicDental.setVisit(visit);
							opdPreAssessmentClinicDental.setDepartment(masDepartment);
							opdPreAssessmentClinicDental.setHospital(masHospital);
							opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
							opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
							
							
							if(null != box.getString("dentalhiddenValueOne") && !box.getString("dentalhiddenValueOne").equals(""))
								opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
							else
								opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueOne"));
					
							
						// for reading the checkBox value
						if(box.getString("colourTeeth18") != null && !box.getString("colourTeeth18").equals(""))
							opdPreAssessmentClinicDental.setTeeth18("y");
						else
							opdPreAssessmentClinicDental.setTeeth18("n");
						
						
						if(box.getString("colourTeeth17") != null && !box.getString("colourTeeth17").equals(""))
							opdPreAssessmentClinicDental.setTeeth17("y");
						else
							opdPreAssessmentClinicDental.setTeeth17("n");
						
						
						
						if(box.getString("colourTeeth16") != null && !box.getString("colourTeeth16").equals(""))
							opdPreAssessmentClinicDental.setTeeth16("y");
						else
							opdPreAssessmentClinicDental.setTeeth16("n");
						
						
						
						if(box.getString("colourTeeth15") != null && !box.getString("colourTeeth15").equals(""))
							opdPreAssessmentClinicDental.setTeeth15("y");
						else
							opdPreAssessmentClinicDental.setTeeth15("n");

						
						
						if(box.getString("colourTeeth14") != null  && !box.getString("colourTeeth14").equals(""))
							opdPreAssessmentClinicDental.setTeeth14("y");
						else
							opdPreAssessmentClinicDental.setTeeth14("n");
						
						
						if(box.getString("colourTeeth13") != null  && !box.getString("colourTeeth13").equals(""))
							opdPreAssessmentClinicDental.setTeeth13("y");
						else
							opdPreAssessmentClinicDental.setTeeth13("n");
						
						
						
						if(box.getString("colourTeeth12") != null  && !box.getString("colourTeeth12").equals(""))
							opdPreAssessmentClinicDental.setTeeth12("y");
						else
							opdPreAssessmentClinicDental.setTeeth12("n");
						
						
						
						if(box.getString("colourTeeth11") != null  && !box.getString("colourTeeth11").equals(""))
							opdPreAssessmentClinicDental.setTeeth11("y");
						else
							opdPreAssessmentClinicDental.setTeeth11("n");
						
						
						
						if(box.getString("colourTeeth21") != null  && !box.getString("colourTeeth21").equals(""))
							opdPreAssessmentClinicDental.setTeeth21("y");
						else
							opdPreAssessmentClinicDental.setTeeth21("n");
						
						
						
						
						if(box.getString("colourTeeth22") != null && !box.getString("colourTeeth22").equals(""))
							opdPreAssessmentClinicDental.setTeeth22("y");
						else
							opdPreAssessmentClinicDental.setTeeth22("n");
						
						
						
						if(box.getString("colourTeeth23") != null && !box.getString("colourTeeth23").equals(""))
							opdPreAssessmentClinicDental.setTeeth23("y");
						else
							opdPreAssessmentClinicDental.setTeeth23("n");
						
						
						
						
						if(box.getString("colourTeeth24") != null && !box.getString("colourTeeth24").equals(""))
							opdPreAssessmentClinicDental.setTeeth24("y");
						else
							opdPreAssessmentClinicDental.setTeeth24("n");
						
						
						
						if(box.getString("colourTeeth25") != null && !box.getString("colourTeeth25").equals(""))
							opdPreAssessmentClinicDental.setTeeth25("y");
						else
							opdPreAssessmentClinicDental.setTeeth25("n");
						
						
						if(box.getString("colourTeeth26") != null && !box.getString("colourTeeth26").equals(""))
							opdPreAssessmentClinicDental.setTeeth26("y");
						else
							opdPreAssessmentClinicDental.setTeeth26("n");
						
						
						
						if(box.getString("colourTeeth27") != null && !box.getString("colourTeeth27").equals(""))
							opdPreAssessmentClinicDental.setTeeth27("y");
						else
							opdPreAssessmentClinicDental.setTeeth27("n");
						
						
						
						if(null != box.getString("colourTeeth28") && !box.getString("colourTeeth28").equals(""))
							opdPreAssessmentClinicDental.setTeeth28("y");
						else
							opdPreAssessmentClinicDental.setTeeth28("n");
						
					
						
						if(box.getString("colourTeeth48") != null && !box.getString("colourTeeth48").equals(""))
							opdPreAssessmentClinicDental.setTeeth48("y");
						else
							opdPreAssessmentClinicDental.setTeeth48("n");
						
					
						
						if(box.getString("colourTeeth47") != null && !box.getString("colourTeeth47").equals(""))
							opdPreAssessmentClinicDental.setTeeth47("y");
						else
							opdPreAssessmentClinicDental.setTeeth47("n");
						
						
						
						if(box.getString("colourTeeth46") != null && !box.getString("colourTeeth46").equals(""))
							opdPreAssessmentClinicDental.setTeeth46("y");
						else
							opdPreAssessmentClinicDental.setTeeth46("n");
						
						
						if(box.getString("colourTeeth45") != null && !box.getString("colourTeeth45").equals(""))
							opdPreAssessmentClinicDental.setTeeth45("y");
						else
							opdPreAssessmentClinicDental.setTeeth45("n");

					
						if(box.getString("colourTeeth44") != null && !box.getString("colourTeeth44").equals(""))
							opdPreAssessmentClinicDental.setTeeth44("y");
						else
							opdPreAssessmentClinicDental.setTeeth44("n");
						
						
						if(box.getString("colourTeeth43") != null && !box.getString("colourTeeth43").equals(""))
							opdPreAssessmentClinicDental.setTeeth43("y");
						else
							opdPreAssessmentClinicDental.setTeeth43("n");
						
						
						
						if(box.getString("colourTeeth42") != null && !box.getString("colourTeeth42").equals(""))
							opdPreAssessmentClinicDental.setTeeth42("y");
						else
							opdPreAssessmentClinicDental.setTeeth42("n");
						
						
						
						if(box.getString("colourTeeth41") != null && !box.getString("colourTeeth41").equals(""))
							opdPreAssessmentClinicDental.setTeeth41("y");
						else
							opdPreAssessmentClinicDental.setTeeth41("n");
						
						
						
						if(box.getString("colourTeeth31") != null && !box.getString("colourTeeth31").equals(""))
							opdPreAssessmentClinicDental.setTeeth31("y");
						else
							opdPreAssessmentClinicDental.setTeeth31("n");
						
						
						if(box.getString("colourTeeth32") != null && !box.getString("colourTeeth32").equals(""))
							opdPreAssessmentClinicDental.setTeeth32("y");
						else
							opdPreAssessmentClinicDental.setTeeth32("n");
						
						
						
						if(box.getString("colourTeeth33") != null && !box.getString("colourTeeth33").equals(""))
							opdPreAssessmentClinicDental.setTeeth33("y");
						else
							opdPreAssessmentClinicDental.setTeeth33("n");
						
						
						
						
						if(box.getString("colourTeeth34") != null && !box.getString("colourTeeth34").equals(""))
							opdPreAssessmentClinicDental.setTeeth34("y");
						else
							opdPreAssessmentClinicDental.setTeeth34("n");
						
						
						
						if(box.getString("colourTeeth35") != null && !box.getString("colourTeeth35").equals(""))
							opdPreAssessmentClinicDental.setTeeth35("y");
						else
							opdPreAssessmentClinicDental.setTeeth35("n");
						
						
						
						if(box.getString("colourTeeth36") != null && !box.getString("colourTeeth36").equals(""))
							opdPreAssessmentClinicDental.setTeeth36("y");
						else
							opdPreAssessmentClinicDental.setTeeth36("n");
						
						
						
						if(box.getString("colourTeeth37") != null && !box.getString("colourTeeth38").equals(""))
							opdPreAssessmentClinicDental.setTeeth37("y");
						else
							opdPreAssessmentClinicDental.setTeeth37("n");
						
						
						
						if(box.getString("colourTeeth38") != null && !box.getString("colourTeeth38").equals(""))
							opdPreAssessmentClinicDental.setTeeth38("y");
						else
							opdPreAssessmentClinicDental.setTeeth38("n");
						
						hbt.save(opdPreAssessmentClinicDental);
						map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
					}
						
						
				if((!box.getString("evidenceTeeth18").equals(""))||(!box.getString("evidenceTeeth17").equals(""))||(!box.getString("evidenceTeeth16").equals(""))
						||(!box.getString("evidenceTeeth15").equals(""))|| (!box.getString("evidenceTeeth14").equals(""))||(!box.getString("evidenceTeeth13").equals(""))
						||(!box.getString("evidenceTeeth12").equals("")) ||(!box.getString("evidenceTeeth11").equals(""))||(!box.getString("evidenceTeeth21").equals(""))
						||(!box.getString("evidenceTeeth22").equals("")) ||(!box.getString("evidenceTeeth23").equals("")) ||(!box.getString("evidenceTeeth24").equals(""))
						||(!box.getString("evidenceTeeth25").equals(""))||(!box.getString("evidenceTeeth26").equals(""))||(!box.getString("evidenceTeeth27").equals(""))
						|| (!box.getString("evidenceTeeth28").equals("")) ||(!box.getString("evidenceTeeth48").equals(""))||(!box.getString("evidenceTeeth47").equals(""))
						|| (!box.getString("evidenceTeeth46").equals(""))||(!box.getString("evidenceTeeth45").equals(""))||(!box.getString("evidenceTeeth44").equals(""))
						|| (!box.getString("evidenceTeeth43").equals(""))||(!box.getString("evidenceTeeth42").equals(""))||(!box.getString("evidenceTeeth41").equals(""))
						||(!box.getString("evidenceTeeth31").equals(""))||(!box.getString("evidenceTeeth32").equals(""))||(!box.getString("evidenceTeeth33").equals(""))
						||(!box.getString("evidenceTeeth34").equals(""))||(!box.getString("evidenceTeeth35").equals(""))||(!box.getString("evidenceTeeth36").equals(""))
						||(!box.getString("evidenceTeeth37").equals(""))||(!box.getString("evidenceTeeth38").equals(""))){
						
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setFlag("Evidence of Erosion");
								opdPreAssessmentClinicDental.setHin(patient);
								opdPreAssessmentClinicDental.setVisit(visit);
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
								opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
								
								if(null != box.getString("dentalhiddenValueThree") && !box.getString("dentalhiddenValueThree").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueThree"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueThree"));
						
								
							// for reading the checkBox value
							if(box.getString("evidenceTeeth18") != null && !box.getString("evidenceTeeth18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							
							
							if(box.getString("evidenceTeeth17") != null && !box.getString("evidenceTeeth17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							
							
							if(box.getString("evidenceTeeth16") != null && !box.getString("evidenceTeeth16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							
							
							if(box.getString("evidenceTeeth15") != null && !box.getString("evidenceTeeth15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							
							
							if(box.getString("evidenceTeeth14") != null  && !box.getString("evidenceTeeth14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							
							if(box.getString("evidenceTeeth13") != null  && !box.getString("evidenceTeeth13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							
							
							if(box.getString("evidenceTeeth12") != null  && !box.getString("evidenceTeeth12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							
							
							if(box.getString("evidenceTeeth11") != null  && !box.getString("evidenceTeeth11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							
							
							if(box.getString("evidenceTeeth21") != null  && !box.getString("evidenceTeeth21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							
							
							
							if(box.getString("evidenceTeeth22") != null && !box.getString("evidenceTeeth22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							
							
							if(box.getString("evidenceTeeth23") != null && !box.getString("evidenceTeeth23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							
							
							
							if(box.getString("evidenceTeeth24") != null && !box.getString("evidenceTeeth24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							
							
							if(box.getString("evidenceTeeth25") != null && !box.getString("evidenceTeeth25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							
							if(box.getString("evidenceTeeth26") != null && !box.getString("evidenceTeeth26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							
							
							if(box.getString("evidenceTeeth27") != null && !box.getString("evidenceTeeth27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							
							
							if(null != box.getString("evidenceTeeth28") && !box.getString("evidenceTeeth28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
						
							
							if(box.getString("evidenceTeeth48") != null && !box.getString("evidenceTeeth48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
						
							
							if(box.getString("evidenceTeeth47") != null && !box.getString("evidenceTeeth47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							
							
							if(box.getString("evidenceTeeth46") != null && !box.getString("evidenceTeeth46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							
							if(box.getString("evidenceTeeth45") != null && !box.getString("evidenceTeeth45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

						
							if(box.getString("evidenceTeeth44") != null && !box.getString("evidenceTeeth44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							
							if(box.getString("evidenceTeeth43") != null && !box.getString("evidenceTeeth43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							
							
							if(box.getString("evidenceTeeth42") != null && !box.getString("evidenceTeeth42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							
							
							if(box.getString("evidenceTeeth41") != null && !box.getString("evidenceTeeth41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							
							
							if(box.getString("evidenceTeeth31") != null && !box.getString("evidenceTeeth31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							
							if(box.getString("evidenceTeeth32") != null && !box.getString("evidenceTeeth32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							
							
							if(box.getString("evidenceTeeth33") != null && !box.getString("evidenceTeeth33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							if(box.getString("evidenceTeeth34") != null && !box.getString("evidenceTeeth34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							if(box.getString("evidenceTeeth35") != null && !box.getString("evidenceTeeth35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							
							if(box.getString("evidenceTeeth36") != null && !box.getString("evidenceTeeth36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							
							if(box.getString("evidenceTeeth37") != null && !box.getString("evidenceTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							
							if(box.getString("evidenceTeeth38") != null && !box.getString("evidenceTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							hbt.save(opdPreAssessmentClinicDental);
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
				
				if((!box.getString("abrasionTeeth18").equals(""))||(!box.getString("abrasionTeeth17").equals(""))||(!box.getString("abrasionTeeth16").equals(""))
						||(!box.getString("abrasionTeeth15").equals(""))|| (!box.getString("abrasionTeeth14").equals(""))||(!box.getString("abrasionTeeth13").equals(""))
						||(!box.getString("abrasionTeeth12").equals("")) ||(!box.getString("abrasionTeeth11").equals(""))||(!box.getString("abrasionTeeth21").equals(""))
						||(!box.getString("abrasionTeeth22").equals("")) ||(!box.getString("abrasionTeeth23").equals("")) ||(!box.getString("abrasionTeeth24").equals(""))
						||(!box.getString("abrasionTeeth25").equals(""))||(!box.getString("abrasionTeeth26").equals(""))||(!box.getString("abrasionTeeth27").equals(""))
						|| (!box.getString("abrasionTeeth28").equals("")) ||(!box.getString("abrasionTeeth48").equals(""))||(!box.getString("abrasionTeeth47").equals(""))
						|| (!box.getString("abrasionTeeth46").equals(""))||(!box.getString("abrasionTeeth45").equals(""))||(!box.getString("abrasionTeeth44").equals(""))
						|| (!box.getString("abrasionTeeth43").equals(""))||(!box.getString("abrasionTeeth42").equals(""))||(!box.getString("abrasionTeeth41").equals(""))
						||(!box.getString("abrasionTeeth31").equals(""))||(!box.getString("abrasionTeeth32").equals(""))||(!box.getString("abrasionTeeth33").equals(""))
						||(!box.getString("abrasionTeeth34").equals(""))||(!box.getString("abrasionTeeth35").equals(""))||(!box.getString("abrasionTeeth36").equals(""))
						||(!box.getString("abrasionTeeth37").equals(""))||(!box.getString("abrasionTeeth38").equals(""))){
						
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setFlag("Areas of Abrasion");
								opdPreAssessmentClinicDental.setHin(patient);
								opdPreAssessmentClinicDental.setVisit(visit);
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
								opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
								
								if(null != box.getString("dentalhiddenValueFour") && !box.getString("dentalhiddenValueFour").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFour"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFour"));
						
								
							// for reading the checkBox value
							if(box.getString("abrasionTeeth18") != null && !box.getString("abrasionTeeth18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							
							
							if(box.getString("abrasionTeeth17") != null && !box.getString("abrasionTeeth17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							
							
							if(box.getString("abrasionTeeth16") != null && !box.getString("abrasionTeeth16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							
							
							if(box.getString("abrasionTeeth15") != null && !box.getString("abrasionTeeth15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							
							
							if(box.getString("abrasionTeeth14") != null  && !box.getString("abrasionTeeth14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							
							if(box.getString("abrasionTeeth13") != null  && !box.getString("abrasionTeeth13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							
							
							if(box.getString("abrasionTeeth12") != null  && !box.getString("abrasionTeeth12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							
							
							if(box.getString("abrasionTeeth11") != null  && !box.getString("abrasionTeeth11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							
							
							if(box.getString("abrasionTeeth21") != null  && !box.getString("abrasionTeeth21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							
							
							
							if(box.getString("abrasionTeeth22") != null && !box.getString("abrasionTeeth22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							
							
							if(box.getString("abrasionTeeth23") != null && !box.getString("abrasionTeeth23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							
							
							
							if(box.getString("abrasionTeeth24") != null && !box.getString("abrasionTeeth24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							
							
							if(box.getString("abrasionTeeth25") != null && !box.getString("abrasionTeeth25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							
							if(box.getString("abrasionTeeth26") != null && !box.getString("abrasionTeeth26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							
							
							if(box.getString("abrasionTeeth27") != null && !box.getString("abrasionTeeth27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							
							
							if(null != box.getString("abrasionTeeth28") && !box.getString("abrasionTeeth28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
						
							
							if(box.getString("abrasionTeeth48") != null && !box.getString("abrasionTeeth48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
						
							
							if(box.getString("abrasionTeeth47") != null && !box.getString("abrasionTeeth47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							
							
							if(box.getString("abrasionTeeth46") != null && !box.getString("abrasionTeeth46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							
							if(box.getString("abrasionTeeth45") != null && !box.getString("abrasionTeeth45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

						
							if(box.getString("abrasionTeeth44") != null && !box.getString("abrasionTeeth44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							
							if(box.getString("abrasionTeeth43") != null && !box.getString("abrasionTeeth43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							
							
							if(box.getString("abrasionTeeth42") != null && !box.getString("abrasionTeeth42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							
							
							if(box.getString("abrasionTeeth41") != null && !box.getString("abrasionTeeth41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							
							
							if(box.getString("abrasionTeeth31") != null && !box.getString("abrasionTeeth31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							
							if(box.getString("abrasionTeeth32") != null && !box.getString("abrasionTeeth32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							
							
							if(box.getString("abrasionTeeth33") != null && !box.getString("abrasionTeeth33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							if(box.getString("abrasionTeeth34") != null && !box.getString("abrasionTeeth34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							if(box.getString("abrasionTeeth35") != null && !box.getString("abrasionTeeth35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							
							if(box.getString("abrasionTeeth36") != null && !box.getString("abrasionTeeth36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							
							if(box.getString("abrasionTeeth37") != null && !box.getString("abrasionTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							
							if(box.getString("abrasionTeeth38") != null && !box.getString("abrasionTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							
							hbt.save(opdPreAssessmentClinicDental);
						
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
				
				if((!box.getString("occlusalTeeth18").equals(""))||(!box.getString("occlusalTeeth17").equals(""))||(!box.getString("occlusalTeeth16").equals(""))
						||(!box.getString("occlusalTeeth15").equals(""))|| (!box.getString("occlusalTeeth14").equals(""))||(!box.getString("occlusalTeeth13").equals(""))
						||(!box.getString("occlusalTeeth12").equals("")) ||(!box.getString("occlusalTeeth11").equals(""))||(!box.getString("occlusalTeeth21").equals(""))
						||(!box.getString("occlusalTeeth22").equals("")) ||(!box.getString("occlusalTeeth23").equals("")) ||(!box.getString("occlusalTeeth24").equals(""))
						||(!box.getString("occlusalTeeth25").equals(""))||(!box.getString("occlusalTeeth26").equals(""))||(!box.getString("occlusalTeeth27").equals(""))
						|| (!box.getString("occlusalTeeth28").equals("")) ||(!box.getString("occlusalTeeth48").equals(""))||(!box.getString("occlusalTeeth47").equals(""))
						|| (!box.getString("occlusalTeeth46").equals(""))||(!box.getString("occlusalTeeth45").equals(""))||(!box.getString("occlusalTeeth44").equals(""))
						|| (!box.getString("occlusalTeeth43").equals(""))||(!box.getString("occlusalTeeth42").equals(""))||(!box.getString("occlusalTeeth41").equals(""))
						||(!box.getString("occlusalTeeth31").equals(""))||(!box.getString("occlusalTeeth32").equals(""))||(!box.getString("occlusalTeeth33").equals(""))
						||(!box.getString("occlusalTeeth34").equals(""))||(!box.getString("occlusalTeeth35").equals(""))||(!box.getString("occlusalTeeth36").equals(""))
						||(!box.getString("occlusalTeeth37").equals(""))||(!box.getString("occlusalTeeth38").equals(""))){
						
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setFlag("Areas of Occlusal Wear");
								opdPreAssessmentClinicDental.setHin(patient);
								opdPreAssessmentClinicDental.setVisit(visit);
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
								opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
								
								if(null != box.getString("dentalhiddenValueFive") && !box.getString("dentalhiddenValueFive").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFive"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueFive"));
						
							// for reading the checkBox value
							if(box.getString("occlusalTeeth18") != null && !box.getString("occlusalTeeth18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							
							
							if(box.getString("occlusalTeeth17") != null && !box.getString("occlusalTeeth17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							
							
							if(box.getString("occlusalTeeth16") != null && !box.getString("occlusalTeeth16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							
							
							if(box.getString("occlusalTeeth15") != null && !box.getString("occlusalTeeth15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							
							
							if(box.getString("occlusalTeeth14") != null  && !box.getString("occlusalTeeth14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							
							if(box.getString("occlusalTeeth13") != null  && !box.getString("occlusalTeeth13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							
							
							if(box.getString("occlusalTeeth12") != null  && !box.getString("occlusalTeeth12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							
							
							if(box.getString("occlusalTeeth11") != null  && !box.getString("occlusalTeeth11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							
							
							if(box.getString("occlusalTeeth21") != null  && !box.getString("occlusalTeeth21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							
							
							
							if(box.getString("occlusalTeeth22") != null && !box.getString("occlusalTeeth22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							
							
							if(box.getString("occlusalTeeth23") != null && !box.getString("occlusalTeeth23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							
							
							
							if(box.getString("occlusalTeeth24") != null && !box.getString("occlusalTeeth24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							
							
							if(box.getString("occlusalTeeth25") != null && !box.getString("occlusalTeeth25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							
							if(box.getString("occlusalTeeth26") != null && !box.getString("occlusalTeeth26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							
							
							if(box.getString("occlusalTeeth27") != null && !box.getString("occlusalTeeth27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							
							
							if(null != box.getString("occlusalTeeth28") && !box.getString("occlusalTeeth28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
						
							
							if(box.getString("occlusalTeeth48") != null && !box.getString("occlusalTeeth48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
						
							
							if(box.getString("occlusalTeeth47") != null && !box.getString("occlusalTeeth47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							
							
							if(box.getString("occlusalTeeth46") != null && !box.getString("occlusalTeeth46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							
							if(box.getString("occlusalTeeth45") != null && !box.getString("occlusalTeeth45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

						
							if(box.getString("occlusalTeeth44") != null && !box.getString("occlusalTeeth44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							
							if(box.getString("occlusalTeeth43") != null && !box.getString("occlusalTeeth43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							
							
							if(box.getString("occlusalTeeth42") != null && !box.getString("occlusalTeeth42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							
							
							if(box.getString("occlusalTeeth41") != null && !box.getString("occlusalTeeth41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							
							
							if(box.getString("occlusalTeeth31") != null && !box.getString("occlusalTeeth31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							
							if(box.getString("occlusalTeeth32") != null && !box.getString("occlusalTeeth32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							
							
							if(box.getString("occlusalTeeth33") != null && !box.getString("occlusalTeeth33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							if(box.getString("occlusalTeeth34") != null && !box.getString("occlusalTeeth34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							if(box.getString("occlusalTeeth35") != null && !box.getString("occlusalTeeth35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							
							if(box.getString("occlusalTeeth36") != null && !box.getString("occlusalTeeth36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							
							if(box.getString("occlusalTeeth37") != null && !box.getString("occlusalTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							
							if(box.getString("occlusalTeeth38") != null && !box.getString("occlusalTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							
							hbt.save(opdPreAssessmentClinicDental);
						
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
				
				if((!box.getString("restorationsTeeth18").equals(""))||(!box.getString("restorationsTeeth17").equals(""))||(!box.getString("restorationsTeeth16").equals(""))
						||(!box.getString("restorationsTeeth15").equals(""))|| (!box.getString("restorationsTeeth14").equals(""))||(!box.getString("restorationsTeeth13").equals(""))
						||(!box.getString("restorationsTeeth12").equals("")) ||(!box.getString("restorationsTeeth11").equals(""))||(!box.getString("restorationsTeeth21").equals(""))
						||(!box.getString("restorationsTeeth22").equals("")) ||(!box.getString("restorationsTeeth23").equals("")) ||(!box.getString("restorationsTeeth24").equals(""))
						||(!box.getString("restorationsTeeth25").equals(""))||(!box.getString("restorationsTeeth26").equals(""))||(!box.getString("restorationsTeeth27").equals(""))
						|| (!box.getString("restorationsTeeth28").equals("")) ||(!box.getString("restorationsTeeth48").equals(""))||(!box.getString("restorationsTeeth47").equals(""))
						|| (!box.getString("restorationsTeeth46").equals(""))||(!box.getString("restorationsTeeth45").equals(""))||(!box.getString("restorationsTeeth44").equals(""))
						|| (!box.getString("restorationsTeeth43").equals(""))||(!box.getString("restorationsTeeth42").equals(""))||(!box.getString("restorationsTeeth41").equals(""))
						||(!box.getString("restorationsTeeth31").equals(""))||(!box.getString("restorationsTeeth32").equals(""))||(!box.getString("restorationsTeeth33").equals(""))
						||(!box.getString("restorationsTeeth34").equals(""))||(!box.getString("restorationsTeeth35").equals(""))||(!box.getString("restorationsTeeth36").equals(""))
						||(!box.getString("restorationsTeeth37").equals(""))||(!box.getString("restorationsTeeth38").equals(""))){
						
								OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
								
								opdPreAssessmentClinicDental.setFlag("Restorations");
								opdPreAssessmentClinicDental.setHin(patient);
								opdPreAssessmentClinicDental.setVisit(visit);
								opdPreAssessmentClinicDental.setDepartment(masDepartment);
								opdPreAssessmentClinicDental.setHospital(masHospital);
								opdPreAssessmentClinicDental.setMaxillofacialProsthesis(opdMaxillofacialProsthesis);
								opdPreAssessmentClinicDental.setTemplateName("Maxillofacial Prosthesis");
								
								
								if(null != box.getString("dentalhiddenValueSix") && !box.getString("dentalhiddenValueSix").equals(""))
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueSix"));
								else
									opdPreAssessmentClinicDental.setHiddenValue(box.getString("dentalhiddenValueSix"));
								
							// for reading the checkBox value
							if(box.getString("restorationsTeeth18") != null && !box.getString("restorationsTeeth18").equals(""))
								opdPreAssessmentClinicDental.setTeeth18("y");
							else
								opdPreAssessmentClinicDental.setTeeth18("n");
							
							
							if(box.getString("restorationsTeeth17") != null && !box.getString("restorationsTeeth17").equals(""))
								opdPreAssessmentClinicDental.setTeeth17("y");
							else
								opdPreAssessmentClinicDental.setTeeth17("n");
							
							
							
							if(box.getString("restorationsTeeth16") != null && !box.getString("restorationsTeeth16").equals(""))
								opdPreAssessmentClinicDental.setTeeth16("y");
							else
								opdPreAssessmentClinicDental.setTeeth16("n");
							
							
							
							if(box.getString("restorationsTeeth15") != null && !box.getString("restorationsTeeth15").equals(""))
								opdPreAssessmentClinicDental.setTeeth15("y");
							else
								opdPreAssessmentClinicDental.setTeeth15("n");

							
							
							if(box.getString("restorationsTeeth14") != null  && !box.getString("restorationsTeeth14").equals(""))
								opdPreAssessmentClinicDental.setTeeth14("y");
							else
								opdPreAssessmentClinicDental.setTeeth14("n");
							
							
							if(box.getString("restorationsTeeth13") != null  && !box.getString("restorationsTeeth13").equals(""))
								opdPreAssessmentClinicDental.setTeeth13("y");
							else
								opdPreAssessmentClinicDental.setTeeth13("n");
							
							
							
							if(box.getString("restorationsTeeth12") != null  && !box.getString("restorationsTeeth12").equals(""))
								opdPreAssessmentClinicDental.setTeeth12("y");
							else
								opdPreAssessmentClinicDental.setTeeth12("n");
							
							
							
							if(box.getString("restorationsTeeth11") != null  && !box.getString("restorationsTeeth11").equals(""))
								opdPreAssessmentClinicDental.setTeeth11("y");
							else
								opdPreAssessmentClinicDental.setTeeth11("n");
							
							
							
							if(box.getString("restorationsTeeth21") != null  && !box.getString("restorationsTeeth21").equals(""))
								opdPreAssessmentClinicDental.setTeeth21("y");
							else
								opdPreAssessmentClinicDental.setTeeth21("n");
							
							
							
							
							if(box.getString("restorationsTeeth22") != null && !box.getString("restorationsTeeth22").equals(""))
								opdPreAssessmentClinicDental.setTeeth22("y");
							else
								opdPreAssessmentClinicDental.setTeeth22("n");
							
							
							
							if(box.getString("restorationsTeeth23") != null && !box.getString("restorationsTeeth23").equals(""))
								opdPreAssessmentClinicDental.setTeeth23("y");
							else
								opdPreAssessmentClinicDental.setTeeth23("n");
							
							
							
							
							if(box.getString("restorationsTeeth24") != null && !box.getString("restorationsTeeth24").equals(""))
								opdPreAssessmentClinicDental.setTeeth24("y");
							else
								opdPreAssessmentClinicDental.setTeeth24("n");
							
							
							
							if(box.getString("restorationsTeeth25") != null && !box.getString("restorationsTeeth25").equals(""))
								opdPreAssessmentClinicDental.setTeeth25("y");
							else
								opdPreAssessmentClinicDental.setTeeth25("n");
							
							
							if(box.getString("restorationsTeeth26") != null && !box.getString("restorationsTeeth26").equals(""))
								opdPreAssessmentClinicDental.setTeeth26("y");
							else
								opdPreAssessmentClinicDental.setTeeth26("n");
							
							
							
							if(box.getString("restorationsTeeth27") != null && !box.getString("restorationsTeeth27").equals(""))
								opdPreAssessmentClinicDental.setTeeth27("y");
							else
								opdPreAssessmentClinicDental.setTeeth27("n");
							
							
							
							if(null != box.getString("restorationsTeeth28") && !box.getString("restorationsTeeth28").equals(""))
								opdPreAssessmentClinicDental.setTeeth28("y");
							else
								opdPreAssessmentClinicDental.setTeeth28("n");
							
						
							
							if(box.getString("restorationsTeeth48") != null && !box.getString("restorationsTeeth48").equals(""))
								opdPreAssessmentClinicDental.setTeeth48("y");
							else
								opdPreAssessmentClinicDental.setTeeth48("n");
							
						
							
							if(box.getString("restorationsTeeth47") != null && !box.getString("restorationsTeeth47").equals(""))
								opdPreAssessmentClinicDental.setTeeth47("y");
							else
								opdPreAssessmentClinicDental.setTeeth47("n");
							
							
							
							if(box.getString("restorationsTeeth46") != null && !box.getString("restorationsTeeth46").equals(""))
								opdPreAssessmentClinicDental.setTeeth46("y");
							else
								opdPreAssessmentClinicDental.setTeeth46("n");
							
							
							if(box.getString("restorationsTeeth45") != null && !box.getString("restorationsTeeth45").equals(""))
								opdPreAssessmentClinicDental.setTeeth45("y");
							else
								opdPreAssessmentClinicDental.setTeeth45("n");

						
							if(box.getString("restorationsTeeth44") != null && !box.getString("restorationsTeeth44").equals(""))
								opdPreAssessmentClinicDental.setTeeth44("y");
							else
								opdPreAssessmentClinicDental.setTeeth44("n");
							
							
							if(box.getString("restorationsTeeth43") != null && !box.getString("restorationsTeeth43").equals(""))
								opdPreAssessmentClinicDental.setTeeth43("y");
							else
								opdPreAssessmentClinicDental.setTeeth43("n");
							
							
							
							if(box.getString("restorationsTeeth42") != null && !box.getString("restorationsTeeth42").equals(""))
								opdPreAssessmentClinicDental.setTeeth42("y");
							else
								opdPreAssessmentClinicDental.setTeeth42("n");
							
							
							
							if(box.getString("restorationsTeeth41") != null && !box.getString("restorationsTeeth41").equals(""))
								opdPreAssessmentClinicDental.setTeeth41("y");
							else
								opdPreAssessmentClinicDental.setTeeth41("n");
							
							
							
							if(box.getString("restorationsTeeth31") != null && !box.getString("restorationsTeeth31").equals(""))
								opdPreAssessmentClinicDental.setTeeth31("y");
							else
								opdPreAssessmentClinicDental.setTeeth31("n");
							
							
							if(box.getString("restorationsTeeth32") != null && !box.getString("restorationsTeeth32").equals(""))
								opdPreAssessmentClinicDental.setTeeth32("y");
							else
								opdPreAssessmentClinicDental.setTeeth32("n");
							
							
							
							if(box.getString("restorationsTeeth33") != null && !box.getString("restorationsTeeth33").equals(""))
								opdPreAssessmentClinicDental.setTeeth33("y");
							else
								opdPreAssessmentClinicDental.setTeeth33("n");
							
							if(box.getString("restorationsTeeth34") != null && !box.getString("restorationsTeeth34").equals(""))
								opdPreAssessmentClinicDental.setTeeth34("y");
							else
								opdPreAssessmentClinicDental.setTeeth34("n");
							
							if(box.getString("restorationsTeeth35") != null && !box.getString("restorationsTeeth35").equals(""))
								opdPreAssessmentClinicDental.setTeeth35("y");
							else
								opdPreAssessmentClinicDental.setTeeth35("n");
							
							
							if(box.getString("restorationsTeeth36") != null && !box.getString("restorationsTeeth36").equals(""))
								opdPreAssessmentClinicDental.setTeeth36("y");
							else
								opdPreAssessmentClinicDental.setTeeth36("n");
							
							
							if(box.getString("restorationsTeeth37") != null && !box.getString("restorationsTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth37("y");
							else
								opdPreAssessmentClinicDental.setTeeth37("n");
							
							
							if(box.getString("restorationsTeeth38") != null && !box.getString("restorationsTeeth38").equals(""))
								opdPreAssessmentClinicDental.setTeeth38("y");
							else
								opdPreAssessmentClinicDental.setTeeth38("n");
							
							
							hbt.save(opdPreAssessmentClinicDental);
						
							map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
							}
						tnx.commit();
					}catch(Exception e){
						e.printStackTrace();
					}
					return map;
				}
				@Override
				public Map<String, Object> saveCommunityOralHealthCaseHistory(
						Map<String, Object> mapForDS, Box box,
						HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDS.get("hinId") != null) {
							hinId = (Integer) mapForDS.get("hinId");
						}
						if(mapForDS.get("visitId") != null) {
							visitId = (Integer) mapForDS.get("visitId");
						}
						if(mapForDS.get("departmentId") != null) {
							departmentId = (Integer) mapForDS.get("departmentId");
						}
						if(mapForDS.get("hospitalId") != null) {
							hospitalId = (Integer) mapForDS.get("hospitalId");
						}
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
					
						OpdCommunityOralHealthHeader opdCommunityOralHealthHeader = new OpdCommunityOralHealthHeader();
						Patient patient = new Patient();
						patient.setId(hinId);
						opdCommunityOralHealthHeader.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdCommunityOralHealthHeader.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdCommunityOralHealthHeader.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdCommunityOralHealthHeader.setHospital(masHospital);
						
						
						if(box.getString("education") != null && !box.getString("education").equals("")){
							opdCommunityOralHealthHeader.setEducation(box.getString("education"));
						}

						if(box.getString("occupation") != null && !box.getString("occupation").equals("")){
							opdCommunityOralHealthHeader.setOccupation(box.getString("occupation"));
						}
						if(box.getString("perCapitaIncome") != null && !box.getString("perCapitaIncome").equals("")){
							opdCommunityOralHealthHeader.setPerCapitaIncome(box.getString("perCapitaIncome"));
						}
						if(box.getString("socioEconomicStatus") != null && !box.getString("socioEconomicStatus").equals("")){
							opdCommunityOralHealthHeader.setSocioEconomicStatus(box.getString("socioEconomicStatus"));
						}
						if(box.getString("placeOfBirth") != null && !box.getString("placeOfBirth").equals("")){
							opdCommunityOralHealthHeader.setPlaceOfBirth(box.getString("placeOfBirth"));
						}
						if(box.getString("waterSource") != null && !box.getString("waterSource").equals("")){
							opdCommunityOralHealthHeader.setWaterSource(box.getString("waterSource"));
						}
						if(box.getString("continuousResidence") != null && !box.getString("continuousResidence").equals("")){
							opdCommunityOralHealthHeader.setContinuousResidence(box.getString("continuousResidence"));
						}
						if(box.getString("chiefComplaint") != null && !box.getString("chiefComplaint").equals("")){
							opdCommunityOralHealthHeader.setChiefComplaint(box.getString("chiefComplaint"));
						}
						if(box.getString("historyOfPresentIllness") != null && !box.getString("historyOfPresentIllness").equals("")){
							opdCommunityOralHealthHeader.setHistoryOfPesentIllness(box.getString("historyOfPresentIllness"));
						}
						
						String[] medicalHistoryList=null;
						StringBuilder  tempMedicalHistory=new StringBuilder();
						if(null != request.getParameterValues("medicalHistoryValue") && !request.getParameterValues("medicalHistoryValue").equals("")){
							medicalHistoryList=request.getParameterValues("medicalHistoryValue");
							for(String tempMedicalHistoryValue:medicalHistoryList){
								tempMedicalHistory.append(tempMedicalHistoryValue);
								tempMedicalHistory.append(",");
							}
							opdCommunityOralHealthHeader.setMedicalHistoryValue(tempMedicalHistory.toString());
						}
						
						if(box.getString("medicalHistory") != null && !box.getString("medicalHistory").equals("")){
							opdCommunityOralHealthHeader.setMedicalHistory(box.getString("medicalHistory"));
						}
						if(box.getString("dentalHistory") != null && !box.getString("dentalHistory").equals("")){
							opdCommunityOralHealthHeader.setDentalHistory(box.getString("dentalHistory"));
						}
						if(box.getString("dentalHistoryValue") != null && !box.getString("dentalHistoryValue").equals("")){
							opdCommunityOralHealthHeader.setDentalHistoryValue(box.getString("dentalHistoryValue"));
						}
						if(box.getString("smokingNumber") != null && !box.getString("smokingNumber").equals("")){
							opdCommunityOralHealthHeader.setSmokingNumber(box.getString("smokingNumber"));
						}
						if(box.getString("smokingFrequency") != null && !box.getString("smokingFrequency").equals("")){
							opdCommunityOralHealthHeader.setSmokingFrequency(box.getString("smokingFrequency"));
						}
						if(box.getString("smokingDuration") != null && !box.getString("smokingDuration").equals("")){
							opdCommunityOralHealthHeader.setSmokingDuration(box.getString("smokingDuration"));
						}
						if(box.getString("smokingDurationValue") != null && !box.getString("smokingDurationValue").equals("")){
							opdCommunityOralHealthHeader.setSmokingDurationValue(box.getString("smokingDurationValue"));
						}
						if(box.getString("tobacoChewingNumber") != null && !box.getString("tobacoChewingNumber").equals("")){
							opdCommunityOralHealthHeader.setTobacoChewingNumber(box.getString("tobacoChewingNumber"));
						}
						
						if(box.getString("tobacoChewingFrequency") != null && !box.getString("tobacoChewingFrequency").equals("")){
							opdCommunityOralHealthHeader.setTobacoChewingFrequency(box.getString("tobacoChewingFrequency"));
						}
						
						if(box.getString("tobacoChewingDuration") != null && !box.getString("tobacoChewingDuration").equals("")){
							opdCommunityOralHealthHeader.setTobacoChewingDuration(box.getString("tobacoChewingDuration"));
						}
						if(box.getString("tobacoChewingDurationValue") != null && !box.getString("tobacoChewingDurationValue").equals("")){
							opdCommunityOralHealthHeader.setTobacoChewingDurationValue(box.getString("tobacoChewingDurationValue"));
						}
						if(box.getString("panChewingNumber") != null && !box.getString("panChewingNumber").equals("")){
							opdCommunityOralHealthHeader.setPanChewingNumber(box.getString("panChewingNumber"));
						}
						if(box.getString("panChewingFrequency") != null && !box.getString("panChewingFrequency").equals("")){
							opdCommunityOralHealthHeader.setPanChewingFrequency(box.getString("panChewingFrequency"));
						}
						if(box.getString("panChewingDuration") != null && !box.getString("panChewingDuration").equals("")){
							opdCommunityOralHealthHeader.setPanChewingDuration(box.getString("panChewingDuration"));
						}
						if(box.getString("panChewingDurationValue") != null && !box.getString("panChewingDurationValue").equals("")){
							opdCommunityOralHealthHeader.setPanChewingDurationValue(box.getString("panChewingDurationValue"));
						}
						if(box.getString("gutkaNumber") != null && !box.getString("gutkaNumber").equals("")){
							opdCommunityOralHealthHeader.setGutkaNumber(box.getString("gutkaNumber"));
						}
						if(box.getString("gutkaFrequency") != null && !box.getString("gutkaFrequency").equals("")){
							opdCommunityOralHealthHeader.setGutkaFrequency(box.getString("gutkaFrequency"));
						}
						if(box.getString("gutkaDuration") != null && !box.getString("gutkaDuration").equals("")){
							opdCommunityOralHealthHeader.setGutkaDuration(box.getString("gutkaDuration"));
						}
						if(box.getString("gutkaDurationValue") != null && !box.getString("gutkaDurationValue").equals("")){
							opdCommunityOralHealthHeader.setGutkaDurationValue(box.getString("gutkaDurationValue"));
						}
						if(box.getString("snuffNumber") != null && !box.getString("snuffNumber").equals("")){
							opdCommunityOralHealthHeader.setSnuffNumber(box.getString("snuffNumber"));
						}
						if(box.getString("snuffFrequency") != null && !box.getString("snuffFrequency").equals("")){
							opdCommunityOralHealthHeader.setSnuffFrequency(box.getString("snuffFrequency"));
						}
						if(box.getString("snuffDuration") != null && !box.getString("snuffDuration").equals("")){
							opdCommunityOralHealthHeader.setSnuffDuration(box.getString("snuffDuration"));
						}
						if(box.getString("snuffDurationValue") != null && !box.getString("snuffDurationValue").equals("")){
							opdCommunityOralHealthHeader.setSnuffDurationValue(box.getString("snuffDurationValue"));
						}
						if(box.getString("betelNutChewingNumber") != null && !box.getString("betelNutChewingNumber").equals("")){
							opdCommunityOralHealthHeader.setBetelNutChewingNumber(box.getString("betelNutChewingNumber"));
						}
						if(box.getString("betelNutChewingFrequency") != null && !box.getString("betelNutChewingFrequency").equals("")){
							opdCommunityOralHealthHeader.setBetelNutChewingFrequency(box.getString("betelNutChewingFrequency"));
						}
						if(box.getString("betelNutChewingDuration") != null && !box.getString("betelNutChewingDuration").equals("")){
							opdCommunityOralHealthHeader.setBetelNutChewingDuration(box.getString("betelNutChewingDuration"));
						}
						if(box.getString("betelNutChewingDurationValue") != null && !box.getString("betelNutChewingDurationValue").equals("")){
							opdCommunityOralHealthHeader.setBetelNutChewingDurationValue(box.getString("betelNutChewingDurationValue"));
						}
						if(box.getString("alcoholicNumber") != null && !box.getString("alcoholicNumber").equals("")){
							opdCommunityOralHealthHeader.setAlcoholicNumber(box.getString("alcoholicNumber"));
						}
						
						if(box.getString("alcoholicFrequency") != null && !box.getString("alcoholicFrequency").equals("")){
							opdCommunityOralHealthHeader.setAlcoholicFrequency(box.getString("alcoholicFrequency"));
						}
						if(box.getString("alcoholicDuration") != null && !box.getString("alcoholicDuration").equals("")){
							opdCommunityOralHealthHeader.setAlcoholicDuration(box.getString("alcoholicDuration"));
						}
						if(box.getString("alcoholicDurationValue") != null && !box.getString("alcoholicDurationValue").equals("")){
							opdCommunityOralHealthHeader.setAlcoholicDurationValue(box.getString("alcoholicDurationValue"));
						}
						if(box.getString("drugsNumber") != null && !box.getString("drugsNumber").equals("")){
							opdCommunityOralHealthHeader.setDrugsNumber(box.getString("drugsNumber"));
						}
						if(box.getString("drugsFrequency") != null && !box.getString("drugsFrequency").equals("")){
							opdCommunityOralHealthHeader.setDrugsFrequency(box.getString("drugsFrequency"));
						}
						if(box.getString("drugsDuration") != null && !box.getString("drugsDuration").equals("")){
							opdCommunityOralHealthHeader.setDrugsDuration(box.getString("drugsDuration"));
						}
						if(box.getString("drugsDurationValue") != null && !box.getString("drugsDurationValue").equals("")){
							opdCommunityOralHealthHeader.setDrugsDurationValue(box.getString("drugsDurationValue"));
						}
						if(box.getString("habitsRelated") != null && !box.getString("habitsRelated").equals("")){
							opdCommunityOralHealthHeader.setHabitsRelated(box.getString("habitsRelated"));
						}
						
						String[] habitsRelatedList=null;
						StringBuilder  tempHabitsRelated=new StringBuilder();
						if(null != request.getParameterValues("habitsRelatedValue") && !request.getParameterValues("habitsRelatedValue").equals("")){
							habitsRelatedList=request.getParameterValues("habitsRelatedValue");
							for(String tempHabitsRelatedValue:habitsRelatedList){
								tempHabitsRelated.append(tempHabitsRelatedValue);
								tempHabitsRelated.append(",");
							}
							opdCommunityOralHealthHeader.setHabitsRelatedValue(tempHabitsRelated.toString());
						}
						
						
						if(box.getString("typeOfCleaningBrush") != null && !box.getString("typeOfCleaningBrush").equals("")){
							opdCommunityOralHealthHeader.setTypeOfCleaningBrush(box.getString("typeOfCleaningBrush"));
						}
						if(box.getString("typeOfCleaningFinger") != null && !box.getString("typeOfCleaningFinger").equals("")){
							opdCommunityOralHealthHeader.setTypeOfCleaningFinger(box.getString("typeOfCleaningFinger"));
						}
						if(box.getString("typeOfCleaningStick") != null && !box.getString("typeOfCleaningStick").equals("")){
							opdCommunityOralHealthHeader.setTypeOfCleaningStick(box.getString("typeOfCleaningStick"));
						}
						if(box.getString("typeOfCleaningAnyOther") != null && !box.getString("typeOfCleaningAnyOther").equals("")){
							opdCommunityOralHealthHeader.setTypeOfCleaningAnyOther(box.getString("typeOfCleaningAnyOther"));
						}
						if(box.getString("methodOfCleaningVertical") != null && !box.getString("methodOfCleaningVertical").equals("")){
							opdCommunityOralHealthHeader.setMethodOfCleaningVertical(box.getString("methodOfCleaningVertical"));
						}
						if(box.getString("methodOfCleaningHorizontal") != null && !box.getString("methodOfCleaningHorizontal").equals("")){
							opdCommunityOralHealthHeader.setMethodOfCleaningHorizontal(box.getString("methodOfCleaningHorizontal"));
						}
						if(box.getString("methodOfCleaningCircular") != null && !box.getString("methodOfCleaningCircular").equals("")){
							opdCommunityOralHealthHeader.setMethodOfCleaningCircular(box.getString("methodOfCleaningCircular"));
						}
						if(box.getString("materialsToothPaste") != null && !box.getString("materialsToothPaste").equals("")){
							opdCommunityOralHealthHeader.setMaterialsToothPaste(box.getString("materialsToothPaste"));
						}
						if(box.getString("materialsPowder") != null && !box.getString("materialsPowder").equals("")){
							opdCommunityOralHealthHeader.setMaterialsPowder(box.getString("materialsPowder"));
						}
						if(box.getString("materialsCharcoal") != null && !box.getString("materialsCharcoal").equals("")){
							opdCommunityOralHealthHeader.setMaterialsCharcoal(box.getString("materialsCharcoal"));
						}
						if(box.getString("materialsAnyOther") != null && !box.getString("materialsAnyOther").equals("")){
							opdCommunityOralHealthHeader.setMaterialsAnyOther(box.getString("materialsAnyOther"));
						}
						if(box.getString("cleaningBrushingOnce") != null && !box.getString("cleaningBrushingOnce").equals("")){
							opdCommunityOralHealthHeader.setCleaningBrushingOnce(box.getString("cleaningBrushingOnce"));
						}
						if(box.getString("cleaningBrushingTwice") != null && !box.getString("cleaningBrushingTwice").equals("")){
							opdCommunityOralHealthHeader.setCleaningBrushingTwice(box.getString("cleaningBrushingTwice"));
						}
						if(box.getString("cleaningBrushingThrice") != null && !box.getString("cleaningBrushingThrice").equals("")){
							opdCommunityOralHealthHeader.setCleaningBrushingThrice(box.getString("cleaningBrushingThrice"));
						}
						if(box.getString("cleaningBrushingImmediately") != null && !box.getString("cleaningBrushingImmediately").equals("")){
							opdCommunityOralHealthHeader.setCleaningBrushingImmediately(box.getString("cleaningBrushingImmediately"));
						}
						if(box.getString("flossingInter") != null && !box.getString("flossingInter").equals("")){
							opdCommunityOralHealthHeader.setFlossingInter(box.getString("flossingInter"));
						}
						if(box.getString("oralMouthRinse") != null && !box.getString("oralMouthRinse").equals("")){
							opdCommunityOralHealthHeader.setOralMouthRinse(box.getString("oralMouthRinse"));
						}
						if(box.getString("dietary") != null && !box.getString("dietary").equals("")){
							opdCommunityOralHealthHeader.setDietary(box.getString("dietary"));
						}
						
						if(box.getString("anyProsthesis") != null && !box.getString("anyProsthesis").equals("")){
							opdCommunityOralHealthHeader.setAnyProsthesis(box.getString("anyProsthesis"));
						}
						if(box.getString("gait") != null && !box.getString("gait").equals("")){
							opdCommunityOralHealthHeader.setGait(box.getString("gait"));
						}
						if(box.getString("posture") != null && !box.getString("posture").equals("")){
							opdCommunityOralHealthHeader.setPosture(box.getString("posture"));
						}
						if(box.getString("built") != null && !box.getString("built").equals("")){
							opdCommunityOralHealthHeader.setBuilt(box.getString("built"));
						}
						
						if(box.getString("nourishment") != null && !box.getString("nourishment").equals("")){
							opdCommunityOralHealthHeader.setNourishment(box.getString("nourishment"));
						}
						
						if(box.getString("symmetryOfFace") != null && !box.getString("symmetryOfFace").equals("")){
							opdCommunityOralHealthHeader.setSymmetryOfFace(box.getString("symmetryOfFace"));
						}
						if(box.getString("temporomandibularJoint") != null && !box.getString("temporomandibularJoint").equals("")){
							opdCommunityOralHealthHeader.setTemporomandibularJoint(box.getString("temporomandibularJoint"));
						}
						if(box.getString("lymphNodes") != null && !box.getString("lymphNodes").equals("")){
							opdCommunityOralHealthHeader.setLymphNodes(box.getString("lymphNodes"));
						}
						if(box.getString("lip") != null && !box.getString("lip").equals("")){
							opdCommunityOralHealthHeader.setLip(box.getString("lip"));
						}
						if(box.getString("labicalMucosa") != null && !box.getString("labicalMucosa").equals("")){
							opdCommunityOralHealthHeader.setLabicalMucosa(box.getString("labicalMucosa"));
						}
						if(box.getString("buccalMucosa") != null && !box.getString("buccalMucosa").equals("")){
							opdCommunityOralHealthHeader.setBuccalMucosa(box.getString("buccalMucosa"));
						}
						if(box.getString("floorOfTheMouth") != null && !box.getString("floorOfTheMouth").equals("")){
							opdCommunityOralHealthHeader.setFloorOfTheMouth(box.getString("floorOfTheMouth"));
						}
						if(box.getString("tounge") != null && !box.getString("tounge").equals("")){
							opdCommunityOralHealthHeader.setTounge(box.getString("tounge"));
						}
						if(box.getString("gingiva") != null && !box.getString("gingiva").equals("")){
							opdCommunityOralHealthHeader.setGingiva(box.getString("gingiva"));
						}
						if(box.getString("palate") != null && !box.getString("palate").equals("")){
							opdCommunityOralHealthHeader.setPalate(box.getString("palate"));
						}
						if(box.getString("typeOfDefinition") != null && !box.getString("typeOfDefinition").equals("")){
							opdCommunityOralHealthHeader.setTypeOfDefinition(box.getString("typeOfDefinition"));
						}
						if(box.getString("numberOfTeethPresent") != null && !box.getString("numberOfTeethPresent").equals("")){
							opdCommunityOralHealthHeader.setNumberOfTeethPresent(box.getString("numberOfTeethPresent"));
						}
						if(box.getString("teethAbsentReasonLoss") != null && !box.getString("teethAbsentReasonLoss").equals("")){
							opdCommunityOralHealthHeader.setTeethAbsentReasonloss(box.getString("teethAbsentReasonLoss"));
						}
						if(box.getString("dentalCaries") != null && !box.getString("dentalCaries").equals("")){
							opdCommunityOralHealthHeader.setDentalCaries(box.getString("dentalCaries"));
						}
						if(box.getString("filledTeeth") != null && !box.getString("filledTeeth").equals("")){
							opdCommunityOralHealthHeader.setFilledTeeth(box.getString("filledTeeth"));
						}
						if(box.getString("wastingDisease") != null && !box.getString("wastingDisease").equals("")){
							opdCommunityOralHealthHeader.setWastingDisease(box.getString("wastingDisease"));
						}
						if(box.getString("enamelHypolasia") != null && !box.getString("enamelHypolasia").equals("")){
							opdCommunityOralHealthHeader.setEnamelHypolasia(box.getString("enamelHypolasia"));
						}
						if(box.getString("supernumeraryTeeth") != null && !box.getString("supernumeraryTeeth").equals("")){
							opdCommunityOralHealthHeader.setSupernumeraryTeeth(box.getString("supernumeraryTeeth"));
						}
						if(box.getString("malocclusion") != null && !box.getString("malocclusion").equals("")){
							opdCommunityOralHealthHeader.setMalocclusion(box.getString("malocclusion"));
						}
						if(box.getString("occlusalTraumatism") != null && !box.getString("occlusalTraumatism").equals("")){
							opdCommunityOralHealthHeader.setOcclusalTraumatism(box.getString("occlusalTraumatism"));
						}
						if(box.getString("fracturedNonVitalTooth") != null && !box.getString("fracturedNonVitalTooth").equals("")){
							opdCommunityOralHealthHeader.setFracturedNonVitaltooth(box.getString("fracturedNonVitalTooth"));
						}
						if(box.getString("stains") != null && !box.getString("stains").equals("")){
							opdCommunityOralHealthHeader.setStains(box.getString("stains"));
						}
						if(box.getString("dentalDeposits") != null && !box.getString("dentalDeposits").equals("")){
							opdCommunityOralHealthHeader.setDentalDeposits(box.getString("dentalDeposits"));
						}
						if(box.getString("gingivitis") != null && !box.getString("gingivitis").equals("")){
							opdCommunityOralHealthHeader.setGingivitis(box.getString("gingivitis"));
						}
						if(box.getString("periodontalPocket") != null && !box.getString("periodontalPocket").equals("")){
							opdCommunityOralHealthHeader.setPeriodontalPocket(box.getString("periodontalPocket"));
						}
						if(box.getString("mobilityOfTeeth") != null && !box.getString("mobilityOfTeeth").equals("")){
							opdCommunityOralHealthHeader.setMobilityOfTeeth(box.getString("mobilityOfTeeth"));
						}
						if(box.getString("emergency") != null && !box.getString("emergency").equals("")){
							opdCommunityOralHealthHeader.setEmergency(box.getString("emergency"));
						}
						if(box.getString("promotive") != null && !box.getString("promotive").equals("")){
							opdCommunityOralHealthHeader.setPromotive(box.getString("promotive"));
						}
						if(box.getString("preventive") != null && !box.getString("preventive").equals("")){
							opdCommunityOralHealthHeader.setPreventive(box.getString("preventive"));
						}
						if(box.getString("curative") != null && !box.getString("curative").equals("")){
							opdCommunityOralHealthHeader.setCurative(box.getString("curative"));
						}
						if(box.getString("rehabilitative") != null && !box.getString("rehabilitative").equals("")){
							opdCommunityOralHealthHeader.setRehabilitative(box.getString("rehabilitative"));
						}
						if(box.getString("maintenance") != null && !box.getString("maintenance").equals("")){
							opdCommunityOralHealthHeader.setMaintenance(box.getString("maintenance"));
						}
						if(box.getString("healthPromotion") != null && !box.getString("healthPromotion").equals("")){
							opdCommunityOralHealthHeader.setHealthPromotion(box.getString("healthPromotion"));
						}
						if(box.getString("specificProtection") != null && !box.getString("specificProtection").equals("")){
							opdCommunityOralHealthHeader.setSpecificProtection(box.getString("specificProtection"));
						}
						if(box.getString("promptTreatment") != null && !box.getString("promptTreatment").equals("")){
							opdCommunityOralHealthHeader.setPromptTreatment(box.getString("promptTreatment"));
						}
						if(box.getString("disabilityLimitations") != null && !box.getString("disabilityLimitations").equals("")){
							opdCommunityOralHealthHeader.setDisabilityLimitations(box.getString("disabilityLimitations"));
						}
						if(box.getString("rehabilitation") != null && !box.getString("rehabilitation").equals("")){
							opdCommunityOralHealthHeader.setRehabilitation(box.getString("rehabilitation"));
						}
						
						hbt.save(opdCommunityOralHealthHeader);
						
						
						map.put("opdCommunityOralHealthHeader",opdCommunityOralHealthHeader);
				
						
						int hdbDietary = 0;
						
						if(null != box.getString("hdbDietary") && !box.getString("hdbDietary").equals("")) {
							hdbDietary = box.getInt("hdbDietary");
						}
						
						OpdCommunityOralHealthDetail opdCommunityOralHealthDetail = new OpdCommunityOralHealthDetail();
						for(int j = 1; j <= hdbDietary; j++) {
								if((!box.getString("formOfFood" + j).equals(""))||(!box.getString("typeOfFood" +j).equals(""))||(!box.getString("timeOfIntake" +j).equals(""))||(!box.getString("quantitySugarExposure" +j).equals(""))||(!box.getString("frequency" +j).equals(""))||(!box.getString("points" +j).equals(""))
										){
										
									opdCommunityOralHealthDetail = new OpdCommunityOralHealthDetail();
									opdCommunityOralHealthDetail.setCommunityOralHealthHeader(opdCommunityOralHealthHeader);
								
							if (!box.getString("formOfFood" + j).equals("")) {
								opdCommunityOralHealthDetail.setFormOfFood(box.getString("formOfFood" + j));
							}
							if (!box.getString("typeOfFood" + j).equals("")) {
								opdCommunityOralHealthDetail.setTypeOfFood(box.getString("typeOfFood" + j));
							}
							if (!box.getString("timeOfIntake" + j).equals("")) {
								opdCommunityOralHealthDetail.setTimeOfIntake(box.getString("timeOfIntake" + j));
							}
							if (!box.getString("quantitySugarExposure" + j).equals("")) {
								opdCommunityOralHealthDetail.setQuantitySugarExposure(box.getString("quantitySugarExposure" + j));
							}
							if (!box.getString("frequency" + j).equals("")) {
								opdCommunityOralHealthDetail.setFrequency(box.getString("frequency" + j));
							}
							if (!box.getString("points" + j).equals("")) {
								opdCommunityOralHealthDetail.setPoints(box.getString("points" + j));
							}
							hbt.save(opdCommunityOralHealthDetail);
							}
						}
				tnx.commit();
			}catch(Exception e){
				e.printStackTrace();
			}
			return map;
			}

				@Override
				public Map<String, Object> savePedodonticsVitalStatistics(
						Map<String, Object> mapForDS, Box box,
						HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDS.get("hinId") != null) {
							hinId = (Integer) mapForDS.get("hinId");
						}
						if(mapForDS.get("visitId") != null) {
							visitId = (Integer) mapForDS.get("visitId");
						}
						if(mapForDS.get("departmentId") != null) {
							departmentId = (Integer) mapForDS.get("departmentId");
						}
						if(mapForDS.get("hospitalId") != null) {
							hospitalId = (Integer) mapForDS.get("hospitalId");
						}
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
					
						OpdPedodonticsVitalStatisticsHeader opdPedodonticsVitalStatisticsHeader = new OpdPedodonticsVitalStatisticsHeader();
						Patient patient = new Patient();
						patient.setId(hinId);
						opdPedodonticsVitalStatisticsHeader.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdPedodonticsVitalStatisticsHeader.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdPedodonticsVitalStatisticsHeader.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdPedodonticsVitalStatisticsHeader.setHospital(masHospital);
						
						
						if(box.getString("presentingComplaints") != null && !box.getString("presentingComplaints").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPresentingComplaints(box.getString("presentingComplaints"));
						}

						if(box.getString("informar") != null && !box.getString("informar").equals("")){
							opdPedodonticsVitalStatisticsHeader.setInformar(box.getString("informar"));
						}

						if(box.getString("informarValue") != null && !box.getString("informarValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setInformarValue(box.getString("informarValue"));
						}

						if(box.getString("chiefComplaint") != null && !box.getString("chiefComplaint").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChiefComplaint(box.getString("chiefComplaint"));
						}

						if(box.getString("presentingComplaints1") != null && !box.getString("presentingComplaints1").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPresentingComplaints1(box.getString("presentingComplaints1"));
						}

						
						if(box.getString("drugTherapy") != null && !box.getString("drugTherapy").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDrugTherapy(box.getString("drugTherapy"));
						}

						if(box.getString("ifYeswhy") != null && !box.getString("ifYeswhy").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIfYesWhy(box.getString("ifYeswhy"));
						}

						if(box.getString("specialTests") != null && !box.getString("specialTests").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSpecialTests(box.getString("specialTests"));
						}

						if(box.getString("immunizationStatus") != null && !box.getString("immunizationStatus").equals("")){
							opdPedodonticsVitalStatisticsHeader.setImmunizationStatus(box.getString("immunizationStatus"));
						}

						if(box.getString("frequentIllnesses") != null && !box.getString("frequentIllnesses").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrequentIllnesses(box.getString("frequentIllnesses"));
						}

						if(box.getString("duringEarlyChildhood") != null && !box.getString("duringEarlyChildhood").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDuringEarlyChildhood(box.getString("duringEarlyChildhood"));
						}

						if(box.getString("drugAllergy") != null && !box.getString("drugAllergy").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDrugAllergy(box.getString("drugAllergy"));
						}

						if(box.getString("ifyesSpecify") != null && !box.getString("ifyesSpecify").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIfYesSpecify(box.getString("ifyesSpecify"));
						}

						if(box.getString("developmentalAbnormality") != null && !box.getString("developmentalAbnormality").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDevelopmentalAbnormality(box.getString("developmentalAbnormality"));
						}

						if(box.getString("physicalDisability") != null && !box.getString("physicalDisability").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPhysicalDisability(box.getString("physicalDisability"));
						}

						if(box.getString("childHopsitalized") != null && !box.getString("childHopsitalized").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildHopsitalized(box.getString("childHopsitalized"));
						}

						if(box.getString("bloodTransfusion") != null && !box.getString("bloodTransfusion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBloodTransfusion(box.getString("bloodTransfusion"));
						}

						if(box.getString("bleedingDisorders") != null && !box.getString("bleedingDisorders").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBleedingDisorders(box.getString("bleedingDisorders"));
						}

						if(box.getString("heartDisease") != null && !box.getString("heartDisease").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHeartDisease(box.getString("heartDisease"));
						}

						if(box.getString("diabetes") != null && !box.getString("diabetes").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDiabetes(box.getString("diabetes"));
						}

						if(box.getString("tuberculosis") != null && !box.getString("tuberculosis").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTuberculosis(box.getString("tuberculosis"));
						}

						if(box.getString("asthma") != null && !box.getString("asthma").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAsthma(box.getString("asthma"));
						}

						if(box.getString("allergicReactions") != null && !box.getString("allergicReactions").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAllergicReactions(box.getString("allergicReactions"));
						}

						
						if(box.getString("geneticDisorders") != null && !box.getString("geneticDisorders").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGeneticDisorders(box.getString("geneticDisorders"));
						}

						if(box.getString("abnormalitiesOfTeeth") != null && !box.getString("abnormalitiesOfTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAbnormalitiesOfTeeth(box.getString("abnormalitiesOfTeeth"));
						}

						if(box.getString("malocclusion") != null && !box.getString("malocclusion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMalocclusion(box.getString("malocclusion"));
						}

						if(box.getString("anyOther") != null && !box.getString("anyOther").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAnyOther(box.getString("anyOther"));
						}

						if(box.getString("anyOtherValue") != null && !box.getString("anyOtherValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAnyOtherValue(box.getString("anyOtherValue"));
						}

						if(box.getString("motherDuringPregnancy") != null && !box.getString("motherDuringPregnancy").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMotherDuringPregnancy(box.getString("motherDuringPregnancy"));
						}

						if(box.getString("incompatiblityBetweenParents") != null && !box.getString("incompatiblityBetweenParents").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIncompatiblityBetweenParents(box.getString("incompatiblityBetweenParents"));
						}

						if(box.getString("therapyDuringPregnancy") != null && !box.getString("therapyDuringPregnancy").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTherapyDuringPregnancy(box.getString("therapyDuringPregnancy"));
						}

						if(box.getString("nameOfTheDrug") != null && !box.getString("nameOfTheDrug").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNameOfTheDrug(box.getString("nameOfTheDrug"));
						}

						if(box.getString("durationOfAdminstration") != null && !box.getString("durationOfAdminstration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDurationOfAdminstration(box.getString("durationOfAdminstration"));
						}

						if(box.getString("probableDiagnosis") != null && !box.getString("probableDiagnosis").equals("")){
							opdPedodonticsVitalStatisticsHeader.setProbableDiagnosis(box.getString("probableDiagnosis"));
						}
						if(box.getString("sourceOfDrinkingWaterYes") != null && !box.getString("sourceOfDrinkingWaterYes").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSourceOfDrinkingWaterYes(box.getString("sourceOfDrinkingWaterYes"));
						}
						if(box.getString("delivery") != null && !box.getString("delivery").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDelivery(box.getString("delivery"));
						}
						if(box.getString("typeOfDelivery") != null && !box.getString("typeOfDelivery").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTypeOfDelivery(box.getString("typeOfDelivery"));
						}
						if(box.getString("typeOfDeliveryValue") != null && !box.getString("typeOfDeliveryValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTypeOfDeliveryValue(box.getString("typeOfDeliveryValue"));
						}
						if(box.getString("birthCry") != null && !box.getString("birthCry").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBirthCry(box.getString("birthCry"));
						}
						if(box.getString("birthWeight") != null && !box.getString("birthWeight").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBirthWeight(box.getString("birthWeight"));
						}
						if(box.getString("healthAtBirth") != null && !box.getString("healthAtBirth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHealthAtBirth(box.getString("healthAtBirth"));
						}
						if(box.getString("oxygenSupplementation") != null && !box.getString("oxygenSupplementation").equals("")){
							opdPedodonticsVitalStatisticsHeader.setOxygenSupplementation(box.getString("oxygenSupplementation"));
						}
						if(box.getString("childBlueBaby") != null && !box.getString("childBlueBaby").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildBlueBaby(box.getString("childBlueBaby"));
						}
						if(box.getString("childJaundicedAtBirth") != null && !box.getString("childJaundicedAtBirth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildJaundicedAtBirth(box.getString("childJaundicedAtBirth"));
						}
						if(box.getString("abnormalityAtBirth") != null && !box.getString("abnormalityAtBirth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAbnormalityAtBirth(box.getString("abnormalityAtBirth"));
						}
						if(box.getString("breastFed") != null && !box.getString("breastFed").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBreastFed(box.getString("breastFed"));
						}
						if(box.getString("breastFedValue") != null && !box.getString("breastFedValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBreastFedValue(box.getString("breastFedValue"));
						}
						if(box.getString("bottleFed") != null && !box.getString("bottleFed").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBottleFed(box.getString("bottleFed"));
						}
						if(box.getString("bottleFedValue") != null && !box.getString("bottleFedValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBottleFedValue(box.getString("bottleFedValue"));
						}
						if(box.getString("combination") != null && !box.getString("combination").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCombination(box.getString("combination"));
						}
						if(box.getString("combinationValue") != null && !box.getString("combinationValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCombinationValue(box.getString("combinationValue"));
						}
						if(box.getString("childreastFed") != null && !box.getString("childreastFed").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildreastFed(box.getString("childreastFed"));
						}
						if(box.getString("sleepWithTheBottle") != null && !box.getString("sleepWithTheBottle").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSleepWithTheBottle(box.getString("sleepWithTheBottle"));
						}
						if(box.getString("contentsOfTheBottle") != null && !box.getString("contentsOfTheBottle").equals("")){
							opdPedodonticsVitalStatisticsHeader.setContentsOfTheBottle(box.getString("contentsOfTheBottle"));
						}
						if(box.getString("within30DaysAfterBirth") != null && !box.getString("within30DaysAfterBirth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setWithin30DaysAfterBirth(box.getString("within30DaysAfterBirth"));
						}
						if(box.getString("firstToothErupt") != null && !box.getString("firstToothErupt").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFirstToothErupt(box.getString("firstToothErupt"));
						}
						if(box.getString("anyAssociatedProblem") != null && !box.getString("anyAssociatedProblem").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAnyAssociatedProblem(box.getString("anyAssociatedProblem"));
						}
						if(box.getString("followingDevelopmentalMilestones") != null && !box.getString("followingDevelopmentalMilestones").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFollowingDevelopmentalMilestones(box.getString("followingDevelopmentalMilestones"));
						}
						if(box.getString("headHolding") != null && !box.getString("headHolding").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHeadHolding(box.getString("headHolding"));
						}
						if(box.getString("rollingOver") != null && !box.getString("rollingOver").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRollingOver(box.getString("rollingOver"));
						}
						if(box.getString("sitting") != null && !box.getString("sitting").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSitting(box.getString("sitting"));
						}
						if(box.getString("standingwithoutSupport") != null && !box.getString("standingwithoutSupport").equals("")){
							opdPedodonticsVitalStatisticsHeader.setStandingWithoutSupport(box.getString("standingwithoutSupport"));
						}
						if(box.getString("walking") != null && !box.getString("walking").equals("")){
							opdPedodonticsVitalStatisticsHeader.setWalking(box.getString("walking"));
						}
						if(box.getString("running") != null && !box.getString("running").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRunning(box.getString("running"));
						}
						if(box.getString("speakingSentences") != null && !box.getString("speakingSentences").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSpeakingSentences(box.getString("speakingSentences"));
						}
						if(box.getString("inference") != null && !box.getString("inference").equals("")){
							opdPedodonticsVitalStatisticsHeader.setInference(box.getString("inference"));
						}
						if(box.getString("alongWithOtherChildren") != null && !box.getString("alongWithOtherChildren").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAlongWithOtherChildren(box.getString("alongWithOtherChildren"));
						}
						
						
						if(box.getString("difficultyInKeeping") != null && !box.getString("difficultyInKeeping").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDifficultyInKeeping(box.getString("difficultyInKeeping"));
						}
						if(box.getString("childHaveBrothersSisters") != null && !box.getString("childHaveBrothersSisters").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildHaveBrothersSisters(box.getString("childHaveBrothersSisters"));
						}
						if(box.getString("scholasticPerformance") != null && !box.getString("scholasticPerformance").equals("")){
							opdPedodonticsVitalStatisticsHeader.setScholasticPerformance(box.getString("scholasticPerformance"));
						}
						if(box.getString("behaviour") != null && !box.getString("behaviour").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBehaviour(box.getString("behaviour"));
						}
						if(box.getString("behaviourRating") != null && !box.getString("behaviourRating").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBehaviourRating(box.getString("behaviourRating"));
						}
						if(box.getString("childBrushHisTeeth") != null && !box.getString("childBrushHisTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildBrushHisTeeth(box.getString("childBrushHisTeeth"));
						}
						if(box.getString("teethAtPresent") != null && !box.getString("teethAtPresent").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTeethAtPresent(box.getString("teethAtPresent"));
						}
						if(box.getString("brushingInitiated") != null && !box.getString("brushingInitiated").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBrushingInitiated(box.getString("brushingInitiated"));
						}
						if(box.getString("childStartBrushing") != null && !box.getString("childStartBrushing").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildStartBrushing(box.getString("childStartBrushing"));
						}
						if(box.getString("brushingSupervised") != null && !box.getString("brushingSupervised").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBrushingSupervised(box.getString("brushingSupervised"));
						}
						if(box.getString("timeFrequency") != null && !box.getString("timeFrequency").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTimeFrequency(box.getString("timeFrequency"));
						}
						if(box.getString("methodFrequency") != null && !box.getString("methodFrequency").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMethodFrequency(box.getString("methodFrequency"));
						}
						
						if(box.getString("typeOfPasteUsed") != null && !box.getString("typeOfPasteUsed").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTypeOfPasteUsed(box.getString("typeOfPasteUsed"));
						}
						if(box.getString("sugaryMedications") != null && !box.getString("sugaryMedications").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugaryMedications(box.getString("sugaryMedications"));
						}
						if(box.getString("dietaryHabit") != null && !box.getString("dietaryHabit").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDietaryHabit(box.getString("dietaryHabit"));
						}
						if(box.getString("frequentSnacking") != null && !box.getString("frequentSnacking").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrequentSnacking(box.getString("frequentSnacking"));
						}
						if(box.getString("favouriteFoods") != null && !box.getString("favouriteFoods").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFavouriteFoods(box.getString("favouriteFoods"));
						}
						if(box.getString("firstDentalVisit") != null && !box.getString("firstDentalVisit").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFirstDentalVisit(box.getString("firstDentalVisit"));
						}
						if(box.getString("theLastVisit") != null && !box.getString("theLastVisit").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTheLastVisit(box.getString("theLastVisit"));
						}
						if(box.getString("unpleasantDentalExperience") != null && !box.getString("unpleasantDentalExperience").equals("")){
							opdPedodonticsVitalStatisticsHeader.setUnpleasantDentalExperience(box.getString("unpleasantDentalExperience"));
						}
						if(box.getString("ifYesExplain") != null && !box.getString("ifYesExplain").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIfYesExplain(box.getString("ifYesExplain"));
						}
						if(box.getString("fearOfDentist") != null && !box.getString("fearOfDentist").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFearOfDentist(box.getString("fearOfDentist"));
						}
						
						if(box.getString("fluorideTreatmennt") != null && !box.getString("fluorideTreatmennt").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFluorideTreatmennt(box.getString("fluorideTreatmennt"));
						}
						
						if(box.getString("childComplainOfToothAche") != null && !box.getString("childComplainOfToothAche").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildComplainOfToothAche(box.getString("childComplainOfToothAche"));
						}
						
						if(box.getString("foodHabitsAndSleep") != null && !box.getString("foodHabitsAndSleep").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFoodHabitsAndSleep(box.getString("foodHabitsAndSleep"));
						}
						
						if(box.getString("pain") != null && !box.getString("pain").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPain(box.getString("pain"));
						}
						
						if(box.getString("aggravatingRelievingFactors") != null && !box.getString("aggravatingRelievingFactors").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAggravatingRelievingFactors(box.getString("aggravatingRelievingFactors"));
						}
						
						if(box.getString("tenderness") != null && !box.getString("tenderness").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTenderness(box.getString("tenderness"));
						}
						
						if(box.getString("previousTreatment") != null && !box.getString("previousTreatment").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPreviousTreatment(box.getString("previousTreatment"));
						}
						
						if(box.getString("injuryToTeeth") != null && !box.getString("injuryToTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setInjuryToTeeth(box.getString("injuryToTeeth"));
						}
						
						if(box.getString("ifYesBriefHistory") != null && !box.getString("ifYesBriefHistory").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIfYesBriefHistory(box.getString("ifYesBriefHistory"));
						}
						
						if(box.getString("whenDidItHappen") != null && !box.getString("whenDidItHappen").equals("")){
							opdPedodonticsVitalStatisticsHeader.setWhenDidItHappen(box.getString("whenDidItHappen"));
						}
						
						if(box.getString("howDidItHappen") != null && !box.getString("howDidItHappen").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHowDidItHappen(box.getString("howDidItHappen"));
						}
						
						if(box.getString("whereDidItHappen") != null && !box.getString("whereDidItHappen").equals("")){
							opdPedodonticsVitalStatisticsHeader.setWhereDidItHappen(box.getString("whereDidItHappen"));
						}
						
						if(box.getString("medicoLegalCase") != null && !box.getString("medicoLegalCase").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMedicoLegalCase(box.getString("medicoLegalCase"));
						}
						
						if(box.getString("mouthBreathing") != null && !box.getString("mouthBreathing").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMouthBreathing(box.getString("mouthBreathing"));
						}
						
						if(box.getString("mouthBreathingValue") != null && !box.getString("mouthBreathingValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMouthBreathingValue(box.getString("mouthBreathingValue"));
						}
						if(box.getString("tongueThrusting") != null && !box.getString("tongueThrusting").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongueThrusting(box.getString("tongueThrusting"));
						}
						
						if(box.getString("tongueThrustingValue") != null && !box.getString("tongueThrustingValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongueThrustingValue(box.getString("tongueThrustingValue"));
						}
						
						if(box.getString("thumbFingerSucking") != null && !box.getString("thumbFingerSucking").equals("")){
							opdPedodonticsVitalStatisticsHeader.setThumbFingerSucking(box.getString("thumbFingerSucking"));
						}
						
						if(box.getString("thumbDuration") != null && !box.getString("thumbDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setThumbDuration(box.getString("thumbDuration"));
						}
						
						if(box.getString("thumbFrequency") != null && !box.getString("thumbFrequency").equals("")){
							opdPedodonticsVitalStatisticsHeader.setThumbFrequency(box.getString("thumbFrequency"));
						}
						
						if(box.getString("thumbIntensity") != null && !box.getString("thumbIntensity").equals("")){
							opdPedodonticsVitalStatisticsHeader.setThumbIntensity(box.getString("thumbIntensity"));
						}
						
						if(box.getString("lipBitingSucking") != null && !box.getString("lipBitingSucking").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLipBitingSucking(box.getString("lipBitingSucking"));
						}
						
						if(box.getString("lipBitingDuration") != null && !box.getString("lipBitingDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLipBitingDuration(box.getString("lipBitingDuration"));
						}
						
						if(box.getString("nailBiting") != null && !box.getString("nailBiting").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNailBiting(box.getString("nailBiting"));
						}
						
						if(box.getString("nailBitingDuration") != null && !box.getString("nailBitingDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNailBitingDuration(box.getString("nailBitingDuration"));
						}
						if(box.getString("otherHabits") != null && !box.getString("otherHabits").equals("")){
							opdPedodonticsVitalStatisticsHeader.setOtherHabits(box.getString("otherHabits"));
						}
						
						if(box.getString("childStopTheHabit") != null && !box.getString("childStopTheHabit").equals("")){
							opdPedodonticsVitalStatisticsHeader.setChildStopTheHabit(box.getString("childStopTheHabit"));
						}
						
						if(box.getString("sourceOfDrinkingWater") != null && !box.getString("sourceOfDrinkingWater").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSourceOfDrinkingWater(box.getString("sourceOfDrinkingWater"));
						}
						if(box.getString("lastFewYears") != null && !box.getString("lastFewYears").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLastFewYears(box.getString("lastFewYears"));
						}
						
						if(box.getString("heightOne") != null && !box.getString("heightOne").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHeight(box.getString("heightOne"));
						}
						
						if(box.getString("weightOne") != null && !box.getString("weightOne").equals("")){
							opdPedodonticsVitalStatisticsHeader.setWeight(box.getString("weightOne"));
						}
						if(box.getString("somatotype") != null && !box.getString("somatotype").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSomatotype(box.getString("somatotype"));
						}
						
						if(box.getString("gait") != null && !box.getString("gait").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGait(box.getString("gait"));
						}
						
						if(box.getString("posture") != null && !box.getString("posture").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPosture(box.getString("posture"));
						}
						if(box.getString("pulseRate") != null && !box.getString("pulseRate").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPulseRate(box.getString("pulseRate"));
						}
						
						if(box.getString("respiratoryRat") != null && !box.getString("respiratoryRat").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRespiratoryRat(box.getString("respiratoryRat"));
						}
						
						if(box.getString("temperature") != null && !box.getString("temperature").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTemperature(box.getString("temperature"));
						}
						if(box.getString("hair") != null && !box.getString("hair").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHair(box.getString("hair"));
						}
						
						if(box.getString("hairValue") != null && !box.getString("hairValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHairValue(box.getString("hairValue"));
						}
						
						if(box.getString("hairDuration") != null && !box.getString("hairDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setHairDuration(box.getString("hairDuration"));
						}
						
						if(box.getString("skin") != null && !box.getString("skin").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSkin(box.getString("skin"));
						}
						
						if(box.getString("skinValue") != null && !box.getString("skinValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSkinValue(box.getString("skinValue"));
						}
						
						if(box.getString("skinDuration") != null && !box.getString("skinDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSkinDuration(box.getString("skinDuration"));
						}
						
						if(box.getString("nails") != null && !box.getString("nails").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNails(box.getString("nails"));
						}
						
						if(box.getString("nailsValue") != null && !box.getString("nailsValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNailsValue(box.getString("nailsValue"));
						}
						
						if(box.getString("nailsDuration") != null && !box.getString("nailsDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNailsDuration(box.getString("nailsDuration"));
						}
						
						if(box.getString("eyes") != null && !box.getString("eyes").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEyes(box.getString("eyes"));
						}
						
						if(box.getString("eyesValue") != null && !box.getString("eyesValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEyesValue(box.getString("eyesValue"));
						}
						
						if(box.getString("eyesDuration") != null && !box.getString("eyesDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEyesDuration(box.getString("eyesDuration"));
						}
						
						if(box.getString("ears") != null && !box.getString("ears").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEars(box.getString("ears"));
						}
						
						if(box.getString("earsValue") != null && !box.getString("earsValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEarsValue(box.getString("earsValue"));
						}
						
						if(box.getString("earsDuration") != null && !box.getString("earsDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEarsDuration(box.getString("earsDuration"));
						}
						
						if(box.getString("nose") != null && !box.getString("nose").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNose(box.getString("nose"));
						}
						
						if(box.getString("noseValue") != null && !box.getString("noseValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNoseValue(box.getString("noseValue"));
						}
						
						if(box.getString("noseDuration") != null && !box.getString("noseDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNoseDuration(box.getString("noseDuration"));
						}
						
						if(box.getString("regionalLymphnodes") != null && !box.getString("regionalLymphnodes").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRegionalLymphnodes(box.getString("regionalLymphnodes"));
						}
						
						if(box.getString("shapeOfTheHead") != null && !box.getString("shapeOfTheHead").equals("")){
							opdPedodonticsVitalStatisticsHeader.setShapeOfTheHead(box.getString("shapeOfTheHead"));
						}
						
						if(box.getString("facialForm") != null && !box.getString("facialForm").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFacialForm(box.getString("facialForm"));
						}
						
						if(box.getString("facialSymmetry") != null && !box.getString("facialSymmetry").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFacialSymmetry(box.getString("facialSymmetry"));
						}
						
						if(box.getString("facialProfile") != null && !box.getString("facialProfile").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFacialProfile(box.getString("facialProfile"));
						}
						
						if(box.getString("lowerFacialHeight") != null && !box.getString("lowerFacialHeight").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLowerFacialHeight(box.getString("lowerFacialHeight"));
						}
						if(box.getString("upperLip") != null && !box.getString("upperLip").equals("")){
							opdPedodonticsVitalStatisticsHeader.setUpperLip(box.getString("upperLip"));
						}
						
						if(box.getString("lowerLip") != null && !box.getString("lowerLip").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLowerLip(box.getString("lowerLip"));
						}
						
						if(box.getString("lips") != null && !box.getString("lips").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLips(box.getString("lips"));
						}
						
						if(box.getString("lipTonicity") != null && !box.getString("lipTonicity").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLipTonicity(box.getString("lipTonicity"));
						}
						
						if(box.getString("lipLine") != null && !box.getString("lipLine").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLipLine(box.getString("lipLine"));
						}
						
						if(box.getString("swallowing") != null && !box.getString("swallowing").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSwallowing(box.getString("swallowing"));
						}
						
						if(box.getString("speech") != null && !box.getString("speech").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSpeech(box.getString("speech"));
						}
						
						if(box.getString("normalMovement") != null && !box.getString("normalMovement").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNormalMovement(box.getString("normalMovement"));
						}
						
						if(box.getString("normalMovementValue") != null && !box.getString("normalMovementValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setNormalMovementValue(box.getString("normalMovementValue"));
						}
						
						if(box.getString("clickingValue") != null && !box.getString("clickingValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClickingValue(box.getString("clickingValue"));
						}
						
						if(box.getString("clicking") != null && !box.getString("clicking").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClicking(box.getString("clicking"));
						}
						
						if(box.getString("crepitus") != null && !box.getString("crepitus").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCrepitus(box.getString("crepitus"));
						}
						
						if(box.getString("crepitusValue") != null && !box.getString("crepitusValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCrepitusValue(box.getString("crepitusValue"));
						}
						
						if(box.getString("anteriorDisplacement") != null && !box.getString("anteriorDisplacement").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAnteriorDisplacement(box.getString("anteriorDisplacement"));
						}
						
						if(box.getString("anteriorDisplacementValue") != null && !box.getString("anteriorDisplacementValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAnteriorDisplacementValue(box.getString("anteriorDisplacementValue"));
						}
						
						if(box.getString("posteriorDisplacement") != null && !box.getString("posteriorDisplacement").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPosteriorDisplacement(box.getString("posteriorDisplacement"));
						}
						
						if(box.getString("posteriorDisplacementValue") != null && !box.getString("posteriorDisplacementValue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPosteriorDisplacementValue(box.getString("posteriorDisplacementValue"));
						}
						
						if(box.getString("prematureContactOn") != null && !box.getString("prematureContactOn").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPrematureContactOn(box.getString("prematureContactOn"));
						}
						
						if(box.getString("intraoralExamination") != null && !box.getString("intraoralExamination").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIntraoralExamination(box.getString("intraoralExamination"));
						}
						
						if(box.getString("mucosa") != null && !box.getString("mucosa").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMucosa(box.getString("mucosa"));
						}
						
						if(box.getString("mucosaLesion") != null && !box.getString("mucosaLesion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMucosaLesion(box.getString("mucosaLesion"));
						}
						
						if(box.getString("mucosaSite") != null && !box.getString("mucosaSite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMucosaSite(box.getString("mucosaSite"));
						}
						if(box.getString("mucosaSize") != null && !box.getString("mucosaSize").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMucosaSize(box.getString("mucosaSize"));
						}

						if(box.getString("mucosaDuration") != null && !box.getString("mucosaDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMucosaDuration(box.getString("mucosaDuration"));
						}
						if(box.getString("palate") != null && !box.getString("palate").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPalate(box.getString("palate"));
						}
						if(box.getString("palateLesion") != null && !box.getString("palateLesion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPalateLesion(box.getString("palateLesion"));
						}
						if(box.getString("palateSite") != null && !box.getString("palateSite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPalateSite(box.getString("palateSite"));
						}
						if(box.getString("palateSize") != null && !box.getString("palateSize").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPalateSize(box.getString("palateSize"));
						}
						if(box.getString("palateDuration") != null && !box.getString("palateDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPalateDuration(box.getString("palateDuration"));
						}
						if(box.getString("pharynx") != null && !box.getString("pharynx").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPharynx(box.getString("pharynx"));
						}
						if(box.getString("pharynxLesion") != null && !box.getString("pharynxLesion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPharynxLesion(box.getString("pharynxLesion"));
						}
						if(box.getString("pharynxSite") != null && !box.getString("pharynxSite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPharynxSite(box.getString("pharynxSite"));
						}
						if(box.getString("pharynxSize") != null && !box.getString("pharynxSize").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPharynxSize(box.getString("pharynxSize"));
						}
						if(box.getString("pharynxDuration") != null && !box.getString("pharynxDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPharynxDuration(box.getString("pharynxDuration"));
						}
						if(box.getString("floorOfTheMouth") != null && !box.getString("floorOfTheMouth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFloorOfTheMouth(box.getString("floorOfTheMouth"));
						}
						if(box.getString("floorOfTheMouthLesion") != null && !box.getString("floorOfTheMouthLesion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFloorOfTheMouthLesion(box.getString("floorOfTheMouthLesion"));
						}
						if(box.getString("floorOfTheMouthSite") != null && !box.getString("floorOfTheMouthSite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFloorOfTheMouthSite(box.getString("floorOfTheMouthSite"));
						}
						if(box.getString("floorOfTheMouthSize") != null && !box.getString("floorOfTheMouthSize").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFloorOfTheMouthSize(box.getString("floorOfTheMouthSize"));
						}
						if(box.getString("floorOfTheMouthDuration") != null && !box.getString("floorOfTheMouthDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFloorOfTheMouthDuration(box.getString("floorOfTheMouthDuration"));
						}
						
						if(box.getString("tongue") != null && !box.getString("tongue").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongue(box.getString("tongue"));
						}
						
						if(box.getString("tongueLesion") != null && !box.getString("tongueLesion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongueLesion(box.getString("tongueLesion"));
						}
						
						if(box.getString("tongueSite") != null && !box.getString("tongueSite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongueSite(box.getString("tongueSite"));
						}
						
						if(box.getString("tongueSize") != null && !box.getString("tongueSize").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongueSize(box.getString("tongueSize"));
						}
						
						if(box.getString("tongueDuration") != null && !box.getString("tongueDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTongueDuration(box.getString("tongueDuration"));
						}
						
						if(box.getString("frenalAttachments") != null && !box.getString("frenalAttachments").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrenalAttachments(box.getString("frenalAttachments"));
						}
						
						if(box.getString("frenalAttachmentsLesion") != null && !box.getString("frenalAttachmentsLesion").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrenalAttachmentsLesion(box.getString("frenalAttachmentsLesion"));
						}
						
						if(box.getString("frenalAttachmentsSite") != null && !box.getString("frenalAttachmentsSite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrenalAttachmentsSite(box.getString("frenalAttachmentsSite"));
						}
						
						if(box.getString("frenalAttachmentsSize") != null && !box.getString("frenalAttachmentsSize").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrenalAttachmentsSize(box.getString("frenalAttachmentsSize"));
						}
						
						if(box.getString("frenalAttachmentsDuration") != null && !box.getString("frenalAttachmentsDuration").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFrenalAttachmentsDuration(box.getString("frenalAttachmentsDuration"));
						}
						
						if(box.getString("gingiva") != null && !box.getString("gingiva").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingiva(box.getString("gingiva"));
						}
						
						if(box.getString("gingivaColour") != null && !box.getString("gingivaColour").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivaColour(box.getString("gingivaColour"));
						}
						
						if(box.getString("gingivaConsistency") != null && !box.getString("gingivaConsistency").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivaConsistency(box.getString("gingivaConsistency"));
						}
						
						if(box.getString("gingivaTexture") != null && !box.getString("gingivaTexture").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivaTexture(box.getString("gingivaTexture"));
						}
						
						if(box.getString("gingivaBleeding") != null && !box.getString("gingivaBleeding").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivaBleeding(box.getString("gingivaBleeding"));
						}
						
						if(box.getString("gingivaAnyOther") != null && !box.getString("gingivaAnyOther").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivaAnyOther(box.getString("gingivaAnyOther"));
						}
						if(box.getString("gingivalIndex") != null && !box.getString("gingivalIndex").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivalIndex(box.getString("gingivalIndex"));
						}
						
						if(box.getString("score") != null && !box.getString("score").equals("")){
							opdPedodonticsVitalStatisticsHeader.setScore(box.getString("score"));
						}
						if(box.getString("gingivities") != null && !box.getString("gingivities").equals("")){
							opdPedodonticsVitalStatisticsHeader.setGingivities(box.getString("gingivities"));
						}
						
						if(box.getString("saliva") != null && !box.getString("saliva").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSaliva(box.getString("saliva"));
						}
						if(box.getString("plaqueIndex") != null && !box.getString("plaqueIndex").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPlaqueIndex(box.getString("plaqueIndex"));
						}
						
						if(box.getString("scoreOne") != null && !box.getString("scoreOne").equals("")){
							opdPedodonticsVitalStatisticsHeader.setScoreOne(box.getString("scoreOne"));
						}
						if(box.getString("oralHygiene") != null && !box.getString("oralHygiene").equals("")){
							opdPedodonticsVitalStatisticsHeader.setOralHygiene(box.getString("oralHygiene"));
						}
						
						if(box.getString("salivaOne") != null && !box.getString("salivaOne").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSalivaOne(box.getString("salivaOne"));
						}
						if(box.getString("eruptionStatus") != null && !box.getString("eruptionStatus").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEruptionStatus(box.getString("eruptionStatus"));
						}
						
						if(box.getString("dentalStage") != null && !box.getString("dentalStage").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDentalStage(box.getString("dentalStage"));
						}
						if(box.getString("incipientLession") != null && !box.getString("incipientLession").equals("")){
							opdPedodonticsVitalStatisticsHeader.setIncipientLession(box.getString("incipientLession"));
						}
						
						if(box.getString("enamelCaries") != null && !box.getString("enamelCaries").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEnamelCaries(box.getString("enamelCaries"));
						}
						if(box.getString("dentinalCaries") != null && !box.getString("dentinalCaries").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDentinalCaries(box.getString("dentinalCaries"));
						}
						
						if(box.getString("arrestedCaries") != null && !box.getString("arrestedCaries").equals("")){
							opdPedodonticsVitalStatisticsHeader.setArrestedCaries(box.getString("arrestedCaries"));
						}
						if(box.getString("pulpExposure") != null && !box.getString("pulpExposure").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPulpExposure(box.getString("pulpExposure"));
						}
						
						if(box.getString("periapicalPathology") != null && !box.getString("periapicalPathology").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPeriapicalPathology(box.getString("periapicalPathology"));
						}
						if(box.getString("rootStumps") != null && !box.getString("rootStumps").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRootStumps(box.getString("rootStumps"));
						}
						
						if(box.getString("retainedTeeth") != null && !box.getString("retainedTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRetainedTeeth(box.getString("retainedTeeth"));
						}
						if(box.getString("fracturedTeeth") != null && !box.getString("fracturedTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setFracturedTeeth(box.getString("fracturedTeeth"));
						}
						
						if(box.getString("pathologic") != null && !box.getString("pathologic").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPathologic(box.getString("pathologic"));
						}
						
						if(box.getString("physiologic") != null && !box.getString("physiologic").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPhysiologic(box.getString("physiologic"));
						}
						
						if(box.getString("congenitallyMissingTeeth") != null && !box.getString("congenitallyMissingTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCongenitallyMissingTeeth(box.getString("congenitallyMissingTeeth"));
						}
						
						if(box.getString("ectopicEruption") != null && !box.getString("ectopicEruption").equals("")){
							opdPedodonticsVitalStatisticsHeader.setEctopicEruption(box.getString("ectopicEruption"));
						}
						
						if(box.getString("bloodGroup") != null && !box.getString("bloodGroup").equals("")){
							opdPedodonticsVitalStatisticsHeader.setBloodGroup(box.getString("bloodGroup"));
						}
						
						if(box.getString("discolourationOfTeeth") != null && !box.getString("discolourationOfTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDiscolourationOfTeeth(box.getString("discolourationOfTeeth"));
						}
						
						if(box.getString("supernumeraryTeeth") != null && !box.getString("supernumeraryTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSupernumeraryTeeth(box.getString("supernumeraryTeeth"));
						}
						
						if(box.getString("dentalAnomalies") != null && !box.getString("dentalAnomalies").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDentalAnomalies(box.getString("dentalAnomalies"));
						}
						
						if(box.getString("overjet") != null && !box.getString("overjet").equals("")){
							opdPedodonticsVitalStatisticsHeader.setOverjet(box.getString("overjet"));
						}
						
						if(box.getString("overbite") != null && !box.getString("overbite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setOverbite(box.getString("overbite"));
						}
						
						if(box.getString("deepBite") != null && !box.getString("deepBite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDeepBite(box.getString("deepBite"));
						}
						
						if(box.getString("anteriorCrossBite") != null && !box.getString("anteriorCrossBite").equals("")){
							opdPedodonticsVitalStatisticsHeader.setAnteriorCrossBite(box.getString("anteriorCrossBite"));
						}
						
						if(box.getString("maxillaryIncisorAngulation") != null && !box.getString("maxillaryIncisorAngulation").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMaxillaryIncisorAngulation(box.getString("maxillaryIncisorAngulation"));
						}
						
						if(box.getString("mandibularIncisorAngulation") != null && !box.getString("mandibularIncisorAngulation").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMandibularIncisorAngulation(box.getString("mandibularIncisorAngulation"));
						}
						
						if(box.getString("maxilla") != null && !box.getString("maxilla").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMaxilla(box.getString("maxilla"));
						}
						
						if(box.getString("mandible") != null && !box.getString("mandible").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMandible(box.getString("mandible"));
						}
						
						if(box.getString("diastema") != null && !box.getString("diastema").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDiastema(box.getString("diastema"));
						}
						
						if(box.getString("diastemaMidline") != null && !box.getString("diastemaMidline").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDiastemaMidline(box.getString("diastemaMidline"));
						}
						
						if(box.getString("diastemaGeneralised") != null && !box.getString("diastemaGeneralised").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDiastemaGeneralised(box.getString("diastemaGeneralised"));
						}
						
						if(box.getString("probableCause") != null && !box.getString("probableCause").equals("")){
							opdPedodonticsVitalStatisticsHeader.setProbableCause(box.getString("probableCause"));
						}
						
						if(box.getString("max") != null && !box.getString("max").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMax(box.getString("max"));
						}
						
						if(box.getString("mand") != null && !box.getString("mand").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMand(box.getString("mand"));
						}
						if(box.getString("classIRT") != null && !box.getString("classIRT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClassIRT(box.getString("classIRT"));
						}
						
						if(box.getString("classIIRT") != null && !box.getString("classIIRT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClassIIRT(box.getString("classIIRT"));
						}
						
						if(box.getString("classIIIRT") != null && !box.getString("classIIIRT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClassIIIRT(box.getString("classIIIRT"));
						}
						
						if(box.getString("classILT") != null && !box.getString("classILT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClassILT(box.getString("classILT"));
						}
						
						if(box.getString("classIILT") != null && !box.getString("classIILT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClassIILT(box.getString("classIILT"));
						}
						
						if(box.getString("classIIILT") != null && !box.getString("classIIILT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setClassIIILT(box.getString("classIIILT"));
						}
						
						if(box.getString("rightClass") != null && !box.getString("rightClass").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRightClass(box.getString("rightClass"));
						}
						
						if(box.getString("leftClass") != null && !box.getString("leftClass").equals("")){
							opdPedodonticsVitalStatisticsHeader.setLeftClass(box.getString("leftClass"));
						}
						
						if(box.getString("terminalPlaneRight") != null && !box.getString("terminalPlaneRight").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTerminalPlaneRight(box.getString("terminalPlaneRight"));
						}
						
						if(box.getString("terminalPlaneLeft") != null && !box.getString("terminalPlaneLeft").equals("")){
							opdPedodonticsVitalStatisticsHeader.setTerminalPlaneLeft(box.getString("terminalPlaneLeft"));
						}
						
						if(box.getString("crossBiteRight") != null && !box.getString("crossBiteRight").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCrossBiteRight(box.getString("crossBiteRight"));
						}
						
						if(box.getString("crossBiteLeft") != null && !box.getString("crossBiteLeft").equals("")){
							opdPedodonticsVitalStatisticsHeader.setCrossBiteLeft(box.getString("crossBiteLeft"));
						}
						
						if(box.getString("openbitePosterior") != null && !box.getString("openbitePosterior").equals("")){
							opdPedodonticsVitalStatisticsHeader.setOpenbitePosterior(box.getString("openbitePosterior"));
						}
						
						if(box.getString("archFormMax") != null && !box.getString("archFormMax").equals("")){
							opdPedodonticsVitalStatisticsHeader.setArchFormMax(box.getString("archFormMax"));
						}
						
						if(box.getString("archFormMand") != null && !box.getString("archFormMand").equals("")){
							opdPedodonticsVitalStatisticsHeader.setArchFormMand(box.getString("archFormMand"));
						}
						
						if(box.getString("displacedTeeth") != null && !box.getString("displacedTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setDisplacedTeeth(box.getString("displacedTeeth"));
						}
						
						if(box.getString("rotatedTeeth") != null && !box.getString("rotatedTeeth").equals("")){
							opdPedodonticsVitalStatisticsHeader.setRotatedTeeth(box.getString("rotatedTeeth"));
						}
						
						if(box.getString("maxAnterior") != null && !box.getString("maxAnterior").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMaxAnterior(box.getString("maxAnterior"));
						}
						
						if(box.getString("maxPosterior") != null && !box.getString("maxPosterior").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMaxPosterior(box.getString("maxPosterior"));
						}
						
						if(box.getString("mandAnterior") != null && !box.getString("mandAnterior").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMandAnterior(box.getString("mandAnterior"));
						}
						
						if(box.getString("mandPosterior") != null && !box.getString("mandPosterior").equals("")){
							opdPedodonticsVitalStatisticsHeader.setMandPosterior(box.getString("mandPosterior"));
						}
						
						if(box.getString("prematureLossOfPrimary") != null && !box.getString("prematureLossOfPrimary").equals("")){
							opdPedodonticsVitalStatisticsHeader.setPrematureLossOfPrimary(box.getString("prematureLossOfPrimary"));
						}
						
						if(box.getString("spaceClosure") != null && !box.getString("spaceClosure").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSpaceClosure(box.getString("spaceClosure"));
						}
						
						
						
						if(box.getString("sugarsInSolutionDM") != null && !box.getString("sugarsInSolutionDM").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugarsInSolutionDM(box.getString("sugarsInSolutionDM"));
						}
						
						if(box.getString("sugarsInSolutionDMTotalExposures") != null && !box.getString("sugarsInSolutionDMTotalExposures").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugarsInSolutionDMTotalExposures(box.getString("sugarsInSolutionDMTotalExposures"));
						}
						
						if(box.getString("sugarsInSolutionBM") != null && !box.getString("sugarsInSolutionBM").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugarsInSolutionBM(box.getString("sugarsInSolutionBM"));
						}
						if(box.getString("sugarsInSolutionBMTotalExposures") != null && !box.getString("sugarsInSolutionBMTotalExposures").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugarsInSolutionBMTotalExposures(box.getString("sugarsInSolutionBMTotalExposures"));
						}
						
						
						if(box.getString("sugarsInSolutionABT") != null && !box.getString("sugarsInSolutionABT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugarsInSolutionABT(box.getString("sugarsInSolutionABT"));
						}
						
						if(box.getString("sugarsInSolutionABTTotalExposures") != null && !box.getString("sugarsInSolutionABTTotalExposures").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSugarsInSolutionABTTotalExposures(box.getString("sugarsInSolutionABTTotalExposures"));
						}
						
						
						
						if(box.getString("solidRetentiveDM") != null && !box.getString("solidRetentiveDM").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSolidRetentiveDM(box.getString("solidRetentiveDM"));
						}
						
						if(box.getString("solidRetentiveDMTotalExposures") != null && !box.getString("solidRetentiveDMTotalExposures").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSolidRetentiveDMTotalExposures(box.getString("solidRetentiveDMTotalExposures"));
						}
						
						if(box.getString("solidRetentiveBM") != null && !box.getString("solidRetentiveBM").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSolidRetentiveBM(box.getString("solidRetentiveBM"));
						}
						
						if(box.getString("solidRetentiveBMTotalExposures") != null && !box.getString("solidRetentiveBMTotalExposures").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSolidRetentiveBMTotalExposures(box.getString("solidRetentiveBMTotalExposures"));
						}
						
						if(box.getString("solidRetentiveABT") != null && !box.getString("solidRetentiveABT").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSolidRetentiveABT(box.getString("solidRetentiveABT"));
						}
						
						if(box.getString("solidRetentiveABTTotalExposures") != null && !box.getString("solidRetentiveABTTotalExposures").equals("")){
							opdPedodonticsVitalStatisticsHeader.setSolidRetentiveABTTotalExposures(box.getString("solidRetentiveABTTotalExposures"));
						}
						
					
						
						
						hbt.save(opdPedodonticsVitalStatisticsHeader);
						
						
						map.put("opdPedodonticsVitalStatisticsHeader",opdPedodonticsVitalStatisticsHeader);
				
						
						int hdbDiet = 0;
						
						if(null != box.getString("hdbDiet") && !box.getString("hdbDiet").equals("")) {
							hdbDiet = box.getInt("hdbDiet");
						}
						
						OpdPedodonticsVitalStatisticsDetails opdPedodonticsVitalStatisticsDetails = new OpdPedodonticsVitalStatisticsDetails();
						for(int j = 1; j <= hdbDiet; j++) {
								if((!box.getString("breakfastTypeQuantity" + j).equals(""))||(!box.getString("breakfastPreparation" +j).equals(""))||(!box.getString("snacksTypeQuantity" +j).equals(""))
										||(!box.getString("snacksPreparation" +j).equals(""))||(!box.getString("lunchTypeQuantity" +j).equals(""))||(!box.getString("lunchPreparation" +j).equals(""))
										||(!box.getString("snacksTypeQuantityOne" +j).equals(""))||(!box.getString("snacksPreparationOne" +j).equals(""))||(!box.getString("dinnerPreparation" +j).equals(""))
										||(!box.getString("dinnerTypeQuantity" +j).equals(""))||(!box.getString("beforeBedQuantity" +j).equals(""))||(!box.getString("beforeBedPreparation" +j).equals(""))
										){
										
									opdPedodonticsVitalStatisticsDetails = new OpdPedodonticsVitalStatisticsDetails();
									opdPedodonticsVitalStatisticsDetails.setPedodonticsVitalStatisticsHeader(opdPedodonticsVitalStatisticsHeader);
								
							if (!box.getString("breakfastTypeQuantity" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setBreakfastTypeQuantity(box.getString("breakfastTypeQuantity" + j));
							}
							if (!box.getString("breakfastPreparation" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setBreakfastPreparation(box.getString("breakfastPreparation" + j));
							}
							if (!box.getString("snacksTypeQuantity" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setSnacksTypeQuantity(box.getString("snacksTypeQuantity" + j));
							}
							if (!box.getString("snacksPreparation" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setSnacksPreparation(box.getString("snacksPreparation" + j));
							}
							if (!box.getString("lunchTypeQuantity" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setLunchTypeQuantity(box.getString("lunchTypeQuantity" + j));
							}
							if (!box.getString("lunchPreparation" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setLunchPreparation(box.getString("lunchPreparation" + j));
							}
							if (!box.getString("snacksTypeQuantityOne" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setSnacksTypeQuantityOne(box.getString("snacksTypeQuantityOne" + j));
							}
							if (!box.getString("snacksPreparationOne" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setSnacksPreparationOne(box.getString("snacksPreparationOne" + j));
							}
							if (!box.getString("dinnerTypeQuantity" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setDinnerTypeQuantity(box.getString("dinnerTypeQuantity" + j));
							}
							if (!box.getString("dinnerPreparation" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setDinnerPreparation(box.getString("dinnerPreparation" + j));
							}
							if (!box.getString("beforeBedQuantity" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setBeforeBedQuantity(box.getString("beforeBedQuantity" + j));
							}
							if (!box.getString("beforeBedPreparation" + j).equals("")) {
								opdPedodonticsVitalStatisticsDetails.setBeforeBedPreparation(box.getString("beforeBedPreparation" + j));
							}
							hbt.save(opdPedodonticsVitalStatisticsDetails);
							}
								
						}
								int hdbDietAnalysis = 0;
								
								if(null != box.getString("hdbDietAnalysis") && !box.getString("hdbDietAnalysis").equals("")) {
									hdbDietAnalysis = box.getInt("hdbDietAnalysis");
								}
								
								
								for(int i = 1; i<= hdbDietAnalysis; i++) {
									OpdPedodonticsVitalStatisticsDietAnalysis opdPedodonticsVitalStatisticsDietAnalysis = new OpdPedodonticsVitalStatisticsDietAnalysis();
									if((!box.getString("foodGroup" + i).equals(""))||(!box.getString("foodConsumptionsInServingOne" + i).equals(""))||(!box.getString("foodConsumptionsInServingTwo" +i).equals(""))||
									(!box.getString("foodConsumptionsInServingThree" + i).equals(""))||(!box.getString("foodConsumptionsInServingFour" + i).equals(""))||(!box.getString("foodConsumptionsInServingFive" + i).equals(""))||
									(!box.getString("totalConsumption" + i).equals(""))||(!box.getString("foodConsumptionsInServingSex" + i).equals(""))||(!box.getString("dailyRecommendedServings" + i).equals(""))||
									(!box.getString("difference" + i).equals("")))
									{
									
									
									if (!box.getString("foodGroup" + i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodGroup(box.getString("foodGroup" + i));
									}
									if (!box.getString("foodConsumptionsInServingOne"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodConsumptionsInServingOne(box.getString("foodConsumptionsInServingOne"+ i));
									}
									if (!box.getString("foodConsumptionsInServingTwo"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodConsumptionsInServingTwo(box.getString("foodConsumptionsInServingTwo"+ i));
									}
									if (!box.getString("foodConsumptionsInServingThree"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodConsumptionsInServingThree(box.getString("foodConsumptionsInServingThree"+ i));
									}
									if (!box.getString("foodConsumptionsInServingFour"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodConsumptionsInServingFour(box.getString("foodConsumptionsInServingFour"+ i));
									}
									if (!box.getString("foodConsumptionsInServingFive"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodConsumptionsInServingFive(box.getString("foodConsumptionsInServingFive"+ i));
									}
									if (!box.getString("totalConsumption"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setTotalConsumption(box.getString("totalConsumption"+ i));
									}
									if (!box.getString("foodConsumptionsInServingSix"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setFoodConsumptionsInServingSix(box.getString("foodConsumptionsInServingSix"+ i));
									}
									if (!box.getString("dailyRecommendedServings"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setDailyRecommendedServings(box.getString("dailyRecommendedServings"+ i));
									}
									if (!box.getString("difference"+ i).equals("")) {
										opdPedodonticsVitalStatisticsDietAnalysis.setDifference(box.getString("difference"+ i));
									}
								
									opdPedodonticsVitalStatisticsDietAnalysis.setPedodonticsVitalStatisticsHeader(opdPedodonticsVitalStatisticsHeader);
									hbt.save(opdPedodonticsVitalStatisticsDietAnalysis);
								}	
						}
						
						
						
						
						
				tnx.commit();
			}catch(Exception e){
				e.printStackTrace();
			}
			return map;
			}

				@Override
				public Map<String, Object> saveOralMedicinePathology(Map<String, Object> mapForDs, Box box,HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						
						OpdOralMedicinePathology opdOralMedicinePathology = new OpdOralMedicinePathology();
						
						
						int hdb = 1;
						String symptoms = "";
						int dentalId = 0;
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
							hinId = (Integer) mapForDs.get("hinId");
						}
						if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
							visitId = (Integer) mapForDs.get("visitId");
						}
						if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
							departmentId = (Integer) mapForDs.get("departmentId");
						}
						if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
							hospitalId = (Integer) mapForDs.get("hospitalId");
						}
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
						
						
						
						Patient patient = new Patient();
						patient.setId(hinId);
						opdOralMedicinePathology.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdOralMedicinePathology.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdOralMedicinePathology.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdOralMedicinePathology.setHospital(masHospital);
						
						if(null != box.getString("presentingComplaints") && !box.getString("presentingComplaints").equals(""))
							opdOralMedicinePathology.setPresentingComplaints(box.getString("presentingComplaints"));
						if(null != box.getString("historyOfPresentingComplaint") && !box.getString("historyOfPresentingComplaint").equals(""))
							opdOralMedicinePathology.setHistoryPresentingComplaint(box.getString("historyOfPresentingComplaint"));
						if(null != box.getString("pastMedicalDentalHistory") && !box.getString("pastMedicalDentalHistory").equals(""))
							opdOralMedicinePathology.setPastMedicalDentalHistory(box.getString("pastMedicalDentalHistory"));
						if(null != box.getString("familyHistory") && !box.getString("familyHistory").equals(""))
							opdOralMedicinePathology.setFamilyHistory(box.getString("familyHistory"));
						if(null != box.getString("personalSocialHistory") && !box.getString("personalSocialHistory").equals(""))
							opdOralMedicinePathology.setPersonalSocialHistory(box.getString("personalSocialHistory"));
						if(null != box.getString("dietaryHabits") && !box.getString("dietaryHabits").equals(""))
							opdOralMedicinePathology.setDietaryHabbits(box.getString("dietaryHabits"));
						if(null != box.getString("brushingHabits") && !box.getString("brushingHabits").equals(""))
							opdOralMedicinePathology.setBrushingHabbits(box.getString("brushingHabits"));
						if(null != box.getString("SmokingCurrently") && !box.getString("SmokingCurrently").equals(""))
							opdOralMedicinePathology.setSmokingCurrently(box.getString("SmokingCurrently"));

						if(null != box.getString("SmokingCurrently") && box.getString("SmokingCurrently").equals("Yes"))
							opdOralMedicinePathology.setSmokingCurrently("Yes");
						else
							opdOralMedicinePathology.setSmokingCurrently("No");
						if(null != box.getString("Smokeless") && box.getString("Smokeless").equals("Yes"))
							opdOralMedicinePathology.setSmokelessCurrently("Yes");
						else
							opdOralMedicinePathology.setSmokelessCurrently("No");
						if(null != box.getString("Alcohol") && box.getString("Alcohol").equals("Yes"))
							opdOralMedicinePathology.setAlcoholCurrently("Yes");
						else
							opdOralMedicinePathology.setAlcoholCurrently("No");
						if(null != box.getString("Smokingdaily") && box.getString("Smokingdaily").equals("Yes"))
							opdOralMedicinePathology.setSmokingDailyPast("Yes");
						else
							opdOralMedicinePathology.setSmokingDailyPast("No");
						if(null != box.getString("Smokelessdaily") && box.getString("Smokelessdaily").equals("Yes"))
							opdOralMedicinePathology.setSmokelessDailyPast("Yes");
						else
							opdOralMedicinePathology.setSmokelessDailyPast("No");
						if(null != box.getString("Alcoholdaily") && box.getString("Alcoholdaily").equals("Yes"))
							opdOralMedicinePathology.setAlcoholDailyPast("Yes");
						else
							opdOralMedicinePathology.setAlcoholDailyPast("No");
						if(null != box.getString("Smokingfrequency") && box.getString("Smokingfrequency").equals("Yes"))
							opdOralMedicinePathology.setSmokingFrequencyPast("Yes");
						else
							opdOralMedicinePathology.setSmokingFrequencyPast("No");
						if(null != box.getString("Smokelessfrequency") && box.getString("Smokelessfrequency").equals("Yes"))
							opdOralMedicinePathology.setSmokelessFrequencyPast("Yes");
						else
							opdOralMedicinePathology.setSmokelessFrequencyPast("No");
						if(null != box.getString("Alcoholfrequency") && box.getString("Alcoholfrequency").equals("Yes"))
							opdOralMedicinePathology.setAlcoholFrequencyPast("Yes");
						else
							opdOralMedicinePathology.setAlcoholFrequencyPast("No");

						if(null != box.getString("SmokingDailyStartAge") && !box.getString("SmokingDailyStartAge").equals(""))
							opdOralMedicinePathology.setSmokingDailyStartAge(box.getInt("SmokingDailyStartAge"));
						if(null != box.getString("SmokelessDailyStartAge") && !box.getString("SmokelessDailyStartAge").equals(""))
							opdOralMedicinePathology.setSmokelessDailyStartAge(box.getInt("SmokelessDailyStartAge"));
						if(null != box.getString("AlcoholDailyStartAge") && !box.getString("AlcoholDailyStartAge").equals(""))
							opdOralMedicinePathology.setAlcoholDailyStartAge(box.getInt("AlcoholDailyStartAge"));
						if(null != box.getString("SmokingDailyStartYear") && !box.getString("SmokingDailyStartYear").equals(""))
							opdOralMedicinePathology.setSmokingDailyStartYear(box.getInt("SmokingDailyStartYear"));
						if(null != box.getString("SmokelessDailyStartYear") && !box.getString("SmokelessDailyStartYear").equals(""))
							opdOralMedicinePathology.setSmokelessDailyStartYear(box.getInt("SmokelessDailyStartYear"));
						if(null != box.getString("AlcoholDailyStartYear") && !box.getString("AlcoholDailyStartYear").equals(""))
							opdOralMedicinePathology.setAlcoholDailyStartYear(box.getInt("AlcoholDailyStartYear"));
						if(null != box.getString("SmokingDailyProduct") && !box.getString("SmokingDailyProduct").equals(""))
							opdOralMedicinePathology.setSmokingDailyProduct(box.getInt("SmokingDailyProduct"));
						if(null != box.getString("SmokelessDailyProduct") && !box.getString("SmokelessDailyProduct").equals(""))
							opdOralMedicinePathology.setSmokelessDailyProduct(box.getInt("SmokelessDailyProduct"));
						if(null != box.getString("AlcoholDailyProduct") && !box.getString("AlcoholDailyProduct").equals(""))
							opdOralMedicinePathology.setAlcoholDailyProduct(box.getInt("AlcoholDailyProduct"));
						if(null != box.getString("SmokingAfterWakeup") && !box.getString("SmokingAfterWakeup").equals(""))
							opdOralMedicinePathology.setSmokingAfterWakeup(box.getInt("SmokingAfterWakeup"));
						if(null != box.getString("SmokelessAfterWakeup") && !box.getString("SmokelessAfterWakeup").equals(""))
							opdOralMedicinePathology.setSmokelessAfterWakeup(box.getInt("SmokelessAfterWakeup"));
						if(null != box.getString("AlcoholAfterWakeup") && !box.getString("AlcoholAfterWakeup").equals(""))
							opdOralMedicinePathology.setAlcoholAfterWakeup(box.getInt("AlcoholAfterWakeup"));
						if(null != box.getString("SmokingLessDailyStartAge") && !box.getString("SmokingLessDailyStartAge").equals(""))
							opdOralMedicinePathology.setSmokingLessDailyStartAge(box.getInt("SmokingLessDailyStartAge"));
						if(null != box.getString("SmokelessLessDailyStartAge") && !box.getString("SmokelessLessDailyStartAge").equals(""))
							opdOralMedicinePathology.setSmokelessLessDailyStartAge(box.getInt("SmokelessLessDailyStartAge"));
						if(null != box.getString("AlcoholLessDailyStartAge") && !box.getString("AlcoholLessDailyStartAge").equals(""))
							opdOralMedicinePathology.setAlcoholLessDailyStartAge(box.getInt("AlcoholLessDailyStartAge"));
						if(null != box.getString("SmokingLessDailyStartYear") && !box.getString("SmokingLessDailyStartYear").equals(""))
							opdOralMedicinePathology.setSmokingLessDailyStartYear(box.getInt("SmokingLessDailyStartYear"));
						if(null != box.getString("SmokelessLessDailyStartYear") && !box.getString("SmokelessLessDailyStartYear").equals(""))
							opdOralMedicinePathology.setSmokelessLessDailyStartYear(box.getInt("SmokelessLessDailyStartYear"));
						if(null != box.getString("AlcoholLessDailyStartYear") && !box.getString("AlcoholLessDailyStartYear").equals(""))
							opdOralMedicinePathology.setAlcoholLessDailyStartYear(box.getInt("AlcoholLessDailyStartYear"));
						if(null != box.getString("SmokingLessDailyProduct") && !box.getString("SmokingLessDailyProduct").equals(""))
							opdOralMedicinePathology.setSmokingLessDailyProduct(box.getInt("SmokingLessDailyProduct"));
						if(null != box.getString("SmokelessLessDailyProduct") && !box.getString("SmokelessLessDailyProduct").equals(""))
							opdOralMedicinePathology.setSmokelessLessDailyProduct(box.getInt("SmokelessLessDailyProduct"));
						if(null != box.getString("AlcoholLessDailyProduct") && !box.getString("AlcoholLessDailyProduct").equals(""))
							opdOralMedicinePathology.setAlcoholLessDailyProduct(box.getInt("AlcoholLessDailyProduct"));
						if(null != box.getString("SmokingDailyStartAgeFormer") && !box.getString("SmokingDailyStartAgeFormer").equals(""))
							opdOralMedicinePathology.setSmokingDailyStartAgeFormer(box.getInt("SmokingDailyStartAgeFormer"));
						if(null != box.getString("SmokelessDailyStartAgeFormer") && !box.getString("SmokelessDailyStartAgeFormer").equals(""))
							opdOralMedicinePathology.setSmokelessDailyStartAgeFormer(box.getInt("SmokelessDailyStartAgeFormer"));
						if(null != box.getString("AlcoholDailyStartAgeFormer") && !box.getString("AlcoholDailyStartAgeFormer").equals(""))
							opdOralMedicinePathology.setAlcoholDailyStartAgeFormer(box.getInt("AlcoholDailyStartAgeFormer"));
						if(null != box.getString("SmokingDailyStartYearFormer") && !box.getString("SmokingDailyStartYearFormer").equals(""))
							opdOralMedicinePathology.setSmokingDailyStartYearFormer(box.getInt("SmokingDailyStartYearFormer"));
						if(null != box.getString("SmokelessDailyStartYearFormer") && !box.getString("SmokelessDailyStartYearFormer").equals(""))
							opdOralMedicinePathology.setSmokelessDailyStartYearFormer(box.getInt("SmokelessDailyStartYearFormer"));
						if(null != box.getString("AlcoholDailyStartYearFormer") && !box.getString("AlcoholDailyStartYearFormer").equals(""))
							opdOralMedicinePathology.setAlcoholDailyStartYearFormer(box.getInt("AlcoholDailyStartYearFormer"));
						if(null != box.getString("SmokingStopYearFormer") && !box.getString("SmokingStopYearFormer").equals(""))
							opdOralMedicinePathology.setSmokingStopYearFormer(box.getInt("SmokingStopYearFormer"));
						if(null != box.getString("SmokelessStopYearFormer") && !box.getString("SmokelessStopYearFormer").equals(""))
							opdOralMedicinePathology.setSmokelessStopYearFormer(box.getInt("SmokelessStopYearFormer"));
						if(null != box.getString("AlcoholStopYearFormer") && !box.getString("AlcoholStopYearFormer").equals(""))
							opdOralMedicinePathology.setAlcoholStopYearFormer(box.getInt("AlcoholStopYearFormer"));

						if(null != box.getString("SmokingVisitedDoctorFromer") && box.getString("SmokingVisitedDoctorFromer").equals("Yes"))
							opdOralMedicinePathology.setSmokingVisitedDoctorFromer("Yes");
						else
							opdOralMedicinePathology.setSmokingVisitedDoctorFromer("No");
						if(null != box.getString("SmokelessVisitedDoctorFromer") && box.getString("SmokelessVisitedDoctorFromer").equals("Yes"))
							opdOralMedicinePathology.setSmokelessVisitedDoctorFromer("Yes");
						else
							opdOralMedicinePathology.setSmokelessVisitedDoctorFromer("No");
						if(null != box.getString("AlcoholVisitedDoctorFromer") && box.getString("AlcoholVisitedDoctorFromer").equals("Yes"))
							opdOralMedicinePathology.setAlcoholVisitedDoctorFromer("Yes");
						else
							opdOralMedicinePathology.setAlcoholVisitedDoctorFromer("No");

						if(null != box.getString("SmokingNoVisitedDoctorFromer") && !box.getString("SmokingNoVisitedDoctorFromer").equals(""))
							opdOralMedicinePathology.setSmokingNoVisitedDoctorFromer(box.getInt("SmokingNoVisitedDoctorFromer"));
						if(null != box.getString("SmokelessNoVisitedDoctorFromer") && !box.getString("SmokelessNoVisitedDoctorFromer").equals(""))
							opdOralMedicinePathology.setSmokelessNoVisitedDoctorFromer(box.getInt("SmokelessNoVisitedDoctorFromer"));
						if(null != box.getString("AlcoholNoVisitedDoctorFromer") && !box.getString("AlcoholNoVisitedDoctorFromer").equals(""))
							opdOralMedicinePathology.setAlcoholNoVisitedDoctorFromer(box.getInt("AlcoholNoVisitedDoctorFromer"));

						if(null != box.getString("docotr") && box.getString("docotr").equals("Yes"))
							opdOralMedicinePathology.setSmokingDoctorAskFromer("Yes");
						else
							opdOralMedicinePathology.setSmokingDoctorAskFromer("No");
						if(null != box.getString("docotrr") && box.getString("docotrr").equals("Yes"))
							opdOralMedicinePathology.setSmokelessDoctorAskFromer("Yes");
						else
							opdOralMedicinePathology.setSmokelessDoctorAskFromer("No");
						if(null != box.getString("docotrrr") && box.getString("docotrrr").equals("Yes"))
							opdOralMedicinePathology.setAlcoholDoctorAskFromer("Yes");
						else
							opdOralMedicinePathology.setAlcoholDoctorAskFromer("No");
						if(null != box.getString("visit") && box.getString("visit").equals("Yes"))
							opdOralMedicinePathology.setSmokingQuitTobacooFromer("Yes");
						else
							opdOralMedicinePathology.setSmokingQuitTobacooFromer("No");
						if(null != box.getString("visitt") && box.getString("visitt").equals("Yes"))
							opdOralMedicinePathology.setSmokelessQuitTobacooFromer("Yes");
						else
							opdOralMedicinePathology.setSmokelessQuitTobacooFromer("No");
						if(null != box.getString("visittt") && box.getString("visittt").equals("Yes"))
							opdOralMedicinePathology.setAlcoholQuitTobacooFromer("Yes");
						else
							opdOralMedicinePathology.setAlcoholQuitTobacooFromer("No");
						if(null != box.getString("any") && box.getString("any").equals("Yes"))
							opdOralMedicinePathology.setSmokingQuitAnyFromer("Yes");
						else
							opdOralMedicinePathology.setSmokingQuitAnyFromer("No");
						if(null != box.getString("anyy") && box.getString("anyy").equals("Yes"))
							opdOralMedicinePathology.setSmokelessQuitAnyFromer("Yes");
						else
							opdOralMedicinePathology.setSmokelessQuitAnyFromer("No");
						if(null != box.getString("anyyy") && box.getString("anyyy").equals("Yes"))
							opdOralMedicinePathology.setAlcoholQuitAnyFromer("Yes");
						else
							opdOralMedicinePathology.setAlcoholQuitAnyFromer("No");
						if(null != box.getString("cessation") && box.getString("cessation").equals("Yes"))
							opdOralMedicinePathology.setSmokingTryStop("Yes");
						else
							opdOralMedicinePathology.setSmokingTryStop("No");
						if(null != box.getString("cessationn") && box.getString("cessationn").equals("Yes"))
							opdOralMedicinePathology.setSmokelessTryStop("Yes");
						else
							opdOralMedicinePathology.setSmokelessTryStop("No");
						if(null != box.getString("cessationnn") && box.getString("cessationnn").equals("Yes"))
							opdOralMedicinePathology.setAlcoholTryStop("Yes");
						else
							opdOralMedicinePathology.setAlcoholTryStop("No");

						if(null != box.getString("SmokingQuitPeriod") && !box.getString("SmokingQuitPeriod").equals(""))
							opdOralMedicinePathology.setSmokingQuitPeriod(box.getInt("SmokingQuitPeriod"));
						if(null != box.getString("SmokelessQuitPeriod") && !box.getString("SmokelessQuitPeriod").equals(""))
							opdOralMedicinePathology.setSmokelessQuitPeriod(box.getInt("SmokelessQuitPeriod"));
						if(null != box.getString("AlcoholQuitPeriod") && !box.getString("AlcoholQuitPeriod").equals(""))
							opdOralMedicinePathology.setAlcoholQuitPeriod(box.getInt("AlcoholQuitPeriod"));

						if(null != box.getString("SmokingTryStopUsing") && box.getString("SmokingTryStopUsing").equals("Yes"))
							opdOralMedicinePathology.setSmokingTryStopUsing("Yes");
						else
							opdOralMedicinePathology.setSmokingTryStopUsing("No");
						if(null != box.getString("SmokelessTryStopUsing") && box.getString("SmokelessTryStopUsing").equals("Yes"))
							opdOralMedicinePathology.setSmokelessTryStopUsing("Yes");
						else
							opdOralMedicinePathology.setSmokelessTryStopUsing("No");
						if(null != box.getString("AlcoholTryStopUsing") && box.getString("AlcoholTryStopUsing").equals("Yes"))
							opdOralMedicinePathology.setAlcoholTryStopUsing("Yes");
						else
							opdOralMedicinePathology.setAlcoholTryStopUsing("No");

						if(null != box.getString("SmokingTryQuitting") && !box.getString("SmokingTryQuitting").equals(""))
							opdOralMedicinePathology.setSmokingTryQuitting(box.getString("SmokingTryQuitting"));
						if(null != box.getString("SmokelessTryQuitting") && !box.getString("SmokelessTryQuitting").equals(""))
							opdOralMedicinePathology.setSmokelessTryQuitting(box.getString("SmokelessTryQuitting"));
						if(null != box.getString("AlcoholTryQuitting") && !box.getString("AlcoholTryQuitting").equals(""))
							opdOralMedicinePathology.setAlcoholTryQuitting(box.getString("AlcoholTryQuitting"));
						

						

						if(null != box.getString("Developmental") && !box.getString("Developmental").equals(""))
							opdOralMedicinePathology.setGenDevelopmental(box.getString("Developmental"));
						if(null != box.getString("Nutritional") && !box.getString("Nutritional").equals(""))
							opdOralMedicinePathology.setGenNutritional(box.getString("Nutritional"));
						if(null != box.getString("Head") && !box.getString("Head").equals(""))
							opdOralMedicinePathology.setGenHead(box.getString("Head"));
						if(null != box.getString("Skull") && !box.getString("Skull").equals(""))
							opdOralMedicinePathology.setGenSkull(box.getString("Skull"));
						if(null != box.getString("Eyes") && !box.getString("Eyes").equals(""))
							opdOralMedicinePathology.setGenEyes(box.getString("Eyes"));
						if(null != box.getString("Ears") && !box.getString("Ears").equals(""))
							opdOralMedicinePathology.setGenEars(box.getString("Ears"));
						if(null != box.getString("Nose") && !box.getString("Nose").equals(""))
							opdOralMedicinePathology.setGenNose(box.getString("Nose"));
						if(null != box.getString("Skin") && !box.getString("Skin").equals(""))
							opdOralMedicinePathology.setGenSkin(box.getString("Skin"));
						if(null != box.getString("Hair") && !box.getString("Hair").equals(""))
							opdOralMedicinePathology.setGenHair(box.getString("Hair"));
						if(null != box.getString("Nails") && !box.getString("Nails").equals(""))
							opdOralMedicinePathology.setGenNails(box.getString("Nails"));
						if(null != box.getString("LymphNodes") && !box.getString("LymphNodes").equals(""))
							opdOralMedicinePathology.setGenLymphNodes(box.getString("LymphNodes"));
						
						if(null != box.getString("alimentarySystem") && !box.getString("alimentarySystem").equals(""))
							opdOralMedicinePathology.setAlimentarySystem(box.getString("alimentarySystem"));
						if(null != box.getString("respiratorySystem") && !box.getString("respiratorySystem").equals(""))
							opdOralMedicinePathology.setRespiratorySystem(box.getString("respiratorySystem"));
						if(null != box.getString("cardiovascularSystem") && !box.getString("cardiovascularSystem").equals(""))
							opdOralMedicinePathology.setCardiovascularSystem(box.getString("cardiovascularSystem"));
						if(null != box.getString("centralNervousSystem") && !box.getString("centralNervousSystem").equals(""))
							opdOralMedicinePathology.setCentralNervousSystem(box.getString("centralNervousSystem"));
						if(null != box.getString("musculoskeletalSystem") && !box.getString("musculoskeletalSystem").equals(""))
							opdOralMedicinePathology.setMusculoskeletalSystem(box.getString("musculoskeletalSystem"));
						if(null != box.getString("genitourinarySystem") && !box.getString("genitourinarySystem").equals(""))
							opdOralMedicinePathology.setGenitourinarySystem(box.getString("genitourinarySystem"));
						
						if(null != box.getString("OralHead") && !box.getString("OralHead").equals(""))
							opdOralMedicinePathology.setOralHead(box.getString("OralHead"));
						if(null != box.getString("OralFacialForm") && !box.getString("OralFacialForm").equals(""))
							opdOralMedicinePathology.setOralFacialForm(box.getString("OralFacialForm"));
						if(null != box.getString("OralHair") && !box.getString("OralHair").equals(""))
							opdOralMedicinePathology.setOralHair(box.getString("OralHair"));
						if(null != box.getString("OralSkin") && !box.getString("OralSkin").equals(""))
							opdOralMedicinePathology.setOralSkin(box.getString("OralSkin"));
						if(null != box.getString("OralEyes") && !box.getString("OralEyes").equals(""))
							opdOralMedicinePathology.setOralEyes(box.getString("OralEyes"));
						if(null != box.getString("OralEar") && !box.getString("OralEar").equals(""))
							opdOralMedicinePathology.setOralEar(box.getString("OralEar"));
						if(null != box.getString("OralNose") && !box.getString("OralNose").equals(""))
							opdOralMedicinePathology.setOralNose(box.getString("OralNose"));
						if(null != box.getString("OralThroat") && !box.getString("OralThroat").equals(""))
							opdOralMedicinePathology.setOralThroat(box.getString("OralThroat"));
						if(null != box.getString("salivaryGlands") && box.getString("salivaryGlands").equals("Palpable"))
							opdOralMedicinePathology.setOralSalivaryGlands("Palpable");
						if(null != box.getString("salivaryGlands") && box.getString("salivaryGlands").equals("NonPalpable"))
							opdOralMedicinePathology.setOralSalivaryGlands("NonPalpable");
						if(null != box.getString("PalpableTxt") && !box.getString("PalpableTxt").equals(""))
							opdOralMedicinePathology.setOralSalivaryGlandsPalpable(box.getString("PalpableTxt"));
						if(null != box.getString("OralCranialNervesExamination") && !box.getString("OralCranialNervesExamination").equals(""))
							opdOralMedicinePathology.setOralCranialNervesExamination(box.getString("OralCranialNervesExamination"));
						if(null != box.getString("OralNeck") && !box.getString("OralNeck").equals(""))
							opdOralMedicinePathology.setOralNeck(box.getString("OralNeck"));
						if(null != box.getString("OralTmj") && !box.getString("OralTmj").equals(""))
							opdOralMedicinePathology.setOralTmj(box.getString("OralTmj"));

						if(null != box.getString("SubmentalSubmandibular") && box.getString("SubmentalSubmandibular").equals("Yes"))
							opdOralMedicinePathology.setSubmentalSubmandibular("Yes");
						else
							opdOralMedicinePathology.setSubmentalSubmandibular("No");
						if(null != box.getString("HighJugular") && box.getString("HighJugular").equals("Yes"))
							opdOralMedicinePathology.setHighJugular("Yes");
						else
							opdOralMedicinePathology.setHighJugular("No");
						if(null != box.getString("MidJugular") && box.getString("MidJugular").equals("Yes"))
							opdOralMedicinePathology.setMidJugular("Yes");
						else
							opdOralMedicinePathology.setMidJugular("No");
						if(null != box.getString("LowJugular") && box.getString("LowJugular").equals("Yes"))
							opdOralMedicinePathology.setLowJugular("Yes");
						else
							opdOralMedicinePathology.setLowJugular("No");
						if(null != box.getString("PosteriorJugular") && box.getString("PosteriorJugular").equals("Yes"))
							opdOralMedicinePathology.setPosteriorJugular("Yes");
						else
							opdOralMedicinePathology.setPosteriorJugular("No");
						if(null != box.getString("TracheoOesophageal") && box.getString("TracheoOesophageal").equals("Yes"))
							opdOralMedicinePathology.setTracheoOesophageal("Yes");
						else
							opdOralMedicinePathology.setTracheoOesophageal("No");
						if(null != box.getString("SuperiorMediastinal") && box.getString("SuperiorMediastinal").equals("Yes"))
							opdOralMedicinePathology.setSuperiorMediastinal("Yes");
						else
							opdOralMedicinePathology.setSuperiorMediastinal("No");
						if(null != box.getString("MouthOpening") && !box.getString("MouthOpening").equals(""))
							opdOralMedicinePathology.setMouthOpening(box.getString("MouthOpening"));
						if(null != box.getString("OralHygieneStatus") && box.getString("OralHygieneStatus").equals("Poor"))
							opdOralMedicinePathology.setOralHygieneStatus("Poor");
						if(null != box.getString("OralHygieneStatus") && box.getString("OralHygieneStatus").equals("Fair"))
							opdOralMedicinePathology.setOralHygieneStatus("Fair");
						if(null != box.getString("OralHygieneStatus") && box.getString("OralHygieneStatus").equals("No"))
							opdOralMedicinePathology.setOralHygieneStatus("No");
						if(null != box.getString("DentitionStatus") && !box.getString("DentitionStatus").equals(""))
							opdOralMedicinePathology.setDentitionStatus(box.getString("DentitionStatus"));
						if(null != box.getString("Inspection") && !box.getString("Inspection").equals(""))
							opdOralMedicinePathology.setTongueInspection(box.getString("Inspection"));
						if(null != box.getString("Dorsum") && !box.getString("Dorsum").equals(""))
							opdOralMedicinePathology.setDorsum(box.getString("Dorsum"));
						if(null != box.getString("Ventral") && !box.getString("Ventral").equals(""))
							opdOralMedicinePathology.setVentralSurface(box.getString("Ventral"));
						if(null != box.getString("lactation") && !box.getString("lactation").equals(""))
							opdOralMedicinePathology.setLateralBorder(box.getString("Ventral"));
							
					/*		opdOralMedicinePathology.setLateralBorder("Yes");
						else
							opdOralMedicinePathology.setLateralBorder("Yes");*/
						if(null != box.getString("Local") && !box.getString("Local").equals(""))
							opdOralMedicinePathology.setLocalExaminationFindings(box.getString("Local"));
						if(null != box.getString("Case") && !box.getString("Case").equals(""))
							opdOralMedicinePathology.setCaseSummary(box.getString("Case"));
						
						
						hbt.save(opdOralMedicinePathology);
						
						
						map.put("opdOralMedicinePathology",opdOralMedicinePathology);
						
						
						
						
					OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
						opdPreAssessmentClinicDental.setFlag("Primary Dentition");
						opdPreAssessmentClinicDental.setHin(patient);
						opdPreAssessmentClinicDental.setVisit(visit);
						opdPreAssessmentClinicDental.setDepartment(masDepartment);
						opdPreAssessmentClinicDental.setHospital(masHospital);
						opdPreAssessmentClinicDental.setMedicinePathology(opdOralMedicinePathology);
						opdPreAssessmentClinicDental.setTemplateName("Oral Medicine Pathology");
						// for reading the checkBox value
						if(null != box.getString("data18") && !box.getString("data18").equals(""))
							opdPreAssessmentClinicDental.setTeeth18("y");
						else
							opdPreAssessmentClinicDental.setTeeth18("n");
						// for dropdown value
						String[] teeth_18_valueList=null;
						StringBuilder  tempTeeth_18_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
							teeth_18_valueList=request.getParameterValues("teeth_18_value");
							for(String teeth18Value:teeth_18_valueList){
								tempTeeth_18_value.append(teeth18Value);
								tempTeeth_18_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
						}
						
						if(null != box.getString("data17") && !box.getString("data17").equals(""))
							opdPreAssessmentClinicDental.setTeeth17("y");
						else
							opdPreAssessmentClinicDental.setTeeth17("n");
						
						String[] teeth_17_valueList=null;
						StringBuilder  tempTeeth_17_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
							teeth_17_valueList=request.getParameterValues("teeth_17_value");
							for(String teeth17Value:teeth_17_valueList){
								tempTeeth_17_value.append(teeth17Value);
								tempTeeth_17_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
						}
						
						if(null != box.getString("data16") && !box.getString("data16").equals(""))
							opdPreAssessmentClinicDental.setTeeth16("y");
						else
							opdPreAssessmentClinicDental.setTeeth16("n");
						
						String[] teeth_16_valueList=null;
						StringBuilder  tempTeeth_16_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
							teeth_16_valueList=request.getParameterValues("teeth_16_value");
							for(String teeth16Value:teeth_16_valueList){
								tempTeeth_16_value.append(teeth16Value);
								tempTeeth_16_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
						}
						
						if(null != box.getString("data15") && !box.getString("data15").equals(""))
							opdPreAssessmentClinicDental.setTeeth15("y");
						else
							opdPreAssessmentClinicDental.setTeeth15("n");

						String[] teeth_15_valueList=null;
						StringBuilder  tempTeeth_15_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
							teeth_15_valueList = request.getParameterValues("teeth_15_value");
							for(String teeth15Value : teeth_15_valueList){
								tempTeeth_15_value.append(teeth15Value);
								tempTeeth_15_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
						}
						
						if(null != box.getString("data14") && !box.getString("data14").equals(""))
							opdPreAssessmentClinicDental.setTeeth14("y");
						else
							opdPreAssessmentClinicDental.setTeeth14("n");
						
						String[] teeth_14_valueList=null;
						StringBuilder  tempTeeth_14_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
							teeth_14_valueList=request.getParameterValues("teeth_14_value");
							for(String teeth14Value:teeth_14_valueList){
								tempTeeth_14_value.append(teeth14Value);
								tempTeeth_14_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
						}
						
						if(null != box.getString("data13") && !box.getString("data13").equals(""))
							opdPreAssessmentClinicDental.setTeeth13("y");
						else
							opdPreAssessmentClinicDental.setTeeth13("n");
						
						String[] teeth_13_valueList=null;
						StringBuilder  tempTeeth_13_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
							teeth_13_valueList=request.getParameterValues("teeth_13_value");
							for(String teeth13Value:teeth_13_valueList){
								tempTeeth_13_value.append(teeth13Value);
								tempTeeth_13_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
						}
						
						if(null != box.getString("data12") && !box.getString("data12").equals(""))
							opdPreAssessmentClinicDental.setTeeth12("y");
						else
							opdPreAssessmentClinicDental.setTeeth12("n");
						
						String[] teeth_12_valueList=null;
						StringBuilder  tempTeeth_12_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
							teeth_12_valueList=request.getParameterValues("teeth_12_value");
							for(String teeth12Value:teeth_12_valueList){
								tempTeeth_12_value.append(teeth12Value);
								tempTeeth_12_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
						}
						
						if(null != box.getString("data11") && !box.getString("data11").equals(""))
							opdPreAssessmentClinicDental.setTeeth11("y");
						else
							opdPreAssessmentClinicDental.setTeeth11("n");
						
						String[] teeth_11_valueList=null;
						StringBuilder  tempTeeth_11_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
							teeth_11_valueList=request.getParameterValues("teeth_11_value");
							for(String teeth11Value:teeth_11_valueList){
								tempTeeth_11_value.append(teeth11Value);
								tempTeeth_11_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
						}
						
						if(null != box.getString("data21") && !box.getString("data21").equals(""))
							opdPreAssessmentClinicDental.setTeeth21("y");
						else
							opdPreAssessmentClinicDental.setTeeth21("n");
						
						String[] teeth_21_valueList=null;
						StringBuilder  tempTeeth_21_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
							teeth_21_valueList=request.getParameterValues("teeth_21_value");
							for(String teeth21Value:teeth_21_valueList){
								tempTeeth_21_value.append(teeth21Value);
								tempTeeth_21_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
						}
						
						
						if(null != box.getString("data22") && !box.getString("data22").equals(""))
							opdPreAssessmentClinicDental.setTeeth22("y");
						else
							opdPreAssessmentClinicDental.setTeeth22("n");
						
						String[] teeth_22_valueList=null;
						StringBuilder  tempTeeth_22_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
							teeth_22_valueList=request.getParameterValues("teeth_22_value");
							for(String teeth22Value:teeth_22_valueList){
								tempTeeth_22_value.append(teeth22Value);
								tempTeeth_22_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
						}
						
						if(null != box.getString("data23") && !box.getString("data23").equals(""))
							opdPreAssessmentClinicDental.setTeeth23("y");
						else
							opdPreAssessmentClinicDental.setTeeth23("n");
						
						String[] teeth_23_valueList=null;
						StringBuilder  tempTeeth_23_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
							teeth_23_valueList=request.getParameterValues("teeth_23_value");
							for(String teeth23Value:teeth_23_valueList){
								tempTeeth_23_value.append(teeth23Value);
								tempTeeth_23_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
						}
						
						
						if(null != box.getString("data24") && !box.getString("data24").equals(""))
							opdPreAssessmentClinicDental.setTeeth24("y");
						else
							opdPreAssessmentClinicDental.setTeeth24("n");
						
						String[] teeth_24_valueList=null;
						StringBuilder  tempTeeth_24_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
							teeth_24_valueList=request.getParameterValues("teeth_24_value");
							for(String teeth24Value:teeth_24_valueList){
								tempTeeth_24_value.append(teeth24Value);
								tempTeeth_24_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
						}
						
						if(null != box.getString("data25") && !box.getString("data25").equals(""))
							opdPreAssessmentClinicDental.setTeeth25("y");
						else
							opdPreAssessmentClinicDental.setTeeth25("n");
						
						String[] teeth_25_valueList=null;
						StringBuilder  tempTeeth_25_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
							teeth_25_valueList=request.getParameterValues("teeth_25_value");
							for(String teeth25Value:teeth_25_valueList){
								tempTeeth_25_value.append(teeth25Value);
								tempTeeth_25_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
						}
						
						if(null != box.getString("data26") && !box.getString("data26").equals(""))
							opdPreAssessmentClinicDental.setTeeth26("y");
						else
							opdPreAssessmentClinicDental.setTeeth26("n");
						
						String[] teeth_26_valueList=null;
						StringBuilder  tempTeeth_26_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
							teeth_26_valueList=request.getParameterValues("teeth_26_value");
							for(String teeth26Value:teeth_26_valueList){
								tempTeeth_26_value.append(teeth26Value);
								tempTeeth_26_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
						}
						
						if(null != box.getString("data27") && !box.getString("data27").equals(""))
							opdPreAssessmentClinicDental.setTeeth27("y");
						else
							opdPreAssessmentClinicDental.setTeeth27("n");
						
						String[] teeth_27_valueList=null;
						StringBuilder  tempTeeth_27_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
							teeth_27_valueList=request.getParameterValues("teeth_27_value");
							for(String teeth27Value:teeth_27_valueList){
								tempTeeth_27_value.append(teeth27Value);
								tempTeeth_27_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
						}
						
						if(null != box.getString("data28") && !box.getString("data28").equals(""))
							opdPreAssessmentClinicDental.setTeeth28("y");
						else
							opdPreAssessmentClinicDental.setTeeth28("n");
						
						String[] teeth_28_valueList=null;
						StringBuilder  tempTeeth_28_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
							teeth_28_valueList=request.getParameterValues("teeth_28_value");
							for(String teeth28Value:teeth_28_valueList){
								tempTeeth_28_value.append(teeth28Value);
								tempTeeth_28_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
						}
						
						if(null != box.getString("data48") && !box.getString("data48").equals(""))
							opdPreAssessmentClinicDental.setTeeth48("y");
						else
							opdPreAssessmentClinicDental.setTeeth48("n");
						
						// for dropdown value
						String[] teeth_48_valueList=null;
						StringBuilder  tempTeeth_48_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
							teeth_48_valueList=request.getParameterValues("teeth_48_value");
							for(String teeth48Value:teeth_48_valueList){
								tempTeeth_48_value.append(teeth48Value);
								tempTeeth_48_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
						}
						
						if(null != box.getString("data47") && !box.getString("data47").equals(""))
							opdPreAssessmentClinicDental.setTeeth47("y");
						else
							opdPreAssessmentClinicDental.setTeeth47("n");
						
						String[] teeth_47_valueList=null;
						StringBuilder  tempTeeth_47_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
							teeth_47_valueList=request.getParameterValues("teeth_47_value");
							for(String teeth47Value:teeth_47_valueList){
								tempTeeth_47_value.append(teeth47Value);
								tempTeeth_47_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
						}
						
						if(null != box.getString("data46") && !box.getString("data46").equals(""))
							opdPreAssessmentClinicDental.setTeeth46("y");
						else
							opdPreAssessmentClinicDental.setTeeth46("n");
						
						String[] teeth_46_valueList=null;
						StringBuilder  tempTeeth_46_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
							teeth_46_valueList=request.getParameterValues("teeth_46_value");
							for(String teeth46Value:teeth_46_valueList){
								tempTeeth_46_value.append(teeth46Value);
								tempTeeth_46_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
						}
						
						if(null != box.getString("data45") && !box.getString("data45").equals(""))
							opdPreAssessmentClinicDental.setTeeth45("y");
						else
							opdPreAssessmentClinicDental.setTeeth45("n");

						String[] teeth_45_valueList=null;
						StringBuilder  tempTeeth_45_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
							teeth_45_valueList = request.getParameterValues("teeth_45_value");
							for(String teeth45Value : teeth_45_valueList){
								tempTeeth_45_value.append(teeth45Value);
								tempTeeth_45_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
						}
						
						if(null != box.getString("data44") && !box.getString("data44").equals(""))
							opdPreAssessmentClinicDental.setTeeth44("y");
						else
							opdPreAssessmentClinicDental.setTeeth44("n");
						
						String[] teeth_44_valueList=null;
						StringBuilder  tempTeeth_44_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
							teeth_44_valueList=request.getParameterValues("teeth_44_value");
							for(String teeth44Value:teeth_44_valueList){
								tempTeeth_44_value.append(teeth44Value);
								tempTeeth_44_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
						}
						
						if(null != box.getString("data43") && !box.getString("data43").equals(""))
							opdPreAssessmentClinicDental.setTeeth43("y");
						else
							opdPreAssessmentClinicDental.setTeeth43("n");
						
						String[] teeth_43_valueList=null;
						StringBuilder  tempTeeth_43_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
							teeth_43_valueList=request.getParameterValues("teeth_43_value");
							for(String teeth43Value:teeth_43_valueList){
								tempTeeth_43_value.append(teeth43Value);
								tempTeeth_43_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
						}
						
						if(null != box.getString("data42") && !box.getString("data42").equals(""))
							opdPreAssessmentClinicDental.setTeeth42("y");
						else
							opdPreAssessmentClinicDental.setTeeth42("n");
						
						String[] teeth_42_valueList=null;
						StringBuilder  tempTeeth_42_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
							teeth_42_valueList=request.getParameterValues("teeth_42_value");
							for(String teeth42Value:teeth_42_valueList){
								tempTeeth_42_value.append(teeth42Value);
								tempTeeth_42_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
						}
						
						if(null != box.getString("data41") && !box.getString("data41").equals(""))
							opdPreAssessmentClinicDental.setTeeth41("y");
						else
							opdPreAssessmentClinicDental.setTeeth41("n");
						
						String[] teeth_41_valueList=null;
						StringBuilder  tempTeeth_41_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
							teeth_41_valueList=request.getParameterValues("teeth_41_value");
							for(String teeth41Value:teeth_41_valueList){
								tempTeeth_41_value.append(teeth41Value);
								tempTeeth_41_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
						}
						
						if(null != box.getString("data31") && !box.getString("data31").equals(""))
							opdPreAssessmentClinicDental.setTeeth31("y");
						else
							opdPreAssessmentClinicDental.setTeeth31("n");
						
						String[] teeth_31_valueList=null;
						StringBuilder  tempTeeth_31_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
							teeth_31_valueList=request.getParameterValues("teeth_31_value");
							for(String teeth31Value:teeth_31_valueList){
								tempTeeth_31_value.append(teeth31Value);
								tempTeeth_31_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
						}
						
						
						if(null != box.getString("data32") && !box.getString("data32").equals(""))
							opdPreAssessmentClinicDental.setTeeth32("y");
						else
							opdPreAssessmentClinicDental.setTeeth32("n");
						
						String[] teeth_32_valueList=null;
						StringBuilder  tempTeeth_32_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
							teeth_32_valueList=request.getParameterValues("teeth_32_value");
							for(String teeth32Value:teeth_32_valueList){
								tempTeeth_32_value.append(teeth32Value);
								tempTeeth_32_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
						}
						
						if(null != box.getString("data33") && !box.getString("data33").equals(""))
							opdPreAssessmentClinicDental.setTeeth33("y");
						else
							opdPreAssessmentClinicDental.setTeeth33("n");
						
						String[] teeth_33_valueList=null;
						StringBuilder  tempTeeth_33_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
							teeth_33_valueList=request.getParameterValues("teeth_33_value");
							for(String teeth33Value:teeth_33_valueList){
								tempTeeth_33_value.append(teeth33Value);
								tempTeeth_33_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
						}
						
						
						if(null != box.getString("data34") && !box.getString("data34").equals(""))
							opdPreAssessmentClinicDental.setTeeth34("y");
						else
							opdPreAssessmentClinicDental.setTeeth34("n");
						
						String[] teeth_34_valueList=null;
						StringBuilder  tempTeeth_34_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
							teeth_34_valueList=request.getParameterValues("teeth_34_value");
							for(String teeth34Value:teeth_34_valueList){
								tempTeeth_34_value.append(teeth34Value);
								tempTeeth_34_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
						}
						
						if(null != box.getString("data35") && !box.getString("data35").equals(""))
							opdPreAssessmentClinicDental.setTeeth35("y");
						else
							opdPreAssessmentClinicDental.setTeeth35("n");
						
						String[] teeth_35_valueList=null;
						StringBuilder  tempTeeth_35_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
							teeth_35_valueList=request.getParameterValues("teeth_35_value");
							for(String teeth35Value:teeth_35_valueList){
								tempTeeth_35_value.append(teeth35Value);
								tempTeeth_35_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
						}
						
						if(null != box.getString("data36") && !box.getString("data36").equals(""))
							opdPreAssessmentClinicDental.setTeeth36("y");
						else
							opdPreAssessmentClinicDental.setTeeth36("n");
						
						String[] teeth_36_valueList=null;
						StringBuilder  tempTeeth_36_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
							teeth_36_valueList=request.getParameterValues("teeth_36_value");
							for(String teeth36Value:teeth_36_valueList){
								tempTeeth_36_value.append(teeth36Value);
								tempTeeth_36_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
						}
						
						if(null != box.getString("data37") && !box.getString("data37").equals(""))
							opdPreAssessmentClinicDental.setTeeth37("y");
						else
							opdPreAssessmentClinicDental.setTeeth37("n");
						
						String[] teeth_37_valueList=null;
						StringBuilder  tempTeeth_37_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
							teeth_37_valueList=request.getParameterValues("teeth_37_value");
							for(String teeth37Value:teeth_37_valueList){
								tempTeeth_37_value.append(teeth37Value);
								tempTeeth_37_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
						}
						
						if(null != box.getString("data38") && !box.getString("data38").equals(""))
							opdPreAssessmentClinicDental.setTeeth38("y");
						else
							opdPreAssessmentClinicDental.setTeeth38("n");
						
						String[] teeth_38_valueList=null;
						StringBuilder  tempTeeth_38_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
							teeth_38_valueList=request.getParameterValues("teeth_38_value");
							for(String teeth38Value:teeth_38_valueList){
								tempTeeth_38_value.append(teeth38Value);
								tempTeeth_38_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
						}
						
						if(null != box.getString("data51") && !box.getString("data51").equals(""))
							opdPreAssessmentClinicDental.setTeeth51("y");
						else
							opdPreAssessmentClinicDental.setTeeth51("n");
						
						String[] teeth_51_valueList=null;
						StringBuilder  tempTeeth_51_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_51_value") && !request.getParameterValues("teeth_51_value").equals("")){
							teeth_51_valueList=request.getParameterValues("teeth_51_value");
							for(String teeth51Value:teeth_51_valueList){
								tempTeeth_51_value.append(teeth51Value);
								tempTeeth_51_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth51Value(tempTeeth_51_value.toString());
						}
						
						
						if(null != box.getString("data52") && !box.getString("data52").equals(""))
							opdPreAssessmentClinicDental.setTeeth52("y");
						else
							opdPreAssessmentClinicDental.setTeeth52("n");
						
						String[] teeth_52_valueList=null;
						StringBuilder  tempTeeth_52_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_52_value") && !request.getParameterValues("teeth_52_value").equals("")){
							teeth_52_valueList=request.getParameterValues("teeth_52_value");
							for(String teeth52Value:teeth_52_valueList){
								tempTeeth_52_value.append(teeth52Value);
								tempTeeth_52_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth52Value(tempTeeth_52_value.toString());
						}
						
						if(null != box.getString("data53") && !box.getString("data53").equals(""))
							opdPreAssessmentClinicDental.setTeeth53("y");
						else
							opdPreAssessmentClinicDental.setTeeth53("n");
						
						String[] teeth_53_valueList=null;
						StringBuilder  tempTeeth_53_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_53_value") && !request.getParameterValues("teeth_53_value").equals("")){
							teeth_53_valueList=request.getParameterValues("teeth_53_value");
							for(String teeth53Value:teeth_53_valueList){
								tempTeeth_53_value.append(teeth53Value);
								tempTeeth_53_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth53Value(tempTeeth_53_value.toString());
						}
						
						
						if(null != box.getString("data54") && !box.getString("data54").equals(""))
							opdPreAssessmentClinicDental.setTeeth54("y");
						else
							opdPreAssessmentClinicDental.setTeeth54("n");
						
						String[] teeth_54_valueList=null;
						StringBuilder  tempTeeth_54_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_54_value") && !request.getParameterValues("teeth_54_value").equals("")){
							teeth_54_valueList=request.getParameterValues("teeth_54_value");
							for(String teeth54Value:teeth_54_valueList){
								tempTeeth_54_value.append(teeth54Value);
								tempTeeth_54_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth54Value(tempTeeth_54_value.toString());
						}
						
						if(null != box.getString("data55") && !box.getString("data55").equals(""))
							opdPreAssessmentClinicDental.setTeeth55("y");
						else
							opdPreAssessmentClinicDental.setTeeth55("n");
						
						String[] teeth_55_valueList=null;
						StringBuilder  tempTeeth_55_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_55_value") && !request.getParameterValues("teeth_55_value").equals("")){
							teeth_55_valueList=request.getParameterValues("teeth_55_value");
							for(String teeth55Value:teeth_55_valueList){
								tempTeeth_55_value.append(teeth55Value);
								tempTeeth_55_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth55Value(tempTeeth_55_value.toString());
						}
						
						
						if(null != box.getString("data61") && !box.getString("data61").equals(""))
							opdPreAssessmentClinicDental.setTeeth61("y");
						else
							opdPreAssessmentClinicDental.setTeeth61("n");
						
						String[] teeth_61_valueList=null;
						StringBuilder  tempTeeth_61_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_61_value") && !request.getParameterValues("teeth_61_value").equals("")){
							teeth_61_valueList=request.getParameterValues("teeth_61_value");
							for(String teeth61Value:teeth_61_valueList){
								tempTeeth_61_value.append(teeth61Value);
								tempTeeth_61_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth61Value(tempTeeth_61_value.toString());
						}
						
						
						if(null != box.getString("data62") && !box.getString("data62").equals(""))
							opdPreAssessmentClinicDental.setTeeth62("y");
						else
							opdPreAssessmentClinicDental.setTeeth62("n");
						
						String[] teeth_62_valueList=null;
						StringBuilder  tempTeeth_62_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_62_value") && !request.getParameterValues("teeth_62_value").equals("")){
							teeth_62_valueList=request.getParameterValues("teeth_62_value");
							for(String teeth62Value:teeth_62_valueList){
								tempTeeth_62_value.append(teeth62Value);
								tempTeeth_62_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth62Value(tempTeeth_62_value.toString());
						}
						
						if(null != box.getString("data63") && !box.getString("data63").equals(""))
							opdPreAssessmentClinicDental.setTeeth63("y");
						else
							opdPreAssessmentClinicDental.setTeeth63("n");
						
						String[] teeth_63_valueList=null;
						StringBuilder  tempTeeth_63_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_63_value") && !request.getParameterValues("teeth_63_value").equals("")){
							teeth_63_valueList=request.getParameterValues("teeth_63_value");
							for(String teeth63Value:teeth_63_valueList){
								tempTeeth_63_value.append(teeth63Value);
								tempTeeth_63_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth63Value(tempTeeth_63_value.toString());
						}
						
						
						if(null != box.getString("data64") && !box.getString("data64").equals(""))
							opdPreAssessmentClinicDental.setTeeth64("y");
						else
							opdPreAssessmentClinicDental.setTeeth64("n");
						
						String[] teeth_64_valueList=null;
						StringBuilder  tempTeeth_64_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_64_value") && !request.getParameterValues("teeth_64_value").equals("")){
							teeth_64_valueList=request.getParameterValues("teeth_64_value");
							for(String teeth64Value:teeth_64_valueList){
								tempTeeth_64_value.append(teeth64Value);
								tempTeeth_64_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth64Value(tempTeeth_64_value.toString());
						}
						
						if(null != box.getString("data65") && !box.getString("data65").equals(""))
							opdPreAssessmentClinicDental.setTeeth65("y");
						else
							opdPreAssessmentClinicDental.setTeeth65("n");
						
						String[] teeth_65_valueList=null;
						StringBuilder  tempTeeth_65_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_65_value") && !request.getParameterValues("teeth_65_value").equals("")){
							teeth_65_valueList=request.getParameterValues("teeth_65_value");
							for(String teeth65Value:teeth_65_valueList){
								tempTeeth_65_value.append(teeth65Value);
								tempTeeth_65_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth65Value(tempTeeth_65_value.toString());
						}
						
						if(null != box.getString("data81") && !box.getString("data81").equals(""))
							opdPreAssessmentClinicDental.setTeeth81("y");
						else
							opdPreAssessmentClinicDental.setTeeth81("n");
						
						String[] teeth_81_valueList=null;
						StringBuilder  tempTeeth_81_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_81_value") && !request.getParameterValues("teeth_81_value").equals("")){
							teeth_81_valueList=request.getParameterValues("teeth_81_value");
							for(String teeth81Value:teeth_81_valueList){
								tempTeeth_81_value.append(teeth81Value);
								tempTeeth_81_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth81Value(tempTeeth_81_value.toString());
						}
						
						
						if(null != box.getString("data82") && !box.getString("data82").equals(""))
							opdPreAssessmentClinicDental.setTeeth82("y");
						else
							opdPreAssessmentClinicDental.setTeeth82("n");
						
						String[] teeth_82_valueList=null;
						StringBuilder  tempTeeth_82_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_82_value") && !request.getParameterValues("teeth_82_value").equals("")){
							teeth_82_valueList=request.getParameterValues("teeth_82_value");
							for(String teeth82Value:teeth_82_valueList){
								tempTeeth_82_value.append(teeth82Value);
								tempTeeth_82_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth82Value(tempTeeth_82_value.toString());
						}
						
						if(null != box.getString("data83") && !box.getString("data83").equals(""))
							opdPreAssessmentClinicDental.setTeeth83("y");
						else
							opdPreAssessmentClinicDental.setTeeth83("n");
						
						String[] teeth_83_valueList=null;
						StringBuilder  tempTeeth_83_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_83_value") && !request.getParameterValues("teeth_83_value").equals("")){
							teeth_83_valueList=request.getParameterValues("teeth_83_value");
							for(String teeth83Value:teeth_83_valueList){
								tempTeeth_83_value.append(teeth83Value);
								tempTeeth_83_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth83Value(tempTeeth_83_value.toString());
						}
						
						
						if(null != box.getString("data84") && !box.getString("data84").equals(""))
							opdPreAssessmentClinicDental.setTeeth84("y");
						else
							opdPreAssessmentClinicDental.setTeeth84("n");
						
						String[] teeth_84_valueList=null;
						StringBuilder  tempTeeth_84_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_84_value") && !request.getParameterValues("teeth_84_value").equals("")){
							teeth_84_valueList=request.getParameterValues("teeth_84_value");
							for(String teeth84Value:teeth_84_valueList){
								tempTeeth_84_value.append(teeth84Value);
								tempTeeth_84_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth84Value(tempTeeth_84_value.toString());
						}
						
						if(null != box.getString("data85") && !box.getString("data85").equals(""))
							opdPreAssessmentClinicDental.setTeeth85("y");
						else
							opdPreAssessmentClinicDental.setTeeth85("n");
						
						String[] teeth_85_valueList=null;
						StringBuilder  tempTeeth_85_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_85_value") && !request.getParameterValues("teeth_85_value").equals("")){
							teeth_85_valueList=request.getParameterValues("teeth_85_value");
							for(String teeth85Value:teeth_85_valueList){
								tempTeeth_85_value.append(teeth85Value);
								tempTeeth_85_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth85Value(tempTeeth_85_value.toString());
						}
						

						if(null != box.getString("data71") && !box.getString("data71").equals(""))
							opdPreAssessmentClinicDental.setTeeth71("y");
						else
							opdPreAssessmentClinicDental.setTeeth71("n");
						
						String[] teeth_71_valueList=null;
						StringBuilder  tempTeeth_71_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_71_value") && !request.getParameterValues("teeth_71_value").equals("")){
							teeth_71_valueList=request.getParameterValues("teeth_71_value");
							for(String teeth71Value:teeth_71_valueList){
								tempTeeth_71_value.append(teeth71Value);
								tempTeeth_71_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth71Value(tempTeeth_71_value.toString());
						}
						
						
						if(null != box.getString("data72") && !box.getString("data72").equals(""))
							opdPreAssessmentClinicDental.setTeeth72("y");
						else
							opdPreAssessmentClinicDental.setTeeth72("n");
						
						String[] teeth_72_valueList=null;
						StringBuilder  tempTeeth_72_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_72_value") && !request.getParameterValues("teeth_72_value").equals("")){
							teeth_72_valueList=request.getParameterValues("teeth_72_value");
							for(String teeth72Value:teeth_72_valueList){
								tempTeeth_72_value.append(teeth72Value);
								tempTeeth_72_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth72Value(tempTeeth_72_value.toString());
						}
						
						if(null != box.getString("data73") && !box.getString("data73").equals(""))
							opdPreAssessmentClinicDental.setTeeth73("y");
						else
							opdPreAssessmentClinicDental.setTeeth73("n");
						
						String[] teeth_73_valueList=null;
						StringBuilder  tempTeeth_73_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_73_value") && !request.getParameterValues("teeth_73_value").equals("")){
							teeth_73_valueList=request.getParameterValues("teeth_73_value");
							for(String teeth73Value:teeth_73_valueList){
								tempTeeth_73_value.append(teeth73Value);
								tempTeeth_73_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth73Value(tempTeeth_73_value.toString());
						}
						
						
						if(null != box.getString("data74") && !box.getString("data74").equals(""))
							opdPreAssessmentClinicDental.setTeeth74("y");
						else
							opdPreAssessmentClinicDental.setTeeth74("n");
						
						String[] teeth_74_valueList=null;
						StringBuilder  tempTeeth_74_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_74_value") && !request.getParameterValues("teeth_74_value").equals("")){
							teeth_74_valueList=request.getParameterValues("teeth_74_value");
							for(String teeth74Value:teeth_74_valueList){
								tempTeeth_74_value.append(teeth74Value);
								tempTeeth_74_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth74Value(tempTeeth_74_value.toString());
						}
						
						if(null != box.getString("data75") && !box.getString("data75").equals(""))
							opdPreAssessmentClinicDental.setTeeth75("y");
						else
							opdPreAssessmentClinicDental.setTeeth75("n");
						
						String[] teeth_75_valueList=null;
						StringBuilder  tempTeeth_75_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_75_value") && !request.getParameterValues("teeth_75_value").equals("")){
							teeth_75_valueList=request.getParameterValues("teeth_75_value");
							for(String teeth75Value:teeth_75_valueList){
								tempTeeth_75_value.append(teeth75Value);
								tempTeeth_75_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth75Value(tempTeeth_75_value.toString());
						}
						hbt.save(opdPreAssessmentClinicDental);


						if(null != box.getString("hiddenValueCharge") && !box.getString("hiddenValueCharge").equals("")) {
							hdb = box.getInt("hiddenValueCharge");
						}
						
						for(int i = 1; i <= hdb; i++) {
							OpdOralMedicineDentalTissue oralMedicineDentalTissue = new OpdOralMedicineDentalTissue();
							oralMedicineDentalTissue.setTemplateName("Oral Medicine Pathology");
							if(null != request.getParameter("symptoms"+i) && !request.getParameter("symptoms"+i).equals("")) {
								symptoms = request.getParameter("symptoms"+i);
								oralMedicineDentalTissue.setSymptoms(request.getParameter("symptoms"+i));
							}
							if(null != box.getString("burning"+i) && box.getString("burning"+i).equals("Yes"))
								oralMedicineDentalTissue.setBurningSensation("Yes");
							else
								oralMedicineDentalTissue.setBurningSensation("No");
							if(null != box.getString("hyper"+i) && box.getString("hyper"+i).equals("Yes"))
								oralMedicineDentalTissue.setHyperPigmentation("Yes");
							else
								oralMedicineDentalTissue.setHyperPigmentation("No");
							if(null != box.getString("patches"+i) && box.getString("patches"+i).equals("Yes"))
								oralMedicineDentalTissue.setRedPatchesScrapable("Yes");
							else
								oralMedicineDentalTissue.setRedPatchesScrapable("No");
							if(null != box.getString("patchesNon"+i) && box.getString("patchesNon"+i).equals("Yes"))
								oralMedicineDentalTissue.setRedPatchesNonScrapable("Yes");
							else
								oralMedicineDentalTissue.setRedPatchesNonScrapable("No");
							if(null != box.getString("patchesWhite"+i) && box.getString("patchesWhite"+i).equals("Yes"))
								oralMedicineDentalTissue.setWhitePatchesScrapable("Yes");
							else
								oralMedicineDentalTissue.setWhitePatchesScrapable("No");
							if(null != box.getString("patchesNonWhite"+i) && box.getString("patchesNonWhite"+i).equals("Yes"))
								oralMedicineDentalTissue.setWhitePatchesNonScrapable("Yes");
							else
								oralMedicineDentalTissue.setWhitePatchesNonScrapable("No");
							if(null != box.getString("patchesStriae"+i) && box.getString("patchesStriae"+i).equals("Yes"))
								oralMedicineDentalTissue.setWhiteStriae("Yes");
							else
								oralMedicineDentalTissue.setWhiteStriae("No");
							if(null != box.getString("swelling"+i) && box.getString("swelling"+i).equals("Yes"))
								oralMedicineDentalTissue.setSwelling("Yes");
							else
								oralMedicineDentalTissue.setSwelling("No");
							if(null != box.getString("ulcers"+i) && box.getString("ulcers"+i).equals("Yes"))
								oralMedicineDentalTissue.setUlcers("Yes");
							else
								oralMedicineDentalTissue.setUlcers("No");
							if(null != box.getString("roughness"+i) && box.getString("roughness"+i).equals("Yes"))
								oralMedicineDentalTissue.setRoughness("Yes");
							else
								oralMedicineDentalTissue.setRoughness("No");
							
							if(symptoms != "") {
								
								oralMedicineDentalTissue.setMedicinePathology(opdOralMedicinePathology);
								oralMedicineDentalTissue.setHin(patient);
								oralMedicineDentalTissue.setVisit(visit);
								oralMedicineDentalTissue.setDepartment(masDepartment);
								oralMedicineDentalTissue.setHospital(masHospital);
								hbt.save(oralMedicineDentalTissue);
								map.put("oralMedicineDentalTissue",oralMedicineDentalTissue);
							}
						}

						tnx.commit();
						
					}catch(Exception e){
						e.printStackTrace();
					}
					return map;
				}

				public Map<String, Object> getDoctorUnit(Map<String, Object> map){
					List<HospitalDoctorUnitM> unitList=new ArrayList<HospitalDoctorUnitM>();
					List<MasDepartment> masDepartmentList=new ArrayList<MasDepartment>();
					int departmentId=(Integer)map.get("departmentId");
					int hospitalId = (Integer)map.get("hospitalId");
					String appointmentDate=(String) map.get("appointmentDate");
					Session session = (Session) getSession();
					int doctor=0;
					if(map.get("doctor")!=null){
						doctor=(Integer)map.get("doctor");
					}
					masDepartmentList=session.createCriteria(MasInstituteDepartment.class)
					.setProjection(Projections.property("Department"))
					.add(Restrictions.eq("Institute.Id",hospitalId))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("Department", "dep")
					.add(Restrictions.eq("dep.Id",departmentId)).list();
					
					ArrayList<Integer> empDepartmentId=new ArrayList<Integer>();
					for(MasDepartment department:masDepartmentList){
						
						if(null !=department && null !=department.getEmpDept())
							if(null !=department.getEmpDept())
						empDepartmentId.add(department.getEmpDept().getId());
						
					}
					
					
					
					//masDepartmentList=crt.list();
					
					String unitDay = "";
					try {
						unitDay = HMSUtil.getDayStringFromDate(appointmentDate).toLowerCase();
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					if(empDepartmentId.size()>0){
						unitList=session.createCriteria(HospitalDoctorUnitM.class)
								 .createAlias("EmpDept", "EmpDept")
								 .createAlias("Hospital", "Hospital")
								 .add(Restrictions.eq("Hospital.Id", hospitalId))
								 .add(Restrictions.eq(((String) unitDay.subSequence(0,1)).toUpperCase()+unitDay.substring(1),"y"))
								  .add(Restrictions.in("EmpDept.Id", empDepartmentId)).list();
						 
						 //unitList=crt.list();
					}
					
					if(map.get("personalReview")!=null && map.get("personalReview").equals("yes")){
						if(unitList.size()>0 && doctor!=0){
							HospitalDoctorUnitM unitM=unitList.get(0);
							
							List<HospitalDoctorUnitT> unitT=new ArrayList<HospitalDoctorUnitT>();
							unitT=session.createCriteria(HospitalDoctorUnitT.class)
									.createAlias("UnitM", "unitM")
									.add(Restrictions.eq("unitM.Id", unitM.getId()))
									.add(Restrictions.eq("Employee.Id", doctor))
									.add(Restrictions.eq("Status", "y").ignoreCase())
									.list();
							if(unitT.size()==0){
								map.put("message", "Current OP Unit and Future OP Unit Does Not Match.\nDo You Want To Continue ?");
							}
							
						}else{
							map.put("message", "No Unit is Available For Selected Date !");
						}
					}
					map.put("unitList", unitList);
					return map;
				}
				
				public List<HospitalDoctorUnitT> getUnitDoctors(String unitId){
					
					Map<String,Object> map=new HashMap<String,Object>();
					Session session=(Session) getSession();
					List<HospitalDoctorUnitT> doctorList=new ArrayList<HospitalDoctorUnitT>();
					//List<HospitalDoctorUnitT> headdoctorList=new ArrayList<HospitalDoctorUnitT>();
					
					Criteria crt=null;
					int HospUnitId=Integer.parseInt(unitId);
					crt=session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM")
							.add(Restrictions.eq("UnitM.Id", HospUnitId))
							.add(Restrictions.eq("Status", "y").ignoreCase())  // Added by Srikanth on 22/02/2018
							.createAlias("Employee", "emp").addOrder(Order.asc("emp.EmployeeName")); //Added by Arbind on 14-12-2017
					
					doctorList=crt.list();
					
					
					/*crt=session.createCriteria(HospitalDoctorUnitT.class).createAlias("UnitM", "UnitM")
							.add(Restrictions.eq("UnitM.Id", unitId)).add(Restrictions.eq("HeadFleg", "y").ignoreCase());
					
					headdoctorList=crt.list();*/
					
					return doctorList;
					//map.put("headdoctorList",headdoctorList);
					
				}

				@Override
				public Map<String, Object> savePsCaseRecordOrthodotics(
						Map<String, Object> mapForDs, Box box,
						HttpServletRequest request) {
					Map<String, Object> map = new HashMap<String, Object>();
					MasSpecialtyTemplate masSpecialtyTemplate = null;
					Transaction tnx=null;
					try{
						Session session = (Session) getSession();
						tnx=session.beginTransaction();
						HibernateTemplate hbt = getHibernateTemplate();
						hbt.setFlushModeName("FLUSH_EAGER");
						hbt.setCheckWriteOperations(false);
						OpdPsCaseRecordOrthodotics opdPsCaseRecordOrthodotics = new OpdPsCaseRecordOrthodotics();
						
						Integer hinId=0;
						Integer departmentId=0;
						Integer visitId=0;
						Integer hospitalId=0;
						Integer specialtyId=0;
						Integer userId=0;
						String templateName = "";
						
						if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
							hinId = (Integer) mapForDs.get("hinId");
						}
						if(mapForDs.get("visitId") != null && (Integer) mapForDs.get("visitId") > 0) {
							visitId = (Integer) mapForDs.get("visitId");
						}
						if(mapForDs.get("departmentId") != null && (Integer) mapForDs.get("departmentId") > 0) {
							departmentId = (Integer) mapForDs.get("departmentId");
						}
						if(mapForDs.get("hospitalId") != null && (Integer) mapForDs.get("hospitalId") > 0) {
							hospitalId = (Integer) mapForDs.get("hospitalId");
						}
						if(map.get("userId")!=null){
							userId=(Integer)  map.get("userId");	
						}
						
						if(map.get("specialtyId")!=null){
							specialtyId=(Integer)  map.get("specialtyId");	
						}
						if(map.get("templateName")!=null){
							templateName=(String)  map.get("templateName");	
						}
						
						Patient patient = new Patient();
						patient.setId(hinId);
						opdPsCaseRecordOrthodotics.setHin(patient);
						
						Visit visit = new Visit();
						visit.setId(visitId);
						opdPsCaseRecordOrthodotics.setVisit(visit);
						
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(departmentId);
						opdPsCaseRecordOrthodotics.setDepartment(masDepartment);
						
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						opdPsCaseRecordOrthodotics.setHospital(masHospital);
						
						if(null != box.getString("presentingComplaints") && !box.getString("presentingComplaints").equals(""))
							opdPsCaseRecordOrthodotics.setPresentingComplaints(box.getString("presentingComplaints"));
						
						
						if(null != box.getString("informar") && !box.getString("informar").equals(""))
							opdPsCaseRecordOrthodotics.setInformar(box.getString("informar"));
						
						if(null != box.getString("anyOther") && !box.getString("anyOther").equals(""))
							opdPsCaseRecordOrthodotics.setAnyOther(box.getString("anyOther"));
						
						if(null != box.getString("father") && !box.getString("father").equals(""))
							opdPsCaseRecordOrthodotics.setFather(box.getString("father"));
						
						
						if(null != box.getString("mother") && !box.getString("mother").equals(""))
							opdPsCaseRecordOrthodotics.setMother(box.getString("mother"));
						
						if(null != box.getString("con") && !box.getString("con").equals(""))
							opdPsCaseRecordOrthodotics.setCon(box.getString("con"));
						
						if(null != box.getString("male") && !box.getString("male").equals(""))
							opdPsCaseRecordOrthodotics.setMale(box.getString("male"));
						
						
						
						if(null != box.getString("female") && !box.getString("female").equals(""))
							opdPsCaseRecordOrthodotics.setFemale(box.getString("female"));
						
						if(null != box.getString("parentsGeneral") && !box.getString("parentsGeneral").equals(""))
							opdPsCaseRecordOrthodotics.setParentsGeneral(box.getString("parentsGeneral"));
						
						if(null != box.getString("typeOfMalocclusion") && !box.getString("typeOfMalocclusion").equals(""))
							opdPsCaseRecordOrthodotics.setTypeOfMalocclusion(box.getString("typeOfMalocclusion"));
						
						
						
						if(null != box.getString("siblingsGeneral") && !box.getString("siblingsGeneral").equals(""))
							opdPsCaseRecordOrthodotics.setSiblingsGeneral(box.getString("siblingsGeneral"));
						
						if(null != box.getString("typeOfMalocclusion1") && !box.getString("typeOfMalocclusion1").equals(""))
							opdPsCaseRecordOrthodotics.setTypeOfMalocclusion1(box.getString("typeOfMalocclusion1"));
						
						if(null != box.getString("familialDiseases") && !box.getString("familialDiseases").equals(""))
							opdPsCaseRecordOrthodotics.setFamilialDiseases(box.getString("familialDiseases"));
						
						if(null != box.getString("orthodonticTreatment") && !box.getString("orthodonticTreatment").equals(""))
							opdPsCaseRecordOrthodotics.setOrthodonticTreatment(box.getString("orthodonticTreatment"));
						
						
						if(null != box.getString("parentsConcern") && !box.getString("parentsConcern").equals(""))
							opdPsCaseRecordOrthodotics.setParentsConcern(box.getString("parentsConcern"));
						
						if(null != box.getString("patientToTreatment") && !box.getString("patientToTreatment").equals(""))
							opdPsCaseRecordOrthodotics.setPatientToTreatment(box.getString("patientToTreatment"));
						
						if(null != box.getString("motherDuringPregnancy") && !box.getString("motherDuringPregnancy").equals(""))
							opdPsCaseRecordOrthodotics.setMotherDuringPregnancy(box.getString("motherDuringPregnancy"));
						
						
						if(null != box.getString("bacterial") && !box.getString("bacterial").equals(""))
							opdPsCaseRecordOrthodotics.setBacterial("Yes");
						else
							opdPsCaseRecordOrthodotics.setBacterial("No");
						
						if(null != box.getString("viral") && !box.getString("viral").equals(""))
							opdPsCaseRecordOrthodotics.setViral("Yes");
						else
							opdPsCaseRecordOrthodotics.setViral("No");
						
						if(null != box.getString("parasitic") && !box.getString("parasitic").equals(""))
							opdPsCaseRecordOrthodotics.setParasitic("Yes");
						else
							opdPsCaseRecordOrthodotics.setParasitic("No");
						
						if(null != box.getString("bacterialValue") && !box.getString("bacterialValue").equals(""))
							opdPsCaseRecordOrthodotics.setBacterialValue(box.getString("bacterialValue"));
						
							
						
						if(null != box.getString("viralValue") && !box.getString("viralValue").equals(""))
							opdPsCaseRecordOrthodotics.setViralValue(box.getString("viralValue"));
						
							
						if(null != box.getString("parasiticValue") && !box.getString("parasiticValue").equals(""))
							opdPsCaseRecordOrthodotics.setParasiticValue(box.getString("parasiticValue"));
						
						
						
						if(null != box.getString("historyOfTrauma") && !box.getString("historyOfTrauma").equals(""))
							opdPsCaseRecordOrthodotics.setHistoryOfTrauma(box.getString("historyOfTrauma"));
						
						if(null != box.getString("drugsTaken") && !box.getString("drugsTaken").equals(""))
							opdPsCaseRecordOrthodotics.setDrugsTaken(box.getString("drugsTaken"));
						
						if(null != box.getString("anyOtherReleveantHistory") && !box.getString("anyOtherReleveantHistory").equals(""))
							opdPsCaseRecordOrthodotics.setAnyOtherReleveantHistory(box.getString("anyOtherReleveantHistory"));
						
						
						
						if(null != box.getString("maternalNutritionalStatus") && !box.getString("maternalNutritionalStatus").equals(""))
							opdPsCaseRecordOrthodotics.setMaternalNutritionalStatus(box.getString("maternalNutritionalStatus"));
						
						
						if(null != box.getString("vitaminsMinerals") && !box.getString("vitaminsMinerals").equals(""))
							opdPsCaseRecordOrthodotics.setVitaminsMinerals("Yes");
						else
							opdPsCaseRecordOrthodotics.setVitaminsMinerals("No");
						
						if(null != box.getString("delivery") && !box.getString("delivery").equals(""))
							opdPsCaseRecordOrthodotics.setDelivery(box.getString("delivery"));
						
						
						
						if(null != box.getString("typeVal") && !box.getString("typeVal").equals(""))
							opdPsCaseRecordOrthodotics.setTypeVal(box.getString("typeVal"));
						
						if(null != box.getString("natalHistory") && !box.getString("natalHistory").equals(""))
							opdPsCaseRecordOrthodotics.setNatalHistory(box.getString("natalHistory"));
						
						
						
						
						if(null != box.getString("natalHistoryValue") && !box.getString("natalHistoryValue").equals(""))
							opdPsCaseRecordOrthodotics.setNatalHistoryValue(box.getString("natalHistoryValue"));
						
						if(null != box.getString("feeding") && !box.getString("feeding").equals(""))
							opdPsCaseRecordOrthodotics.setFeeding(box.getString("feeding"));
						
						if(null != box.getString("forHowLong") && !box.getString("forHowLong").equals(""))
							opdPsCaseRecordOrthodotics.setForHowLong(box.getString("forHowLong"));
						
						
						
						if(null != box.getString("howManyTimesDaily") && !box.getString("howManyTimesDaily").equals(""))
							opdPsCaseRecordOrthodotics.setHowManyTimesDaily(box.getString("howManyTimesDaily"));
						
						if(null != box.getString("weanedAtYrs") && !box.getString("weanedAtYrs").equals(""))
							opdPsCaseRecordOrthodotics.setWeanedAtYrs(box.getString("weanedAtYrs"));
						
						if(null != box.getString("forHowLong1") && !box.getString("forHowLong1").equals(""))
							opdPsCaseRecordOrthodotics.setForHowLong1(box.getString("forHowLong1"));
						
						
						
						if(null != box.getString("howManyTimesDaily1") && !box.getString("howManyTimesDaily1").equals(""))
							opdPsCaseRecordOrthodotics.setHowManyTimesDaily1(box.getString("howManyTimesDaily1"));
						
						if(null != box.getString("weanedAtYrs1") && !box.getString("weanedAtYrs1").equals(""))
							opdPsCaseRecordOrthodotics.setWeanedAtYrs1(box.getString("weanedAtYrs1"));
						
						if(null != box.getString("bottleNipple") && !box.getString("bottleNipple").equals(""))
							opdPsCaseRecordOrthodotics.setBottleNipple(box.getString("bottleNipple"));
						
						
						
						if(null != box.getString("anyInfectionRampantCaries") && !box.getString("anyInfectionRampantCaries").equals(""))
							opdPsCaseRecordOrthodotics.setAnyInfectionRampantCaries(box.getString("anyInfectionRampantCaries"));
						
						if(null != box.getString("bacterial1") && !box.getString("bacterial1").equals(""))
							opdPsCaseRecordOrthodotics.setBacterial1(box.getString("bacterial1"));
						
						if(null != box.getString("viral1") && !box.getString("viral1").equals(""))
							opdPsCaseRecordOrthodotics.setViral1(box.getString("viral1"));
						
						
						
						if(null != box.getString("systemic") && !box.getString("systemic").equals(""))
							opdPsCaseRecordOrthodotics.setSystemic(box.getString("systemic"));
						
						if(null != box.getString("nonSystemic") && !box.getString("nonSystemic").equals(""))
							opdPsCaseRecordOrthodotics.setNonSystemic(box.getString("nonSystemic"));
						
						if(null != box.getString("other") && !box.getString("other").equals(""))
							opdPsCaseRecordOrthodotics.setOther(box.getString("other"));
						
						
						
						if(null != box.getString("past") && !box.getString("past").equals(""))
							opdPsCaseRecordOrthodotics.setPast(box.getString("past"));
						
						if(null != box.getString("present") && !box.getString("present").equals(""))
							opdPsCaseRecordOrthodotics.setPresent(box.getString("present"));
						
						if(null != box.getString("sittingNormal6Mnts") && !box.getString("sittingNormal6Mnts").equals(""))
							opdPsCaseRecordOrthodotics.setSittingNormal6Mnts(box.getString("sittingNormal6Mnts"));
						
						
						
						if(null != box.getString("crawlingNormal9Mnts") && !box.getString("crawlingNormal9Mnts").equals(""))
							opdPsCaseRecordOrthodotics.setCrawlingNormal9Mnts(box.getString("crawlingNormal9Mnts"));
						
						if(null != box.getString("standingNormal12Mnts") && !box.getString("standingNormal12Mnts").equals(""))
							opdPsCaseRecordOrthodotics.setStandingNormal12Mnts(box.getString("standingNormal12Mnts"));
						
						if(null != box.getString("walkingNormal15Mnts") && !box.getString("walkingNormal15Mnts").equals(""))
							opdPsCaseRecordOrthodotics.setWalkingNormal15Mnts(box.getString("walkingNormal15Mnts"));
						
						
						
						if(null != box.getString("runningNormal18Mnts") && !box.getString("runningNormal18Mnts").equals(""))
							opdPsCaseRecordOrthodotics.setRunningNormal18Mnts(box.getString("runningNormal18Mnts"));
						
						if(null != box.getString("speechAtYrs") && !box.getString("speechAtYrs").equals(""))
							opdPsCaseRecordOrthodotics.setSpeechAtYrs(box.getString("speechAtYrs"));
						
						if(null != box.getString("speechAtYrsNormal") && !box.getString("speechAtYrsNormal").equals(""))
							opdPsCaseRecordOrthodotics.setSpeechAtYrsNormal(box.getString("speechAtYrsNormal"));
						
						
						
						
						if(null != box.getString("speechValue") && !box.getString("speechValue").equals(""))
							opdPsCaseRecordOrthodotics.setSpeechValue(box.getString("speechValue"));
						
						if(null != box.getString("fingerThumbSucking") && !box.getString("fingerThumbSucking").equals(""))
							opdPsCaseRecordOrthodotics.setFingerThumbSucking(box.getString("fingerThumbSucking"));
						
						if(null != box.getString("dummySucking") && !box.getString("dummySucking").equals(""))
							opdPsCaseRecordOrthodotics.setDummySucking(box.getString("dummySucking"));
						
						
						if(null != box.getString("nailBitingLipBiting") && !box.getString("nailBitingLipBiting").equals(""))
							opdPsCaseRecordOrthodotics.setNailBitingLipBiting(box.getString("nailBitingLipBiting"));
						
						if(null != box.getString("tongueThrusting") && !box.getString("tongueThrusting").equals(""))
							opdPsCaseRecordOrthodotics.setTongueThrusting(box.getString("tongueThrusting"));
						
						if(null != box.getString("bruxism") && !box.getString("bruxism").equals(""))
							opdPsCaseRecordOrthodotics.setBruxism(box.getString("bruxism"));
						
						
						
						
						if(null != box.getString("mouthBreathing") && !box.getString("mouthBreathing").equals(""))
							opdPsCaseRecordOrthodotics.setMouthBreathing(box.getString("mouthBreathing"));
						
						if(null != box.getString("ifAnyHabitPresent") && !box.getString("ifAnyHabitPresent").equals(""))
							opdPsCaseRecordOrthodotics.setIfAnyHabitPresent(box.getString("ifAnyHabitPresent"));
						
						if(null != box.getString("duration") && !box.getString("duration").equals(""))
							opdPsCaseRecordOrthodotics.setDuration(box.getString("duration"));
						
						
						
						if(null != box.getString("intensity") && !box.getString("intensity").equals(""))
							opdPsCaseRecordOrthodotics.setIntensity(box.getString("intensity"));
						
						if(null != box.getString("frequency") && !box.getString("frequency").equals(""))
							opdPsCaseRecordOrthodotics.setFrequency(box.getString("frequency"));
						
						if(null != box.getString("respiration") && !box.getString("respiration").equals(""))
							opdPsCaseRecordOrthodotics.setRespiration(box.getString("respiration"));
						
						
						
						if(null != box.getString("deglutition") && !box.getString("deglutition").equals(""))
							opdPsCaseRecordOrthodotics.setDeglutition(box.getString("deglutition"));
						
						if(null != box.getString("mentionNature") && !box.getString("mentionNature").equals(""))
							opdPsCaseRecordOrthodotics.setMentionNature(box.getString("mentionNature"));
						
						if(null != box.getString("fractureOfTeeth") && !box.getString("fractureOfTeeth").equals(""))
							opdPsCaseRecordOrthodotics.setFractureOfTeeth(box.getString("fractureOfTeeth"));
						
						
						if(null != box.getString("fractureOfJaws") && !box.getString("fractureOfJaws").equals(""))
							opdPsCaseRecordOrthodotics.setFractureOfJaws(box.getString("fractureOfJaws"));
						
						if(null != box.getString("anyOther1") && !box.getString("anyOther1").equals(""))
							opdPsCaseRecordOrthodotics.setAnyOther1(box.getString("anyOther1"));
						
						if(null != box.getString("treatmentDone") && !box.getString("treatmentDone").equals(""))
							opdPsCaseRecordOrthodotics.setTreatmentDone(box.getString("treatmentDone"));
						
						if(null != box.getString("build") && !box.getString("build").equals(""))
							opdPsCaseRecordOrthodotics.setBuild(box.getString("build"));
						
						
						
						if(null != box.getString("gait") && !box.getString("gait").equals(""))
							opdPsCaseRecordOrthodotics.setGait(box.getString("gait"));
						
						if(null != box.getString("posture") && !box.getString("posture").equals(""))
							opdPsCaseRecordOrthodotics.setPosture(box.getString("posture"));
						
						if(null != box.getString("bodyType") && !box.getString("bodyType").equals(""))
							opdPsCaseRecordOrthodotics.setBodyType(box.getString("bodyType"));
						
						if(null != box.getString("chin") && !box.getString("chin").equals(""))
							opdPsCaseRecordOrthodotics.setChin(box.getString("chin"));
						
						
						
						if(null != box.getString("bodyProportion") && !box.getString("bodyProportion").equals(""))
							opdPsCaseRecordOrthodotics.setBodyProportion(box.getString("bodyProportion"));
						
						if(null != box.getString("pubisToHead") && !box.getString("pubisToHead").equals(""))
							opdPsCaseRecordOrthodotics.setPubisToHead(box.getString("pubisToHead"));
						
						if(null != box.getString("ratio") && !box.getString("ratio").equals(""))
							opdPsCaseRecordOrthodotics.setRatio(box.getString("ratio"));
						
						
						
						if(null != box.getString("biauricularWidth") && !box.getString("biauricularWidth").equals(""))
							opdPsCaseRecordOrthodotics.setBiauricularWidth(box.getString("biauricularWidth"));
						
						if(null != box.getString("lengthOfHead") && !box.getString("lengthOfHead").equals(""))
							opdPsCaseRecordOrthodotics.setLengthOfHead(box.getString("lengthOfHead"));
						
						if(null != box.getString("percentage") && !box.getString("percentage").equals(""))
							opdPsCaseRecordOrthodotics.setPercentage(box.getString("percentage"));
						
						
						
						if(null != box.getString("facialForm") && !box.getString("facialForm").equals(""))
							opdPsCaseRecordOrthodotics.setFacialForm(box.getString("facialForm"));
						
						if(null != box.getString("facialSymmetry") && !box.getString("facialSymmetry").equals(""))
							opdPsCaseRecordOrthodotics.setFacialSymmetry(box.getString("facialSymmetry"));
						
						if(null != box.getString("facialProfile") && !box.getString("facialProfile").equals(""))
							opdPsCaseRecordOrthodotics.setFacialProfile(box.getString("facialProfile"));
						
						
						
						if(null != box.getString("facialDivergence") && !box.getString("facialDivergence").equals(""))
							opdPsCaseRecordOrthodotics.setFacialDivergence(box.getString("facialDivergence"));
						
						if(null != box.getString("relativeSizeOfNose") && !box.getString("relativeSizeOfNose").equals(""))
							opdPsCaseRecordOrthodotics.setRelativeSizeOfNose(box.getString("relativeSizeOfNose"));
						
						if(null != box.getString("lowerLip") && !box.getString("lowerLip").equals(""))
							opdPsCaseRecordOrthodotics.setLowerLip(box.getString("lowerLip"));
						
						
						
						if(null != box.getString("upperLip") && !box.getString("upperLip").equals(""))
							opdPsCaseRecordOrthodotics.setUpperLip(box.getString("upperLip"));
						
						if(null != box.getString("lipPosture") && !box.getString("lipPosture").equals(""))
							opdPsCaseRecordOrthodotics.setLipPosture(box.getString("lipPosture"));
						
						if(null != box.getString("anatomic") && !box.getString("anatomic").equals(""))
							opdPsCaseRecordOrthodotics.setAnatomic(box.getString("anatomic"));
						
						
						
						if(null != box.getString("physiologic") && !box.getString("physiologic").equals(""))
							opdPsCaseRecordOrthodotics.setPhysiologic(box.getString("physiologic"));
						
						if(null != box.getString("dental") && !box.getString("dental").equals(""))
							opdPsCaseRecordOrthodotics.setDental(box.getString("dental"));
						
						if(null != box.getString("lipSize") && !box.getString("lipSize").equals(""))
							opdPsCaseRecordOrthodotics.setLipSize(box.getString("lipSize"));
						
						
						
						if(null != box.getString("lipSizeUpper") && !box.getString("lipSizeUpper").equals(""))
							opdPsCaseRecordOrthodotics.setLipSizeUpper(box.getString("lipSizeUpper"));
						
						if(null != box.getString("mentoLabialSulcus") && !box.getString("mentoLabialSulcus").equals(""))
							opdPsCaseRecordOrthodotics.setMentoLabialSulcus(box.getString("mentoLabialSulcus"));
						
						if(null != box.getString("interLabialGap") && !box.getString("interLabialGap").equals(""))
							opdPsCaseRecordOrthodotics.setInterLabialGap(box.getString("interLabialGap"));
						
						
						
						if(null != box.getString("facialHeight") && !box.getString("facialHeight").equals(""))
							opdPsCaseRecordOrthodotics.setFacialHeight(box.getString("facialHeight"));
						
						if(null != box.getString("facialHeightUfh") && !box.getString("facialHeightUfh").equals(""))
							opdPsCaseRecordOrthodotics.setFacialHeightUfh(box.getString("facialHeightUfh"));
						
						if(null != box.getString("facialHeightLfh") && !box.getString("facialHeightLfh").equals(""))
							opdPsCaseRecordOrthodotics.setFacialHeightLfh(box.getString("facialHeightLfh"));
						
						
						if(null != box.getString("facialHeightRatio") && !box.getString("facialHeightRatio").equals(""))
							opdPsCaseRecordOrthodotics.setFacialHeightRatio(box.getString("facialHeightRatio"));
						
						
						
						if(null != box.getString("circumOralMuscleTone") && !box.getString("circumOralMuscleTone").equals(""))
							opdPsCaseRecordOrthodotics.setCircumOralMuscleTone(box.getString("circumOralMuscleTone"));
						
						if(null != box.getString("skeletalClass") && !box.getString("skeletalClass").equals(""))
							opdPsCaseRecordOrthodotics.setSkeletalClass(box.getString("skeletalClass"));
						
						if(null != box.getString("max") && !box.getString("max").equals(""))
							opdPsCaseRecordOrthodotics.setMax(box.getString("max"));
						
						
						
						
						if(null != box.getString("mand") && !box.getString("mand").equals(""))
							opdPsCaseRecordOrthodotics.setMand(box.getString("mand"));
						
						if(null != box.getString("respirationHistory") && !box.getString("respirationHistory").equals(""))
							opdPsCaseRecordOrthodotics.setRespirationHistory(box.getString("respirationHistory"));
						
						if(null != box.getString("mastication") && !box.getString("mastication").equals(""))
							opdPsCaseRecordOrthodotics.setMastication(box.getString("mastication"));
						
						
						if(null != box.getString("deglutition_1") && !box.getString("deglutition1").equals(""))
							opdPsCaseRecordOrthodotics.setDeglutition1(box.getString("deglutition1"));
						
						if(null != box.getString("speech") && !box.getString("speech").equals(""))
							opdPsCaseRecordOrthodotics.setSpeech(box.getString("speech"));
						
						if(null != box.getString("pathOfClosurepathOfClosure") && !box.getString("pathOfClosure").equals(""))
							opdPsCaseRecordOrthodotics.setPathOfClosure(box.getString("pathOfClosure"));
						
						
						if(null != box.getString("interIncisalOpeningMaximum") && !box.getString("interIncisalOpeningMaximum").equals(""))
							opdPsCaseRecordOrthodotics.setInterIncisalOpeningMaximum(box.getString("interIncisalOpeningMaximum"));
						
						if(null != box.getString("smileLine") && !box.getString("smileLine").equals(""))
							opdPsCaseRecordOrthodotics.setSmileLine(box.getString("smileLine"));
						
						if(null != box.getString("gingivalExposure") && !box.getString("gingivalExposure").equals(""))
							opdPsCaseRecordOrthodotics.setGingivalExposure(box.getString("gingivalExposure"));
						
						
						if(null != box.getString("duringSpeech") && !box.getString("duringSpeech").equals(""))
							opdPsCaseRecordOrthodotics.setDuringSpeech(box.getString("duringSpeech"));
						
						if(null != box.getString("duringSmile") && !box.getString("duringSmile").equals(""))
							opdPsCaseRecordOrthodotics.setDuringSmile(box.getString("duringSmile"));
						
						if(null != box.getString("anyOther2") && !box.getString("anyOther2").equals(""))
							opdPsCaseRecordOrthodotics.setAnyOther2(box.getString("anyOther2"));
						
						
						if(null != box.getString("frenumAttachment") && !box.getString("frenumAttachment").equals(""))
							opdPsCaseRecordOrthodotics.setFrenumAttachment(box.getString("frenumAttachment"));
						
						if(null != box.getString("frenumAttachmentUpper") && !box.getString("frenumAttachmentUpper").equals(""))
							opdPsCaseRecordOrthodotics.setFrenumAttachmentUpper(box.getString("frenumAttachmentUpper"));
						
						if(null != box.getString("frenumAttachmentLower") && !box.getString("frenumAttachmentLower").equals(""))
							opdPsCaseRecordOrthodotics.setFrenumAttachmentLower(box.getString("frenumAttachmentLower"));
						
						
						if(null != box.getString("gingival") && !box.getString("gingival").equals(""))
							opdPsCaseRecordOrthodotics.setGingival(box.getString("gingival"));
						
						if(null != box.getString("pockets") && !box.getString("pockets").equals(""))
							opdPsCaseRecordOrthodotics.setPockets(box.getString("pockets"));
						
						if(null != box.getString("abnormalMuscleAttachments") && !box.getString("abnormalMuscleAttachments").equals(""))
							opdPsCaseRecordOrthodotics.setAbnormalMuscleAttachments(box.getString("abnormalMuscleAttachments"));
						
						
						if(null != box.getString("attachedGingiva") && !box.getString("attachedGingiva").equals(""))
							opdPsCaseRecordOrthodotics.setAttachedGingiva(box.getString("attachedGingiva"));
						
						if(null != box.getString("tongue") && !box.getString("tongue").equals(""))
							opdPsCaseRecordOrthodotics.setTongue(box.getString("tongue"));
						
						if(null != box.getString("size1") && !box.getString("size1").equals(""))
							opdPsCaseRecordOrthodotics.setSize1(box.getString("size1"));
						
						
						if(null != box.getString("shape") && !box.getString("shape").equals(""))
							opdPsCaseRecordOrthodotics.setShape(box.getString("shape"));
						
						if(null != box.getString("posture1") && !box.getString("posture1").equals(""))
							opdPsCaseRecordOrthodotics.setPosture1(box.getString("posture1"));
						
						if(null != box.getString("mobility") && !box.getString("mobility").equals(""))
							opdPsCaseRecordOrthodotics.setMobility(box.getString("mobility"));
						
						
						if(null != box.getString("habit") && !box.getString("habit").equals(""))
							opdPsCaseRecordOrthodotics.setHabit(box.getString("habit"));
						
						if(null != box.getString("tonsilsAndAdenoids") && !box.getString("tonsilsAndAdenoids").equals(""))
							opdPsCaseRecordOrthodotics.setTonsilsAndAdenoids(box.getString("tonsilsAndAdenoids"));
						
						if(null != box.getString("tmj") && !box.getString("tmj").equals(""))
							opdPsCaseRecordOrthodotics.setTmj(box.getString("tmj"));
						
						
						if(null != box.getString("pathOfClosure1") && !box.getString("pathOfClosure1").equals(""))
							opdPsCaseRecordOrthodotics.setPathOfClosure1(box.getString("pathOfClosure1"));
						
						if(null != box.getString("occlusalPrematurities") && !box.getString("occlusalPrematurities").equals(""))
							opdPsCaseRecordOrthodotics.setOcclusalPrematurities(box.getString("occlusalPrematurities"));
						
						if(null != box.getString("maximumOpeningBetweenIncisors") && !box.getString("maximumOpeningBetweenIncisors").equals(""))
							opdPsCaseRecordOrthodotics.setMaximumOpeningBetweenIncisors(box.getString("maximumOpeningBetweenIncisors"));
						
						
						if(null != box.getString("keyRidge") && !box.getString("keyRidge").equals(""))
							opdPsCaseRecordOrthodotics.setKeyRidge(box.getString("keyRidge"));
						
						if(null != box.getString("eruptionStatus") && !box.getString("eruptionStatus").equals(""))
							opdPsCaseRecordOrthodotics.setEruptionStatus(box.getString("eruptionStatus"));
						
						if(null != box.getString("caries") && !box.getString("caries").equals(""))
							opdPsCaseRecordOrthodotics.setCaries(box.getString("caries"));
						
						
						if(null != box.getString("restorations") && !box.getString("restorations").equals(""))
							opdPsCaseRecordOrthodotics.setRestorations(box.getString("restorations"));
						
						if(null != box.getString("defectiveRestorations") && !box.getString("defectiveRestorations").equals(""))
							opdPsCaseRecordOrthodotics.setDefectiveRestorations(box.getString("defectiveRestorations"));
						
						if(null != box.getString("uneruptedTeeth") && !box.getString("uneruptedTeeth").equals(""))
							opdPsCaseRecordOrthodotics.setUneruptedTeeth(box.getString("uneruptedTeeth"));
						
						
						if(null != box.getString("impactions") && !box.getString("impactions").equals(""))
							opdPsCaseRecordOrthodotics.setImpactions(box.getString("impactions"));
						
						if(null != box.getString("endodonticallyTrt") && !box.getString("endodonticallyTrt").equals(""))
							opdPsCaseRecordOrthodotics.setEndodonticallyTrt(box.getString("endodonticallyTrt"));
						
						if(null != box.getString("rotations") && !box.getString("rotations").equals(""))
							opdPsCaseRecordOrthodotics.setRotations(box.getString("rotations"));
						
						
						if(null != box.getString("teethInEruption") && !box.getString("teethInEruption").equals(""))
							opdPsCaseRecordOrthodotics.setTeethInEruption(box.getString("teethInEruption"));
						
						if(null != box.getString("enamel") && !box.getString("enamel").equals(""))
							opdPsCaseRecordOrthodotics.setEnamel(box.getString("enamel"));
						
						if(null != box.getString("texture") && !box.getString("texture").equals(""))
							opdPsCaseRecordOrthodotics.setTexture(box.getString("texture"));
						
						
						if(null != box.getString("whiteSpots") && !box.getString("whiteSpots").equals(""))
							opdPsCaseRecordOrthodotics.setWhiteSpots(box.getString("whiteSpots"));
						
						if(null != box.getString("visibleCracks") && !box.getString("visibleCracks").equals(""))
							opdPsCaseRecordOrthodotics.setVisibleCracks(box.getString("visibleCracks"));
						
						if(null != box.getString("shape1") && !box.getString("shape1").equals(""))
							opdPsCaseRecordOrthodotics.setShape1(box.getString("shape1"));
						
						
						if(null != box.getString("size2") && !box.getString("size2").equals(""))
							opdPsCaseRecordOrthodotics.setSize2(box.getString("size2"));
						
						
						if(null != box.getString("numberValue") && !box.getString("numberValue").equals(""))
							opdPsCaseRecordOrthodotics.setNumberValue(box.getString("numberValue"));
						
						if(null != box.getString("retained") && !box.getString("retained").equals(""))
							opdPsCaseRecordOrthodotics.setRetained(box.getString("retained"));
						
						if(null != box.getString("prematureLoss") && !box.getString("prematureLoss").equals(""))
							opdPsCaseRecordOrthodotics.setPrematureLoss(box.getString("prematureLoss"));
						
						
						if(null != box.getString("earlyEruption") && !box.getString("earlyEruption").equals(""))
							opdPsCaseRecordOrthodotics.setEarlyEruption(box.getString("earlyEruption"));
						
						
						if(null != box.getString("lateEruption") && !box.getString("lateEruption").equals(""))
							opdPsCaseRecordOrthodotics.setLateEruption(box.getString("lateEruption"));
						
						if(null != box.getString("occlusalWear") && !box.getString("occlusalWear").equals(""))
							opdPsCaseRecordOrthodotics.setOcclusalWear(box.getString("occlusalWear"));
						
						if(null != box.getString("baseRelationship") && !box.getString("baseRelationship").equals(""))
							opdPsCaseRecordOrthodotics.setBaseRelationship(box.getString("baseRelationship"));
						
						
						if(null != box.getString("oralHygiene") && !box.getString("oralHygiene").equals(""))
							opdPsCaseRecordOrthodotics.setOralHygiene(box.getString("oralHygiene"));
						
						
						if(null != box.getString("typeOfHomeCare") && !box.getString("typeOfHomeCare").equals(""))
							opdPsCaseRecordOrthodotics.setTypeOfHomeCare(box.getString("typeOfHomeCare"));
						
						if(null != box.getString("maxillaryArch") && !box.getString("maxillaryArch").equals(""))
							opdPsCaseRecordOrthodotics.setMaxillaryArch(box.getString("maxillaryArch"));
						
						if(null != box.getString("mandibularArch") && !box.getString("mandibularArch").equals(""))
							opdPsCaseRecordOrthodotics.setMandibularArch(box.getString("v"));
						
						
						if(null != box.getString("archShape") && !box.getString("archShape").equals(""))
							opdPsCaseRecordOrthodotics.setArchShape(box.getString("archShape"));
						
						
						if(null != box.getString("archSymmetry") && !box.getString("archSymmetry").equals(""))
							opdPsCaseRecordOrthodotics.setArchSymmetry(box.getString("archSymmetry"));
						
						
						if(null != box.getString("archAlignment") && !box.getString("archAlignment").equals(""))
							opdPsCaseRecordOrthodotics.setArchAlignment(box.getString("archAlignment"));
						
						if(null != box.getString("midline") && !box.getString("midline").equals(""))
							opdPsCaseRecordOrthodotics.setMidline(box.getString("midline"));
						
						if(null != box.getString("molar") && !box.getString("molar").equals(""))
							opdPsCaseRecordOrthodotics.setMolar(box.getString("molar"));
						
						
						if(null != box.getString("canine") && !box.getString("canine").equals(""))
							opdPsCaseRecordOrthodotics.setCanine(box.getString("canine"));
						
						
						if(null != box.getString("overJet") && !box.getString("overJet").equals(""))
							opdPsCaseRecordOrthodotics.setOverJet(box.getString("overJet"));
						
						if(null != box.getString("overbite") && !box.getString("overbite").equals(""))
							opdPsCaseRecordOrthodotics.setOverbite(box.getString("overbite"));
						
						if(null != box.getString("crossbite") && !box.getString("crossbite").equals(""))
							opdPsCaseRecordOrthodotics.setCrossbite(box.getString("crossbite"));
						
						if(null != box.getString("midline1") && !box.getString("midline1").equals(""))
							opdPsCaseRecordOrthodotics.setMidline1(box.getString("midline1"));
						
						if(null != box.getString("teethPresent") && !box.getString("teethPresent").equals(""))
							opdPsCaseRecordOrthodotics.setTeethPresent(box.getString("teethPresent"));
						
						if(null != box.getString("teethAbsent") && !box.getString("teethAbsent").equals(""))
							opdPsCaseRecordOrthodotics.setTeethAbsent(box.getString("teethAbsent"));
						
						
						if(null != box.getString("rootFormation") && !box.getString("rootFormation").equals(""))
							opdPsCaseRecordOrthodotics.setRootFormation(box.getString("rootFormation"));
						
						if(null != box.getString("permanentTeeth") && !box.getString("permanentTeeth").equals(""))
							opdPsCaseRecordOrthodotics.setPermanentTeeth(box.getString("permanentTeeth"));
						
						if(null != box.getString("deciduousTeeth") && !box.getString("deciduousTeeth").equals(""))
							opdPsCaseRecordOrthodotics.setDeciduousTeeth(box.getString("deciduousTeeth"));
						
						if(null != box.getString("permanentTeeth1") && !box.getString("permanentTeeth1").equals(""))
							opdPsCaseRecordOrthodotics.setPermanentTeeth1(box.getString("permanentTeeth1"));
						
						if(null != box.getString("deciduousTeeth1") && !box.getString("deciduousTeeth1").equals(""))
							opdPsCaseRecordOrthodotics.setDeciduousTeeth1(box.getString("deciduousTeeth1"));
						
						if(null != box.getString("characterOfRestoration") && !box.getString("characterOfRestoration").equals(""))
							opdPsCaseRecordOrthodotics.setCharacterOfRestoration(box.getString("characterOfRestoration"));
						
						if(null != box.getString("laminaDura") && !box.getString("laminaDura").equals(""))
							opdPsCaseRecordOrthodotics.setLaminaDura(box.getString("laminaDura"));
						
						if(null != box.getString("trabecularPattern") && !box.getString("trabecularPattern").equals(""))
							opdPsCaseRecordOrthodotics.setTrabecularPattern(box.getString("trabecularPattern"));
						
						if(null != box.getString("supermumeraryTeeth") && !box.getString("supermumeraryTeeth").equals(""))
							opdPsCaseRecordOrthodotics.setSupermumeraryTeeth(box.getString("supermumeraryTeeth"));
						
						if(null != box.getString("thirdMolarStatus") && !box.getString("thirdMolarStatus").equals(""))
							opdPsCaseRecordOrthodotics.setThirdMolarStatus(box.getString("thirdMolarStatus"));
						
						if(null != box.getString("pathologicalConditions") && !box.getString("pathologicalConditions").equals(""))
							opdPsCaseRecordOrthodotics.setPathologicalConditions(box.getString("pathologicalConditions"));
						
						if(null != box.getString("anyOther3") && !box.getString("anyOther3").equals(""))
							opdPsCaseRecordOrthodotics.setAnyOther3(box.getString("anyOther3"));
						
						if(null != box.getString("sumOfIncisors") && !box.getString("sumOfIncisors").equals(""))
							opdPsCaseRecordOrthodotics.setSumOfIncisors(box.getString("sumOfIncisors"));
						
						if(null != box.getString("actual1") && !box.getString("actual1").equals(""))
							opdPsCaseRecordOrthodotics.setActual1(box.getString("actual1"));
						
						if(null != box.getString("ideal1") && !box.getString("ideal1").equals(""))
							opdPsCaseRecordOrthodotics.setIdeal1(box.getString("ideal1"));
						
						if(null != box.getString("difference") && !box.getString("difference").equals(""))
							opdPsCaseRecordOrthodotics.setDifference(box.getString("difference"));
						
						
						if(null != box.getString("actual2") && !box.getString("actual2").equals(""))
							opdPsCaseRecordOrthodotics.setActual2(box.getString("actual2"));
						
						if(null != box.getString("ideal2") && !box.getString("ideal2").equals(""))
							opdPsCaseRecordOrthodotics.setIdeal2(box.getString("ideal2"));
						
						if(null != box.getString("difference1") && !box.getString("difference1").equals(""))
							opdPsCaseRecordOrthodotics.setDifference1(box.getString("difference1"));
						
						if(null != box.getString("permolarArea") && !box.getString("permolarArea").equals(""))
							opdPsCaseRecordOrthodotics.setPermolarArea(box.getString("permolarArea"));
						
						
						if(null != box.getString("molarArea") && !box.getString("molarArea").equals(""))
							opdPsCaseRecordOrthodotics.setMolarArea(box.getString("molarArea"));
						
						if(null != box.getString("actualLength") && !box.getString("actualLength").equals(""))
							opdPsCaseRecordOrthodotics.setActualLength(box.getString("actualLength"));
						
						if(null != box.getString("ideal") && !box.getString("ideal").equals(""))
							opdPsCaseRecordOrthodotics.setIdeal(box.getString("ideal"));
						
						
						if(null != box.getString("difference2") && !box.getString("difference2").equals(""))
							opdPsCaseRecordOrthodotics.setDifference2(box.getString("difference2"));
						
						if(null != box.getString("indicatesAnterior") && !box.getString("indicatesAnterior").equals(""))
							opdPsCaseRecordOrthodotics.setIndicatesAnterior(box.getString("indicatesAnterior"));
						
						if(null != box.getString("totalMaxillaryToothMaterial") && !box.getString("totalMaxillaryToothMaterial").equals(""))
							opdPsCaseRecordOrthodotics.setTotalMaxillaryToothMaterial(box.getString("totalMaxillaryToothMaterial"));
						
						
						if(null != box.getString("interPremolarArchWidth") && !box.getString("interPremolarArchWidth").equals(""))
							opdPsCaseRecordOrthodotics.setInterPremolarArchWidth(box.getString("interPremolarArchWidth"));
						
						if(null != box.getString("interCanineFossaWidth") && !box.getString("interCanineFossaWidth").equals(""))
							opdPsCaseRecordOrthodotics.setInterCanineFossaWidth(box.getString("interCanineFossaWidth"));
						
						if(null != box.getString("maxillary12") && !box.getString("maxillary12").equals(""))
							opdPsCaseRecordOrthodotics.setMaxillary12(box.getString("maxillary12"));
						
						
						if(null != box.getString("mandibular12") && !box.getString("mandibular12").equals(""))
							opdPsCaseRecordOrthodotics.setMandibular12(box.getString("mandibular12"));
						
						if(null != box.getString("maxillary6") && !box.getString("maxillary6").equals(""))
							opdPsCaseRecordOrthodotics.setMaxillary6(box.getString("maxillary6"));
						
						if(null != box.getString("mandibular6") && !box.getString("mandibular6").equals(""))
							opdPsCaseRecordOrthodotics.setMandibular6(box.getString("mandibular6"));
						
						
						if(null != box.getString("toothMaterialUpper") && !box.getString("toothMaterialUpper").equals(""))
							opdPsCaseRecordOrthodotics.setToothMaterialUpper(box.getString("toothMaterialUpper"));
						
						if(null != box.getString("toothMaterialLower") && !box.getString("toothMaterialLower").equals(""))
							opdPsCaseRecordOrthodotics.setToothMaterialLower(box.getString("toothMaterialLower"));
						
						
						
						if(null != box.getString("archPerimeterUpper") && !box.getString("archPerimeterUpper").equals(""))
							opdPsCaseRecordOrthodotics.setArchPerimeterUpper(box.getString("archPerimeterUpper"));
						

						if(null != box.getString("archPerimeterLower") && !box.getString("archPerimeterLower").equals(""))
							opdPsCaseRecordOrthodotics.setArchPerimeterLower(box.getString("archPerimeterLower"));
						
						
						if(null != box.getString("differenceUpper") && !box.getString("differenceUpper").equals(""))
							opdPsCaseRecordOrthodotics.setDifferenceUpper(box.getString("differenceUpper"));
						
						
						if(null != box.getString("inference") && !box.getString("inference").equals(""))
							opdPsCaseRecordOrthodotics.setInference(box.getString("inference"));
						
						if(null != box.getString("angleClass") && !box.getString("angleClass").equals(""))
							opdPsCaseRecordOrthodotics.setAngleClass(box.getString("angleClass"));
						
						if(null != box.getString("molar1") && !box.getString("molar1").equals(""))
							opdPsCaseRecordOrthodotics.setMolar1(box.getString("molar1"));
						
						
						if(null != box.getString("canine1") && !box.getString("canine1").equals(""))
							opdPsCaseRecordOrthodotics.setCanine1(box.getString("canine1"));
						
						if(null != box.getString("overJet1") && !box.getString("overJet1").equals(""))
							opdPsCaseRecordOrthodotics.setOverJet1(box.getString("overJet1"));
						
						if(null != box.getString("overbite1") && !box.getString("overbite1").equals(""))
							opdPsCaseRecordOrthodotics.setOverbite1(box.getString("overbite1"));
						
						
						if(null != box.getString("anterior") && !box.getString("anterior").equals(""))
							opdPsCaseRecordOrthodotics.setAnterior(box.getString("anterior"));
						
						if(null != box.getString("posterior") && !box.getString("posterior").equals(""))
							opdPsCaseRecordOrthodotics.setPosterior(box.getString("posterior"));
						
						if(null != box.getString("midlineUpper") && !box.getString("midlineUpper").equals(""))
							opdPsCaseRecordOrthodotics.setMidlineUpper(box.getString("midlineUpper"));
						
						
						if(null != box.getString("midlineLower") && !box.getString("midlineLower").equals(""))
							opdPsCaseRecordOrthodotics.setMidlineLower(box.getString("midlineLower"));
						
						if(null != box.getString("incisors") && !box.getString("incisors").equals(""))
							opdPsCaseRecordOrthodotics.setIncisors(box.getString("incisors"));
						
						if(null != box.getString("canines") && !box.getString("canines").equals(""))
							opdPsCaseRecordOrthodotics.setCanines(box.getString("canines"));
						
						
						if(null != box.getString("molars") && !box.getString("molars").equals(""))
							opdPsCaseRecordOrthodotics.setMolars(box.getString("molars"));
						
						if(null != box.getString("carpalIndex") && !box.getString("carpalIndex").equals(""))
							opdPsCaseRecordOrthodotics.setCarpalIndex(box.getString("carpalIndex"));
						
						if(null != box.getString("endocrineStudy") && !box.getString("endocrineStudy").equals(""))
							opdPsCaseRecordOrthodotics.setEndocrineStudy(box.getString("endocrineStudy"));
						
						
						if(null != box.getString("mbr") && !box.getString("mbr").equals(""))
							opdPsCaseRecordOrthodotics.setMBR(box.getString("mbr"));
						
						if(null != box.getString("calciumPlot") && !box.getString("calciumPlot").equals(""))
							opdPsCaseRecordOrthodotics.setCalciumPlot(box.getString("calciumPlot"));
						
						if(null != box.getString("keslingsSetUp") && !box.getString("keslingsSetUp").equals(""))
							opdPsCaseRecordOrthodotics.setKeslingsSetUp(box.getString("keslingsSetUp"));
						
						
						if(null != box.getString("probableEtiology") && !box.getString("probableEtiology").equals(""))
							opdPsCaseRecordOrthodotics.setProbableEtiology(box.getString("probableEtiology"));
						
						if(null != box.getString("generalTreatmentObjectives") && !box.getString("generalTreatmentObjectives").equals(""))
							opdPsCaseRecordOrthodotics.setGeneralTreatmentObjectives(box.getString("generalTreatmentObjectives"));
						
						if(null != box.getString("treatmentObjectives") && !box.getString("treatmentObjectives").equals(""))
							opdPsCaseRecordOrthodotics.setTreatmentObjectives(box.getString("treatmentObjectives"));
						
						
						if(null != box.getString("treatmentPlan") && !box.getString("treatmentPlan").equals(""))
							opdPsCaseRecordOrthodotics.setTreatmentPlan(box.getString("treatmentPlan"));
						
						if(null != box.getString("mechanotherapy") && !box.getString("mechanotherapy").equals(""))
							opdPsCaseRecordOrthodotics.setMechanotherapy(box.getString("mechanotherapy"));
						
						if(null != box.getString("prognesis") && !box.getString("prognesis").equals(""))
							opdPsCaseRecordOrthodotics.setPrognesis(box.getString("prognesis"));
						
						
						if(null != box.getString("retentionPlan") && !box.getString("retentionPlan").equals(""))
							opdPsCaseRecordOrthodotics.setRetentionPlan(box.getString("retentionPlan"));
						
						
						
						hbt.save(opdPsCaseRecordOrthodotics);
						tnx.commit();
						map.put("opdPsCaseRecordOrthodotics",opdPsCaseRecordOrthodotics);
						
						
						int hdbCEPHALOMETRICANALYSIS = 0;
						if(box.getInt("hdbCEPHALOMETRICANALYSIS") != 0){
							hdbCEPHALOMETRICANALYSIS = box.getInt("hdbCEPHALOMETRICANALYSIS");
						}
						for(int i=1;i<=hdbCEPHALOMETRICANALYSIS;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("measurement"+i).equals("") || !box.getString("steinerRefNorm"+i).equals("") ||!box.getString("kearalNorm"+i).equals("") || !box.getString("diff"+i).equals("") ||!box.getString("preTrt"+i).equals("")||!box.getString("postTrt"+i).equals("") )
							{
								
							if(!box.getString("measurement"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeasurement(box.getString("measurement"+i));
							}
							
							if(!box.getString("steinerRefNorm"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setSteinerRefNorm(box.getString("steinerRefNorm"+i));
							}
							if(!box.getString("kearalNorm"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setKearalNorm(box.getString("kearalNorm"+i));
							}
							if(!box.getString("preTrt"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setPreTrt(box.getString("preTrt"+i));
							}
							if(!box.getString("postTrt"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setPostTrt(box.getString("postTrt"+i));
							}
							if(!box.getString("diff"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setDiff(box.getString("diff"+i));
							}
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("CEPHALOMETRICANALYSIS");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						
						int hdbSoftTissueAnalysis = 0;
						if(box.getInt("hdbSoftTissueAnalysis") != 0){
							hdbSoftTissueAnalysis = box.getInt("hdbSoftTissueAnalysis");
						}
						for(int i=1;i<=hdbSoftTissueAnalysis;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("particulars"+i).equals("") || !box.getString("meanValueParticulars"+i).equals("") ||!box.getString("preTrt"+i).equals("")||!box.getString("postTrt").equals("") )
							{
								
							if(!box.getString("particulars"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setParticulars(box.getString("particulars"+i));
							}
							
							if(!box.getString("meanValueParticulars"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeanValue(box.getString("meanValueParticulars"+i));
							}
							if(!box.getString("preTrt"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setPreTrt(box.getString("preTrt"+i));
							}
							if(!box.getString("postTrt"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setPostTrt(box.getString("postTrt"+i));
							}
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("SoftTissueAnalysis");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						int hdbModelAnalysis = 0;
						if(box.getInt("hdbModelAnalysis") != 0){
							hdbModelAnalysis = box.getInt("hdbModelAnalysis");
						}
						for(int i=1;i<=hdbModelAnalysis;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("noOne"+i).equals("") || !box.getString("noOneText"+i).equals("") ||!box.getString("preTrt"+i).equals("")||!box.getString("postTrt").equals("") )
							{
								
							if(!box.getString("noOne"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoOne(box.getString("noOne"+i));
							}
							
							if(!box.getString("noOneText"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoOneText(box.getString("noOneText"+i));
							}
							if(!box.getString("noTwo"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoTwo(box.getString("noTwo"+i));
							}
							if(!box.getString("noTwoText"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoTwoText(box.getString("noTwoText"+i));
							}
							if(!box.getString("noThree"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoThree(box.getString("noThree"+i));
							}
							if(!box.getString("noThreeText"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoThreeText(box.getString("noThreeText"+i));
							}
							
							if(!box.getString("noFour"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoFour(box.getString("noFour"+i));
							}
							if(!box.getString("noFourText"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setNoFourText(box.getString("noFourText"+i));
							}
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("ModelAnalysis");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						
						
						
						int hdbCranial = 0;
						if(box.getInt("hdbCranial") != 0){
							hdbCranial = box.getInt("hdbCranial");
						}
						for(int i=1;i<=hdbCranial;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("measurementCranial"+i).equals("") || !box.getString("meanValueCranial"+i).equals("") ||!box.getString("valueCranial"+i).equals("") )
							{
								
							if(!box.getString("measurementCranial"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeasurement(box.getString("measurementCranial"+i));
							}
							
							if(!box.getString("meanValueCranial"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeanValue(box.getString("meanValueCranial"+i));
							}
							if(!box.getString("valueCranial"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setValueText(box.getString("valueCranial"+i));
							}
							
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("Cranial base");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						
						
						int hdbDental = 0;
						if(box.getInt("hdbDental") != 0){
							hdbDental = box.getInt("hdbDental");
						}
						for(int i=1;i<=hdbDental;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("measurementDental"+i).equals("") || !box.getString("meanValueDental"+i).equals("") ||!box.getString("valueDental"+i).equals("") )
							{
								
							if(!box.getString("measurementDental"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeasurement(box.getString("measurementDental"+i));
							}
							
							if(!box.getString("meanValueDental"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeanValue(box.getString("meanValueDental"+i));
							}
							if(!box.getString("valueDental"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setValueText(box.getString("valueDental"+i));
							}
							
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("Dental");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						
						int hdbMaxilla = 0;
						if(box.getInt("hdbMaxilla") != 0){
							hdbMaxilla = box.getInt("hdbMaxilla");
						}
						for(int i=1;i<=hdbMaxilla;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("measurementMaxilla"+i).equals("") || !box.getString("meanValueMaxilla"+i).equals("") ||!box.getString("valueMaxilla"+i).equals("") )
							{
								
							if(!box.getString("measurementMaxilla"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeasurement(box.getString("measurementMaxilla"+i));
							}
							
							if(!box.getString("meanValueMaxilla"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeanValue(box.getString("meanValueMaxilla"+i));
							}
							if(!box.getString("valueMaxilla"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setValueText(box.getString("valueMaxilla"+i));
							}
							
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("Maxilla");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						
						int hdbVertical = 0;
						if(box.getInt("hdbVertical") != 0){
							hdbVertical = box.getInt("hdbVertical");
						}
						for(int i=1;i<=hdbVertical;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("measurementVertical"+i).equals("") || !box.getString("meanValueVertical"+i).equals("") ||!box.getString("valueVertical"+i).equals("") )
							{
								
							if(!box.getString("measurementVertical"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeasurement(box.getString("measurementVertical"+i));
							}
							
							if(!box.getString("meanValueVertical"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeanValue(box.getString("meanValueVertical"+i));
							}
							if(!box.getString("valueVertical"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setValueText(box.getString("valueVertical"+i));
							}
							
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("Vertical");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						int hdbHorizontal = 0;
						if(box.getInt("hdbHorizontal") != 0){
							hdbHorizontal = box.getInt("hdbHorizontal");
						}
						for(int i=1;i<=hdbHorizontal;i++){
							
							OpdPsCaseRecordOrthodoticsDetails opdPsCaseRecordOrthodoticsDetails = new OpdPsCaseRecordOrthodoticsDetails(); 
							
							if(!box.getString("measurementHorizontal"+i).equals("") || !box.getString("meanValueHorizontal"+i).equals("") ||!box.getString("valueHorizontal"+i).equals("") )
							{
								
							if(!box.getString("measurementHorizontal"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeasurement(box.getString("measurementHorizontal"+i));
							}
							
							if(!box.getString("meanValueHorizontal"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setMeanValue(box.getString("meanValueHorizontal"+i));
							}
							if(!box.getString("valueHorizontal"+i).equals("")){
								opdPsCaseRecordOrthodoticsDetails.setValueText(box.getString("valueHorizontal"+i));
							}
							
						
							
						
							opdPsCaseRecordOrthodoticsDetails.setOpdPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							opdPsCaseRecordOrthodoticsDetails.setFlag("Horizontal");
			
							
							
							hbt.save(opdPsCaseRecordOrthodoticsDetails);
							
						}
							
						}
						
						int opdPsCaseRecordOrthodoticsId=opdPsCaseRecordOrthodotics.getId();
						if(opdPsCaseRecordOrthodoticsId!=0){
							
							OpdPreAssessmentClinicDental opdPreAssessmentClinicDental = new OpdPreAssessmentClinicDental();
							
						
							opdPreAssessmentClinicDental.setHin(patient);
							
							
							opdPreAssessmentClinicDental.setVisit(visit);
							
							opdPreAssessmentClinicDental.setFlag("PS Case Record Orthodotics");
							opdPreAssessmentClinicDental.setDepartment(masDepartment);
							
							
							opdPreAssessmentClinicDental.setHospital(masHospital);
							
							opdPreAssessmentClinicDental.setPsCaseRecordOrthodotics(opdPsCaseRecordOrthodotics);
							
							
						// for reading the checkBox value
						if(null != box.getString("data18") && !box.getString("data18").equals(""))
							opdPreAssessmentClinicDental.setTeeth18("y");
						else
							opdPreAssessmentClinicDental.setTeeth18("n");
						// for dropdown value
						String[] teeth_18_valueList=null;
						StringBuilder  tempTeeth_18_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_18_value") && !request.getParameterValues("teeth_18_value").equals("")){
							teeth_18_valueList=request.getParameterValues("teeth_18_value");
							for(String teeth18Value:teeth_18_valueList){
								tempTeeth_18_value.append(teeth18Value);
								tempTeeth_18_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth18Value(tempTeeth_18_value.toString());
						}
						
						if(null != box.getString("data17") && !box.getString("data17").equals(""))
							opdPreAssessmentClinicDental.setTeeth17("y");
						else
							opdPreAssessmentClinicDental.setTeeth17("n");
						
						String[] teeth_17_valueList=null;
						StringBuilder  tempTeeth_17_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_17_value") && !request.getParameterValues("teeth_17_value").equals("")){
							teeth_17_valueList=request.getParameterValues("teeth_17_value");
							for(String teeth17Value:teeth_17_valueList){
								tempTeeth_17_value.append(teeth17Value);
								tempTeeth_17_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth17Value(tempTeeth_17_value.toString());
						}
						
						if(null != box.getString("data16") && !box.getString("data16").equals(""))
							opdPreAssessmentClinicDental.setTeeth16("y");
						else
							opdPreAssessmentClinicDental.setTeeth16("n");
						
						String[] teeth_16_valueList=null;
						StringBuilder  tempTeeth_16_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_16_value") && !request.getParameterValues("teeth_16_value").equals("")){
							teeth_16_valueList=request.getParameterValues("teeth_16_value");
							for(String teeth16Value:teeth_16_valueList){
								tempTeeth_16_value.append(teeth16Value);
								tempTeeth_16_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth16Value(tempTeeth_16_value.toString());
						}
						
						if(null != box.getString("data15") && !box.getString("data15").equals(""))
							opdPreAssessmentClinicDental.setTeeth15("y");
						else
							opdPreAssessmentClinicDental.setTeeth15("n");

						String[] teeth_15_valueList=null;
						StringBuilder  tempTeeth_15_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_15_value") && !request.getParameterValues("teeth_15_value").equals("")){
							teeth_15_valueList = request.getParameterValues("teeth_15_value");
							for(String teeth15Value : teeth_15_valueList){
								tempTeeth_15_value.append(teeth15Value);
								tempTeeth_15_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth15Value(tempTeeth_15_value.toString());
						}
						
						if(null != box.getString("data14") && !box.getString("data14").equals(""))
							opdPreAssessmentClinicDental.setTeeth14("y");
						else
							opdPreAssessmentClinicDental.setTeeth14("n");
						
						String[] teeth_14_valueList=null;
						StringBuilder  tempTeeth_14_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_14_value") && !request.getParameterValues("teeth_14_value").equals("")){
							teeth_14_valueList=request.getParameterValues("teeth_14_value");
							for(String teeth14Value:teeth_14_valueList){
								tempTeeth_14_value.append(teeth14Value);
								tempTeeth_14_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth14Value(tempTeeth_14_value.toString());
						}
						
						if(null != box.getString("data13") && !box.getString("data13").equals(""))
							opdPreAssessmentClinicDental.setTeeth13("y");
						else
							opdPreAssessmentClinicDental.setTeeth13("n");
						
						String[] teeth_13_valueList=null;
						StringBuilder  tempTeeth_13_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_13_value") && !request.getParameterValues("teeth_13_value").equals("")){
							teeth_13_valueList=request.getParameterValues("teeth_13_value");
							for(String teeth13Value:teeth_13_valueList){
								tempTeeth_13_value.append(teeth13Value);
								tempTeeth_13_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth13Value(tempTeeth_13_value.toString());
						}
						
						if(null != box.getString("data12") && !box.getString("data12").equals(""))
							opdPreAssessmentClinicDental.setTeeth12("y");
						else
							opdPreAssessmentClinicDental.setTeeth12("n");
						
						String[] teeth_12_valueList=null;
						StringBuilder  tempTeeth_12_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_12_value") && !request.getParameterValues("teeth_12_value").equals("")){
							teeth_12_valueList=request.getParameterValues("teeth_12_value");
							for(String teeth12Value:teeth_12_valueList){
								tempTeeth_12_value.append(teeth12Value);
								tempTeeth_12_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth12Value(tempTeeth_12_value.toString());
						}
						
						if(null != box.getString("data11") && !box.getString("data11").equals(""))
							opdPreAssessmentClinicDental.setTeeth11("y");
						else
							opdPreAssessmentClinicDental.setTeeth11("n");
						
						String[] teeth_11_valueList=null;
						StringBuilder  tempTeeth_11_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_11_value") && !request.getParameterValues("teeth_11_value").equals("")){
							teeth_11_valueList=request.getParameterValues("teeth_11_value");
							for(String teeth11Value:teeth_11_valueList){
								tempTeeth_11_value.append(teeth11Value);
								tempTeeth_11_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth11Value(tempTeeth_11_value.toString());
						}
						
						if(null != box.getString("data21") && !box.getString("data21").equals(""))
							opdPreAssessmentClinicDental.setTeeth21("y");
						else
							opdPreAssessmentClinicDental.setTeeth21("n");
						
						String[] teeth_21_valueList=null;
						StringBuilder  tempTeeth_21_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_21_value") && !request.getParameterValues("teeth_21_value").equals("")){
							teeth_21_valueList=request.getParameterValues("teeth_21_value");
							for(String teeth21Value:teeth_21_valueList){
								tempTeeth_21_value.append(teeth21Value);
								tempTeeth_21_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth21Value(tempTeeth_21_value.toString());
						}
						
						
						if(null != box.getString("data22") && !box.getString("data22").equals(""))
							opdPreAssessmentClinicDental.setTeeth22("y");
						else
							opdPreAssessmentClinicDental.setTeeth22("n");
						
						String[] teeth_22_valueList=null;
						StringBuilder  tempTeeth_22_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_22_value") && !request.getParameterValues("teeth_22_value").equals("")){
							teeth_22_valueList=request.getParameterValues("teeth_22_value");
							for(String teeth22Value:teeth_22_valueList){
								tempTeeth_22_value.append(teeth22Value);
								tempTeeth_22_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth22Value(tempTeeth_22_value.toString());
						}
						
						if(null != box.getString("data23") && !box.getString("data23").equals(""))
							opdPreAssessmentClinicDental.setTeeth23("y");
						else
							opdPreAssessmentClinicDental.setTeeth23("n");
						
						String[] teeth_23_valueList=null;
						StringBuilder  tempTeeth_23_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_23_value") && !request.getParameterValues("teeth_23_value").equals("")){
							teeth_23_valueList=request.getParameterValues("teeth_23_value");
							for(String teeth23Value:teeth_23_valueList){
								tempTeeth_23_value.append(teeth23Value);
								tempTeeth_23_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth23Value(tempTeeth_23_value.toString());
						}
						
						
						if(null != box.getString("data24") && !box.getString("data24").equals(""))
							opdPreAssessmentClinicDental.setTeeth24("y");
						else
							opdPreAssessmentClinicDental.setTeeth24("n");
						
						String[] teeth_24_valueList=null;
						StringBuilder  tempTeeth_24_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_24_value") && !request.getParameterValues("teeth_24_value").equals("")){
							teeth_24_valueList=request.getParameterValues("teeth_24_value");
							for(String teeth24Value:teeth_24_valueList){
								tempTeeth_24_value.append(teeth24Value);
								tempTeeth_24_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth24Value(tempTeeth_24_value.toString());
						}
						
						if(null != box.getString("data25") && !box.getString("data25").equals(""))
							opdPreAssessmentClinicDental.setTeeth25("y");
						else
							opdPreAssessmentClinicDental.setTeeth25("n");
						
						String[] teeth_25_valueList=null;
						StringBuilder  tempTeeth_25_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_25_value") && !request.getParameterValues("teeth_25_value").equals("")){
							teeth_25_valueList=request.getParameterValues("teeth_25_value");
							for(String teeth25Value:teeth_25_valueList){
								tempTeeth_25_value.append(teeth25Value);
								tempTeeth_25_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth25Value(tempTeeth_25_value.toString());
						}
						
						if(null != box.getString("data26") && !box.getString("data26").equals(""))
							opdPreAssessmentClinicDental.setTeeth26("y");
						else
							opdPreAssessmentClinicDental.setTeeth26("n");
						
						String[] teeth_26_valueList=null;
						StringBuilder  tempTeeth_26_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_26_value") && !request.getParameterValues("teeth_26_value").equals("")){
							teeth_26_valueList=request.getParameterValues("teeth_26_value");
							for(String teeth26Value:teeth_26_valueList){
								tempTeeth_26_value.append(teeth26Value);
								tempTeeth_26_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth26Value(tempTeeth_26_value.toString());
						}
						
						if(null != box.getString("data27") && !box.getString("data27").equals(""))
							opdPreAssessmentClinicDental.setTeeth27("y");
						else
							opdPreAssessmentClinicDental.setTeeth27("n");
						
						String[] teeth_27_valueList=null;
						StringBuilder  tempTeeth_27_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_27_value") && !request.getParameterValues("teeth_27_value").equals("")){
							teeth_27_valueList=request.getParameterValues("teeth_27_value");
							for(String teeth27Value:teeth_27_valueList){
								tempTeeth_27_value.append(teeth27Value);
								tempTeeth_27_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth27Value(tempTeeth_27_value.toString());
						}
						
						if(null != box.getString("data28") && !box.getString("data28").equals(""))
							opdPreAssessmentClinicDental.setTeeth28("y");
						else
							opdPreAssessmentClinicDental.setTeeth28("n");
						
						String[] teeth_28_valueList=null;
						StringBuilder  tempTeeth_28_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_28_value") && !request.getParameterValues("teeth_28_value").equals("")){
							teeth_28_valueList=request.getParameterValues("teeth_28_value");
							for(String teeth28Value:teeth_28_valueList){
								tempTeeth_28_value.append(teeth28Value);
								tempTeeth_28_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth28Value(tempTeeth_28_value.toString());
						}
						
						if(null != box.getString("data48") && !box.getString("data48").equals(""))
							opdPreAssessmentClinicDental.setTeeth48("y");
						else
							opdPreAssessmentClinicDental.setTeeth48("n");
						
						// for dropdown value
						String[] teeth_48_valueList=null;
						StringBuilder  tempTeeth_48_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_48_value") && !request.getParameterValues("teeth_48_value").equals("")){
							teeth_48_valueList=request.getParameterValues("teeth_48_value");
							for(String teeth48Value:teeth_48_valueList){
								tempTeeth_48_value.append(teeth48Value);
								tempTeeth_48_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth48Value(tempTeeth_48_value.toString());
						}
						
						if(null != box.getString("data47") && !box.getString("data47").equals(""))
							opdPreAssessmentClinicDental.setTeeth47("y");
						else
							opdPreAssessmentClinicDental.setTeeth47("n");
						
						String[] teeth_47_valueList=null;
						StringBuilder  tempTeeth_47_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_47_value") && !request.getParameterValues("teeth_47_value").equals("")){
							teeth_47_valueList=request.getParameterValues("teeth_47_value");
							for(String teeth47Value:teeth_47_valueList){
								tempTeeth_47_value.append(teeth47Value);
								tempTeeth_47_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth47Value(tempTeeth_47_value.toString());
						}
						
						if(null != box.getString("data46") && !box.getString("data46").equals(""))
							opdPreAssessmentClinicDental.setTeeth46("y");
						else
							opdPreAssessmentClinicDental.setTeeth46("n");
						
						String[] teeth_46_valueList=null;
						StringBuilder  tempTeeth_46_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_46_value") && !request.getParameterValues("teeth_46_value").equals("")){
							teeth_46_valueList=request.getParameterValues("teeth_46_value");
							for(String teeth46Value:teeth_46_valueList){
								tempTeeth_46_value.append(teeth46Value);
								tempTeeth_46_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth46Value(tempTeeth_46_value.toString());
						}
						
						if(null != box.getString("data45") && !box.getString("data45").equals(""))
							opdPreAssessmentClinicDental.setTeeth45("y");
						else
							opdPreAssessmentClinicDental.setTeeth45("n");

						String[] teeth_45_valueList=null;
						StringBuilder  tempTeeth_45_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_45_value") && !request.getParameterValues("teeth_45_value").equals("")){
							teeth_45_valueList = request.getParameterValues("teeth_45_value");
							for(String teeth45Value : teeth_45_valueList){
								tempTeeth_45_value.append(teeth45Value);
								tempTeeth_45_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth45Value(tempTeeth_45_value.toString());
						}
						
						if(null != box.getString("data44") && !box.getString("data44").equals(""))
							opdPreAssessmentClinicDental.setTeeth44("y");
						else
							opdPreAssessmentClinicDental.setTeeth44("n");
						
						String[] teeth_44_valueList=null;
						StringBuilder  tempTeeth_44_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_44_value") && !request.getParameterValues("teeth_44_value").equals("")){
							teeth_44_valueList=request.getParameterValues("teeth_44_value");
							for(String teeth44Value:teeth_44_valueList){
								tempTeeth_44_value.append(teeth44Value);
								tempTeeth_44_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth44Value(tempTeeth_44_value.toString());
						}
						
						if(null != box.getString("data43") && !box.getString("data43").equals(""))
							opdPreAssessmentClinicDental.setTeeth43("y");
						else
							opdPreAssessmentClinicDental.setTeeth43("n");
						
						String[] teeth_43_valueList=null;
						StringBuilder  tempTeeth_43_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_43_value") && !request.getParameterValues("teeth_43_value").equals("")){
							teeth_43_valueList=request.getParameterValues("teeth_43_value");
							for(String teeth43Value:teeth_43_valueList){
								tempTeeth_43_value.append(teeth43Value);
								tempTeeth_43_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth43Value(tempTeeth_43_value.toString());
						}
						
						if(null != box.getString("data42") && !box.getString("data42").equals(""))
							opdPreAssessmentClinicDental.setTeeth42("y");
						else
							opdPreAssessmentClinicDental.setTeeth42("n");
						
						String[] teeth_42_valueList=null;
						StringBuilder  tempTeeth_42_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_42_value") && !request.getParameterValues("teeth_42_value").equals("")){
							teeth_42_valueList=request.getParameterValues("teeth_42_value");
							for(String teeth42Value:teeth_42_valueList){
								tempTeeth_42_value.append(teeth42Value);
								tempTeeth_42_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth42Value(tempTeeth_42_value.toString());
						}
						
						if(null != box.getString("data41") && !box.getString("data41").equals(""))
							opdPreAssessmentClinicDental.setTeeth41("y");
						else
							opdPreAssessmentClinicDental.setTeeth41("n");
						
						String[] teeth_41_valueList=null;
						StringBuilder  tempTeeth_41_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_41_value") && !request.getParameterValues("teeth_41_value").equals("")){
							teeth_41_valueList=request.getParameterValues("teeth_41_value");
							for(String teeth41Value:teeth_41_valueList){
								tempTeeth_41_value.append(teeth41Value);
								tempTeeth_41_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth41Value(tempTeeth_41_value.toString());
						}
						
						if(null != box.getString("data31") && !box.getString("data31").equals(""))
							opdPreAssessmentClinicDental.setTeeth31("y");
						else
							opdPreAssessmentClinicDental.setTeeth31("n");
						
						String[] teeth_31_valueList=null;
						StringBuilder  tempTeeth_31_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_31_value") && !request.getParameterValues("teeth_31_value").equals("")){
							teeth_31_valueList=request.getParameterValues("teeth_31_value");
							for(String teeth31Value:teeth_31_valueList){
								tempTeeth_31_value.append(teeth31Value);
								tempTeeth_31_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth31Value(tempTeeth_31_value.toString());
						}
						
						
						if(null != box.getString("data32") && !box.getString("data32").equals(""))
							opdPreAssessmentClinicDental.setTeeth32("y");
						else
							opdPreAssessmentClinicDental.setTeeth32("n");
						
						String[] teeth_32_valueList=null;
						StringBuilder  tempTeeth_32_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_32_value") && !request.getParameterValues("teeth_32_value").equals("")){
							teeth_32_valueList=request.getParameterValues("teeth_32_value");
							for(String teeth32Value:teeth_32_valueList){
								tempTeeth_32_value.append(teeth32Value);
								tempTeeth_32_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth32Value(tempTeeth_32_value.toString());
						}
						
						if(null != box.getString("data33") && !box.getString("data33").equals(""))
							opdPreAssessmentClinicDental.setTeeth33("y");
						else
							opdPreAssessmentClinicDental.setTeeth33("n");
						
						String[] teeth_33_valueList=null;
						StringBuilder  tempTeeth_33_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_33_value") && !request.getParameterValues("teeth_33_value").equals("")){
							teeth_33_valueList=request.getParameterValues("teeth_33_value");
							for(String teeth33Value:teeth_33_valueList){
								tempTeeth_33_value.append(teeth33Value);
								tempTeeth_33_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth33Value(tempTeeth_33_value.toString());
						}
						
						
						if(null != box.getString("data34") && !box.getString("data34").equals(""))
							opdPreAssessmentClinicDental.setTeeth34("y");
						else
							opdPreAssessmentClinicDental.setTeeth34("n");
						
						String[] teeth_34_valueList=null;
						StringBuilder  tempTeeth_34_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_34_value") && !request.getParameterValues("teeth_34_value").equals("")){
							teeth_34_valueList=request.getParameterValues("teeth_34_value");
							for(String teeth34Value:teeth_34_valueList){
								tempTeeth_34_value.append(teeth34Value);
								tempTeeth_34_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth34Value(tempTeeth_34_value.toString());
						}
						
						if(null != box.getString("data35") && !box.getString("data35").equals(""))
							opdPreAssessmentClinicDental.setTeeth35("y");
						else
							opdPreAssessmentClinicDental.setTeeth35("n");
						
						String[] teeth_35_valueList=null;
						StringBuilder  tempTeeth_35_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_35_value") && !request.getParameterValues("teeth_35_value").equals("")){
							teeth_35_valueList=request.getParameterValues("teeth_35_value");
							for(String teeth35Value:teeth_35_valueList){
								tempTeeth_35_value.append(teeth35Value);
								tempTeeth_35_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth35Value(tempTeeth_35_value.toString());
						}
						
						if(null != box.getString("data36") && !box.getString("data36").equals(""))
							opdPreAssessmentClinicDental.setTeeth36("y");
						else
							opdPreAssessmentClinicDental.setTeeth36("n");
						
						String[] teeth_36_valueList=null;
						StringBuilder  tempTeeth_36_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_36_value") && !request.getParameterValues("teeth_36_value").equals("")){
							teeth_36_valueList=request.getParameterValues("teeth_36_value");
							for(String teeth36Value:teeth_36_valueList){
								tempTeeth_36_value.append(teeth36Value);
								tempTeeth_36_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth36Value(tempTeeth_36_value.toString());
						}
						
						if(null != box.getString("data37") && !box.getString("data37").equals(""))
							opdPreAssessmentClinicDental.setTeeth37("y");
						else
							opdPreAssessmentClinicDental.setTeeth37("n");
						
						String[] teeth_37_valueList=null;
						StringBuilder  tempTeeth_37_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_37_value") && !request.getParameterValues("teeth_37_value").equals("")){
							teeth_37_valueList=request.getParameterValues("teeth_37_value");
							for(String teeth37Value:teeth_37_valueList){
								tempTeeth_37_value.append(teeth37Value);
								tempTeeth_37_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth37Value(tempTeeth_37_value.toString());
						}
						
						if(null != box.getString("data38") && !box.getString("data38").equals(""))
							opdPreAssessmentClinicDental.setTeeth38("y");
						else
							opdPreAssessmentClinicDental.setTeeth38("n");
						
						String[] teeth_38_valueList=null;
						StringBuilder  tempTeeth_38_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_38_value") && !request.getParameterValues("teeth_38_value").equals("")){
							teeth_38_valueList=request.getParameterValues("teeth_38_value");
							for(String teeth38Value:teeth_38_valueList){
								tempTeeth_38_value.append(teeth38Value);
								tempTeeth_38_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth38Value(tempTeeth_38_value.toString());
						}
						
						if(null != box.getString("data51") && !box.getString("data51").equals(""))
							opdPreAssessmentClinicDental.setTeeth51("y");
						else
							opdPreAssessmentClinicDental.setTeeth51("n");
						
						String[] teeth_51_valueList=null;
						StringBuilder  tempTeeth_51_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_51_value") && !request.getParameterValues("teeth_51_value").equals("")){
							teeth_51_valueList=request.getParameterValues("teeth_51_value");
							for(String teeth51Value:teeth_51_valueList){
								tempTeeth_51_value.append(teeth51Value);
								tempTeeth_51_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth51Value(tempTeeth_51_value.toString());
						}
						
						
						if(null != box.getString("data52") && !box.getString("data52").equals(""))
							opdPreAssessmentClinicDental.setTeeth52("y");
						else
							opdPreAssessmentClinicDental.setTeeth52("n");
						
						String[] teeth_52_valueList=null;
						StringBuilder  tempTeeth_52_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_52_value") && !request.getParameterValues("teeth_52_value").equals("")){
							teeth_52_valueList=request.getParameterValues("teeth_52_value");
							for(String teeth52Value:teeth_52_valueList){
								tempTeeth_52_value.append(teeth52Value);
								tempTeeth_52_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth52Value(tempTeeth_52_value.toString());
						}
						
						if(null != box.getString("data53") && !box.getString("data53").equals(""))
							opdPreAssessmentClinicDental.setTeeth53("y");
						else
							opdPreAssessmentClinicDental.setTeeth53("n");
						
						String[] teeth_53_valueList=null;
						StringBuilder  tempTeeth_53_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_53_value") && !request.getParameterValues("teeth_53_value").equals("")){
							teeth_53_valueList=request.getParameterValues("teeth_53_value");
							for(String teeth53Value:teeth_53_valueList){
								tempTeeth_53_value.append(teeth53Value);
								tempTeeth_53_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth53Value(tempTeeth_53_value.toString());
						}
						
						
						if(null != box.getString("data54") && !box.getString("data54").equals(""))
							opdPreAssessmentClinicDental.setTeeth54("y");
						else
							opdPreAssessmentClinicDental.setTeeth54("n");
						
						String[] teeth_54_valueList=null;
						StringBuilder  tempTeeth_54_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_54_value") && !request.getParameterValues("teeth_54_value").equals("")){
							teeth_54_valueList=request.getParameterValues("teeth_54_value");
							for(String teeth54Value:teeth_54_valueList){
								tempTeeth_54_value.append(teeth54Value);
								tempTeeth_54_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth54Value(tempTeeth_54_value.toString());
						}
						
						if(null != box.getString("data55") && !box.getString("data55").equals(""))
							opdPreAssessmentClinicDental.setTeeth55("y");
						else
							opdPreAssessmentClinicDental.setTeeth55("n");
						
						String[] teeth_55_valueList=null;
						StringBuilder  tempTeeth_55_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_55_value") && !request.getParameterValues("teeth_55_value").equals("")){
							teeth_55_valueList=request.getParameterValues("teeth_55_value");
							for(String teeth55Value:teeth_55_valueList){
								tempTeeth_55_value.append(teeth55Value);
								tempTeeth_55_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth55Value(tempTeeth_55_value.toString());
						}
						
						
						if(null != box.getString("data61") && !box.getString("data61").equals(""))
							opdPreAssessmentClinicDental.setTeeth61("y");
						else
							opdPreAssessmentClinicDental.setTeeth61("n");
						
						String[] teeth_61_valueList=null;
						StringBuilder  tempTeeth_61_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_61_value") && !request.getParameterValues("teeth_61_value").equals("")){
							teeth_61_valueList=request.getParameterValues("teeth_61_value");
							for(String teeth61Value:teeth_61_valueList){
								tempTeeth_61_value.append(teeth61Value);
								tempTeeth_61_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth61Value(tempTeeth_61_value.toString());
						}
						
						
						if(null != box.getString("data62") && !box.getString("data62").equals(""))
							opdPreAssessmentClinicDental.setTeeth62("y");
						else
							opdPreAssessmentClinicDental.setTeeth62("n");
						
						String[] teeth_62_valueList=null;
						StringBuilder  tempTeeth_62_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_62_value") && !request.getParameterValues("teeth_62_value").equals("")){
							teeth_62_valueList=request.getParameterValues("teeth_62_value");
							for(String teeth62Value:teeth_62_valueList){
								tempTeeth_62_value.append(teeth62Value);
								tempTeeth_62_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth62Value(tempTeeth_62_value.toString());
						}
						
						if(null != box.getString("data63") && !box.getString("data63").equals(""))
							opdPreAssessmentClinicDental.setTeeth63("y");
						else
							opdPreAssessmentClinicDental.setTeeth63("n");
						
						String[] teeth_63_valueList=null;
						StringBuilder  tempTeeth_63_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_63_value") && !request.getParameterValues("teeth_63_value").equals("")){
							teeth_63_valueList=request.getParameterValues("teeth_63_value");
							for(String teeth63Value:teeth_63_valueList){
								tempTeeth_63_value.append(teeth63Value);
								tempTeeth_63_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth63Value(tempTeeth_63_value.toString());
						}
						
						
						if(null != box.getString("data64") && !box.getString("data64").equals(""))
							opdPreAssessmentClinicDental.setTeeth64("y");
						else
							opdPreAssessmentClinicDental.setTeeth64("n");
						
						String[] teeth_64_valueList=null;
						StringBuilder  tempTeeth_64_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_64_value") && !request.getParameterValues("teeth_64_value").equals("")){
							teeth_64_valueList=request.getParameterValues("teeth_64_value");
							for(String teeth64Value:teeth_64_valueList){
								tempTeeth_64_value.append(teeth64Value);
								tempTeeth_64_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth64Value(tempTeeth_64_value.toString());
						}
						
						if(null != box.getString("data65") && !box.getString("data65").equals(""))
							opdPreAssessmentClinicDental.setTeeth65("y");
						else
							opdPreAssessmentClinicDental.setTeeth65("n");
						
						String[] teeth_65_valueList=null;
						StringBuilder  tempTeeth_65_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_65_value") && !request.getParameterValues("teeth_65_value").equals("")){
							teeth_65_valueList=request.getParameterValues("teeth_65_value");
							for(String teeth65Value:teeth_65_valueList){
								tempTeeth_65_value.append(teeth65Value);
								tempTeeth_65_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth65Value(tempTeeth_65_value.toString());
						}
						
						if(null != box.getString("data81") && !box.getString("data81").equals(""))
							opdPreAssessmentClinicDental.setTeeth81("y");
						else
							opdPreAssessmentClinicDental.setTeeth81("n");
						
						String[] teeth_81_valueList=null;
						StringBuilder  tempTeeth_81_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_81_value") && !request.getParameterValues("teeth_81_value").equals("")){
							teeth_81_valueList=request.getParameterValues("teeth_81_value");
							for(String teeth81Value:teeth_81_valueList){
								tempTeeth_81_value.append(teeth81Value);
								tempTeeth_81_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth81Value(tempTeeth_81_value.toString());
						}
						
						
						if(null != box.getString("data82") && !box.getString("data82").equals(""))
							opdPreAssessmentClinicDental.setTeeth82("y");
						else
							opdPreAssessmentClinicDental.setTeeth82("n");
						
						String[] teeth_82_valueList=null;
						StringBuilder  tempTeeth_82_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_82_value") && !request.getParameterValues("teeth_82_value").equals("")){
							teeth_82_valueList=request.getParameterValues("teeth_82_value");
							for(String teeth82Value:teeth_82_valueList){
								tempTeeth_82_value.append(teeth82Value);
								tempTeeth_82_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth82Value(tempTeeth_82_value.toString());
						}
						
						if(null != box.getString("data83") && !box.getString("data83").equals(""))
							opdPreAssessmentClinicDental.setTeeth83("y");
						else
							opdPreAssessmentClinicDental.setTeeth83("n");
						
						String[] teeth_83_valueList=null;

						StringBuilder  tempTeeth_83_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_83_value") && !request.getParameterValues("teeth_83_value").equals("")){
							teeth_83_valueList=request.getParameterValues("teeth_83_value");
							for(String teeth83Value:teeth_83_valueList){
								tempTeeth_83_value.append(teeth83Value);
								tempTeeth_83_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth83Value(tempTeeth_83_value.toString());
						}
						
						
						if(null != box.getString("data84") && !box.getString("data84").equals(""))
							opdPreAssessmentClinicDental.setTeeth84("y");
						else
							opdPreAssessmentClinicDental.setTeeth84("n");
						
						String[] teeth_84_valueList=null;
						StringBuilder  tempTeeth_84_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_84_value") && !request.getParameterValues("teeth_84_value").equals("")){
							teeth_84_valueList=request.getParameterValues("teeth_84_value");
							for(String teeth84Value:teeth_84_valueList){
								tempTeeth_84_value.append(teeth84Value);
								tempTeeth_84_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth84Value(tempTeeth_84_value.toString());
						}
						
						if(null != box.getString("data85") && !box.getString("data85").equals(""))
							opdPreAssessmentClinicDental.setTeeth85("y");
						else
							opdPreAssessmentClinicDental.setTeeth85("n");
						
						String[] teeth_85_valueList=null;
						StringBuilder  tempTeeth_85_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_85_value") && !request.getParameterValues("teeth_85_value").equals("")){
							teeth_85_valueList=request.getParameterValues("teeth_85_value");
							for(String teeth85Value:teeth_85_valueList){
								tempTeeth_85_value.append(teeth85Value);
								tempTeeth_85_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth85Value(tempTeeth_85_value.toString());
						}
						

						if(null != box.getString("data71") && !box.getString("data71").equals(""))
							opdPreAssessmentClinicDental.setTeeth71("y");
						else
							opdPreAssessmentClinicDental.setTeeth71("n");
						
						String[] teeth_71_valueList=null;
						StringBuilder  tempTeeth_71_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_71_value") && !request.getParameterValues("teeth_71_value").equals("")){
							teeth_71_valueList=request.getParameterValues("teeth_71_value");
							for(String teeth71Value:teeth_71_valueList){
								tempTeeth_71_value.append(teeth71Value);
								tempTeeth_71_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth71Value(tempTeeth_71_value.toString());
						}
						
						
						if(null != box.getString("data72") && !box.getString("data72").equals(""))
							opdPreAssessmentClinicDental.setTeeth72("y");
						else
							opdPreAssessmentClinicDental.setTeeth72("n");
						
						String[] teeth_72_valueList=null;
						StringBuilder  tempTeeth_72_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_72_value") && !request.getParameterValues("teeth_72_value").equals("")){
							teeth_72_valueList=request.getParameterValues("teeth_72_value");
							for(String teeth72Value:teeth_72_valueList){
								tempTeeth_72_value.append(teeth72Value);
								tempTeeth_72_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth72Value(tempTeeth_72_value.toString());
						}
						
						if(null != box.getString("data73") && !box.getString("data73").equals(""))
							opdPreAssessmentClinicDental.setTeeth73("y");
						else
							opdPreAssessmentClinicDental.setTeeth73("n");
						
						String[] teeth_73_valueList=null;
						StringBuilder  tempTeeth_73_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_73_value") && !request.getParameterValues("teeth_73_value").equals("")){
							teeth_73_valueList=request.getParameterValues("teeth_73_value");
							for(String teeth73Value:teeth_73_valueList){
								tempTeeth_73_value.append(teeth73Value);
								tempTeeth_73_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth73Value(tempTeeth_73_value.toString());
						}
						
						
						if(null != box.getString("data74") && !box.getString("data74").equals(""))
							opdPreAssessmentClinicDental.setTeeth74("y");
						else
							opdPreAssessmentClinicDental.setTeeth74("n");
						
						String[] teeth_74_valueList=null;
						StringBuilder  tempTeeth_74_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_74_value") && !request.getParameterValues("teeth_74_value").equals("")){
							teeth_74_valueList=request.getParameterValues("teeth_74_value");
							for(String teeth74Value:teeth_74_valueList){
								tempTeeth_74_value.append(teeth74Value);
								tempTeeth_74_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth74Value(tempTeeth_74_value.toString());
						}
						
						if(null != box.getString("data75") && !box.getString("data75").equals(""))
							opdPreAssessmentClinicDental.setTeeth75("y");
						else
							opdPreAssessmentClinicDental.setTeeth75("n");
						
						String[] teeth_75_valueList=null;
						StringBuilder  tempTeeth_75_value=new StringBuilder();
						if(null != request.getParameterValues("teeth_75_value") && !request.getParameterValues("teeth_75_value").equals("")){
							teeth_75_valueList=request.getParameterValues("teeth_75_value");
							for(String teeth75Value:teeth_75_valueList){
								tempTeeth_75_value.append(teeth75Value);
								tempTeeth_75_value.append(",");
							}
							opdPreAssessmentClinicDental.setTeeth75Value(tempTeeth_75_value.toString());
						}
						hbt.save(opdPreAssessmentClinicDental);
						tnx.commit();
						map.put("opdPreAssessmentClinicDental",opdPreAssessmentClinicDental);
						}
					}catch(Exception e){
						e.printStackTrace();
					}
					return map;
				}

				@Override
				public Map<String, Object> showRespiratoryClinicJsp(Box box) {
					Map<String,Object> map=new HashMap<String,Object>();
					Session session=(Session) getSession();
					List<Integer> maxVisitIdList = new ArrayList<Integer>();
					List<Integer> maxVisitIdListAnother = new ArrayList<Integer>();
					List<Object[]> reVisitList = new ArrayList<Object[]>();
					List<OpdRespiratorySpecialityHeader> opdRespiratorySpecialityHeaderList = new ArrayList<OpdRespiratorySpecialityHeader>(); 
					List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailList = new ArrayList<OpdRespiratorySpecialityDetail>();
					
					
					
					
					maxVisitIdListAnother =session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit").createAlias("visit.Hin", "hin")
									.add(Restrictions.eq("hin.Id", box.getInt("hinId")))
					
									.setProjection(Projections.max("visit.Id")).list();
					if(maxVisitIdListAnother.size()>0){
					reVisitList = session.createCriteria(OpdPatientDetails.class).createAlias("Visit", "visit").createAlias("visit.Hin", "hin")
										.add(Restrictions.eq("hin.Id", box.getInt("hinId")))
										.setProjection(Projections.projectionList()
												.add(Projections.property("Height")).add(Projections.property("Weight"))
												.add(Projections.property("RespiratoryRate")).add(Projections.property("Bp"))).list();
					map.put("reVisitList", reVisitList);
					}
				
					if(box.getInt("visitId")!=0){
						maxVisitIdList =session.createCriteria(OpdPatientDetails.class)
								.createAlias("Visit", "visit")
								//.createAlias("visit.Hin", "hin")
								.add(Restrictions.eq("visit.Id", box.getInt("visitId")))
											.setProjection(Projections.max("visit.Id")).list();
							
					}
		
					
									
			
					
					
				if(maxVisitIdList.size()>0){
					if(maxVisitIdList.get(0) != null){
					int maxVisitId = maxVisitIdList.get(0);
		
					
					opdRespiratorySpecialityHeaderList=session.createCriteria(OpdRespiratorySpecialityHeader.class)
							.createAlias("OpdPatientDetails", "opd")
							.createAlias("opd.Visit", "visit")
							.add(Restrictions.eq("visit.Id",maxVisitId)).list();
							
							
					map.put("opdRespiratorySpecialityHeaderList", opdRespiratorySpecialityHeaderList);
					if(opdRespiratorySpecialityHeaderList.size()>0){
						
										
						OpdRespiratorySpecialityHeader respiratorySpecialityHeader = opdRespiratorySpecialityHeaderList.get(0);
						int  respiratorySpecialityHeaderId=respiratorySpecialityHeader.getId();
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListSymptoms = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListSymptoms=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Symptoms"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListSymptoms",opdRespiratorySpecialityDetailListSymptoms);
						
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListTriggers = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListTriggers=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Triggers"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListTriggers",opdRespiratorySpecialityDetailListTriggers);
						
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListPastHistory = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListPastHistory=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Past History"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListPastHistory",opdRespiratorySpecialityDetailListPastHistory);
						
						
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListMedications = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListMedications=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Medications"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListMedications",opdRespiratorySpecialityDetailListMedications);
						
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListCurrentTreatment = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListCurrentTreatment=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Current Treatment"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListCurrentTreatment",opdRespiratorySpecialityDetailListCurrentTreatment);
						
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListRelation = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListRelation=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Relation"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListRelation",opdRespiratorySpecialityDetailListRelation);
							
					
						
						List<OpdRespiratorySpecialityDetail> opdRespiratorySpecialityDetailListReviewControl = new ArrayList<OpdRespiratorySpecialityDetail>();
						opdRespiratorySpecialityDetailListReviewControl=session.createCriteria(OpdRespiratorySpecialityDetail.class)
								.createAlias("RespiratorySpeciality", "opdRs")
								.add(Restrictions.eq("Flag", "Review Control"))
								.add(Restrictions.eq("opdRs.Id",respiratorySpecialityHeaderId)).list();
						
						map.put("opdRespiratorySpecialityDetailListReviewControl",opdRespiratorySpecialityDetailListReviewControl);
						}
					}
					
				 }
			
					return map;
				}
				
				
				//-------------------------------Infertility Clinic-----------------------------------------------//
				@SuppressWarnings("unchecked")
				@Override
				public Map<String, Object> showInfertilityClinic(int visitId,int hinId) {
					Map<String, Object> map = new HashMap<String, Object>();
					Session session = (Session) getSession();
					List<Visit> patientDataList = new ArrayList<Visit>();
					List<Integer> maxVisitIdList = new ArrayList<Integer>();
					List<OpdObg> opdObgList = new ArrayList<OpdObg>();
					List<MasOccupation> masOccupationList = new ArrayList<MasOccupation>();
					List<MasReligion> masReligionList = new ArrayList<MasReligion>();
					try {
						patientDataList = session.createCriteria(Visit.class)
								.add(Restrictions.eq("Id", visitId)).list();
						
						maxVisitIdList =session.createCriteria(OpdObg.class).createAlias("Hin", "hin").createAlias("Visit", "visit")
								.add(Restrictions.eq("hin.Id", hinId))
									.setProjection(Projections.max("visit.Id")).list();
					if(maxVisitIdList.size()>0){
						if(maxVisitIdList.get(0) != null){
						int maxVisitId = maxVisitIdList.get(0);
					
						opdObgList = session.createCriteria(OpdObg.class)
								.createAlias("Visit", "visit")
								.add(Restrictions.eq("visit.Id", maxVisitId)).list();
						if (opdObgList.size() > 0) {
							map.put("opdObgList", opdObgList);
						}
					 }
					}
						masOccupationList = session.createCriteria(MasOccupation.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
						masReligionList = session.createCriteria(MasReligion.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
						/*masOccupationList = getHibernateTemplate()
								.find("from jkt.hms.masters.business.MasOccupation as mm where mm.Status = 'y'");
						masReligionList = getHibernateTemplate()
								.find("from jkt.hms.masters.business.MasReligion as mm where mm.Status = 'y'");*/
						if (masOccupationList.size() > 0) {
							map.put("masOccupationList", masOccupationList);
						}
						if (masReligionList.size() > 0) {
							map.put("masReligionList", masReligionList);
						}
					} catch (HibernateException e) {
						e.printStackTrace();
					}
					map.put("patientDataList", patientDataList);
					return map;
				}
				
				@Override
				public Map<String, Object> submitInfertilityClinic(Map<String, Object> mapForDS, Box box,HttpServletRequest request) {
					Map<String,Object> map=new HashMap<String,Object>();
					List<OpdObg>opdObgList = new ArrayList<OpdObg>();
					boolean saved = false;
					int hinId = 0;
					int visitId = 0;
					int userId = 0;
					int departmentId = 0;
					int hospitalId = 0;
					int obgId = 0;
					int occpationHusband = 0;
					int occpationWife = 0;
					int religionHusband = 0;
					int religionWife = 0;
					String referredDept = (String) box.get("referredDept").toString();
					visitId = box.getInt(VISIT_ID);
					hinId = box.getInt("hinId");
					obgId = box.getInt(OBG_ID);
					userId = box.getInt("userId");
					departmentId = box.getInt("departmentId");
					occpationHusband = box.getInt(OCCUPATION_HUSBAND);
					occpationWife = box.getInt(OCCUPATION_WIFE);
					religionHusband = box.getInt(RELIGION_HUSBAND);
					religionWife = box.getInt(RELIGION_WIFE);
					hospitalId = box.getInt("hospitalId");
					
					Map<String, Object> utilMap = new HashMap<String, Object>();
					utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
					String currentDate = (String) utilMap.get("currentDate");
					String time = (String) utilMap.get("currentTime");
					Date date = HMSUtil.convertStringTypeDateToDateType(currentDate);
					Patient patient = new Patient();
					patient.setId(hinId);

					Visit visit = new Visit();
					visit.setId(visitId);

					MasHospital masHospital = new MasHospital();
					masHospital.setId(hospitalId);

					MasOccupation masOccupationHusband = new MasOccupation();
					masOccupationHusband.setId(occpationHusband);

					MasOccupation masOccupationWife = new MasOccupation();
					masOccupationWife.setId(occpationWife);

					MasReligion masReligionHusband = new MasReligion();
					masReligionHusband.setId(religionHusband);

					MasReligion masReligionWife = new MasReligion();
					masReligionWife.setId(religionWife);
					Session session = (Session)getSession();
					//opdObgList = session.createCriteria(OpdObg.class).add(Restrictions.eq("Visit.Id", visitId)).list();
					/*OpdObg opdObg = null;
					if(opdObgList.size()>0){
						System.out.println("in ifobgId=="+obgId);
						 opdObg = (OpdObg) getHibernateTemplate().get(OpdObg.class, obgId);
					}else{
						 opdObg = new OpdObg();
						 System.out.println("in else==");
					}
					*/
					OpdObg opdObg =new OpdObg();
					if (box.getInt("departmentId") != 0) {
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId(box.getInt("departmentId"));
						opdObg.setDepartment(masDepartment);
					}
					if (box.getInt("hinId") != 0) {
						opdObg.setHin(patient);
					}
					if (box.getInt(VISIT_ID) != 0) {
						opdObg.setVisit(visit);
					}
					if (box.getInt(OCCUPATION_HUSBAND) != 0) {
						opdObg.setOccupationHusband(masOccupationHusband);
					}
					if (box.getInt(OCCUPATION_WIFE) != 0) {
						opdObg.setOccupationWife(masOccupationWife);
					}
					if (box.getInt(RELIGION_HUSBAND) != 0) {
						opdObg.setReligionHusband(masReligionHusband);
					}
					if (box.getInt(RELIGION_WIFE) != 0) {
						opdObg.setReligionWife(masReligionWife);

					}
					if (box.getInt(HOSPITAL_ID) != 0) {
						opdObg.setHospital(masHospital);
					}

					if (!box.getString(EDUCATION_HUSBAND).equals("")) {
						opdObg.setEducationHusband(box.getString(EDUCATION_HUSBAND));
					}
					if (!box.getString(EDUCATION_WIFE).equals("")) {
						opdObg.setEducationWife(box.getString(EDUCATION_WIFE));
					}
					if (!box.getString(ACCOMMODATION_TYPE).equals("")) {
						opdObg.setTypeOfAccommodation(box.getString(ACCOMMODATION_TYPE));
					}
					if (!box.getString(OPERATIVE_SCOPY).equals("")) {
						opdObg.setOperativeScopy(box.getString(OPERATIVE_SCOPY));
					}
					if (!box.getString(EXPLORATORY_LAP).equals("")) {
						opdObg.setExploratoryLaparotomy(box.getString(EXPLORATORY_LAP));
					}
					if (!box.getString(TUBAL_SURFERY).equals("")) {
						opdObg.setTubalSurgery(box.getString(TUBAL_SURFERY));
					}
					if (!box.getString(DIAGNOSTIC_SCOPY).equals("")) {
						opdObg.setDiagnosticScopy(box.getString(DIAGNOSTIC_SCOPY));
					}
					if (!box.getString(PMP_TWO).equals("")) {
						opdObg.setPmpTwo(box.getString(PMP_TWO));
					}
					if (!box.getString(PMP_ONE).equals("")) {
						opdObg.setPmpOne(box.getString(PMP_ONE));
					}
					if (!box.getString(LMP).equals("")) {
						opdObg.setLmp(box.getString(LMP));
					}
					if (!box.getString(PRESENT_MC).equals("")) {
						opdObg.setPresentMc(box.getString(PRESENT_MC));
					}
					if (!box.getString(PAST_MC).equals("")) {
						opdObg.setPastMc(box.getString(PAST_MC));
					}
					if (!box.getString(MENARCHE_YRS).equals("")) {
						opdObg.setMenarcheYrs(box.getString(MENARCHE_YRS));
					}
					if (!box.getString(DYSMENORRHOEA).equals("")) {
						opdObg.setDysmenorrhoea(box.getString(DYSMENORRHOEA));
					}
					if (!box.getString(PRURITIS_VALUE).equals("")) {
						opdObg.setPruritisValue(box.getString(PRURITIS_VALUE));
					}
					if (!box.getString(BACKACHES).equals("")) {
						opdObg.setBackaches(box.getString(BACKACHES));
					}
					if (!box.getString(LEUCORRHOEA).equals("")) {
						opdObg.setLeucorrhoea(box.getString(LEUCORRHOEA));
					}
					if (!box.getString(HIRSUTISM_YRS).equals("")) {
						opdObg.setHirsutismYrs(box.getString(HIRSUTISM_YRS));
					}
					if (!box.getString(GALACTORRHOEA_YRS).equals("")) {
						opdObg.setGalactorrhoeaYrs(box.getString(GALACTORRHOEA_YRS));
					}
					if (!box.getString(GALACTORRHOEA).equals("")) {
						opdObg.setGalactorrhoea(box.getString(GALACTORRHOEA));
					}
					if (!box.getString(PRIVACY).equals("")) {
						opdObg.setPrivacy(box.getString(PRIVACY));
					}
					if (!box.getString(OLIGOMEORRHOEA_YRS).equals("")) {
						opdObg.setOligomenorrhoeaYrs(box.getString(OLIGOMEORRHOEA_YRS));
					}
					if (!box.getString(OLIGOMEORRHOEA).equals("")) {
						opdObg.setOligomenorrhoea(box.getString(OLIGOMEORRHOEA));
					}
					if (!box.getString(HYPOMENRROHEA).equals("")) {
						opdObg.setHypomenorrohea(box.getString(HYPOMENRROHEA));
					}
					if (!box.getString(HYPOMENRROHEA_YRS).equals("")) {
						opdObg.setHypomenorroheaYrs(box.getString(HYPOMENRROHEA_YRS));
					}
					if (!box.getString(INFERTILITY_SECONDARY_YRS).equals("")) {
						opdObg.setInfertilitySecondaryYrs(box
								.getString(INFERTILITY_SECONDARY_YRS));
					}
					if (!box.getString(INFERTILITY_PRIMARY_YRS).equals("")) {
						opdObg.setInfertilityPrimaryYrs(box
								.getString(INFERTILITY_PRIMARY_YRS));
					}

					// part 2
					if (!box.getString(DIABETES_PERSONAL).equals("")) {
						opdObg.setDiabetesPersonal(box.getString(DIABETES_PERSONAL));
					}
					if (!box.getString(DIABETES_FAMILY).equals("")) {
						opdObg.setDiabetesFamily(box.getString(DIABETES_FAMILY));
					}
					if (!box.getString(CNS).equals("")) {
						opdObg.setCns(box.getString(CNS));
					}
					if (!box.getString(RS).equals("")) {
						opdObg.setRs(box.getString(RS));
					}
					
					if (box.getInt(PULSE) != 0) {
						opdObg.setPulse(box.getInt(PULSE));
					}
					if (!box.getString(B_P).equals("")) {
						opdObg.setBP(box.getString(B_P));
					}
					if (!box.getString(CVS).equals("")) {
						opdObg.setCVS(box.getString(CVS));
					}
					if (!box.getString(THYROID).equals("")) {
						opdObg.setThyroid(box.getString(THYROID));
					}
					if (!box.getString(NECK_LYMPH_GLANDS).equals("")) {
						opdObg.setNeckLymphGlands(box.getString(NECK_LYMPH_GLANDS));
					}
					if (!box.getString(SECONDARY_SEXUAL_CHARACTERS).equals("")) {
						opdObg.setSecondarySexualCharacters(box
								.getString(SECONDARY_SEXUAL_CHARACTERS));
					}
					if (box.getInt(GENERNAL_APPERANCE_WIDTH) != 0) {
						opdObg.setGeneralAppearanceWeight(box
								.getInt(GENERNAL_APPERANCE_WIDTH));
					}
					if (box.getInt(GENERNAL_APPERANCE_HEIGHT) != 0) {
						opdObg.setGeneralAppearanceHeight(box
								.getInt(GENERNAL_APPERANCE_HEIGHT));
					}
					if (!box.getString(FREQUENCY_OF_IC).equals("")) {
						opdObg.setFrequencyOfIc(box.getString(FREQUENCY_OF_IC));
					}
					if (!box.getString(TRYING_TO_CONCERIVE_FOR).equals("")) {
						opdObg.setTryingToConceiveFor(box
								.getString(TRYING_TO_CONCERIVE_FOR));
					}
					if (!box.getString(AWARENESS).equals("")) {
						opdObg.setAwarenessOfFertilePeriod(box.getString(AWARENESS));
					}
					if (!box.getString(DYSPAREUNIA).equals("")) {
						opdObg.setDyspareunia(box.getString(DYSPAREUNIA));
					}
					if (box.getInt(ABORTION) != 0) {
						opdObg.setAAbortion(box.getInt(ABORTION));
					}
					if (!box.getString(ECTOPIC).equals("")) {
						opdObg.setEctopic(box.getString(ECTOPIC));
					}
					if (!box.getString(PREMATURE_DELIVERY).equals("")) {
						opdObg.setPrematureDeliveryBabyAliveDead(box
								.getString(PREMATURE_DELIVERY));
					}
					if (!box.getString(NORMAL_DELIVERY).equals("")) {
						opdObg.setNormalDelivery(box.getString(NORMAL_DELIVERY));
					}
					if (!box.getString(OTHERS_PERSONAL).equals("")) {
						opdObg.setOthersPersonal(box.getString(OTHERS_PERSONAL));
					}
					if (!box.getString(OTHERS_FAMILY).equals("")) {
						opdObg.setOthersFamily(box.getString(OTHERS_FAMILY));
					}
					if (!box.getString(THYROID_PERSONAL).equals("")) {
						opdObg.setThyroidPersonal(box.getString(THYROID_PERSONAL));
					}
					if (!box.getString(THYROID_FAMILY).equals("")) {
						opdObg.setThyroidFamily(box.getString(THYROID_FAMILY));
					}
					if (!box.getString(ABDOMINAL_PERSONAL).equals("")) {
						opdObg.setAbdominalPersonal(box.getString(ABDOMINAL_PERSONAL));
					}
					if (!box.getString(ABDOMINAL_FAMILY).equals("")) {
						opdObg.setAbdominalFamily(box.getString(ABDOMINAL_FAMILY));
					}
					if (!box.getString(PULMONARY_PERSONAL).equals("")) {
						opdObg.setPulmonaryPersonal(box.getString(PULMONARY_PERSONAL));
					}
					if (!box.getString(PULMONARY_FAMILY).equals("")) {
						opdObg.setPulmonaryFamily(box.getString(PULMONARY_FAMILY));
					}
					if (!box.getString(TUBERCULOSIS_FAMILY).equals("")) {
						opdObg.setTuberculosisFamily(box.getString(TUBERCULOSIS_FAMILY));
					}
					if (!box.getString(TUBERCULOSIS_PERSONAL).equals("")) {
						opdObg.setTuberculosisPersonal(box.getString(TUBERCULOSIS_PERSONAL));
					}
					if (!box.getString(HYPERTENSION_FAMILY).equals("")) {
						opdObg.setHypertensionFamily(box.getString(HYPERTENSION_FAMILY));
					}
					if (!box.getString(HYPERTENSION_PERSONAL).equals("")) {
						opdObg.setHypertensionPersonal(box.getString(HYPERTENSION_PERSONAL));
					}
					// part 3
					if (!box.getString(HBSAG_WIFE).equals("")) {
						opdObg.setHbsagWife(box.getString(HBSAG_WIFE));
					}
					if (!box.getString(HBSAG_HUSBAND).equals("")) {
						opdObg.setHbsagHusband(box.getString(HBSAG_HUSBAND));
					}
					if (!box.getString(HIV_WIFE).equals("")) {
						opdObg.setHivWife(box.getString(HIV_WIFE));
					}
					if (!box.getString(HIV_HUSBAND).equals("")) {
						opdObg.setHivHusband(box.getString(HIV_HUSBAND));
					}
					if (!box.getString(URINE_ANALYSIS).equals("")) {
						opdObg.setUrineAnalysis(box.getString(URINE_ANALYSIS));
					}
					if (!box.getString(SPECIFICATION).equals("")) {
						opdObg.setSpecification(box.getString(SPECIFICATION));
					}
					if (!box.getString(VDRL_WIFE).equals("")) {
						opdObg.setVdrlWife(box.getString(VDRL_WIFE));
					}
					if (!box.getString(VDRL_HUSBAND).equals("")) {
						opdObg.setVdrlHusband(box.getString(VDRL_HUSBAND));
					}
					if (!box.getString(BLOOD_SUGAR_WIFE).equals("")) {
						opdObg.setBloodSugarWife(box.getString(BLOOD_SUGAR_WIFE));
					}
					if (!box.getString(BLOOD_SUGAR_HUSBAND).equals("")) {
						opdObg.setBloodSugarHusband(box.getString(BLOOD_SUGAR_HUSBAND));
					}
					if (!box.getString(BLOOD_GROUP_WIFE).equals("")) {
						opdObg.setBloodGroupWife(box.getString(BLOOD_GROUP_WIFE));
					}
					if (!box.getString(BLOOD_GROUP_HUSBAND).equals("")) {
						opdObg.setBloodGroupHusband(box.getString(BLOOD_GROUP_HUSBAND));
					}
					if (!box.getString(ESR).equals("")) {
						opdObg.setEsr(box.getString(ESR));
					}
					if (!box.getString(DLC).equals("")) {
						opdObg.setDlc(box.getString(DLC));
					}
					if (!box.getString(TLC).equals("")) {
						opdObg.setTlc(box.getString(TLC));
					}
					if (!box.getString(HEMOGLOBIN).equals("")) {
						opdObg.setHemoglobin(box.getString(HEMOGLOBIN));
					}
					if (!box.getString(P_V_MINORA).equals("")) {
						opdObg.setPVLabiaMinora(box.getString(P_V_MINORA));
					}
					if (!box.getString(P_V_MAJOPRA).equals("")) {
						opdObg.setPVLabiaMajopra(box.getString(P_V_MAJOPRA));
					}
					if (!box.getString(P_V_CLITORIS).equals("")) {
						opdObg.setPVClitoris(box.getString(P_V_CLITORIS));
					}
					if (!box.getString(P_S_MINORA).equals("")) {
						opdObg.setPSLabiaMinora(box.getString(P_S_MINORA));
					}
					if (!box.getString(P_S_MAJOPRA).equals("")) {
						opdObg.setPSLabiaMajopra(box.getString(P_S_MAJOPRA));
					}
					if (!box.getString(P_S_CLITORIS).equals("")) {
						opdObg.setPSClitoris(box.getString(P_S_CLITORIS));
					}
					if (!box.getString(OTHERS_ENDORICE_STATUS).equals("")) {
						opdObg.setOthers(box.getString(OTHERS_ENDORICE_STATUS));
					}
					if (!box.getString(ACNE).equals("")) {
						opdObg.setAcne(box.getString(ACNE));
					}
					if (!box.getString(PIGMENTATION_ABODOMINAL_STRIAE).equals("")) {
						opdObg.setPigmentationAbdominalStriae(box
								.getString(PIGMENTATION_ABODOMINAL_STRIAE));
					}
					if (!box.getString(OBESITY).equals("")) {
						opdObg.setObesity(box.getString(OBESITY));
					}
					if (!box.getString(BREAST_DEDVELOPMENT).equals("")) {
						opdObg.setBreastDevelopment(box.getString(BREAST_DEDVELOPMENT));
					}
					if (!box.getString(HAIR_DISTRIBUTION).equals("")) {
						opdObg.setHairDistribution(box.getString(HAIR_DISTRIBUTION));
					}

					// ---- part four
					if (!box.getString(PROLIFERATIVE).equals("")) {
						opdObg.setProliferative(box.getString(PROLIFERATIVE));
					}
					if (!box.getString(SECRETORY).equals("")) {
						opdObg.setSecretory(box.getString(SECRETORY));
					}
					if (box.getInt(DAYS_OF_CYCLE) != 0) {
						opdObg.setDaysOfCycle(box.getInt(DAYS_OF_CYCLE));
					}

					if (!box.getString(DATING).equals("")) {
						opdObg.setDating(box.getString(DATING));
					}
					if (!box.getString(CORNUAL_OPENING).equals("")) {
						opdObg.setCornualOpenings(box.getString(CORNUAL_OPENING));
					}

					if (!box.getString(ENDOMETRICAL).equals("")) {
						opdObg.setEndometricalCavity(box.getString(ENDOMETRICAL));
					}

					if (!box.getString(UTERUS_HYSTEROSALIAGOGRAPHY).equals("")) {
						opdObg.setUterusHysterosaliagography(box
								.getString(UTERUS_HYSTEROSALIAGOGRAPHY));
					}

					if (!box.getString(UTERUS).equals("")) {
						opdObg.setUterus(box.getString(UTERUS));
					}

					if (!box.getString(OVERIES_RIGHT_ENDOSCOPY).equals("")) {
						opdObg.setOvariesR(box.getString(OVERIES_RIGHT_ENDOSCOPY));
					}

					if (!box.getString(OVERIES_LEFT_ENDOSCOPY).equals("")) {
						opdObg.setOvariesL(box.getString(OVERIES_LEFT_ENDOSCOPY));
					}

					if (!box.getString(TUBES_RIGHT).equals("")) {
						opdObg.setTubesRight(box.getString(TUBES_RIGHT));
					}

					if (!box.getString(TUBES_LEFT).equals("")) {
						opdObg.setTubesLeft(box.getString(TUBES_LEFT));
					}

					if (!box.getString(TUBES_RIGHT_ENDOSCOPY).equals("")) {
						opdObg.setTubesR(box.getString(TUBES_RIGHT_ENDOSCOPY));
					}

					if (!box.getString(TUBES_LEFT_ENDOSCOPY).equals("")) {
						opdObg.setTubesL(box.getString(TUBES_LEFT_ENDOSCOPY));
					}
					if (!box.getString(T_FOUR_HUSBAND).equals("")) {
						opdObg.setTFourHusband(box.getString(T_FOUR_HUSBAND));
					}

					if (!box.getString(T_FOUR_WIFE).equals("")) {
						opdObg.setTFourWife(box.getString(T_FOUR_WIFE));
					}

					if (!box.getString(T_THREE_HUSBAND).equals("")) {
						opdObg.setTThreeHusband(box.getString(T_THREE_HUSBAND));
					}

					if (!box.getString(DHES_WIFE).equals("")) {
						opdObg.setTThreeWife(box.getString(DHES_WIFE));
					}

					if (!box.getString(DHES_WIFE).equals("")) {
						opdObg.setDhesWife(box.getString(DHES_WIFE));
					}

					if (!box.getString(DHES_HUSBAND).equals("")) {
						opdObg.setDhesHusband(box.getString(DHES_HUSBAND));
					}

					if (!box.getString(S_PROLACTIN_WIFE).equals("")) {
						opdObg.setSProlactinWife(box.getString(S_PROLACTIN_WIFE));
					}

					if (!box.getString(S_PROLACTIN_HUSBAND).equals("")) {
						opdObg.setSProlactinHusband(box.getString(S_PROLACTIN_HUSBAND));
					}

					if (!box.getString(TSH_WIFE).equals("")) {
						opdObg.setTshWife(box.getString(TSH_WIFE));
					}

					if (!box.getString(TSH_HUSBAND).equals("")) {
						opdObg.setTshHusband(box.getString(TSH_HUSBAND));
					}

					if (!box.getString(FSH_HUSBAND).equals("")) {
						opdObg.setFshHusband(box.getString(FSH_HUSBAND));
					}

					if (!box.getString(FSH_WIFE).equals("")) {
						opdObg.setFshWife(box.getString(FSH_WIFE));
					}
					if (!box.getString(LH_HUSBAND).equals("")) {
						opdObg.setLhHusband(box.getString(LH_HUSBAND));
					}

					if (!box.getString(LH_WIFE).equals("")) {
						opdObg.setLhWife(box.getString(LH_WIFE));
					}

					if (!box.getString(S_TESTOSTERONE_HUSBAND).equals("")) {
						opdObg.setSTestosteroneHusband(box
								.getString(S_TESTOSTERONE_HUSBAND));
					}

					if (!box.getString(S_TESTOSTERONE_WIFE).equals("")) {
						opdObg.setSTestosteroneWife(box.getString(S_TESTOSTERONE_WIFE));
					}

					if (!box.getString(DATE_OBG).equals("")) {
						opdObg.setObgDate(HMSUtil.convertStringTypeDateToDateType(box
								.getString(DATE_OBG)));
					}

					if (!box.getString(PELVIS_ENDOSCOPY).equals("")) {
						opdObg.setPelvisEndosocopy(box.getString(PELVIS_ENDOSCOPY));
					}
					if (!box.getString(PELVIS_ENDOSCOPY_UTERUS).equals("")) {
						opdObg.setPelvisEndosocopyUterus(box
								.getString(PELVIS_ENDOSCOPY_UTERUS));
					}

					if (!box.getString(GALACTORRHOEA_ENDORICE_STATUS).equals("")) {
						opdObg.setEndocrineStatusGalactorrhoea(box
								.getString(GALACTORRHOEA_ENDORICE_STATUS));
					}
					
					opdObg.setStatus("y");
					opdObg.setLastChgDate(date);
					opdObg.setLastChgTime(time);
					opdObg.setLastChgBy(userId);

					org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					try {
						hbt.save(opdObg);
						saved = true;
					} catch (DataAccessException e) {
						e.printStackTrace();
					}
					/*try {
						Visit visitStatus = (Visit) getHibernateTemplate().load(
								Visit.class, visitId);
						visitStatus.setVisitStatus("C");
						hbt.update(visitStatus);

						OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
						departmentId = box.getInt("departmentId");
						masDepartment.setId(departmentId);
						opdPatientDetails.setReferredDept(masDepartment);

						MasHospital masHospitalob = (MasHospital) hbt.load(
								MasHospital.class, hospitalId);
						opdPatientDetails.setHospital(masHospitalob);

						opdPatientDetails.setVisit(visitStatus);
						hbt.save(opdPatientDetails);
						saved = true;
					} catch (Exception e) {
						e.printStackTrace();
					}*/
					map.put("saved", saved);
					map.put("opdObg", opdObg);
					return map;
				}
				
				public String getMaxNoByDeptCode(Map<String, Object> dataMap) {
					String maxNo = "";
					/*
					 * String y1 = ""; String y2 = ""; String y3 = ""; int tempMonth = 0;
					 */
					String financialYear = "";
					Map<String, Object> utilMap = new HashMap<String, Object>();
					utilMap = (Map) HMSUtil.getCurrentDateAndTime();
					String currentDate = (String) utilMap.get("currentDate");
					financialYear = HMSUtil.getFinancialYearYY_YY(currentDate);
					String no = "";
					if (dataMap.get("no") != null) {
						no = (String) dataMap.get("no");
					}
					String deptType = "";
					String hospitalCode = "";

					if (dataMap.get("deptType") != null) {
						deptType = (String) dataMap.get("deptType");
					}

					try {
						if (!no.equals("") && !no.equals("0")) {
							StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
							String arr[] = no.split("/");
							int seqNo = 0;
							deptType = arr[0];
							seqNo = Integer.parseInt(arr[1]);
							++seqNo;
							maxNo = deptType + "/" + seqNo + "/" + financialYear;
						} else {
							maxNo = deptType + "/" + "01" + "/" + financialYear;
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
					//
					return maxNo;
				}
				

				@Override	
				public Map<String, Object> getClinicalSummaryDetail(Box box) {
					
					Map<String, Object> map = new HashMap<String, Object>();
					Calendar cal = Calendar.getInstance();
					cal.add(Calendar.DATE, -30);
					Date lastVisitDate =cal.getTime();
					List<Integer>preVisitList = new ArrayList<Integer>();
					List<Integer>visitIdList = new ArrayList<Integer>();
					List<Object[]>previousDetailList = new ArrayList<Object[]>();
					List<Object[]>previousPrescriptionList = new ArrayList<Object[]>();
					List<Object[]>previousInvestigationList = new ArrayList<Object[]>();
					List<Object[]>previousDiagnosisList = new ArrayList<Object[]>();
					List<Object[]>previousProcedureList = new ArrayList<Object[]>();
					
					Session session =(Session)getSession();
					Criteria crit = session.createCriteria(Visit.class).createAlias("Hin", "pt").add(Restrictions.eq("pt.Id", box.getInt("hinId")))
							.add(Restrictions.ge("VisitDate", lastVisitDate))
							.setProjection(Projections.projectionList().add(Projections.property("Id")));
					if(!box.get("fromDateId").isEmpty() && !box.get("toDateId").isEmpty()){
						crit.add(Restrictions.between("VisitDate", HMSUtil.convertStringTypeDateToDateType(box.get("fromDateId")), HMSUtil.convertStringTypeDateToDateType(box.get("toDateId"))));
					}
						else
							crit.add(Restrictions.ge("VisitDate", lastVisitDate));

						preVisitList = crit.list();
					if(preVisitList.size()>0){
						for (int i = 0; i < preVisitList.size(); i++) {
						int visitId =(Integer)preVisitList.get(i);
						visitIdList.add(visitId);
						previousDetailList = session.createCriteria(OpdPatientHistory.class).createAlias("OpdPatientDetails", "opd")
												.createAlias("opd.Visit", "visit").createAlias("visit.Department", "dept").add(Restrictions.in("visit.Id", visitIdList))
												.setProjection(Projections.projectionList().add(Projections.property("opd.OpdDate"))
													.add(Projections.property("PresentComplaintHistory")).add(Projections.property("PastHistory"))
													.add(Projections.property("FamilyPastHistory")).add(Projections.property("MadicationHistory"))
													.add(Projections.property("PastIllnessHistory"))
													.add(Projections.property("opd.MenstrualAndObstetricHistory"))
													.add(Projections.property("opd.SystemicExamination"))
													.add(Projections.property("opd.LocalExamination")).add(Projections.property("opd.GeneralExamination"))
													.add(Projections.property("opd.Height")).add(Projections.property("opd.Weight"))
													.add(Projections.property("opd.Pulse")).add(Projections.property("opd.Bp"))
													.add(Projections.property("opd.POrSData")).add(Projections.property("opd.POrVData"))
													.add(Projections.property("opd.POrRData")).add(Projections.property("opd.CervicalSmear"))
													.add(Projections.property("opd.InitialDiagnosis")).add(Projections.property("opd.OpdRemarks"))
													.add(Projections.property("opd.SummaryConsultation")).add(Projections.property("opd.ProcedureDone"))
													.add(Projections.property("opd.TreatmentPlan")).add(Projections.property("opd.DevelopmentHistory"))
													.add(Projections.property("opd.DietHistory")).add(Projections.property("opd.Review"))
													.add(Projections.property("ComorbidityHistory")).add(Projections.property("PersonalPresentHistory"))
													.add(Projections.property("opd.ProvisionalDiagnosis")).add(Projections.property("opd.FinalDiagnosis"))
													.add(Projections.property("dept.DepartmentName")))
													.addOrder(Order.desc("opd.OpdDate"))
												.list();
						map.put("previousDetailList", previousDetailList);
						previousPrescriptionList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "prescription")
													.createAlias("Item", "item").createAlias("Route", "route").createAlias("Frequency", "freq")
													.createAlias("prescription.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
													.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
													.add(Projections.property("item.Nomenclature")).add(Projections.property("route.RouteName"))
													.add(Projections.property("Dosage")).add(Projections.property("freq.FrequencyName"))
													.add(Projections.property("NoOfDays")).add(Projections.property("SplInstruction")))
													.addOrder(Order.desc("visit.VisitDate"))
													.list();
						map.put("previousPrescriptionList", previousPrescriptionList);
						previousInvestigationList = session.createCriteria(DgOrderdt.class).createAlias("Orderhd", "Orderhd")
								.createAlias("ChargeCode", "chargeCode")
								.createAlias("Orderhd.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
								.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
								.add(Projections.property("chargeCode.ChargeCodeName")))
								.addOrder(Order.desc("visit.VisitDate"))
								.list();
					
						map.put("previousInvestigationList", previousInvestigationList);
						if(previousInvestigationList.size()>0){
							Map<Date, String> previousInvestigationHashMap = new TreeMap<Date, String>();
							String investigation=null;
							for(Object[] inves :previousInvestigationList){
								if(previousInvestigationHashMap.get((Date)inves[0])!=null)
									investigation+= ", "+(String)inves[1];
								else
									investigation= (String)inves[1];
								previousInvestigationHashMap.put((Date)inves[0], investigation);
							  }
							map.put("previousInvestigationHashMap", previousInvestigationHashMap);
							}
						
						previousDiagnosisList = session.createCriteria(DischargeIcdCode.class).createAlias("Icd", "icd")
								.createAlias("Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
								.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
								.add(Projections.property("icd.IcdName")))
								.addOrder(Order.desc("visit.VisitDate"))
								.list();
						map.put("previousDiagnosisList", previousDiagnosisList);
						previousProcedureList = session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "procedureHd")
								.createAlias("Procedure", "procedure")
								.createAlias("procedureHd.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
								.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
								.add(Projections.property("procedure.NursingName")))
								.addOrder(Order.desc("visit.VisitDate"))
								.list();
						map.put("previousProcedureList", previousProcedureList);
						}
					}
					return map;
				}

				@Override
				public Map<String, Object> getClinicalSummaryHistoryData(Box box) {
				Map<String, Object> map = new HashMap<String, Object>();
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.DATE, -30);
				Date lastVisitDate =cal.getTime();
				List<Integer>preVisitList = new ArrayList<Integer>();
				List<Integer>visitIdList = new ArrayList<Integer>();
				List<Object[]>previousDetailList = new ArrayList<Object[]>();
				List<Object[]>previousPrescriptionList = new ArrayList<Object[]>();
				List<Object[]>previousInvestigationList = new ArrayList<Object[]>();
				List<Object[]>previousDiagnosisList = new ArrayList<Object[]>();
				List<Object[]>previousProcedureList = new ArrayList<Object[]>();
				
				Session session =(Session)getSession();
				preVisitList = session.createCriteria(Visit.class).createAlias("Hin", "pt").add(Restrictions.eq("pt.Id", box.getInt("hinId")))
						.add(Restrictions.between("VisitDate", HMSUtil.convertStringTypeDateToDateType(box.get("fromDateId")), HMSUtil.convertStringTypeDateToDateType(box.get("toDateId"))))
						.setProjection(Projections.projectionList().add(Projections.property("Id"))).list();
				if(preVisitList.size()>0){
					for (int i = 0; i < preVisitList.size(); i++) {
					int visitId =(Integer)preVisitList.get(i);
					visitIdList.add(visitId);
					previousDetailList = session.createCriteria(OpdPatientHistory.class).createAlias("OpdPatientDetails", "opd")
											.createAlias("opd.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
											.setProjection(Projections.projectionList().add(Projections.property("opd.OpdDate"))
												.add(Projections.property("PresentComplaintHistory")).add(Projections.property("PersonalPresentHistory"))
												.add(Projections.property("FamilyPastHistory")).add(Projections.property("MadicationHistory"))
												.add(Projections.property("PastIllnessHistory")).add(Projections.property("opd.SystemicExamination"))
												.add(Projections.property("opd.LocalExamination")).add(Projections.property("opd.GeneralExamination"))
												.add(Projections.property("opd.Height")).add(Projections.property("opd.Weight"))
												.add(Projections.property("opd.Pulse")).add(Projections.property("opd.Bp"))
												.add(Projections.property("opd.InitialDiagnosis")).add(Projections.property("opd.OpdRemarks"))
												.add(Projections.property("opd.SummaryConsultation")))
												.addOrder(Order.asc("opd.OpdDate"))
											.list();
					map.put("previousDetailList", previousDetailList);
					previousPrescriptionList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "prescription")
												.createAlias("Item", "item").createAlias("Route", "route").createAlias("Frequency", "freq")
												.createAlias("prescription.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
												.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
												.add(Projections.property("item.Nomenclature")).add(Projections.property("route.RouteName"))
												.add(Projections.property("Dosage")).add(Projections.property("freq.FrequencyName"))
												.add(Projections.property("NoOfDays")).add(Projections.property("SplInstruction")))
												.addOrder(Order.asc("visit.VisitDate"))
												.list();
					map.put("previousPrescriptionList", previousPrescriptionList);
					previousInvestigationList = session.createCriteria(DgOrderdt.class).createAlias("Orderhd", "Orderhd")
							.createAlias("ChargeCode", "chargeCode")
							.createAlias("Orderhd.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
							.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
							.add(Projections.property("chargeCode.ChargeCodeName")))
							.addOrder(Order.asc("visit.VisitDate"))
							.list();
					map.put("previousInvestigationList", previousInvestigationList);
					previousDiagnosisList = session.createCriteria(DischargeIcdCode.class).createAlias("Icd", "icd")
							.createAlias("Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
							.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
							.add(Projections.property("icd.IcdName")))
							.addOrder(Order.asc("visit.VisitDate"))
							.list();
					map.put("previousDiagnosisList", previousDiagnosisList);
					previousProcedureList = session.createCriteria(ProcedureDetails.class).createAlias("ProcedureHeader", "procedureHd")
							.createAlias("Procedure", "procedure")
							.createAlias("procedureHd.Visit", "visit").add(Restrictions.in("visit.Id", visitIdList))
							.setProjection(Projections.projectionList().add(Projections.property("visit.VisitDate"))
							.add(Projections.property("procedure.NursingName")))
							.addOrder(Order.asc("visit.VisitDate"))
							.list();
					map.put("previousProcedureList", previousProcedureList);
					}
				}
					return map;
				}
				 @Override
					public Map<String, Object> referBackNursingPatientToOpd(Map<String, Object> mapForDs) {
						Map<String,Object>map = new HashMap<String,Object>();
					      int hinId=0;
					      int visitId=0;
					      int flag=0;
					      Visit visit=null;
					      QueueManagment queue=null;
						try{
							Session session = (Session) getSession();
							Transaction tx=session.beginTransaction();
							HibernateTemplate hbt = getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							if (mapForDs.get("hinId") != null) {
								hinId = (Integer) mapForDs.get("hinId");
							}
							if (mapForDs.get("visitId") != null) {
								visitId = (Integer) mapForDs.get("visitId");
							}
							/**
							 * Putting a patient back in queue after going to a procedure room
							 */
							visit=(Visit)hbt.load(Visit.class,visitId);
							Query query = session.createQuery("select Id from QueueManagment where Visit.Id = :visitId");
							query.setParameter("visitId", visitId);
							int Id = (Integer) query.uniqueResult();
							queue=(QueueManagment)hbt.load(QueueManagment.class,Id);
							
							String[] tokenStatusArray = {"C","c","P","p","A","a"};
							
							List<Integer> maxDisplayAfterNoList	= session.createCriteria(QueueManagment.class).createAlias("Visit", "v")
									.add(Restrictions.eq("LsCngDate", new Date())).add(Restrictions.eq("Department.Id", visit.getDepartment().getId()))
							.add(Restrictions.not(Restrictions.in("TokenStatus", tokenStatusArray)))
							.add(Restrictions.eq("Hospital.Id", visit.getHospital().getId()))
							.add(Restrictions.ne("v.Id", visitId))
							.add(Restrictions.eq("AssignedDoctorId",queue.getAssignedDoctorId()))
							.setProjection(Projections.max("v.DisplayAfterNo")).list();
		
							int maxDisplayAfterNo = 0 ; 
							if(maxDisplayAfterNoList.size() > 0)
								maxDisplayAfterNo = maxDisplayAfterNoList.get(0);
							
							logger.info("maxDisplayAfterNo -- "+maxDisplayAfterNo);
							
							int newDisplayAfterForToken = maxDisplayAfterNo+1;
							logger.info("newDisplayAfterForToken -- "+newDisplayAfterForToken);
							visit.setDisplayAfterNo(newDisplayAfterForToken);
							
							
							visit.setVisitStatus("w");
							queue.setTokenStatus("w");
							queue.setReferBack("y");
							/*Criteria crit=session.createCriteria(InjAppointmentDetails.class).
									createAlias("InjAppointmentHeader","inja")
									.createAlias("inja.Visit","visit" )
									.add(Restrictions.eq("visit.Id", visitId));
							*/
							//crit.list();
							hbt.saveOrUpdate(visit);
							hbt.saveOrUpdate(queue);
							
							
							
							tx.commit();
							flag=1;
							map.put("message", "Patient Refered Successfully...");
							map.put("flag", flag);
						}catch(Exception e){
							e.printStackTrace();
							map.put("message", "Patient Refering Failed..");
							map.put("flag", flag);
						}
						
						return map;
		          }
				 @Override
					public Map<String, Object> referObservationToOpd(Map<String, Object> mapForDs) {
						Map<String,Object>map = new HashMap<String,Object>();
					      int opdId=0;
					      int visitId=0;
					      int flag=0;
					      Visit visit=null;
					      QueueManagment queue=null;
					      OpdPatientDetails patientDetail=null;
						try{
							Session session = (Session) getSession();
							Transaction tx=session.beginTransaction();
							HibernateTemplate hbt = getHibernateTemplate();
							hbt.setFlushModeName("FLUSH_EAGER");
							hbt.setCheckWriteOperations(false);
							if (mapForDs.get("opdId") != null) {
								opdId = (Integer) mapForDs.get("opdId");
							}
							patientDetail=(OpdPatientDetails)hbt.load(OpdPatientDetails.class,opdId);
							visitId=patientDetail.getVisit().getId();
							visit=(Visit)hbt.load(Visit.class,visitId);
							Query query = session.createQuery("select Id from QueueManagment where Visit.Id = :visitId");
							query.setParameter("visitId", visitId);
							int Id = (Integer) query.uniqueResult();
							queue=(QueueManagment)hbt.load(QueueManagment.class,Id);
							visit.setVisitStatus("w");
							queue.setTokenStatus("w");
							patientDetail.setObservationStatus("R");
							hbt.saveOrUpdate(patientDetail);
							hbt.saveOrUpdate(visit);
							hbt.saveOrUpdate(queue);
							
							
							
							tx.commit();
							flag=4;
							map.put("message", "Patient Refered Successfully...");
							map.put("flag", flag);
						}catch(Exception e){
							e.printStackTrace();
							map.put("message", "Patient Refering Failed..");
							map.put("flag", flag);
						}
						
						return map;
		          }
					@Override
					public Map<String, Object> showTaperdMedicine(Box box) {
						Map<String,Object>map = new HashMap<String,Object>();
						Integer nomenclature=0;
						Session session =(Session)getSession();
						if(box.get("nomenclature")!=null){
							nomenclature=box.getInt("nomenclature");
						}
						List<MasFrequency> frequeList=new ArrayList<MasFrequency>();
						List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
						itemList=session.createCriteria(MasStoreItem.class)
								 .add(Restrictions.eq("Id", nomenclature))
								.list();
						frequeList=session.createCriteria(MasFrequency.class)
								 .add(Restrictions.eq("Status", "y").ignoreCase())
								.list();
						map.put("frequeList", frequeList);
						map.put("itemList", itemList);
						return map;
					}

					@Override
					public Map<String, Object> getAllValidatedTestForLabOrderNoWise(
							Map<String, Object> requestMap) {
						Map<String, Object> detailsMap = new HashMap<String, Object>();
						Integer orderNo = 0;
						int investigationId =0;
						int hospitalId = 0;
						List objectList = new ArrayList();
						List<DgOrgDtl> dgOrgDtlList = new ArrayList<DgOrgDtl>();
						List<String[]> subChargeCodeGroup = new ArrayList<String[]>();

						String dFirst = "";
						String dMiddleName = "";
						String dLastName = "";
						String eFirst = "";
						String eMiddleName = "";
						String eLastName = "";
						String vFirst = "";
						String vMiddleName = "";
						String vLastName = "";
						Criteria crit = null;
						try {
							if (requestMap.get("orderNo") != null) {
								orderNo = Integer.parseInt((String) requestMap.get("orderNo"));
							}
							if (requestMap.get("investigationId") != null) {
								investigationId =(Integer)requestMap.get("investigationId");
							}
							if (requestMap.get(HOSPITAL_ID) != null) {
								hospitalId = Integer.parseInt(requestMap.get(HOSPITAL_ID).toString());
							}
							Session session = (Session) getSession();

							List<DgOrderhd> hdList = new ArrayList<DgOrderhd>();
							hdList = session.createCriteria(DgOrderhd.class)
									.add(Restrictions.eq("Id", orderNo)).list();
							List<DgOrderhd> dtList = new ArrayList<DgOrderhd>();
							Object[] selectedStatus = {"V","Y"};
							List<DgResultEntryHeader> dgResultEntryHeaderByOrderNo = new ArrayList<DgResultEntryHeader>();
							if (!orderNo.equals("")) {
								dgResultEntryHeaderByOrderNo = session
										.createCriteria(DgResultEntryHeader.class)
										.createAlias("SampleCollectionHeader", "sch").createAlias("Investigation", "inv")
										.createAlias("sch.Order", "orderN")
										.add(Restrictions.eq("orderN.Id", orderNo))
										.add(Restrictions.eq("inv.Id", investigationId))
										.add(Restrictions.in("Verified", selectedStatus))
										/*
										 * .add(Restrictions.or( Restrictions.eq(
										 * "ResultStatus", "R"), Restrictions.eq(
										 * "ResultStatus", "R") )
										 */
										// .add(Restrictions.eq("ResultStatus", "R"))
										.createAlias("MainChargecode", "mcc")
										.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB"))
										// .createAlias("DgMasInvestigation", "inv")
										// .addOrder(Order.asc("inv.TestOrderNo"))
										// .createAlias("DgResultEntryDetails", "reDtl")
										// .createAlias("reDtl.Investigation", "invest")
										// .add(Restrictions.eq("invest.InvestigationType",
										// "m"))
										.addOrder(Order.asc("Id")).list();
							}
							if (!orderNo.equals("")) {
								crit = session
										.createCriteria(DgResultEntryHeader.class)
										.createAlias("SampleCollectionHeader", "sch").createAlias("Investigation", "inv")
										.createAlias("sch.Order", "orderN")
										.add(Restrictions.eq("orderN.Id", orderNo))
										.add(Restrictions.eq("inv.Id", investigationId))
										.add(Restrictions.in("Verified", selectedStatus))
										/*
										 * .add(Restrictions.or( Restrictions.eq(
										 * "ResultStatus", "A"), Restrictions.eq(
										 * "ResultStatus", "R") ))
										 */
										// .add(Restrictions.eq("ResultStatus", "R"))
										.createAlias("MainChargecode", "mcc")
										.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB"))
										.createAlias("SubChargecode", "subCharg")
										//.createAlias("Investigation", "inv")
										.createAlias("inv.Sample", "sample")
										
										.setProjection(
												Projections.distinct(Projections
														.projectionList()
														.add(Projections
																.property("subCharg.SubChargecodeName"))
																.add(Projections.property("sample.SampleDescription"))));

								subChargeCodeGroup = crit.list();
							}

							detailsMap.put("subChargeCodeGroup", subChargeCodeGroup);

							DgResultEntryDetail dgResultEntryDetailForData = new DgResultEntryDetail();
							DgResultEntryDetailSen dgResultEntryDetailSenForData = new DgResultEntryDetailSen();

							if (dgResultEntryHeaderByOrderNo.size() > 0) {
								detailsMap.put("dgResultEntryHeaderByOrderNo",
										dgResultEntryHeaderByOrderNo);

							}

							boolean flag = false;
							if (dgResultEntryHeaderByOrderNo.size() > 0) {
								DgResultEntryHeader header = dgResultEntryHeaderByOrderNo
										.get(0);
								if (header.getDgResultEntryDetails().size() > 0) {
									flag = true;
									dgResultEntryDetailForData = header
											.getDgResultEntryDetails().iterator().next();
								} else if (header.getDgResultEntryDetailSens().size() > 0) {
									dgResultEntryDetailSenForData = header
											.getDgResultEntryDetailSens().iterator().next();
								}
							}
							if (flag) {
								if (dgResultEntryDetailForData.getResultEntry().getHin() != null) {
									detailsMap.put("hinNo", dgResultEntryDetailForData
											.getResultEntry().getHin().getHinNo());
								}

								detailsMap.put("orderByDepartment", dgResultEntryDetailForData
										.getResultEntry().getSampleCollectionHeader()
										.getOrder().getDepartment().getDepartmentName());
								/*
								 * detailsMap.put("departmentType",session.getAttribute("deptId")
								 * );
								 */

								Patient p = dgResultEntryDetailForData.getResultEntry()
										.getHin();
								String pFullName = "";
								pFullName = p.getPFirstName();

								if (p.getPMiddleName() != null) {
									pFullName = pFullName + " " + p.getPMiddleName();
								}
								if (p.getPLastName() != null) {
									pFullName = pFullName + " " + p.getPLastName();
								}

								detailsMap.put("patientName", pFullName);

								detailsMap.put("orderNo", dgResultEntryDetailForData
										.getSampleCollectionDetails()
										.getSampleCollectionHeader().getOrder().getOrderNo());
								detailsMap.put("orderDate", dgResultEntryDetailForData
										.getSampleCollectionDetails()
										.getSampleCollectionHeader().getOrder().getOrderDate());

								detailsMap.put("patientStatus", p.getPatientStatus());
								detailsMap.put("patientAge", p.getAge());
								detailsMap.put("sex", p.getSex().getAdministrativeSexName());
								detailsMap.put("resultDate", dgResultEntryDetailForData
										.getResultEntry().getResultDate());
								detailsMap.put("subChargeCodeName", dgResultEntryDetailForData
										.getResultEntry().getSubChargecode()
										.getSubChargecodeName());
								detailsMap.put("mainChargeCodeName", dgResultEntryDetailForData
										.getResultEntry().getMainChargecode()
										.getMainChargecodeName());
								detailsMap.put("charge", dgResultEntryDetailForData
										.getInvestigation().getInvestigationName());
								String clinicalNote = dgResultEntryDetailForData
										.getSampleCollectionDetails()
										.getSampleCollectionHeader().getOrder()
										.getClinicalNote();
								detailsMap.put("clinicalNote", clinicalNote);
								String confidential = dgResultEntryDetailForData
										.getInvestigation().getConfidential();
								if (confidential != null && !confidential.equals("")
										&& !confidential.equalsIgnoreCase("n")) {
									detailsMap.put("confidential", "y");
								} else {
									detailsMap.put("confidential", "n");
								}

								MasEmployee e = dgResultEntryDetailForData.getResultEntry()
										.getSampleCollectionHeader().getOrder()
										.getPrescribedBy();
								if (e != null) {

									if (e.getFirstName() != null) {
										dFirst = e.getFirstName();
									}
									if (e.getMiddleName() != null) {
										dMiddleName = e.getMiddleName();
									}
									if (e.getLastName() != null) {
										dLastName = e.getLastName();
									}
									detailsMap.put("doctorName", dFirst + " " + dMiddleName
											+ " " + dLastName);
								}

								MasEmployee e1 = dgResultEntryDetailForData.getResultEntry()
										.getEmployee();
								if (e1 != null) {

									if (e1.getFirstName() != null) {
										eFirst = e1.getFirstName();
									}
									if (e1.getMiddleName() != null) {
										eMiddleName = e1.getMiddleName();
									}
									if (e1.getLastName() != null) {
										eLastName = e1.getLastName();
									}
									detailsMap.put("entryPersonName", eFirst + " "
											+ eMiddleName + " " + eLastName);
									if (e1.getRank() != null) {
										String entryPersonNameDesignation = e1.getRank()
												.getRankName();
										detailsMap.put("entryPersonNameDesignation",
												entryPersonNameDesignation);
									}
									if (e1.getRank() != null) {
										String entryPersonNameRank = e1.getRank().getRankName();
										detailsMap.put("entryPersonNameRank",
												entryPersonNameRank);

									}

								}
								MasEmployee e2 = dgResultEntryDetailForData.getResultEntry()
										.getResultVerifiedBy();
								if (e2 != null) {

									if (e2.getFirstName() != null) {
										vFirst = e2.getFirstName();
									}
									if (e2.getMiddleName() != null) {
										vMiddleName = e2.getMiddleName();
									}
									if (e2.getLastName() != null) {
										vLastName = e2.getLastName();
									}
									detailsMap.put("verifiedPersonName", vFirst + " "
											+ vMiddleName + " " + vLastName);
									if (e2.getRank() != null) {
										String verifiedPersonNameDesignation = e2.getRank()
												.getRankName();
										detailsMap.put("verifiedPersonNameDesignation",
												verifiedPersonNameDesignation);
									}
									if (e2.getRank() != null) {
										String verifiedPersonNameRank = e2.getRank()
												.getRankName();
										detailsMap.put("verifiedPersonNameRank",
												verifiedPersonNameRank);
									}

								}
							} else {
								if (dgResultEntryDetailSenForData.getResultEntry() != null) {
									if (dgResultEntryDetailSenForData.getResultEntry().getHin() != null) {
										detailsMap.put("hinNo", dgResultEntryDetailSenForData
												.getResultEntry().getHin().getHinNo());
									}

									detailsMap.put("orderByDepartment",
											dgResultEntryDetailSenForData.getResultEntry()
													.getSampleCollectionHeader().getOrder()
													.getDepartment().getDepartmentName());

									Patient p = dgResultEntryDetailSenForData.getResultEntry()
											.getHin();
									String pFullName = "";
									pFullName = p.getPFirstName();

									if (p.getPMiddleName() != null) {
										pFullName = pFullName + " " + p.getPMiddleName();
									}
									if (p.getPLastName() != null) {
										pFullName = pFullName + " " + p.getPLastName();
									}

									detailsMap.put("patientName", pFullName);
									detailsMap.put("orderNo", dgResultEntryDetailSenForData
											.getSampleCollection().getSampleCollectionHeader()
											.getOrder().getOrderNo());
									detailsMap.put("orderDate", dgResultEntryDetailSenForData
											.getSampleCollection().getSampleCollectionHeader()
											.getOrder().getOrderDate());

									detailsMap.put("patientAge", p.getAge());
									detailsMap
											.put("sex", p.getSex().getAdministrativeSexName());
									detailsMap.put("resultDate", dgResultEntryDetailSenForData
											.getResultEntry().getResultDate());
									detailsMap.put("subChargeCodeName",
											dgResultEntryDetailSenForData.getResultEntry()
													.getSubChargecode().getSubChargecodeName());
									detailsMap.put("mainChargeCodeName",
											dgResultEntryDetailSenForData.getResultEntry()
													.getMainChargecode()
													.getMainChargecodeName());
									detailsMap.put("charge", dgResultEntryDetailSenForData
											.getInvestigation().getInvestigationName());
									String clinicalNote = dgResultEntryDetailSenForData
											.getSampleCollection().getSampleCollectionHeader()
											.getOrder().getClinicalNote();
									detailsMap.put("clinicalNote", clinicalNote);
									String confidential = dgResultEntryDetailSenForData
											.getInvestigation().getConfidential();
									if (confidential != null && !confidential.equals("")
											&& !confidential.equalsIgnoreCase("n")) {
										detailsMap.put("confidential", "y");
									} else {
										detailsMap.put("confidential", "n");
									}

									MasEmployee e = dgResultEntryDetailSenForData
											.getResultEntry().getSampleCollectionHeader()
											.getOrder().getPrescribedBy();
									if (e != null) {

										if (e.getFirstName() != null) {
											dFirst = e.getFirstName();
										}
										if (e.getMiddleName() != null) {
											dMiddleName = e.getMiddleName();
										}
										if (e.getLastName() != null) {
											dLastName = e.getLastName();
										}
										detailsMap.put("doctorName", dFirst + " " + dMiddleName
												+ " " + dLastName);
									}

									MasEmployee e1 = dgResultEntryDetailSenForData
											.getResultEntry().getEmployee();
									if (e1 != null) {

										if (e1.getFirstName() != null) {
											eFirst = e1.getFirstName();
										}
										if (e1.getMiddleName() != null) {
											eMiddleName = e1.getMiddleName();
										}
										if (e1.getLastName() != null) {
											eLastName = e1.getLastName();
										}
										detailsMap.put("entryPersonName", eFirst + " "
												+ eMiddleName + " " + eLastName);
										if (e1.getRank() != null) {
											String entryPersonNameDesignation = e1.getRank()
													.getRankName();
											detailsMap.put("entryPersonNameDesignation",
													entryPersonNameDesignation);
										}
										if (e1.getRank() != null) {
											String entryPersonNameRank = e1.getRank()
													.getRankName();
											detailsMap.put("entryPersonNameRank",
													entryPersonNameRank);

										}

									}
									MasEmployee e2 = dgResultEntryDetailSenForData
											.getResultEntry().getResultVerifiedBy();
									if (e2 != null) {

										if (e2.getFirstName() != null) {
											vFirst = e2.getFirstName();
										}
										if (e2.getMiddleName() != null) {
											vMiddleName = e2.getMiddleName();
										}
										if (e2.getLastName() != null) {
											vLastName = e2.getLastName();
										}
										detailsMap.put("verifiedPersonName", vFirst + " "
												+ vMiddleName + " " + vLastName);
										if (e2.getRank() != null) {
											String verifiedPersonNameDesignation = e2.getRank()
													.getRankName();
											detailsMap.put("verifiedPersonNameDesignation",
													verifiedPersonNameDesignation);
										}
										if (e2.getRank() != null) {
											String verifiedPersonNameRank = e2.getRank()
													.getRankName();
											detailsMap.put("verifiedPersonNameRank",
													verifiedPersonNameRank);
										}
									}
								}
							}
							
							String query = "select sub_investigation_code,p.age,p.hin_no,(coalesce(p.p_first_name,' ')||'  '||coalesce(p.p_middle_name,' ')||'  '||coalesce(p.p_last_name,' ')) as "
									+ "patient_name,dgo.hin_id,dgo.order_no,dgo.order_date,case When dgo.patient_type='OP'Then'Out Patient' Else 'In Patient' end patient_type,mmcc.main_chargecode_name,mscc.sub_chargecode_name,mscc.sub_chargecode_code, "
									+ "dreh.remarks as header_remarks,dred.remarks as details_remarks, "
									+ "case when dmi.investigation_type='m' then dmi.investigation_name else '' end investigation_name, "
									+ "coalesce(dmi.min_normal_value||'-'||dmi.max_normal_value,dmi.normal_value) as normal_range, "

									+ "coalesce(dsmi.sub_investigation_name,dmi.investigation_name) as "
									+ "sub_investigation_name,dreh.result_date,dreh.result_time,dred.result,(me.first_name||'  '||coalesce(me.middle_name,'')||'  '||coalesce(me.last_name,'')) as emp_name, "
									+ "(me1.first_name||'  '||coalesce(me1.middle_name,' ')||'  '||coalesce(me1.last_name,' ')) as pre_emp_name, "
									+ "mh.address as address,s.administrative_sex_name,d.department_name,"
									+ "mh.hospital_name,dmi.min_normal_value , dmi.max_normal_value,uom.uom_name,"
									+ "sample.sample_description,ssch.diag_no,ssch.sample_coll_datetime,dsch.diagnosis_date, "
									+ " pr.rank_name as pr,vr.rank_name as vr, "
									+ "case when p.patient_status='Out Patient' then 'OP' "
									+ "when p.patient_status='In Patient' then 'IP' else '-' end as patient_status,"
									+" case when dmi.investigation_type = 'm' then (select coalesce(dnv.min_normal_value,' ')||'-'||coalesce(dnv.max_normal_value,' ')) "
									 
									+ " else coalesce(dmi.min_normal_value||'-'||dmi.max_normal_value,dmi.normal_value)  end as normal_range123, "
									+ "(me1.first_name||'  '||coalesce(me1.middle_name,' ')||'  '||coalesce(me1.last_name,' ')) as validate_by ,vr.rank_name as vb,dsmi.result_type,dmi.investigation_id "
									+ " from dg_result_entry_header dreh "
									+ "left outer join dg_result_entry_detail dred on dreh.result_entry_id=dred.result_entry_id "
									+" left outer join dg_sample_collection_details ssch on dred.sample_collection_details_id=ssch.sample_collection_details_id "
									+ " left outer join dg_sample_collection_header dsch on ssch.sample_collection_header_id=dsch.sample_collection_header_id "
									//+ "left outer join dg_sample_collection_header dsch on dreh.sample_collection_header_id=dsch.sample_collection_header_id "
									//+" left outer join dg_sample_collection_details ssch on dsch.sample_collection_header_id=ssch.sample_collection_header_id "
									+ "left outer join dg_orderhd dgo on dsch.order_id=dgo.orderhd_id "
									+ "left outer join mas_main_chargecode mmcc on mmcc.main_chargecode_id=dreh.main_chargecode_id "
									+ "left outer join mas_sub_chargecode mscc on mscc.sub_chargecode_id=dreh.sub_chargecode_id "
									+ "left outer join dg_mas_investigation dmi on dred.investigation_id=dmi.investigation_id "
									+ "left outer join dg_sub_mas_investigation dsmi on dred.sub_investigation_id=dsmi.sub_investigation_id "
									+ "left outer join patient p on p.hin_id=dgo.hin_id "
									+ "left outer join dg_uom uom on uom.uom_id= (case when dmi.investigation_type = 's' then dmi.uom_id else dsmi.uom_id end) "
									+ "left outer join mas_administrative_sex s on s.administrative_sex_id=p.sex_id "
									+ "left outer join mas_department d on d.department_id=dgo.department_id "
									+ "left outer join mas_employee me on dsch.validated_by=me.employee_id "
									+ "left outer join mas_hospital mh on dreh.hospital_id=mh.hospital_id "
									+ "left outer join mas_sample sample on dmi.sample_id=sample.sample_id "
									+ "left outer join mas_employee me1 on dreh.result_verified_by=me1.employee_id "
									+ "left outer join mas_rank pr on pr.rank_id=me1.rank_id "
									+ "left outer join mas_rank vr on vr.rank_id=me.rank_id "
									+ "left outer join dg_normal_value dnv on dsmi.sub_investigation_id =dnv.sub_investigation_id"
									+" and  dnv.sex<>'c' and (case when dnv.sex='m' or dnv.sex='f' then s.administrative_sex_code =upper(dnv.sex) else 1=1 end )"//added by govind 24-12-2016
									
									+ "where dgo.orderhd_id="+orderNo+"  and dmi.investigation_id='"+investigationId+"' and dred.validated in('V','Y') and  dreh.verified in('V','Y')  and (dred.result is not null and dred.result<>'' and (case when dred.result='0' then (cast(dred.result as integer))>0 else 1=1 end))"
									+ "group by sub_investigation_name,sub_investigation_code,p.age,p.hin_no,p.patient_status,dsmi.sub_investigation_id,"
									+" sub_investigation_code,p.age,p.hin_no,p.p_first_name,p.p_middle_name,p.p_last_name,dmi.investigation_id,"
									+" patient_name,dgo.hin_id,dgo.order_no,dgo.order_date,dgo.patient_type,"
									+" mmcc.main_chargecode_name,mscc.sub_chargecode_name,"
									+" dreh.remarks,dred.remarks,"
									+" dmi.investigation_name,me.emp_name,me1.emp_name,"
									+" dmi.min_normal_value,dmi.max_normal_value,dmi.normal_value,"
									+" dsmi.sub_investigation_name,dmi.investigation_name,"
									+" sub_investigation_name,dreh.result_date,dreh.result_time,dred.result,"
									+" me.first_name,me.middle_name,me.last_name,"
									+" me1.first_name,me1.middle_name,me1.last_name,pre_emp_name,"
									+" mh.address,s.administrative_sex_name,d.department_name,"
									+" mh.hospital_name,dmi.min_normal_value , dmi.max_normal_value,uom.uom_name,"
									+" sample.sample_description,ssch.diag_no,mscc.sub_chargecode_code,"
									+" dsch.diagnosis_date,pr.rank_name,vr.rank_name,ssch.sample_coll_datetime,dmi.investigation_type,dnv.min_normal_value,dnv.max_normal_value,"
									//+" me1.first_name,me1.middle_name,me1.last_name,vr.rank_name,dsmi.result_type,dsmi.order_no,dmi.investigation_type ORDER BY MAX(mscc.sub_chargecode_name)";//added by govind 24-12-2016
							+" me1.first_name,me1.middle_name,me1.last_name,vr.rank_name,dsmi.result_type,dsmi.order_no,dmi.investigation_type ORDER BY MAX(mscc.sub_chargecode_name),investigation_name,dsmi.order_no";
						/*String query1="select sub_investigation_code,p.age,p.hin_no,(coalesce(p.p_first_name,' ')||'  '||coalesce(p.p_middle_name,' ')||'  '||coalesce(p.p_last_name,' ')) as patient_name,dgo.hin_id,dgo.order_no,dgo.order_date,case When dgo.patient_type='OP'Then'Out Patient' Else 'In Patient' end patient_type,mmcc.main_chargecode_name,mscc.sub_chargecode_name,mscc.sub_chargecode_code,"
								+ "dreh.remarks as header_remarks,dred.remarks as details_remarks,"
								+ "case when dmi.investigation_type='m' then dmi.investigation_name else '' end investigation_name,coalesce(dsmi.sub_investigation_name,dmi.investigation_name) as "
								+ "sub_investigation_name,dreh.result_date,dreh.result_time,dred.result,(me.first_name||'  '||coalesce(me.middle_name,'')||'  '||coalesce(me.last_name,'')) as emp_name,"
								+ "(me1.first_name||'  '||coalesce(me1.middle_name,' ')||'  '||coalesce(me1.last_name,' ')) as pre_emp_name,"
								+ "mh.address as address,s.administrative_sex_name,d.department_name,"
								+ "mh.hospital_name,dmi.min_normal_value , dmi.max_normal_value,uom.uom_name,"
								+ "coalesce(sample.sample_description,'-') as sample_description,ssch.diag_no,ssch.sample_coll_datetime,"
								+ "dsch.diagnosis_date,pr.rank_name as pr,vr.rank_name as vr,"
								+ "case when p.patient_status='Out Patient' then 'OP' "
								+ "when p.patient_status='In Patient' then 'IP' else '-' end as patient_status,case when dmi.investigation_type = 'm' then ( (select coalesce(min_normal_value,' ')||'-'||coalesce(max_normal_value,' ') from dg_normal_value "
								+ "where sub_investigation_id=dsmi.sub_investigation_id) ) else coalesce(dmi.min_normal_value||'-'||dmi.max_normal_value,dmi.normal_value)  end as normal_range"
								+ "from dg_result_entry_header dreh"
								+ "left outer join dg_result_entry_detail dred on dreh.result_entry_id=dred.result_entry_id"
								+ "left outer join dg_sample_collection_details ssch on dred.sample_collection_details_id=ssch.sample_collection_details_id "
								+ "left outer join dg_sample_collection_header dsch on ssch.sample_collection_header_id=dsch.sample_collection_header_id"
								+ "left outer join dg_orderhd dgo on dsch.order_id=dgo.orderhd_id"
								+ "left outer join mas_main_chargecode mmcc on mmcc.main_chargecode_id=dreh.main_chargecode_id"
								+ "left outer join mas_sub_chargecode mscc on mscc.sub_chargecode_id=dreh.sub_chargecode_id"
								+ "left outer join dg_mas_investigation dmi on dred.investigation_id=dmi.investigation_id"
								+ "left outer join dg_sub_mas_investigation dsmi on dred.sub_investigation_id=dsmi.sub_investigation_id"
								+ "left outer join patient p on p.hin_id=dgo.hin_id "
								+ "left outer join dg_uom uom on uom.uom_id= (case when dmi.investigation_type = 's' then ( dmi.uom_id) else dsmi.uom_id end)"
								+ "left outer join mas_administrative_sex s on s.administrative_sex_id=p.sex_id"
								+ "left outer join mas_department d on d.department_id=dgo.department_id"
								+ "left outer join mas_employee me on dreh.result_verified_by=me.employee_id"
								+ "left outer join mas_hospital mh on dreh.hospital_id=mh.hospital_id"
								+ "left outer join mas_sample sample on dmi.sample_id=sample.sample_id"
								+ "left outer join mas_employee me1 on dgo.prescribed_by=me1.employee_id"
								+ "left outer join mas_rank pr on pr.rank_id=me1.rank_id"
								+ "left outer join mas_rank vr on vr.rank_id=me.rank_id"
								+ "where dgo.order_no='"+orderNo+"' and dgo.hospital_id='"+hospitalId+"' and dred.validated='V' "
								+ "and dreh.verified='V' "
								+ "group by sub_investigation_name,sub_investigation_code,p.age,p.hin_no,p.patient_status,dsmi.sub_investigation_id,"
								+ "sub_investigation_code,p.age,p.hin_no,p.p_first_name,p.p_middle_name,p.p_last_name,"
								+ "patient_name,dgo.hin_id,dgo.order_no,dgo.order_date,dgo.patient_type,"
								+ "mmcc.main_chargecode_name,mscc.sub_chargecode_name,dreh.remarks,dred.remarks,dmi.investigation_name,me.emp_name,me1.emp_name,dmi.min_normal_value,dmi.max_normal_value,dmi.normal_value,"
								+ "dsmi.sub_investigation_name,dmi.investigation_name,sub_investigation_name,dreh.result_date,dreh.result_time,dred.result,me.first_name,me.middle_name,me.last_name,"
								+ "me1.first_name,me1.middle_name,me1.last_name,pre_emp_name,mh.address,s.administrative_sex_name,d.department_name,"
								+ "mh.hospital_name,dmi.min_normal_value , dmi.max_normal_value,uom.uom_name,sample.sample_description,ssch.diag_no,mscc.sub_chargecode_code,"
								+ "dsch.diagnosis_date,pr.rank_name,vr.rank_name,ssch.sample_coll_datetime,dmi.investigation_type ORDER BY MAX(mscc.sub_chargecode_name)";*/
							
						List<Object[]> invReportdata=session.createSQLQuery(query).list();
						
							
							Map<String,List<Object[]>> reportDataMap=new HashMap<String,List<Object[]>>();
							for(Object[] obj:subChargeCodeGroup){
								List<Object[]> mainList=new ArrayList<Object[]>();
								
								for(Object[] invData:invReportdata){
									
									if((obj[0]+"").equalsIgnoreCase(invData[9]+"") 
											&& (obj[1]+"").equalsIgnoreCase(invData[28]+"") ){
										mainList.add(invData);
									}
									
								}
								if(mainList.size()>0){
									reportDataMap.put(obj[0]+""+obj[1], mainList);
								}
							}
							
							/*for(Object[] obj:subChargeCodeGroup){
								List<Object[]> abc=new ArrayList<Object[]>();
								abc=reportDataMap.get(obj[0]+""+obj[1]);
								for(Object[] o:abc){
									System.out.println("Test Name "+o[14]);
								}
							}*/
							
							detailsMap.put("reportDataMap", reportDataMap);
						} catch (Exception e) {
							e.printStackTrace();
						}

						return detailsMap;
					}

					@Override
					public Map<String, Object> printNicuCaseRecord(
							Map<String, Object> mapForDS) {

						Session session = (Session) getSession();
						List<OpdNicuCaseRecord> opdNicuCaseRecordList = new ArrayList<OpdNicuCaseRecord>();
						Map<String, Object> map = new HashMap<String, Object>();
						int opdPatientDetailId=0;
						int visitId=0;
						if (mapForDS.get("opdPatientDetailId") != null) {
							opdPatientDetailId = (Integer) mapForDS.get("opdPatientDetailId");
						}
						if (mapForDS.get("visitId") != null) {
							visitId = (Integer) mapForDS.get("visitId");
						}
						
						
						try {
							opdNicuCaseRecordList = session.createCriteria(OpdNicuCaseRecord.class)
									.createAlias("OpdPatientDetails", "opd")
									.add(Restrictions.eq("opd.Id", opdPatientDetailId))
									.createAlias("opd.Visit", "v").add(Restrictions.eq("v.Id", visitId)).
									list();
							

						} catch (HibernateException e) {
							e.printStackTrace();
						}
						
						map.put("opdNicuCaseRecordList", opdNicuCaseRecordList);

						return map;
					}

					@Override
					public Map<String, Object> printHeightWeightGraph(Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdPatientDetails> pediatricsChartList = new ArrayList<OpdPatientDetails>();
						Session session = (Session)getSession();
						
						int hinId =0;
						if(requestParametersMap.get("hinId") != null){
							hinId = (Integer)requestParametersMap.get("hinId");
						}
				
						pediatricsChartList =session.createCriteria(OpdPatientDetails.class)
								.createAlias("Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
						.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
						
						
						XYSeriesCollection dataset = new XYSeriesCollection();
						XYSeries series1 = new XYSeries("Average Weight");
						XYSeries series2 = new XYSeries("Average Height");
						String gender = "";
				      	if (pediatricsChartList.size() > 0) {
							
							for (OpdPatientDetails opdPatientDetails: pediatricsChartList) {
							//	double temp = 0;
								int childHeight = 0;
								Double weight=0.0;
								int age = 0;
								
								
								Hour hour = null;
								/*if (ipdTemperature.getTemperature() != null) 
									temp = ipdTemperature.getTemperature();
								}*/

								if (opdPatientDetails != null && opdPatientDetails.getVisit() != null) {
									String ptAge=!opdPatientDetails.getVisit().getAge().equals("")?opdPatientDetails.getVisit().getAge():"";
										if(ptAge.length()>0){
										age=Integer.parseInt(ptAge.split(" ")[0]);
										}
										} 
							if (opdPatientDetails.getHeight() != null) {
								childHeight= opdPatientDetails.getHeight().intValue();
								}
							if (opdPatientDetails.getWeight() != null) {
								weight= opdPatientDetails.getWeight();
								}
							if(age != 0 && childHeight!= 0 && weight != 0){
								series1.addOrUpdate(age,weight.intValue());
								series2.addOrUpdate(age,childHeight);
							}
							 if(opdPatientDetails.getVisit().getHin().getSex() != null){
								gender = opdPatientDetails.getVisit().getHin().getSex().getAdministrativeSexName();
							 }
							}
							dataset.addSeries(series1);
							dataset.addSeries(series2);
						} else 
						{
							map.put("status", "nodata");
						}
				      	JFreeChart chart = null;
				     if(gender.equalsIgnoreCase("Female")){
				      	 chart = ChartFactory.createXYLineChart
				      	("0 to 18 Years:Girls", "Age(Years)", "weight(Kg)/Height(cm)",
				      			dataset, PlotOrientation.VERTICAL, true, true, false);
				     }else{
				    	  chart = ChartFactory.createXYLineChart
							      	("0 to 18 Years:Boys", "Age(Years)", "weight(Kg)/Height(cm)",
							      			dataset, PlotOrientation.VERTICAL, true, true, false);
				    	 
				     }
				    	chart.setBackgroundPaint(Color.white);
				    	ChartPanel chartPanel=new ChartPanel(chart);
				    	  chartPanel.setPreferredSize(new java.awt.Dimension(600,360));
				    	  chartPanel.setDomainZoomable(true);
				    	  chartPanel.setRangeZoomable(true);
				    	  //charts.add(chart);
				    	  //chartPanels.add(chartPanel);
						XYPlot plot = (XYPlot) chart.getPlot();
						plot.setBackgroundPaint(Color.lightGray);
						plot.setDomainGridlinePaint(Color.white);
						plot.setRangeGridlinePaint(Color.white);
						plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
						plot.setDomainCrosshairVisible(true);
						plot.setRangeCrosshairVisible(true);
				    
						XYItemRenderer pr = plot.getRenderer();
						if (pr instanceof XYLineAndShapeRenderer) {
							XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
							renderer.setBaseShapesVisible(true);
							renderer.setBaseShapesFilled(true);
							renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
							//renderer.setSeriesStroke(2, new BasicStroke(4.0f));
							
						}
						NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
						paxis.setAutoRange(true);
						JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
						chart.getBackgroundImage();
						map.put("jfcRenderer", jfcRenderer);
						map.put("chart", chart);
						Connection con = session.connection();
						map.put("conn", con);
						return map;
					}

					@Override
					public Map<String, Object> printHeightWeightHeadCircumferenceGraph(
							Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdPatientDetails> pediatricsChartList = new ArrayList<OpdPatientDetails>();
						Session session = (Session)getSession();
						
						int hinId =0;
						if(requestParametersMap.get("hinId") != null){
							hinId = (Integer)requestParametersMap.get("hinId");
						}
				
						pediatricsChartList =session.createCriteria(OpdPatientDetails.class)
								.createAlias("Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
						.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
						
						
						XYSeriesCollection dataset = new XYSeriesCollection();
						XYSeries series1 = new XYSeries("Average Weight");
						XYSeries series2 = new XYSeries("Average Head Circumference");
						XYSeries series3 = new XYSeries("Average Height");
						String gender = "";
				      	if (pediatricsChartList.size() > 0) {
							
							for (OpdPatientDetails opdPatientDetails: pediatricsChartList) {
							//	double temp = 0;
								Double childHeight = 0.0;
								Double weight=0.0;
								Double headCircumference=0.0;
								int age = 0;
								
								
								Hour hour = null;
								/*if (ipdTemperature.getTemperature() != null) 
									temp = ipdTemperature.getTemperature();
								}*/

								if (opdPatientDetails != null && opdPatientDetails.getVisit() != null) {
									String ptAge=!opdPatientDetails.getVisit().getAge().equals("")?opdPatientDetails.getVisit().getAge():"";
										if(ptAge.length()>0){
										age=Integer.parseInt(ptAge.split(" ")[0]);
										}
										} 
							if (opdPatientDetails.getHeight() != null) {
								childHeight= opdPatientDetails.getHeight();
								}
							if (opdPatientDetails.getWeight() != null) {
								weight= opdPatientDetails.getWeight();
								}
							if (opdPatientDetails.getHeadCircumference() != null) {
								headCircumference= opdPatientDetails.getHeadCircumference();
								}
							if(age != 0 && childHeight!= 0 && weight != 0){
								series1.addOrUpdate(age,weight.intValue());
								series2.addOrUpdate(age,headCircumference.intValue());
								series3.addOrUpdate(age,childHeight.intValue());
							}
							 if(opdPatientDetails.getVisit().getHin().getSex() != null){
								gender = opdPatientDetails.getVisit().getHin().getSex().getAdministrativeSexName();
							 }
							}
							dataset.addSeries(series1);
							dataset.addSeries(series2);
							dataset.addSeries(series3);
						} else 
						{
							map.put("status", "nodata");
						}
				      
				      	JFreeChart chart = ChartFactory.createXYLineChart("0 to 18 Years", "Age(Years)", "weight(Kg)/Height(cm)/Head Circumference", dataset, PlotOrientation.VERTICAL, true, true, false);
				      	
				    	chart.setBackgroundPaint(Color.white);
						XYPlot plot = (XYPlot) chart.getPlot();
						plot.setBackgroundPaint(Color.lightGray);
						plot.setDomainGridlinePaint(Color.white);
						plot.setRangeGridlinePaint(Color.white);
						plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
						plot.setDomainCrosshairVisible(true);
						plot.setRangeCrosshairVisible(true);
				    
						XYItemRenderer pr = plot.getRenderer();
						if (pr instanceof XYLineAndShapeRenderer) {
							XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
							renderer.setBaseShapesVisible(true);
							renderer.setBaseShapesFilled(true);
							renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
							
						}
						NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
						paxis.setAutoRange(true);
						JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
						chart.getBackgroundImage();
						map.put("jfcRenderer", jfcRenderer);
						map.put("chart", chart);
						Connection con = session.connection();
						map.put("conn", con);
						return map;
					}

					@Override
					public Map<String, Object> showNicuCaseRecordJsp(Box box) {
						Map<String,Object> map=new HashMap<String,Object>();
						Session session=(Session) getSession();
						List<Integer> maxVisitIdList = new ArrayList<Integer>();
						List<OpdNicuCaseRecord> opdNicuCaseRecordList = new ArrayList<OpdNicuCaseRecord>(); 
					/*	
						maxVisitIdList =session.createCriteria(OpdPatientDetails.class)
								.createAlias("Visit", "visit")
								//.createAlias("visit.Hin", "hin")
								.add(Restrictions.eq("visit.Id", ))
											.setProjection(Projections.max("visit.Id")).list();*/
						if(box.getInt("visitId")!=0){
							maxVisitIdList =session.createCriteria(OpdPatientDetails.class)
									.createAlias("Visit", "visit")
									//.createAlias("visit.Hin", "hin")
									.add(Restrictions.eq("visit.Id", box.getInt("visitId")))
												.setProjection(Projections.max("visit.Id")).list();
								
						}
					if(maxVisitIdList.size()>0){
						if(maxVisitIdList.get(0) != null){
						int maxVisitId = maxVisitIdList.get(0);
					
						
						
						opdNicuCaseRecordList=session.createCriteria(OpdNicuCaseRecord.class)
								.createAlias("OpdPatientDetails", "opd")
								.createAlias("opd.Visit", "visit")
								.add(Restrictions.eq("visit.Id",maxVisitId)).list();
								
								
						map.put("opdNicuCaseRecordList", opdNicuCaseRecordList);
				
						}
						
					 }
				
						return map;
					}

					@Override
					public Map<String, Object> printWeightPercentiles(
							Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdNicuCaseRecord> pediatricsChartList = new ArrayList<OpdNicuCaseRecord>();
						Session session = (Session)getSession();
						
						int hinId =0;
						if(requestParametersMap.get("hinId") != null){
							hinId = (Integer)requestParametersMap.get("hinId");
						}
				
						pediatricsChartList =session.createCriteria(OpdNicuCaseRecord.class).createAlias("OpdPatientDetails", "opd")
								.createAlias("opd.Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
						.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
						
						
						XYSeriesCollection dataset = new XYSeriesCollection();
						XYSeries series1 = new XYSeries("Weight");
						
				      	if (pediatricsChartList.size() > 0) {
							
							for (OpdNicuCaseRecord opdNicuCaseRecord: pediatricsChartList) {
								Double weight=0.0;
								int gestationalWeek = 0;

							
							if (opdNicuCaseRecord.getWeek() != null) {
								gestationalWeek= opdNicuCaseRecord.getWeek();
								}
							if (opdNicuCaseRecord.getOpdPatientDetails().getWeight() != null) {
								weight= opdNicuCaseRecord.getOpdPatientDetails().getWeight();
								}
							if(gestationalWeek != 0 && weight!= 0 ){
								series1.addOrUpdate(gestationalWeek,weight.intValue());
							}
							
							}
							dataset.addSeries(series1);
						} else 
						{
							map.put("status", "nodata");
						}
				      
				      	JFreeChart chart = ChartFactory.createXYLineChart("Weight Percentiles", "Gastational Age(Week)", "weight(Kg)", dataset, PlotOrientation.VERTICAL, true, true, false);
				      	
				    	chart.setBackgroundPaint(Color.white);
						XYPlot plot = (XYPlot) chart.getPlot();
						plot.setBackgroundPaint(Color.lightGray);
						plot.setDomainGridlinePaint(Color.white);
						plot.setRangeGridlinePaint(Color.white);
						plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
						plot.setDomainCrosshairVisible(true);
						plot.setRangeCrosshairVisible(true);
				    
						XYItemRenderer pr = plot.getRenderer();
						if (pr instanceof XYLineAndShapeRenderer) {
							XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
							renderer.setBaseShapesVisible(true);
							renderer.setBaseShapesFilled(true);
							renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
							
						}
						NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
						paxis.setAutoRange(true);
						JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
						chart.getBackgroundImage();
						map.put("jfcRenderer", jfcRenderer);
						map.put("chart", chart);
						Connection con = session.connection();
						map.put("conn", con);
						return map;
					}

					@Override
					public Map<String, Object> printHeightPercentiles(Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdNicuCaseRecord> pediatricsChartList = new ArrayList<OpdNicuCaseRecord>();
						Session session = (Session)getSession();
						
						int hinId =0;
						if(requestParametersMap.get("hinId") != null){
							hinId = (Integer)requestParametersMap.get("hinId");
						}
				
						pediatricsChartList =session.createCriteria(OpdNicuCaseRecord.class).createAlias("OpdPatientDetails", "opd")
								.createAlias("opd.Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
						.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
						
						
						XYSeriesCollection dataset = new XYSeriesCollection();
						XYSeries series1 = new XYSeries("Height");
						
				      	if (pediatricsChartList.size() > 0) {
							
							for (OpdNicuCaseRecord opdNicuCaseRecord: pediatricsChartList) {
								int height =0;
								int gestationalWeek = 0;

							
							if (opdNicuCaseRecord.getWeek() != null) {
								gestationalWeek= opdNicuCaseRecord.getWeek();
								}
							if (opdNicuCaseRecord.getOpdPatientDetails().getHeight() != null) {
								height= opdNicuCaseRecord.getOpdPatientDetails().getHeight().intValue();
								}
							if(gestationalWeek != 0 && height!= 0 ){
								series1.addOrUpdate(gestationalWeek,height);
							}
							
							}
							dataset.addSeries(series1);
						} else 
						{
							map.put("status", "nodata");
						}
				      
				      	JFreeChart chart = ChartFactory.createXYLineChart("Height Percentiles", "Gastational Age(Week)", "Height(Cm)", dataset, PlotOrientation.VERTICAL, true, true, false);
				      	
				    	chart.setBackgroundPaint(Color.white);
						XYPlot plot = (XYPlot) chart.getPlot();
						plot.setBackgroundPaint(Color.lightGray);
						plot.setDomainGridlinePaint(Color.white);
						plot.setRangeGridlinePaint(Color.white);
						plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
						plot.setDomainCrosshairVisible(true);
						plot.setRangeCrosshairVisible(true);
				    
						XYItemRenderer pr = plot.getRenderer();
						if (pr instanceof XYLineAndShapeRenderer) {
							XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
							renderer.setBaseShapesVisible(true);
							renderer.setBaseShapesFilled(true);
							renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
							
						}
						NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
						paxis.setAutoRange(true);
						JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
						chart.getBackgroundImage();
						map.put("jfcRenderer", jfcRenderer);
						map.put("chart", chart);
						Connection con = session.connection();
						map.put("conn", con);
						return map;
					}

					@Override
					public Map<String, Object> printHeadCircumferencePercentiles(Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdNicuCaseRecord> pediatricsChartList = new ArrayList<OpdNicuCaseRecord>();
						Session session = (Session)getSession();
						
						int hinId =0;
						if(requestParametersMap.get("hinId") != null){
							hinId = (Integer)requestParametersMap.get("hinId");
						}
				
						pediatricsChartList =session.createCriteria(OpdNicuCaseRecord.class).createAlias("OpdPatientDetails", "opd")
								.createAlias("opd.Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
						.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
						
						
						XYSeriesCollection dataset = new XYSeriesCollection();
						XYSeries series1 = new XYSeries("Weight");
						
				      	if (pediatricsChartList.size() > 0) {
							
							for (OpdNicuCaseRecord opdNicuCaseRecord: pediatricsChartList) {
								BigDecimal headCircumference=new BigDecimal(0);
								int gestationalWeek = 0;

							
							if (opdNicuCaseRecord.getWeek() != null) {
								gestationalWeek= opdNicuCaseRecord.getWeek();
								}
							if (opdNicuCaseRecord.getHeadcircumference() != null) {
								headCircumference = opdNicuCaseRecord.getHeadcircumference();
								}
							if(gestationalWeek != 0 && headCircumference.compareTo(new BigDecimal(0))>0 ){
								series1.addOrUpdate(gestationalWeek,headCircumference.intValue());
							}
							
							}
							dataset.addSeries(series1);
						} else 
						{
							map.put("status", "nodata");
						}
				      
				      	JFreeChart chart = ChartFactory.createXYLineChart("Head Circumference Percentiles", "Gastational Age(Week)", "Head Circumference(Kg)", dataset, PlotOrientation.VERTICAL, true, true, false);
				      	
				    	chart.setBackgroundPaint(Color.white);
						XYPlot plot = (XYPlot) chart.getPlot();
						plot.setBackgroundPaint(Color.lightGray);
						plot.setDomainGridlinePaint(Color.white);
						plot.setRangeGridlinePaint(Color.white);
						plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
						plot.setDomainCrosshairVisible(true);
						plot.setRangeCrosshairVisible(true);
				    
						XYItemRenderer pr = plot.getRenderer();
						if (pr instanceof XYLineAndShapeRenderer) {
							XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
							renderer.setBaseShapesVisible(true);
							renderer.setBaseShapesFilled(true);
							renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
							
						}
						NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
						paxis.setAutoRange(true);
						JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
						chart.getBackgroundImage();
						map.put("jfcRenderer", jfcRenderer);
						map.put("chart", chart);
						Connection con = session.connection();
						map.put("conn", con);
						return map;
					}

					@Override
					public Map<String, Object> printGrowthRecord(Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdPatientDetails> pediatricsChartList = new ArrayList<OpdPatientDetails>();
						Session session = (Session)getSession();
						
						int hinId =0;
						if(requestParametersMap.get("hinId") != null){
							hinId = (Integer)requestParametersMap.get("hinId");
						}
				
						pediatricsChartList =session.createCriteria(OpdPatientDetails.class)
								.createAlias("Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
						.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
						
						
						XYSeriesCollection dataset = new XYSeriesCollection();
						XYSeries series1 = new XYSeries("Average Weight");
						XYSeries series2 = new XYSeries("Average Height");
						XYSeries series3 = new XYSeries("Average Head Circumference");
						String gender = "";
				      	if (pediatricsChartList.size() > 0) {
							
							for (OpdPatientDetails opdPatientDetails: pediatricsChartList) {
							//	double temp = 0;
								int childHeight = 0;
								Double weight=0.0;
								int age = 0;
								Double headCircumference=0.0;
								
								Hour hour = null;
								/*if (ipdTemperature.getTemperature() != null) 
									temp = ipdTemperature.getTemperature();
								}*/

								if (opdPatientDetails != null && opdPatientDetails.getVisit() != null) {
									String ptAge=!opdPatientDetails.getVisit().getAge().equals("")?opdPatientDetails.getVisit().getAge():"";
										if(ptAge.length()>0){
										age=Integer.parseInt(ptAge.split(" ")[0]);
										}
										} 
							if (opdPatientDetails.getHeight() != null) {
								childHeight= opdPatientDetails.getHeight().intValue();
								}
							if (opdPatientDetails.getWeight() != null) {
								weight= opdPatientDetails.getWeight();
								}
							if (opdPatientDetails.getHeadCircumference() != null) {
								headCircumference= opdPatientDetails.getHeadCircumference();
								}
							if(age != 0 && childHeight!= 0 && weight != 0){
								series1.addOrUpdate(age,weight.intValue());
								series2.addOrUpdate(age,childHeight);
								series3.addOrUpdate(age,headCircumference.intValue());
							}
							 if(opdPatientDetails.getVisit().getHin().getSex() != null){
								gender = opdPatientDetails.getVisit().getHin().getSex().getAdministrativeSexName();
							 }
							}
							dataset.addSeries(series1);
							dataset.addSeries(series2);
							dataset.addSeries(series3);
						} else 
						{
							map.put("status", "nodata");
						}
				      	JFreeChart chart = null;
				     if(gender.equalsIgnoreCase("Female")){
				      	 chart = ChartFactory.createXYLineChart
				      	("IAP Chart on Length,Weight and head Circumference for Girls", "Years", "weight(Kg)/Head Circumference",
				      			dataset, PlotOrientation.VERTICAL, true, true, false);
				     }else{
				    	  chart = ChartFactory.createXYLineChart
							      	("IAP Chart on Length,Weight and head Circumference for Boys ", "Years", "weight(Kg)/Height(cm)/Head Circumference",
							      			dataset, PlotOrientation.VERTICAL, true, true, false);
				    	 
				     }
				    	chart.setBackgroundPaint(Color.white);
						XYPlot plot = (XYPlot) chart.getPlot();
						plot.setBackgroundPaint(Color.lightGray);
						plot.setDomainGridlinePaint(Color.white);
						plot.setRangeGridlinePaint(Color.white);
						plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
						plot.setDomainCrosshairVisible(true);
						plot.setRangeCrosshairVisible(true);
				    
						XYItemRenderer pr = plot.getRenderer();
						if (pr instanceof XYLineAndShapeRenderer) {
							XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
							renderer.setBaseShapesVisible(true);
							renderer.setBaseShapesFilled(true);
							renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
							
						}
						NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
						paxis.setAutoRange(true);
						JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
						chart.getBackgroundImage();
						map.put("jfcRenderer", jfcRenderer);
						map.put("chart", chart);
						Connection con = session.connection();
						map.put("conn", con);
						return map;
					}

					@Override
					public Map<String, Object> showOutSideResultEntryForAntenatal(
							Map<String, Object> requestParametersMap) {
						List<DgSampleCollectionDetails> dgSampleCollectionDetails= new ArrayList<DgSampleCollectionDetails>();
						List<OpdTemplate> templateListForInvestigation = new ArrayList<OpdTemplate>();
						List<OpdTemplate> templateListForInvestigationInstituteWise = new ArrayList<OpdTemplate>();
						Map<String, Object> map = new HashMap<String, Object>();
						String from = "";
						Session session = (Session) getSession();
						int deptId = 0;
						int hospitalId= 0;
						String templateFlag = "";
						
						if(requestParametersMap.get("templateFlag")!=null){
							templateFlag = ((String)requestParametersMap.get("templateFlag"));
							}
						if(requestParametersMap.get("deptId")!=null){
						 deptId = ((Integer)requestParametersMap.get("deptId"));
						}
						
						if(requestParametersMap.get("hospitalId") != null){
						 hospitalId = ((Integer)requestParametersMap.get("hospitalId"));
						}
						int hinId = ((Integer)requestParametersMap.get("hinId"));
						int visitId = ((Integer)requestParametersMap.get("visitId"));
						from = (String)requestParametersMap.get("from");
					
						dgSampleCollectionDetails = session.createCriteria(DgSampleCollectionDetails.class)
								.createAlias("SampleCollectionHeader", "sampleCollectionHeader")
								.createAlias("sampleCollectionHeader.Order", "orderhd")
								.createAlias("orderhd.Hin", "hin")
								.createAlias("orderhd.Visit", "visit")
								.add(Restrictions.eq("hin.Id", hinId))
								.add(Restrictions.eq("visit.Id", visitId))
								.add(Restrictions.eq("sampleCollectionHeader.OrderStatus", "P").ignoreCase())
								.addOrder(Order.asc("ChargeCode.Id"))
								.list();
						map.put("dgSampleCollectionDetails", dgSampleCollectionDetails);
						
						List<DgOrderdt> dgOrderdts= new ArrayList<DgOrderdt>();
						dgOrderdts = session.createCriteria(DgOrderdt.class)
								.createAlias("Orderhd", "orderhd")
								.createAlias("orderhd.Hin", "hin")
								.createAlias("orderhd.Visit", "visit")
								.add(Restrictions.eq("orderhd.OrderDate", new Date()))
								.add(Restrictions.eq("orderhd.OrderStatus", "p").ignoreCase())
								.add(Restrictions.eq("visit.Id", visitId))
								.add(Restrictions.eq("hin.Id", hinId))
								.addOrder(Order.asc("ChargeCode.Id"))
								.list();
						map.put("dgOrderdts", dgOrderdts);
						
						List<PatientInvestigationDetails> patientInvestigationDetails= new ArrayList<PatientInvestigationDetails>();
						patientInvestigationDetails = session.createCriteria(PatientInvestigationDetails.class)
								.createAlias("InvestigationHeader","pih")
								.createAlias("pih.Hin", "hin")
								.createAlias("pih.Visit", "visit")
								.add(Restrictions.eq("hin.Id", hinId))
								.add(Restrictions.eq("visit.Id", visitId))
								.addOrder(Order.asc("ChargeCode.Id"))
								.list();
						map.put("patientInvestigationDetails", patientInvestigationDetails);
						
						templateListForInvestigation = session.createCriteria(OpdTemplate.class).createAlias("Department", "dept")
								.add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNull("Hospital.Id")).add(Restrictions.isNull("templateLocal")).list();


						templateListForInvestigationInstituteWise = session.createCriteria(OpdTemplate.class)
								.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.isNull("templateLocal")).list();

						templateListForInvestigation.addAll(templateListForInvestigationInstituteWise); 
						map.put("templateListForInvestigation", templateListForInvestigation);					
						
						return map;
					}

					@Override
					public Map<String, Object> saveOutSideResultEntryForAntenatal(
							Map<String, Object> requestParametersMap) {
						Map<String, Object> map = new HashMap();
					    List<ExternalLabReportCommon> externalLabReports = new ArrayList();
					    List<ExternalLabReportCommon> testList = new ArrayList();
					    HibernateTemplate hbt = getHibernateTemplate();
					    hbt.setFlushModeName("FLUSH_EAGER");
					    hbt.setCheckWriteOperations(false);
					    boolean saved = false;
					    if (requestParametersMap.get("testList") != null) {
					      testList = (List)requestParametersMap.get("testList");
					    }
					    try {					      
					      for (int i = 0; i < testList.size(); i++)
					      {
					        ExternalLabReportCommon externalLabReport = new ExternalLabReportCommon();
					        externalLabReport = (ExternalLabReportCommon)testList.get(i);
					        hbt.save(externalLabReport);
					        saved = true;
					      }
					    }
					    catch (HibernateException localHibernateException) {}
					    

					    map.put("saved", Boolean.valueOf(saved));
					    return map;
					}
					@Override
					public Map<String, Object> getMedicineTemplateDetails(
							Box box) {

						Session session = (Session) getSession();
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdPatientDetails> opdPatientDetailsList = null;
						List<OpdMedicineSpecialityTemplate> opdMedicineTemplateList = null;
						List<OpdMedicineCardiovascularSystem> opdMedicineCardioSysList = null;
						List<OpdMedicineArterialBloodPressure> opdMedicineABPList = null;

						opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class).add(Restrictions.eq("Visit.Id", box.getInt("visitId"))).list();
						
						if(opdPatientDetailsList.size()>0)
						{
							int opdPatientDetailsId = opdPatientDetailsList.get(0).getId();
							int hinId = box.getInt("hinId");
							opdMedicineTemplateList = session.createCriteria(OpdMedicineSpecialityTemplate.class).add(Restrictions.eq("Hin.Id", hinId))
														.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
							
							opdMedicineCardioSysList = session.createCriteria(OpdMedicineCardiovascularSystem.class).add(Restrictions.eq("Hin.Id", hinId))
										.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
							 
							opdMedicineABPList = session.createCriteria(OpdMedicineArterialBloodPressure.class).add(Restrictions.eq("Hin.Id", hinId))
										.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
							if(opdMedicineTemplateList.size()>0)
							map.put("opdMedicineTemplate",opdMedicineTemplateList.get(0));
							
							map.put("opdMedicineCardioSysList",opdMedicineCardioSysList);
							map.put("opdMedicineABPList",opdMedicineABPList);
						}
						
						return map;
					
						
					}

					@Override
					public Map<String, Object> showOrthopedicJsp(Map<String, Object> requestParametersMap) {
							List<OpdOrthopedicSpeciality> opdOrthopedicSpec = new ArrayList<OpdOrthopedicSpeciality>();
							List<OpdOrthopedicSpeciality> opdOrthopedicSpecList = new ArrayList<OpdOrthopedicSpeciality>();
							Map<String, Object> map = new HashMap();
							Session session = (Session)getSession();
							List<OpdPatientDetails> opdPatientDetails = new ArrayList<OpdPatientDetails>();
							//OpdOrthopedicSpeciality opdOrthopedicSpeciality=new OpdOrthopedicSpeciality();
							int hinId = ((Integer)requestParametersMap.get("hinId")).intValue();
							List<OpdAntenatalCard> opdAntenatalCardList= new ArrayList<OpdAntenatalCard>();
							int visitId=0;
							visitId = ((Integer)requestParametersMap.get("visitId"));
							System.out.println("Visit id on ortho: "+visitId);
							
							String edc="";
							String obsterDisord="";
							String obsterScore="";
							String medicalDisord="";
							String age="";
							Date dob=null;
							
							try{
								
								opdAntenatalCardList =session.createCriteria(OpdAntenatalCard.class)
										.createAlias("Hin", "h")
										.createAlias("Visit", "visit")
										.add(Restrictions.eq("h.Id", hinId))
										.createAlias("h.Sex", "s")
										.add(Restrictions.eq("s.AdministrativeSexName","Female"))
										.add(Restrictions.le("h.DateOfBirth",HMSUtil.calculateDateBeforeEighteenYears()))
										.add(Restrictions.ge("visit.VisitDate", HMSUtil.calculateDateBeforeTenMonths()))
										//.setProjection(Projections.max("visit.Id"))
										.list();	
							
								
							opdOrthopedicSpec =session.createCriteria(OpdOrthopedicSpeciality.class)
									.createAlias("Hin", "h").createAlias("OpdPatientDetails", "opd")
									.add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))								  
									.addOrder(Order.desc("Id"))
									.list();	
								
								
							opdOrthopedicSpecList =session.createCriteria(OpdOrthopedicSpeciality.class)
										.createAlias("OpdPatientDetails", "OPD")
										.createAlias("OPD.Visit", "OV")
										.add(Restrictions.eq("Hin.Id", hinId))
										.add(Restrictions.eq("OV.Id", visitId))
										.addOrder(Order.desc("Id"))
										.setMaxResults(1)
										.list();
								
								
							/*if(opdOrthopedicSpec.size()>0){
							opdOrthopedicSpeciality=opdOrthopedicSpec.get(0);	
							}*/
							}catch(HibernateException he){}
							map.put("opdOrthopedicSpeciality", opdOrthopedicSpec);
							map.put("opdAntenatalCardList", opdAntenatalCardList);
							map.put("opdOrthopedicSpecList", opdOrthopedicSpecList);
							return map;
					}
					
					@Override
					public Map<String, Object> getContactLensTemplateDetails(Box box) {
					

						Session session = (Session) getSession();
						Map<String, Object> map = new HashMap<String, Object>();
						List<OpdPatientDetails> opdPatientDetailsList = null;
						List<OpdMedicineSpecialityTemplate> opdMedicineTemplateList = null;
						List<OpdMedicineCardiovascularSystem> opdMedicineCardioSysList = null;
						List<OpdMedicineArterialBloodPressure> opdMedicineABPList = null;

						opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class).add(Restrictions.eq("Visit.Id", box.getInt("visitId"))).list();
						
						if(opdPatientDetailsList.size()>0)
						{
							int opdPatientDetailsId = opdPatientDetailsList.get(0).getId();
							int hinId = box.getInt("hinId");
							opdMedicineTemplateList = session.createCriteria(OpdMedicineSpecialityTemplate.class).add(Restrictions.eq("Hin.Id", hinId))
														.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
							
							opdMedicineCardioSysList = session.createCriteria(OpdMedicineCardiovascularSystem.class).add(Restrictions.eq("Hin.Id", hinId))
										.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
							 
							opdMedicineABPList = session.createCriteria(OpdMedicineArterialBloodPressure.class).add(Restrictions.eq("Hin.Id", hinId))
										.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
							if(opdMedicineTemplateList.size()>0)
							map.put("opdMedicineTemplate",opdMedicineTemplateList.get(0));
							
							map.put("opdMedicineCardioSysList",opdMedicineCardioSysList);
							map.put("opdMedicineABPList",opdMedicineABPList);
						}
						
						return map;
					
						
					}
					
					 @Override
	                    public Map<String, Object> saveContactLensTemplate(Box box) {
	                        Map<String,Object> map = new HashMap<String,Object>();
	                        try{
	                            Session session = (Session) getSession();
	                            Transaction tx=session.beginTransaction();
	                            HibernateTemplate hbt = getHibernateTemplate();
	                            hbt.setFlushModeName("FLUSH_EAGER");
	                            hbt.setCheckWriteOperations(false);
	                            
	                            List<OpdContactLensTemplate> templateList = null;
	                            int opdPatientDetailId =box.getInt("opdPatientDetailId");
	                                
	                            templateList = session.createCriteria(OpdContactLensTemplate.class).add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailId)).list();
	                                
	                        if(templateList.size()==0){
	                            OpdContactLensTemplate opdCLObj = new OpdContactLensTemplate();
	                            opdCLObj.setDefVisionLe(box.getString("def_vision_le"));
	                            opdCLObj.setDefectiveVisLeDur(box.getString("defective_vis_le_dur"));
	                            opdCLObj.setDefDurTypeLe(box.getString("def_dur_type_le"));
	                            opdCLObj.setDefVisionRe(box.getString("def_vision_re"));
	                            opdCLObj.setDefectiveVisReDur(box.getString("defective_vis_re_dur"));
	                            opdCLObj.setDefDurTypeRe(box.getString("def_dur_type_re"));
	                            if(!box.getString("pt_cont_lens").isEmpty())
	                                 opdCLObj.setPtContactLens("y");
	                            else
	                            	 opdCLObj.setPtContactLens("n");
	                            opdCLObj.setPtContLensDur(box.getString("pt_cont_lens_dur"));
	                            opdCLObj.setPtContLensDurType(box.getString("pt_cont_lens_dur_type"));
	                            opdCLObj.setPtContLensValue(box.getString("pt_cont_lens_value"));
	                            opdCLObj.setPtContLensValueOthers(box.getString("pt_cont_lens_value_others"));
	                            if(!box.getString("pt_spectacles").isEmpty())
	                                 opdCLObj.setPtSpect("y");
	                            else
	                            	 opdCLObj.setPtSpect("n");
	                            opdCLObj.setPtSpectDur(box.getString("pt_spectacles_dur"));
	                            opdCLObj.setPtSpectDurType(box.getString("pt_spectacles_dur_type"));
	                            
	                            opdCLObj.setVisionUnaidedDistRe(box.getString("vision_unaided_dis_re"));
	                            opdCLObj.setVisionUnaidedDistLe(box.getString("vision_unaided_dis_le"));
	                            opdCLObj.setVisionUnaidedNearRe(box.getString("vision_unaided_near_re"));
	                            opdCLObj.setVisionUnaidedNearLe(box.getString("vision_unaided_near_le"));
	                            
	                            opdCLObj.setVisionPtDisRe(box.getString("vision_pt_dis_re"));
	                            opdCLObj.setVisionPtDisLe(box.getString("vision_pt_dis_le"));
	                            opdCLObj.setVisionPtNearRe(box.getString("vision_pt_near_re"));
	                            opdCLObj.setVisionPtNearLe(box.getString("vision_pt_near_le"));
	                            
	                            opdCLObj.setSphDistRe(box.getString("sph_dis_re"));
	                            opdCLObj.setCylDistRe(box.getString("cyl_dis_re"));
	                            opdCLObj.setAxixDistRe(box.getString("axis_dis_re"));
	                            opdCLObj.setSphDistLe(box.getString("sph_dis_le"));
	                            opdCLObj.setCylDistLe(box.getString("cyl_dis_le"));
	                            opdCLObj.setAxixDistLe(box.getString("axis_dis_le"));
	                            opdCLObj.setSphNearRe(box.getString("sph_near_re"));
	                            opdCLObj.setCylNearRe(box.getString("cyl_near_re"));
	                            opdCLObj.setAxixNearRe(box.getString("axis_near_re"));
	                            opdCLObj.setSphNearLe(box.getString("sph_near_le"));
	                            opdCLObj.setCylNearLe(box.getString("cyl_near_le"));
	                            opdCLObj.setAxixNearLe(box.getString("axis_near_le"));
	                            
	                            opdCLObj.setK1Re(box.getString("k1_re"));
	                            opdCLObj.setK2Re(box.getString("k2_re"));
	                            opdCLObj.setK1Le(box.getString("k1_le"));
	                            opdCLObj.setK2Le(box.getString("k2_le"));
	                            opdCLObj.setR1Re(box.getString("r1_re"));
	                            opdCLObj.setR2Re(box.getString("r2_re"));
	                            opdCLObj.setR1Le(box.getString("r1_le"));
	                            opdCLObj.setR2Le(box.getString("r2_le"));
	                            opdCLObj.setSlExamLidMargin(box.getString("sl_exam_lid_margin"));
	                            opdCLObj.setSlExamUtc(box.getString("sl_exam_utc"));
	                            opdCLObj.setSlExamTbut(box.getString("sl_exam_tbut"));
	                            opdCLObj.setSlExamOthers(box.getString("sl_exam_others"));
	                            opdCLObj.setRemarks(box.getString("remarks"));
	                            opdCLObj.setContactLensVision(box.getString("contact_lens_vision"));
	                            opdCLObj.setOverRefraction(box.getString("over_refraction"));
	                            opdCLObj.setOthers(box.getString("others"));
	                            opdCLObj.setTrailIValue1(box.getString("trail_I_value1"));
	                            opdCLObj.setTrailIValue2(box.getString("trail_I_value2"));
	                            opdCLObj.setLensOrderValue1(box.getString("lens_order_value1"));
	                            opdCLObj.setLensOrderValue2(box.getString("lens_order_value2"));
	                            if(!box.getString("cl_solution").isEmpty())
	                                 opdCLObj.setClSolution("y");
	                            else
	                            	 opdCLObj.setClSolution("n");
	                            if(!box.getString("lens_case").isEmpty())
	                                 opdCLObj.setLensCase("y");
	                            else
	                            	 opdCLObj.setLensCase("n");
	                            
	                            
	                            if(opdPatientDetailId != 0){
	                                OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
	                                opdPatientDetails.setId(opdPatientDetailId);
	                                opdCLObj.setOpdPatientDetails(opdPatientDetails);
	                            }
	                                if(!box.get("hinId").equals("")){
	                                    int hinId =Integer.parseInt(box.get("hinId"));
	                                    Patient patient = new Patient();
	                                    patient.setId(hinId);
	                                    opdCLObj.setHin(patient);
	                                }
	                            hbt.save(opdCLObj);

	                        tx.commit();
	                        map.put("opdContactLensTemplate", opdCLObj);
	                         
	                        }
	                       
	                    }catch(Exception e){
	                        e.printStackTrace();
	                        }
	                                    
	                                    return map;
	                                
	                                    
	                    }
					 	 
					//added by swarup 13/11/2017-begin
					    @Override
						public Map<String, Object> showAudiologicalExaminationJsp(Map<String, Object> requestParametersMap) {
								List<OpdAudiologicalExamEntSpeciality> opdAudiologicalSpec = new ArrayList<OpdAudiologicalExamEntSpeciality>();
								Map<String, Object> map = new HashMap();
								Session session = (Session)getSession();
								List<Visit> patientList = new ArrayList<Visit>();
								Map<String, Object> requestParametersMap1 = new HashMap<String, Object>();
								String patientName = null;
								String gender = null;
								int hinId = 0;
								int visitId=0;
								List<OpdPatientDetails> opdPatientDetails = new ArrayList<OpdPatientDetails>();
								OpdAudiologicalExamEntSpeciality opdAudiologicalExamEntSpeciality=new OpdAudiologicalExamEntSpeciality();
								try{
									
									if(requestParametersMap.get("hinId")!=null){
										hinId =((Integer) requestParametersMap.get("hinId")); 
									}
									
									if(requestParametersMap.get("visitId")!=null){
										visitId =((Integer) requestParametersMap.get("visitId")); 
									}
									if(requestParametersMap.get("patientName")!=null){
										patientName =(String) requestParametersMap.get("patientName");
									}
									
									patientList =session.createCriteria(Visit.class)
											  .createAlias("Hin", "h")
											  .add(Restrictions.eq("h.Id", hinId))	
											 .add(Restrictions.eq("Id", visitId))
											 .addOrder(Order.desc("Id")).list();	
									}catch(HibernateException he){}						
								map.put("patientList", patientList);
								return map;
						}
					    //endded by swarup
					    
					    //added by swarup 13/11/2017-begin
					    @Override
						public Map<String, Object> saveAudiologicalExamEntSpeciality(Box box) {
					    	List<Visit> patientList = new ArrayList<Visit>();
							Map<String,Object> map = new HashMap<String,Object>();
							try{
								Session session = (Session) getSession();
								Transaction tx=session.beginTransaction();
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);
								
								OpdAudiologicalExamEntSpeciality opdAudiologicalExamEntSpeciality = new OpdAudiologicalExamEntSpeciality();
								
								 Integer visitId=null;
									if (box.get("visitId")!=null) {
										visitId = box.getInt("visitId");
									}
									
									Integer hinId=null;
									if (box.getString("hinId")!=null) {
										hinId = box.getInt("hinId");
									}
									
									if(box.getString("acMasLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcMasLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcMasLft("n");
									}
									
									if(box.getString("acMasNrLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcMasNrLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcMasNrLft("n");
									}
										
									if(box.getString("acMasNrRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcMasNrRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcMasNrRht("n");
									}
									
									if(box.getString("acMasRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcMasRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcMasRht("n");
									}
									
									if(box.getString("acUnmasLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcUnmasLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcUnmasLft("n");
									}
									
									if(box.getString("acUnmasNrLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcUnmasNrLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcUnmasNrLft("n");
									}
																		 
									if(box.getString("acUnmasNrRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcUnmasNrRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcUnmasNrRht("n");
									}
														 					
									if(box.getString("acUnmasRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setAcUnmasRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setAcUnmasRht("n");
									}
									
									String age=null;
									if (box.getString("age")!=null) {
										age = box.getString("age");
									}
									
									String audiogramLeft=null;
									if (box.getString("audiogramLeft")!=null) {
										audiogramLeft = box.getString("audiogramLeft");
									}
									
									String audiogramRight=null;
									if (box.getString("audiogramRight")!=null) {
										audiogramRight = box.getString("audiogramRight");
									}
									
									String audiologicalId=null;
									if (box.getString("audiologicalId")!=null) {
										audiologicalId = box.getString("audiologicalId");
									}
									
									String audiometer=null;
									if (box.getString("audiometer")!=null) {
										audiometer = box.getString("audiometer");
									}
									 					
									if(box.getString("bcMasLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcMasLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcMasLft("n");
									}
													
									if(box.getString("bcMasNrLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcMasNrLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcMasNrLft("n");
									}
									
									if(box.getString("bcMasNrRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcMasNrRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcMasNrRht("n");
									}
														 
									if(box.getString("bcMasRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcMasRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcMasRht("n");
									}
														 
									if(box.getString("bcUnmasLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcUnmasLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcUnmasLft("n");
									}
									
									if(box.getString("bcUnmasNrLft").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcUnmasNrLft("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcUnmasNrLft("n");
									}
														 
									if(box.getString("bcUnmasNrRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcUnmasNrRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcUnmasNrRht("n");
									}
									
									if(box.getString("bcUnmasRht").equalsIgnoreCase("y")){
										opdAudiologicalExamEntSpeciality.setBcUnmasRht("y");
									}else{
										opdAudiologicalExamEntSpeciality.setBcUnmasRht("n");
									}
									
									String caseName=null;
									if (box.getString("patientName")!=null) {
										caseName = box.getString("patientName");
									}
									 
									String caseNo=null;
									if (box.getString("caseNo")!=null) {
										caseNo = box.getString("caseNo");
									}
									 
									String gender=null;
									if (box.getString("gender")!=null) {
										gender = box.getString("gender");
									}
									
									Integer ptaDbLeft=null;
									if (box.getString("ptaDbLeft")!=null) {
										ptaDbLeft = box.getInt("ptaDbLeft");
									}
									
									Integer ptaDbRight=null;
									if (box.getString("ptaDbRight")!=null) {
										ptaDbRight = box.getInt("ptaDbRight");
									}
									
									String remarks=null;
									if (box.getString("remarks")!=null) {
										remarks = box.getString("remarks");
									}
									
									Integer srt1khzLftContra=null;
									if (box.getString("srt1khzLftContra")!=null) {
										srt1khzLftContra = box.getInt("srt1khzLftContra");
									}
									
									Integer srt1khzLftIpsi=null;
									if (box.getString("srt1khzLftIpsi")!=null) {
										srt1khzLftIpsi = box.getInt("srt1khzLftIpsi");
									}
									
									Integer srt1khzRhtContra=null;
									if (box.getString("srt1khzRhtContra")!=null) {
										srt1khzRhtContra = box.getInt("srt1khzRhtContra");
									}
									
									Integer srt1khzRhtIpsi=null;
									if (box.getString("srt1khzRhtIpsi")!=null) {
										srt1khzRhtIpsi = box.getInt("srt1khzRhtIpsi");
									}
									
									Integer srt2khzLftContra=null;
									if (box.getString("srt2khzLftContra")!=null) {
										srt2khzLftContra = box.getInt("srt2khzLftContra");
									}
									
									Integer srt2khzLftIpsi=null;
									if (box.getString("srt2khzLftIpsi")!=null) {
										srt2khzLftIpsi = box.getInt("srt2khzLftIpsi");
									}
									
									Integer srt2khzRhtContra=null;
									if (box.getString("srt2khzRhtContra")!=null) {
										srt2khzRhtContra = box.getInt("srt2khzRhtContra");
									}
									
									Integer srt2khzRhtIpsi=null;
									if (box.getString("srt2khzRhtIpsi")!=null) {
										srt2khzRhtIpsi = box.getInt("srt2khzRhtIpsi");
									}
									
									Integer srt4khzLftContra=null;
									if (box.getString("srt4khzLftContra")!=null) {
										srt4khzLftContra = box.getInt("srt4khzLftContra");
									}
									
									Integer srt4khzLftIpsi=null;
									if (box.getString("srt4khzLftIpsi")!=null) {
										srt4khzLftIpsi = box.getInt("srt4khzLftIpsi");
									}
									
									Integer srt4khzRhtContra=null;
									if (box.getString("srt4khzRhtContra")!=null) {
										srt4khzRhtContra = box.getInt("srt4khzRhtContra");
									}
									
									Integer srt4khzRhtIpsi=null;
									if (box.getString("srt4khzRhtIpsi")!=null) {
										srt4khzRhtIpsi = box.getInt("srt4khzRhtIpsi");
									}
									
									Integer srt500hzLftContra=null;
									if (box.getString("srt500hzLftContra")!=null) {
										srt500hzLftContra = box.getInt("srt500hzLftContra");
									}
									
									Integer srt500hzLftIpsi=null;
									if (box.getString("srt500hzLftIpsi")!=null) {
										srt500hzLftIpsi = box.getInt("srt500hzLftIpsi");
									}
									
									Integer srt500hzRhtContra=null;
									if (box.getString("srt500hzRhtContra")!=null) {
										srt500hzRhtContra = box.getInt("srt500hzRhtContra");
									}
									
									Integer srt500hzRhtIpsi=null;
									if (box.getString("srt500hzRhtIpsi")!=null) {
										srt500hzRhtIpsi = box.getInt("srt500hzRhtIpsi");
									}
									
									String srtOtherTests=null;
									if (box.getString("srtOtherTests")!=null) {
										srtOtherTests = box.getString("srtOtherTests");
									}
									
									String testedBy=null;
									if (box.getString("testedBy")!=null) {
										testedBy = box.getString("testedBy");
									}
									
									String testNo=null;
									if (box.getString("testNo")!=null) {
										testNo = box.getString("testNo");
									}
									
									Integer tympEarCvLeft=null;
									if (box.getString("tympEarCvLeft")!=null) {
										tympEarCvLeft = box.getInt("tympEarCvLeft");
									}
									
									Integer tympEarCvRight=null;
									if (box.getString("tympEarCvRight")!=null) {
										tympEarCvRight = box.getInt("tympEarCvRight");
									}
									
									Integer tympMidEarPreLft=null;
									if (box.getString("tympMidEarPreLft")!=null) {
										tympMidEarPreLft = box.getInt("tympMidEarPreLft");
									}
									
									Integer tympMidEarPreRht=null;
									if (box.getString("tympMidEarPreRht")!=null) {
										tympMidEarPreRht = box.getInt("tympMidEarPreRht");
									}
									
									Integer tympStaticComLft=null;
									if (box.getString("tympStaticComLft")!=null) {
										tympStaticComLft = box.getInt("tympStaticComLft");
									}
									
									Integer tympStaticComRht=null;
									if (box.getString("tympStaticComRht")!=null) {
										tympStaticComRht = box.getInt("tympStaticComRht");
									} 
									
									String tympTypeLft=null;
									if (box.getString("tympTypeLft")!=null) {
										tympTypeLft = box.getString("tympTypeLft");
									}
									
									String tympTypeRht=null;
									if (box.getString("tympTypeRht")!=null) {
										tympTypeRht = box.getString("tympTypeRht");
									}
									//ent chnages
									String rightAudiogram=null;
									if (box.getString("right_audiogram")!=null) {
										rightAudiogram = box.getString("right_audiogram");
									}
									String rightAudiogramValue=null;
									if (box.getString("right_dropdown")!=null) {
										rightAudiogramValue = box.getString("right_dropdown");
									}																	
									
									String leftAudiogram=null;
									if (box.getString("left_audiogram")!=null) {
										leftAudiogram = box.getString("left_audiogram");
									}
									
									String leftAudiogramValue=null;
									if (box.getString("left_dropdown")!=null) {
										leftAudiogramValue = box.getString("left_dropdown");
									}
									
									String rightOtherText=null;
									if (box.getString("right_otherText")!=null) {
										rightOtherText = box.getString("right_otherText");
									}
									String leftOtherText=null;
									if (box.getString("left_otherText")!=null) {
										leftOtherText = box.getString("left_otherText");
									}
									
									
									opdAudiologicalExamEntSpeciality.setRightAudiogram(rightAudiogram);
									opdAudiologicalExamEntSpeciality.setLeftAudiogram(leftAudiogram);
									opdAudiologicalExamEntSpeciality.setRightAudiogramValue(rightAudiogramValue);
									opdAudiologicalExamEntSpeciality.setLeftAudiogramValue(leftAudiogramValue);
									opdAudiologicalExamEntSpeciality.setRightAudiogramOthersValue(rightOtherText);
									opdAudiologicalExamEntSpeciality.setLeftAudiogramOthersValue(leftOtherText);
									// Ent changes End
									opdAudiologicalExamEntSpeciality.setVisitId(visitId);					
									opdAudiologicalExamEntSpeciality.setAge(age);  
									opdAudiologicalExamEntSpeciality.setAudiogramLeft(audiogramLeft);  
									opdAudiologicalExamEntSpeciality.setAudiogramRight(audiogramRight);  
									opdAudiologicalExamEntSpeciality.setAudiometer(audiometer); 
									opdAudiologicalExamEntSpeciality.setCaseName(caseName);   
									opdAudiologicalExamEntSpeciality.setCaseNo(caseNo);  
									opdAudiologicalExamEntSpeciality.setGender(gender);  
									opdAudiologicalExamEntSpeciality.setPtaDbLeft(ptaDbLeft);  
									opdAudiologicalExamEntSpeciality.setPtaDbRight(ptaDbRight);  
									opdAudiologicalExamEntSpeciality.setRemarks(remarks); 
									opdAudiologicalExamEntSpeciality.setSrt1khzLftContra(srt1khzLftContra);  
									opdAudiologicalExamEntSpeciality.setSrt1khzLftIpsi(srt1khzLftIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt1khzRhtContra(srt1khzRhtContra);  
									opdAudiologicalExamEntSpeciality.setSrt1khzRhtIpsi(srt1khzRhtIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt2khzLftContra(srt2khzLftContra);  
									opdAudiologicalExamEntSpeciality.setSrt2khzLftIpsi(srt2khzLftIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt2khzRhtContra(srt2khzRhtContra);  
									opdAudiologicalExamEntSpeciality.setSrt2khzRhtIpsi(srt2khzRhtIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt4khzLftContra(srt4khzLftContra);  
									opdAudiologicalExamEntSpeciality.setSrt4khzLftIpsi(srt4khzLftIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt4khzRhtContra(srt4khzRhtContra);   
									opdAudiologicalExamEntSpeciality.setSrt4khzRhtIpsi(srt4khzRhtIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt500hzLftContra(srt500hzLftContra);  
									opdAudiologicalExamEntSpeciality.setSrt500hzLftIpsi(srt500hzLftIpsi);  
									opdAudiologicalExamEntSpeciality.setSrt500hzRhtContra(srt500hzRhtContra);  
									opdAudiologicalExamEntSpeciality.setSrt500hzRhtIpsi(srt500hzRhtIpsi);  
									opdAudiologicalExamEntSpeciality.setSrtOtherTests(srtOtherTests);  
									opdAudiologicalExamEntSpeciality.setTestedBy(testedBy);   
									opdAudiologicalExamEntSpeciality.setTestNo(testNo);  
									opdAudiologicalExamEntSpeciality.setTympEarCvLeft(tympEarCvLeft);  
									opdAudiologicalExamEntSpeciality.setTympEarCvRight(tympEarCvRight);  
									opdAudiologicalExamEntSpeciality.setTympMidEarPreLft(tympMidEarPreLft);  
									opdAudiologicalExamEntSpeciality.setTympMidEarPreRht(tympMidEarPreRht); 
									opdAudiologicalExamEntSpeciality.setTympStaticComLft(tympStaticComLft);  
									opdAudiologicalExamEntSpeciality.setTympStaticComRht(tympStaticComRht);  
									opdAudiologicalExamEntSpeciality.setTympTypeLft(tympTypeLft);
									opdAudiologicalExamEntSpeciality.setTympTypeRht(tympTypeRht);												 		
									hbt.saveOrUpdate(opdAudiologicalExamEntSpeciality);
								map.put("opdAudiologicalExamEntSpeciality",opdAudiologicalExamEntSpeciality);
							tx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
								return map;
							}					 
					    //ended by swarup

						//added by abhishek 24/11/2017-begin
					    @Override
						public Map<String, Object> showNephrologyCaseSheetJsp(Map<String, Object> reqParaMap) {
								List<NephrologyCaseSheet> NephrologyCaseSheetlist = new ArrayList<NephrologyCaseSheet>();
								Map<String, Object> map = new HashMap();
								Session session = (Session)getSession();
								List<Visit> patientList = new ArrayList<Visit>();
								List<DgResultEntryHeader> internalLabTestList = new ArrayList<DgResultEntryHeader>();
								List<ExternalLabReportCommon> externalLabListCommon = new ArrayList();
								Map<String, Object> reqParaMap1 = new HashMap<String, Object>();
								String patientName = null;
								String gender = null;
								int hinId = 0;
								int visitId=0;
								String templateFlag = "Nephrology";
								List<OpdPatientDetails> opdPatientDetails = new ArrayList<OpdPatientDetails>();
								NephrologyCaseSheet nephrologyCaseSheet=new NephrologyCaseSheet();
								try{
									
									if(reqParaMap.get("hinId")!=null){
										hinId =((Integer) reqParaMap.get("hinId")); 
									}
									
									if(reqParaMap.get("visitId")!=null){
										visitId =((Integer) reqParaMap.get("visitId")); 
									}
									if(reqParaMap.get("patientName")!=null){
										patientName =(String) reqParaMap.get("patientName");
									}
									
									patientList =session.createCriteria(Visit.class)
											  .createAlias("Hin", "h")
											  .add(Restrictions.eq("h.Id", hinId))	
											 .add(Restrictions.eq("Id", visitId))
											 .addOrder(Order.desc("Id")).list();	
									
									Object[] selectedStatus = {"V","Y"};
									
									internalLabTestList= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")								
											.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
											.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
									
									externalLabListCommon =session.createCriteria(ExternalLabReportCommon.class)
										      .createAlias("Hin", "h")
										      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
										      .add(Restrictions.eq("TemplateName", templateFlag)).add(Restrictions.isNull("SubInvestigation.Id"))
										      .list();
										  
									
									}catch(HibernateException he){}						
								map.put("patientList", patientList);
								map.put("internalLabTestList", internalLabTestList);
								map.put("externalLabListCommon", externalLabListCommon);
								
								return map;
						}
					    //endded by abhishek
					    
		 //added by abhishek 24/11/2017-begin
					    @Override
						public Map<String, Object> saveNephrologyCaseSheetJsp(Box box) {
					    	
					    	List<Visit> patientList = new ArrayList<Visit>();
							Map<String,Object> map = new HashMap<String,Object>();
							try{
								Session session = (Session) getSession();
								Transaction tx=session.beginTransaction();
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);
								
								NephrologyCaseSheet nephrologyCaseSheet = new NephrologyCaseSheet();
								
								 Integer visitId=null;
									if (box.get("visitId")!=null) {
										visitId = box.getInt("visitId");
									}
									
									Integer hinId=null;
									if (box.getString("hinId")!=null) {
										hinId = box.getInt("hinId");
									}
									
									String chestPainDetails=null;
									if (box.getString("chestPainDetails")!=null) {
										chestPainDetails = box.getString("chestPainDetails");
									}
									
									String chestPainDuration=null;
									if (box.getString("chestPainDuration")!=null) {
										chestPainDuration = box.getString("chestPainDuration");
									}
									
									String derangedRftDetails=null;
									if (box.getString("derangedRftDetails")!=null) {
										derangedRftDetails = box.getString("derangedRftDetails");
									}
									
									String derangedRftDuration=null;
									if (box.getString("derangedRftDuration")!=null) {
										derangedRftDuration = box.getString("derangedRftDuration");
									}
									
									String presentingIllnessOthersRemark=null;
									if (box.getString("presentingIllnessOthersRemark")!=null) {
										presentingIllnessOthersRemark = box.getString("presentingIllnessOthersRemark");
									}
									
									String dysuriaDetails=null;
									if (box.getString("dysuriaDetails")!=null) {
										dysuriaDetails = box.getString("dysuriaDetails");
									}
									
									String dysuriaDuration=null;
									if (box.getString("dysuriaDuration")!=null) {
										dysuriaDuration = box.getString("dysuriaDuration");
									}
									
									String edmaFacialDetails=null;
									if (box.getString("edmaFacialDetails")!=null) {
										edmaFacialDetails = box.getString("edmaFacialDetails");
									}
									
									String edmaFacialDuration=null;
									if (box.getString("edmaFacialDuration")!=null) {
										edmaFacialDuration = box.getString("edmaFacialDuration");
									}
									
									String familyHistoryChronicKidenyDisease=null;
									if (box.getString("familyHistoryChronicKidenyDisease")!=null) {
										familyHistoryChronicKidenyDisease = box.getString("familyHistoryChronicKidenyDisease");
									}
									
									String familyHistoryChronicKidneyDiseaseRemark=null;
									if (box.getString("familyHistoryChronicKidneyDiseaseRemark")!=null) {
											familyHistoryChronicKidneyDiseaseRemark = box.getString("familyHistoryChronicKidneyDiseaseRemark");
									}
									
									String familyHistoryChronicLiverDisease=null;
									if (box.getString("familyHistoryChronicLiverDisease")!=null) {
										familyHistoryChronicLiverDisease = box.getString("familyHistoryChronicLiverDisease");
									}
									
									String frothingDetails=null;
									if (box.getString("frothingDetails")!=null) {
										frothingDetails = box.getString("frothingDetails");
									}
									
									String frothingDuraton=null;
									if (box.getString("frothingDuraton")!=null) {
										frothingDuraton = box.getString("frothingDuraton");
									}
									
									String hermaturiaCoffeeColouredDetails=null;
									if (box.getString("hermaturiaCoffeeColouredDetails")!=null) {
										hermaturiaCoffeeColouredDetails = box.getString("hermaturiaCoffeeColouredDetails");
									}
									
									String hermaturiaCoffeeColouredDuration=null;
									if (box.getString("hermaturiaCoffeeColouredDuration")!=null) {
										hermaturiaCoffeeColouredDuration = box.getString("hermaturiaCoffeeColouredDuration");
									}
									
									String hermaturiaPainfulDetails=null;
									if (box.getString("hermaturiaPainfulDetails")!=null) {
										hermaturiaPainfulDetails = box.getString("hermaturiaPainfulDetails");
									}
									
									String hermaturiaPainfulDuration=null;
									if (box.getString("hermaturiaPainfulDuration")!=null) {
										hermaturiaPainfulDuration = box.getString("hermaturiaPainfulDuration");
									}
									
									String hin=null;
									if (box.getString("hin")!=null) {
										hin = box.getString("hin");
									}
									
									String lastChgBy=null;
									if (box.getString("lastChgBy")!=null) {
										lastChgBy = box.getString("lastChgBy");
									}
									
									/*String lastChgDate=null;
									if (box.getString("lastChgDate")!=null) {
										lastChgDate = box.getString("lastChgDate");
									}
									
									String lastChgTime=null;
									if (box.getString("lastChgTime")!=null) {
										lastChgTime = box.getString("lastChgTime");
									}*/
									
									String lithuriaDetails=null;
									if (box.getString("lithuriaDetails")!=null) {
										lithuriaDetails = box.getString("lithuriaDetails");
									}
									
									String lithuriaDuration=null;
									if (box.getString("lithuriaDuration")!=null) {
										lithuriaDuration = box.getString("lithuriaDuration");
									}
									
									String menorrhagiaRemarks=null;
									if (box.getString("menorrhagiaRemarks")!=null) {
										menorrhagiaRemarks = box.getString("menorrhagiaRemarks");
									}
									
									String oliguriaDetails=null;
									if (box.getString("oliguriaDetails")!=null) {
										oliguriaDetails = box.getString("oliguriaDetails");
									}

									String oliguriaDuration=null;
									if (box.getString("oliguriaDuration")!=null) {
										oliguriaDuration = box.getString("oliguriaDuration");
									}
									
									String pastHistory=null;
									if (box.getString("pastHistory")!=null) {
										pastHistory = box.getString("pastHistory");
									}
									
									String pastHistoryRemark=null;
									if (box.getString("pastHistoryRemark")!=null) {
										pastHistoryRemark = box.getString("pastHistoryRemark");
									}
									
									String presentingIllnessOthers=null;
									if (box.getString("presentingIllnessOthers")!=null) {
										presentingIllnessOthers = box.getString("presentingIllnessOthers");
									}
									
									String dysmenorrheaRemarks=null;
									if (box.getString("dysmenorrheaRemarks")!=null) {
										dysmenorrheaRemarks = box.getString("dysmenorrheaRemarks");
									}
									
									String visualSymptomsDetails=null;
									if (box.getString("visualSymptomsDetails")!=null) {
										visualSymptomsDetails = box.getString("visualSymptomsDetails");
									}
									
									String visualSymptomsDuration=null;
									if (box.getString("visualSymptomsDuration")!=null) {
										visualSymptomsDuration = box.getString("visualSymptomsDuration");
									}
									
									String vomatingBiliousDetails=null;
									if (box.getString("vomatingBiliousDetails")!=null) {
										vomatingBiliousDetails = box.getString("vomatingBiliousDetails");
									}
									
									String vomatingBiliousDuration=null;
									if (box.getString("vomatingBiliousDuration")!=null) {
										vomatingBiliousDuration = box.getString("vomatingBiliousDuration");
									}
									
									String vomatingBloodVomitusDetails=null;
									if (box.getString("vomatingBloodVomitusDetails")!=null) {
										vomatingBloodVomitusDetails = box.getString("vomatingBloodVomitusDetails");
									}
									
									String vomatingBloodVomitusDuration=null;
									if (box.getString("vomatingBloodVomitusDuration")!=null) {
										vomatingBloodVomitusDuration = box.getString("vomatingBloodVomitusDuration");
									}
									
									String abdominalPainDetails=null;
									if (box.getString("abdominalPainDetails")!=null) {
										abdominalPainDetails = box.getString("abdominalPainDetails");
									}
									
									String abdominalPainDuration=null;
									if (box.getString("abdominalPainDuration")!=null) {
										abdominalPainDuration = box.getString("abdominalPainDuration");
									}
									
									String breathlessnessNyhaClass=null;
									if (box.getString("breathlessnessNyhaClass")!=null) {
										breathlessnessNyhaClass = box.getString("breathlessnessNyhaClass");
									}
									
									String breathlessnessNyhaClassDetails=null;
									if (box.getString("breathlessnessNyhaClassDetails")!=null) {
										breathlessnessNyhaClassDetails = box.getString("breathlessnessNyhaClassDetails");
									}
									
									String breathlessnessNyhaClassDuration=null;
									if (box.getString("breathlessnessNyhaClassDuration")!=null) {
										breathlessnessNyhaClassDuration = box.getString("breathlessnessNyhaClassDuration");
									}
									
									String breathlessnessNyhaClassOrthopnea=null;
									if (box.getString("breathlessnessNyhaClassOrthopnea")!=null) {
										breathlessnessNyhaClassOrthopnea = box.getString("breathlessnessNyhaClassOrthopnea");
									}
									
									String capd=null;
									if (box.getString("capd")!=null) {
										capd = box.getString("capd");
									}
									
									String chestRemark=null;
									if (box.getString("chestRemark")!=null) {
										chestRemark = box.getString("chestRemark");
									}
									
									String chronicNotOnMhd=null;
									if (box.getString("chronicNotOnMhd")!=null) {
										chronicNotOnMhd = box.getString("chronicNotOnMhd");
									}
									
									String chronicOnMhd=null;
									if (box.getString("chronicOnMhd")!=null) {
										chronicOnMhd = box.getString("chronicOnMhd");
									}

									String ckdDetails=null;
									if (box.getString("ckdDetails")!=null) {
										ckdDetails = box.getString("ckdDetails");
									}
									
									String ckdDuartion=null;
									if (box.getString("ckdDuartion")!=null) {
										ckdDuartion = box.getString("ckdDuartion");
									}
									
									String clubbing=null;
									if (box.getString("clubbing")!=null) {
										clubbing = box.getString("clubbing");
									}
									
									String cnsFindings=null;
									if (box.getString("cnsFindings")!=null) {
										cnsFindings = box.getString("cnsFindings");
									}
									
									String hemoptysisDuration=null;
									if (box.getString("hemoptysisDuration")!=null) {
										hemoptysisDuration = box.getString("hemoptysisDuration");
									}
									
									String cvsRemark=null;
									if (box.getString("cvsRemark")!=null) {
										cvsRemark = box.getString("cvsRemark");
									}
									
									String cyanosis=null;
									if (box.getString("cyanosis")!=null) {
										cyanosis = box.getString("cyanosis");
									}
									
									String edema=null;
									if (box.getString("edema")!=null) {
										edema = box.getString("edema");
									}

									String edmaPedalDetails=null;
									if (box.getString("edmaPedalDetails")!=null) {
										edmaPedalDetails = box.getString("edmaPedalDetails");
									}
								
									String edmaPedalDuration=null;
									if (box.getString("edmaPedalDuration")!=null) {
										edmaPedalDuration = box.getString("edmaPedalDuration");
									}
									
									String bpNephro=null;
									if (box.getString("bpNephro")!=null) {
										bpNephro = box.getString("bpNephro");
									}
									
									String anamia=null;
									if (box.getString("anamia")!=null) {
										anamia = box.getString("anamia");
									}
									
									String bmiNephro=null;
									if (box.getString("bmiNephro")!=null) {
										bmiNephro = box.getString("bmiNephro");
									}
									
									String personalHistoryRemark=null;
									if (box.getString("personalHistoryRemark")!=null) {
										personalHistoryRemark = box.getString("personalHistoryRemark");
									}
									
									String hemoptysisDetails=null;
									if (box.getString("hemoptysisDetails")!=null) {
										hemoptysisDetails = box.getString("hemoptysisDetails");
									}
									
									String fitnessProcedureDuration=null;
									if (box.getString("fitnessProcedureDuration")!=null) {
										fitnessProcedureDuration = box.getString("fitnessProcedureDuration");
									}
									
									String fitnessProcedureDetails=null;
									if (box.getString("fitnessProcedureDetails")!=null) {
										fitnessProcedureDetails = box.getString("fitnessProcedureDetails");
									}
									
									String feverIntermittentDuration=null;
									if (box.getString("feverIntermittentDuration")!=null) {
										feverIntermittentDuration = box.getString("feverIntermittentDuration");
									}
									
									String feverIntermittentDetails=null;
									if (box.getString("feverIntermittentDetails")!=null) {
										feverIntermittentDetails = box.getString("feverIntermittentDetails");
									}
									
									String feverChillsRigorsDuration=null;
									if (box.getString("feverChillsRigorsDuration")!=null) {
										feverChillsRigorsDuration = box.getString("feverChillsRigorsDuration");
									}
									
									String feverChillsRigorsDetails=null;
									if (box.getString("feverChillsRigorsDetails")!=null) {
										feverChillsRigorsDetails = box.getString("feverChillsRigorsDetails");
									}
									
									String pruritusDuration=null;
									if (box.getString("pruritusDuration")!=null) {
										pruritusDuration = box.getString("pruritusDuration");
									}
									
									String pruritusDetails=null;
									if (box.getString("pruritusDetails")!=null) {
										pruritusDetails = box.getString("pruritusDetails");
									}
									
									String headacheDuration=null;
									if (box.getString("headacheDuration")!=null) {
										headacheDuration = box.getString("headacheDuration");
									}
									
									String headacheDetails=null;
									if (box.getString("headacheDetails")!=null) {
										headacheDetails = box.getString("headacheDetails");
									}
									
									String hypertensionDuration=null;
									if (box.getString("hypertensionDuration")!=null) {
										hypertensionDuration = box.getString("hypertensionDuration");
									}
									
									String hypertensionDetails=null;
									if (box.getString("hypertensionDetails")!=null) {
										hypertensionDetails = box.getString("hypertensionDetails");
									}
									
									String srCreatinine=null;
									if (box.getString("srCreatinine")!=null) {
										srCreatinine = box.getString("srCreatinine");
									}
									
									String coughDuration=null;
									if (box.getString("coughDuration")!=null) {
										coughDuration = box.getString("coughDuration");
									}
									
									String coughDetails=null;
									if (box.getString("coughDetails")!=null) {
										coughDetails = box.getString("coughDetails");
									}
									
									String transplantation=null;
									if (box.getString("transplantation")!=null) {
										transplantation = box.getString("transplantation");
									}
									
									String lutsNocturiaDuration=null;
									if (box.getString("lutsNocturiaDuration")!=null) {
										lutsNocturiaDuration = box.getString("lutsNocturiaDuration");
									}
									
									String lutsNocturiaDetails=null;
									if (box.getString("lutsNocturiaDetails")!=null) {
										lutsNocturiaDetails = box.getString("lutsNocturiaDetails");
									}
									
									String lutsObstructedDuration=null;
									if (box.getString("lutsObstructedDuration")!=null) {
										lutsObstructedDuration = box.getString("lutsObstructedDuration");
									}
									
									String lutsObstructedDetails=null;
									if (box.getString("lutsObstructedDetails")!=null) {
										lutsObstructedDetails = box.getString("lutsObstructedDetails");
									}
									
									String lutsFrequencyDuration=null;
									if (box.getString("lutsFrequencyDuration")!=null) {
										lutsFrequencyDuration = box.getString("lutsFrequencyDuration");
									}
									
									String lutsFrequencyDetails=null;
									if (box.getString("lutsFrequencyDetails")!=null) {
										lutsFrequencyDetails = box.getString("lutsFrequencyDetails");
									}
									
									String lutsUrgencyDuration=null;
									if (box.getString("lutsUrgencyDuration")!=null) {
										lutsUrgencyDuration = box.getString("lutsUrgencyDuration");
									}
									
									String lutsUrgencyDetails=null;
									if (box.getString("lutsUrgencyDetails")!=null) {
										lutsUrgencyDetails = box.getString("lutsUrgencyDetails");
									}
									
									String pARemarlks=null;
									if (box.getString("pARemarlks")!=null) {
										pARemarlks = box.getString("pARemarlks");
									}
									
									String jvp=null;
									if (box.getString("jvp")!=null) {
										jvp = box.getString("jvp");
									}
									
									String jvpRaised=null;
									if (box.getString("jvpRaised")!=null) {
										jvpRaised = box.getString("jvpRaised");
									}
									
									String lymphadenopathy=null;
									if (box.getString("lymphadenopathy")!=null) {
										lymphadenopathy = box.getString("lymphadenopathy");
									}
									
									String jaundice=null;
									if (box.getString("jaundice")!=null) {
										jaundice = box.getString("jaundice");
									}
									
									String respiratoryRate=null;
									if (box.getString("respiratoryRate")!=null) {
										respiratoryRate = box.getString("respiratoryRate");
									}
									
									String temperatureNephro=null;
									if (box.getString("temperatureNephro")!=null) {
										temperatureNephro = box.getString("temperatureNephro");
									}
									
									String waistCircum=null;
									if (box.getString("waistCircum")!=null) {
										waistCircum = box.getString("waistCircum");
									}
									
									String weightNephro=null;
									if (box.getString("weightNephro")!=null) {
										weightNephro = box.getString("weightNephro");
									}
									
									String heightNephro=null;
									if (box.getString("heightNephro")!=null) {
										heightNephro = box.getString("heightNephro");
									}
									
									String lastChgDate=null;
									if (box.getString("lastChgDate")!=null) {
										lastChgDate = box.getString("lastChgDate");
									}
									
									String lastChgTime=null;
									if (box.getString("lastChgTime")!=null) {
										lastChgTime = box.getString("lastChgTime");
									}
									
									String opticFunds=null;
									if (box.getString("opticFunds")!=null) {
										opticFunds = box.getString("opticFunds");
									}
									
									if (!box.getString("OthersString").equals("")) {
										nephrologyCaseSheet.setOthers(box.getString("OthersString"));
									}
									
									if (!box.getString("pastHistoryString").equals("")) {
										nephrologyCaseSheet.setPastHistory(box.getString("pastHistoryString"));
									}
									
									if (!box.getString("personalHistoryString").equals("")) {
										nephrologyCaseSheet.setPersonalHistory(box.getString("personalHistoryString"));
									}
									
									if (!box.getString("pAString").equals("")) {
										nephrologyCaseSheet.setPA(box.getString("pAString"));
									}
									
									if (!box.getString("cvsString").equals("")) {
										nephrologyCaseSheet.setCvs(box.getString("cvsString"));
									}
									
									if (!box.getString("chestString").equals("")) {
										nephrologyCaseSheet.setChest(box.getString("chestString"));
									}
									
									nephrologyCaseSheet.setVisitId(visitId);					
									nephrologyCaseSheet.setChestPainDetails(chestPainDetails); 
									nephrologyCaseSheet.setChestPainDuration(chestPainDuration);
									nephrologyCaseSheet.setDerangedRftDetails(derangedRftDetails);
									nephrologyCaseSheet.setDerangedRftDuration(derangedRftDuration);								
									nephrologyCaseSheet.setPresentingIllnessOthersRemark(presentingIllnessOthersRemark);
									nephrologyCaseSheet.setDysuriaDetails(dysuriaDetails);
									nephrologyCaseSheet.setDysuriaDuration(dysuriaDuration);
									nephrologyCaseSheet.setEdmaFacialDetails(edmaFacialDetails);
									nephrologyCaseSheet.setEdmaFacialDuration(edmaFacialDuration);
									nephrologyCaseSheet.setFamilyHistoryChronicKidenyDisease(familyHistoryChronicKidenyDisease);
									nephrologyCaseSheet.setFamilyHistoryChronicKidneyDiseaseRemark(familyHistoryChronicKidneyDiseaseRemark);
									nephrologyCaseSheet.setFamilyHistoryChronicLiverDisease(familyHistoryChronicLiverDisease);
									nephrologyCaseSheet.setFrothingDetails(frothingDetails);
									nephrologyCaseSheet.setFrothingDuraton(frothingDuraton);
									nephrologyCaseSheet.setHermaturiaCoffeeColouredDetails(hermaturiaCoffeeColouredDetails);
									nephrologyCaseSheet.setHermaturiaCoffeeColouredDuration(hermaturiaCoffeeColouredDuration);
									nephrologyCaseSheet.setHermaturiaPainfulDetails(hermaturiaPainfulDetails);
									nephrologyCaseSheet.setHermaturiaPainfulDuration(hermaturiaPainfulDuration);
									//nephrologyCaseSheet.setHin(hin);
									//nephrologyCaseSheet.setLastChgBy(lastChgBy);
									//nephrologyCaseSheet.setLastChgDate(lastChgDate);
									nephrologyCaseSheet.setLastChgTime(lastChgTime);
									nephrologyCaseSheet.setLithuriaDetails(lithuriaDetails);
									nephrologyCaseSheet.setLithuriaDuration(lithuriaDuration);
									nephrologyCaseSheet.setMenorrhagiaRemarks(menorrhagiaRemarks);
									nephrologyCaseSheet.setOliguriaDetails(oliguriaDetails);
									nephrologyCaseSheet.setOliguriaDuration(oliguriaDuration);
									//nephrologyCaseSheet.setPastHistory(pastHistory);
									nephrologyCaseSheet.setPastHistoryRemark(pastHistoryRemark);//
									//nephrologyCaseSheet.setPersonalHistory(personalHistory);
									nephrologyCaseSheet.setPersonalHistoryRemark(personalHistoryRemark);
									nephrologyCaseSheet.setPresentingIllnessOthers(presentingIllnessOthers);
									nephrologyCaseSheet.setDysmenorrheaRemarks(dysmenorrheaRemarks);
									nephrologyCaseSheet.setVisitId(visitId);
									nephrologyCaseSheet.setVisualSymptomsDetails(visualSymptomsDetails);
									nephrologyCaseSheet.setVisualSymptomsDuration(visualSymptomsDuration);
									nephrologyCaseSheet.setVomatingBiliousDetails(vomatingBiliousDetails);
									nephrologyCaseSheet.setVomatingBiliousDuration(vomatingBiliousDuration);
									nephrologyCaseSheet.setVomatingBloodVomitusDetails(vomatingBloodVomitusDetails);
									nephrologyCaseSheet.setVomatingBloodVomitusDuration(vomatingBloodVomitusDuration);
									nephrologyCaseSheet.setAbdominalPainDetails(abdominalPainDetails);
									nephrologyCaseSheet.setAbdominalPainDuration(abdominalPainDuration);
									nephrologyCaseSheet.setAnamia(anamia);
									nephrologyCaseSheet.setBreathlessnessNyhaClass(breathlessnessNyhaClass);
									nephrologyCaseSheet.setBreathlessnessNyhaClassDetails(breathlessnessNyhaClassDetails);
									nephrologyCaseSheet.setBreathlessnessNyhaClassDuration(breathlessnessNyhaClassDuration);
									nephrologyCaseSheet.setBreathlessnessNyhaClassOrthopnea(breathlessnessNyhaClassOrthopnea);
									nephrologyCaseSheet.setCapd(capd);
									//nephrologyCaseSheet.setChest(chest);
									nephrologyCaseSheet.setChestPainDetails(chestPainDetails);
									nephrologyCaseSheet.setChestPainDuration(chestPainDuration);
									nephrologyCaseSheet.setChestRemark(chestRemark);
									nephrologyCaseSheet.setChronicNotOnMhd(chronicNotOnMhd);
									nephrologyCaseSheet.setChronicOnMhd(chronicOnMhd);
									nephrologyCaseSheet.setCkdDetails(ckdDetails);
									nephrologyCaseSheet.setCkdDuartion(ckdDuartion);
									nephrologyCaseSheet.setClubbing(clubbing);
									nephrologyCaseSheet.setCnsFindings(cnsFindings);
									nephrologyCaseSheet.setHemoptysisDuration(hemoptysisDuration);
									nephrologyCaseSheet.setHemoptysisDetails(hemoptysisDetails);
									//nephrologyCaseSheet.setCvs(cvs);
									nephrologyCaseSheet.setCvsRemark(cvsRemark);
									nephrologyCaseSheet.setCyanosis(cyanosis);
									nephrologyCaseSheet.setDerangedRftDetails(derangedRftDetails);
									nephrologyCaseSheet.setDerangedRftDuration(derangedRftDuration);
									nephrologyCaseSheet.setEdema(edema);
									nephrologyCaseSheet.setEdmaFacialDetails(edmaFacialDetails);
									nephrologyCaseSheet.setEdmaFacialDuration(edmaFacialDuration);
									nephrologyCaseSheet.setEdmaPedalDetails(edmaPedalDetails);
									nephrologyCaseSheet.setEdmaPedalDuration(edmaPedalDuration);
									nephrologyCaseSheet.setFitnessProcedureDuration(fitnessProcedureDuration);
									nephrologyCaseSheet.setFitnessProcedureDetails(fitnessProcedureDetails);
									nephrologyCaseSheet.setFeverIntermittentDuration(feverIntermittentDuration);
									nephrologyCaseSheet.setFeverIntermittentDetails(feverIntermittentDetails);
									nephrologyCaseSheet.setFeverChillsRigorsDuration(feverChillsRigorsDuration);
									nephrologyCaseSheet.setFeverChillsRigorsDetails(feverChillsRigorsDetails);
									nephrologyCaseSheet.setPruritusDuration(pruritusDuration);
									nephrologyCaseSheet.setPruritusDetails(pruritusDetails);
									nephrologyCaseSheet.setHeadacheDuration(headacheDuration);
									nephrologyCaseSheet.setHeadacheDetails(headacheDetails);
									nephrologyCaseSheet.setHypertensionDuration(hypertensionDuration);
									nephrologyCaseSheet.setHypertensionDetails(hypertensionDetails);
									nephrologyCaseSheet.setSrCreatinine(srCreatinine);
									nephrologyCaseSheet.setCoughDuration(coughDuration);
									nephrologyCaseSheet.setCoughDetails(coughDetails);
									nephrologyCaseSheet.setTransplantation(transplantation);
									nephrologyCaseSheet.setLutsNocturiaDuration(lutsNocturiaDuration);
									nephrologyCaseSheet.setLutsNocturiaDetails(lutsNocturiaDetails);
									nephrologyCaseSheet.setLutsObstructedDuration(lutsObstructedDuration);
									nephrologyCaseSheet.setLutsObstructedDetails(lutsObstructedDetails);
									nephrologyCaseSheet.setLutsFrequencyDuration(lutsFrequencyDuration);
									nephrologyCaseSheet.setLutsFrequencyDetails(lutsFrequencyDetails);
									nephrologyCaseSheet.setLutsUrgencyDuration(lutsUrgencyDuration);
									nephrologyCaseSheet.setLutsUrgencyDetails(lutsUrgencyDetails);
									//nephrologyCaseSheet.setPA(pA);
									nephrologyCaseSheet.setPARemarlks(pARemarlks);
									//nephrologyCaseSheet.setCvs(cvs);
									nephrologyCaseSheet.setCvsRemark(cvsRemark);
									//nephrologyCaseSheet.setChest(chest);
									nephrologyCaseSheet.setChestRemark(chestRemark);
									nephrologyCaseSheet.setJvp(jvp);
									nephrologyCaseSheet.setJvpRaised(jvpRaised);
									nephrologyCaseSheet.setLymphadenopathy(lymphadenopathy);
									nephrologyCaseSheet.setJaundice(jaundice);
									nephrologyCaseSheet.setCyanosis(cyanosis);
									nephrologyCaseSheet.setAnamia(anamia);
									nephrologyCaseSheet.setRespiratoryRate(respiratoryRate);
									nephrologyCaseSheet.setTemperature(temperatureNephro);
									nephrologyCaseSheet.setBp(bpNephro);
									nephrologyCaseSheet.setWaistCircum(waistCircum);
									nephrologyCaseSheet.setBmi(bmiNephro);
									nephrologyCaseSheet.setWeight(weightNephro);
									nephrologyCaseSheet.setHeight(heightNephro);
									//nephrologyCaseSheet.setpulse
									nephrologyCaseSheet.setDysmenorrheaRemarks(dysmenorrheaRemarks);
									nephrologyCaseSheet.setMenorrhagiaRemarks(menorrhagiaRemarks);
									nephrologyCaseSheet.setOpticFunds(opticFunds);
									//nephrologyCaseSheet.setOthers(others);
									 
									hbt.saveOrUpdate(nephrologyCaseSheet);
								map.put("nephrologyCaseSheet",nephrologyCaseSheet);
							tx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
								return map;
							}
					    
					    
					    
					    public Map<String, Object> saveGynecologyCaseSheet(Map<String, Object> mapForDS,Box box) {
							Map<String,Object> map = new HashMap<String,Object>();
							OpdGynecologyCaseSheet opdGynecologyCaseSheet = new OpdGynecologyCaseSheet();  
							try{
								
								Session session = (Session) getSession();
								Transaction tx=session.beginTransaction();
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);
										
								int hospitalId=0;
								if (box.getInt("hospitalId") != 0){
									hospitalId = box.getInt("hospitalId");
								}
								
								int opdPatientDetailId = 0;;
								if (box.getInt("opdPatientDetailId") != 0){
									opdPatientDetailId = box.getInt("opdPatientDetailId");
								}
								int hinId=0;
								if(box.getInt("hinId") !=0){
									hinId=box.getInt("hinId");	
								}
								int visitId = 0;
								if(box.getInt("visitId") !=0){
									visitId=box.getInt("visitId");	
								}
								
								List<OpdGynecologyCaseSheet> opdGynecologyCaseSheetList = new ArrayList<OpdGynecologyCaseSheet>();
								opdGynecologyCaseSheetList=session.createCriteria(OpdGynecologyCaseSheet.class).createAlias("OpdPatientDetails", "opd")
										.add(Restrictions.eq("opd.Id",opdPatientDetailId)).list();
								if(opdGynecologyCaseSheetList.size()>0)
								{			
									int gynecologyCaseSheetId =0;
									for(OpdGynecologyCaseSheet onr:opdGynecologyCaseSheetList){
									
										gynecologyCaseSheetId = onr.getId();
									}
									opdGynecologyCaseSheet = (OpdGynecologyCaseSheet)hbt.load(OpdGynecologyCaseSheet.class, gynecologyCaseSheetId);
									
									if(box.getString("presentComplaints") != null && !box.getString("presentComplaints").equals("")){
										opdGynecologyCaseSheet.setPresentComplaints(box.getString("presentComplaints"));
										}else{
											opdGynecologyCaseSheet.setPresentComplaints("");
										}
									
									if(box.getString("historyOfPresentIllness") != null && !box.getString("historyOfPresentIllness").equals("")){
										opdGynecologyCaseSheet.setHistoryOfPresentIllness(box.getString("historyOfPresentIllness"));
										}else{
											opdGynecologyCaseSheet.setHistoryOfPresentIllness("");
										}
									
									
									if(box.getString("historyOfPresentIllness") != null && !box.getString("historyOfPresentIllness").equals("")){
										opdGynecologyCaseSheet.setHistoryOfPresentIllness(box.getString("historyOfPresentIllness"));
										}else{
											opdGynecologyCaseSheet.setHistoryOfPresentIllness("");
										}
									
									
									if(box.getString("historyMenarche") != null && !box.getString("historyMenarche").equals("")){
										opdGynecologyCaseSheet.setMenarche(box.getString("historyOfPresentIllness"));
										}else{
											opdGynecologyCaseSheet.setMenarche("");
										}
									
									
									if(box.getString("dysmenorrhoea") != null && !box.getString("dysmenorrhoea").equals("")){
										opdGynecologyCaseSheet.setDysmenorrhoea(box.getString("dysmenorrhoea"));
										}else{
											opdGynecologyCaseSheet.setDysmenorrhoea("");
										}
									
									
									if(box.getString("lmpOne") != null && !box.getString("lmpOne").equals("")){
										opdGynecologyCaseSheet.setLmpOne(HMSUtil.convertStringTypeDateToDateType(box.getString("lmpOne")));
										}
									
									if(box.getString("lmpTwo") != null && !box.getString("lmpTwo").equals("")){
										opdGynecologyCaseSheet.setLmpTwo(HMSUtil.convertStringTypeDateToDateType(box.getString("lmpTwo")));
									}
									if(box.getString("menopause") != null && !box.getString("menopause").equals("")){
										opdGynecologyCaseSheet.setMenopause(box.getString("menopause"));
										}else{
											opdGynecologyCaseSheet.setMenopause("");
										}
									
									
									
									if(box.getString("maritralAndObstetricsHistory") != null && !box.getString("maritralAndObstetricsHistory").equals("")){
										opdGynecologyCaseSheet.setMaritalObstetricsHistory(box.getString("maritralAndObstetricsHistory"));
										}else{
											opdGynecologyCaseSheet.setMaritalObstetricsHistory("");
										}
									

									if(box.getString("htn") != null && !box.getString("htn").equals("")){
										opdGynecologyCaseSheet.setHtn(box.getString("htn"));
										}else{
											opdGynecologyCaseSheet.setHtn("");
										}
									
									if(box.getString("htn") != null && !box.getString("htn").equals("")){
										opdGynecologyCaseSheet.setHtn(box.getString("htn"));
										}else{
											opdGynecologyCaseSheet.setHtn("");
										}
									
									
									if(box.getString("diabetes") != null && !box.getString("diabetes").equals("")){
										opdGynecologyCaseSheet.setDiabetes(box.getString("diabetes"));
										}else{
											opdGynecologyCaseSheet.setDiabetes("");
										}
									
									
									if(box.getString("renalDisease") != null && !box.getString("renalDisease").equals("")){
										opdGynecologyCaseSheet.setRenalDisease(box.getString("renalDisease"));
										}else{
											opdGynecologyCaseSheet.setHtn("");
										}
									
									
									if(box.getString("bronchialAsthma") != null && !box.getString("bronchialAsthma").equals("")){
										opdGynecologyCaseSheet.setBoronchialAsthma(box.getString("bronchialAsthma"));
										}else{
											opdGynecologyCaseSheet.setBoronchialAsthma("");
										}
									
									
									if(box.getString("angina") != null && !box.getString("angina").equals("")){
										opdGynecologyCaseSheet.setAngina(box.getString("angina"));
										}else{
											opdGynecologyCaseSheet.setAngina("");
										}
									
									

									if(box.getString("mi") != null && !box.getString("mi").equals("")){
										opdGynecologyCaseSheet.setMi(box.getString("mi"));
										}else{
											opdGynecologyCaseSheet.setMi("");
										}
									
									

									if(box.getString("allergies") != null && !box.getString("allergies").equals("")){
										opdGynecologyCaseSheet.setAllergies(box.getString("allergies"));
										}else{
											opdGynecologyCaseSheet.setAllergies("");
										}
									

									if(box.getString("drugs") != null && !box.getString("drugs").equals("")){
										opdGynecologyCaseSheet.setDrugs(box.getString("drugs"));
										}else{
											opdGynecologyCaseSheet.setDrugs("");
										}
									
									

									if(box.getString("otherSpecify") != null && !box.getString("otherSpecify").equals("")){
										opdGynecologyCaseSheet.setOtherSpecify(box.getString("otherSpecify"));
										}else{
											opdGynecologyCaseSheet.setOtherSpecify("");
										}
									
									
									if(box.getString("surgicalHistory") != null && !box.getString("surgicalHistory").equals("")){
										opdGynecologyCaseSheet.setSurgicalHistory(box.getString("surgicalHistory"));
										}else{
											opdGynecologyCaseSheet.setSurgicalHistory("");
										}
									
									
									if(box.getString("familyHistory") != null && !box.getString("familyHistory").equals("")){
										opdGynecologyCaseSheet.setFamilyHistory(box.getString("familyHistory"));
										}else{
											opdGynecologyCaseSheet.setFamilyHistory("");
										}
									
									
									if(box.getString("generalExam") != null && !box.getString("generalExam").equals("")){
										opdGynecologyCaseSheet.setGeneralExam(box.getString("generalExam"));
										}else{
											opdGynecologyCaseSheet.setGeneralExam("");
										}
									
									
									if(box.getString("localExamination") != null && !box.getString("localExamination").equals("")){
										opdGynecologyCaseSheet.setLocalExamination(box.getString("localExamination"));
										}else{
											opdGynecologyCaseSheet.setLocalExamination("");
										}
									
									
									if(box.getString("pa") != null && !box.getString("pa").equals("")){
										opdGynecologyCaseSheet.setPa(box.getString("pa"));
										}else{
											opdGynecologyCaseSheet.setPa("");
										}
									
									
									if(box.getString("ps") != null && !box.getString("ps").equals("")){
										opdGynecologyCaseSheet.setPs(box.getString("ps"));
										}else{
											opdGynecologyCaseSheet.setPs("");
										}
									
									
									
									
									
									if(box.getString("pv") != null && !box.getString("pv").equals("")){
										opdGynecologyCaseSheet.setPv(box.getString("pv"));
										}else{
											opdGynecologyCaseSheet.setPv("");
										}
									
									
									
									
									if(box.getString("pr") != null && !box.getString("pr").equals("")){
										opdGynecologyCaseSheet.setPr(box.getString("pr"));
										}else{
											opdGynecologyCaseSheet.setPr("");
										}
									
									
									
									if(box.getString("services") != null && !box.getString("services").equals("")){
										opdGynecologyCaseSheet.setServices(box.getString("services"));
										}else{
											opdGynecologyCaseSheet.setServices("");
										}
									
									
									if(box.getString("followUp") != null && !box.getString("followUp").equals("")){
										opdGynecologyCaseSheet.setFollowUp(box.getString("followUp"));
										}else{
											opdGynecologyCaseSheet.setFollowUp("");
										}

									if(box.getString("onValue") != null && !box.getString("onValue").equals("")){
										opdGynecologyCaseSheet.setOnValue(box.getString("onValue"));
										}else{
											opdGynecologyCaseSheet.setOnValue("");
										}
									

									if(box.getString("signedBy") != null && !box.getString("signedBy").equals("")){
										opdGynecologyCaseSheet.setSignedBy(box.getString("signedBy"));
										}else{
											opdGynecologyCaseSheet.setSignedBy("");
										}
									OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
									opdPatientDetails.setId(opdPatientDetailId);
									opdGynecologyCaseSheet.setOpdPatientDetails(opdPatientDetails);
									
									opdGynecologyCaseSheet.setHin(new Patient(hinId));
									
									hbt.update(opdGynecologyCaseSheet);
									hbt.refresh(opdGynecologyCaseSheet);
								}else{
									
									
									
									
									if(box.getString("presentComplaints") != null && !box.getString("presentComplaints").equals("")){
										opdGynecologyCaseSheet.setPresentComplaints(box.getString("presentComplaints"));
										}else{
											opdGynecologyCaseSheet.setPresentComplaints("");
										}
									
									if(box.getString("historyOfPresentIllness") != null && !box.getString("historyOfPresentIllness").equals("")){
										opdGynecologyCaseSheet.setHistoryOfPresentIllness(box.getString("historyOfPresentIllness"));
										}else{
											opdGynecologyCaseSheet.setHistoryOfPresentIllness("");
										}
									
									
									if(box.getString("historyOfPresentIllness") != null && !box.getString("historyOfPresentIllness").equals("")){
										opdGynecologyCaseSheet.setHistoryOfPresentIllness(box.getString("historyOfPresentIllness"));
										}else{
											opdGynecologyCaseSheet.setHistoryOfPresentIllness("");
										}
									
									
									if(box.getString("historyMenarche") != null && !box.getString("historyMenarche").equals("")){
										opdGynecologyCaseSheet.setMenarche(box.getString("historyOfPresentIllness"));
										}else{
											opdGynecologyCaseSheet.setMenarche("");
										}
									
									
									if(box.getString("dysmenorrhoea") != null && !box.getString("dysmenorrhoea").equals("")){
										opdGynecologyCaseSheet.setDysmenorrhoea(box.getString("dysmenorrhoea"));
										}else{
											opdGynecologyCaseSheet.setDysmenorrhoea("");
										}
									
									
									if(box.getString("lmpOne") != null && !box.getString("lmpOne").equals("")){
										opdGynecologyCaseSheet.setLmpOne(HMSUtil.convertStringTypeDateToDateType(box.getString("lmpOne")));
										}
									
									if(box.getString("lmpTwo") != null && !box.getString("lmpTwo").equals("")){
										opdGynecologyCaseSheet.setLmpTwo(HMSUtil.convertStringTypeDateToDateType(box.getString("lmpTwo")));
									}
									if(box.getString("menopause") != null && !box.getString("menopause").equals("")){
										opdGynecologyCaseSheet.setMenopause(box.getString("menopause"));
										}else{
											opdGynecologyCaseSheet.setMenopause("");
										}
									
									
									
									if(box.getString("maritralAndObstetricsHistory") != null && !box.getString("maritralAndObstetricsHistory").equals("")){
										opdGynecologyCaseSheet.setMaritalObstetricsHistory(box.getString("maritralAndObstetricsHistory"));
										}else{
											opdGynecologyCaseSheet.setMaritalObstetricsHistory("");
										}
									

									if(box.getString("htn") != null && !box.getString("htn").equals("")){
										opdGynecologyCaseSheet.setHtn(box.getString("htn"));
										}else{
											opdGynecologyCaseSheet.setHtn("");
										}
									
									if(box.getString("tb") != null && !box.getString("tb").equals("")){
										opdGynecologyCaseSheet.setTb(box.getString("tb"));
										}else{
											opdGynecologyCaseSheet.setTb("");
										}
									
									
									if(box.getString("diabetes") != null && !box.getString("diabetes").equals("")){
										opdGynecologyCaseSheet.setDiabetes(box.getString("diabetes"));
										}else{
											opdGynecologyCaseSheet.setDiabetes("");
										}
									
									
									if(box.getString("renalDisease") != null && !box.getString("renalDisease").equals("")){
										opdGynecologyCaseSheet.setRenalDisease(box.getString("renalDisease"));
										}else{
											opdGynecologyCaseSheet.setRenalDisease("");
										}
									
									
									if(box.getString("bronchialAsthma") != null && !box.getString("bronchialAsthma").equals("")){
										opdGynecologyCaseSheet.setBoronchialAsthma(box.getString("bronchialAsthma"));
										}else{
											opdGynecologyCaseSheet.setBoronchialAsthma("");
										}
									
									
									if(box.getString("angina") != null && !box.getString("angina").equals("")){
										opdGynecologyCaseSheet.setAngina(box.getString("angina"));
										}else{
											opdGynecologyCaseSheet.setAngina("");
										}
									
									

									if(box.getString("mi") != null && !box.getString("mi").equals("")){
										opdGynecologyCaseSheet.setMi(box.getString("mi"));
										}else{
											opdGynecologyCaseSheet.setMi("");
										}
									
									

									if(box.getString("allergies") != null && !box.getString("allergies").equals("")){
										opdGynecologyCaseSheet.setAllergies(box.getString("allergies"));
										}else{
											opdGynecologyCaseSheet.setAllergies("");
										}
									

									if(box.getString("drugs") != null && !box.getString("drugs").equals("")){
										opdGynecologyCaseSheet.setDrugs(box.getString("drugs"));
										}else{
											opdGynecologyCaseSheet.setDrugs("");
										}
									

									if(box.getString("others") != null && !box.getString("others").equals("")){
										opdGynecologyCaseSheet.setOthers(box.getString("others"));
										}else{
											opdGynecologyCaseSheet.setOthers("");
										}

									if(box.getString("otherSpecify") != null && !box.getString("otherSpecify").equals("")){
										opdGynecologyCaseSheet.setOtherSpecify(box.getString("otherSpecify"));
										}else{
											opdGynecologyCaseSheet.setOtherSpecify("");
										}
									
									
									if(box.getString("surgicalHistory") != null && !box.getString("surgicalHistory").equals("")){
										opdGynecologyCaseSheet.setSurgicalHistory(box.getString("surgicalHistory"));
										}else{
											opdGynecologyCaseSheet.setSurgicalHistory("");
										}
									
									
									if(box.getString("familyHistoryAnother") != null && !box.getString("familyHistoryAnother").equals("")){
										opdGynecologyCaseSheet.setFamilyHistory(box.getString("familyHistoryAnother"));
										}else{
											opdGynecologyCaseSheet.setFamilyHistory("");
										}
									
									
									if(box.getString("generalExam") != null && !box.getString("generalExam").equals("")){
										opdGynecologyCaseSheet.setGeneralExam(box.getString("generalExam"));
										}else{
											opdGynecologyCaseSheet.setGeneralExam("");
										}
									
									if(box.getString("menstrualCycle") != null && !box.getString("menstrualCycle").equals("")){
										opdGynecologyCaseSheet.setMenstrualCycle(box.getString("menstrualCycle"));
										}else{
											opdGynecologyCaseSheet.setMenstrualCycle("");
										}
									
									
									
									
									if(box.getString("localExaminationAnother") != null && !box.getString("localExaminationAnother").equals("")){
										opdGynecologyCaseSheet.setLocalExamination(box.getString("localExaminationAnother"));
										}else{
											opdGynecologyCaseSheet.setLocalExamination("");
										}
									
									
									if(box.getString("pa") != null && !box.getString("pa").equals("")){
										opdGynecologyCaseSheet.setPa(box.getString("pa"));
										}else{
											opdGynecologyCaseSheet.setPa("");
										}
									
									
									if(box.getString("ps") != null && !box.getString("ps").equals("")){
										opdGynecologyCaseSheet.setPs(box.getString("ps"));
										}else{
											opdGynecologyCaseSheet.setPs("");
										}
									
									
									
									
									
									if(box.getString("pv") != null && !box.getString("pv").equals("")){
										opdGynecologyCaseSheet.setPv(box.getString("pv"));
										}else{
											opdGynecologyCaseSheet.setPv("");
										}
									
									
									
									
									if(box.getString("pr") != null && !box.getString("pr").equals("")){
										opdGynecologyCaseSheet.setPr(box.getString("pr"));
										}else{
											opdGynecologyCaseSheet.setPr("");
										}
									
									
									
									if(box.getString("services") != null && !box.getString("services").equals("")){
										opdGynecologyCaseSheet.setServices(box.getString("services"));
										}else{
											opdGynecologyCaseSheet.setServices("");
										}
									
									
									if(box.getString("followUp") != null && !box.getString("followUp").equals("")){
										opdGynecologyCaseSheet.setFollowUp(box.getString("followUp"));
										}else{
											opdGynecologyCaseSheet.setFollowUp("");
										}

									if(box.getString("onValue") != null && !box.getString("onValue").equals("")){
										opdGynecologyCaseSheet.setOnValue(box.getString("onValue"));
										}else{
											opdGynecologyCaseSheet.setOnValue("");
										}
									

									if(box.getString("signedBy") != null && !box.getString("signedBy").equals("")){
										opdGynecologyCaseSheet.setSignedBy(box.getString("signedBy"));
										}else{
											opdGynecologyCaseSheet.setSignedBy("");
										}
									OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
									opdPatientDetails.setId(opdPatientDetailId);
									opdGynecologyCaseSheet.setOpdPatientDetails(opdPatientDetails);
									
									opdGynecologyCaseSheet.setHin(new Patient(hinId));
									hbt.save(opdGynecologyCaseSheet);
								}
												

								
								
					
								tx.commit();
								map.put("opdGynecologyCaseSheet",opdGynecologyCaseSheet); 
							
							}catch(Exception e){
								e.printStackTrace();
							}
							return map;
							}
					    

						@Override
						public Map<String, Object> showDermatologyLeprosyProformaJsp(
								Map<String, Object> requestParametersMap) {
							/*List<DgResultEntryHeader>labResultForLeprosyPerforma = new ArrayList<DgResultEntryHeader>();*/
							Map<String, Object> map = new HashMap<String, Object>();
							List<OpdDermatologicalLeprosyExamination> opdDermLpsyProExm= new ArrayList<OpdDermatologicalLeprosyExamination>();
							List<OpdDermatologicalNerveExamination> opdDermLpsyProNerveExm= new ArrayList<OpdDermatologicalNerveExamination>();
							List<Object[]> previousComplaintList = new ArrayList<Object[]>();
							List<Object[]> historyList = new ArrayList<Object[]>();
							Session session = (Session) getSession();
							
							Calendar cal = Calendar.getInstance();
							Date currentDate =cal.getTime();
							cal.add(Calendar.DATE, -30);
							Date lastVisitDate =cal.getTime();
							int deptId = 0;
							 
							int hinId = ((Integer)requestParametersMap.get("hinId"));
							deptId = (Integer)requestParametersMap.get("deptId");
							/*Object[] selectedStatus = {"V","Y"};
							labResultForLeprosyPerforma= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
									.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
									.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
							
							map.put("labResultForLeprosyPerforma",labResultForLeprosyPerforma);	*/
							
							/*String complaintSql = "select presenting_complaints,duration,duration_parameter from opd_dermatology_leprosy_proforma dl "
									+ "join opd_patient_details opd on (opd.id= dl.opd_patient_details) "
									+ "where dl.hin_id="+hinId+" and  opd.opd_date > current_date - interval '30' day order by opd.opd_date asc;";*/
							
							String complaintSql = "select opd.opd_date,presenting_complaints,duration,duration_parameter "
									+ "from opd_dermatology_leprosy_proforma dl "
									+ "join opd_patient_details opd on (opd.id= dl.opd_patient_details) "
									+ "join visit vs on (vs.visit_id=opd.visit_id) join mas_department md on (md.department_id=vs.department_id)"
									+ " where dl.hin_id="+hinId+" and md.department_id="+deptId+" and opd.opd_date > current_date - interval '30' day order by opd.opd_date desc;";
							previousComplaintList= session.createSQLQuery(complaintSql).list();
							map.put("previousComplaintListLeprosy",previousComplaintList);
							
							
							/*String historySql = "select tb,hypertension,diabetes,cardiac,hepatic,renal,past_history_others, past_history_others_value,"
									+ "history_of_epistaxis,epistaxis_present_relation, family_history_of_leprosy family_history_relation,family_member_affected,"
									+ "history_of_leprosy_neighbours,leprosy_neighbours_value,previous_history_of_leprosy,treatment_of_leprosy_present_value,opd.opd_date "
									+ "from opd_dermatology_leprosy_proforma dl join opd_patient_details opd on (opd.id= dl.opd_patient_details) where dl.hin_id="+hinId+" and  opd.opd_date > current_date - interval '30' day"
											+ " order by opd.opd_date asc"; */
							
							String historySql = "select opd.opd_date,tb,hypertension,diabetes,cardiac,hepatic,renal,past_history_others, past_history_others_value,history_of_epistaxis,epistaxis_present_relation, "
									+ "family_history_of_leprosy, family_history_relation,family_member_affected,history_of_leprosy_neighbours,"
									+ "leprosy_neighbours_value,previous_history_of_leprosy,treatment_of_leprosy_present_value "
									+ "from opd_dermatology_leprosy_proforma dl join opd_patient_details opd on (opd.id= dl.opd_patient_details) "
									+ "join visit vs on (vs.visit_id=opd.visit_id) join mas_department md on (md.department_id=vs.department_id) "
									+ "where dl.hin_id="+hinId+" and md.department_id="+deptId+" and opd.opd_date > current_date - interval '30' day order by opd.opd_date desc;";
							historyList= session.createSQLQuery(historySql).list();
							map.put("historyList",historyList);
							opdDermLpsyProExm=session.createCriteria(OpdDermatologicalLeprosyExamination.class)
									.createAlias("LeprosyProforma", "lp")
									.createAlias("lp.OpdPatientDetails", "opd")									
									.createAlias("lp.Hin", "h")
									.createAlias("opd.Visit", "v")
									.createAlias("v.Department", "md")
									.add(Restrictions.eq("h.Id", hinId))
									.add(Restrictions.eq("md.Id", deptId))
									.add(Restrictions.between("opd.OpdDate", lastVisitDate, currentDate))
									.addOrder(Order.desc("opd.OpdDate"))
									.list();
							
							opdDermLpsyProNerveExm=session.createCriteria(OpdDermatologicalNerveExamination.class)
									.createAlias("LeprosyProforma", "lp")
									.createAlias("lp.OpdPatientDetails", "opd")
									.createAlias("lp.Hin", "h")
									.createAlias("opd.Visit", "v")
									.createAlias("v.Department", "md")
									.add(Restrictions.eq("h.Id", hinId))
									.add(Restrictions.eq("md.Id", deptId))
									.add(Restrictions.between("opd.OpdDate", lastVisitDate, currentDate))
									.addOrder(Order.desc("opd.OpdDate"))
									.list();
							map.put("opdDermLpsyProExm", opdDermLpsyProExm);
							map.put("opdDermLpsyProNerveExm", opdDermLpsyProNerveExm);
							return map;
						}

						
				
						
						@Override
						public Map<String, Object> showOutSideResultEntryDermotology(
								Map<String, Object> requestParametersMap) {
							
							List<DgSampleCollectionDetails> dgSampleCollectionDetails= new ArrayList<DgSampleCollectionDetails>();
							List<OpdTemplate> templateListForInvestigation = new ArrayList<OpdTemplate>();
							List<OpdTemplate> templateListForInvestigationInstituteWise = new ArrayList<OpdTemplate>();
							Map<String, Object> map = new HashMap<String, Object>();
							String from = "";
							Session session = (Session) getSession();
							int deptId = 0;
							int hospitalId= 0;
							String templateFlag = "";
							
							if(requestParametersMap.get("templateFlag")!=null){
								templateFlag = ((String)requestParametersMap.get("templateFlag"));
								}
							if(requestParametersMap.get("deptId")!=null){
							 deptId = ((Integer)requestParametersMap.get("deptId"));
							}
							
							if(requestParametersMap.get("hospitalId") != null){
							 hospitalId = ((Integer)requestParametersMap.get("hospitalId"));
							}
							int hinId = ((Integer)requestParametersMap.get("hinId"));
							int visitId = ((Integer)requestParametersMap.get("visitId"));
							from = (String)requestParametersMap.get("from");
						
							dgSampleCollectionDetails = session.createCriteria(DgSampleCollectionDetails.class)
									.createAlias("SampleCollectionHeader", "sampleCollectionHeader")
									.createAlias("sampleCollectionHeader.Order", "orderhd")
									.createAlias("orderhd.Hin", "hin")
									.createAlias("orderhd.Visit", "visit")
									.add(Restrictions.eq("hin.Id", hinId))
									.add(Restrictions.eq("visit.Id", visitId))
									.add(Restrictions.eq("sampleCollectionHeader.OrderStatus", "P").ignoreCase())
									.addOrder(Order.asc("ChargeCode.Id"))
									.list();
							map.put("dgSampleCollectionDetails", dgSampleCollectionDetails);
							
							List<DgOrderdt> dgOrderdts= new ArrayList<DgOrderdt>();
							dgOrderdts = session.createCriteria(DgOrderdt.class)
									.createAlias("Orderhd", "orderhd")
									.createAlias("orderhd.Hin", "hin")
									.createAlias("orderhd.Visit", "visit")
									.add(Restrictions.eq("orderhd.OrderDate", new Date()))
									.add(Restrictions.eq("orderhd.OrderStatus", "p").ignoreCase())
									.add(Restrictions.eq("visit.Id", visitId))
									.add(Restrictions.eq("hin.Id", hinId))
									.addOrder(Order.asc("ChargeCode.Id"))
									.list();
							map.put("dgOrderdts", dgOrderdts);
							
							List<PatientInvestigationDetails> patientInvestigationDetails= new ArrayList<PatientInvestigationDetails>();
							patientInvestigationDetails = session.createCriteria(PatientInvestigationDetails.class)
									.createAlias("InvestigationHeader","pih")
									.createAlias("pih.Hin", "hin")
									.createAlias("pih.Visit", "visit")
									.add(Restrictions.eq("hin.Id", hinId))
									.add(Restrictions.eq("visit.Id", visitId))
									.addOrder(Order.asc("ChargeCode.Id"))
									.list();
							map.put("patientInvestigationDetails", patientInvestigationDetails);
							
							templateListForInvestigation = session.createCriteria(OpdTemplate.class).createAlias("Department", "dept")
									.add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.isNull("Hospital.Id")).add(Restrictions.isNull("templateLocal")).list();
							//.add(Restrictions.eq("dept.Id", deptId)).list();


							templateListForInvestigationInstituteWise = session.createCriteria(OpdTemplate.class)
									//.createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.isNull("templateLocal")).list();
							        .createAlias("Department", "dept").add(Restrictions.eq("dept.Id", deptId)).list();

							templateListForInvestigation.addAll(templateListForInvestigationInstituteWise); 
							map.put("templateListForInvestigation", templateListForInvestigation);
							//code to display lab result
							if(hinId != 0 && templateFlag != null){
							List<ExternalLabReportCommon> externalLabListCommon = new ArrayList();

						    externalLabListCommon = session.createCriteria(ExternalLabReportCommon.class)
						      .createAlias("Hin", "h")
						      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
						      .add(Restrictions.eq("TemplateName", templateFlag)).add(Restrictions.isNull("SubInvestigation.Id"))
						      .list();
						    map.put("externalLabListCommon", externalLabListCommon);
						    
					         List<CommonLabTestReport> commonLabTestReports = new ArrayList();
							
							int labResultSize=0;
							labResultSize = externalLabListCommon.size();	
							if(externalLabListCommon.size() > 0)
							{
								for(ExternalLabReportCommon externalList:externalLabListCommon){
									CommonLabTestReport commonLabTestReport = new CommonLabTestReport();
									commonLabTestReport.setResultDate(externalList.getTestDate() != null?externalList.getTestDate().toString():"");
									commonLabTestReport.setResultTime(externalList.getTestTime() != null?externalList.getTestTime().toString():"");
									commonLabTestReport.setTestName(externalList.getTestName());
									commonLabTestReport.setTestResult(externalList.getTestResult() != null?externalList.getTestResult():"");
									commonLabTestReport.setTestStatus(externalList.getResultStatus());
									commonLabTestReport.setInvestigationId(externalList.getInvestigation().getId());
									commonLabTestReports.add(commonLabTestReport);
								}
								
							}	
							
							Collections.sort(commonLabTestReports, new ComparatorForLabTestDate());
							
							Set<String> testdate = new HashSet<String>();
							for(CommonLabTestReport externalListTemp : commonLabTestReports) {
								testdate.add(externalListTemp.getResultDate());
								}
							List<String> sortedTestdate = new ArrayList<String>(testdate);
							Collections.sort(sortedTestdate);
							
							//test time
							Set<String> testTime = new HashSet<String>();
							for(CommonLabTestReport externalListTemp : commonLabTestReports) {
								testTime.add(externalListTemp.getResultTime());
								}
							List<String> sortedTestTime = new ArrayList<String>(testTime);
							Collections.sort(sortedTestTime);
							//
							Map<String,List<CommonLabTestReport>> commonLabTestReportsMap = new HashMap<String,List<CommonLabTestReport>>();
							List<CommonLabTestReport> testsObjList = null ;
							for(CommonLabTestReport externalListTemp : commonLabTestReports) {
								String testName = externalListTemp.getTestName();
								if(commonLabTestReportsMap.containsKey(testName)){
									testsObjList = commonLabTestReportsMap.get(testName);
								}else{
									testsObjList = new ArrayList<CommonLabTestReport>();
								}
								 testsObjList.add(externalListTemp);
								 commonLabTestReportsMap.put(testName,testsObjList);
								   
							}
						    
							 map.put("commonLabTestReportsMap", commonLabTestReportsMap);
							 map.put("sortedTestdate", sortedTestdate);
							 map.put("sortedTestTime", sortedTestTime);
							}
							map.put("visitId", visitId);
							map.put("hinId", hinId);
							map.put("templateFlag", templateFlag);
							
							
							
							
							// End lab result
							
							return map;
						}

						
						@Override
						public Map<String, Object> showDermatologyGeneralProformaJsp(
								Map<String, Object> requestParametersMap) {

							Map<String, Object> map = new HashMap();
						    Session session = (Session)getSession();
						    List<Object[]> generalProformaHeadersList = new ArrayList<Object[]>();  
						    List<OpdGeneralProformaHeader> dermogeneralProformaHeadersList = new ArrayList<OpdGeneralProformaHeader>(); 
						    List<OpdGeneralProformaDetail> dermogeneralProformaDetailsList = new ArrayList<OpdGeneralProformaDetail>(); 
						    List<OpdGeneralProformaDetail> dermogeneralProformaDetailsListSecond = new ArrayList<OpdGeneralProformaDetail>(); 
						    List<OpdPatientDetails> opdPatDetailsList = new ArrayList<OpdPatientDetails>(); 
						    List<Object[]> firstLesionList = new ArrayList<Object[]>();
						    List<Object[]> secondLesionList = new ArrayList<Object[]>();
						    List<Object[]> findingLesionList = new ArrayList<Object[]>();
						   /* List<DgResultEntryHeader>labResultForLeprosyPerforma = new ArrayList<DgResultEntryHeader>();*/
						    
						    int hinId = (Integer)requestParametersMap.get("hinId");
						    int visitId = (Integer)requestParametersMap.get("visitId");
						    int deptId = (Integer)requestParametersMap.get("deptId");
						    
						    map.put("hinId", hinId);
						    map.put("visitId", visitId);
						    
						  
						     String sql1 ="select opd.opd_date,gh.presenting_complaint_value, gh.presenting_complaints_others_value,gh.duration_of_illness,past_history_value,past_history_others_value,family_history,family_history_value,drug_history,drug_history_value "
						    		+ "from opd_general_proforma_header gh join opd_patient_details opd on (opd.id= gh.opd_patient_details) "
						    		+ "join visit vs on (vs.visit_id=opd.visit_id) "
						    		+ "join mas_department md on (md.department_id=vs.department_id) "
						    		+ "where gh.hin_id="+hinId+" and md.department_id="+deptId+" and opd.opd_date > current_date - interval '30' day order by opd.opd_date asc;";
						    generalProformaHeadersList =  session.createSQLQuery(sql1).list();
						    map.put("generalProformaHeadersList", generalProformaHeadersList); 
						    
						 	 
						    String firstLesionSQl = "select opd.opd_date,pd.parameter_name,pd.number,pd.site,pd.type_of_lesion,pd.pigmentation_status,pd.pigmentation,pd.charcter,"
						    		+ "pd.border,pd.surface,pd.smallest_size, pd.largest_size,pd.hair_on_lesion,pd.aggravating_factor,"
						    		+ "secondary_lesion_other from opd_general_proforma_detail pd  "
						    		+ "join opd_general_proforma_header gh on (gh.general_proforma_id=pd.general_proforma_id) "
						    		+ "join opd_patient_details opd on (opd.id= gh.opd_patient_details) join visit vs on (vs.visit_id=opd.visit_id) "
						    		+ "join mas_department md on (md.department_id=vs.department_id) "
						    		+ "where gh.hin_id="+hinId+" and md.department_id="+deptId+" and pd.flag='Primary Lesion' and  opd.opd_date > current_date - interval '30' day order by opd.opd_date asc;";
						    
						    firstLesionList = session.createSQLQuery(firstLesionSQl).list();
						    
						    map.put("firstLesionList", firstLesionList);
						    
						  
						   String secondLesionSQl = "select opd.opd_date,pd.parameter_name,pd.number,pd.site,pd.type_of_lesion,pd.pigmentation_status,pd.pigmentation,pd.charcter,"
						    		+ "pd.border,pd.surface,pd.smallest_size, pd.largest_size,pd.hair_on_lesion,pd.aggravating_factor,"
						    		+ "secondary_lesion_other from opd_general_proforma_detail pd  "
						    		+ "join opd_general_proforma_header gh on (gh.general_proforma_id=pd.general_proforma_id) "
						    		+ "join opd_patient_details opd on (opd.id= gh.opd_patient_details) join visit vs on (vs.visit_id=opd.visit_id) "
						    		+ "join mas_department md on (md.department_id=vs.department_id) "
						    		+ "where gh.hin_id="+hinId+" and md.department_id="+deptId+" and pd.flag='Secondary Lesion' and  opd.opd_date > current_date - interval '30' day order by opd.opd_date asc;";
						    secondLesionList = session.createSQLQuery(firstLesionSQl).list();
						    
						    map.put("secondLesionList", secondLesionList); 
						    
						   
						    String findingsSql = "select opd.opd_date, distribution,mucous_menbrane_value,mucous_menbrane_others_value,hair_value,hair_others_value,nails_value,nails_others_value,system_illness_value,system_illness_others_value,signs_value,signs_others_value "
						    		+ "from opd_general_proforma_header gh join opd_patient_details opd on (opd.id= gh.opd_patient_details) "
						    		+ "join visit vs on (vs.visit_id=opd.visit_id) join mas_department md on (md.department_id=vs.department_id) "
						    		+ "where gh.hin_id="+hinId+" and md.department_id="+deptId+" and opd.opd_date > current_date - interval '30' day order by opd.opd_date asc;";
						    findingLesionList= session.createSQLQuery(findingsSql).list();
						    
						    map.put("findingLesionList", findingLesionList); 
							 
							/*Object[] selectedStatus = {"V","Y"};
							labResultForLeprosyPerforma= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
									.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
									.add(Restrictions.eq("mcc.MainChargecodeCode", "LAB")).add(Restrictions.eq("pt.Id", hinId)).list();
							
							map.put("labResultForLeprosyPerforma",labResultForLeprosyPerforma);	*/
							
							dermogeneralProformaHeadersList = session.createCriteria(OpdGeneralProformaHeader.class)
									.createAlias("OpdPatientDetails", "OPD")
									.createAlias("OPD.Visit", "OV")
									.add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("OV.Id", visitId))
									.addOrder(Order.desc("Id"))
									.setMaxResults(1)
									.list();
							int proFormaId=0;
							if(dermogeneralProformaHeadersList.size()>0)
							proFormaId=dermogeneralProformaHeadersList.get(0).getId();
							map.put("dermogeneralProformaHeadersList",dermogeneralProformaHeadersList);	
							
							dermogeneralProformaDetailsList = session.createCriteria(OpdGeneralProformaDetail.class)
									.createAlias("GeneralProforma", "GP")
									.createAlias("GP.Hin", "H")
									.add(Restrictions.eq("H.Id",hinId))
									.add(Restrictions.eq("GP.Id",proFormaId) )
									.add(Restrictions.eq("Flag","Primary Lesion") )
									.list();
							
							
							dermogeneralProformaDetailsListSecond = session.createCriteria(OpdGeneralProformaDetail.class)
									.createAlias("GeneralProforma", "GP")
									.createAlias("GP.Hin", "H")
									.add(Restrictions.eq("H.Id",hinId))
									.add(Restrictions.eq("GP.Id",proFormaId) )
									.add(Restrictions.eq("Flag","Secondary Lesion") )
									.list();
							
							map.put("dermogeneralProformaDetailsList",dermogeneralProformaDetailsList);
							map.put("dermogeneralProformaDetailsListSecond",dermogeneralProformaDetailsListSecond);
							
							
							
							opdPatDetailsList =  session.createCriteria(OpdPatientDetails.class)
									             .add(Restrictions.eq("Visit.Id",visitId)).list();
									             
							map.put("opdPatDetailsList",opdPatDetailsList);	
							
						    
				 		return map;
						}
						
					

						@Override
						public Map<String, Object> saveOutSideResultEntryForDermotology(
								Map<String, Object> requestParametersMap) {
							Map<String, Object> map = new HashMap();
						    List<ExternalLabReportCommon> testList = new ArrayList();
						    HibernateTemplate hbt = getHibernateTemplate();
						    hbt.setFlushModeName("FLUSH_EAGER");
						    hbt.setCheckWriteOperations(false);
						    List testNameList = new ArrayList();
							List <Integer> investigationIdList = new ArrayList <Integer>();
							List testResultList = new ArrayList();
							List testDateList = new ArrayList();
							List testTimeList = new ArrayList();
							List resultStatList = new ArrayList();
							List <Integer>subInvsetigationIdList = new ArrayList<Integer>();
						    boolean saved = false;
						    int visitId = 0;
						    int hinId = 0;
						    int hospitalId = 0;
						    String templateName="";
						    String subDate="";
						    String testTime="";
						    String lastValidTime = "00:00";
						    if (requestParametersMap.get("visitId") != null) {
						    	visitId = (Integer)requestParametersMap.get("visitId");
						    }
						    if (requestParametersMap.get("hinId") != null) {
						    	hinId = (Integer)requestParametersMap.get("hinId");
						    }
						    if (requestParametersMap.get("hospitalId") != null) {
						    	hospitalId = (Integer)requestParametersMap.get("hospitalId");
						    }
						    if (requestParametersMap.get("testNameList") != null) {
						    	testNameList = (List)requestParametersMap.get("testNameList");
						    }
						   
						    if (requestParametersMap.get("investigationIdList") != null) {
						    	investigationIdList = (List)requestParametersMap.get("investigationIdList");
						    }
						    if (requestParametersMap.get("testResultList") != null) {
						    	testResultList = (List)requestParametersMap.get("testResultList");
						    }
						    if (requestParametersMap.get("testDateList") != null) {
						    	testDateList = (List)requestParametersMap.get("testDateList");
						    }
						    if (requestParametersMap.get("testTimeList") != null) {
						    	testTimeList = (List)requestParametersMap.get("testTimeList");
						    }
						    if (requestParametersMap.get("subInvsetigationIdList") != null) {
						    	subInvsetigationIdList = (List)requestParametersMap.get("subInvsetigationIdList");
						    }
						    if (requestParametersMap.get("resultStatList") != null) {
						    	resultStatList = (List)requestParametersMap.get("resultStatList");
						    }
						    if (requestParametersMap.get("templateName") != null) {
						    	templateName = (String)requestParametersMap.get("templateName");
						    }
						    try {					      
						    	for (int i = 0; i <testNameList.size(); i++)
						    	{
						    		if(!testNameList.get(i).equals("")) {
						    			ExternalLabReportCommon externalLabReportCommon = new ExternalLabReportCommon();

						    			externalLabReportCommon.setTestName(testNameList.get(i).toString());

						    			if(investigationIdList.get(i)!= 0){
						    				DgMasInvestigation masinv = new DgMasInvestigation();
						    				masinv.setId(Integer.parseInt(investigationIdList.get(i).toString()));

						    				externalLabReportCommon.setInvestigation(masinv); 
						    			}
						    			if(subInvsetigationIdList.get(i)!= 0){
						    				DgSubMasInvestigation subMasInvestigation = new DgSubMasInvestigation();
						    				subMasInvestigation.setId(Integer.parseInt(subInvsetigationIdList.get(i).toString()));

						    				externalLabReportCommon.setSubInvestigation(subMasInvestigation);
						    			}
						    			externalLabReportCommon.setTestResult(testResultList.get(i).toString());
						    			externalLabReportCommon.setResultStatus(resultStatList.get(i).toString());

						    			if(testDateList.get(i) != null){

						    				subDate=testDateList.get(i).toString();
						    				externalLabReportCommon.setTestDate(HMSUtil.convertStringTypeDateToDateType(testDateList.get(i).toString()));
						    				if(testTimeList.get(i) != null && StringUtils.isNotBlank(testTimeList.get(i).toString())){
						    					lastValidTime = testTimeList.get(i).toString();
						    				} else {
						    					lastValidTime = "00:00";
						    				}
						    			}else{
						    				externalLabReportCommon.setTestDate(HMSUtil.convertStringTypeDateToDateType(subDate));
						    			}

						    			externalLabReportCommon.setTestTime(lastValidTime);

						    			MasHospital hospital = new MasHospital();
						    			hospital.setId(hospitalId);
						    			externalLabReportCommon.setHospital(hospital);

						    			Patient patient = new Patient();
						    			patient.setId(hinId);
						    			externalLabReportCommon.setHin(patient);

						    			Visit visit = new Visit();
						    			visit.setId(visitId);
						    			externalLabReportCommon.setVisit(visit);
						    			externalLabReportCommon.setTemplateName(templateName);
						    			hbt.save(externalLabReportCommon);
						    			saved = true;
						    		}
						    	}
						    }
						    catch (HibernateException localHibernateException) {}
						    

						    map.put("saved", Boolean.valueOf(saved));
						    return map;
						}
						
						@Override
						public Map<String, Object> getPhototherapyProformaDetails(Box box) {
							Map<String, Object> map = new HashMap<String, Object>();
							Session session = (Session) getSession();
							List<MasBloodGroup> bloodGroupList=new ArrayList<MasBloodGroup>();
							List<OpdPhototherapyProformaDetailDosage> phototherapyProformaDosage = new ArrayList<OpdPhototherapyProformaDetailDosage>();
							int hinId = 0;
							try {
								if(null != box.get("hinId"))
									hinId = box.getInt("hinId");
								bloodGroupList = session.createCriteria(MasBloodGroup.class).add(Restrictions.eq("Status", "y")).list();
								phototherapyProformaDosage = session.createCriteria(OpdPhototherapyProformaDetailDosage.class)
										.add(Restrictions.eq("Hin.Id", hinId)).list();
								map.put("phototherapyProformaDosage", phototherapyProformaDosage);
								map.put("bloodGroupList", bloodGroupList);
							} catch(Exception e){
								e.printStackTrace();
							}
							return map;
						}
						
						public Map<String, Object> savePhototherapyProforma(Map<String, Object> mapForDs, Box box, HttpServletRequest request) {
							Map<String, Object> map = new HashMap<String, Object>();
							MasSpecialtyTemplate masSpecialtyTemplate = null;
							Transaction tnx=null;
							try{
								Session session = (Session) getSession();
								tnx=session.beginTransaction();
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);
								
								OpdPhototherapyProformaHeader opdPhototherapyProformaHeader = new OpdPhototherapyProformaHeader();
								
								int hdb = 1;
								Integer hinId=0;
								Integer opdPatientDetailId=0;
								Integer specialtyId=0;
								Integer userId=0;
								String templateName = "";
								
								if(mapForDs.get("hinId") != null && (Integer) mapForDs.get("hinId") > 0) {
									hinId = (Integer) mapForDs.get("hinId");
								}
								if(null != box.get("opdPatientDetailId") && box.getInt("opdPatientDetailId") != 0){
									opdPatientDetailId =box.getInt("opdPatientDetailId");
								}
								if(map.get("specialtyId")!=null){
									specialtyId=(Integer)  map.get("specialtyId");	
								}
								if(map.get("templateName")!=null){
									templateName=(String)  map.get("templateName");	
								}
								
								
								
								if(null != box.getString("ptPresentingComplaints") && !box.getString("ptPresentingComplaints").equals(""))
									opdPhototherapyProformaHeader.setPresentingComplaintValue(box.getString("ptPresentingComplaints"));
								if(null != box.getString("ptDurationOfIllness") && !box.getString("ptDurationOfIllness").equals(""))
									opdPhototherapyProformaHeader.setDurationOfIllness(box.getString("ptDurationOfIllness") + " " + box.getString("ptDurationParameter"));
								if(null != box.getString("ptPresentIllnessHistory") && !box.getString("ptPresentIllnessHistory").equals(""))
									opdPhototherapyProformaHeader.setHistoryOfPresentIllness(box.getString("ptPresentIllnessHistory"));
								if(null != box.getString("ptPastHistory") && !box.getString("ptPastHistory").equals(""))
									opdPhototherapyProformaHeader.setPastHistory(box.getString("ptPastHistory"));
								if(null != box.getString("ptPastHistoryValue") && !box.getString("ptPastHistoryValue").equals(""))
									opdPhototherapyProformaHeader.setPastHistoryValue(box.getString("ptPastHistoryValue"));
								if(null != box.getString("ptFamilyHistoryOfSimilarIllness") && box.getString("ptFamilyHistoryOfSimilarIllness").equals("Present"))
									opdPhototherapyProformaHeader.setFamilyHistory("Present");
								else
									opdPhototherapyProformaHeader.setFamilyHistory("Absent");
								if(null != box.getString("ptFamilyHistoryOfSimilarIllnessValue") && !box.getString("ptFamilyHistoryOfSimilarIllnessValue").equals(""))
									opdPhototherapyProformaHeader.setFamilyHistoryValue(box.getString("ptFamilyHistoryOfSimilarIllnessValue"));
								if(null != box.getString("ptDrugHistory") && !box.getString("ptDrugHistory").equals(""))
									opdPhototherapyProformaHeader.setDrugHistory(box.getString("ptDrugHistory"));
								if(null != box.getString("ptDrugHistoryValue") && !box.getString("ptDrugHistoryValue").equals(""))
									opdPhototherapyProformaHeader.setDrugHistoryValue(box.getString("ptDrugHistoryValue"));
								if(null != box.getString("ptBuildAndNourishment") && !box.getString("ptBuildAndNourishment").equals(""))
									opdPhototherapyProformaHeader.setBuildAndNourishment(box.getString("ptBuildAndNourishment"));
								if(null != box.getString("ptGenExamAnemiaValue") && !box.getString("ptGenExamAnemiaValue").equals(""))
									opdPhototherapyProformaHeader.setGenExamAnemia(box.getString("ptGenExamAnemiaValue"));
								if(null != box.getString("ptGenExamCyanosisValue") && !box.getString("ptGenExamCyanosisValue").equals(""))
									opdPhototherapyProformaHeader.setGenExamCyanosis(box.getString("ptGenExamCyanosisValue"));
								if(null != box.getString("ptGenExamJaundiceValue") && !box.getString("ptGenExamJaundiceValue").equals(""))
									opdPhototherapyProformaHeader.setGenExamJaundice(box.getString("ptGenExamJaundiceValue"));
								if(null != box.getString("ptGenExamClubbingValue") && !box.getString("ptGenExamClubbingValue").equals(""))
									opdPhototherapyProformaHeader.setGenExamClubbing(box.getString("ptGenExamClubbingValue"));
								if(null != box.getString("ptGenExamEdemaValue") && !box.getString("ptGenExamEdemaValue").equals(""))
									opdPhototherapyProformaHeader.setGenExamEdema(box.getString("ptGenExamEdemaValue"));
								if(null != box.getString("ptGenExamLymphadenopathyValue") && !box.getString("ptGenExamLymphadenopathyValue").equals(""))
									opdPhototherapyProformaHeader.setGenExamLymphadenopathy(box.getString("ptGenExamLymphadenopathyValue"));
								if(null != box.getString("ptPulse") && !box.getString("ptPulse").equals(""))
									opdPhototherapyProformaHeader.setPulse(box.getLong("ptPulse"));
								if(null != box.getString("ptTemperature") && !box.getString("ptTemperature").equals(""))
									opdPhototherapyProformaHeader.setTemperature(box.getFloat("ptTemperature"));
								if(null != box.getString("ptSystolic") && !box.getString("ptSystolic").equals("")
										&& null != box.getString("ptDiastolic") && !box.getString("ptDiastolic").equals(""))
									opdPhototherapyProformaHeader.setBp(box.getString("ptSystolic") + "/" + box.getString("ptDiastolic"));
								if(null != box.getString("ptHeight") && !box.getString("ptHeight").equals(""))
									opdPhototherapyProformaHeader.setHeight(box.getLong("ptHeight"));
								if(null != box.getString("ptWeight") && !box.getString("ptWeight").equals(""))
									opdPhototherapyProformaHeader.setWeight(box.getFloat("ptWeight"));
								if(null != box.getString("ptBmi") && !box.getString("ptBmi").equals(""))
									opdPhototherapyProformaHeader.setBmi(box.getFloat("ptBmi"));
								if(null != box.getString("ptRespiratoryRate") && !box.getString("ptRespiratoryRate").equals(""))
									opdPhototherapyProformaHeader.setRespiratoryRate(box.getFloat("ptRespiratoryRate"));
								if(null != box.getString("ptSpo2") && !box.getString("ptSpo2").equals(""))
									opdPhototherapyProformaHeader.setSpo2(box.getFloat("ptSpo2"));
								
								if(null != box.getString("ptBloodGroup") && !box.getString("ptBloodGroup").equals("")) {
									MasBloodGroup bloodGroup = new MasBloodGroup();
									int bloodId=0;
									List<MasBloodGroup> masBloodGroups = session.createCriteria(MasBloodGroup.class).add(Restrictions.like("BloodGroupName",box.getString("ptBloodGroup"),MatchMode.START)).list();
									if(masBloodGroups.size()>0){
										bloodId = masBloodGroups.get(0).getId();
									}
									bloodGroup.setId(bloodId);
									opdPhototherapyProformaHeader.setBloodGroup(bloodGroup);
								}
								if(null != box.getString("ptPrimaryLessionOthersValue") && !box.getString("ptPrimaryLessionOthersValue").equals(""))
									opdPhototherapyProformaHeader.setPrimaryLesionOther(box.getString("ptPrimaryLessionOthersValue"));
								if(null != box.getString("ptSecondaryLessionOthersValue") && !box.getString("ptSecondaryLessionOthersValue").equals(""))
									opdPhototherapyProformaHeader.setSecondaryLesionOther(box.getString("ptSecondaryLessionOthersValue"));
								if(null != box.getString("distribution") && !box.getString("distribution").equals(""))
									opdPhototherapyProformaHeader.setDistribution(box.getString("distribution"));
								if(null != box.getString("distributionValue") && !box.getString("distributionValue").equals(""))
									opdPhototherapyProformaHeader.setDistributionValue(box.getString("distributionValue"));
								if(null != box.getString("hair") && !box.getString("hair").equals(""))
									opdPhototherapyProformaHeader.setHair(box.getString("hair"));
								if(null != box.getString("hairValue") && !box.getString("hairValue").equals(""))
									opdPhototherapyProformaHeader.setHairValue(box.getString("hairValue"));
								if(null != box.getString("nails") && !box.getString("nails").equals(""))
									opdPhototherapyProformaHeader.setNails(box.getString("nails"));
								if(null != box.getString("nailsValue") && !box.getString("nailsValue").equals(""))
									opdPhototherapyProformaHeader.setNailsValue(box.getString("nailsValue"));
								if(null != box.getString("ptSystemIllness") && box.getString("ptSystemIllness").equals("Yes"))
									opdPhototherapyProformaHeader.setSystemIllness("Yes");
								else
									opdPhototherapyProformaHeader.setSystemIllness("NO");
								if(null != box.getString("ptCVS") && !box.getString("ptCVS").equals(""))
									opdPhototherapyProformaHeader.setSystemIllnesCvs(box.getString("ptCVS"));
								if(null != box.getString("ptRS") && !box.getString("ptRS").equals(""))
									opdPhototherapyProformaHeader.setSystemIllnesRs(box.getString("ptRS"));
								if(null != box.getString("ptGIT") && !box.getString("ptGIT").equals(""))
									opdPhototherapyProformaHeader.setSystemIllnesGit(box.getString("ptGIT"));
								if(null != box.getString("ptCNS") && !box.getString("ptCNS").equals(""))
									opdPhototherapyProformaHeader.setSystemIllnesCns(box.getString("ptCNS"));
								if(null != box.getString("ptOthersIllness") && !box.getString("ptOthersIllness").equals(""))
									opdPhototherapyProformaHeader.setSystemIllnesOthers(box.getString("ptOthersIllness"));
								if(null != box.getString("ptHb") && !box.getString("ptHb").equals(""))
									opdPhototherapyProformaHeader.setBloodHb(box.getString("ptHb"));
								if(null != box.getString("ptTcP") && !box.getString("ptTcP").equals(""))
									opdPhototherapyProformaHeader.setBloodTcP(box.getString("ptTcP"));
								if(null != box.getString("ptTcL") && !box.getString("ptTcL").equals(""))
									opdPhototherapyProformaHeader.setBloodTcL(box.getString("ptTcL"));
								if(null != box.getString("ptTcE") && !box.getString("ptTcE").equals(""))
									opdPhototherapyProformaHeader.setBloodTcE(box.getString("ptTcE"));
								if(null != box.getString("ptPlatelets") && !box.getString("ptPlatelets").equals(""))
									opdPhototherapyProformaHeader.setBloodTcPlatelets(box.getString("ptPlatelets"));
								if(null != box.getString("ptESR") && !box.getString("ptESR").equals(""))
									opdPhototherapyProformaHeader.setBloodEsr(box.getString("ptESR"));
								if(null != box.getString("ptPeripheralSmear") && !box.getString("ptPeripheralSmear").equals(""))
									opdPhototherapyProformaHeader.setBloodSmear(box.getString("ptPeripheralSmear"));
								if(null != box.getString("ptFBS") && !box.getString("ptFBS").equals(""))
									opdPhototherapyProformaHeader.setFbs(box.getString("ptFBS"));
								if(null != box.getString("ptPPBS") && !box.getString("ptPPBS").equals(""))
									opdPhototherapyProformaHeader.setPpbs(box.getString("ptPPBS"));
								if(null != box.getString("ptUrineAlbumin") && !box.getString("ptUrineAlbumin").equals(""))
									opdPhototherapyProformaHeader.setUrinAlbumin(box.getString("ptUrineAlbumin"));
								if(null != box.getString("ptUrineSugar") && !box.getString("ptUrineSugar").equals(""))
									opdPhototherapyProformaHeader.setUrinSugar(box.getString("ptUrineSugar"));
								if(null != box.getString("ptUrineDeposits") && !box.getString("ptUrineDeposits").equals(""))
									opdPhototherapyProformaHeader.setUrinDeposits(box.getString("ptUrineDeposits"));
								if(null != box.getString("ptUrea") && !box.getString("ptUrea").equals(""))
									opdPhototherapyProformaHeader.setRftUrea(box.getString("ptUrea"));
								if(null != box.getString("ptCreatinine") && !box.getString("ptCreatinine").equals(""))
									opdPhototherapyProformaHeader.setRftCreatinine(box.getString("ptCreatinine"));
								if(null != box.getString("ptProtein") && !box.getString("ptProtein").equals(""))
									opdPhototherapyProformaHeader.setRftProtein(box.getString("ptProtein"));
								if(null != box.getString("ptBilirubin") && !box.getString("ptBilirubin").equals(""))
									opdPhototherapyProformaHeader.setRftBilirubin(box.getString("ptBilirubin"));
								if(null != box.getString("ptSGOT") && !box.getString("ptSGOT").equals(""))
									opdPhototherapyProformaHeader.setRftSgot(box.getString("ptSGOT"));
								if(null != box.getString("ptNa") && !box.getString("ptNa").equals(""))
									opdPhototherapyProformaHeader.setRftNa(box.getString("ptNa"));
								if(null != box.getString("ptK") && !box.getString("ptK").equals(""))
									opdPhototherapyProformaHeader.setRftK(box.getString("ptK"));
								if(null != box.getString("ptAlbumin") && !box.getString("ptAlbumin").equals(""))
									opdPhototherapyProformaHeader.setRftAlbumin(box.getString("ptAlbumin"));
								if(null != box.getString("ptAlkP") && !box.getString("ptAlkP").equals(""))
									opdPhototherapyProformaHeader.setRftAlk(box.getString("ptAlkP"));
								if(null != box.getString("ptSGPT") && !box.getString("ptSGPT").equals(""))
									opdPhototherapyProformaHeader.setRftSgpt(box.getString("ptSGPT"));
								if(null != box.getString("ptChestXRay") && !box.getString("ptChestXRay").equals(""))
									opdPhototherapyProformaHeader.setRftChestXray(box.getString("ptChestXRay"));
								if(null != box.getString("ptCTScan") && !box.getString("ptCTScan").equals(""))
									opdPhototherapyProformaHeader.setRftCtscan(box.getString("ptCTScan"));
								if(null != box.getString("ptUltrasoundAbdomen") && !box.getString("ptUltrasoundAbdomen").equals(""))
									opdPhototherapyProformaHeader.setRftAltrasount(box.getString("ptUltrasoundAbdomen"));
								if(null != box.getString("ptRFTOthers") && !box.getString("ptRFTOthers").equals(""))
									opdPhototherapyProformaHeader.setRftOthers(box.getString("ptRFTOthers"));
								if(null != box.getString("ptPsoriasis") && !box.getString("ptPsoriasis").equals(""))
									opdPhototherapyProformaHeader.setDermatosesPsoriasis("Yes");
								if(null != box.getString("ptVitiligo") && !box.getString("ptVitiligo").equals(""))
									opdPhototherapyProformaHeader.setDermatosesVitiligo("Yes");
								if(null != box.getString("ptAlopecia") && !box.getString("ptAlopecia").equals(""))
									opdPhototherapyProformaHeader.setDermatosesAlopecia("Yes");
								if(null != box.getString("ptParapsoriasis") && !box.getString("ptParapsoriasis").equals(""))
									opdPhototherapyProformaHeader.setDermatosesParapsoriasis("Yes");
								if(null != box.getString("ptPityriasislichenoides") && !box.getString("ptPityriasislichenoides").equals(""))
									opdPhototherapyProformaHeader.setDermatosesPityriasis("Yes");
								if(null != box.getString("ptMastocytosis") && !box.getString("ptMastocytosis").equals(""))
									opdPhototherapyProformaHeader.setDermatosesMastocytosis("Yes");
								if(null != box.getString("ptCTCL") && !box.getString("ptCTCL").equals(""))
									opdPhototherapyProformaHeader.setDermatosesCtcl("Yes");
								if(null != box.getString("ptDermatosesValue") && !box.getString("ptDermatosesValue").equals(""))
									opdPhototherapyProformaHeader.setDermatosesOthers(box.getString("ptDermatosesValue"));
								if(null != box.getString("ptSystemicSteroids") && !box.getString("ptSystemicSteroids").equals(""))
									opdPhototherapyProformaHeader.setConcomitantSystemic("Yes");
								if(null != box.getString("ptTopicalSteroids") && !box.getString("ptTopicalSteroids").equals(""))
									opdPhototherapyProformaHeader.setConcomitantTopical("Yes");
								if(null != box.getString("ptAntihistamines") && !box.getString("ptAntihistamines").equals(""))
									opdPhototherapyProformaHeader.setConcomitantAntihistamines("Yes");
								if(null != box.getString("ptEmolients") && !box.getString("ptEmolients").equals(""))
									opdPhototherapyProformaHeader.setConcomitantEmolients("Yes");
								if(null != box.getString("ptTacrolimus") && !box.getString("ptTacrolimus").equals(""))
									opdPhototherapyProformaHeader.setConcomitantTacrolimus("Yes");
								if(null != box.getString("ptConcomitantTherapyValue") && !box.getString("ptConcomitantTherapyValue").equals(""))
									opdPhototherapyProformaHeader.setConcomitantOthers(box.getString("ptConcomitantTherapyValue"));
								if(null != box.getString("ptAdverseEventsAndFollowUp") && !box.getString("ptAdverseEventsAndFollowUp").equals(""))
									opdPhototherapyProformaHeader.setAdverseEventsFollowup(box.getString("ptAdverseEventsAndFollowUp"));

								Patient patient = new Patient();
								patient.setId(hinId);
								opdPhototherapyProformaHeader.setHin(patient);
								
								OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
								opdPatientDetails.setId(opdPatientDetailId);
								opdPhototherapyProformaHeader.setOpdPatientDetails(opdPatientDetails);

								session.save(opdPhototherapyProformaHeader);

								int primaryLesionCount = 0;
								if(box.getInt("ptPrimaryLesionCount") != 0){
									primaryLesionCount = box.getInt("ptPrimaryLesionCount");
								}

								for(int i=1;i<=primaryLesionCount;i++){
									
								  OpdPhototherapyProformaDetail opdPhototherapyProformaDetail = new OpdPhototherapyProformaDetail();
								  if(!box.getString("ptPrimaryLesion"+i).equals("") || 
										  !box.getString("ptPrimaryLesionOthers"+i).equals("") ||
										  !box.getString("ptPrimaryLesionNo"+i).equals("") ||
										  !box.getString("ptPrimaryLesionSite"+i).equals("") ||
										  !box.getString("typeOfPtPrimaryLesion"+i).equals("") ||
										  !box.getString("ptPrimaryPigmentation"+i).equals("") ||
										  !box.getString("ptPrimaryPigmentationValue"+i).equals("") ||
										  !box.getString("ptPrimaryCharacter"+i).equals("") ||
										  !box.getString("ptPrimaryBorder"+i).equals("") ||
										  !box.getString("ptPrimarySurface"+i).equals("") ||
										  !box.getString("ptPrimarySmallestSize"+i).equals("") ||
										  !box.getString("ptPrimaryLargestSize"+i).equals("") ||
										  !box.getString("ptHairOnPrimaryLesion"+i).equals("") ||
										  !box.getString("ptPrimaryAdditionalFeature"+i).equals("")
										  ){
									opdPhototherapyProformaDetail.setParameterName(box.getString("ptPrimaryLesion"+i));

									if(!box.getString("ptPrimaryLesion"+i).equals("")){
										opdPhototherapyProformaDetail.setLesion(box.getString("ptPrimaryLesion"+i));
									}
									if(!box.getString("ptPrimaryLesionOthers"+i).equals("")){
										opdPhototherapyProformaDetail.setLesionValue(box.getString("ptPrimaryLesionOthers"+i));
									}
									if(!box.getString("ptPrimaryLesionNo"+i).equals("")){
										opdPhototherapyProformaDetail.setNumber(box.getString("ptPrimaryLesionNo"+i));
									}
									if(!box.getString("ptPrimaryLesionSite"+i).equals("")){
										opdPhototherapyProformaDetail.setSite(box.getString("ptPrimaryLesionSite"+i));
									}
									if(!box.getString("typeOfPtPrimaryLesion"+i).equals("")){
										opdPhototherapyProformaDetail.setTypeOfLesion(box.getString("typeOfPtPrimaryLesion"+i));
									}
									if(!box.getString("ptPrimaryPigmentation"+i).equals("")){
										opdPhototherapyProformaDetail.setPigmentationStatus(box.getString("ptPrimaryPigmentation"+i));
									}
									if(!box.getString("ptPrimaryPigmentationValue"+i).equals("")){
										opdPhototherapyProformaDetail.setPigmentation(box.getString("ptPrimaryPigmentationValue"+i));
									}
									if(!box.getString("ptPrimaryCharacter"+i).equals("")){
										opdPhototherapyProformaDetail.setCharcter(box.getString("ptPrimaryCharacter"+i));
									}
									if(!box.getString("ptPrimaryBorder"+i).equals("")){
										opdPhototherapyProformaDetail.setBorder(box.getString("ptPrimaryBorder"+i));
									}
									if(!box.getString("ptPrimarySurface"+i).equals("")){
										opdPhototherapyProformaDetail.setSurface(box.getString("ptPrimarySurface"+i));
									}
									if(!box.getString("ptPrimarySmallestSize"+i).equals("")){
										opdPhototherapyProformaDetail.setSmallestSize(box.getString("ptPrimarySmallestSize"+i));
									}
									if(!box.getString("ptPrimaryLargestSize"+i).equals("")){
										opdPhototherapyProformaDetail.setLargestSize(box.getString("ptPrimaryLargestSize"+i));
									}
									if(!box.getString("ptHairOnPrimaryLesion"+i).equals("")){
										opdPhototherapyProformaDetail.setHairOnLesion(box.getString("ptHairOnPrimaryLesion"+i));
									}
									if(!box.getString("ptPrimaryAdditionalFeature"+i).equals("")){
										opdPhototherapyProformaDetail.setAdditionalFeature(box.getString("ptPrimaryAdditionalFeature"+i));
									}
									opdPhototherapyProformaDetail.setPhototherapyProforma(opdPhototherapyProformaHeader);
									
									opdPhototherapyProformaDetail.setFlag("Primary Lesion");
									opdPhototherapyProformaDetail.setStatus("y");
									
									session.save(opdPhototherapyProformaDetail);
								  }
								}
								
								int secondaryLesionCount = 0;
								if(box.getInt("ptSecondaryLesionCount") != 0){
									secondaryLesionCount = box.getInt("ptSecondaryLesionCount");
								}
								
								for(int i=1;i<=secondaryLesionCount;i++){
									
								  OpdPhototherapyProformaDetail opdPhototherapyProformaDetail = new OpdPhototherapyProformaDetail();
									
								  
									  if(!box.getString("ptSecondaryLesion"+i).equals("") || 
											  !box.getString("ptSecondaryLessionOthers"+i).equals("") ||
											  !box.getString("ptSecondaryLesionNo"+i).equals("") ||
											  !box.getString("ptSecondaryLesionSite"+i).equals("") ||
											  !box.getString("typeOfptSecondaryLesion"+i).equals("") ||
											  !box.getString("ptSecondaryPigmentation"+i).equals("") ||
											  !box.getString("ptSecondaryPigmentationValue"+i).equals("") ||
											  !box.getString("ptSecondaryCharacter"+i).equals("") ||
											  !box.getString("ptSecondaryBorder"+i).equals("") ||
											  !box.getString("ptSecondarySurface"+i).equals("") ||
											  !box.getString("ptSecondarySmallestSize"+i).equals("") ||
											  !box.getString("ptSecondaryLargestSize"+i).equals("") ||
											  !box.getString("ptHairOnSecondaryLesion"+i).equals("") ||
											  !box.getString("ptSecondaryAdditionalFeature"+i).equals("")
											  ){
									  
									opdPhototherapyProformaDetail.setParameterName(box.getString("ptSecondaryLesion"+i));

									if(!box.getString("ptSecondaryLesion"+i).equals("")){
										opdPhototherapyProformaDetail.setLesion(box.getString("ptSecondaryLesion"+i));
									}
									if(!box.getString("ptSecondaryLessionOthers"+i).equals("")){
										opdPhototherapyProformaDetail.setLesionValue(box.getString("ptSecondaryLessionOthers"+i));
									}
									if(!box.getString("ptSecondaryLesionNo"+i).equals("")){
										opdPhototherapyProformaDetail.setNumber(box.getString("ptSecondaryLesionNo"+i));
									}
									if(!box.getString("ptSecondaryLesionSite"+i).equals("")){
										opdPhototherapyProformaDetail.setSite(box.getString("ptSecondaryLesionSite"+i));
									}
									if(!box.getString("typeOfptSecondaryLesion"+i).equals("")){
										opdPhototherapyProformaDetail.setTypeOfLesion(box.getString("typeOfptSecondaryLesion"+i));
									}
									if(!box.getString("ptSecondaryPigmentation"+i).equals("")){
										opdPhototherapyProformaDetail.setPigmentationStatus(box.getString("ptSecondaryPigmentation"+i));
									}
									if(!box.getString("ptSecondaryPigmentationValue"+i).equals("")){
										opdPhototherapyProformaDetail.setPigmentation(box.getString("ptSecondaryPigmentationValue"+i));
									}
									if(!box.getString("ptSecondaryCharacter"+i).equals("")){
										opdPhototherapyProformaDetail.setCharcter(box.getString("ptSecondaryCharacter"+i));
									}
									if(!box.getString("ptSecondaryBorder"+i).equals("")){
										opdPhototherapyProformaDetail.setBorder(box.getString("ptSecondaryBorder"+i));
									}
									if(!box.getString("ptSecondarySurface"+i).equals("")){
										opdPhototherapyProformaDetail.setSurface(box.getString("ptSecondarySurface"+i));
									}
									if(!box.getString("ptSecondarySmallestSize"+i).equals("")){
										opdPhototherapyProformaDetail.setSmallestSize(box.getString("ptSecondarySmallestSize"+i));
									}
									if(!box.getString("ptSecondaryLargestSize"+i).equals("")){
										opdPhototherapyProformaDetail.setLargestSize(box.getString("ptSecondaryLargestSize"+i));
									}
									if(!box.getString("ptHairOnSecondaryLesion"+i).equals("")){
										opdPhototherapyProformaDetail.setHairOnLesion(box.getString("ptHairOnSecondaryLesion"+i));
									}
									if(!box.getString("ptSecondaryAdditionalFeature"+i).equals("")){
										opdPhototherapyProformaDetail.setAdditionalFeature(box.getString("ptSecondaryAdditionalFeature"+i));
									}
									opdPhototherapyProformaDetail.setPhototherapyProforma(opdPhototherapyProformaHeader);
									
									opdPhototherapyProformaDetail.setFlag("Secondary Lesion");
									opdPhototherapyProformaDetail.setStatus("y");
									
									session.save(opdPhototherapyProformaDetail);
								  }
								}

								int nbuvbCount = 0;
								if(box.getInt("nbuvbCount") != 0){
									nbuvbCount = box.getInt("nbuvbCount");
								}

							  if(null != box.getString("ptNbuvb") && !box.getString("ptNbuvb").equals("")) {
								for(int i=1;i<=nbuvbCount;i++){
									
								  OpdPhototherapyProformaDetailDosage opdPhototherapyProformaDetailDosage = new OpdPhototherapyProformaDetailDosage();
								  if(null != box.getString("srNoNbuvb"+i) && !box.getString("srNoNbuvb"+i).equals("") && box.getInt("srNoNbuvb"+i) == i){
									opdPhototherapyProformaDetailDosage.setParameterName("NB-UVB");
									if(null != box.getString("nbuvbDate"+i) && !box.getString("nbuvbDate"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setDosageDate(HMSUtil.convertStringTypeDateToDateType(box.get("nbuvbDate"+i)));
									}
									if(null != box.getString("nbuvbIncrement"+i) && !box.getString("nbuvbIncrement"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setIncrementPercentage(box.getFloat("nbuvbIncrement"+i));
									}
									if(null != box.getString("nbuvbDosage"+i) && !box.getString("nbuvbDosage"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setDosage(box.getFloat("nbuvbDosage"+i));
									}
									if(null != box.getString("nbuvbScore"+i) && !box.getString("nbuvbScore"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setScore(box.getString("nbuvbScore"+i));
									}
									if(null != box.getString("nbuvbRemarks"+i) && !box.getString("nbuvbRemarks"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setRemarks(box.getString("nbuvbRemarks"+i));
									}

									opdPhototherapyProformaDetailDosage.setPhototherapyProforma(opdPhototherapyProformaHeader);
									
									opdPhototherapyProformaDetailDosage.setFlag("NB-UVB");
									opdPhototherapyProformaDetailDosage.setStatus("y");
									opdPhototherapyProformaDetailDosage.setHin(patient);
									session.save(opdPhototherapyProformaDetailDosage);
								  }
								}
							  }

								int puvaCount = 0;
								if(null != box.getString("puvaCount") && box.getInt("puvaCount") != 0){
									puvaCount = box.getInt("puvaCount");
								}

							  if(null != box.getString("ptPuva") && !box.getString("ptPuva").equals("")) {
								for(int i=1;i<=puvaCount;i++){
									
								  OpdPhototherapyProformaDetailDosage opdPhototherapyProformaDetailDosage = new OpdPhototherapyProformaDetailDosage();
								  if(null != box.getString("srNoPuva"+i) && !box.getString("srNoPuva"+i).equals("") && box.getInt("srNoPuva"+i) == i){
									opdPhototherapyProformaDetailDosage.setParameterName("PUVA");
									if(null != box.getString("puvaDate"+i) && !box.getString("puvaDate"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setDosageDate(HMSUtil.convertStringTypeDateToDateType(box.get("puvaDate"+i)));
									}
									if(null != box.getString("puvaIncrement"+i) && !box.getString("puvaIncrement"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setIncrementPercentage(box.getFloat("puvaIncrement"+i));
									}
									if(null != box.getString("puvaDosage"+i) && !box.getString("puvaDosage"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setDosage(box.getFloat("puvaDosage"+i));
									}
									if(null != box.getString("puvaScore"+i) && !box.getString("puvaScore"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setScore(box.getString("puvaScore"+i));
									}
									if(null != box.getString("puvaRemarks"+i) && !box.getString("puvaRemarks"+i).equals("")){
										opdPhototherapyProformaDetailDosage.setRemarks(box.getString("puvaRemarks"+i));
									}

									opdPhototherapyProformaDetailDosage.setPhototherapyProforma(opdPhototherapyProformaHeader);
									
									opdPhototherapyProformaDetailDosage.setFlag("PUVA");
									opdPhototherapyProformaDetailDosage.setStatus("y");
									opdPhototherapyProformaDetailDosage.setHin(patient);
									session.save(opdPhototherapyProformaDetailDosage);
								  }
								}
							  }
								
								
								if(opdPatientDetailId != 0){
									opdPatientDetails = (OpdPatientDetails)hbt.load(OpdPatientDetails.class, opdPatientDetailId);
									opdPatientDetails.setTemplateName(box.getString("templateName"));
									session.update(opdPatientDetails);
								}

								tnx.commit();
								map.put("opdPhototherapyProformaHeader",opdPhototherapyProformaHeader);
								
							}catch(Exception e){
								e.printStackTrace();
							}
							return map;
						}
						
						//Addded by swarup 29-11-2017
					    public Map<String, Object> showFamilyPlanningGynecologyJsp(Map<String, Object> famPlanGynMap) {
					    	Session session = (Session) getSession();
							List<Visit> patientList = new ArrayList<Visit>();
							List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
							List<OpdAntenatalCard> opdAntenatalCardList1= new ArrayList<OpdAntenatalCard>();
							//List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
							Map<String, Object> map = new HashMap<String, Object>();
							//int deptId = (Integer) famPlanGynMap.get("deptId");
							int hospitalId = (Integer) famPlanGynMap.get("hospitalId");
							int hinId = 0;
							int visitId = 0;
							String pFirstName = "";
							String pMiddleName = "";
							String pLastName = "";
							String hinNo = "";
							String flag = "";
							int visitNo = 0;
							 
						 	String category = "Doctor";
							//List<Patient> patientList = new ArrayList<Patient>();
							int patient_hin = 0;
							try {

								if (famPlanGynMap.get("hinNo") != null
										&& !famPlanGynMap.get("hinNo").equals("")) {
									hinNo = (String) famPlanGynMap.get("hinNo");
								}
								if (famPlanGynMap.get("hinId") != null) {
									hinId = (Integer) famPlanGynMap.get("hinId");
								}
								if (famPlanGynMap.get("visitId") != null) {
									visitId = (Integer) famPlanGynMap.get("visitId");
								}
								if (famPlanGynMap.get("flag") != null && !famPlanGynMap.get("flag").equals("")) {
									flag = (String) famPlanGynMap.get("flag");
								}
								if (famPlanGynMap.get("visitNo") != null
										&& !famPlanGynMap.get("visitNo").equals("")) {
									visitNo = (Integer) famPlanGynMap.get("visitNo");
								}
	 
							/*	if(famPlanGynMap.get("patientNameFp")!=null){
									patientNameFp =(String) famPlanGynMap.get("patientNameFp");
								}*/
								
								patientList =session.createCriteria(Visit.class)
										  	.createAlias("Hin", "h")
										  	.add(Restrictions.eq("h.Id", hinId))	
										  	.add(Restrictions.eq("Id", visitId))
										  	.addOrder(Order.desc("Id")).list();
						 		
								doctorList = session
											.createCriteria(MasEmployee.class)
											.createAlias("Hospital", "hos")
											.add(Restrictions.eq("Status", "y").ignoreCase())
											.add(Restrictions.eq("hos.Id", hospitalId))
											.setMaxResults(10)
											.list();
								
								opdAntenatalCardList1 = session.createCriteria(OpdAntenatalCard.class)
											.add(Restrictions.eq("Status", "Y").ignoreCase())
											.add(Restrictions.eq("Hin.Id", hinId)).addOrder(Order.asc("Id")).list();//end code
							} catch (HibernateException e) {
								e.printStackTrace();
							}
							map.put("patientList", patientList);
							map.put("doctorList", doctorList);
							map.put("opdAntenatalCardList1", opdAntenatalCardList1);
							//map.put("deptName", deptName);
							map.put("hinNo", hinNo);
							map.put("visitNo", visitNo);
							return map;
						}
	    
					    //added by swarup 29-11-2017 
					    @Override
						public Map<String, Object> saveFamilyPlanningGynecologyJsp(Box box) {
					    	List<Visit> patientList = new ArrayList<Visit>();
							Map<String,Object> map = new HashMap<String,Object>();
							try{
								Session session = (Session) getSession();
								Transaction tx=session.beginTransaction();
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								//hbt.setCheckWriteOperations(false);
								
								FamilyPlanningGynecology familyPlanningGynecology = new FamilyPlanningGynecology();
								
								 Integer visitId=null;
									if (box.get("visitId")!=null) {
										visitId = box.getInt("visitId");
									}
									
									Integer hinId=null;
									if (box.getString("hinId")!=null) {
										hinId = box.getInt("hinId");
									}
									
									String addressForMedPractMtp=null;
									if (box.getString("addressForMedPractMtp")!=null) {
										addressForMedPractMtp = box.getString("addressForMedPractMtp");
									}
									
										String addressForMedPractRef=null;
									if (box.getString("addressForMedPractRef")!=null) {
										addressForMedPractRef = box.getString("addressForMedPractRef");
									}
								
									String age=null;
									if (box.getString("age")!=null) {
										age = box.getString("age");
									}
									
									String days=null;
									if (box.getString("days")!=null) {
										days = box.getString("days");
									}
									
										Integer departmentId=null;
									if (box.get("departmentId")!=null) {
										departmentId = box.getInt("departmentId");
									}
								
									Integer familyPanningId=null;
									if (box.get("familyPanningId")!=null) {
										familyPanningId = box.getInt("familyPanningId");
									}
									
									String gender=null;
									if (box.getString("gender")!=null) {
										gender = box.getString("gender");
									}
									
										String gestationAge=null;
									if (box.getString("gestationAge")!=null) {
										gestationAge = box.getString("gestationAge");
									}
								
									String medicalPractionerReferral=null;
									if (box.getString("medicalPractionerReferral")!=null) {
										medicalPractionerReferral = box.getString("medicalPractionerReferral");
									}
									
									String medicalPractionerMtp=null;
									if (box.getString("medicalPractionerMtp")!=null) {
										medicalPractionerMtp = box.getString("medicalPractionerMtp");
									}
									
									String othersValue=null;
									if (box.getString("othersValue")!=null) {
										othersValue = box.getString("othersValue");
									}
									
									String patientNameFp = null;
									if (box.getString("patientNameFp")!=null) {
										patientNameFp = box.getString("patientNameFp");
									}
								
									String resonForFamilyPlanning=null;
									if (box.getString("resonForFamilyPlanning")!=null) {
										resonForFamilyPlanning = box.getString("resonForFamilyPlanning");
									}
									
									String typeOfTerminationUsed=null;
									if (box.getString("typeOfTerminationUsed")!=null) {
										typeOfTerminationUsed = box.getString("typeOfTerminationUsed");
									}
									
									Integer hospitalId=null;
									if (box.get("hospitalId")!=null) {
										hospitalId = box.getInt("hospitalId");
									}
									
									Integer hin=null;
									if (box.get("hin")!=null) {
										hin = box.getInt("hin");
									}
									
									String gestationalAgeDays=null;
									if (box.getString("gestationalAgeDays")!=null) {
										gestationalAgeDays = box.getString("gestationalAgeDays");
									}
									
									String gestationalAgeWeeks=null;
									if (box.getString("gestationalAgeWeeks")!=null) {
										gestationalAgeWeeks = box.getString("gestationalAgeWeeks");
									}
									//familyPlanningGynecology.set
									familyPlanningGynecology.setVisitId(visitId);	
									//familyPlanningGynecology.setHin(hin);
									familyPlanningGynecology.setHospitalId(hospitalId);
									familyPlanningGynecology.setAddressForMedPractMtp(addressForMedPractMtp);
									familyPlanningGynecology.setAddressForMedPractRef(addressForMedPractRef);
									familyPlanningGynecology.setAge(age);	
									familyPlanningGynecology.setDays(gestationalAgeDays);
									//familyPlanningGynecology.setDepartmentId(departmentId);
									//familyPlanningGynecology.setFamilyPanningId(familyPanningId);
									familyPlanningGynecology.setGender(gender);
									 familyPlanningGynecology.setGestationAge(gestationAge);	
									//familyPlanningGynecology.setLastChgBy(lastChgBy);
									//familyPlanningGynecology.setLastChgDate(lastChgDate);
									//familyPlanningGynecology.setLastChgTime(lastChgTime);
									familyPlanningGynecology.setMedicalPractionerReferral(medicalPractionerReferral);
									familyPlanningGynecology.setMedicalPractionerMtp(medicalPractionerMtp);
									familyPlanningGynecology.setOthers(othersValue);
								
									familyPlanningGynecology.setPatientName(patientNameFp);
									familyPlanningGynecology.setResonForFamilyPlanning(resonForFamilyPlanning);
									familyPlanningGynecology.setTypeOfTerminationUsed(typeOfTerminationUsed);
									
									hbt.saveOrUpdate(familyPlanningGynecology);
								map.put("familyPlanningGynecology",familyPlanningGynecology);
							tx.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
								return map;
							}			
						
@Override
public Map<String, Object> showGeneralPsychiatricCaseRecord(Box box) {
	
	Map<String, Object> map = new HashMap<String, Object>();
	Session session = (Session) getSession();
	
	List<MasMaritalStatus> maritalStatusList = new ArrayList<MasMaritalStatus>();
	List<MasQualification> educationList = new ArrayList<MasQualification>();
	List<MasReligion> religionList = new ArrayList<MasReligion>();
	
	
		maritalStatusList = session.createCriteria(MasMaritalStatus.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
	 educationList = session.createCriteria(MasQualification.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
	 religionList = session.createCriteria(MasReligion.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
	
	map.put("masMaritalStatusList",maritalStatusList);
	map.put("educationList",educationList);
	map.put("religionList",religionList);
	
	return map;
}

@Override
public Map<String, Object> showOutSideLabResultEntry(
		Map<String, Object> requestParametersMap) {
	
	Map<String, Object> map = new HashMap();
    Session session = (Session)getSession();
    List<ExternalLabReportCommon> externalLabListCommon = new ArrayList();
    int hinId = ((Integer)requestParametersMap.get("hinId")).intValue();			    


    externalLabListCommon = session.createCriteria(ExternalLabReportCommon.class)
      .createAlias("Hin", "h")
      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
      .list();
    
    map.put("externalLabList", externalLabListCommon);
    

    return map;
}

@Override
public Map<String, Object> saveGeneralPsychiatricCaseRecord(
		Map<String, Object> mapForDS, Box box) {
	Map<String,Object> map = new HashMap<String,Object>();
	OpdGeneralPsychiatricCaseRecord opdGeneralPsychiatricCaseRecord = new OpdGeneralPsychiatricCaseRecord();  
	try{
		
		Session session = (Session) getSession();
		Transaction tx=session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
				
		int hospitalId=0;
		if (box.getInt("hospitalId") != 0){
			hospitalId = box.getInt("hospitalId");
		}
		
		int opdPatientDetailId = 0;;
		if (box.getInt("opdPatientDetailId") != 0){
			opdPatientDetailId = box.getInt("opdPatientDetailId");
		}
		int hinId=0;
		if(box.getInt("hinId") !=0){
			hinId=box.getInt("hinId");	
		}
		int masReligionId = 0;
		if(box.getInt("masReligionId") !=0){
			masReligionId=box.getInt("masReligionId");	
		}
		int masMaritalStatusId = 0;
		if(box.getInt("masMaritalStatusId") !=0){
			masMaritalStatusId=box.getInt("masMaritalStatusId");	
		}
		int educationId = 0;
		if(box.getInt("educationId") !=0){
			educationId=box.getInt("educationId");	
		}
		
		List<OpdGeneralPsychiatricCaseRecord> opdGeneralPsychiatricCaseRecordList = new ArrayList<OpdGeneralPsychiatricCaseRecord>();
		opdGeneralPsychiatricCaseRecordList=session.createCriteria(OpdGeneralPsychiatricCaseRecord.class).createAlias("OpdPatientDetails", "opd")
				.add(Restrictions.eq("opd.Id",opdPatientDetailId)).list();
		if(opdGeneralPsychiatricCaseRecordList.size()>0)
		{			
			int generalPsychiatricCaseRecordId =0;
			for(OpdGeneralPsychiatricCaseRecord onr:opdGeneralPsychiatricCaseRecordList){
			
				generalPsychiatricCaseRecordId = onr.getId();
			}
			opdGeneralPsychiatricCaseRecord = (OpdGeneralPsychiatricCaseRecord)hbt.load(OpdGeneralPsychiatricCaseRecord.class, generalPsychiatricCaseRecordId);
			
			if(box.getString("self") != null && !box.getString("self").equals("")){
				opdGeneralPsychiatricCaseRecord.setSelf(box.getString("self"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSelf("");
				}
			
			if(box.getString("broughtByRelatives") != null && !box.getString("broughtByRelatives").equals("")){
				opdGeneralPsychiatricCaseRecord.setBroughtByRelatives(box.getString("broughtByRelatives"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBroughtByRelatives("");
				}
			if(box.getString("court") != null && !box.getString("court").equals("")){
				opdGeneralPsychiatricCaseRecord.setCourt(box.getString("court"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCourt("");
				}
			if(box.getString("medicalCollegeHospital") != null && !box.getString("medicalCollegeHospital").equals("")){
				opdGeneralPsychiatricCaseRecord.setMedicalCollegeHospital(box.getString("medicalCollegeHospital"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMedicalCollegeHospital("");
				}
			if(box.getString("othersSourceOfReferral") != null && !box.getString("othersSourceOfReferral").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferral(box.getString("othersSourceOfReferral"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferral("");
				}
			if(box.getString("othersSourceOfReferralDiv") != null && !box.getString("othersSourceOfReferralDiv").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferralDiv(box.getString("othersSourceOfReferralDiv"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferralDiv("");
				}
			if(box.getString("lanuage") != null && !box.getString("lanuage").equals("")){
				opdGeneralPsychiatricCaseRecord.setLanuage(box.getString("lanuage"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLanuage("");
				}
			if(box.getString("informant") != null && !box.getString("informant").equals("")){
				opdGeneralPsychiatricCaseRecord.setInformant(box.getString("informant"));
				}else{
					opdGeneralPsychiatricCaseRecord.setInformant("");
				}
			if(box.getString("rrc") != null && !box.getString("rrc").equals("")){
				opdGeneralPsychiatricCaseRecord.setRrc(box.getString("rrc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRrc("");
				}
			if(box.getString("presentingCompliments") != null && !box.getString("presentingCompliments").equals("")){
				opdGeneralPsychiatricCaseRecord.setPresentingCompliments(box.getString("presentingCompliments"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPresentingCompliments("");
				}
			if(box.getString("totalDuration") != null && !box.getString("totalDuration").equals("")){
				opdGeneralPsychiatricCaseRecord.setTotalDuration(Integer.parseInt(box.getString("totalDuration")));
				}else{
					opdGeneralPsychiatricCaseRecord.setTotalDuration(0);
				}
			if(box.getString("episodicType") != null && !box.getString("episodicType").equals("")){
				opdGeneralPsychiatricCaseRecord.setEpisodicType(box.getString("episodicType"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEpisodicType("");
				}
			if(box.getString("episodicTypeValue") != null && !box.getString("episodicTypeValue").equals("")){
				opdGeneralPsychiatricCaseRecord.setEpisodicTypeValue(box.getString("episodicTypeValue"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEpisodicTypeValue("");
				}
			if(box.getString("numberOfEpisodes") != null && !box.getString("numberOfEpisodes").equals("")){
				opdGeneralPsychiatricCaseRecord.setNumberOfEpisodes(Integer.parseInt(box.getString("numberOfEpisodes")));
				}else{
					opdGeneralPsychiatricCaseRecord.setNumberOfEpisodes(0);
				}
			if(box.getString("ageOfOnset") != null && !box.getString("ageOfOnset").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgeOfOnset(Integer.parseInt(box.getString("ageOfOnset")));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgeOfOnset(0);
				}
			if(box.getString("cwrar") != null && !box.getString("cwrar").equals("")){
				opdGeneralPsychiatricCaseRecord.setCwrar(box.getString("cwrar"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCwrar("");
				}
			if(box.getString("notKnow") != null && !box.getString("notKnow").equals("")){
				opdGeneralPsychiatricCaseRecord.setNotKnow(box.getString("notKnow"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNotKnow("");
				}
			
			if(box.getString("precipitation") != null && !box.getString("precipitation").equals("")){
				opdGeneralPsychiatricCaseRecord.setPrecipitation(box.getString("precipitation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPrecipitation("");
				}
			if(box.getString("precipitationSpecify") != null && !box.getString("precipitationSpecify").equals("")){
				opdGeneralPsychiatricCaseRecord.setPrecipitationSpecify(box.getString("precipitationSpecify"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPrecipitationSpecify("");
				}
			
			
			
			if(box.getString("progressOfSymptoms") != null && !box.getString("progressOfSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setProgressOfSymptoms(box.getString("progressOfSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setProgressOfSymptoms("");
				}
			
			if(box.getString("congitiveSymptoms") != null && !box.getString("congitiveSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setCongitiveSymptoms(box.getString("congitiveSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCongitiveSymptoms("");
				}
			if(box.getString("onsetCongitiveSymptoms") != null && !box.getString("onsetCongitiveSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setOnsetCongitiveSymptoms(box.getString("onsetCongitiveSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOnsetCongitiveSymptoms("");
				}
			if(box.getString("overShort") != null && !box.getString("overShort").equals("")){
				opdGeneralPsychiatricCaseRecord.setOverShort(box.getString("overShort"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOverShort("");
				}
			if(box.getString("gradual") != null && !box.getString("gradual").equals("")){
				opdGeneralPsychiatricCaseRecord.setGradual(box.getString("gradual"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGradual("");
				}
			if(box.getString("distrurbedConsciousness") != null && !box.getString("distrurbedConsciousness").equals("")){
				opdGeneralPsychiatricCaseRecord.setDistrurbedConsciousness(box.getString("distrurbedConsciousness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDistrurbedConsciousness("");
				}
			if(box.getString("rcoaoe") != null && !box.getString("rcoaoe").equals("")){
				opdGeneralPsychiatricCaseRecord.setRcoaoe(box.getString("rcoaoe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRcoaoe("");
				}
			if(box.getString("iaac") != null && !box.getString("iaac").equals("")){
				opdGeneralPsychiatricCaseRecord.setIaac(box.getString("iaac"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIaac("");
				}
			if(box.getString("perceptualDisturbance") != null && !box.getString("perceptualDisturbance").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerceptualDisturbance(box.getString("perceptualDisturbance"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerceptualDisturbance("");
				}
			if(box.getString("fdtcod") != null && !box.getString("fdtcod").equals("")){
				opdGeneralPsychiatricCaseRecord.setFdtcod(box.getString("fdtcod"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFdtcod("");
				}
			if(box.getString("memoryImpairment") != null && !box.getString("memoryImpairment").equals("")){
				opdGeneralPsychiatricCaseRecord.setMemoryImpairment(box.getString("memoryImpairment"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMemoryImpairment("");
				}
			if(box.getString("aphasia") != null && !box.getString("aphasia").equals("")){
				opdGeneralPsychiatricCaseRecord.setAphasia(box.getString("aphasia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAphraxia("");
				}
			if(box.getString("aphraxia") != null && !box.getString("aphraxia").equals("")){
				opdGeneralPsychiatricCaseRecord.setAphraxia(box.getString("aphraxia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAphraxia("");
				}
			if(box.getString("agnosia") != null && !box.getString("agnosia").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgnosia(box.getString("agnosia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgnosia("");
				}
			if(box.getString("def") != null && !box.getString("def").equals("")){
				opdGeneralPsychiatricCaseRecord.setDef(box.getString("def"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDef("");
				}
			if(box.getString("disorientation") != null && !box.getString("disorientation").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorientation(box.getString("disorientation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorientation("");
				}
			if(box.getString("psychoticSymptoms") != null && !box.getString("psychoticSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setPsychoticSymptoms(box.getString("psychoticSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPsychoticSymptoms("");
				}
			if(box.getString("suspiciousness") != null && !box.getString("suspiciousness").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuspiciousness(box.getString("suspiciousness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuspiciousness("");
				}
			if(box.getString("delusionalBehaviour") != null && !box.getString("delusionalBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalBehaviour(box.getString("delusionalBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalBehaviour("");
				}
			if(box.getString("hallucinatoryBehaviour") != null && !box.getString("hallucinatoryBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setHallucinatoryBehaviour(box.getString("hallucinatoryBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHallucinatoryBehaviour("");
				}
			if(box.getString("disorganisedSpeech") != null && !box.getString("disorganisedSpeech").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorganisedSpeech(box.getString("disorganisedSpeech"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorganisedSpeech("");
				}
			if(box.getString("disorganisedBehaviour") != null && !box.getString("disorganisedBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorganisedBehaviour(box.getString("disorganisedBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorganisedBehaviour("");
				}
			if(box.getString("catatonicBehaviour") != null && !box.getString("catatonicBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setCatatonicBehaviour(box.getString("catatonicBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCatatonicBehaviour("");
				}
			if(box.getString("socialWithdrawal") != null && !box.getString("socialWithdrawal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSocialWithdrawal(box.getString("socialWithdrawal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSocialWithdrawal("");
				}
			if(box.getString("emotionalBlunting") != null && !box.getString("emotionalBlunting").equals("")){
				opdGeneralPsychiatricCaseRecord.setEmotionalBlunting(box.getString("emotionalBlunting"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEmotionalBlunting("");
				}
			if(box.getString("manicSymptoms") != null && !box.getString("manicSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setManicSymptoms(box.getString("manicSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setManicSymptoms("");
				}
			if(box.getString("eeoim") != null && !box.getString("eeoim").equals("")){
				opdGeneralPsychiatricCaseRecord.setEeoim(box.getString("eeoim"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEeoim("");
				}
			if(box.getString("dnfs") != null && !box.getString("dnfs").equals("")){
				opdGeneralPsychiatricCaseRecord.setDnfs(box.getString("dnfs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDnfs("");
				}
			if(box.getString("grandioseBehaviour") != null && !box.getString("grandioseBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setGrandioseBehaviour(box.getString("grandioseBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGrandioseBehaviour("");
				}
			if(box.getString("optkt") != null && !box.getString("optkt").equals("")){
				opdGeneralPsychiatricCaseRecord.setOptkt(box.getString("optkt"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOptkt("");
				}
			if(box.getString("overactivity") != null && !box.getString("overactivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setOveractivity(box.getString("overactivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOveractivity("");
				}
			if(box.getString("eiiip") != null && !box.getString("eiiip").equals("")){
				opdGeneralPsychiatricCaseRecord.setEiiip(box.getString("eiiip"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEiiip("");
				}
			if(box.getString("rsim") != null && !box.getString("rsim").equals("")){
				opdGeneralPsychiatricCaseRecord.setRsim(box.getString("rsim"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRsim("");
				}
			
			if(box.getString("depressiveSymptoms") != null && !box.getString("depressiveSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setDepressiveSymptoms(box.getString("depressiveSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDepressiveSymptoms("");
				}
			if(box.getString("soorodm") != null && !box.getString("soorodm").equals("")){
				opdGeneralPsychiatricCaseRecord.setSoorodm(box.getString("soorodm"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSoorodm("");
				}
			if(box.getString("loioe") != null && !box.getString("loioe").equals("")){
				opdGeneralPsychiatricCaseRecord.setLoioe(box.getString("loioe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLoioe("");
				}
			if(box.getString("slowgiw") != null && !box.getString("slowgiw").equals("")){
				opdGeneralPsychiatricCaseRecord.setSlowgiw(box.getString("slowgiw"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSlowgiw("");
				}
			if(box.getString("ioh") != null && !box.getString("ioh").equals("")){
				opdGeneralPsychiatricCaseRecord.setIoh(box.getString("ioh"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIoh("");
				}
			if(box.getString("paor") != null && !box.getString("paor").equals("")){
				opdGeneralPsychiatricCaseRecord.setPaor(box.getString("paor"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPaor("");
				}
			if(box.getString("loef") != null && !box.getString("loef").equals("")){
				opdGeneralPsychiatricCaseRecord.setLoef(box.getString("loef"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLoef("");
				}
			if(box.getString("wg") != null && !box.getString("wg").equals("")){
				opdGeneralPsychiatricCaseRecord.setWg(box.getString("wg"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWg("");
				}
			if(box.getString("locoi") != null && !box.getString("locoi").equals("")){
				opdGeneralPsychiatricCaseRecord.setLocoi(box.getString("locoi"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLocoi("");
				}
			if(box.getString("wg") != null && !box.getString("wg").equals("")){
				opdGeneralPsychiatricCaseRecord.setWg(box.getString("wg"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWg("");
				}
			if(box.getString("locoi") != null && !box.getString("locoi").equals("")){
				opdGeneralPsychiatricCaseRecord.setLocoi(box.getString("locoi"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLocoi("");
				}
			if(box.getString("delusional") != null && !box.getString("delusional").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusional(box.getString("delusional"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusional("");
				}
			if(box.getString("delusionalVal") != null && !box.getString("delusionalVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalVal(box.getString("delusionalVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalVal("");
				}
			if(box.getString("suicidalBehaviour") != null && !box.getString("suicidalBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalBehaviour(box.getString("suicidalBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalBehaviour("");
				}
			if(box.getString("anxietySymptoms") != null && !box.getString("anxietySymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setAnxietySymptoms(box.getString("anxietySymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAnxietySymptoms("");
				}
			if(box.getString("anxietySymptomsVal") != null && !box.getString("anxietySymptomsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAnxietySymptomsVal(box.getString("anxietySymptomsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAnxietySymptomsVal("");
				}
			if(box.getString("sagis") != null && !box.getString("sagis").equals("")){
				opdGeneralPsychiatricCaseRecord.setSagis(box.getString("sagis"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSagis("");
				}
			if(box.getString("sagisVal") != null && !box.getString("sagisVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSagisVal(box.getString("sagisVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSagisVal("");
				}
			if(box.getString("eatingSymptoms") != null && !box.getString("eatingSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setEatingSymptoms(box.getString("eatingSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEatingSymptoms("");
				}
			if(box.getString("eatingSymptomsVal") != null && !box.getString("eatingSymptomsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setEatingSymptomsVal(box.getString("eatingSymptomsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEatingSymptomsVal("");
				}
			if(box.getString("sleepSymptoms") != null && !box.getString("sleepSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setSleepSymptoms(box.getString("sleepSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSleepSymptoms("");
				}
			if(box.getString("impulseDyscontrolSymptoms") != null && !box.getString("impulseDyscontrolSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptoms(box.getString("impulseDyscontrolSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptoms("");
				}
			if(box.getString("impulseDyscontrolSymptomsVal") != null && !box.getString("impulseDyscontrolSymptomsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptomsVal(box.getString("impulseDyscontrolSymptomsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptomsVal("");
				}
			if(box.getString("futureDetailsVal") != null && !box.getString("futureDetailsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setFutureDetailsVal(box.getString("futureDetailsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFutureDetailsVal("");
				}
			if(box.getString("suicidal") != null && !box.getString("suicidal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidal(box.getString("suicidal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidal("");
				}
			if(box.getString("selfMutilating") != null && !box.getString("selfMutilating").equals("")){
				opdGeneralPsychiatricCaseRecord.setSelfmutilating(box.getString("selfMutilating"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSelfmutilating("");
				}
			if(box.getString("violent") != null && !box.getString("violent").equals("")){
				opdGeneralPsychiatricCaseRecord.setViolent(box.getString("violent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setViolent("");
				}
			if(box.getString("homicidal") != null && !box.getString("homicidal").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidal(box.getString("homicidal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidal("");
				}
			if(box.getString("detailOne") != null && !box.getString("detailOne").equals("")){
				opdGeneralPsychiatricCaseRecord.setDetailOne(box.getString("detailOne"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDetailOne("");
				}
			if(box.getString("notOnMedications") != null && !box.getString("notOnMedications").equals("")){
				opdGeneralPsychiatricCaseRecord.setNotOnMedications(box.getString("notOnMedications"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNotOnMedications("");
				}
			if(box.getString("onMedications") != null && !box.getString("onMedications").equals("")){
				opdGeneralPsychiatricCaseRecord.setOnMedications(box.getString("onMedications"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOnMedications("");
				}
			if(box.getString("detailTwo") != null && !box.getString("detailTwo").equals("")){
				opdGeneralPsychiatricCaseRecord.setDetailTwo(box.getString("detailTwo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDetailTwo("");
				}
			if(box.getString("dgreeOfDrugAdherence") != null && !box.getString("dgreeOfDrugAdherence").equals("")){
				opdGeneralPsychiatricCaseRecord.setDgreeOfDrugAdherence(box.getString("dgreeOfDrugAdherence"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDgreeOfDrugAdherence("");
				}
			if(box.getString("pastPsychiatricHistory") != null && !box.getString("pastPsychiatricHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistory(box.getString("pastPsychiatricHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistory("");
				}
			if(box.getString("pastPsychiatricHistoryVal") != null && !box.getString("pastPsychiatricHistoryVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistoryVal(box.getString("pastPsychiatricHistoryVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistoryVal("");
				}
			if(box.getString("pastHistoryOfDeliberateSelfHarm") != null && !box.getString("pastHistoryOfDeliberateSelfHarm").equals("")){
				opdGeneralPsychiatricCaseRecord.setPasthistoryOfDeliberateSelfHarm(box.getString("pastHistoryOfDeliberateSelfHarm"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPasthistoryOfDeliberateSelfHarm("");
				}
			if(box.getString("perviousAttemptFantasisedSuicide") != null && !box.getString("perviousAttemptFantasisedSuicide").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerviousAttemptFantasisedSuicide(box.getString("perviousAttemptFantasisedSuicide"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerviousAttemptFantasisedSuicide("");
				}
			if(box.getString("impulsivePlanned") != null && !box.getString("impulsivePlanned").equals("")){
				opdGeneralPsychiatricCaseRecord.setImpulsivePlanned(box.getString("impulsivePlanned"));
				}else{
					opdGeneralPsychiatricCaseRecord.setImpulsivePlanned("");
				}
			
			if(box.getString("manipulativeIntent") != null && !box.getString("manipulativeIntent").equals("")){
				opdGeneralPsychiatricCaseRecord.setManipulativeintent(box.getString("manipulativeIntent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setManipulativeintent("");
				}
			if(box.getString("circumstances") != null && !box.getString("circumstances").equals("")){
				opdGeneralPsychiatricCaseRecord.setCircumstances(box.getString("circumstances"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCircumstances("");
				}
			if(box.getString("pastPsychiatricTreatmentHistory") != null && !box.getString("pastPsychiatricTreatmentHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastPsychiatricTreatmentHistory(box.getString("pastPsychiatricTreatmentHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastPsychiatricTreatmentHistory("");
				}
			if(box.getString("noKnownDiseases") != null && !box.getString("noKnownDiseases").equals("")){
				opdGeneralPsychiatricCaseRecord.setNoKnownDiseases(box.getString("noKnownDiseases"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNoKnownDiseases("");
				}
			if(box.getString("allergiesSensitvities") != null && !box.getString("allergiesSensitvities").equals("")){
				opdGeneralPsychiatricCaseRecord.setAllergiesSensitvities(box.getString("allergiesSensitvities"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAllergiesSensitvities("");
				}
			if(box.getString("allergiesSensitvitiesVal") != null && !box.getString("allergiesSensitvitiesVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAllergiesSensitvitiesVal(box.getString("allergiesSensitvitiesVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAllergiesSensitvitiesVal("");
				}
			if(box.getString("seizuresVal") != null && !box.getString("seizuresVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSeizuresVal(box.getString("seizuresVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSeizuresVal("");
				}
			if(box.getString("headTraumaVal") != null && !box.getString("headTraumaVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setHeadTraumaVal(box.getString("headTraumaVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHeadTraumaVal("");
				}
			if(box.getString("nonPsychiatric") != null && !box.getString("nonPsychiatric").equals("")){
				opdGeneralPsychiatricCaseRecord.setNonPsychiatric(box.getString("nonPsychiatric"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNonPsychiatric("");
				}
			if(box.getString("nonPsychiatricVal") != null && !box.getString("nonPsychiatricVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setNonPsychiatricVal(box.getString("nonPsychiatricVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNonPsychiatricVal("");
				}
			if(box.getString("familyHistoryVal") != null && !box.getString("familyHistoryVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setFamilyHistoryVal(box.getString("familyHistoryVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFamilyHistoryVal("");
				}
			if(box.getString("ppaed") != null && !box.getString("ppaed").equals("")){
				opdGeneralPsychiatricCaseRecord.setPpaed(box.getString("ppaed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPpaed("");
				}
			if(box.getString("detailsThree") != null && !box.getString("detailsThree").equals("")){
				opdGeneralPsychiatricCaseRecord.setDetailsThree(box.getString("detailsThree"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDetailsThree("");
				}
			if(box.getString("congnitiveDevelopment") != null && !box.getString("congnitiveDevelopment").equals("")){
				opdGeneralPsychiatricCaseRecord.setCongnitiveDevelopment(box.getString("congnitiveDevelopment"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCongnitiveDevelopment("");
				}
			if(box.getString("motorDevelopment") != null && !box.getString("motorDevelopment").equals("")){
				opdGeneralPsychiatricCaseRecord.setMotorDevelopment(box.getString("motorDevelopment"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMotorDevelopment("");
				}
			if(box.getString("behaviourChildhood") != null && !box.getString("behaviourChildhood").equals("")){
				opdGeneralPsychiatricCaseRecord.setBehaviourChildhood(box.getString("behaviourChildhood"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBehaviourChildhood("");
				}
			if(box.getString("significantPhysicalillness") != null && !box.getString("significantPhysicalillness").equals("")){
				opdGeneralPsychiatricCaseRecord.setSignificantPhysicalillness(box.getString("significantPhysicalillness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSignificantPhysicalillness("");
				}
			if(box.getString("educationHistory") != null && !box.getString("educationHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setEducationHistory(box.getString("educationHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEducationHistory("");
				}
			if(box.getString("occupationalHistory") != null && !box.getString("occupationalHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setOccupationalHistory(box.getString("occupationalHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOccupationalHistory("");
				}
			if(box.getString("sexualHistory") != null && !box.getString("sexualHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setSexualHistory(box.getString("sexualHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSexualHistory("");
				}
			if(box.getString("menstrualHistory") != null && !box.getString("menstrualHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setMenstrualHistory(box.getString("menstrualHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMaritalRelationshiphistory("");
				}
			if(box.getString("maritalRelationshiphistory") != null && !box.getString("maritalRelationshiphistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setMaritalRelationshiphistory(box.getString("maritalRelationshiphistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMaritalRelationshiphistory("");
				}
			if(box.getString("socialHistory") != null && !box.getString("socialHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setSocialHistory(box.getString("socialHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSocialHistory("");
				}
			if(box.getString("substanceHistory") != null && !box.getString("substanceHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceHistory(box.getString("substanceHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceHistory("");
				}
			if(box.getString("substanceOfChoice") != null && !box.getString("substanceOfChoice").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceOfChoice(box.getString("substanceOfChoice"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceOfChoice("");
				}
			if(box.getString("substanceOfChoiceVal") != null && !box.getString("substanceOfChoiceVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceOfChoiceVal(box.getString("substanceOfChoiceVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceOfChoiceVal("");
				}
			if(box.getString("ageOnSet") != null && !box.getString("ageOnSet").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgeOnSet(box.getString("ageOnSet"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgeOnSet("");
				}
			if(box.getString("currentUsePattern") != null && !box.getString("currentUsePattern").equals("")){
				opdGeneralPsychiatricCaseRecord.setCurrentUsePattern(box.getString("currentUsePattern"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCurrentUsePattern("");
				}
			if(box.getString("dateOfLastUse") != null && !box.getString("dateOfLastUse").equals("")){
				opdGeneralPsychiatricCaseRecord.setDateOfLastUse(HMSUtil.convertStringTypeDateToDateType(box.getString("dateOfLastUse")));
				}else{
					opdGeneralPsychiatricCaseRecord.setDateOfLastUse(null);
				}
			if(box.getString("othersVal") != null && !box.getString("othersVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersVal(box.getString("othersVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersVal("");
				}
			if(box.getString("currentWs") != null && !box.getString("currentWs").equals("")){
				opdGeneralPsychiatricCaseRecord.setCurrentWs(box.getString("currentWs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCurrentWs("");
				}
			if(box.getString("currentWsVal") != null && !box.getString("currentWsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setCurrentWsVal(box.getString("currentWsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCurrentWsVal("");
				}
			if(box.getString("pastWs") != null && !box.getString("pastWs").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastWs(box.getString("pastWs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastWs("");
				}
			if(box.getString("pastWsVal") != null && !box.getString("pastWsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastWsVal(box.getString("pastWsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastWsVal("");
				}
			if(box.getString("tolerance") != null && !box.getString("tolerance").equals("")){
				opdGeneralPsychiatricCaseRecord.setTolerance(box.getString("tolerance"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTolerance("");
				}
			if(box.getString("locc") != null && !box.getString("locc").equals("")){
				opdGeneralPsychiatricCaseRecord.setLocc(box.getString("locc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLocc("");
				}
			if(box.getString("fatc") != null && !box.getString("fatc").equals("")){
				opdGeneralPsychiatricCaseRecord.setFatc(box.getString("fatc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFatc("");
				}
			if(box.getString("tsodra") != null && !box.getString("tsodra").equals("")){
				opdGeneralPsychiatricCaseRecord.setTsodra(box.getString("tsodra"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTsodra("");
				}
			if(box.getString("iagu") != null && !box.getString("iagu").equals("")){
				opdGeneralPsychiatricCaseRecord.setIagu(box.getString("iagu"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIagu("");
				}
			if(box.getString("cudp") != null && !box.getString("cudp").equals("")){
				opdGeneralPsychiatricCaseRecord.setCudp(box.getString("cudp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCudp("");
				}
			if(box.getString("fimro") != null && !box.getString("fimro").equals("")){
				opdGeneralPsychiatricCaseRecord.setFimro(box.getString("fimro"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFimro("");
				}
			if(box.getString("hazardousUse") != null && !box.getString("hazardousUse").equals("")){
				opdGeneralPsychiatricCaseRecord.setHazardousUse(box.getString("hazardousUse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHazardousUse("");
				}
			if(box.getString("substanceRelatedLegalProblem") != null && !box.getString("substanceRelatedLegalProblem").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceRelatedLegalProblem(box.getString("substanceRelatedLegalProblem"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceRelatedLegalProblem("");
				}
			if(box.getString("substanceRelatedLegalProblemVal") != null && !box.getString("substanceRelatedLegalProblemVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstancerelatedlegalproblemval(box.getString("substanceRelatedLegalProblemVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstancerelatedlegalproblemval("");
				}
			if(box.getString("lpoaitp") != null && !box.getString("lpoaitp").equals("")){
				opdGeneralPsychiatricCaseRecord.setLpoaitp(box.getString("lpoaitp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLpoaitp("");
				}
			if(box.getString("ptfsud") != null && !box.getString("ptfsud").equals("")){
				opdGeneralPsychiatricCaseRecord.setPtfsud(box.getString("ptfsud"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPtfsud("");
				}
			if(box.getString("ptfsudVal") != null && !box.getString("ptfsudVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPtfsudVal(box.getString("ptfsudVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPtfsudVal("");
				}
			if(box.getString("premorbidPersonality") != null && !box.getString("premorbidPersonality").equals("")){
				opdGeneralPsychiatricCaseRecord.setPremorbidPersonality(box.getString("premorbidPersonality"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPremorbidPersonality("");
				}
			if(box.getString("abnormalPersonality") != null && !box.getString("abnormalPersonality").equals("")){
				opdGeneralPsychiatricCaseRecord.setAbnormalPersonality(box.getString("abnormalPersonality"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAbnormalPersonality("");
				}
			if(box.getString("pmsamom") != null && !box.getString("pmsamom").equals("")){
				opdGeneralPsychiatricCaseRecord.setPmsamom(box.getString("pmsamom"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPmsamom("");
				}
			if(box.getString("ppodfsrarroeeiis") != null && !box.getString("ppodfsrarroeeiis").equals("")){
				opdGeneralPsychiatricCaseRecord.setPpodfsrarroeeiis(box.getString("ppodfsrarroeeiis"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPpodfsrarroeeiis("");
				}
			if(box.getString("dwrcapdaeob") != null && !box.getString("dwrcapdaeob").equals("")){
				opdGeneralPsychiatricCaseRecord.setDwrcapdaeob(box.getString("dwrcapdaeob"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDwrcapdaeob("");
				}
			if(box.getString("dfavoroo") != null && !box.getString("dfavoroo").equals("")){
				opdGeneralPsychiatricCaseRecord.setDfavoroo(box.getString("dfavoroo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDfavoroo("");
				}
			if(box.getString("iiirsiaaic") != null && !box.getString("iiirsiaaic").equals("")){
				opdGeneralPsychiatricCaseRecord.setIiirsiaaic(box.getString("iiirsiaaic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIiirsiaaic("");
				}
			if(box.getString("eeaas") != null && !box.getString("eeaas").equals("")){
				opdGeneralPsychiatricCaseRecord.setEeaas(box.getString("eeaas"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEeaas("");
				}
			if(box.getString("gnfaaloe") != null && !box.getString("gnfaaloe").equals("")){
				opdGeneralPsychiatricCaseRecord.setGnfaaloe(box.getString("gnfaaloe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGnfaaloe("");
				}
			if(box.getString("sifoiahtne") != null && !box.getString("sifoiahtne").equals("")){
				opdGeneralPsychiatricCaseRecord.setSifoiahtne(box.getString("sifoiahtne"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSifoiahtne("");
				}
			if(box.getString("entbtcosacbafos") != null && !box.getString("entbtcosacbafos").equals("")){
				opdGeneralPsychiatricCaseRecord.setEntbtcosacbafos(box.getString("entbtcosacbafos"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEntbtcosacbafos("");
				}
			if(box.getString("pwopamaic") != null && !box.getString("pwopamaic").equals("")){
				opdGeneralPsychiatricCaseRecord.setPwopamaic(box.getString("pwopamaic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPwopamaic("");
				}
			if(box.getString("alertLOC") != null && !box.getString("alertLOC").equals("")){
				opdGeneralPsychiatricCaseRecord.setAlertLOC(box.getString("alertLOC"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAlertLOC("");
				}
			if(box.getString("droxsy") != null && !box.getString("droxsy").equals("")){
				opdGeneralPsychiatricCaseRecord.setDroxsy(box.getString("droxsy"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDroxsy("");
				}
			if(box.getString("stuporose") != null && !box.getString("stuporose").equals("")){
				opdGeneralPsychiatricCaseRecord.setStuporose(box.getString("stuporose"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStuporose("");
				}
			if(box.getString("comatose") != null && !box.getString("comatose").equals("")){
				opdGeneralPsychiatricCaseRecord.setComatose(box.getString("comatose"));
				}else{
					opdGeneralPsychiatricCaseRecord.setComatose("");
				}
			if(box.getString("fluctuting") != null && !box.getString("fluctuting").equals("")){
				opdGeneralPsychiatricCaseRecord.setFluctuting(box.getString("fluctuting"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFluctuting("");
				}
			if(box.getString("orienation") != null && !box.getString("orienation").equals("")){
				opdGeneralPsychiatricCaseRecord.setOrienation(box.getString("orienation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOrienation("");
				}
			if(box.getString("orienationImpairedVal") != null && !box.getString("orienationImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setOrienationImpairedVal(box.getString("orienationImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOrienationImpairedVal("");
				}
			if(box.getString("person") != null && !box.getString("person").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerson(box.getString("person"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerson("");
				}
			if(box.getString("personImpairedVal") != null && !box.getString("personImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPersonImpairedVal(box.getString("personImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPersonImpairedVal("");
				}
			if(box.getString("timeVal") != null && !box.getString("timeVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setTimeVal(box.getString("timeVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTimeVal("");
				}
			if(box.getString("timeImpairedVal") != null && !box.getString("timeImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setTimeImpairedVal(box.getString("timeImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTimeImpairedVal("");
				}
			if(box.getString("placeImpairedVal") != null && !box.getString("placeImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPlaceImpairedVal(box.getString("placeImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPlaceImpairedVal("");
				}
			if(box.getString("appearanceAndBehaviour") != null && !box.getString("appearanceAndBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setAppearanceAndBehaviour(box.getString("appearanceAndBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAppearanceAndBehaviour("");
				}
			if(box.getString("wellGroomed") != null && !box.getString("wellGroomed").equals("")){
				opdGeneralPsychiatricCaseRecord.setWellGroomed(box.getString("wellGroomed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWellGroomed("");
				}
			if(box.getString("dishevelled") != null && !box.getString("dishevelled").equals("")){
				opdGeneralPsychiatricCaseRecord.setDishevelled(box.getString("dishevelled"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDishevelled("");
				}
			if(box.getString("bizzare") != null && !box.getString("bizzare").equals("")){
				opdGeneralPsychiatricCaseRecord.setBizzare(box.getString("bizzare"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBizzare("");
				}
			if(box.getString("gross") != null && !box.getString("gross").equals("")){
				opdGeneralPsychiatricCaseRecord.setGross(box.getString("gross"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGross("");
				}
			if(box.getString("attitude") != null && !box.getString("attitude").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttitude(box.getString("attitude"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttitude("");
				}
			if(box.getString("cooperative") != null && !box.getString("cooperative").equals("")){
				opdGeneralPsychiatricCaseRecord.setCooperative(box.getString("cooperative"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCooperative("");
				}
			if(box.getString("guarded") != null && !box.getString("guarded").equals("")){
				opdGeneralPsychiatricCaseRecord.setGuarded(box.getString("guarded"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGuarded("");
				}
			if(box.getString("indifferent") != null && !box.getString("indifferent").equals("")){
				opdGeneralPsychiatricCaseRecord.setIndifferent(box.getString("indifferent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIndifferent("");
				}
			if(box.getString("withdrawnPreoccupied") != null && !box.getString("withdrawnPreoccupied").equals("")){
				opdGeneralPsychiatricCaseRecord.setWithdrawnPreoccupied(box.getString("withdrawnPreoccupied"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWithdrawnPreoccupied("");
				}
			if(box.getString("silly") != null && !box.getString("silly").equals("")){
				opdGeneralPsychiatricCaseRecord.setSilly(box.getString("silly"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSilly("");
				}
			if(box.getString("uncooperative") != null && !box.getString("uncooperative").equals("")){
				opdGeneralPsychiatricCaseRecord.setUncooperative(box.getString("uncooperative"));
				}else{
					opdGeneralPsychiatricCaseRecord.setUncooperative("");
				}
			if(box.getString("belligerent") != null && !box.getString("belligerent").equals("")){
				opdGeneralPsychiatricCaseRecord.setBelligerent(box.getString("belligerent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBelligerent("");
				}
			if(box.getString("eyeContract") != null && !box.getString("eyeContract").equals("")){
				opdGeneralPsychiatricCaseRecord.setEyeContract(box.getString("eyeContract"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEyeContract("");
				}
			if(box.getString("rapport") != null && !box.getString("rapport").equals("")){
				opdGeneralPsychiatricCaseRecord.setRapport(box.getString("rapport"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRapport("");
				}
			if(box.getString("psychomotorActivity") != null && !box.getString("psychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setPsychomotorActivity(box.getString("psychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPsychomotorActivity("");
				}
			if(box.getString("normalPsychomotorActivity") != null && !box.getString("normalPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setNormalPsychomotorActivity(box.getString("normalPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNormalPsychomotorActivity("");
				}
			if(box.getString("increasedPsychomotorActivity") != null && !box.getString("increasedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setIncreasedPsychomotorActivity(box.getString("increasedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIncreasedPsychomotorActivity("");
				}
			if(box.getString("excitedPsychomotorActivity") != null && !box.getString("excitedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setExcitedPsychomotorActivity(box.getString("excitedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setExcitedPsychomotorActivity("");
				}
			if(box.getString("agitatedPsychomotorActivity") != null && !box.getString("agitatedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgitatedPsychomotorActivity(box.getString("agitatedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgitatedPsychomotorActivity("");
				}
			if(box.getString("disorganisedPsychomotorActivity") != null && !box.getString("disorganisedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorganisedPsychomotorActivity(box.getString("disorganisedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorganisedPsychomotorActivity("");
				}
			if(box.getString("aggressivePsychomotorActivity") != null && !box.getString("aggressivePsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setAggressivePsychomotorActivity(box.getString("aggressivePsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAggressivePsychomotorActivity("");
				}
			if(box.getString("repetitivePsychomotorActivity") != null && !box.getString("repetitivePsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setRepetitivePsychomotorActivity(box.getString("repetitivePsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRepetitivePsychomotorActivity("");
				}
			if(box.getString("decreasedPsychomotorActivity") != null && !box.getString("decreasedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setDecreasedPsychomotorActivity(box.getString("decreasedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDecreasedPsychomotorActivity("");
				}
			if(box.getString("catatonicPsychomotorActivity") != null && !box.getString("catatonicPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setCatatonicPsychomotorActivity(box.getString("catatonicPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCatatonicPsychomotorActivity("");
				}
			if(box.getString("bradykinesiaPsychomotorActivity") != null && !box.getString("bradykinesiaPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setBradykinesiaPsychomotorActivity(box.getString("bradykinesiaPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBradykinesiaPsychomotorActivity("");
				}
			if(box.getString("talk") != null && !box.getString("talk").equals("")){
				opdGeneralPsychiatricCaseRecord.setTalk(box.getString("talk"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTalk("");
				}
			if(box.getString("talkImpairedVal") != null && !box.getString("talkImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setTalkimpairedVal(box.getString("talkImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTalkimpairedVal("");
				}
			if(box.getString("srotq") != null && !box.getString("srotq").equals("")){
				opdGeneralPsychiatricCaseRecord.setSrotq(box.getString("srotq"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSrotq("");
				}
			if(box.getString("quantum") != null && !box.getString("quantum").equals("")){
				opdGeneralPsychiatricCaseRecord.setQuantum(box.getString("quantum"));
				}else{
					opdGeneralPsychiatricCaseRecord.setQuantum("");
				}
			if(box.getString("quantumVal") != null && !box.getString("quantumVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setQuantumVal(box.getString("quantumVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setQuantumVal("");
				}
			if(box.getString("rate") != null && !box.getString("rate").equals("")){
				opdGeneralPsychiatricCaseRecord.setRate(box.getString("k"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRate("");
				}
			
			
			
			if(box.getString("tone") != null && !box.getString("tone").equals("")){
				opdGeneralPsychiatricCaseRecord.setTone(box.getString("tone"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTone("");
				}
			if(box.getString("mute") != null && !box.getString("mute").equals("")){
				opdGeneralPsychiatricCaseRecord.setMute(box.getString("mute"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMute("");
				}
			if(box.getString("muteVal") != null && !box.getString("muteVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteVal(box.getString("muteVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteVal("");
				}
			if(box.getString("muteImpairedVal") != null && !box.getString("muteImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteImpairedVal(box.getString("muteImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteImpairedVal("");
				}
			if(box.getString("muteValOne") != null && !box.getString("muteValOne").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteValOne(box.getString("muteValOne"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteValOne("");
				}
			if(box.getString("muteValYN") != null && !box.getString("muteValYN").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteValYN(box.getString("muteValYN"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteValYN("");
				}
			if(box.getString("muteValNID") != null && !box.getString("muteValNID").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteValNID(box.getString("muteValNID"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteValNID("");
				}
			if(box.getString("streamAndFormNormal") != null && !box.getString("streamAndFormNormal").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormNormal(box.getString("streamAndFormNormal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormNormal("");
				}
			if(box.getString("streamAndFormLossening") != null && !box.getString("streamAndFormLossening").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormLossening(box.getString("streamAndFormLossening"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormLossening("");
				}
			if(box.getString("streamAndFormFlight") != null && !box.getString("streamAndFormFlight").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormFlight(box.getString("streamAndFormFlight"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormFlight("");
				}
			if(box.getString("streamAndFormCircumstantiality") != null && !box.getString("streamAndFormCircumstantiality").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormCircumstantiality(box.getString("streamAndFormCircumstantiality"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormCircumstantiality("");
				}
			if(box.getString("streamAndFormWor") != null && !box.getString("streamAndFormWor").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormWor(box.getString("streamAndFormWor"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormWor("");
				}
			if(box.getString("streamAndFormNeologism") != null && !box.getString("streamAndFormNeologism").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormNeologism(box.getString("streamAndFormNeologism"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormNeologism("");
				}
			if(box.getString("streamAndFormPerseveration") != null && !box.getString("streamAndFormPerseveration").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormPerseveration(box.getString("streamAndFormPerseveration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormPerseveration("");
				}
			if(box.getString("streamAndFormPoverty") != null && !box.getString("streamAndFormPoverty").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormPoverty(box.getString("streamAndFormPoverty"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormPoverty("");
				}
			if(box.getString("streamAndFormThought") != null && !box.getString("streamAndFormThought").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormThought(box.getString("streamAndFormThought"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormThought("");
				}
			if(box.getString("streamAndFormIncompleted") != null && !box.getString("streamAndFormIncompleted").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormIncompleted(box.getString("streamAndFormIncompleted"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormIncompleted("");
				}
			if(box.getString("streamAndFormPressure") != null && !box.getString("streamAndFormPressure").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormPressure(box.getString("streamAndFormPressure"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormPressure("");
				}
			if(box.getString("streamAndFormVagueness") != null && !box.getString("streamAndFormVagueness").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormVagueness(box.getString("streamAndFormVagueness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormVagueness("");
				}
			if(box.getString("thoughtSample") != null && !box.getString("thoughtSample").equals("")){
				opdGeneralPsychiatricCaseRecord.setThoughtSample(box.getString("thoughtSample"));
				}else{
					opdGeneralPsychiatricCaseRecord.setThoughtSample("");
				}
			if(box.getString("preoccupationsNone") != null && !box.getString("preoccupationsNone").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsNone(box.getString("preoccupationsNone"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsNone("");
				}
			if(box.getString("preoccupationsReligiosity") != null && !box.getString("preoccupationsReligiosity").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsReligiosity(box.getString("preoccupationsReligiosity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsReligiosity("");
				}
			if(box.getString("preoccupationsSomatic") != null && !box.getString("preoccupationsSomatic").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsSomatic(box.getString("preoccupationsSomatic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsSomatic("");
				}
			if(box.getString("preoccupationsHypochondriacal") != null && !box.getString("preoccupationsHypochondriacal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsHypochondriacal(box.getString("preoccupationsHypochondriacal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsHypochondriacal("");
				}
			if(box.getString("preoccupationsHopelessness") != null && !box.getString("preoccupationsHopelessness").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsHopelessness(box.getString("preoccupationsHopelessness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsHopelessness("");
				}
			if(box.getString("preoccupationsWorthlessness") != null && !box.getString("preoccupationsWorthlessness").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsWorthlessness(box.getString("preoccupationsWorthlessness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsWorthlessness("");
				}
			if(box.getString("preoccupationsGuilt") != null && !box.getString("preoccupationsGuilt").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsGuilt(box.getString("preoccupationsGuilt"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsGuilt("");
				}
			if(box.getString("preoccupationsIdeas") != null && !box.getString("preoccupationsIdeas").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsIdeas(box.getString("preoccupationsIdeas"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsIdeas("");
				}
			if(box.getString("preoccupationsOther") != null && !box.getString("preoccupationsOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsOther(box.getString("preoccupationsOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsOther("");
				}
			if(box.getString("preoccupationsOtherVal") != null && !box.getString("preoccupationsOtherVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsOtherVal(box.getString("preoccupationsOtherVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsOtherVal("");
				}
			if(box.getString("suicidalAP") != null && !box.getString("suicidalAP").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalAP(box.getString("suicidalAP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalAP("");
				}
			if(box.getString("suicidalNP") != null && !box.getString("suicidalNP").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalNP(box.getString("suicidalNP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalNP("");
				}
			if(box.getString("suicidalOther") != null && !box.getString("suicidalOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalOther(box.getString("suicidalOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalOther("");
				}
			if(box.getString("homicidalAP") != null && !box.getString("homicidalAP").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidalAP(box.getString("homicidalAP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidalAP("");
				}
			if(box.getString("homicidalNP") != null && !box.getString("homicidalNP").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidalNP(box.getString("homicidalNP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidalNP("");
				}
			if(box.getString("homicidalOther") != null && !box.getString("homicidalOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidalOther(box.getString("homicidalOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidalOther("");
				}
			if(box.getString("phobiaAbsent") != null && !box.getString("phobiaAbsent").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaAbsent(box.getString("phobiaAbsent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaAbsent("");
				}
			if(box.getString("phobiaAgora") != null && !box.getString("phobiaAgora").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaAgora(box.getString("phobiaAgora"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaAgora("");
				}
			if(box.getString("phobiaSocial") != null && !box.getString("phobiaSocial").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaSocial(box.getString("phobiaSocial"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaSocial("");
				}
			if(box.getString("phobiaSpecific") != null && !box.getString("phobiaSpecific").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaSpecific(box.getString("phobiaSpecific"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaSpecific("");
				}
			if(box.getString("phobiaOther") != null && !box.getString("phobiaOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaOther(box.getString("phobiaOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaOther("");
				}
			if(box.getString("delusionsAbsent") != null && !box.getString("delusionsAbsent").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsAbsent(box.getString("delusionsAbsent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsAbsent("");
				}
			if(box.getString("delusionsDO") != null && !box.getString("delusionsDO").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsDO(box.getString("delusionsDO"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsDO("");
				}
			if(box.getString("delusionsGrandiose") != null && !box.getString("delusionsGrandiose").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsGrandiose(box.getString("delusionsGrandiose"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsGrandiose("");
				}
			if(box.getString("delusionsDP") != null && !box.getString("delusionsDP").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsDP(box.getString("delusionsDP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsDP("");
				}
			if(box.getString("delusionalSomaticPassivity") != null && !box.getString("delusionalSomaticPassivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsDPAnother(box.getString("delusionalSomaticPassivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsDPAnother("");
				}
			if(box.getString("delusionsSomatic") != null && !box.getString("delusionsSomatic").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsSomatic(box.getString("delusionsSomatic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsSomatic("");
				}
			if(box.getString("delusionsJealous") != null && !box.getString("delusionsJealous").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsJealous(box.getString("delusionsJealous"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsJealous("");
				}
			if(box.getString("delusionsGuilty") != null && !box.getString("delusionsGuilty").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsGuilty(box.getString("delusionsGuilty"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsGuilty("");
				}
			if(box.getString("delusionsNihilistic") != null && !box.getString("delusionsNihilistic").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsNihilistic(box.getString("delusionsNihilistic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsNihilistic("");
				}
			if(box.getString("delusionsBizzare") != null && !box.getString("delusionsBizzare").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsBizzare(box.getString("delusionsBizzare"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsBizzare("");
				}
			if(box.getString("delusionsMood") != null && !box.getString("delusionsMood").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsMood(box.getString("delusionsMood"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsMood("");
				}
			if(box.getString("delusionsOther") != null && !box.getString("delusionsOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsOther(box.getString("delusionsOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsOther("");
				}
			if(box.getString("delusionsOtherVal") != null && !box.getString("delusionsOtherVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsOtherVal(box.getString("delusionsOtherVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsOtherVal("");
				}
			if(box.getString("coddp") != null && !box.getString("coddp").equals("")){
				opdGeneralPsychiatricCaseRecord.setCoddp(box.getString("coddp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCoddp("");
				}
			if(box.getString("obsessions") != null && !box.getString("obsessions").equals("")){
				opdGeneralPsychiatricCaseRecord.setObsessions(box.getString("obsessions"));
				}else{
					opdGeneralPsychiatricCaseRecord.setObsessions("");
				}
			if(box.getString("obsessionsOther") != null && !box.getString("obsessionsOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setObsessionsOther(box.getString("obsessionsOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setObsessionsOther("");
				}
			if(box.getString("delusionalAbsent") != null && !box.getString("delusionalAbsent").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalAbsent(box.getString("delusionalAbsent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalAbsent("");
				}
			if(box.getString("delusionalThoughtInsertion") != null && !box.getString("delusionalThoughtInsertion").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalThoughtInsertion(box.getString("delusionalThoughtInsertion"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalThoughtInsertion("");
				}
			if(box.getString("delusionalThoughtWithdrawal") != null && !box.getString("delusionalThoughtWithdrawal").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalThoughtWithdrawal(box.getString("delusionalThoughtWithdrawal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalThoughtWithdrawal("");
				}
			if(box.getString("delusionalThoughtBroadcast") != null && !box.getString("delusionalThoughtBroadcast").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalThoughtBroadcast(box.getString("delusionalThoughtBroadcast"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalThoughtBroadcast("");
				}
			if(box.getString("affectAppropriate") != null && !box.getString("affectAppropriate").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectAppropriate(box.getString("affectAppropriate"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectAppropriate("");
				}
			if(box.getString("affectInappropritate") != null && !box.getString("affectInappropritate").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectInappropritate(box.getString("affectInappropritate"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectInappropritate("");
				}
			if(box.getString("affectLabile") != null && !box.getString("affectLabile").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectLabile(box.getString("affectLabile"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectLabile("");
				}
			if(box.getString("affectConstricted") != null && !box.getString("affectConstricted").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectConstricted(box.getString("affectConstricted"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectConstricted("");
				}
			if(box.getString("affectFlat") != null && !box.getString("affectFlat").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectFlat(box.getString("affectFlat"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectFlat("");
				}
			if(box.getString("moodNormal") != null && !box.getString("moodNormal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodNormal(box.getString("moodNormal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodNormal("");
				}
			if(box.getString("moodDepressed") != null && !box.getString("moodDepressed").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodDepressed(box.getString("moodDepressed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodDepressed("");
				}
			if(box.getString("moodAnxious") != null && !box.getString("moodAnxious").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodAnxious(box.getString("moodAnxious"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodAnxious("");
				}
			if(box.getString("moodFearful") != null && !box.getString("moodFearful").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodFearful(box.getString("moodFearful"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodFearful("");
				}
			if(box.getString("moodEuphoric") != null && !box.getString("moodEuphoric").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodEuphoric(box.getString("moodEuphoric"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodEuphoric("");
				}
			if(box.getString("moodImtable") != null && !box.getString("moodImtable").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodImtable(box.getString("moodImtable"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodImtable("");
				}
			if(box.getString("moodApathetic") != null && !box.getString("moodApathetic").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodApathetic(box.getString("moodApathetic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodApathetic("");
				}
			if(box.getString("perception") != null && !box.getString("perception").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerception(box.getString("perception"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerception("");
				}
			if(box.getString("perceptionVal") != null && !box.getString("perceptionVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerceptionVal(box.getString("perceptionVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerceptionVal("");
				}
			if(box.getString("hallucinations") != null && !box.getString("hallucinations").equals("")){
				opdGeneralPsychiatricCaseRecord.setHallucinations(box.getString("hallucinations"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHallucinations("");
				}
			if(box.getString("auditory") != null && !box.getString("auditory").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditory(box.getString("auditory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditory("");
				}
			if(box.getString("auditoryII") != null && !box.getString("auditoryII").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryII(box.getString("auditoryII"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryII("");
				}
			if(box.getString("auditoryIII") != null && !box.getString("auditoryIII").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryIII(box.getString("auditoryIII"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryIII("");
				}
			if(box.getString("auditoryRunning") != null && !box.getString("auditoryRunning").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryRunning(box.getString("auditoryRunning"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryRunning("");
				}
			if(box.getString("auditoryCommand") != null && !box.getString("auditoryCommand").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryCommand(box.getString("auditoryCommand"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryCommand("");
				}
			if(box.getString("auditoryAH") != null && !box.getString("auditoryAH").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryAH(box.getString("auditoryAH"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryAH("");
				}
			if(box.getString("auditoryVal") != null && !box.getString("auditoryVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryVal(box.getString("auditoryVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryVal("");
				}
			if(box.getString("visual") != null && !box.getString("visual").equals("")){
				opdGeneralPsychiatricCaseRecord.setVisual(box.getString("visual"));
				}else{
					opdGeneralPsychiatricCaseRecord.setVisual("");
				}
			if(box.getString("olfactory") != null && !box.getString("olfactory").equals("")){
				opdGeneralPsychiatricCaseRecord.setOlfactory(box.getString("olfactory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOlfactory("");
				}
			if(box.getString("tactile") != null && !box.getString("tactile").equals("")){
				opdGeneralPsychiatricCaseRecord.setTactile(box.getString("tactile"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTactile("");
				}
			if(box.getString("gustatory") != null && !box.getString("gustatory").equals("")){
				opdGeneralPsychiatricCaseRecord.setGustatory(box.getString("gustatory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGustatory("");
				}
			if(box.getString("sexual") != null && !box.getString("sexual").equals("")){
				opdGeneralPsychiatricCaseRecord.setSexual(box.getString("sexual"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSexual("");
				}
			if(box.getString("describe") != null && !box.getString("describe").equals("")){
				opdGeneralPsychiatricCaseRecord.setDescribe(box.getString("describe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDescribe("");
				}
			if(box.getString("attention") != null && !box.getString("attention").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttention(box.getString("attention"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttention("");
				}
			if(box.getString("digitForward") != null && !box.getString("digitForward").equals("")){
				opdGeneralPsychiatricCaseRecord.setDigitForward(box.getString("digitForward"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDigitForward("");
				}
			if(box.getString("digitBackward") != null && !box.getString("digitBackward").equals("")){
				opdGeneralPsychiatricCaseRecord.setDigitBackward(box.getString("digitBackward"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDigitBackward("");
				}
			if(box.getString("concertration") != null && !box.getString("concertration").equals("")){
				opdGeneralPsychiatricCaseRecord.setConcertration(box.getString("concertration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setConcertration("");
				}
			if(box.getString("monthInReverse") != null && !box.getString("monthInReverse").equals("")){
				opdGeneralPsychiatricCaseRecord.setMonthInReverse(box.getString("monthInReverse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMonthInReverse("");
				}
			if(box.getString("daysInReverse") != null && !box.getString("daysInReverse").equals("")){
				opdGeneralPsychiatricCaseRecord.setDaysInReverse(box.getString("daysInReverse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDaysInReverse("");
				}
			if(box.getString("concertrationVal") != null && !box.getString("concertrationVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setConcertrationVal(box.getString("concertrationVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setConcertrationVal("");
				}
			if(box.getString("memory") != null && !box.getString("memory").equals("")){
				opdGeneralPsychiatricCaseRecord.setMemory(box.getString("memory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMemory("");
				}
			if(box.getString("memoryImpaired") != null && !box.getString("memoryImpaired").equals("")){
				opdGeneralPsychiatricCaseRecord.setMemoryImpaired(box.getString("memoryImpaired"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMemoryImpaired("");
				}
			if(box.getString("clinical") != null && !box.getString("clinical").equals("")){
				opdGeneralPsychiatricCaseRecord.setClinical(box.getString("clinical"));
				}else{
					opdGeneralPsychiatricCaseRecord.setClinical("");
				}
			if(box.getString("lang") != null && !box.getString("lang").equals("")){
				opdGeneralPsychiatricCaseRecord.setLang(box.getString("lang"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLang("");
				}
			if(box.getString("languageImpairedVal") != null && !box.getString("languageImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setLanguageImpairedVal(box.getString("languageImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLanguageImpairedVal("");
				}
			if(box.getString("concerate") != null && !box.getString("concerate").equals("")){
				opdGeneralPsychiatricCaseRecord.setConcerate(box.getString("concerate"));
				}else{
					opdGeneralPsychiatricCaseRecord.setConcerate("");
				}
			if(box.getString("semiAbstract") != null && !box.getString("semiAbstract").equals("")){
				opdGeneralPsychiatricCaseRecord.setSemiAbstract(box.getString("semiAbstract"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSemiAbstract("");
				}
			if(box.getString("abstract") != null && !box.getString("abstract").equals("")){
				opdGeneralPsychiatricCaseRecord.setAbstract(box.getString("abstract"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAbstract("");
				}
			if(box.getString("abstractVal") != null && !box.getString("abstractVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAbstractVal(box.getString("abstractVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAbstractVal("");
				}
			if(box.getString("judgement") != null && !box.getString("judgement").equals("")){
				opdGeneralPsychiatricCaseRecord.setJudgement(box.getString("judgement"));
				}else{
					opdGeneralPsychiatricCaseRecord.setJudgement("");
				}
			if(box.getString("personal") != null && !box.getString("personal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPersonal(box.getString("personal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPersonal("");
				}
			if(box.getString("test") != null && !box.getString("test").equals("")){
				opdGeneralPsychiatricCaseRecord.setTest(box.getString("test"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTest("");
				}
			if(box.getString("insight") != null && !box.getString("insight").equals("")){
				opdGeneralPsychiatricCaseRecord.setInsight(box.getString("insight"));
				}else{
					opdGeneralPsychiatricCaseRecord.setInsight("");
				}
			if(box.getString("grap") != null && !box.getString("grap").equals("")){
				opdGeneralPsychiatricCaseRecord.setGrap(box.getString("grap"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGrap("");
				}
			if(box.getString("attitude") != null && !box.getString("attitude").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttitude(box.getString("attitude"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttitude("");
				}
			if(box.getString("voluntaryPostures") != null && !box.getString("voluntaryPostures").equals("")){
				opdGeneralPsychiatricCaseRecord.setVoluntaryPostures(box.getString("voluntaryPostures"));
				}else{
					opdGeneralPsychiatricCaseRecord.setVoluntaryPostures("");
				}
			if(box.getString("wdtpdiiaocp") != null && !box.getString("wdtpdiiaocp").equals("")){
				opdGeneralPsychiatricCaseRecord.setWdtpdiiaocp(box.getString("wdtpdiiaocp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWdtpdiiaocp("");
				}
			if(box.getString("btpan") != null && !box.getString("btpan").equals("")){
				opdGeneralPsychiatricCaseRecord.setBtpan(box.getString("btpan"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBtpan("");
				}
			if(box.getString("spontaneousActs") != null && !box.getString("spontaneousActs").equals("")){
				opdGeneralPsychiatricCaseRecord.setSpontaneousActs(box.getString("spontaneousActs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSpontaneousActs("");
				}
			if(box.getString("dmwiwopwap") != null && !box.getString("dmwiwopwap").equals("")){
				opdGeneralPsychiatricCaseRecord.setDmwiwopwap(box.getString("dmwiwopwap"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDmwiwopwap("");
				}
			if(box.getString("ead") != null && !box.getString("ead").equals("")){
				opdGeneralPsychiatricCaseRecord.setEad(box.getString("ead"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEad("");
				}
			if(box.getString("watbab") != null && !box.getString("watbab").equals("")){
				opdGeneralPsychiatricCaseRecord.setWatbab(box.getString("watbab"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWatbab("");
				}
			if(box.getString("dtmsoiroatct") != null && !box.getString("dtmsoiroatct").equals("")){
				opdGeneralPsychiatricCaseRecord.setDtmsoiroatct(box.getString("dtmsoiroatct"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDtmsoiroatct("");
				}
			if(box.getString("twedtac") != null && !box.getString("twedtac").equals("")){
				opdGeneralPsychiatricCaseRecord.setTwedtac(box.getString("twedtac"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTwedtac("");
				}
			if(box.getString("itbcovfdtd") != null && !box.getString("itbcovfdtd").equals("")){
				opdGeneralPsychiatricCaseRecord.setItbcovfdtd(box.getString("itbcovfdtd"));
				}else{
					opdGeneralPsychiatricCaseRecord.setItbcovfdtd("");
				}
			if(box.getString("dasoitc") != null && !box.getString("dasoitc").equals("")){
				opdGeneralPsychiatricCaseRecord.setDasoitc(box.getString("dasoitc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDasoitc("");
				}
			if(box.getString("facialExpression") != null && !box.getString("facialExpression").equals("")){
				opdGeneralPsychiatricCaseRecord.setFacialExpression(box.getString("facialExpression"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFacialExpression("");
				}
			if(box.getString("alert") != null && !box.getString("alert").equals("")){
				opdGeneralPsychiatricCaseRecord.setAlert(box.getString("alert"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAlert("");
				}
			if(box.getString("attentive") != null && !box.getString("attentive").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttentive(box.getString("attentive"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttentive("");
				}
			if(box.getString("placid") != null && !box.getString("placid").equals("")){
				opdGeneralPsychiatricCaseRecord.setPlacid(box.getString("placid"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPlacid("");
				}
			if(box.getString("vacant") != null && !box.getString("vacant").equals("")){
				opdGeneralPsychiatricCaseRecord.setVacant(box.getString("vacant"));
				}else{
					opdGeneralPsychiatricCaseRecord.setVacant("");
				}
			if(box.getString("stolid") != null && !box.getString("stolid").equals("")){
				opdGeneralPsychiatricCaseRecord.setStolid(box.getString("stolid"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStolid("");
				}
			if(box.getString("sulky") != null && !box.getString("sulky").equals("")){
				opdGeneralPsychiatricCaseRecord.setSulky(box.getString("sulky"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSulky("");
				}
			if(box.getString("scowling") != null && !box.getString("scowling").equals("")){
				opdGeneralPsychiatricCaseRecord.setScowling(box.getString("scowling"));
				}else{
					opdGeneralPsychiatricCaseRecord.setScowling("");
				}
			if(box.getString("averse") != null && !box.getString("averse").equals("")){
				opdGeneralPsychiatricCaseRecord.setAverse(box.getString("averse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAverse("");
				}
			if(box.getString("perplexed") != null && !box.getString("perplexed").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerplexed(box.getString("perplexed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerplexed("");
				}
			if(box.getString("distressed") != null && !box.getString("distressed").equals("")){
				opdGeneralPsychiatricCaseRecord.setDistressed(box.getString("distressed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDistressed("");
				}
			if(box.getString("apofeosoe") != null && !box.getString("apofeosoe").equals("")){
				opdGeneralPsychiatricCaseRecord.setApofeosoe(box.getString("apofeosoe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setApofeosoe("");
				}
			if(box.getString("owo") != null && !box.getString("owo").equals("")){
				opdGeneralPsychiatricCaseRecord.setOwo(box.getString("owo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOwo("");
				}
			if(box.getString("eyes") != null && !box.getString("eyes").equals("")){
				opdGeneralPsychiatricCaseRecord.setEyes(box.getString("eyes"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEyes("");
				}
			if(box.getString("eyesVal") != null && !box.getString("eyesVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setEyesVal(box.getString("eyesVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEyesVal("");
				}
			if(box.getString("rhlr") != null && !box.getString("rhlr").equals("")){
				opdGeneralPsychiatricCaseRecord.setRhlr(box.getString("rhlr"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRhlr("");
				}
			if(box.getString("movementOfEyes") != null && !box.getString("movementOfEyes").equals("")){
				opdGeneralPsychiatricCaseRecord.setMovementOfEyes(box.getString("movementOfEyes"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMovementOfEyes("");
				}
			if(box.getString("gaofteomo") != null && !box.getString("gaofteomo").equals("")){
				opdGeneralPsychiatricCaseRecord.setGaofteomo(box.getString("gaofteomo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGaofteomo("");
				}
			if(box.getString("sofgfgoe") != null && !box.getString("sofgfgoe").equals("")){
				opdGeneralPsychiatricCaseRecord.setSofgfgoe(box.getString("sofgfgoe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSofgfgoe("");
				}
			if(box.getString("roeubfotol") != null && !box.getString("roeubfotol").equals("")){
				opdGeneralPsychiatricCaseRecord.setRoeubfotol(box.getString("roeubfotol"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRoeubfotol("");
				}
			if(box.getString("rtsaottsopte") != null && !box.getString("rtsaottsopte").equals("")){
				opdGeneralPsychiatricCaseRecord.setRtsaottsopte(box.getString("rtsaottsopte"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRtsaottsopte("");
				}
			if(box.getString("srop") != null && !box.getString("srop").equals("")){
				opdGeneralPsychiatricCaseRecord.setSrop(box.getString("srop"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSrop("");
				}
			if(box.getString("rtwisod") != null && !box.getString("rtwisod").equals("")){
				opdGeneralPsychiatricCaseRecord.setRtwisod(box.getString("rtwisod"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRtwisod("");
				}
			if(box.getString("showTongue") != null && !box.getString("showTongue").equals("")){
				opdGeneralPsychiatricCaseRecord.setShowTongue(box.getString("showTongue"));
				}else{
					opdGeneralPsychiatricCaseRecord.setShowTongue("");
				}
			if(box.getString("moveLimbs") != null && !box.getString("moveLimbs").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoveLimbs(box.getString("moveLimbs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoveLimbs("");
				}
			if(box.getString("gwh") != null && !box.getString("gwh").equals("")){
				opdGeneralPsychiatricCaseRecord.setGwh(box.getString("gwh"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGwh("");
				}
			if(box.getString("moveLimbsAnother") != null && !box.getString("moveLimbsAnother").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoveLimbsAnother(box.getString("moveLimbsAnother"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoveLimbsAnother("");
				}
			if(box.getString("moveLimbsVal") != null && !box.getString("moveLimbsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoveLimbsVal(box.getString("moveLimbsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoveLimbsVal("");
				}
			if(box.getString("rtpp") != null && !box.getString("rtpp").equals("")){
				opdGeneralPsychiatricCaseRecord.setRtpp(box.getString("rtpp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRtpp("");
				}
			if(box.getString("automatic") != null && !box.getString("automatic").equals("")){
				opdGeneralPsychiatricCaseRecord.setAutomatic(box.getString("automatic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAutomatic("");
				}
			if(box.getString("echopraxia") != null && !box.getString("echopraxia").equals("")){
				opdGeneralPsychiatricCaseRecord.setEchopraxia(box.getString("echopraxia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEchopraxia("");
				}
			if(box.getString("testForRigidity") != null && !box.getString("testForRigidity").equals("")){
				opdGeneralPsychiatricCaseRecord.setTestForRigidity(box.getString("testForRigidity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTestForRigidity("");
				}
			if(box.getString("teatHead") != null && !box.getString("teatHead").equals("")){
				opdGeneralPsychiatricCaseRecord.setTeatHead(box.getString("teatHead"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTeatHead("");
				}
			if(box.getString("testAlsoTheJaw") != null && !box.getString("testAlsoTheJaw").equals("")){
				opdGeneralPsychiatricCaseRecord.setTestAlsoTheJaw(box.getString("testAlsoTheJaw"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTestAlsoTheJaw("");
				}
			if(box.getString("doesDistraction") != null && !box.getString("doesDistraction").equals("")){
				opdGeneralPsychiatricCaseRecord.setDoesDistraction(box.getString("doesDistraction"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDoesDistraction("");
				}
			if(box.getString("closingOfMouth") != null && !box.getString("closingOfMouth").equals("")){
				opdGeneralPsychiatricCaseRecord.setClosingOfMouth(box.getString("closingOfMouth"));
				}else{
					opdGeneralPsychiatricCaseRecord.setClosingOfMouth("");
				}
			if(box.getString("holdingOfSaliva") != null && !box.getString("holdingOfSaliva").equals("")){
				opdGeneralPsychiatricCaseRecord.setHoldingOfSaliva(box.getString("holdingOfSaliva"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHoldingOfSaliva("");
				}
			if(box.getString("emotional") != null && !box.getString("emotional").equals("")){
				opdGeneralPsychiatricCaseRecord.setEmotional(box.getString("emotional"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEmotional("");
				}
			if(box.getString("ifswttofoc") != null && !box.getString("ifswttofoc").equals("")){
				opdGeneralPsychiatricCaseRecord.setIfswttofoc(box.getString("ifswttofoc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIfswttofoc("");
				}
			if(box.getString("ifswspihamwvc") != null && !box.getString("ifswspihamwvc").equals("")){
				opdGeneralPsychiatricCaseRecord.setIfswspihamwvc(box.getString("ifswspihamwvc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIfswspihamwvc("");
				}
			if(box.getString("acceleration") != null && !box.getString("acceleration").equals("")){
				opdGeneralPsychiatricCaseRecord.setAcceleration(box.getString("acceleration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAcceleration("");
				}
			if(box.getString("flushing") != null && !box.getString("flushing").equals("")){
				opdGeneralPsychiatricCaseRecord.setFlushing(box.getString("flushing"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFlushing("");
				}
			if(box.getString("tearsInTheEyes") != null && !box.getString("tearsInTheEyes").equals("")){
				opdGeneralPsychiatricCaseRecord.setTearsintheeyes(box.getString("tearsInTheEyes"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTearsintheeyes("");
				}
			if(box.getString("accelerationOfPulse") != null && !box.getString("accelerationOfPulse").equals("")){
				opdGeneralPsychiatricCaseRecord.setAccelerationofpulse(box.getString("accelerationOfPulse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAccelerationofpulse("");
				}
			if(box.getString("perspiration") != null && !box.getString("perspiration").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerspiration(box.getString("perspiration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerspiration("");
				}
			if(box.getString("othersAnother") != null && !box.getString("othersAnother").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersAnother(box.getString("othersAnother"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersAnother("");
				}
			
			
			if(box.getString("othersAnotherVal") != null && !box.getString("othersAnotherVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersAnotherVal(box.getString("othersAnotherVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersAnotherVal("");
				}
			
			if(box.getString("djear") != null && !box.getString("djear").equals("")){
				opdGeneralPsychiatricCaseRecord.setDjear(box.getString("djear"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDjear("");
				}
			
			if(box.getString("effects") != null && !box.getString("effects").equals("")){
				opdGeneralPsychiatricCaseRecord.setEffects(box.getString("effects"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEffects("");
				}
			
			if(box.getString("speech") != null && !box.getString("speech").equals("")){
				opdGeneralPsychiatricCaseRecord.setSpeech(box.getString("speech"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSpeech("");
				}
			
			
			if(box.getString("writing") != null && !box.getString("writing").equals("")){
				opdGeneralPsychiatricCaseRecord.setWriting(box.getString("writing"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWriting("");
				}
			if(box.getString("caseFromulation") != null && !box.getString("caseFromulation").equals("")){
				opdGeneralPsychiatricCaseRecord.setCaseFromulation(box.getString("caseFromulation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCaseFromulation("");
				}
			
			

			
			if(masReligionId != 0){
				MasReligion masReligion = new MasReligion();
				masReligion.setId(masReligionId);
				opdGeneralPsychiatricCaseRecord.setReligion(masReligion);
			}
			if(masMaritalStatusId!=0){
			MasMaritalStatus masMaritalStatus= new MasMaritalStatus();
			masMaritalStatus.setId(masMaritalStatusId);
			opdGeneralPsychiatricCaseRecord.setMaritalStatus(masMaritalStatus);
			}
			
			
			
			if(educationId != 0){
				MasQualification masQualification = new MasQualification();
				masQualification.setId(educationId);
				opdGeneralPsychiatricCaseRecord.setEducation(masQualification);
			}
			
			
			
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			opdGeneralPsychiatricCaseRecord.setOpdPatientDetails(opdPatientDetails);
			
			opdGeneralPsychiatricCaseRecord.setHin(new Patient(hinId));
			
			hbt.update(opdGeneralPsychiatricCaseRecord);
			hbt.refresh(opdGeneralPsychiatricCaseRecord);
		}else{
			
	
	
			if(box.getString("self") != null && !box.getString("self").equals("")){
				opdGeneralPsychiatricCaseRecord.setSelf(box.getString("self"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSelf("");
				}
			
			if(box.getString("broughtByRelatives") != null && !box.getString("broughtByRelatives").equals("")){
				opdGeneralPsychiatricCaseRecord.setBroughtByRelatives(box.getString("broughtByRelatives"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBroughtByRelatives("");
				}
			if(box.getString("court") != null && !box.getString("court").equals("")){
				opdGeneralPsychiatricCaseRecord.setCourt(box.getString("court"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCourt("");
				}
			if(box.getString("medicalCollegeHospital") != null && !box.getString("medicalCollegeHospital").equals("")){
				opdGeneralPsychiatricCaseRecord.setMedicalCollegeHospital(box.getString("medicalCollegeHospital"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMedicalCollegeHospital("");
				}
			if(box.getString("othersSourceOfReferral") != null && !box.getString("othersSourceOfReferral").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferral(box.getString("othersSourceOfReferral"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferral("");
				}
			if(box.getString("othersSourceOfReferralDiv") != null && !box.getString("othersSourceOfReferralDiv").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferralDiv(box.getString("othersSourceOfReferralDiv"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersSourceOfReferralDiv("");
				}
			if(box.getString("lanuage") != null && !box.getString("lanuage").equals("")){
				opdGeneralPsychiatricCaseRecord.setLanuage(box.getString("lanuage"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLanuage("");
				}
			if(box.getString("informant") != null && !box.getString("informant").equals("")){
				opdGeneralPsychiatricCaseRecord.setInformant(box.getString("informant"));
				}else{
					opdGeneralPsychiatricCaseRecord.setInformant("");
				}
			if(box.getString("rrc") != null && !box.getString("rrc").equals("")){
				opdGeneralPsychiatricCaseRecord.setRrc(box.getString("rrc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRrc("");
				}
			if(box.getString("presentingCompliments") != null && !box.getString("presentingCompliments").equals("")){
				opdGeneralPsychiatricCaseRecord.setPresentingCompliments(box.getString("presentingCompliments"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPresentingCompliments("");
				}
			if(box.getString("totalDuration") != null && !box.getString("totalDuration").equals("")){
				opdGeneralPsychiatricCaseRecord.setTotalDuration(Integer.parseInt(box.getString("totalDuration")));
				}else{
					opdGeneralPsychiatricCaseRecord.setTotalDuration(0);
				}
			if(box.getString("episodicType") != null && !box.getString("episodicType").equals("")){
				opdGeneralPsychiatricCaseRecord.setEpisodicType(box.getString("episodicType"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEpisodicType("");
				}
			if(box.getString("episodicTypeValue") != null && !box.getString("episodicTypeValue").equals("")){
				opdGeneralPsychiatricCaseRecord.setEpisodicTypeValue(box.getString("episodicTypeValue"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEpisodicTypeValue("");
				}
			if(box.getString("numberOfEpisodes") != null && !box.getString("numberOfEpisodes").equals("")){
				opdGeneralPsychiatricCaseRecord.setNumberOfEpisodes(Integer.parseInt(box.getString("numberOfEpisodes")));
				}else{
					opdGeneralPsychiatricCaseRecord.setNumberOfEpisodes(0);
				}
			if(box.getString("ageOfOnset") != null && !box.getString("ageOfOnset").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgeOfOnset(Integer.parseInt(box.getString("ageOfOnset")));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgeOfOnset(0);
				}
			if(box.getString("cwrar") != null && !box.getString("cwrar").equals("")){
				opdGeneralPsychiatricCaseRecord.setCwrar(box.getString("cwrar"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCwrar("");
				}
			if(box.getString("notKnow") != null && !box.getString("notKnow").equals("")){
				opdGeneralPsychiatricCaseRecord.setNotKnow(box.getString("notKnow"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNotKnow("");
				}
			
			if(box.getString("precipitation") != null && !box.getString("precipitation").equals("")){
				opdGeneralPsychiatricCaseRecord.setPrecipitation(box.getString("precipitation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPrecipitation("");
				}
			if(box.getString("precipitationSpecify") != null && !box.getString("precipitationSpecify").equals("")){
				opdGeneralPsychiatricCaseRecord.setPrecipitationSpecify(box.getString("precipitationSpecify"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPrecipitationSpecify("");
				}
			
			
			
			if(box.getString("progressOfSymptoms") != null && !box.getString("progressOfSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setProgressOfSymptoms(box.getString("progressOfSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setProgressOfSymptoms("");
				}
			
			if(box.getString("congitiveSymptoms") != null && !box.getString("congitiveSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setCongitiveSymptoms(box.getString("congitiveSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCongitiveSymptoms("");
				}
			if(box.getString("onsetCongitiveSymptoms") != null && !box.getString("onsetCongitiveSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setOnsetCongitiveSymptoms(box.getString("onsetCongitiveSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOnsetCongitiveSymptoms("");
				}
			if(box.getString("overShort") != null && !box.getString("overShort").equals("")){
				opdGeneralPsychiatricCaseRecord.setOverShort(box.getString("overShort"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOverShort("");
				}
			if(box.getString("gradual") != null && !box.getString("gradual").equals("")){
				opdGeneralPsychiatricCaseRecord.setGradual(box.getString("gradual"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGradual("");
				}
			if(box.getString("distrurbedConsciousness") != null && !box.getString("distrurbedConsciousness").equals("")){
				opdGeneralPsychiatricCaseRecord.setDistrurbedConsciousness(box.getString("distrurbedConsciousness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDistrurbedConsciousness("");
				}
			if(box.getString("rcoaoe") != null && !box.getString("rcoaoe").equals("")){
				opdGeneralPsychiatricCaseRecord.setRcoaoe(box.getString("rcoaoe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRcoaoe("");
				}
			if(box.getString("iaac") != null && !box.getString("iaac").equals("")){
				opdGeneralPsychiatricCaseRecord.setIaac(box.getString("iaac"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIaac("");
				}
			if(box.getString("perceptualDisturbance") != null && !box.getString("perceptualDisturbance").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerceptualDisturbance(box.getString("perceptualDisturbance"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerceptualDisturbance("");
				}
			if(box.getString("fdtcod") != null && !box.getString("fdtcod").equals("")){
				opdGeneralPsychiatricCaseRecord.setFdtcod(box.getString("fdtcod"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFdtcod("");
				}
			if(box.getString("memoryImpairment") != null && !box.getString("memoryImpairment").equals("")){
				opdGeneralPsychiatricCaseRecord.setMemoryImpairment(box.getString("memoryImpairment"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMemoryImpairment("");
				}
			if(box.getString("aphasia") != null && !box.getString("aphasia").equals("")){
				opdGeneralPsychiatricCaseRecord.setAphasia(box.getString("aphasia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAphraxia("");
				}
			if(box.getString("aphraxia") != null && !box.getString("aphraxia").equals("")){
				opdGeneralPsychiatricCaseRecord.setAphraxia(box.getString("aphraxia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAphraxia("");
				}
			if(box.getString("agnosia") != null && !box.getString("agnosia").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgnosia(box.getString("agnosia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgnosia("");
				}
			if(box.getString("def") != null && !box.getString("def").equals("")){
				opdGeneralPsychiatricCaseRecord.setDef(box.getString("def"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDef("");
				}
			if(box.getString("disorientation") != null && !box.getString("disorientation").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorientation(box.getString("disorientation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorientation("");
				}
			if(box.getString("psychoticSymptoms") != null && !box.getString("psychoticSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setPsychoticSymptoms(box.getString("psychoticSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPsychoticSymptoms("");
				}
			if(box.getString("suspiciousness") != null && !box.getString("suspiciousness").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuspiciousness(box.getString("suspiciousness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuspiciousness("");
				}
			if(box.getString("delusionalBehaviour") != null && !box.getString("delusionalBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalBehaviour(box.getString("delusionalBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalBehaviour("");
				}
			if(box.getString("hallucinatoryBehaviour") != null && !box.getString("hallucinatoryBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setHallucinatoryBehaviour(box.getString("hallucinatoryBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHallucinatoryBehaviour("");
				}
			if(box.getString("disorganisedSpeech") != null && !box.getString("disorganisedSpeech").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorganisedSpeech(box.getString("disorganisedSpeech"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorganisedSpeech("");
				}
			if(box.getString("disorganisedBehaviour") != null && !box.getString("disorganisedBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorganisedBehaviour(box.getString("disorganisedBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorganisedBehaviour("");
				}
			if(box.getString("catatonicBehaviour") != null && !box.getString("catatonicBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setCatatonicBehaviour(box.getString("catatonicBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCatatonicBehaviour("");
				}
			if(box.getString("socialWithdrawal") != null && !box.getString("socialWithdrawal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSocialWithdrawal(box.getString("socialWithdrawal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSocialWithdrawal("");
				}
			if(box.getString("emotionalBlunting") != null && !box.getString("emotionalBlunting").equals("")){
				opdGeneralPsychiatricCaseRecord.setEmotionalBlunting(box.getString("emotionalBlunting"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEmotionalBlunting("");
				}
			if(box.getString("manicSymptoms") != null && !box.getString("manicSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setManicSymptoms(box.getString("manicSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setManicSymptoms("");
				}
			if(box.getString("eeoim") != null && !box.getString("eeoim").equals("")){
				opdGeneralPsychiatricCaseRecord.setEeoim(box.getString("eeoim"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEeoim("");
				}
			if(box.getString("dnfs") != null && !box.getString("dnfs").equals("")){
				opdGeneralPsychiatricCaseRecord.setDnfs(box.getString("dnfs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDnfs("");
				}
			if(box.getString("grandioseBehaviour") != null && !box.getString("grandioseBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setGrandioseBehaviour(box.getString("grandioseBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGrandioseBehaviour("");
				}
			if(box.getString("optkt") != null && !box.getString("optkt").equals("")){
				opdGeneralPsychiatricCaseRecord.setOptkt(box.getString("optkt"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOptkt("");
				}
			if(box.getString("overactivity") != null && !box.getString("overactivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setOveractivity(box.getString("overactivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOveractivity("");
				}
			if(box.getString("eiiip") != null && !box.getString("eiiip").equals("")){
				opdGeneralPsychiatricCaseRecord.setEiiip(box.getString("eiiip"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEiiip("");
				}
			if(box.getString("rsim") != null && !box.getString("rsim").equals("")){
				opdGeneralPsychiatricCaseRecord.setRsim(box.getString("rsim"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRsim("");
				}
			
			if(box.getString("depressiveSymptoms") != null && !box.getString("depressiveSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setDepressiveSymptoms(box.getString("depressiveSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDepressiveSymptoms("");
				}
			if(box.getString("soorodm") != null && !box.getString("soorodm").equals("")){
				opdGeneralPsychiatricCaseRecord.setSoorodm(box.getString("soorodm"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSoorodm("");
				}
			if(box.getString("loioe") != null && !box.getString("loioe").equals("")){
				opdGeneralPsychiatricCaseRecord.setLoioe(box.getString("loioe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLoioe("");
				}
			if(box.getString("slowgiw") != null && !box.getString("slowgiw").equals("")){
				opdGeneralPsychiatricCaseRecord.setSlowgiw(box.getString("slowgiw"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSlowgiw("");
				}
			if(box.getString("ioh") != null && !box.getString("ioh").equals("")){
				opdGeneralPsychiatricCaseRecord.setIoh(box.getString("ioh"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIoh("");
				}
			if(box.getString("paor") != null && !box.getString("paor").equals("")){
				opdGeneralPsychiatricCaseRecord.setPaor(box.getString("paor"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPaor("");
				}
			if(box.getString("loef") != null && !box.getString("loef").equals("")){
				opdGeneralPsychiatricCaseRecord.setLoef(box.getString("loef"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLoef("");
				}
			if(box.getString("wg") != null && !box.getString("wg").equals("")){
				opdGeneralPsychiatricCaseRecord.setWg(box.getString("wg"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWg("");
				}
			if(box.getString("locoi") != null && !box.getString("locoi").equals("")){
				opdGeneralPsychiatricCaseRecord.setLocoi(box.getString("locoi"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLocoi("");
				}
			if(box.getString("wg") != null && !box.getString("wg").equals("")){
				opdGeneralPsychiatricCaseRecord.setWg(box.getString("wg"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWg("");
				}
			if(box.getString("locoi") != null && !box.getString("locoi").equals("")){
				opdGeneralPsychiatricCaseRecord.setLocoi(box.getString("locoi"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLocoi("");
				}
			if(box.getString("delusional") != null && !box.getString("delusional").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusional(box.getString("delusional"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusional("");
				}
			if(box.getString("delusionalVal") != null && !box.getString("delusionalVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalVal(box.getString("delusionalVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalVal("");
				}
			if(box.getString("suicidalBehaviour") != null && !box.getString("suicidalBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalBehaviour(box.getString("suicidalBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalBehaviour("");
				}
			if(box.getString("anxietySymptoms") != null && !box.getString("anxietySymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setAnxietySymptoms(box.getString("anxietySymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAnxietySymptoms("");
				}
			if(box.getString("anxietySymptomsVal") != null && !box.getString("anxietySymptomsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAnxietySymptomsVal(box.getString("anxietySymptomsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAnxietySymptomsVal("");
				}
			if(box.getString("sagis") != null && !box.getString("sagis").equals("")){
				opdGeneralPsychiatricCaseRecord.setSagis(box.getString("sagis"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSagis("");
				}
			if(box.getString("sagisVal") != null && !box.getString("sagisVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSagisVal(box.getString("sagisVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSagisVal("");
				}
			if(box.getString("eatingSymptoms") != null && !box.getString("eatingSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setEatingSymptoms(box.getString("eatingSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEatingSymptoms("");
				}
			if(box.getString("eatingSymptomsVal") != null && !box.getString("eatingSymptomsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setEatingSymptomsVal(box.getString("eatingSymptomsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEatingSymptomsVal("");
				}
			if(box.getString("sleepSymptoms") != null && !box.getString("sleepSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setSleepSymptoms(box.getString("sleepSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSleepSymptoms("");
				}
			if(box.getString("impulseDyscontrolSymptoms") != null && !box.getString("impulseDyscontrolSymptoms").equals("")){
				opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptoms(box.getString("impulseDyscontrolSymptoms"));
				}else{
					opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptoms("");
				}
			if(box.getString("impulseDyscontrolSymptomsVal") != null && !box.getString("impulseDyscontrolSymptomsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptomsVal(box.getString("impulseDyscontrolSymptomsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setImpulseDyscontrolSymptomsVal("");
				}
			if(box.getString("futureDetailsVal") != null && !box.getString("futureDetailsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setFutureDetailsVal(box.getString("futureDetailsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFutureDetailsVal("");
				}
			if(box.getString("suicidal") != null && !box.getString("suicidal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidal(box.getString("suicidal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidal("");
				}
			if(box.getString("selfMutilating") != null && !box.getString("selfMutilating").equals("")){
				opdGeneralPsychiatricCaseRecord.setSelfmutilating(box.getString("selfMutilating"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSelfmutilating("");
				}
			if(box.getString("violent") != null && !box.getString("violent").equals("")){
				opdGeneralPsychiatricCaseRecord.setViolent(box.getString("violent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setViolent("");
				}
			if(box.getString("homicidal") != null && !box.getString("homicidal").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidal(box.getString("homicidal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidal("");
				}
			if(box.getString("detailOne") != null && !box.getString("detailOne").equals("")){
				opdGeneralPsychiatricCaseRecord.setDetailOne(box.getString("detailOne"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDetailOne("");
				}
			if(box.getString("notOnMedications") != null && !box.getString("notOnMedications").equals("")){
				opdGeneralPsychiatricCaseRecord.setNotOnMedications(box.getString("notOnMedications"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNotOnMedications("");
				}
			if(box.getString("onMedications") != null && !box.getString("onMedications").equals("")){
				opdGeneralPsychiatricCaseRecord.setOnMedications(box.getString("onMedications"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOnMedications("");
				}
			if(box.getString("detailTwo") != null && !box.getString("detailTwo").equals("")){
				opdGeneralPsychiatricCaseRecord.setDetailTwo(box.getString("detailTwo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDetailTwo("");
				}
			if(box.getString("dgreeOfDrugAdherence") != null && !box.getString("dgreeOfDrugAdherence").equals("")){
				opdGeneralPsychiatricCaseRecord.setDgreeOfDrugAdherence(box.getString("dgreeOfDrugAdherence"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDgreeOfDrugAdherence("");
				}
			if(box.getString("pastPsychiatricHistory") != null && !box.getString("pastPsychiatricHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistory(box.getString("pastPsychiatricHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistory("");
				}
			if(box.getString("pastPsychiatricHistoryVal") != null && !box.getString("pastPsychiatricHistoryVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistoryVal(box.getString("pastPsychiatricHistoryVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastPsychiatricHistoryVal("");
				}
			if(box.getString("pastHistoryOfDeliberateSelfHarm") != null && !box.getString("pastHistoryOfDeliberateSelfHarm").equals("")){
				opdGeneralPsychiatricCaseRecord.setPasthistoryOfDeliberateSelfHarm(box.getString("pastHistoryOfDeliberateSelfHarm"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPasthistoryOfDeliberateSelfHarm("");
				}
			if(box.getString("perviousAttemptFantasisedSuicide") != null && !box.getString("perviousAttemptFantasisedSuicide").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerviousAttemptFantasisedSuicide(box.getString("perviousAttemptFantasisedSuicide"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerviousAttemptFantasisedSuicide("");
				}
			if(box.getString("impulsivePlanned") != null && !box.getString("impulsivePlanned").equals("")){
				opdGeneralPsychiatricCaseRecord.setImpulsivePlanned(box.getString("impulsivePlanned"));
				}else{
					opdGeneralPsychiatricCaseRecord.setImpulsivePlanned("");
				}
			
			if(box.getString("manipulativeIntent") != null && !box.getString("manipulativeIntent").equals("")){
				opdGeneralPsychiatricCaseRecord.setManipulativeintent(box.getString("manipulativeIntent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setManipulativeintent("");
				}
			if(box.getString("circumstances") != null && !box.getString("circumstances").equals("")){
				opdGeneralPsychiatricCaseRecord.setCircumstances(box.getString("circumstances"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCircumstances("");
				}
			if(box.getString("pastPsychiatricTreatmentHistory") != null && !box.getString("pastPsychiatricTreatmentHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastPsychiatricTreatmentHistory(box.getString("pastPsychiatricTreatmentHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastPsychiatricTreatmentHistory("");
				}
			if(box.getString("noKnownDiseases") != null && !box.getString("noKnownDiseases").equals("")){
				opdGeneralPsychiatricCaseRecord.setNoKnownDiseases(box.getString("noKnownDiseases"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNoKnownDiseases("");
				}
			if(box.getString("allergiesSensitvities") != null && !box.getString("allergiesSensitvities").equals("")){
				opdGeneralPsychiatricCaseRecord.setAllergiesSensitvities(box.getString("allergiesSensitvities"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAllergiesSensitvities("");
				}
			if(box.getString("allergiesSensitvitiesVal") != null && !box.getString("allergiesSensitvitiesVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAllergiesSensitvitiesVal(box.getString("allergiesSensitvitiesVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAllergiesSensitvitiesVal("");
				}
			if(box.getString("seizuresVal") != null && !box.getString("seizuresVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSeizuresVal(box.getString("seizuresVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSeizuresVal("");
				}
			if(box.getString("headTraumaVal") != null && !box.getString("headTraumaVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setHeadTraumaVal(box.getString("headTraumaVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHeadTraumaVal("");
				}
			if(box.getString("nonPsychiatric") != null && !box.getString("nonPsychiatric").equals("")){
				opdGeneralPsychiatricCaseRecord.setNonPsychiatric(box.getString("nonPsychiatric"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNonPsychiatric("");
				}
			if(box.getString("nonPsychiatricVal") != null && !box.getString("nonPsychiatricVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setNonPsychiatricVal(box.getString("nonPsychiatricVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNonPsychiatricVal("");
				}
			if(box.getString("familyHistoryVal") != null && !box.getString("familyHistoryVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setFamilyHistoryVal(box.getString("familyHistoryVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFamilyHistoryVal("");
				}
			if(box.getString("ppaed") != null && !box.getString("ppaed").equals("")){
				opdGeneralPsychiatricCaseRecord.setPpaed(box.getString("ppaed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPpaed("");
				}
			if(box.getString("detailsThree") != null && !box.getString("detailsThree").equals("")){
				opdGeneralPsychiatricCaseRecord.setDetailsThree(box.getString("detailsThree"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDetailsThree("");
				}
			if(box.getString("congnitiveDevelopment") != null && !box.getString("congnitiveDevelopment").equals("")){
				opdGeneralPsychiatricCaseRecord.setCongnitiveDevelopment(box.getString("congnitiveDevelopment"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCongnitiveDevelopment("");
				}
			if(box.getString("motorDevelopment") != null && !box.getString("motorDevelopment").equals("")){
				opdGeneralPsychiatricCaseRecord.setMotorDevelopment(box.getString("motorDevelopment"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMotorDevelopment("");
				}
			if(box.getString("behaviourChildhood") != null && !box.getString("behaviourChildhood").equals("")){
				opdGeneralPsychiatricCaseRecord.setBehaviourChildhood(box.getString("behaviourChildhood"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBehaviourChildhood("");
				}
			if(box.getString("significantPhysicalillness") != null && !box.getString("significantPhysicalillness").equals("")){
				opdGeneralPsychiatricCaseRecord.setSignificantPhysicalillness(box.getString("significantPhysicalillness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSignificantPhysicalillness("");
				}
			if(box.getString("educationHistory") != null && !box.getString("educationHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setEducationHistory(box.getString("educationHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEducationHistory("");
				}
			if(box.getString("occupationalHistory") != null && !box.getString("occupationalHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setOccupationalHistory(box.getString("occupationalHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOccupationalHistory("");
				}
			if(box.getString("sexualHistory") != null && !box.getString("sexualHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setSexualHistory(box.getString("sexualHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSexualHistory("");
				}
			if(box.getString("menstrualHistory") != null && !box.getString("menstrualHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setMenstrualHistory(box.getString("menstrualHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMaritalRelationshiphistory("");
				}
			if(box.getString("maritalRelationshiphistory") != null && !box.getString("maritalRelationshiphistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setMaritalRelationshiphistory(box.getString("maritalRelationshiphistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMaritalRelationshiphistory("");
				}
			if(box.getString("socialHistory") != null && !box.getString("socialHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setSocialHistory(box.getString("socialHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSocialHistory("");
				}
		if(box.getString("substanceHistory") != null && !box.getString("substanceHistory").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceHistory(box.getString("substanceHistory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceHistory("");
				}
			if(box.getString("substanceOfChoice") != null && !box.getString("substanceOfChoice").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceOfChoice(box.getString("substanceOfChoice"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceOfChoice("");
				}
			if(box.getString("substanceOfChoiceVal") != null && !box.getString("substanceOfChoiceVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceOfChoiceVal(box.getString("substanceOfChoiceVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceOfChoiceVal("");
				}
			if(box.getString("ageOnSet") != null && !box.getString("ageOnSet").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgeOnSet(box.getString("ageOnSet"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgeOnSet("");
				}
			if(box.getString("currentUsePattern") != null && !box.getString("currentUsePattern").equals("")){
				opdGeneralPsychiatricCaseRecord.setCurrentUsePattern(box.getString("currentUsePattern"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCurrentUsePattern("");
				}
			if(box.getString("dateOfLastUse") != null && !box.getString("dateOfLastUse").equals("")){
				opdGeneralPsychiatricCaseRecord.setDateOfLastUse(HMSUtil.convertStringTypeDateToDateType(box.getString("dateOfLastUse")));
				}else{
					opdGeneralPsychiatricCaseRecord.setDateOfLastUse(null);
				}
			if(box.getString("othersVal") != null && !box.getString("othersVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersVal(box.getString("othersVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersVal("");
				}
			if(box.getString("currentWs") != null && !box.getString("currentWs").equals("")){
				opdGeneralPsychiatricCaseRecord.setCurrentWs(box.getString("currentWs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCurrentWs("");
				}
			if(box.getString("currentWsVal") != null && !box.getString("currentWsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setCurrentWsVal(box.getString("currentWsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCurrentWsVal("");
				}
			if(box.getString("pastWs") != null && !box.getString("pastWs").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastWs(box.getString("pastWs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastWs("");
				}
			if(box.getString("pastWsVal") != null && !box.getString("pastWsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPastWsVal(box.getString("pastWsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPastWsVal("");
				}
			if(box.getString("tolerance") != null && !box.getString("tolerance").equals("")){
				opdGeneralPsychiatricCaseRecord.setTolerance(box.getString("tolerance"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTolerance("");
				}
			if(box.getString("locc") != null && !box.getString("locc").equals("")){
				opdGeneralPsychiatricCaseRecord.setLocc(box.getString("locc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLocc("");
				}
			if(box.getString("fatc") != null && !box.getString("fatc").equals("")){
				opdGeneralPsychiatricCaseRecord.setFatc(box.getString("fatc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFatc("");
				}
			if(box.getString("tsodra") != null && !box.getString("tsodra").equals("")){
				opdGeneralPsychiatricCaseRecord.setTsodra(box.getString("tsodra"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTsodra("");
				}
			if(box.getString("iagu") != null && !box.getString("iagu").equals("")){
				opdGeneralPsychiatricCaseRecord.setIagu(box.getString("iagu"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIagu("");
				}
			if(box.getString("cudp") != null && !box.getString("cudp").equals("")){
				opdGeneralPsychiatricCaseRecord.setCudp(box.getString("cudp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCudp("");
				}
			if(box.getString("fimro") != null && !box.getString("fimro").equals("")){
				opdGeneralPsychiatricCaseRecord.setFimro(box.getString("fimro"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFimro("");
				}
			if(box.getString("hazardousUse") != null && !box.getString("hazardousUse").equals("")){
				opdGeneralPsychiatricCaseRecord.setHazardousUse(box.getString("hazardousUse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHazardousUse("");
				}
			if(box.getString("substanceRelatedLegalProblem") != null && !box.getString("substanceRelatedLegalProblem").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstanceRelatedLegalProblem(box.getString("substanceRelatedLegalProblem"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstanceRelatedLegalProblem("");
				}
			if(box.getString("substanceRelatedLegalProblemVal") != null && !box.getString("substanceRelatedLegalProblemVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setSubstancerelatedlegalproblemval(box.getString("substanceRelatedLegalProblemVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSubstancerelatedlegalproblemval("");
				}
			if(box.getString("lpoaitp") != null && !box.getString("lpoaitp").equals("")){
				opdGeneralPsychiatricCaseRecord.setLpoaitp(box.getString("lpoaitp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLpoaitp("");
				}
			if(box.getString("ptfsud") != null && !box.getString("ptfsud").equals("")){
				opdGeneralPsychiatricCaseRecord.setPtfsud(box.getString("ptfsud"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPtfsud("");
				}
			if(box.getString("ptfsudVal") != null && !box.getString("ptfsudVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPtfsudVal(box.getString("ptfsudVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPtfsudVal("");
				}
			if(box.getString("premorbidPersonality") != null && !box.getString("premorbidPersonality").equals("")){
				opdGeneralPsychiatricCaseRecord.setPremorbidPersonality(box.getString("premorbidPersonality"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPremorbidPersonality("");
				}
			if(box.getString("abnormalPersonality") != null && !box.getString("abnormalPersonality").equals("")){
				opdGeneralPsychiatricCaseRecord.setAbnormalPersonality(box.getString("abnormalPersonality"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAbnormalPersonality("");
				}
			if(box.getString("pmsamom") != null && !box.getString("pmsamom").equals("")){
				opdGeneralPsychiatricCaseRecord.setPmsamom(box.getString("pmsamom"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPmsamom("");
				}
			if(box.getString("ppodfsrarroeeiis") != null && !box.getString("ppodfsrarroeeiis").equals("")){
				opdGeneralPsychiatricCaseRecord.setPpodfsrarroeeiis(box.getString("ppodfsrarroeeiis"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPpodfsrarroeeiis("");
				}
			if(box.getString("dwrcapdaeob") != null && !box.getString("dwrcapdaeob").equals("")){
				opdGeneralPsychiatricCaseRecord.setDwrcapdaeob(box.getString("dwrcapdaeob"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDwrcapdaeob("");
				}
			if(box.getString("dfavoroo") != null && !box.getString("dfavoroo").equals("")){
				opdGeneralPsychiatricCaseRecord.setDfavoroo(box.getString("dfavoroo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDfavoroo("");
				}
			if(box.getString("iiirsiaaic") != null && !box.getString("iiirsiaaic").equals("")){
				opdGeneralPsychiatricCaseRecord.setIiirsiaaic(box.getString("iiirsiaaic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIiirsiaaic("");
				}
			if(box.getString("eeaas") != null && !box.getString("eeaas").equals("")){
				opdGeneralPsychiatricCaseRecord.setEeaas(box.getString("eeaas"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEeaas("");
				}
			if(box.getString("gnfaaloe") != null && !box.getString("gnfaaloe").equals("")){
				opdGeneralPsychiatricCaseRecord.setGnfaaloe(box.getString("gnfaaloe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGnfaaloe("");
				}
			if(box.getString("sifoiahtne") != null && !box.getString("sifoiahtne").equals("")){
				opdGeneralPsychiatricCaseRecord.setSifoiahtne(box.getString("sifoiahtne"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSifoiahtne("");
				}
			if(box.getString("entbtcosacbafos") != null && !box.getString("entbtcosacbafos").equals("")){
				opdGeneralPsychiatricCaseRecord.setEntbtcosacbafos(box.getString("entbtcosacbafos"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEntbtcosacbafos("");
				}
			if(box.getString("pwopamaic") != null && !box.getString("pwopamaic").equals("")){
				opdGeneralPsychiatricCaseRecord.setPwopamaic(box.getString("pwopamaic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPwopamaic("");
				}
			if(box.getString("alertLOC") != null && !box.getString("alertLOC").equals("")){
				opdGeneralPsychiatricCaseRecord.setAlertLOC(box.getString("alertLOC"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAlertLOC("");
				}
			if(box.getString("droxsy") != null && !box.getString("droxsy").equals("")){
				opdGeneralPsychiatricCaseRecord.setDroxsy(box.getString("droxsy"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDroxsy("");
				}
			if(box.getString("stuporose") != null && !box.getString("stuporose").equals("")){
				opdGeneralPsychiatricCaseRecord.setStuporose(box.getString("stuporose"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStuporose("");
				}
			if(box.getString("comatose") != null && !box.getString("comatose").equals("")){
				opdGeneralPsychiatricCaseRecord.setComatose(box.getString("comatose"));
				}else{
					opdGeneralPsychiatricCaseRecord.setComatose("");
				}
			if(box.getString("fluctuting") != null && !box.getString("fluctuting").equals("")){
				opdGeneralPsychiatricCaseRecord.setFluctuting(box.getString("fluctuting"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFluctuting("");
				}
			if(box.getString("orienation") != null && !box.getString("orienation").equals("")){
				opdGeneralPsychiatricCaseRecord.setOrienation(box.getString("orienation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOrienation("");
				}
			if(box.getString("orienationImpairedVal") != null && !box.getString("orienationImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setOrienationImpairedVal(box.getString("orienationImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOrienationImpairedVal("");
				}
			if(box.getString("person") != null && !box.getString("person").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerson(box.getString("person"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerson("");
				}
			if(box.getString("personImpairedVal") != null && !box.getString("personImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPersonImpairedVal(box.getString("personImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPersonImpairedVal("");
				}
			if(box.getString("timeVal") != null && !box.getString("timeVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setTimeVal(box.getString("timeVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTimeVal("");
				}
			if(box.getString("timeImpairedVal") != null && !box.getString("timeImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setTimeImpairedVal(box.getString("timeImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTimeImpairedVal("");
				}
			if(box.getString("placeImpairedVal") != null && !box.getString("placeImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPlaceImpairedVal(box.getString("placeImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPlaceImpairedVal("");
				}
			if(box.getString("appearanceAndBehaviour") != null && !box.getString("appearanceAndBehaviour").equals("")){
				opdGeneralPsychiatricCaseRecord.setAppearanceAndBehaviour(box.getString("appearanceAndBehaviour"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAppearanceAndBehaviour("");
				}
			if(box.getString("wellGroomed") != null && !box.getString("wellGroomed").equals("")){
				opdGeneralPsychiatricCaseRecord.setWellGroomed(box.getString("wellGroomed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWellGroomed("");
				}
			if(box.getString("dishevelled") != null && !box.getString("dishevelled").equals("")){
				opdGeneralPsychiatricCaseRecord.setDishevelled(box.getString("dishevelled"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDishevelled("");
				}
			if(box.getString("bizzare") != null && !box.getString("bizzare").equals("")){
				opdGeneralPsychiatricCaseRecord.setBizzare(box.getString("bizzare"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBizzare("");
				}
			if(box.getString("gross") != null && !box.getString("gross").equals("")){
				opdGeneralPsychiatricCaseRecord.setGross(box.getString("gross"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGross("");
				}
			if(box.getString("attitude") != null && !box.getString("attitude").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttitude(box.getString("attitude"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttitude("");
				}
			if(box.getString("cooperative") != null && !box.getString("cooperative").equals("")){
				opdGeneralPsychiatricCaseRecord.setCooperative(box.getString("cooperative"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCooperative("");
				}
			if(box.getString("guarded") != null && !box.getString("guarded").equals("")){
				opdGeneralPsychiatricCaseRecord.setGuarded(box.getString("guarded"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGuarded("");
				}
			if(box.getString("indifferent") != null && !box.getString("indifferent").equals("")){
				opdGeneralPsychiatricCaseRecord.setIndifferent(box.getString("indifferent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIndifferent("");
				}
			if(box.getString("withdrawnPreoccupied") != null && !box.getString("withdrawnPreoccupied").equals("")){
				opdGeneralPsychiatricCaseRecord.setWithdrawnPreoccupied(box.getString("withdrawnPreoccupied"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWithdrawnPreoccupied("");
				}
			if(box.getString("silly") != null && !box.getString("silly").equals("")){
				opdGeneralPsychiatricCaseRecord.setSilly(box.getString("silly"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSilly("");
				}
			if(box.getString("uncooperative") != null && !box.getString("uncooperative").equals("")){
				opdGeneralPsychiatricCaseRecord.setUncooperative(box.getString("uncooperative"));
				}else{
					opdGeneralPsychiatricCaseRecord.setUncooperative("");
				}
			if(box.getString("belligerent") != null && !box.getString("belligerent").equals("")){
				opdGeneralPsychiatricCaseRecord.setBelligerent(box.getString("belligerent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBelligerent("");
				}
			if(box.getString("eyeContract") != null && !box.getString("eyeContract").equals("")){
				opdGeneralPsychiatricCaseRecord.setEyeContract(box.getString("eyeContract"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEyeContract("");
				}
			if(box.getString("rapport") != null && !box.getString("rapport").equals("")){
				opdGeneralPsychiatricCaseRecord.setRapport(box.getString("rapport"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRapport("");
				}
			if(box.getString("psychomotorActivity") != null && !box.getString("psychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setPsychomotorActivity(box.getString("psychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPsychomotorActivity("");
				}
			if(box.getString("normalPsychomotorActivity") != null && !box.getString("normalPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setNormalPsychomotorActivity(box.getString("normalPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setNormalPsychomotorActivity("");
				}
			if(box.getString("increasedPsychomotorActivity") != null && !box.getString("increasedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setIncreasedPsychomotorActivity(box.getString("increasedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIncreasedPsychomotorActivity("");
				}
			if(box.getString("excitedPsychomotorActivity") != null && !box.getString("excitedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setExcitedPsychomotorActivity(box.getString("excitedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setExcitedPsychomotorActivity("");
				}
			if(box.getString("agitatedPsychomotorActivity") != null && !box.getString("agitatedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setAgitatedPsychomotorActivity(box.getString("agitatedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAgitatedPsychomotorActivity("");
				}
			if(box.getString("disorganisedPsychomotorActivity") != null && !box.getString("disorganisedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setDisorganisedPsychomotorActivity(box.getString("disorganisedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDisorganisedPsychomotorActivity("");
				}
			if(box.getString("aggressivePsychomotorActivity") != null && !box.getString("aggressivePsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setAggressivePsychomotorActivity(box.getString("aggressivePsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAggressivePsychomotorActivity("");
				}
			if(box.getString("repetitivePsychomotorActivity") != null && !box.getString("repetitivePsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setRepetitivePsychomotorActivity(box.getString("repetitivePsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRepetitivePsychomotorActivity("");
				}
			if(box.getString("decreasedPsychomotorActivity") != null && !box.getString("decreasedPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setDecreasedPsychomotorActivity(box.getString("decreasedPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDecreasedPsychomotorActivity("");
				}
			if(box.getString("catatonicPsychomotorActivity") != null && !box.getString("catatonicPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setCatatonicPsychomotorActivity(box.getString("catatonicPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCatatonicPsychomotorActivity("");
				}
			if(box.getString("bradykinesiaPsychomotorActivity") != null && !box.getString("bradykinesiaPsychomotorActivity").equals("")){
				opdGeneralPsychiatricCaseRecord.setBradykinesiaPsychomotorActivity(box.getString("bradykinesiaPsychomotorActivity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBradykinesiaPsychomotorActivity("");
				}
			if(box.getString("talk") != null && !box.getString("talk").equals("")){
				opdGeneralPsychiatricCaseRecord.setTalk(box.getString("talk"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTalk("");
				}
			if(box.getString("talkImpairedVal") != null && !box.getString("talkImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setTalkimpairedVal(box.getString("talkImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTalkimpairedVal("");
				}
			if(box.getString("srotq") != null && !box.getString("srotq").equals("")){
				opdGeneralPsychiatricCaseRecord.setSrotq(box.getString("srotq"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSrotq("");
				}
			if(box.getString("quantum") != null && !box.getString("quantum").equals("")){
				opdGeneralPsychiatricCaseRecord.setQuantum(box.getString("quantum"));
				}else{
					opdGeneralPsychiatricCaseRecord.setQuantum("");
				}
			if(box.getString("quantumVal") != null && !box.getString("quantumVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setQuantumVal(box.getString("quantumVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setQuantumVal("");
				}
			if(box.getString("rate") != null && !box.getString("rate").equals("")){
				opdGeneralPsychiatricCaseRecord.setRate(box.getString("k"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRate("");
				}
			
			
			
			if(box.getString("tone") != null && !box.getString("tone").equals("")){
				opdGeneralPsychiatricCaseRecord.setTone(box.getString("tone"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTone("");
				}
			if(box.getString("mute") != null && !box.getString("mute").equals("")){
				opdGeneralPsychiatricCaseRecord.setMute(box.getString("mute"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMute("");
				}
			if(box.getString("muteVal") != null && !box.getString("muteVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteVal(box.getString("muteVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteVal("");
				}
			if(box.getString("muteImpairedVal") != null && !box.getString("muteImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteImpairedVal(box.getString("muteImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteImpairedVal("");
				}
			if(box.getString("muteValOne") != null && !box.getString("muteValOne").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteValOne(box.getString("muteValOne"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteValOne("");
				}
			if(box.getString("muteValYN") != null && !box.getString("muteValYN").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteValYN(box.getString("muteValYN"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteValYN("");
				}
			if(box.getString("muteValNID") != null && !box.getString("muteValNID").equals("")){
				opdGeneralPsychiatricCaseRecord.setMuteValNID(box.getString("muteValNID"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMuteValNID("");
				}
			if(box.getString("streamAndFormNormal") != null && !box.getString("streamAndFormNormal").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormNormal(box.getString("streamAndFormNormal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormNormal("");
				}
			if(box.getString("streamAndFormLossening") != null && !box.getString("streamAndFormLossening").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormLossening(box.getString("streamAndFormLossening"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormLossening("");
				}
			if(box.getString("streamAndFormFlight") != null && !box.getString("streamAndFormFlight").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormFlight(box.getString("streamAndFormFlight"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormFlight("");
				}
			if(box.getString("streamAndFormCircumstantiality") != null && !box.getString("streamAndFormCircumstantiality").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormCircumstantiality(box.getString("streamAndFormCircumstantiality"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormCircumstantiality("");
				}
			if(box.getString("streamAndFormWor") != null && !box.getString("streamAndFormWor").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormWor(box.getString("streamAndFormWor"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormWor("");
				}
			if(box.getString("streamAndFormNeologism") != null && !box.getString("streamAndFormNeologism").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormNeologism(box.getString("streamAndFormNeologism"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormNeologism("");
				}
			if(box.getString("streamAndFormPerseveration") != null && !box.getString("streamAndFormPerseveration").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormPerseveration(box.getString("streamAndFormPerseveration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormPerseveration("");
				}
			if(box.getString("streamAndFormPoverty") != null && !box.getString("streamAndFormPoverty").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormPoverty(box.getString("streamAndFormPoverty"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormPoverty("");
				}
			if(box.getString("streamAndFormThought") != null && !box.getString("streamAndFormThought").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormThought(box.getString("streamAndFormThought"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormThought("");
				}
			if(box.getString("streamAndFormIncompleted") != null && !box.getString("streamAndFormIncompleted").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormIncompleted(box.getString("streamAndFormIncompleted"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormIncompleted("");
				}
			if(box.getString("streamAndFormPressure") != null && !box.getString("streamAndFormPressure").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormPressure(box.getString("streamAndFormPressure"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormPressure("");
				}
			if(box.getString("streamAndFormVagueness") != null && !box.getString("streamAndFormVagueness").equals("")){
				opdGeneralPsychiatricCaseRecord.setStreamAndFormVagueness(box.getString("streamAndFormVagueness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStreamAndFormVagueness("");
				}
			if(box.getString("thoughtSample") != null && !box.getString("thoughtSample").equals("")){
				opdGeneralPsychiatricCaseRecord.setThoughtSample(box.getString("thoughtSample"));
				}else{
					opdGeneralPsychiatricCaseRecord.setThoughtSample("");
				}
			if(box.getString("preoccupationsNone") != null && !box.getString("preoccupationsNone").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsNone(box.getString("preoccupationsNone"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsNone("");
				}
			if(box.getString("preoccupationsReligiosity") != null && !box.getString("preoccupationsReligiosity").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsReligiosity(box.getString("preoccupationsReligiosity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsReligiosity("");
				}
			if(box.getString("preoccupationsSomatic") != null && !box.getString("preoccupationsSomatic").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsSomatic(box.getString("preoccupationsSomatic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsSomatic("");
				}
			if(box.getString("preoccupationsHypochondriacal") != null && !box.getString("preoccupationsHypochondriacal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsHypochondriacal(box.getString("preoccupationsHypochondriacal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsHypochondriacal("");
				}
			if(box.getString("preoccupationsHopelessness") != null && !box.getString("preoccupationsHopelessness").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsHopelessness(box.getString("preoccupationsHopelessness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsHopelessness("");
				}
			if(box.getString("preoccupationsWorthlessness") != null && !box.getString("preoccupationsWorthlessness").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsWorthlessness(box.getString("preoccupationsWorthlessness"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsWorthlessness("");
				}
			if(box.getString("preoccupationsGuilt") != null && !box.getString("preoccupationsGuilt").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsGuilt(box.getString("preoccupationsGuilt"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsGuilt("");
				}
			if(box.getString("preoccupationsIdeas") != null && !box.getString("preoccupationsIdeas").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsIdeas(box.getString("preoccupationsIdeas"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsIdeas("");
				}
			if(box.getString("preoccupationsOther") != null && !box.getString("preoccupationsOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsOther(box.getString("preoccupationsOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsOther("");
				}
			if(box.getString("preoccupationsOtherVal") != null && !box.getString("preoccupationsOtherVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPreoccupationsOtherVal(box.getString("preoccupationsOtherVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPreoccupationsOtherVal("");
				}
			if(box.getString("suicidalAP") != null && !box.getString("suicidalAP").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalAP(box.getString("suicidalAP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalAP("");
				}
			if(box.getString("suicidalNP") != null && !box.getString("suicidalNP").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalNP(box.getString("suicidalNP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalNP("");
				}
			if(box.getString("suicidalOther") != null && !box.getString("suicidalOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setSuicidalOther(box.getString("suicidalOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSuicidalOther("");
				}
			if(box.getString("homicidalAP") != null && !box.getString("homicidalAP").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidalAP(box.getString("homicidalAP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidalAP("");
				}
			if(box.getString("homicidalNP") != null && !box.getString("homicidalNP").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidalNP(box.getString("homicidalNP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidalNP("");
				}
			if(box.getString("homicidalOther") != null && !box.getString("homicidalOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setHomicidalOther(box.getString("homicidalOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHomicidalOther("");
				}
			if(box.getString("phobiaAbsent") != null && !box.getString("phobiaAbsent").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaAbsent(box.getString("phobiaAbsent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaAbsent("");
				}
			if(box.getString("phobiaAgora") != null && !box.getString("phobiaAgora").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaAgora(box.getString("phobiaAgora"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaAgora("");
				}
			if(box.getString("phobiaSocial") != null && !box.getString("phobiaSocial").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaSocial(box.getString("phobiaSocial"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaSocial("");
				}
			if(box.getString("phobiaSpecific") != null && !box.getString("phobiaSpecific").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaSpecific(box.getString("phobiaSpecific"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaSpecific("");
				}
			if(box.getString("phobiaOther") != null && !box.getString("phobiaOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setPhobiaOther(box.getString("phobiaOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPhobiaOther("");
				}
			if(box.getString("delusionsAbsent") != null && !box.getString("delusionsAbsent").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsAbsent(box.getString("delusionsAbsent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsAbsent("");
				}
			if(box.getString("delusionsDO") != null && !box.getString("delusionsDO").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsDO(box.getString("delusionsDO"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsDO("");
				}
			if(box.getString("delusionsGrandiose") != null && !box.getString("delusionsGrandiose").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsGrandiose(box.getString("delusionsGrandiose"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsGrandiose("");
				}
			if(box.getString("delusionsDP") != null && !box.getString("delusionsDP").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsDP(box.getString("delusionsDP"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsDP("");
				}
			if(box.getString("delusionsDPAnother") != null && !box.getString("delusionsDPAnother").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsDPAnother(box.getString("delusionsDPAnother"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsDPAnother("");
				}
			if(box.getString("delusionsSomatic") != null && !box.getString("delusionsSomatic").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsSomatic(box.getString("delusionsSomatic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsSomatic("");
				}
			if(box.getString("delusionsJealous") != null && !box.getString("delusionsJealous").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsJealous(box.getString("delusionsJealous"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsJealous("");
				}
			if(box.getString("delusionsGuilty") != null && !box.getString("delusionsGuilty").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsGuilty(box.getString("delusionsGuilty"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsGuilty("");
				}
			if(box.getString("delusionsNihilistic") != null && !box.getString("delusionsNihilistic").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsNihilistic(box.getString("delusionsNihilistic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsNihilistic("");
				}
			if(box.getString("delusionsBizzare") != null && !box.getString("delusionsBizzare").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsBizzare(box.getString("delusionsBizzare"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsBizzare("");
				}
			if(box.getString("delusionsMood") != null && !box.getString("delusionsMood").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsMood(box.getString("delusionsMood"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsMood("");
				}
			if(box.getString("delusionsOther") != null && !box.getString("delusionsOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsOther(box.getString("delusionsOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsOther("");
				}
			if(box.getString("delusionsOtherVal") != null && !box.getString("delusionsOtherVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionsOtherVal(box.getString("delusionsOtherVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionsOtherVal("");
				}
			if(box.getString("coddp") != null && !box.getString("coddp").equals("")){
				opdGeneralPsychiatricCaseRecord.setCoddp(box.getString("coddp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCoddp("");
				}
			if(box.getString("obsessions") != null && !box.getString("obsessions").equals("")){
				opdGeneralPsychiatricCaseRecord.setObsessions(box.getString("obsessions"));
				}else{
					opdGeneralPsychiatricCaseRecord.setObsessions("");
				}
			if(box.getString("obsessionsOther") != null && !box.getString("obsessionsOther").equals("")){
				opdGeneralPsychiatricCaseRecord.setObsessionsOther(box.getString("obsessionsOther"));
				}else{
					opdGeneralPsychiatricCaseRecord.setObsessionsOther("");
				}
			if(box.getString("delusionalAbsent") != null && !box.getString("delusionalAbsent").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalAbsent(box.getString("delusionalAbsent"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalAbsent("");
				}
			if(box.getString("delusionalThoughtInsertion") != null && !box.getString("delusionalThoughtInsertion").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalThoughtInsertion(box.getString("delusionalThoughtInsertion"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalThoughtInsertion("");
				}
			if(box.getString("delusionalThoughtWithdrawal") != null && !box.getString("delusionalThoughtWithdrawal").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalThoughtWithdrawal(box.getString("delusionalThoughtWithdrawal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalThoughtWithdrawal("");
				}
			if(box.getString("delusionalThoughtBroadcast") != null && !box.getString("delusionalThoughtBroadcast").equals("")){
				opdGeneralPsychiatricCaseRecord.setDelusionalThoughtBroadcast(box.getString("delusionalThoughtBroadcast"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDelusionalThoughtBroadcast("");
				}
			if(box.getString("affectAppropriate") != null && !box.getString("affectAppropriate").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectAppropriate(box.getString("affectAppropriate"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectAppropriate("");
				}
			if(box.getString("affectInappropritate") != null && !box.getString("affectInappropritate").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectInappropritate(box.getString("affectInappropritate"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectInappropritate("");
				}
			if(box.getString("affectLabile") != null && !box.getString("affectLabile").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectLabile(box.getString("affectLabile"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectLabile("");
				}
			if(box.getString("affectConstricted") != null && !box.getString("affectConstricted").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectConstricted(box.getString("affectConstricted"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectConstricted("");
				}
			if(box.getString("affectFlat") != null && !box.getString("affectFlat").equals("")){
				opdGeneralPsychiatricCaseRecord.setAffectFlat(box.getString("affectFlat"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAffectFlat("");
				}
			if(box.getString("moodNormal") != null && !box.getString("moodNormal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodNormal(box.getString("moodNormal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodNormal("");
				}
			if(box.getString("moodDepressed") != null && !box.getString("moodDepressed").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodDepressed(box.getString("moodDepressed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodDepressed("");
				}
			if(box.getString("moodAnxious") != null && !box.getString("moodAnxious").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodAnxious(box.getString("moodAnxious"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodAnxious("");
				}
			if(box.getString("moodFearful") != null && !box.getString("moodFearful").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodFearful(box.getString("moodFearful"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodFearful("");
				}
			if(box.getString("moodEuphoric") != null && !box.getString("moodEuphoric").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodEuphoric(box.getString("moodEuphoric"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodEuphoric("");
				}
			if(box.getString("moodImtable") != null && !box.getString("moodImtable").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodImtable(box.getString("moodImtable"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodImtable("");
				}
			if(box.getString("moodApathetic") != null && !box.getString("moodApathetic").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoodApathetic(box.getString("moodApathetic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoodApathetic("");
				}
			if(box.getString("perception") != null && !box.getString("perception").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerception(box.getString("perception"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerception("");
				}
			if(box.getString("perceptionVal") != null && !box.getString("perceptionVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerceptionVal(box.getString("perceptionVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerceptionVal("");
				}
			if(box.getString("hallucinations") != null && !box.getString("hallucinations").equals("")){
				opdGeneralPsychiatricCaseRecord.setHallucinations(box.getString("hallucinations"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHallucinations("");
				}
			if(box.getString("auditory") != null && !box.getString("auditory").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditory(box.getString("auditory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditory("");
				}
			if(box.getString("auditoryII") != null && !box.getString("auditoryII").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryII(box.getString("auditoryII"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryII("");
				}
			if(box.getString("auditoryIII") != null && !box.getString("auditoryIII").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryIII(box.getString("auditoryIII"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryIII("");
				}
			if(box.getString("auditoryRunning") != null && !box.getString("auditoryRunning").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryRunning(box.getString("auditoryRunning"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryRunning("");
				}
			if(box.getString("auditoryCommand") != null && !box.getString("auditoryCommand").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryCommand(box.getString("auditoryCommand"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryCommand("");
				}
			if(box.getString("auditoryAH") != null && !box.getString("auditoryAH").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryAH(box.getString("auditoryAH"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryAH("");
				}
			if(box.getString("auditoryVal") != null && !box.getString("auditoryVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAuditoryVal(box.getString("auditoryVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAuditoryVal("");
				}
			if(box.getString("visual") != null && !box.getString("visual").equals("")){
				opdGeneralPsychiatricCaseRecord.setVisual(box.getString("visual"));
				}else{
					opdGeneralPsychiatricCaseRecord.setVisual("");
				}
			if(box.getString("olfactory") != null && !box.getString("olfactory").equals("")){
				opdGeneralPsychiatricCaseRecord.setOlfactory(box.getString("olfactory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOlfactory("");
				}
			if(box.getString("tactile") != null && !box.getString("tactile").equals("")){
				opdGeneralPsychiatricCaseRecord.setTactile(box.getString("tactile"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTactile("");
				}
			if(box.getString("gustatory") != null && !box.getString("gustatory").equals("")){
				opdGeneralPsychiatricCaseRecord.setGustatory(box.getString("gustatory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGustatory("");
				}
			if(box.getString("sexual") != null && !box.getString("sexual").equals("")){
				opdGeneralPsychiatricCaseRecord.setSexual(box.getString("sexual"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSexual("");
				}
			if(box.getString("describe") != null && !box.getString("describe").equals("")){
				opdGeneralPsychiatricCaseRecord.setDescribe(box.getString("describe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDescribe("");
				}
			if(box.getString("attention") != null && !box.getString("attention").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttention(box.getString("attention"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttention("");
				}
			if(box.getString("digitForward") != null && !box.getString("digitForward").equals("")){
				opdGeneralPsychiatricCaseRecord.setDigitForward(box.getString("digitForward"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDigitForward("");
				}
			if(box.getString("digitBackward") != null && !box.getString("digitBackward").equals("")){
				opdGeneralPsychiatricCaseRecord.setDigitBackward(box.getString("digitBackward"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDigitBackward("");
				}
			if(box.getString("concertration") != null && !box.getString("concertration").equals("")){
				opdGeneralPsychiatricCaseRecord.setConcertration(box.getString("concertration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setConcertration("");
				}
			if(box.getString("monthInReverse") != null && !box.getString("monthInReverse").equals("")){
				opdGeneralPsychiatricCaseRecord.setMonthInReverse(box.getString("monthInReverse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMonthInReverse("");
				}
			if(box.getString("daysInReverse") != null && !box.getString("daysInReverse").equals("")){
				opdGeneralPsychiatricCaseRecord.setDaysInReverse(box.getString("daysInReverse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDaysInReverse("");
				}
			if(box.getString("concertrationVal") != null && !box.getString("concertrationVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setConcertrationVal(box.getString("concertrationVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setConcertrationVal("");
				}
			if(box.getString("memory") != null && !box.getString("memory").equals("")){
				opdGeneralPsychiatricCaseRecord.setMemory(box.getString("memory"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMemory("");
				}
			if(box.getString("memoryImpaired") != null && !box.getString("memoryImpaired").equals("")){
				opdGeneralPsychiatricCaseRecord.setMemoryImpaired(box.getString("memoryImpaired"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMemoryImpaired("");
				}
			if(box.getString("clinical") != null && !box.getString("clinical").equals("")){
				opdGeneralPsychiatricCaseRecord.setClinical(box.getString("clinical"));
				}else{
					opdGeneralPsychiatricCaseRecord.setClinical("");
				}
			if(box.getString("lang") != null && !box.getString("lang").equals("")){
				opdGeneralPsychiatricCaseRecord.setLang(box.getString("lang"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLang("");
				}
			if(box.getString("languageImpairedVal") != null && !box.getString("languageImpairedVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setLanguageImpairedVal(box.getString("languageImpairedVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setLanguageImpairedVal("");
				}
			if(box.getString("concerate") != null && !box.getString("concerate").equals("")){
				opdGeneralPsychiatricCaseRecord.setConcerate(box.getString("concerate"));
				}else{
					opdGeneralPsychiatricCaseRecord.setConcerate("");
				}
			if(box.getString("semiAbstract") != null && !box.getString("semiAbstract").equals("")){
				opdGeneralPsychiatricCaseRecord.setSemiAbstract(box.getString("semiAbstract"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSemiAbstract("");
				}
			if(box.getString("abstract") != null && !box.getString("abstract").equals("")){
				opdGeneralPsychiatricCaseRecord.setAbstract(box.getString("abstract"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAbstract("");
				}
			if(box.getString("abstractVal") != null && !box.getString("abstractVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setAbstractVal(box.getString("abstractVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAbstractVal("");
				}
			if(box.getString("judgement") != null && !box.getString("judgement").equals("")){
				opdGeneralPsychiatricCaseRecord.setJudgement(box.getString("judgement"));
				}else{
					opdGeneralPsychiatricCaseRecord.setJudgement("");
				}
			if(box.getString("personal") != null && !box.getString("personal").equals("")){
				opdGeneralPsychiatricCaseRecord.setPersonal(box.getString("personal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPersonal("");
				}
			if(box.getString("test") != null && !box.getString("test").equals("")){
				opdGeneralPsychiatricCaseRecord.setTest(box.getString("test"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTest("");
				}
			if(box.getString("insight") != null && !box.getString("insight").equals("")){
				opdGeneralPsychiatricCaseRecord.setInsight(box.getString("insight"));
				}else{
					opdGeneralPsychiatricCaseRecord.setInsight("");
				}
			if(box.getString("grap") != null && !box.getString("grap").equals("")){
				opdGeneralPsychiatricCaseRecord.setGrap(box.getString("grap"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGrap("");
				}
			if(box.getString("attitude") != null && !box.getString("attitude").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttitude(box.getString("attitude"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttitude("");
				}
			if(box.getString("voluntaryPostures") != null && !box.getString("voluntaryPostures").equals("")){
				opdGeneralPsychiatricCaseRecord.setVoluntaryPostures(box.getString("voluntaryPostures"));
				}else{
					opdGeneralPsychiatricCaseRecord.setVoluntaryPostures("");
				}
			if(box.getString("wdtpdiiaocp") != null && !box.getString("wdtpdiiaocp").equals("")){
				opdGeneralPsychiatricCaseRecord.setWdtpdiiaocp(box.getString("wdtpdiiaocp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWdtpdiiaocp("");
				}
			if(box.getString("btpan") != null && !box.getString("btpan").equals("")){
				opdGeneralPsychiatricCaseRecord.setBtpan(box.getString("btpan"));
				}else{
					opdGeneralPsychiatricCaseRecord.setBtpan("");
				}
			if(box.getString("spontaneousActs") != null && !box.getString("spontaneousActs").equals("")){
				opdGeneralPsychiatricCaseRecord.setSpontaneousActs(box.getString("spontaneousActs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSpontaneousActs("");
				}
			if(box.getString("dmwiwopwap") != null && !box.getString("dmwiwopwap").equals("")){
				opdGeneralPsychiatricCaseRecord.setDmwiwopwap(box.getString("dmwiwopwap"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDmwiwopwap("");
				}
			if(box.getString("ead") != null && !box.getString("ead").equals("")){
				opdGeneralPsychiatricCaseRecord.setEad(box.getString("ead"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEad("");
				}
			if(box.getString("watbab") != null && !box.getString("watbab").equals("")){
				opdGeneralPsychiatricCaseRecord.setWatbab(box.getString("watbab"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWatbab("");
				}
			if(box.getString("dtmsoiroatct") != null && !box.getString("dtmsoiroatct").equals("")){
				opdGeneralPsychiatricCaseRecord.setDtmsoiroatct(box.getString("dtmsoiroatct"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDtmsoiroatct("");
				}
			if(box.getString("twedtac") != null && !box.getString("twedtac").equals("")){
				opdGeneralPsychiatricCaseRecord.setTwedtac(box.getString("twedtac"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTwedtac("");
				}
			if(box.getString("itbcovfdtd") != null && !box.getString("itbcovfdtd").equals("")){
				opdGeneralPsychiatricCaseRecord.setItbcovfdtd(box.getString("itbcovfdtd"));
				}else{
					opdGeneralPsychiatricCaseRecord.setItbcovfdtd("");
				}
			if(box.getString("dasoitc") != null && !box.getString("dasoitc").equals("")){
				opdGeneralPsychiatricCaseRecord.setDasoitc(box.getString("dasoitc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDasoitc("");
				}
			if(box.getString("facialExpression") != null && !box.getString("facialExpression").equals("")){
				opdGeneralPsychiatricCaseRecord.setFacialExpression(box.getString("facialExpression"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFacialExpression("");
				}
			if(box.getString("alert") != null && !box.getString("alert").equals("")){
				opdGeneralPsychiatricCaseRecord.setAlert(box.getString("alert"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAlert("");
				}
			if(box.getString("attentive") != null && !box.getString("attentive").equals("")){
				opdGeneralPsychiatricCaseRecord.setAttentive(box.getString("attentive"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAttentive("");
				}
			if(box.getString("placid") != null && !box.getString("placid").equals("")){
				opdGeneralPsychiatricCaseRecord.setPlacid(box.getString("placid"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPlacid("");
				}
			if(box.getString("vacant") != null && !box.getString("vacant").equals("")){
				opdGeneralPsychiatricCaseRecord.setVacant(box.getString("vacant"));
				}else{
					opdGeneralPsychiatricCaseRecord.setVacant("");
				}
			if(box.getString("stolid") != null && !box.getString("stolid").equals("")){
				opdGeneralPsychiatricCaseRecord.setStolid(box.getString("stolid"));
				}else{
					opdGeneralPsychiatricCaseRecord.setStolid("");
				}
			if(box.getString("sulky") != null && !box.getString("sulky").equals("")){
				opdGeneralPsychiatricCaseRecord.setSulky(box.getString("sulky"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSulky("");
				}
			if(box.getString("scowling") != null && !box.getString("scowling").equals("")){
				opdGeneralPsychiatricCaseRecord.setScowling(box.getString("scowling"));
				}else{
					opdGeneralPsychiatricCaseRecord.setScowling("");
				}
			if(box.getString("averse") != null && !box.getString("averse").equals("")){
				opdGeneralPsychiatricCaseRecord.setAverse(box.getString("averse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAverse("");
				}
			if(box.getString("perplexed") != null && !box.getString("perplexed").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerplexed(box.getString("perplexed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerplexed("");
				}
			if(box.getString("distressed") != null && !box.getString("distressed").equals("")){
				opdGeneralPsychiatricCaseRecord.setDistressed(box.getString("distressed"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDistressed("");
				}
			if(box.getString("apofeosoe") != null && !box.getString("apofeosoe").equals("")){
				opdGeneralPsychiatricCaseRecord.setApofeosoe(box.getString("apofeosoe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setApofeosoe("");
				}
			if(box.getString("owo") != null && !box.getString("owo").equals("")){
				opdGeneralPsychiatricCaseRecord.setOwo(box.getString("owo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOwo("");
				}
			if(box.getString("eyes") != null && !box.getString("eyes").equals("")){
				opdGeneralPsychiatricCaseRecord.setEyes(box.getString("eyes"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEyes("");
				}
			if(box.getString("eyesVal") != null && !box.getString("eyesVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setEyesVal(box.getString("eyesVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEyesVal("");
				}
			if(box.getString("rhlr") != null && !box.getString("rhlr").equals("")){
				opdGeneralPsychiatricCaseRecord.setRhlr(box.getString("rhlr"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRhlr("");
				}
			if(box.getString("movementOfEyes") != null && !box.getString("movementOfEyes").equals("")){
				opdGeneralPsychiatricCaseRecord.setMovementOfEyes(box.getString("movementOfEyes"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMovementOfEyes("");
				}
			if(box.getString("gaofteomo") != null && !box.getString("gaofteomo").equals("")){
				opdGeneralPsychiatricCaseRecord.setGaofteomo(box.getString("gaofteomo"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGaofteomo("");
				}
			if(box.getString("sofgfgoe") != null && !box.getString("sofgfgoe").equals("")){
				opdGeneralPsychiatricCaseRecord.setSofgfgoe(box.getString("sofgfgoe"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSofgfgoe("");
				}
			if(box.getString("roeubfotol") != null && !box.getString("roeubfotol").equals("")){
				opdGeneralPsychiatricCaseRecord.setRoeubfotol(box.getString("roeubfotol"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRoeubfotol("");
				}
			if(box.getString("rtsaottsopte") != null && !box.getString("rtsaottsopte").equals("")){
				opdGeneralPsychiatricCaseRecord.setRtsaottsopte(box.getString("rtsaottsopte"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRtsaottsopte("");
				}
			if(box.getString("srop") != null && !box.getString("srop").equals("")){
				opdGeneralPsychiatricCaseRecord.setSrop(box.getString("srop"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSrop("");
				}
			if(box.getString("rtwisod") != null && !box.getString("rtwisod").equals("")){
				opdGeneralPsychiatricCaseRecord.setRtwisod(box.getString("rtwisod"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRtwisod("");
				}
			if(box.getString("showTongue") != null && !box.getString("showTongue").equals("")){
				opdGeneralPsychiatricCaseRecord.setShowTongue(box.getString("showTongue"));
				}else{
					opdGeneralPsychiatricCaseRecord.setShowTongue("");
				}
			if(box.getString("moveLimbs") != null && !box.getString("moveLimbs").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoveLimbs(box.getString("moveLimbs"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoveLimbs("");
				}
			if(box.getString("gwh") != null && !box.getString("gwh").equals("")){
				opdGeneralPsychiatricCaseRecord.setGwh(box.getString("gwh"));
				}else{
					opdGeneralPsychiatricCaseRecord.setGwh("");
				}
			if(box.getString("moveLimbsAnother") != null && !box.getString("moveLimbsAnother").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoveLimbsAnother(box.getString("moveLimbsAnother"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoveLimbsAnother("");
				}
			if(box.getString("moveLimbsVal") != null && !box.getString("moveLimbsVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setMoveLimbsVal(box.getString("moveLimbsVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setMoveLimbsVal("");
				}
			if(box.getString("rtpp") != null && !box.getString("rtpp").equals("")){
				opdGeneralPsychiatricCaseRecord.setRtpp(box.getString("rtpp"));
				}else{
					opdGeneralPsychiatricCaseRecord.setRtpp("");
				}
			if(box.getString("automatic") != null && !box.getString("automatic").equals("")){
				opdGeneralPsychiatricCaseRecord.setAutomatic(box.getString("automatic"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAutomatic("");
				}
			if(box.getString("echopraxia") != null && !box.getString("echopraxia").equals("")){
				opdGeneralPsychiatricCaseRecord.setEchopraxia(box.getString("echopraxia"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEchopraxia("");
				}
			if(box.getString("testForRigidity") != null && !box.getString("testForRigidity").equals("")){
				opdGeneralPsychiatricCaseRecord.setTestForRigidity(box.getString("testForRigidity"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTestForRigidity("");
				}
			if(box.getString("teatHead") != null && !box.getString("teatHead").equals("")){
				opdGeneralPsychiatricCaseRecord.setTeatHead(box.getString("teatHead"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTeatHead("");
				}
			if(box.getString("testAlsoTheJaw") != null && !box.getString("testAlsoTheJaw").equals("")){
				opdGeneralPsychiatricCaseRecord.setTestAlsoTheJaw(box.getString("testAlsoTheJaw"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTestAlsoTheJaw("");
				}
			if(box.getString("doesDistraction") != null && !box.getString("doesDistraction").equals("")){
				opdGeneralPsychiatricCaseRecord.setDoesDistraction(box.getString("doesDistraction"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDoesDistraction("");
				}
			if(box.getString("closingOfMouth") != null && !box.getString("closingOfMouth").equals("")){
				opdGeneralPsychiatricCaseRecord.setClosingOfMouth(box.getString("closingOfMouth"));
				}else{
					opdGeneralPsychiatricCaseRecord.setClosingOfMouth("");
				}
			if(box.getString("holdingOfSaliva") != null && !box.getString("holdingOfSaliva").equals("")){
				opdGeneralPsychiatricCaseRecord.setHoldingOfSaliva(box.getString("holdingOfSaliva"));
				}else{
					opdGeneralPsychiatricCaseRecord.setHoldingOfSaliva("");
				}
			if(box.getString("emotional") != null && !box.getString("emotional").equals("")){
				opdGeneralPsychiatricCaseRecord.setEmotional(box.getString("emotional"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEmotional("");
				}
			if(box.getString("ifswttofoc") != null && !box.getString("ifswttofoc").equals("")){
				opdGeneralPsychiatricCaseRecord.setIfswttofoc(box.getString("ifswttofoc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIfswttofoc("");
				}
			if(box.getString("ifswspihamwvc") != null && !box.getString("ifswspihamwvc").equals("")){
				opdGeneralPsychiatricCaseRecord.setIfswspihamwvc(box.getString("ifswspihamwvc"));
				}else{
					opdGeneralPsychiatricCaseRecord.setIfswspihamwvc("");
				}
			if(box.getString("acceleration") != null && !box.getString("acceleration").equals("")){
				opdGeneralPsychiatricCaseRecord.setAcceleration(box.getString("acceleration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAcceleration("");
				}
			if(box.getString("flushing") != null && !box.getString("flushing").equals("")){
				opdGeneralPsychiatricCaseRecord.setFlushing(box.getString("flushing"));
				}else{
					opdGeneralPsychiatricCaseRecord.setFlushing("");
				}
			if(box.getString("tearsInTheEyes") != null && !box.getString("tearsInTheEyes").equals("")){
				opdGeneralPsychiatricCaseRecord.setTearsintheeyes(box.getString("tearsInTheEyes"));
				}else{
					opdGeneralPsychiatricCaseRecord.setTearsintheeyes("");
				}
			if(box.getString("accelerationOfPulse") != null && !box.getString("accelerationOfPulse").equals("")){
				opdGeneralPsychiatricCaseRecord.setAccelerationofpulse(box.getString("accelerationOfPulse"));
				}else{
					opdGeneralPsychiatricCaseRecord.setAccelerationofpulse("");
				}
			if(box.getString("perspiration") != null && !box.getString("perspiration").equals("")){
				opdGeneralPsychiatricCaseRecord.setPerspiration(box.getString("perspiration"));
				}else{
					opdGeneralPsychiatricCaseRecord.setPerspiration("");
				}
			if(box.getString("othersAnother") != null && !box.getString("othersAnother").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersAnother(box.getString("othersAnother"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersAnother("");
				}
			
			
			if(box.getString("othersAnotherVal") != null && !box.getString("othersAnotherVal").equals("")){
				opdGeneralPsychiatricCaseRecord.setOthersAnotherVal(box.getString("othersAnotherVal"));
				}else{
					opdGeneralPsychiatricCaseRecord.setOthersAnotherVal("");
				}
			
			if(box.getString("djear") != null && !box.getString("djear").equals("")){
				opdGeneralPsychiatricCaseRecord.setDjear(box.getString("djear"));
				}else{
					opdGeneralPsychiatricCaseRecord.setDjear("");
				}
			
			if(box.getString("effects") != null && !box.getString("effects").equals("")){
				opdGeneralPsychiatricCaseRecord.setEffects(box.getString("effects"));
				}else{
					opdGeneralPsychiatricCaseRecord.setEffects("");
				}
			
			if(box.getString("speech") != null && !box.getString("speech").equals("")){
				opdGeneralPsychiatricCaseRecord.setSpeech(box.getString("speech"));
				}else{
					opdGeneralPsychiatricCaseRecord.setSpeech("");
				}
			
			
			if(box.getString("writing") != null && !box.getString("writing").equals("")){
				opdGeneralPsychiatricCaseRecord.setWriting(box.getString("writing"));
				}else{
					opdGeneralPsychiatricCaseRecord.setWriting("");
				}
			if(box.getString("caseFromulation") != null && !box.getString("caseFromulation").equals("")){
				opdGeneralPsychiatricCaseRecord.setCaseFromulation(box.getString("caseFromulation"));
				}else{
					opdGeneralPsychiatricCaseRecord.setCaseFromulation("");
				}
			
			

			
			if(masReligionId != 0){
				MasReligion masReligion = new MasReligion();
				masReligion.setId(masReligionId);
				opdGeneralPsychiatricCaseRecord.setReligion(masReligion);
			}
			if(masMaritalStatusId!=0){
			MasMaritalStatus masMaritalStatus= new MasMaritalStatus();
			masMaritalStatus.setId(masMaritalStatusId);
			opdGeneralPsychiatricCaseRecord.setMaritalStatus(masMaritalStatus);
			}
			
			
			
			if(educationId != 0){
				MasQualification masQualification = new MasQualification();
				masQualification.setId(educationId);
				opdGeneralPsychiatricCaseRecord.setEducation(masQualification);
			}
			
			
			
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			opdGeneralPsychiatricCaseRecord.setOpdPatientDetails(opdPatientDetails);
			

			
			opdGeneralPsychiatricCaseRecord.setHin(new Patient(hinId));
			hbt.save(opdGeneralPsychiatricCaseRecord);
		}
						

		
		

		tx.commit();
		map.put("opdGeneralPsychiatricCaseRecord",opdGeneralPsychiatricCaseRecord); 
	
	}catch(Exception e){
		e.printStackTrace();
	}
	return map;
	}

	@Override
	public Map<String, Object> getMLCFromRefered() {		
		Map<String, Object> map = new HashMap<String, Object>();
		List<MlcRefered> listOfMlcRefered = new ArrayList<MlcRefered>();
		Session	 session=(Session)getSession();
		Criteria criteria = null;
		try{
		criteria = session.createCriteria(MlcRefered.class);
		listOfMlcRefered = criteria.list();
		}catch(HibernateException e){
			e.printStackTrace();
		}
		map.put("listOfMlcRefered", listOfMlcRefered);
		return map;
	}
	

	

@Override
public Map<String, Object> htmlTemplateRpt(Map<String, Object> mapForDS) {

	Session session = (Session) getSession();
	List<OpdSpecialityTemplateDetails> opdSpecialityTemplateDetailsList = new ArrayList<OpdSpecialityTemplateDetails>();
	Map<String, Object> map = new HashMap<String, Object>();
	String specialityTemplateName="";
	int visitId=0;
	if (mapForDS.get("specialityTemplateName") != null) {
		specialityTemplateName = (String) mapForDS.get("specialityTemplateName");
	}
	if (mapForDS.get("visitId") != null) {
		visitId = (Integer) mapForDS.get("visitId");
	}
	
	
	try {
		opdSpecialityTemplateDetailsList = session.createCriteria(OpdSpecialityTemplateDetails.class)
				.createAlias("Visit", "v")
				.add(Restrictions.eq("v.Id", visitId))
				.add(Restrictions.eq("TemplateName", specialityTemplateName)).addOrder(Order.asc("Id")).
				list();
		

	} catch (HibernateException e) {
		e.printStackTrace();
	}
	
	map.put("opdSpecialityTemplateDetailsList", opdSpecialityTemplateDetailsList);

	return map;

}	


@Override
public Map<String, Object> getFixedInvestigations() {
	Map<String, Object> investigationMap = new HashMap<>();
	Session session = (Session)getSession();
	List<Object[]> fixedInvestigationList = null;
	List<Object[]> fixedInvestigationLists = null; //Added By Om Tripathi 26/01/2018
	try{
		fixedInvestigationLists = session.createCriteria(DgMasInvestigation.class).add(Restrictions.in("InvestigationName", new String[]{"Blood Routine","Urine Routine","Platelets Counts","Malaria Smear","Creatinine","AFB Stain","RBS [Random Blood Sugar]"}))
				.setProjection(Projections.projectionList().add(Projections.property("Id")).add(Projections.property("InvestigationName"))).list();

		Map map=new HashMap<Integer,Object[]>();   //Added By Om Tripathi 26/01/2018 Start
		Object[] fixedInvestigationObjectArray = null;
			int length = fixedInvestigationLists.size();
			for(int count=0;count<length;count++){
				fixedInvestigationObjectArray = fixedInvestigationLists.get(count);
				if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("Blood Routine")){
					map.put(1,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("Urine Routine")){
					map.put(2,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("Platelets Counts")){
					map.put(3,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("Malaria Smear")){
					map.put(4,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("Creatinine")){
					map.put(5,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("AFB Stain")){
					map.put(6,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}if(((String)fixedInvestigationObjectArray[1]).equalsIgnoreCase("RBS [Random Blood Sugar]")){
					map.put(7,new Object[]{fixedInvestigationObjectArray[0], fixedInvestigationObjectArray[1]});
				}
			}
		fixedInvestigationList = new ArrayList<Object[]>();
		for(int counts=1;counts<=map.size();counts++){
		if(map.get(counts)!=null){
			fixedInvestigationList.add((Object[]) map.get(counts));
		  }
		} //Added By Om Tripathi 26/01/2018 End
		
	}catch(Exception e){
		logger.error(e);
	}
	investigationMap.put("fixedInvestigationList", fixedInvestigationList);
	return investigationMap;
}	

@Override
public void unBlockMedicine(int medicineTableId) {
	Session session=(Session)getSession();
	HibernateTemplate hbt = getHibernateTemplate();
	hbt.setFlushModeName("FLUSH_EAGER");
	hbt.setCheckWriteOperations(false);
	
	OpdPatientAllergyT allergyT=(OpdPatientAllergyT)hbt.load(OpdPatientAllergyT.class, medicineTableId);
	
	if(allergyT!=null){
		allergyT.setBlockedStatus("n");
		session.update(allergyT);
		session.flush();
	}
}
@Override
public Map<String,Object> checkForBlockedMedicine(Map<String,Object> dataMap){
	
	Map<String,Object>map=new HashMap<String,Object>();
	List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
	String medicineName=(String)dataMap.get("medicineName");
	int visitId=0;
	if(dataMap.get("visitId")!=null){
		visitId=(Integer)dataMap.get("visitId");
	}
	Session session=(Session)getSession();
	int itemId=0;
	String itemName="";
	int hinId=0;
	
	itemId=getItemId1(medicineName);
	
	itemList = session.createCriteria(MasStoreItem.class)
			.add(Restrictions.eq("Id", itemId)).list();
	
	
	for (MasStoreItem masStoreItem : itemList) {
		itemName = masStoreItem.getNomenclature();
	}
	
	List<Visit>visitList=new ArrayList<Visit>();
	if(visitId>0){
		visitList=session.createCriteria(Visit.class).add(Restrictions.eq("Id", visitId)).list();
		
		for(Visit visit:visitList){
			hinId=visit.getHin().getId();
		}
	}else if(dataMap.get("hinId")!=null){
		hinId=(Integer)dataMap.get("hinId");
	}
	
	
	List<OpdPatientAllergyT>allergyTList=new ArrayList<OpdPatientAllergyT>();
	allergyTList=session.createCriteria(OpdPatientAllergyT.class).createAlias("OpdPatientAllergy","OpdPatientAllergy")
			.add(Restrictions.eq("OpdPatientAllergy.Hin.Id", hinId))
			.add(Restrictions.eq("BlockedStatus", 'y').ignoreCase())
			.list();
	
	boolean matched=false;
	
	for(OpdPatientAllergyT OpdPatientAllergyT:allergyTList){
		int allergyDays=0;
		if(OpdPatientAllergyT.getBlockDays()!=null && OpdPatientAllergyT.getBlockDays()!=0){
			allergyDays=OpdPatientAllergyT.getBlockDays();
			int dateDiff=HMSUtil.getNoOfDays(OpdPatientAllergyT.getOpdPatientAllergy().getLastChgDate(), new Date());
			
			if(dateDiff>allergyDays){
				matched=false;
				break;
			}
		}
		
			if(itemName.toLowerCase().contains(OpdPatientAllergyT.getAllergen().toLowerCase())){
				matched=true;
				map.put("blockedDoctor", OpdPatientAllergyT.getOpdPatientAllergy().getEmployee().getEmployeeName());
				map.put("allergyTid", OpdPatientAllergyT.getId());
				if(allergyDays>0){
					map.put("blockedDays", allergyDays);
				}
				break;
			}
		
	}
	
	map.put("matched", matched);
	return map;
}

	@Override
	public Map<String, Object> getMemberDetails(Map map) {
		List<Patient> patientDetails = new ArrayList<Patient>();
		Map<String,Object> memberMap = new HashMap<String,Object>();
		List<Visit> visitDetails = new ArrayList<Visit>();
		Session session = (Session) getSession();
		int visitId=0;
		int memberId=0;
		if(map.get("VisitId")!=null ){
			 visitId = (int) map.get("VisitId");
		}
		String uhid = "";
		if(map.get("uhid")!=null){
			uhid = (String) map.get("uhid");
		}
		try {
			visitDetails = session.createCriteria(Visit.class)
			.createAlias("Hin", "hin")
			//.add(Restrictions.eq("hin.HinNo", uhid))
			.add(Restrictions.eq("Id", visitId))
			.list();
			if(visitDetails.size()>0){
				patientDetails = session.createCriteria(Patient.class)
						.add(Restrictions.eq("Id", visitDetails.get(0).getHin().getId()))
						.list();
			}
			if(patientDetails.size()>0){
				if(patientDetails.get(0).getMember()!=null){
			memberId = patientDetails.get(0).getMember().getId();
			
			String query = "select * from ph_disease_registration_screening where suspected_ncd ='Yes' and member_id="+memberId;	 
			Query queries = session.createSQLQuery(query);
			List<Object[]> memberList = (List<Object[]>) queries.list();
			for (Object[] member : memberList) {
				//int id = (Integer)member[0];
				// memberMap.put("id", id);
			}
				 memberMap.put("memberId", memberId);
			}
			}
			
		} catch (Exception e) {
			logger.error(e);
		}
		
		return memberMap;
	}	
  
@Override
public Map<String, Object> showPsychogeriatricClinicJsp(Map<String, Object> requestParametersMap) {
	Map<String, Object> map = new HashMap<String, Object>();
	List<Object[]> previousComplaintListPsychogeriatricClinic = new ArrayList<Object[]>();
	List<Object[]> psychogeriatricClinic = new ArrayList<Object[]>();
	List<Object[]> systemicExmListpsychogeriatricClinic = new ArrayList<Object[]>();
	List<PatientPrescriptionDetails> psychogeriatricClinic_prescriptionDetails = new ArrayList<PatientPrescriptionDetails>();
	
	List<Object[]> historyList = new ArrayList<Object[]>();
	Session session = (Session) getSession();
	
	Calendar cal = Calendar.getInstance();
	Date currentDate =cal.getTime();
	cal.add(Calendar.DATE, -30);
	Date lastVisitDate =cal.getTime();
	int deptId = 0;
	 
	int hinId = ((Integer)requestParametersMap.get("hinId"));
	deptId = (Integer)requestParametersMap.get("deptId");
	Object[] selectedStatus = {"V","Y"};
	
	psychogeriatricClinic= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
			.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
			.add(Restrictions.eq("pt.Id", hinId)).list();
	
	String complaintSql = "select opd.opd_date,presenting_complaints,duration,duration_parameter "
			+ "from opd_dermatology_leprosy_proforma dl "
			+ "join opd_patient_details opd on (opd.id= dl.opd_patient_details) "
			+ "join visit vs on (vs.visit_id=opd.visit_id) join mas_department md on (md.department_id=vs.department_id) "
			+ " where dl.hin_id="+hinId+" and md.department_id="+deptId+" and opd.opd_date > current_date - interval '30' day order by opd.opd_date asc; ";
	previousComplaintListPsychogeriatricClinic= session.createSQLQuery(complaintSql).list();
	
	String systemic_examination = "select opd.systemic_examination " 
								+ "from opd_patient_details opd " 
								+ "join Visit visit on visit.visit_id=opd.visit_id "
								+ "join drug_related_problem drp on opd.visit_id=drp.visit_id " 
								+ "join mas_hospital masHospital on masHospital.hospital_id=opd.hospital_id";	
	systemicExmListpsychogeriatricClinic = session.createSQLQuery(systemic_examination).list();
	
	String prescription_details = "select * from patient_prescription_details ppd where ppd.id=" +hinId;
	
	psychogeriatricClinic_prescriptionDetails = session.createSQLQuery(prescription_details).list();
	
	map.put("psychogeriatricClinic_prescriptionDetails", psychogeriatricClinic_prescriptionDetails);
	map.put("systemicExmListpsychogeriatricClinic",systemicExmListpsychogeriatricClinic);
	map.put("previousComplaintListPsychogeriatricClinic",previousComplaintListPsychogeriatricClinic);	
	map.put("psychogeriatricClinic",psychogeriatricClinic);
	return map;
}	

@Override
public Map<String, Object> showDeaddictionCentreJsp(Map<String, Object> requestParametersMap) {
	Map<String, Object> map = new HashMap<String, Object>();
	List<Object[]> previousComplaintListDeaddictionCentre = new ArrayList<Object[]>();
	List<Object[]> deaddictionPerforma = new ArrayList<Object[]>();
	List<OpdPatientDetails> systemicExmListDeaddictionCentre = new ArrayList<OpdPatientDetails>();
	
	List<Object[]> historyList = new ArrayList<Object[]>();
	Session session = (Session) getSession();
	
	Calendar cal = Calendar.getInstance();
	Date currentDate =cal.getTime();
	cal.add(Calendar.DATE, -30);
	Date lastVisitDate =cal.getTime();
	int deptId = 0;
	 
	int hinId = ((Integer)requestParametersMap.get("hinId"));
	deptId = (Integer)requestParametersMap.get("deptId");
	Object[] selectedStatus = {"V","Y"};
	
	deaddictionPerforma= session.createCriteria(DgResultEntryHeader.class).createAlias("Hin", "pt")
			.add(Restrictions.in("Verified", selectedStatus)).createAlias("MainChargecode", "mcc")
			.add(Restrictions.eq("pt.Id", hinId)).list();
	
	String complaintSql = "select opd.opd_date,presenting_complaints,duration,duration_parameter "
			+ "from opd_dermatology_leprosy_proforma dl "
			+ " join opd_patient_details opd on (opd.id= dl.opd_patient_details) "
			+ " join visit vs on (vs.visit_id=opd.visit_id) join mas_department md on (md.department_id=vs.department_id)"
			+ " where dl.hin_id="+hinId+" and md.department_id="+deptId+" and opd.opd_date > current_date - interval '30' day order by opd.opd_date asc;";
	previousComplaintListDeaddictionCentre= session.createSQLQuery(complaintSql).list();
	
	String systemic_examination = "select systemic_examination " 
								+ "from opd_patient_details opd " 
								+ "join Visit visit on visit.visit_id=opd.visit_id "
								+ "join drug_related_problem drp on opd.visit_id=drp.visit_id "
								+ "join mas_hospital masHospital on masHospital.hospital_id=opd.hospital_id";	
	systemicExmListDeaddictionCentre = session.createSQLQuery(systemic_examination).list();
	
	map.put("systemicExmListDeaddictionCentre",systemicExmListDeaddictionCentre);
	map.put("previousComplaintListDeaddictionCentre",previousComplaintListDeaddictionCentre);	
	map.put("deaddictionPerforma",deaddictionPerforma);	
	
	return map;
}

@Override
public Map<String, Object> setVisitUptoTimeOfDoctor(Box box) {
	Map<String, Object> map = new HashMap<>();
	int employeeId = box.getInt("docIdForVisitTime");
    String visitTimeUpto = box.get("visitTimeUpto");
    HibernateTemplate hbt = getHibernateTemplate();
    Timestamp t = new Timestamp(new Date().getTime());
	t.setHours(23);
	t.setMinutes(59);
	t.setSeconds(59);
	
    if(employeeId!=0){
    	//if(visitTimeUpto!=null && !visitTimeUpto.trim().equals("")){
    		MasEmployee employee =	hbt.get(MasEmployee.class, employeeId);
    		employee.setVisitTimeUpto(t);
    		hbt.update(employee);
    	//}
    }
			
	return map;
}

		@Override
		public Map<String, Object> getmasAdministrativeSexList() {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<>();
			List<MasAdministrativeSex> sexList = new ArrayList<MasAdministrativeSex>();
			sexList = session.createCriteria(MasAdministrativeSex.class)
							.addOrder(Order.asc("AdministrativeSexName"))
							.add(Restrictions.eq("Status", "Y").ignoreCase()).list();
			map.put("sexList", sexList);	
					
			return map;
		}

		@Override
		public Map<String, Object> printBMIChart(
				Map<String, Object> requestParametersMap) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<OpdPatientDetails> pediatricsChartList = new ArrayList<OpdPatientDetails>();
			Session session = (Session)getSession();
			
			int hinId =0;
			if(requestParametersMap.get("hinId") != null){
				hinId = (Integer)requestParametersMap.get("hinId");
			}
	
			pediatricsChartList =session.createCriteria(OpdPatientDetails.class)
					.createAlias("Visit", "v")//.add(Restrictions.eq("v.Id", visitId))
			.createAlias("v.Hin", "h").add(Restrictions.eq("h.Id",hinId)).list();
			
			
			XYSeriesCollection dataset = new XYSeriesCollection();
			XYSeries series1 = new XYSeries("Average Weight");
			XYSeries series2 = new XYSeries("Average Height");
			XYSeries series3 = new XYSeries("BMI");
			String gender = "";
	      	if (pediatricsChartList.size() > 0) {
				
				for (OpdPatientDetails opdPatientDetails: pediatricsChartList) {
					//int childHeight = 0;
					Double childHeight = 0.0;
					Double weight=0.0;
					int age = 0;					
					Hour hour = null;					
					Double bmiValue=0.0;
					String bmiComment="";

					if (opdPatientDetails != null && opdPatientDetails.getVisit() != null) {
						String ptAge=!opdPatientDetails.getVisit().getAge().equals("")?opdPatientDetails.getVisit().getAge():"";
							if(ptAge.length()>0){
							age=Integer.parseInt(ptAge.split(" ")[0]);
							}
							} 
				if (opdPatientDetails.getHeight() != null) {
					childHeight= opdPatientDetails.getHeight().doubleValue();
					}
				if (opdPatientDetails.getWeight() != null) {
					weight= opdPatientDetails.getWeight();
					}
				
				if(age != 0 && childHeight!= 0 && weight != 0){
					series1.addOrUpdate(age,weight.intValue());
					series2.addOrUpdate(age,childHeight.intValue());
				
				childHeight = childHeight/100;
				bmiValue = ((weight/(childHeight*childHeight)));
				if(bmiValue < 18.5){
					bmiComment="Underweight";
				}else if(bmiValue >=18.5 && bmiValue<25 ){
					bmiComment="Healthy Range";
				}else if(bmiValue>=25 && bmiValue<=30)
				{
					bmiComment="Overweight";
				}else if(bmiValue>=30 && bmiValue<=35)
				{
					bmiComment="Obese";
				}else if(bmiValue>35)
				{
					bmiComment="Severely obese";
				}
				
				series3.add(age, bmiValue);
			}	
				 if(opdPatientDetails.getVisit().getHin().getSex() != null){
					gender = opdPatientDetails.getVisit().getHin().getSex().getAdministrativeSexName();
				 }
				}
				dataset.addSeries(series1);
				dataset.addSeries(series2);
				dataset.addSeries(series3);
			} else 
			{
				map.put("status", "nodata");
			}
	      	JFreeChart chart = null;
	     if(gender.equalsIgnoreCase("Female")){
	      	 chart = ChartFactory.createXYLineChart
	      	("IAP Body Mass Index (BMI) chart for Girls", "Years", "weight(Kg)",
	      			dataset, PlotOrientation.VERTICAL, true, true, false);
	     }else{
	    	  chart = ChartFactory.createXYLineChart
				      	("IAP Body Mass Index (BMI) chart for Boys ", "Years", "weight(Kg)/Height(cm)",
				      			dataset, PlotOrientation.VERTICAL, true, true, false);
	    	 
	     }
	    	chart.setBackgroundPaint(Color.white);
			XYPlot plot = (XYPlot) chart.getPlot();
			plot.setBackgroundPaint(Color.lightGray);
			plot.setDomainGridlinePaint(Color.white);
			plot.setRangeGridlinePaint(Color.white);
			plot.setAxisOffset(new RectangleInsets(1.0, 1.0, 1.0, 1.0));
			plot.setDomainCrosshairVisible(true);
			plot.setRangeCrosshairVisible(true);
	    
			XYItemRenderer pr = plot.getRenderer();
			if (pr instanceof XYLineAndShapeRenderer) {
				XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) pr;
				renderer.setBaseShapesVisible(true);
				renderer.setBaseShapesFilled(true);
				renderer.setStroke(new java.awt.BasicStroke(3.5f)); 
				
			}
			NumberAxis paxis = (NumberAxis) plot.getDomainAxis();
			paxis.setAutoRange(true);
			JFreeChartRenderer jfcRenderer = new JFreeChartRenderer(chart);
			chart.getBackgroundImage();
			map.put("jfcRenderer", jfcRenderer);
			map.put("chart", chart);
			Connection con = session.connection();
			map.put("conn", con);
			return map;
		}
		
		
		@Override	
		public Map<String, Object> getprescriptionListHTML(Map<String, Object> Datamap) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<>();
			List<PatientPrescriptionDetails> ppdtList = new ArrayList<PatientPrescriptionDetails>();
			List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
			int visitId=(int)Datamap.get("visitId");
		
			ppdtList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "hd")
					.createAlias("Insrtuction", "in")
					.add(Restrictions.eq("hd.Visit.Id", visitId)).list();
			
			map.put("ppdtList", ppdtList);	
			
			return map;
		
			
			
		}
		
		@Override	
		public Map<String, Object> getInvestigationionHTML(Map<String, Object> Datamap) {
			Session session = (Session) getSession();
			Map<String, Object> map = new HashMap<>();
			List<DgOrderdt> piList = new ArrayList<DgOrderdt>();
			List<MasStoreItem> itemList=new ArrayList<MasStoreItem>();
			int visitId=(int)Datamap.get("visitId");
			
			piList = session.createCriteria(DgOrderdt.class).createAlias("Orderhd", "hd").
					add(Restrictions.eq("hd.Visit.Id", visitId)).list();
				
			
			map.put("piList", piList);	
			
			return map;
	
		}

		@Override
		public Map<String, Object> saveHemoDialysis(Map<String, Object> infoMap) {
			Map<String, Object> map = new HashMap<>();
			OpdHemoDialysis opdHemoDialysis = new OpdHemoDialysis();
			int hinId=0;
			int visitId=0;
			boolean saved=true;
			if (infoMap.get("hinId") != null) {
				hinId = (Integer) infoMap.get("hinId");
			}
			
			if (infoMap.get("visitId") != null) {
				visitId = (Integer) infoMap.get("visitId");
			}
			
			int opdPatientDetailId= 0;
			if (infoMap.get("opdpatientDetailId") != null) {
				opdPatientDetailId = (Integer) infoMap.get("opdpatientDetailId");
			}
			
			if (infoMap.get("dialDate") != null) {
				opdHemoDialysis.setDialysisDate((String)infoMap.get("dialDate"));
			}
			
			if (infoMap.get("hdNo") != null) {
				opdHemoDialysis.setDialysisHdNo((Integer)infoMap.get("hdNo"));;
			}
			
			if (infoMap.get("dialysisAccess1") != null) {
				opdHemoDialysis.setDialysisAccess1((String)infoMap.get("dialysisAccess1"));
			}
			
			if (infoMap.get("dialysisAccess2") != null) {
				opdHemoDialysis.setDialysisAccess2((String)infoMap.get("dialysisAccess2"));
			}
			
			if (infoMap.get("preHdWeight") != null) {
				opdHemoDialysis.setPreHdWeight((BigDecimal)infoMap.get("preHdWeight"));
			}
			
			if (infoMap.get("postHdWeight") != null) {
				opdHemoDialysis.setPostHdWeight((BigDecimal)infoMap.get("postHdWeight"));
			}
			
			if (infoMap.get("weightGain") != null) {
				opdHemoDialysis.setWeightGain((BigDecimal)infoMap.get("weightGain"));
			}
			
			if (infoMap.get("heparinDose") != null) {
				opdHemoDialysis.setHeparinDose((String)infoMap.get("heparinDose"));
			}
			
			if (infoMap.get("bloodFlowRate") != null) {
				opdHemoDialysis.setBloodFlowRate((Integer)infoMap.get("bloodFlowRate"));
			}
			
			if (infoMap.get("dialysateFlowRate") != null) {
				opdHemoDialysis.setDialysateFlowRate((Integer)infoMap.get("dialysateFlowRate"));
			}
			
			if (infoMap.get("ktV") != null) {
				opdHemoDialysis.setKtV((Integer)infoMap.get("ktV"));
			}
			
			if (infoMap.get("urr") != null) {
				opdHemoDialysis.setUrr((Integer)infoMap.get("urr"));
			}
			
			if (infoMap.get("uf") != null) {
				opdHemoDialysis.setUf((Integer)infoMap.get("uf"));
			}
			
			if (infoMap.get("nextDialysisDate") != null) {
				opdHemoDialysis.setNextDialysisDate((String)infoMap.get("nextDialysisDate"));
			}
			
			if (infoMap.get("nextDialysisTime") != null) {
				opdHemoDialysis.setNextDialysisTime((String) infoMap.get("nextDialysisTime"));
			}
			
			if (infoMap.get("eventsComplications") != null) {
				opdHemoDialysis.setEventsComplications((String) infoMap.get("eventsComplications"));
			}
			
			if (infoMap.get("vitalCurrentDateAndTime") != null) {
				opdHemoDialysis.setVitalDateTime((String) infoMap.get("vitalCurrentDateAndTime"));
			}
			
			if (infoMap.get("vitalBp") != null) {
				opdHemoDialysis.setVitalBp((String) infoMap.get("vitalBp"));
			}
			
			if (infoMap.get("vitalPulse") != null) {
				opdHemoDialysis.setVitalPulse((Integer)infoMap.get("vitalPulse"));
			}
			
			if (infoMap.get("vitalTemperature") != null) {
				opdHemoDialysis.setVitalTemperature((BigDecimal)infoMap.get("vitalTemperature"));
			}
			
			
			OpdPatientDetails opdPatientDetails = new OpdPatientDetails();
			opdPatientDetails.setId(opdPatientDetailId);
			opdHemoDialysis.setOpdPatientDetails(opdPatientDetails);
			
			Patient patient = new Patient();
			patient.setId(hinId);
			opdHemoDialysis.setHin(new Patient(hinId));
			
			try{
				
			Session session = (Session) getSession();
			Transaction tx=session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.save(opdHemoDialysis);
			tx.commit();
			
			}catch(Exception e){
				e.printStackTrace();
				
			}
			map.put("saved", saved);
			map.put("opdHemoDialysis", opdHemoDialysis);
			return map;
		}

		@Override
		public Map<String, Object> showHemoDialysis(
				Map<String, Object> requestMap) {
			
			Map<String, Object> map = new HashMap();
		    Session session = (Session)getSession();
		    List<OpdHemoDialysis> hemoDialysisList = new ArrayList();
		    
		    int hdNo=0;
		    
		    int hinId = ((Integer)requestMap.get("hinId"));	
		    int visitId= ((Integer)requestMap.get("visitId"));	
		    
		    hemoDialysisList = session.createCriteria(OpdHemoDialysis.class)
		      .createAlias("Hin", "h")
		      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
		      .addOrder(Order.desc("Id")).setMaxResults(1)
		      .list();
		    if(hemoDialysisList.size()<=0)
		    {
		    	hdNo = 1;
		    }
		    else{
		    	hdNo=hemoDialysisList.get(0).getDialysisHdNo();
		    	
		    	hdNo=hdNo + 1;
		    }
		    map.put("hdNo", hdNo);
		    map.put("hemoDialysisList", hemoDialysisList);
		    map.put("hinId", hinId);
		    

		    return map;
			
		}

		@Override
		public Map<String, Object> getVitalDetails(
				Map<String, Object> requestMap) {
			
			Map<String, Object> map = new HashMap<String, Object>();
		    Session session = (Session)getSession();
		    List<OpdHemoDialysis> hemoDialysisVitalList = new ArrayList<OpdHemoDialysis>();		    
		    
		    int hinId=(Integer)requestMap.get("hinId");
		    
		    hemoDialysisVitalList = session.createCriteria(OpdHemoDialysis.class)
		      .createAlias("Hin", "h")
		      .add(Restrictions.eq("h.Id", Integer.valueOf(hinId)))
		      .list();
		    
		    map.put("hemoDialysisVitalList", hemoDialysisVitalList);
		    return map;
		}
		
	public Map<String, Object> getDoctorSpecificPatientList(Map mapForDS) {
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;

		if (mapForDS.get("hospitalId") != null)
			hospitalId = (Integer) mapForDS.get("hospitalId");
		if (mapForDS.get("deptId") != null)
			deptId = (Integer) mapForDS.get("deptId");
		if (mapForDS.get("userId") != null)
			userId = (Integer) mapForDS.get("userId");

		Map<String, Object> map = new HashMap<>();
		List<Object[]> patientList = new ArrayList<>();
		MasHospital masHospital = null;
		MasEmployee employee = null;

		try {
			Session session = (Session) getSession();
			Users users = (Users) session.load(Users.class, userId);
			employee = users.getEmployee();
			Criteria criteria = session
					.createCriteria(QueueManagment.class)
					.createAlias("Visit", "v")
					.createAlias("Hin", "h")
					.createAlias("v.Department", "dept")
					.add(Restrictions.eq("LsCngDate", new Date()))
					.add(Restrictions.ne("TokenStatus", "c").ignoreCase())
					.add(Restrictions.ne("TokenStatus", "a").ignoreCase())
					.add(Restrictions.ne("TokenStatus", "p").ignoreCase())
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("dept.Id", deptId));

			/*criteria.createAlias("docotor.Users", "u")
					.add(Restrictions.eq("u.AvailableToday", "y").ignoreCase())
					.add(Restrictions.eq("u.LoginStatus", "y").ignoreCase())
					.createAlias("u.CurrentCounter", "cc")
					.add(Restrictions.isNotNull("cc.CounterNo"));*/

			if (employee != null)
				criteria.add(Restrictions.eq("InitialDr.Id", employee.getId())).add(Restrictions.eq("Docotor.Id", employee.getId()));

			criteria.addOrder(Order.asc("v.DisplayAfterNo"));
			criteria.addOrder(Order.asc("v.TokenNo"));
			criteria.setProjection(Projections.projectionList()
					.add(Projections.property("h.HinNo"))
					.add(Projections.property("h.PFirstName"))
					.add(Projections.property("h.PMiddleName"))
					.add(Projections.property("h.PLastName"))
					.add(Projections.property("v.TokenNo")));
			patientList = criteria.list();
			masHospital = (MasHospital) session.get(MasHospital.class,
					hospitalId);

			map.put("patientList", patientList);
			map.put("masHospital", masHospital);
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> getSubParameterDetails(
			Map<String, Object> generalMap) {
	Map<String, Object> map = new HashMap<String, Object>();
	List<DgSubMasInvestigation> subInvestigationList = new ArrayList<DgSubMasInvestigation>();
	String chargeCodeName = "";
	int  rowVal = 0;
	if(generalMap.get("chargeCodeName") != null){
		chargeCodeName = (String)generalMap.get("chargeCodeName");
	}
	if(generalMap.get("rowVal") != null){
		rowVal = (Integer)generalMap.get("rowVal");
	}
	Session session = (Session) getSession();
	subInvestigationList = session.createCriteria(DgSubMasInvestigation.class).createAlias("Investigation", "inv")
			.add(Restrictions.eq("inv.InvestigationName", chargeCodeName)).add(Restrictions.eq("inv.InvestigationType", "m")).list();
	map.put("subInvestigationList", subInvestigationList);
	map.put("rowVal", rowVal);
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> displaySubParameterResult(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<ExternalLabReportCommon>labReportList = new ArrayList<ExternalLabReportCommon>();
		List<DgSubMasInvestigation>subInvesetigationList = new ArrayList<DgSubMasInvestigation>();
		List<DgFixedValue>normalRangeList = new ArrayList<DgFixedValue>();
		List subInvList = new ArrayList();
		Session session = (Session)getSession();
		int hinId = box.getInt("hinId");
		String resultDate =box.getString("resultDate");
		String resultTime =box.getString("resultTime");
		int investigationId = box.getInt("investigationId");
		subInvesetigationList = session.createCriteria(DgSubMasInvestigation.class).add(Restrictions.eq("Investigation.Id", investigationId)).list();
		if(subInvesetigationList.size()>0){
		for(DgSubMasInvestigation subinvestigation :subInvesetigationList){
			
			subInvList.add(subinvestigation.getId());
		}
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL1;
		
			//date4MySQL1 = formatterOut.format(formatterIn.parse(resultDate));
			java.sql.Date startDate = java.sql.Date.valueOf(resultDate);
		
		
		labReportList = session.createCriteria(ExternalLabReportCommon.class).add(Restrictions.eq("Hin.Id", hinId))
									.add(Restrictions.eq("TestDate", startDate)).add(Restrictions.eq("TestTime", resultTime))
									.add(Restrictions.in("SubInvestigation.Id", subInvList)).list();
		
		normalRangeList = session.createCriteria(DgFixedValue.class).add(Restrictions.in("SubInvestigation.Id", subInvList)).list();
		}
		map.put("labReportList", labReportList);
		map.put("normalRangeList", normalRangeList);
		return map;
	}
	@Override	
	public Map<String, Object> printANCHtml(Map<String, Object> Datamap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<>();
		List<OpdAntenatalCard> ancList = new ArrayList<OpdAntenatalCard>();
		List<OpdAntenatalCardPregnancy> cardPregnancyList=new ArrayList<OpdAntenatalCardPregnancy>();
		List<OpdAntenatalCardMedicalHistory> MedicalHistoryList=new ArrayList<OpdAntenatalCardMedicalHistory>();
		List<OpdAntenatalCardTrimester> CardTrimesterList=new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntenatalUsg> usgFirstTrimGrid1DateListFirstVisit=new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg> usgFirstTrimGrid1DateListSecondVisit=new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg> usgFirstTrimGrid1DateListThirdVisit=new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalCardTrimester> CardTrimesterList2=new ArrayList<OpdAntenatalCardTrimester>();
		List<OpdAntenatalCardTrimester> CardTrimesterList3=new ArrayList<OpdAntenatalCardTrimester>();
		List<ExternalAdmissionDetails> ExternalAdmissionDetailsList=new ArrayList<ExternalAdmissionDetails>();
		List<OpdPatientAllergyT> OpdPatientAllergyTList=new ArrayList<OpdPatientAllergyT>();
		List<MasAdministrativeSex> GenderList=new ArrayList<MasAdministrativeSex>();
		int visitId=(int)Datamap.get("visitId");
		int hinId=(int)Datamap.get("hinId");
		ancList = session.createCriteria(OpdAntenatalCard.class)
				.add(Restrictions.eq("Visit.Id", visitId)).list();
			
		cardPregnancyList=session.createCriteria(OpdAntenatalCardPregnancy.class)
				                  .add(Restrictions.eq("Visit.Id", visitId)).list();
		
		MedicalHistoryList=session.createCriteria(OpdAntenatalCardMedicalHistory.class)
				                  .add(Restrictions.eq("Visit.Id", visitId)).list();
		ExternalAdmissionDetailsList=session.createCriteria(ExternalAdmissionDetails.class)
                  .add(Restrictions.eq("Visit.Id", visitId)).list();
		OpdPatientAllergyTList=session.createCriteria(OpdPatientAllergyT.class).createAlias("OpdPatientAllergy", "opa")
                  .add(Restrictions.eq("opa.Visit.Id", visitId)).list();

		GenderList = session.createCriteria(MasAdministrativeSex.class).list();
                  
		CardTrimesterList = session.createCriteria(OpdAntenatalCardTrimester.class)
				.add(Restrictions.eq("trimesterType", 1))
				.add(Restrictions.eq("Hin.Id", hinId)).list();
		CardTrimesterList3 = session.createCriteria(OpdAntenatalCardTrimester.class)
				.add(Restrictions.eq("trimesterType", 2))
				.add(Restrictions.eq("Hin.Id", hinId)).list();
		
		CardTrimesterList2 = session.createCriteria(OpdAntenatalCardTrimester.class)
				.add(Restrictions.eq("trimesterType", 3))
				.add(Restrictions.eq("Hin.Id", hinId)).list();

		usgFirstTrimGrid1DateListFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("firstTrimWeeks", "Week10"))
				.add(Restrictions.eq("VisitFlag", "First"))
				.list();
		
		
		usgFirstTrimGrid1DateListSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("firstTrimWeeks", "Week10"))
				.add(Restrictions.eq("VisitFlag", "Second"))
				.list();
		
		usgFirstTrimGrid1DateListThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("firstTrimWeeks", "Week10"))
				.add(Restrictions.eq("VisitFlag", "Third"))
				.list();
		
		
		List<OpdAntenatalUsg> usgFirstTrimGrid2DateListFirstVisit= new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg> usgFirstTrimGrid2DateListSecondVisit= new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg> usgFirstTrimGrid2DateListThirdVisit= new ArrayList<OpdAntenatalUsg>();

//USG (10-14 Weeks) changes	start
			usgFirstTrimGrid2DateListFirstVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
					.add(Restrictions.eq("VisitFlag", "First"))
					.list();
			
			usgFirstTrimGrid2DateListSecondVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
					.add(Restrictions.eq("VisitFlag", "Second"))
					.list();
			
			usgFirstTrimGrid2DateListThirdVisit =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "First"))
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("firstTrimWeeks", "Week10-14"))
					.add(Restrictions.eq("VisitFlag", "Third"))
					.list();


		map.put("usgFirstTrimGrid2DateListFirstVisit", usgFirstTrimGrid2DateListFirstVisit);
		map.put("usgFirstTrimGrid2DateListSecondVisit", usgFirstTrimGrid2DateListSecondVisit);
		map.put("usgFirstTrimGrid2DateListThirdVisit", usgFirstTrimGrid2DateListThirdVisit);

		map.put("ancList", ancList);	
		map.put("cardPregnancyList", cardPregnancyList);
		map.put("MedicalHistoryList", MedicalHistoryList);
		map.put("CardTrimesterList", CardTrimesterList);
		
		map.put("usgFirstTrimGrid1DateListFirstVisit", usgFirstTrimGrid1DateListFirstVisit);
		map.put("usgFirstTrimGrid1DateListSecondVisit", usgFirstTrimGrid1DateListSecondVisit);
		map.put("usgFirstTrimGrid1DateListThirdVisit", usgFirstTrimGrid1DateListThirdVisit);
		map.put("CardTrimesterList2", CardTrimesterList2);
		map.put("CardTrimesterList3", CardTrimesterList3);
		map.put("ExternalAdmissionDetailsList", ExternalAdmissionDetailsList);
		
		map.put("OpdPatientAllergyTList", OpdPatientAllergyTList);
		
		map.put("GenderList", GenderList);
		
		List<OpdAntenatalUsg> usgSecondTrimFirstVisitList= new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg>  usgSecondTrimSecondVisitList= new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg>  usgSecondTrimThirdVisitList= new ArrayList<OpdAntenatalUsg>();
		
		usgSecondTrimFirstVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("VisitFlag", "First"))
					.list();
		
		usgSecondTrimSecondVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("VisitFlag", "Second"))
				.list();
		
		usgSecondTrimThirdVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Second"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("VisitFlag", "Third"))
				.list();
		
		map.put("usgSecondTrimFirstVisitList", usgSecondTrimFirstVisitList);
		map.put("usgSecondTrimSecondVisitList", usgSecondTrimSecondVisitList);
		map.put("usgSecondTrimThirdVisitList", usgSecondTrimThirdVisitList);
		
		
		List<OpdAntenatalUsg> usgThirdTrimFirstVisitList= new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg>  usgThirdTrimSecondVisitList= new ArrayList<OpdAntenatalUsg>();
		List<OpdAntenatalUsg>  usgThirdTrimThirdVisitList= new ArrayList<OpdAntenatalUsg>();
		
		usgThirdTrimFirstVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("VisitFlag", "First"))
					.list();
		
		usgThirdTrimSecondVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("VisitFlag", "Second"))
				.list();
		
		usgThirdTrimThirdVisitList =session.createCriteria(OpdAntenatalUsg.class).add(Restrictions.eq("Trimister", "Third"))
				.add(Restrictions.eq("Hin.Id", hinId))
				.add(Restrictions.eq("VisitFlag", "Third"))
				.list();
		
		map.put("usgThirdTrimFirstVisitList", usgThirdTrimFirstVisitList);
		map.put("usgThirdTrimSecondVisitList", usgThirdTrimSecondVisitList);
		map.put("usgThirdTrimThirdVisitList", usgThirdTrimThirdVisitList);
		
		
		return map;

	}


	@Override
	public Map<String, Object> showENTExaminationJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session= (Session)getSession();
		List<OpdEntExaminationSpeciality>entExaminationList = new ArrayList<OpdEntExaminationSpeciality>();
		List<OpdPatientDetails> opdPatientDetailsList = new ArrayList<OpdPatientDetails>();
		List<OpdMedicineSpecialityTemplate> opdMedicineTemplateList = null;
		//entExaminationList = session.createCriteria(OpdEntExaminationSpeciality.class).add(Restrictions.eq("Visit.Id", box.getInt("visitId"))).list();
		opdPatientDetailsList = session.createCriteria(OpdPatientDetails.class).add(Restrictions.eq("Visit.Id", box.getInt("visitId"))).list();
		
		if(opdPatientDetailsList.size()>0)
		{
			int opdPatientDetailsId = opdPatientDetailsList.get(0).getId();
			
			int hinId = box.getInt("hinId");
			
			entExaminationList = session.createCriteria(OpdEntExaminationSpeciality.class).add(Restrictions.eq("Hin.Id", hinId))
										.add(Restrictions.eq("OpdPatientDetails.Id", opdPatientDetailsId)).list();
			
	
			map.put("entExaminationList",entExaminationList);
			
		
		}
		map.put("hinId",box.getInt("hinId"));
		return map;
	}

	
	@Override
	public Map<String, Object> viewENTExaminationImages(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		List<OpdEntExaminationSpeciality>entExaminationList = new ArrayList<OpdEntExaminationSpeciality>();
		Session session= (Session)getSession();
		entExaminationList = session.createCriteria(OpdEntExaminationSpeciality.class).add(Restrictions.eq("Hin.Id", box.getInt("hinId"))).list();
		map.put("entExaminationList", entExaminationList);
		map.put("hinId", box.getInt("hinId"));
		return map;
	}


	@Override
	public Map<String, Object> displayDateWiseENTImages(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		List<OpdEntExaminationSpeciality>entImagesList = new ArrayList<OpdEntExaminationSpeciality>();
		List<OpdEntExaminationSpeciality>entExaminationList = new ArrayList<OpdEntExaminationSpeciality>();
		Session session= (Session)getSession();
		entImagesList = session.createCriteria(OpdEntExaminationSpeciality.class).add(Restrictions.eq("Visit.Id", box.getInt("visitId"))).list();
		entExaminationList = session.createCriteria(OpdEntExaminationSpeciality.class).add(Restrictions.eq("Hin.Id", box.getInt("hinId"))).list();
		map.put("entExaminationList", entExaminationList);
		map.put("entImagesList", entImagesList);
		map.put("hinId", box.getInt("hinId"));
		return map;
	}

	
		

	@Override
	public Map<String, Object> getFamilyTreeDetails(Map<String, Object> mapForDS) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<>();
		int hinId =0;
		if(mapForDS.get("hinId")!=null && mapForDS.get("hinId").toString()!="")
			hinId = Integer.parseInt(mapForDS.get("hinId").toString());

		Patient patient = (Patient)session.get(Patient.class, hinId);
			 List<FtRelation> ftRelList =session.createCriteria(FtRelation.class).list();
					
		List<Ft> ftlist = session.createCriteria(Ft.class).add(Restrictions.eq("Hin.Id", hinId)).
				list();
		map.put("ftlist", ftlist);
		map.put("patient", patient);
		map.put("ftRelList", ftRelList);
		return map;
		
	}

	@Override
	public Map<String, Object> submitFamilyTreeMembers(
			Map<String, Object> mapForDS) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<>();
		int hinId = 0;

		Transaction tx = null;
		Box box = null;
		boolean saved = false;
		try {

			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (mapForDS.get("box") != null
					&& mapForDS.get("box").toString() != "")
				box = (Box) mapForDS.get("box");

			List<String> ftParentIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"ftParentIds").split("#"));
			List<String> ftSiblingIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"ftSiblingIds").split("#"));
			List<String> ftSpouseIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"ftSpouseIds").split("#"));
			List<String> ftGParentPIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"ftGParentPIds").split("#"));
			List<String> ftGParentMIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"ftGParentMIds").split("#"));
			List<String> uncleAuntPIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"uncleAuntPIds").split("#"));
			List<String> uncleAuntMIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"uncleAuntMIds").split("#"));
			List<String> ftChildrenIds = Arrays.asList(HMSUtil
					.getValuesFromPropertiesFile("adt.properties",
							"ftChildrenIds").split("#"));
			String self = HMSUtil.getValuesFromPropertiesFile("adt.properties",
					"selfCode");

			Map<String, Ft> relationIds = new HashMap<String, Ft>();
			int gMotherPId = 0;
			int gFatherPId = 0;
			int gMotherMId = 0;
			int gFatherMId = 0;
			int motherId = 0;
			int fatherId = 0;
			int gfm = 0;
			int gfp = 0;
			int gmm = 0;
			int gmp = 0;
			boolean gpPReq = false;
			boolean gpMReq = false;
			boolean childrenReq = false;
			boolean spouseReq = false;

			Ft ft = null;
			Patient patient = new Patient(box.getInt("hinId"));
			List<Integer> relationList = new ArrayList<>();

			Map<String, FtRelation> masRelationCodeMap = new HashMap<>();
			Map<Integer, FtRelation> masRelationIdMap = new HashMap<>();

			List<FtRelation> masRelationList1 = session.createCriteria(
					FtRelation.class).list();

			for (FtRelation masRel : masRelationList1) {
				masRelationCodeMap.put(masRel.getRelationCode(), masRel);
				masRelationIdMap.put(masRel.getId(), masRel);
			}

			String relCode = null;

			for (int i = 0; i <= box.getInt("treeCount"); i++) {
				if (!box.getString("name" + i).isEmpty()) {

					relCode = masRelationIdMap.get(box.getInt("rel" + i))
							.getRelationCode();
					
					if (ftGParentPIds.contains(relCode)
							|| uncleAuntPIds.contains(relCode))
						gpPReq = true;
					else if (ftGParentMIds.contains(relCode)
							|| uncleAuntMIds.contains(relCode))
						gpMReq = true;
					else if (ftChildrenIds.contains(relCode)) {
						childrenReq = true;
						spouseReq = true;
					} else if (ftSpouseIds.contains(relCode))
						spouseReq = true;

					if (box.getInt("ftId" + i) != 0)
						ft = hbt.load(Ft.class, box.getInt("ftId" + i));
					else
						ft = new Ft();

					ft.setRelName(box.getString("name" + i));
					ft.setStatus(box.getString("status" + i));
					ft.setGender(box.getString("genVal" + i));
					ft.setRel(new FtRelation(box.getInt("rel" + i)));
					ft.setDiagnosis(box.getString("diag" + i));
					ft.setHin(patient);
					ft.setStatus(box.getString("Stat" + i));

					relationIds.put(relCode, ft);

				}
			}

			FtRelation rel = null;
			if (gpPReq) {
				for (int i = 0; i < 2; i++) {
					rel = masRelationCodeMap.get(ftGParentPIds.get(i));

					if (relationIds.containsKey(ftGParentPIds.get(i)))
						ft = relationIds.get(ftGParentPIds.get(i));
					else {
						ft = new Ft();
						ft.setStatus("n");
						ft.setGender(rel.getGender());
						ft.setRelName(rel.getRelName());
						ft.setRel(new FtRelation(rel.getId()));
						
						ft.setHin(patient);
					}
					hbt.saveOrUpdate(ft);
					if (i == 0)
						gFatherPId = ft.getId();
					else if (i == 1)
						gMotherPId = ft.getId();
					
					if (gFatherPId != 0)
						ft.setSpouse(new Ft(gFatherPId));
					
				}

			}

			if (gpMReq) {

				for (int i = 0; i < 2; i++) {
					rel = masRelationCodeMap.get(ftGParentMIds.get(i));

					if (relationIds.containsKey(ftGParentMIds.get(i)))
						ft = relationIds.get(ftGParentMIds.get(i));
					else {
						ft = new Ft();
						ft.setStatus("n");
						ft.setGender(rel.getGender());
						ft.setRelName(rel.getRelName());
						ft.setRel(new FtRelation(rel.getId()));
					
						ft.setHin(patient);
					}
					hbt.saveOrUpdate(ft);
					if (i == 0)
						gFatherMId = ft.getId();
					else if (i == 1)
						gMotherMId = ft.getId();
					if (gFatherMId != 0)
						ft.setSpouse(new Ft(gFatherMId));
					
				}

			}
		/*	System.out.println("rel:" + relationIds.containsKey(uncleAuntPIds)
					+ " re:" + relationIds.containsKey(uncleAuntMIds));*/

			if (relationIds.containsKey(uncleAuntPIds.get(0))
					|| relationIds.containsKey(uncleAuntPIds.get(1))
					|| relationIds.containsKey(uncleAuntMIds.get(0))
					|| relationIds.containsKey(uncleAuntMIds.get(1))) {
				for (Map.Entry<String, Ft> list : relationIds.entrySet()) {
					if (uncleAuntPIds.contains(list.getKey())) {
						ft = list.getValue();
						ft.setFather(new Ft(gFatherPId));
						ft.setMother(new Ft(gMotherPId));
						hbt.saveOrUpdate(ft);
					} else if (uncleAuntMIds.contains(list.getKey())) {
						ft = list.getValue();
						ft.setFather(new Ft(gFatherMId));
						ft.setMother(new Ft(gMotherMId));
						hbt.saveOrUpdate(ft);
					}
				}
			}

			for (int i = 0; i < 2; i++) {
				rel = masRelationCodeMap.get(ftParentIds.get(i));

				if (relationIds.containsKey(ftParentIds.get(i)))
					ft = relationIds.get(ftParentIds.get(i));
				else {
					ft = new Ft();
					ft.setStatus("n");
					ft.setGender(rel.getGender());
					ft.setRelName(rel.getRelName());
					ft.setRel(new FtRelation(rel.getId()));
					ft.setHin(patient);
				}

				if (i == 0 && gpPReq) {
					ft.setFather(new Ft(gFatherPId));
					ft.setMother(new Ft(gMotherPId));
				} else if (i == 1 && gpMReq) {
					ft.setFather(new Ft(gFatherMId));
					ft.setMother(new Ft(gMotherMId));
				}

				if (fatherId != 0)
					ft.setSpouse(new Ft(fatherId));
				hbt.saveOrUpdate(ft);
				if (i == 0)
					fatherId = ft.getId();
				else if (i == 1)
					motherId = ft.getId();

			}

			Ft selfFt = null;
			int spouseId = 0;
			for (Map.Entry<String, Ft> list : relationIds.entrySet()) {
				if (ftSiblingIds.contains(list.getKey())
						|| self.equals(list.getKey())) {
					ft = list.getValue();
					ft.setFather(new Ft(fatherId));
					ft.setMother(new Ft(motherId));
					hbt.saveOrUpdate(ft);
					if (self.equals(list.getKey()))
						selfFt = ft;
				}
			}

			// captured Spouse details if children or spouse exists

			if (spouseReq) {
				if (relationIds.get(self).getGender().equalsIgnoreCase("F"))
					rel = masRelationCodeMap.get(ftSpouseIds.get(0));
				else
					rel = masRelationCodeMap.get(ftSpouseIds.get(1));

				if (relationIds.containsKey(rel.getRelationCode()))
					ft = relationIds.get(rel.getRelationCode());
				else {
					ft = new Ft();
					ft.setStatus("n");
					ft.setGender(rel.getGender());
					ft.setRelName(rel.getRelName());
					ft.setRel(new FtRelation(rel.getId()));
					ft.setHin(patient);
				}

				ft.setSpouse(selfFt);
				hbt.saveOrUpdate(ft);
				spouseId = ft.getId();
			}

			if (childrenReq) {
				for (Map.Entry<String, Ft> list : relationIds.entrySet()) {
					if (ftChildrenIds.contains(list.getKey())) {
						ft = list.getValue();
						if (selfFt.getGender().equals(
								masRelationCodeMap.get(ftSpouseIds.get(0))
								.getGender())) {
							ft.setFather(selfFt);
							ft.setMother(new Ft(spouseId));
						} else {
							ft.setFather(new Ft(spouseId));
							ft.setMother(selfFt);
						}

						hbt.saveOrUpdate(ft);

					}
				}
			}

			tx.commit();
			saved = true;

		}

		catch (Exception e) {
			tx.rollback();
			logger.info("Error occured in family tree submission !"
					+ e.getMessage());
		}
		map.put("saved", saved);

		return map;
	}
	

	@Override
	public Map<String, Object> checkForDuplicateExternalTest(
			Map<String, Object> infoMap) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int hinId = ((Integer)infoMap.get("hinId"));
		String templateName = "";
		if(infoMap.get("templateName")!=null){
			templateName = ((String)infoMap.get("templateName"));
		}
		String testDate = "";
		if(infoMap.get("testDate")!=null){
			testDate = ((String)infoMap.get("testDate"));
			}
		  		
		String testName = "";
		if(infoMap.get("testName")!=null){
			testName = ((String)infoMap.get("testName"));
			}
		
		List<ExternalLabReportCommon> externalLabCheck = new ArrayList();

	   String sqlQuery = "select * from external_lab_report_common  where hin_id="+hinId+" and template_name='"+templateName+
			   "' and test_name='"+testName+"' and test_date='"+testDate+"'";
	   externalLabCheck=session.createSQLQuery(sqlQuery).list();
	   String isExist="No";
	   if(externalLabCheck.size() > 0)
		   isExist = "Yes";
		map.put("isExist", isExist);
		return map;
	}
		
}