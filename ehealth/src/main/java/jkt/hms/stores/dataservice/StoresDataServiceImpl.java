/*
 * Copyright 2008 JK Technosoft Ltd. All rights reserved.
 * Use is subject to license terms.
 * StoresDataServiceImpl.java
 * Purpose of the claas -  This is the Data Service layer implementation for Stores Module
 * @authors
 * Create Date: 4th Jan,2008
 * Revision Date:
 * Revision By:
 * @version 2.0
 */
package jkt.hms.stores.dataservice;

import static jkt.hms.util.RequestConstants.ACK_BY;
import static jkt.hms.util.RequestConstants.ACK_DATE;
import static jkt.hms.util.RequestConstants.AMOUNT;
import static jkt.hms.util.RequestConstants.APPROVED_BY;
import static jkt.hms.util.RequestConstants.APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT;
import static jkt.hms.util.RequestConstants.AU;
import static jkt.hms.util.RequestConstants.BATCH_NO;
import static jkt.hms.util.RequestConstants.BRAND_ID;
import static jkt.hms.util.RequestConstants.CHALLAN_DATE;
import static jkt.hms.util.RequestConstants.CHALLAN_NO;
import static jkt.hms.util.RequestConstants.CHANGED_BY;
import static jkt.hms.util.RequestConstants.CHANGED_DATE;
import static jkt.hms.util.RequestConstants.CHANGED_TIME;
import static jkt.hms.util.RequestConstants.CHECKED_BY;
import static jkt.hms.util.RequestConstants.COMMON_ID;
import static jkt.hms.util.RequestConstants.COST_PRICE;
import static jkt.hms.util.RequestConstants.CUSTOM_DUTY;
import static jkt.hms.util.RequestConstants.DEMAND_DATE;
import static jkt.hms.util.RequestConstants.DEMAND_NO;
import static jkt.hms.util.RequestConstants.DEPARTMENT_ID;
import static jkt.hms.util.RequestConstants.DEPARTMENT_ID_TEMP;
import static jkt.hms.util.RequestConstants.DETAIL_ID;
import static jkt.hms.util.RequestConstants.DOC_NO;
import static jkt.hms.util.RequestConstants.EMPLOYEE_ID;
import static jkt.hms.util.RequestConstants.ENTRY_ID;
import static jkt.hms.util.RequestConstants.EXCISE_DUTY;
import static jkt.hms.util.RequestConstants.EXPIRY_DATE;
import static jkt.hms.util.RequestConstants.FINANCIAL_ID;
import static jkt.hms.util.RequestConstants.FREE_ITEM;
import static jkt.hms.util.RequestConstants.FREE_QTY;
import static jkt.hms.util.RequestConstants.FREIGHT_DUTY;
import static jkt.hms.util.RequestConstants.FROM_DATE;
import static jkt.hms.util.RequestConstants.FROM_WARD;
import static jkt.hms.util.RequestConstants.GRN_DATE;
import static jkt.hms.util.RequestConstants.GRN_ID;
import static jkt.hms.util.RequestConstants.GRN_NO;
import static jkt.hms.util.RequestConstants.HIN_ID;
import static jkt.hms.util.RequestConstants.HOSPITAL_ID;
import static jkt.hms.util.RequestConstants.HOW_RECEIVED;
import static jkt.hms.util.RequestConstants.INDENT_ID;
import static jkt.hms.util.RequestConstants.INDENT_NO;
import static jkt.hms.util.RequestConstants.INSURANCE_CHARGES;
import static jkt.hms.util.RequestConstants.INVOICE_AMOUNT;
import static jkt.hms.util.RequestConstants.INVOICE_DATE;
import static jkt.hms.util.RequestConstants.INVOICE_NO;
import static jkt.hms.util.RequestConstants.ISSUED_BY;
import static jkt.hms.util.RequestConstants.ISSUED_ITEM;
import static jkt.hms.util.RequestConstants.ISSUE_DATE;
import static jkt.hms.util.RequestConstants.ISSUE_DEPT;
import static jkt.hms.util.RequestConstants.ISSUE_NO;
import static jkt.hms.util.RequestConstants.ISSUE_RETURN_ID;
import static jkt.hms.util.RequestConstants.ITEMS_TO_BE_ADDED;
import static jkt.hms.util.RequestConstants.ITEMS_TO_BE_DELETED;
import static jkt.hms.util.RequestConstants.ITEM_CATEGORY_CODE;
import static jkt.hms.util.RequestConstants.ITEM_ID;
import static jkt.hms.util.RequestConstants.LOANIN_DATE;
import static jkt.hms.util.RequestConstants.LOANIN_NO;
import static jkt.hms.util.RequestConstants.LOT_NO;
import static jkt.hms.util.RequestConstants.MANUFACTURER_ID;
import static jkt.hms.util.RequestConstants.MANUFACTURING_DATE;
import static jkt.hms.util.RequestConstants.MMF_DEPARTMENT_DATE;
import static jkt.hms.util.RequestConstants.MODE_OF_CONVEYANCE;
import static jkt.hms.util.RequestConstants.NOMENCLATURE;
import static jkt.hms.util.RequestConstants.OCTROI;
import static jkt.hms.util.RequestConstants.OTHER_CHARGES;
import static jkt.hms.util.RequestConstants.PHYSICAL_STOCK_DATE;
import static jkt.hms.util.RequestConstants.PO_ID;
import static jkt.hms.util.RequestConstants.PREPARED_BY;
import static jkt.hms.util.RequestConstants.PVMS_NO;
import static jkt.hms.util.RequestConstants.QTY_IN_REQUEST;
import static jkt.hms.util.RequestConstants.QTY_ISSUED;
import static jkt.hms.util.RequestConstants.QUANTITY_RECEIVED;
import static jkt.hms.util.RequestConstants.RECEIVED_DATE;
import static jkt.hms.util.RequestConstants.REMARKS;
import static jkt.hms.util.RequestConstants.REQUEST_BY;
import static jkt.hms.util.RequestConstants.REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT;
import static jkt.hms.util.RequestConstants.REQUEST_DATE;
import static jkt.hms.util.RequestConstants.REQUEST_NO;
import static jkt.hms.util.RequestConstants.RR_NO;
import static jkt.hms.util.RequestConstants.SOURCE_OF_SUPPLY;
import static jkt.hms.util.RequestConstants.SR_NO;
import static jkt.hms.util.RequestConstants.STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT;
import static jkt.hms.util.RequestConstants.SUPPLIER_ID;
import static jkt.hms.util.RequestConstants.SUPPLY_ORDER_NO;
import static jkt.hms.util.RequestConstants.TO_DATE;
import static jkt.hms.util.RequestConstants.TO_WARD;
import static jkt.hms.util.RequestConstants.TYPE_OF_INDENT;
import static jkt.hms.util.RequestConstants.USERID;
import static jkt.hms.util.RequestConstants.USER_ID;
import static jkt.hms.util.RequestConstants.VENDOR_RETURN_ID;
import static jkt.hms.util.RequestConstants.VISIT_ID;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.persistence.criteria.JoinType;
import javax.transaction.SystemException;

import jkt.hms.masters.business.*;
import jkt.hms.masters.dataservice.BillingMasterDataService;
import jkt.hms.util.Box;
import jkt.hms.util.ChildPojoForMasstoreItem;
import jkt.hms.util.HMSUtil;
import jkt.hms.util.MmfItemDetails;
import jkt.hms.util.PageUtil;
import jkt.hms.util.PagedArray;
import jkt.hms.util.PojoForMasStoreItem;
import jkt.hms.util.RequestConstants;
import jkt.hms.util.TaperedMedicineUtil;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.Region;
import org.apache.xerces.impl.xpath.regex.ParseException;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.model.primitive.IS;
import ca.uhn.hl7v2.model.v22.group.ORU_R01_ORDER_OBSERVATION;
import ca.uhn.hl7v2.model.v22.message.ADT_A01;
import ca.uhn.hl7v2.model.v22.message.ORU_R01;
import ca.uhn.hl7v2.model.v22.segment.MSH;
import ca.uhn.hl7v2.model.v22.segment.OBR;
import ca.uhn.hl7v2.model.v22.segment.ORC;
import ca.uhn.hl7v2.model.v22.segment.PID;
import ca.uhn.hl7v2.model.v22.segment.PV1;
import ca.uhn.hl7v2.model.v22.segment.PV2;
import ca.uhn.hl7v2.parser.Parser;
import ca.uhn.hl7v2.parser.PipeParser;

public class StoresDataServiceImpl extends HibernateDaoSupport implements
		StoresDataService {
	
	private BillingMasterDataService billingMasterDataService;
	
	
	
	public BillingMasterDataService getBillingMasterDataService() {
		return billingMasterDataService;
	}

	public void setBillingMasterDataService(
			BillingMasterDataService billingMasterDataService) {
		this.billingMasterDataService = billingMasterDataService;
	}

	HibernateTransactionManager transactionManager = null;
	//Session session;
	/*
	 * Code for read from property file from src package
	 */
	Properties properties = new Properties();
	{
		try {
			ClassLoader loader = getClass().getClassLoader();
			InputStream inStream = loader
					.getResourceAsStream("stores.properties");
			properties.load(inStream);
		} catch (IOException e) {

			e.printStackTrace();
		}
	}
	/*
	 * Logger Implemented By Mukesh Narayan Singh Date 18 Aug 2010
	 */
	static final Logger log = Logger
			.getLogger(jkt.hms.stores.dataservice.StoresDataServiceImpl.class);

	// =============================== START of GRN, LoanIN, boo, Defective
	// drugs=================
	/**
	 * get Max GRN Code as VBCH & RKS
	 * 
	 * @param last
	 *            grn no and grn code
	 * @return max GRN NO/Code
	 */
	public String getMaxGrnNo(String no) {
		String sequenceNo = "";
		try {
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			currentDate = (String) utilMap.get("currentDate");
			String financialYear = "";
			financialYear = HMSUtil.getfinancialYear(currentDate);
			String[] str = no.split("/");
			String seqNo = "";
			int sequenceCounter = 0;

			if (!no.equalsIgnoreCase("0") && !no.equalsIgnoreCase("")) {
				try {
					
					if (str[1] != "") {
						seqNo = str[1];
						if (seqNo != "" && seqNo != null) {
							sequenceCounter = Integer.parseInt(seqNo) + 1;
						} else {
							sequenceCounter = 1;
						}
					} else {
						sequenceCounter = 1;
					}
				} catch (ArrayIndexOutOfBoundsException e) {
					sequenceCounter = 1;
					e.printStackTrace();
				}
			} else {
				sequenceCounter = 1;
			}
			sequenceNo =financialYear + "/" + sequenceCounter;
		} catch (Exception e) {
			e.printStackTrace();
		}
		//
		return sequenceNo;
	}

	// GRN--------------------------
	@SuppressWarnings("unchecked")
	public Map<String, Object> showGrnJsp(Box box, Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		/* String userName = ""; */
		int hospitalId = 0;
		int deptId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		//
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		/*
		 * if (dataMap.get("userName") != null) { userName = ("" +
		 * dataMap.get("userName")); }
		 */
		List<MasStoreItem> itemListForExpiry = new ArrayList<MasStoreItem>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasUnitOfMeasurement> uomList = new ArrayList<MasUnitOfMeasurement>();
		// List<MasManufacturer> manufacturerList = new
		// ArrayList<MasManufacturer>();
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreGrnM> grnList = new ArrayList<StoreGrnM>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		/*
		 * int poId = 0; String max = ""; String startNo = "";
		 */
		String no = "";
		Session session = (Session) getSession();

		try {
			/*
			 * Code for get GRN No from property file and access right's from
			 * hospital parameter Code date 13 Oct 2010 Code By Mukesh Narayan
			 * Singh
			 */
			List<HospitalParameters> hospitalParametersList = new ArrayList<HospitalParameters>();

			hospitalParametersList = session
					.createCriteria(HospitalParameters.class)
					.add(Restrictions.eq("DeptIdStoreCodeRKS", deptId)).list();
			int departmentIdForPOCode = 0;
			String grnCode = "";

			if (hospitalParametersList.size() > 0) {

				for (HospitalParameters hospitalParameters : hospitalParametersList) {
					departmentIdForPOCode = hospitalParameters
							.getDeptIdStoreCodeRKS();
				}

				grnCode = properties.getProperty("store.store_grn_code_rks");
				employeeList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y' and Department.Id="
								+ deptId
								+ " and Hospital.Id = "
								+ hospitalId
								+ " order by mi.FirstName");
			} else if (deptId == 206) {
				//

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeDhms", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
					grnCode = properties
							.getProperty("store.store_grn_code_dhms");
					//
					employeeList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y' and Department.Id="
									+ deptId
									+ " and Hospital.Id = "
									+ hospitalId + " order by mi.FirstName");
				}
			} else if (deptId == 201) {
				//

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeKhanvel", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
					grnCode = properties
							.getProperty("store.store_grn_code_khanvel");
					//
					employeeList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y' and Department.Id="
									+ deptId
									+ " and Hospital.Id = "
									+ hospitalId + " order by mi.FirstName");
				}
			} else if (deptId != 192 && deptId != 194) {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeVBCH", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
					grnCode = properties
							.getProperty("store.store_grn_code_vbch");
					employeeList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y' and Department.Id="
									+ deptId
									+ " and Hospital.Id = "
									+ hospitalId + " order by mi.FirstName");
				}
			} else if (deptId == 192) {
				//

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeNursingCollege",
								deptId)).list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
					grnCode = properties
							.getProperty("store.store_grn_code_nurding_college");
					//
					employeeList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y' and Department.Id="
									+ deptId
									+ " and Hospital.Id ="
									+ hospitalId + " order by mi.FirstName");
				}
			} else if (deptId == 194) {
				//

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeSickel", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
					grnCode = properties
							.getProperty("store.store_grn_code_Anemia");
					//
					employeeList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y' and Department.Id="
									+ deptId
									+ " and Hospital.Id = "
									+ hospitalId + " order by mi.FirstName");
				}
			}
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as ms order by ms.SupplierName");
			uomList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasUnitOfMeasurement as mi where mi.Status = 'Y'");
			// manufacturerList = getHibernateTemplate()
			// .find("from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y' order by mi.ManufacturerName");
			// ----------changes by anamika------------
			String query = "";
			query = "select invoice_no,supplier_id from store_grn_m where department_id="
					+ deptId + " and hospital_id =" + hospitalId + "";
			searchGrnList = session.createSQLQuery(query).list();
			/*
			 * searchGrnList =
			 * session.createCriteria(StoreGrnM.class).add(Restrictions
			 * .eq("Department.Id", deptId))
			 * .setProjection(Projections.property("InvoiceNo"))
			 * //.setProjection(Projections.property("Supplier.Id")) .list();
			 */
			unitList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status = 'Y' order by mi.AirForceDepotName");
			/*
			 * grnList = getHibernateTemplate().find(
			 * "from jkt.hms.masters.business.StoreGrnM as sgm where sgm.Department.Id ='"
			 * +deptId+"' ");
			 */
			/*
			 * grnList=session.createCriteria(StoreGrnM.class).add(Restrictions.eq
			 * ("Department.Id",
			 * deptId)).setProjection(Projections.property("InvoiceNo")).list();
			 */

			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand as msb");
			// ----------changes by anamika------------
			storeFyDocumentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id="
							+ deptId
							+ " and sfdn.Hospital.Id = "
							+ hospitalId
							+ " ");
			//
			/*
			 * itemListForExpiry=session.createCriteria(MasStoreItem.class).add(
			 * Restrictions.eq("Status", "y"))
			 */
			// .add(Restrictions.eq("Expiry", "n")).list();

			if (storeFyDocumentNoList != null
					&& storeFyDocumentNoList.size() > 0) {
				for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
					if (storeFyDocumentNo.getGrnNo() != null
							&& !storeFyDocumentNo.getGrnNo().equals("")) {
						//
						no = ("" + storeFyDocumentNo.getGrnNo());
						no = getMaxGrnNo(no);

					} else {
						//
						no = getMaxGrnNo(no);
					}
				}
			} else {
				no = getMaxGrnNo(no);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("supplierList", supplierList);
		map.put("uomList", uomList);
		// map.put("manufacturerList", manufacturerList);
		map.put("searchGrnList", searchGrnList);
		map.put("employeeList", employeeList);
		map.put("unitList", unitList);
		map.put("grnList", grnList);
		map.put("brandList", brandList);
		map.put("max", no);
		map.put("itemListForExpiry", itemListForExpiry);
		return map;

	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map searchGrn(Map searchFieldMap) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		boolean flag = false;
		String toDate = "";
		List<StoreGrnM> gridGrnHeaderList = new ArrayList<StoreGrnM>();
		List<StoreGrnT> gridGrnDetailList = new ArrayList<StoreGrnT>();
		String grnNo = "";
		Criteria criteria = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = "";
		currentDate = (String) utilMap.get("currentDate");
		String financialYear = "";
		financialYear = HMSUtil.getfinancialYear(currentDate);
		Session session = (Session) getSession();

		int deptId = 0;
		if (searchFieldMap.get("deptId") != null
				&& !searchFieldMap.get("deptId").equals("0")) {
			deptId = (Integer) searchFieldMap.get("deptId");
		} else {
			// deptId=24;
		}
		try {
			fromDate = (String) searchFieldMap.get("fromDate");
			toDate = (String) searchFieldMap.get("toDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);
			if (searchFieldMap.get("grnNo") != null
					&& !searchFieldMap.get("grnNo").equals("")) {

				criteria = session.createCriteria(StoreGrnM.class).add(
						Restrictions.eq("GrnNo", searchFieldMap.get("grnNo")));
				gridGrnHeaderList = criteria.list();
			} else {

				criteria = session
						.createCriteria(StoreGrnM.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions
								.between("GrnDate", startDate, endDate));
				gridGrnHeaderList = criteria.list();

			}

			/*
			 * List<Integer> grnmIdList = new ArrayList<Integer>();
			 * if(gridGrnHeaderList.size()>0){ for(StoreGrnM grnM
			 * :gridGrnHeaderList) { grnmIdList.add(grnM.getId()); }
			 * gridGrnDetailList =
			 * session.createCriteria(StoreGrnT.class).add(Restrictions
			 * .in("GrnMaster.Id", grnmIdList)).list(); }
			 */
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("gridGrnDetailList", gridGrnDetailList);
		map.put("gridGrnHeaderList", gridGrnHeaderList);
		return map;
	}

	/*
	 * public Map getGrnModifyMap(int radio_str) {
	 * 
	 * Map map=new HashMap(); List<StoreGrnM> gridGrnMList= new
	 * ArrayList<StoreGrnM>(); List<StoreGrnT> gridGrnTList= new
	 * ArrayList<StoreGrnT>(); List<MasStoreSupplier> gridSupplierList= new
	 * ArrayList<MasStoreSupplier>(); List<MasUnitOfMeasurement> gridUomList=
	 * new ArrayList<MasUnitOfMeasurement>(); List<MasEmployee
	 * >gridEmployeeList= new ArrayList<MasEmployee>(); List<StoreIndentM
	 * >gridIndentList= new ArrayList<StoreIndentM>();
	 * 
	 * int id=0; gridGrnMList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreGrnM as md where md.Id = '"+radio_str+"'");
	 * for (StoreGrnM storeGrnM :gridGrnMList ) { id=storeGrnM.getId(); }
	 * 
	 * gridGrnTList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreGrnT "); gridSupplierList =
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasStoreSupplier "); gridUomList=
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasUnitOfMeasurement ");
	 * gridEmployeeList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasEmployee ");
	 * gridIndentList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreIndentM ");
	 * map.put("gridGrnMList",gridGrnMList);
	 * map.put("gridGrnTList",gridGrnTList); map.put("gridUomList",gridUomList);
	 * map.put("gridSupplierList",gridSupplierList); map.put("gridEmployeeList",
	 * gridEmployeeList); map.put("gridIndentList", gridIndentList);
	 * map.put("grnId", id );
	 * 
	 * return map; }
	 */
	/*
	 * public Map<String,Object> grnModifyMap(int grnId,int pageNo) {
	 * Map<String,Object> map=new HashMap<String,Object>(); List<StoreGrnT>
	 * storeGrnTlist = new ArrayList<StoreGrnT>(); List<StoreGrnM> grnMList =
	 * new ArrayList<StoreGrnM>(); List<MasStoreSupplier>supplierList= new
	 * ArrayList<MasStoreSupplier>(); List<MasEmployee>employeeList= new
	 * ArrayList<MasEmployee>(); List<MasStoreItem>itemList= new
	 * ArrayList<MasStoreItem>(); int firstResult = 0; int maxResults = 10;
	 * 
	 * if(pageNo != 0){ firstResult = firstResult + ( pageNo ) * 10; }
	 * 
	 * Session session = (Session)getSession(); Criteria c =
	 * session.createCriteria
	 * (StoreGrnT.class).add(Restrictions.eq("GrnMaster.Id", grnId));
	 * c.setFirstResult(firstResult); c.setMaxResults(maxResults); storeGrnTlist
	 * = c.list(); grnMList =
	 * session.createCriteria(StoreGrnM.class).add(Restrictions.eq("Id",
	 * grnId)).list(); supplierList =
	 * session.createCriteria(MasStoreSupplier.class
	 * ).add(Restrictions.eq("Status", "y")).list(); employeeList=
	 * session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status",
	 * "y")).list();
	 * 
	 * map.put("storeGrnTlist", storeGrnTlist); map.put("grnMList", grnMList);
	 * map.put("supplierList", supplierList); map.put("employeeList",
	 * employeeList); return map; }
	 */
	public Map<String, Object> modifyGrn(int grnId, int pageNo, int spoId,
			String items) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> gridGrnMList = new ArrayList<StoreGrnM>();
		List<StoreGrnT> gridGrnTList = new ArrayList<StoreGrnT>();
		List objectList1 = new ArrayList();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		int firstResult = 0;
		// int maxResults = 40;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreGrnT.class).add(
				Restrictions.eq("GrnMaster.Id", grnId));
		gridGrnTList = c.list();
		gridGrnMList = session.createCriteria(StoreGrnM.class)
				.add(Restrictions.eq("Id", grnId)).list();

		if (items.trim().length() > 0) {
			if (spoId != 0) {
				StringTokenizer str = new StringTokenizer(items, ",");
				while (str.hasMoreTokens()) {
					objectList1.add(Integer.parseInt("" + str.nextToken()));
				}

				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.in("Item.Id", objectList1));
				brandList = c2.list();

				Criteria c3 = session.createCriteria(StorePoDetail.class)
						.add(Restrictions.eq("Po.Id", spoId))
						.add(Restrictions.in("Item.Id", objectList1));
				poList = c3.list();
			}
		}

		map.put("gridGrnTList", gridGrnTList);
		map.put("gridGrnMList", gridGrnMList);
		map.put("poList", poList);
		map.put("brandList", brandList);
		return map;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map<String, Object> updateCrv(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		// List<StoreFyDocumentNo> storeFyDocumentNoList = new
		// ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		int supplierOrUnitId = 0;
		int indentOrPoId = 0;
		int po_id = 0;
		int employeeId = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		// java.sql.Date grnDate = null;
		java.sql.Date invoiceDate = null;
		java.sql.Date date_received_surplus = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String howReceived = "";
		String rrNo = "";
		String modeOfConveyance = "";
		String invoiceNo = "";
		String date4MySQL = "";
		// String grnNo = "";
		// String max = "";
		String no = "";
		String userName = "";
		String sos = "";
		String supplyOrderNo = "";
		String remarks = "";

		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal customDuty = null;
		BigDecimal grnValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;
		BigDecimal roundOffValue = null;
		BigDecimal actualGrnValue = null;
		// BigDecimal mrp = null;
		// BigDecimal dispencingPrice = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");

		sos = box.get(SOURCE_OF_SUPPLY);
		supplierOrUnitId = box.getInt(SUPPLIER_ID);

		if (sos.equalsIgnoreCase("w") || sos.equalsIgnoreCase("i")
				|| sos.equalsIgnoreCase("x")) {
			indentOrPoId = 0;
		} else {
			indentOrPoId = box.getInt(INDENT_ID);
		}
		if (sos.equalsIgnoreCase("l")) {
			po_id = box.getInt("po_id1");
		}

		// grnNo = box.getString(GRN_NO);
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(GRN_DATE)));
			// grnDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			// grnDate = null;
			e.printStackTrace();
		}

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(RECEIVED_DATE)));
			date_received_surplus = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			date_received_surplus = null;
		}

		howReceived = box.getString(HOW_RECEIVED);
		rrNo = box.getString(RR_NO);
		modeOfConveyance = box.getString(MODE_OF_CONVEYANCE);
		employeeId = box.getInt(EMPLOYEE_ID);
		invoiceNo = box.getString(INVOICE_NO);

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(INVOICE_DATE)));
			invoiceDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			invoiceDate = null;
		}
		try {
			invoiceAmount = new BigDecimal(box.getString(INVOICE_AMOUNT));
		} catch (Exception e) {
			invoiceAmount = new BigDecimal(0);
		}

		try {
			freightDuty = new BigDecimal(box.getString(FREIGHT_DUTY));
		} catch (Exception e) {
			freightDuty = new BigDecimal(0);
		}

		try {
			exciseDuty = new BigDecimal(box.getString(EXCISE_DUTY));
		} catch (Exception e) {
			exciseDuty = new BigDecimal(0);
		}

		try {
			octroi = new BigDecimal(box.getString(OCTROI));
		} catch (Exception e) {
			octroi = new BigDecimal(0);
		}

		try {
			insuranceCharge = new BigDecimal(box.getString(INSURANCE_CHARGES));
		} catch (Exception e) {
			insuranceCharge = new BigDecimal(0);
		}

		try {
			customDuty = new BigDecimal(box.getString(CUSTOM_DUTY));
		} catch (Exception e) {
			customDuty = new BigDecimal(0);
		}

		try {
			otherCharges = new BigDecimal(box.getString(OTHER_CHARGES));
		} catch (Exception e) {
			otherCharges = new BigDecimal(0);
		}

		try {
			grnValue = new BigDecimal(box.getString("grnValue"));
		} catch (Exception e) {
			grnValue = new BigDecimal(0);
		}

		try {
			actualGrnValue = new BigDecimal(box.getString("actualGrnValue"));
		} catch (Exception e) {
			actualGrnValue = new BigDecimal(0);
		}

		try {
			roundOffValue = new BigDecimal(box.getString("roundOfValue"));
		} catch (Exception e) {
			roundOffValue = new BigDecimal(0);
		}

		try {
			vat = new BigDecimal(box.getString("vatTax"));
		} catch (Exception e) {
			vat = new BigDecimal(0);
		}

		try {
			discount = new BigDecimal(box.getString("totDiscount"));
		} catch (Exception e) {
			discount = new BigDecimal(0);
		}

		supplyOrderNo = box.getString(SUPPLY_ORDER_NO);
		remarks = box.getString(REMARKS);

		// Create StoreGrnM object and Set the Values
		int grn_id = box.getInt(GRN_ID);
		StoreGrnM storeGrnM = new StoreGrnM();
		storeGrnM = (StoreGrnM) hbt.load(StoreGrnM.class, grn_id);
		storeGrnM.setReceiveType(sos);
		storeGrnM.setAtSoNo(supplyOrderNo);
		storeGrnM.setDateReceivedSurplus(date_received_surplus);
		storeGrnM.setHowReceived(howReceived);
		storeGrnM.setModeOfConveyance(modeOfConveyance);
		storeGrnM.setRemarks(remarks);
		storeGrnM.setRrNo(rrNo);
		storeGrnM.setRoundOffValue(roundOffValue);

		try {
			storeGrnM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeGrnM.setDepartment(null);
		}
		try {
			storeGrnM.setEmployee(new MasEmployee(employeeId));
		} catch (Exception e) {
			storeGrnM.setEmployee(null);
		}

		try {
			storeGrnM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeGrnM.setHospital(null);
		}

		if (sos.equalsIgnoreCase("p") || sos.equalsIgnoreCase("x")) {
			if (supplierOrUnitId != 0) {
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			} else {
				storeGrnM.setSupplier(null);
			}

			if (indentOrPoId != 0) {
				storeGrnM.setIndent(new StoreInternalIndentM(indentOrPoId));
			} else {
				storeGrnM.setIndent(null);
			}
		} else if (sos.equalsIgnoreCase("a") || sos.equalsIgnoreCase("o")
				|| sos.equalsIgnoreCase("i")) {
			if (supplierOrUnitId != 0) {
				storeGrnM.setUnit(new MasStoreAirForceDepot(supplierOrUnitId));
			} else {
				storeGrnM.setUnit(null);
			}

			if (indentOrPoId != 0) {
				storeGrnM.setIndent(new StoreInternalIndentM(indentOrPoId));
			} else {
				storeGrnM.setIndent(null);
			}
		} else if (sos.equalsIgnoreCase("l")) {
			// if (supplierOrUnitId!=0)
			// storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));

			// if (po_id!=0)
			// storeGrnM.setPo(new StorePoHeader(po_id));

		} else if (sos.equalsIgnoreCase("w")) {
			if (supplierOrUnitId != 0) {
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			} else {
				storeGrnM.setSupplier(null);
			}
		}

		storeGrnM.setCustomDuty(customDuty);
		storeGrnM.setExciseDuty(exciseDuty);
		storeGrnM.setFreightDuty(freightDuty);
		storeGrnM.setInsuranceCharge(insuranceCharge);
		storeGrnM.setOctroi(octroi);
		storeGrnM.setOtherCharges(otherCharges);

		storeGrnM.setGrnValue(actualGrnValue);
		storeGrnM.setVat(vat);
		storeGrnM.setDiscount(discount);
		storeGrnM.setGrnAmount(grnValue);
		// storeGrnM.setGrnNo(grnNo);
		// storeGrnM.setGrnDate(grnDate);
		storeGrnM.setInvoiceNo(invoiceNo);
		storeGrnM.setInvoiceDate(invoiceDate);
		storeGrnM.setInvoiceAmount(invoiceAmount);

		if (box.getString("validate").equals("t")) {
			storeGrnM.setStatus("v");
		} else {
			storeGrnM.setStatus("o");
		}
		Users users = new Users();
		users.setId(box.getInt("userId"));
		storeGrnM.setLastChgBy(users);
		storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		storeGrnM.setLastChgTime(time);

		Transaction tx = null;
		boolean conFlag = false;
		try {
			tx = session.beginTransaction();

			String hql = "delete from jkt.hms.masters.business.StoreGrnT as t where t.GrnMaster.Id='"
					+ box.get(GRN_ID) + "'";
			Query query = session.createQuery(hql);
			int row = query.executeUpdate();

			// Create StoreGrnTList Contains StoreGrnT Objects and Set the
			// Corresponding Values
			List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
			List objectList = new ArrayList();

			StoreGrnT storeGrnT = null;

			Vector itemId = box.getVector(ITEM_ID);
			// Vector brandId = box.getVector(BRAND_ID);
			Vector manufacturerId = box.getVector(MANUFACTURER_ID);
			Vector batchNo = box.getVector(BATCH_NO);
			// Vector lotNo = box.getVector(LOT_NO);
			Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
			Vector freeQty = box.getVector(FREE_QTY);
			Vector dispType = box.getVector("dispenseType");
			Vector mdqValue = box.getVector("mdq");
			Vector ratePerMdq = box.getVector("ratePerMdq");
			Vector convertedStock = box.getVector("convertedStock");
			Vector discountAmount = box.getVector("discountAmount");
			Vector taxAmount = box.getVector("taxAmount");
			Vector finalCostPrice = box.getVector(COST_PRICE);
			Vector amountValue = box.getVector(AMOUNT);
			Vector freeItem = box.getVector(FREE_ITEM);
			Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
			Vector expiryDate = box.getVector(EXPIRY_DATE);
			Vector flag = box.getVector("flag");
			Vector loaninId = box.getVector(DETAIL_ID);
			Vector dispencingPrice1 = box.getVector("dispencingPrice");
			Vector mrp1 = box.getVector("mrp");
			Vector barcodeNo = box.getVector("barcodeNo");
			int slno = 1;

			for (int i = 0; i < itemId.size(); i++) {
				if (itemId.get(i).toString().equalsIgnoreCase("0")) {
					break;
				}

				storeGrnT = new StoreGrnT();
				storeGrnT.setSerialNo(slno++);
				storeGrnT.setItem(new MasStoreItem(new Integer(itemId.get(i)
						.toString())));
				// storeGrnT.setBrand(new MasStoreBrand(new
				// Integer(brandId.get(i).toString())));
				if (!manufacturerId.get(i).equals("")) {
					storeGrnT.setManufacturer(new MasManufacturer(new Integer(
							manufacturerId.get(i).toString())));
				}

				/**
				 * laundry_group_id==53 means Laundry laundry_group_id=53
				 */

				int laundry_group_id = 0;
				laundry_group_id = Integer.parseInt(properties
						.getProperty("laundry_group_id"));
				String laundry_batch_no = "";
				laundry_batch_no = properties.getProperty("laundry_batch_no");

				/**
				 * if item group is laundry then default bacth is A for all item
				 * Code By Mukesh Narayan Singh Date 07 July 2011
				 */
				List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
				int item_Id = 0;
				item_Id = storeGrnT.getItem().getId();
				masStoreItemList = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.idEq(item_Id)).list();
				int itemGroup = 0;
				if (masStoreItemList.size() > 0) {
					MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
							.get(0);
					if (masStoreItem.getDepartment() != null) {
						itemGroup = masStoreItem.getGroup().getId();
					}
				}
				if (laundry_group_id == itemGroup) {
					storeGrnT.setBatchNo(laundry_batch_no);
				} else {
					storeGrnT.setBatchNo(batchNo.get(i).toString());
				}
				// storeGrnT.setLotNo(lotNo.get(i).toString());
				try {
					storeGrnT.setReceivedQty(new BigDecimal(receivedQty.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setReceivedQty(new BigDecimal(0));
				}

				try {
					storeGrnT.setMrp(new BigDecimal(mrp1.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setMrp(new BigDecimal(0));
				}
				try {
					storeGrnT.setDispencingPrice(new BigDecimal(
							dispencingPrice1.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setDispencingPrice(new BigDecimal(0));
				}
				try {
					storeGrnT.setBarcodeNo(barcodeNo.get(i).toString());
				} catch (Exception e) {
					storeGrnT.setBarcodeNo("");
				}

				try {
					storeGrnT
							.setFreeQty(new Integer(freeQty.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setFreeQty(new Integer(0));
				}

				try {
					storeGrnT.setDiscount(new BigDecimal(discountAmount.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setDiscount(null);
				}

				try {
					storeGrnT
							.setTax(new BigDecimal(taxAmount.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setTax(null);
				}

				try {
					storeGrnT.setFinalCostPrice(new BigDecimal(finalCostPrice
							.get(i).toString()));
				} catch (Exception e) {
					storeGrnT.setFinalCostPrice(new BigDecimal(0));
				}

				try {
					storeGrnT.setAmountValue(new BigDecimal(amountValue.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setAmountValue(new BigDecimal(0));
				}

				storeGrnT.setFreeItem(freeItem.get(i).toString());
				storeGrnT.setDispType(dispType.get(i).toString());
				try {
					storeGrnT.setMdqValue(new Integer(mdqValue.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setMdqValue(new Integer(0));
				}

				try {
					storeGrnT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setRatePerMdq(new BigDecimal(0));
				}

				try {
					storeGrnT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
							.toString()));
				} catch (Exception e) {
					storeGrnT.setUnitRate(new BigDecimal(0));
				}

				try {
					storeGrnT
							.setManufacturerDate(java.sql.Date
									.valueOf(formatterOut.format(formatterIn
											.parse(manufacturerDate.get(i)
													.toString()))));
				} catch (Exception e) {
					storeGrnT.setManufacturerDate(null);
				}

				// SimpleDateFormat formatterIn = new
				// SimpleDateFormat("dd/MM/yyyy");
				// SimpleDateFormat formatterOut = new
				// SimpleDateFormat("yyyy-MM-dd");

				try {
					storeGrnT.setExpiryDate(java.sql.Date.valueOf(formatterOut
							.format(formatterIn.parse(expiryDate.get(i)
									.toString()))));
				} catch (Exception e) {
					storeGrnT.setExpiryDate(null);
				}
				List<StorePoDetail> storePoDetailList1 = new ArrayList<StorePoDetail>();
				try {
					if (sos.equalsIgnoreCase("l")) {
						storePoDetailList1 = session
								.createCriteria(StorePoDetail.class)
								.add(Restrictions.eq("Po.Id", po_id))
								.add(Restrictions.eq("Item.Id", storeGrnT
										.getItem().getId())).list();
						if (storePoDetailList1 != null
								&& storePoDetailList1.size() > 0) {
							storeGrnT.setGrnQty(storePoDetailList1.get(0)
									.getQuantityOrdered());
						} else {
							storeGrnT.setGrnQty(new BigDecimal(0));
						}

					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				storeGrnTList.add(storeGrnT);
				objectList.add(new Integer(itemId.get(i).toString()));
			}

			// Save the Persistence Objects

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			/*
			 * Criteria c =
			 * session.createCriteria(StoreFyDocumentNo.class).add(Restrictions
			 * .eq("Department.Id", deptId)); storeFyDocumentNoList = c.list();
			 * String grnStartNo = ""; for (StoreFyDocumentNo storeFyDocumentNo
			 * :storeFyDocumentNoList ) { if(storeFyDocumentNo.getGrnStartNo()!=
			 * null) { grnStartNo=(""+storeFyDocumentNo.getGrnStartNo());
			 * grnStartNo=getMaxNo(grnStartNo); } else {
			 * grnStartNo=getMaxNo(""); } } storeGrnM.setGrnStartNo(grnStartNo);
			 * 
			 * 
			 * int storeFyId = 0;
			 * 
			 * for(StoreFyDocumentNo documentNo :storeFyDocumentNoList) {
			 * storeFyId=documentNo.getId(); } StoreFyDocumentNo
			 * storeFyDocumentNo
			 * =(StoreFyDocumentNo)getHibernateTemplate().load(StoreFyDocumentNo
			 * .class,storeFyId); storeFyDocumentNo.setGrnNo(grnNo);
			 * storeFyDocumentNo.setGrnStartNo(grnStartNo);
			 */// hbt.update(storeFyDocumentNo);
				// hbt.refresh(storeFyDocumentNo);
			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 */

			if (box.getString("validate").equals("t")) {
				if (sos.equalsIgnoreCase("l") || sos.equalsIgnoreCase("w")
						|| sos.equalsIgnoreCase("x")) {
					MasStoreBudget masStoreBudget = new MasStoreBudget();
					java.util.Date poDate = storeGrnM.getGrnDate();
					BigDecimal poAmount = storeGrnM.getGrnValue();

					List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
					masStoreFinancialList = session.createCriteria(
							MasStoreFinancial.class).list();
					java.util.Date start_date = null;
					java.util.Date end_date = null;
					int financial_id = 0;
					for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
							.hasNext();) {
						MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
								.next();
						start_date = (java.util.Date) masStoreFinancial
								.getStartDate();
						end_date = (java.util.Date) masStoreFinancial
								.getEndDate();
						if (poDate.after(start_date) && poDate.before(end_date)) {
							financial_id = masStoreFinancial.getId();
							break;
						} else if (poDate.equals(start_date)
								|| poDate.equals(end_date)) {
							financial_id = masStoreFinancial.getId();
							break;
						}
					}

					List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
					masStoreBudgetList = session
							.createCriteria(MasStoreBudget.class)
							.add(Restrictions.eq("Financial.Id", financial_id))
							.add(Restrictions.eq("Department.Id", deptId))
							.list();
					BigDecimal existing_committed_amount = null;
					BigDecimal existing_balance_amount = null;
					BigDecimal existing_spent_amount = null;
					BigDecimal existing_alotted_amount = null;
					if (masStoreBudgetList != null
							&& masStoreBudgetList.size() > 0) {
						masStoreBudget = masStoreBudgetList.get(0);
						try {
							existing_committed_amount = masStoreBudget
									.getCrvComittedAmount();
						} catch (Exception e) {
							existing_committed_amount = new BigDecimal(0);
						}

						try {
							existing_balance_amount = masStoreBudget
									.getBalanceAmount();
						} catch (Exception e) {
							existing_balance_amount = new BigDecimal(0);
						}

						try {
							existing_spent_amount = masStoreBudget
									.getSpendAmount();
						} catch (Exception e) {
							existing_spent_amount = new BigDecimal(0);
						}

						try {
							existing_alotted_amount = masStoreBudget
									.getTotalAllocatedAmount();
						} catch (Exception e) {
							existing_alotted_amount = new BigDecimal(0);
						}

						masStoreBudget
								.setCrvComittedAmount(existing_committed_amount
										.add(poAmount));
						masStoreBudget.setBalanceAmount(existing_balance_amount
								.subtract(poAmount));
						masStoreBudget.setSpendAmount(existing_spent_amount
								.add(poAmount));

						storeGrnM
								.setCrvComittedAmount(existing_committed_amount);
						storeGrnM.setAllottedAmount(existing_alotted_amount);

						hbt.update(masStoreBudget);
					}
				}
			}
			// hbt.save(storeGrnM);
			hbt.update(storeGrnM);
			hbt.refresh(storeGrnM);
			/*
			 * End of MasStoreBudget Update
			 */

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeGrnTList.size() > 0) {
				for (int i = 0; i < storeGrnTList.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTList.get(i);
					storeGrnTObj.setGrnMaster(storeGrnM);
					HibernateTemplate hbtTX = getHibernateTemplate();
					hbtTX.setFlushModeName("FLUSH_EAGER");
					hbtTX.setCheckWriteOperations(false);
					try {
						hbtTX.save(storeGrnTObj);
						// hbtTX.refresh(storeGrnTObj);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// Updating Quantity Received in StorePoDetail for the
					// particular Item
					// Only for New Items (not for Loan in Items)
					if (box.getString("validate").equals("t")) {
						if (sos.equalsIgnoreCase("l")
								&& !loaninId.get(i).toString()
										.equalsIgnoreCase("0")) {
							List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
							StorePoDetail storePoDetail = new StorePoDetail();
							storePoDetailList = session
									.createCriteria(StorePoDetail.class)
									.add(Restrictions.eq("Po.Id", po_id))
									.add(Restrictions.eq("Item.Id",
											storeGrnTObj.getItem().getId()))
									.list();

							if (storePoDetailList != null
									&& storePoDetailList.size() > 0) {
								storePoDetail = storePoDetailList.get(0);
								BigDecimal existingQuantity = null;
								BigDecimal quantity_to_be_added = null;
								BigDecimal newQuantity = new BigDecimal(0);
								// Integer mdq = storePoDetail.getMdqValue();

								existingQuantity = storePoDetail
										.getQuantityReceived();
								BigDecimal recd_qty = storeGrnTObj
										.getReceivedQty();
								// quantity_to_be_added = recd_qty.divide(new
								// BigDecimal(mdq), new
								// MathContext(4,RoundingMode.UP));
								quantity_to_be_added = recd_qty;

								if (existingQuantity == null) {
									existingQuantity = new BigDecimal(0);
								}

								newQuantity = existingQuantity
										.add(quantity_to_be_added);
								storePoDetail.setQuantityReceived(newQuantity);
								hbt.update(storePoDetail);
								hbt.refresh(storePoDetail);
							}
						}
					}
					// Update Stock in Item Batch Stock
					// Only for New Items (not for Loan in Items)

					int item_id = storeGrnTObj.getItem().getId();
					// int brand_id = storeGrnTObj.getBrand().getId();
					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String barcodeNo1 = storeGrnTObj.getBarcodeNo();
					BigDecimal dispensing_price = storeGrnTObj
							.getDispencingPrice();
					BigDecimal mrp2 = storeGrnTObj.getMrp();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();
					BigDecimal freeQty1 = new BigDecimal(0);
					if (storeGrnTObj.getFreeQty() == null) {
						freeQty1 = new BigDecimal(0);

					} else {
						freeQty1 = new BigDecimal(storeGrnTObj.getFreeQty()
								.toString());
					}
					if (box.getString("validate").equals("t")) {

						storeItemBatchStockList = hbt
								.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
										+ item_id
										+ " and inp.Department.Id= "
										+ department_id
										+ "and inp.BatchNo ='"
										+ batch_no
										+ "' and Hospital.Id = '"
										+ hospitalId + "' ");

						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {
							if (!loaninId.get(i).toString()
									.equalsIgnoreCase("0")) {
								storeItemBatchStock = storeItemBatchStockList
										.get(0);
								BigDecimal existing_qty = new BigDecimal(0);

								if (storeItemBatchStock.getReceivedQty() != null) {
									existing_qty = storeItemBatchStock
											.getReceivedQty();
								} else {
									existing_qty = new BigDecimal(0);
								}

								BigDecimal recd_qty = new BigDecimal(
										convertedStock.get(i).toString());
								recd_qty = recd_qty.add(freeQty1);
								BigDecimal new_qty = new BigDecimal(0);
								new_qty = existing_qty.add(recd_qty);
								BigDecimal cost_price1 = new BigDecimal(0);
								try {
									cost_price1 = storeItemBatchStock
											.getCostPrice();
								} catch (Exception e) {
									cost_price1 = new BigDecimal(0);
								}

								BigDecimal existing_closing_stock = storeItemBatchStock
										.getClosingStock();
								BigDecimal new_closing_stock = new BigDecimal(0);
								new_closing_stock = existing_closing_stock
										.add(recd_qty);
								// code for updating cost price according to
								// weigted average
								BigDecimal totalCost = (existing_closing_stock
										.multiply(cost_price1)).add(recd_qty
										.multiply(cost_price));
								BigDecimal averageCost = new BigDecimal(0);
								try {

									averageCost = totalCost.divide(new_qty, 3);
								} catch (Exception e) {
									e.printStackTrace();
								}
								int id = storeItemBatchStock.getId();
								storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
										.load(StoreItemBatchStock.class, id);
								storeItemBatchStock.setCostPrice(averageCost);
								storeItemBatchStock.setReceivedQty(new_qty);
								storeItemBatchStock
										.setClosingStock(new_closing_stock);
								storeItemBatchStock.setMrp(mrp2);
								storeItemBatchStock.setBarcodeNo(barcodeNo1);
								storeItemBatchStock
										.setDispencingPrice(dispensing_price);
								storeItemBatchStock.setExpiryDate(storeGrnTObj
										.getExpiryDate());
								HibernateTemplate hbt1 = getHibernateTemplate();
								hbt1.setFlushModeName("FLUSH_EAGER");
								hbt1.setCheckWriteOperations(false);
								hbt1.update(storeItemBatchStock);

								// updating mas_store_item for cost price
								MasStoreItem masStoreItem = new MasStoreItem();
								masStoreItem = (MasStoreItem) session
										.createCriteria(MasStoreItem.class)
										.add(Restrictions.eq("Id", item_id))
										.list().get(0);
								masStoreItem.setCostPrice(cost_price1);

								hbt.update(masStoreItem);

							} else {
								// Update Loanin qty to 0
								storeItemBatchStock = storeItemBatchStockList
										.get(0);
								storeItemBatchStock
										.setLoanInQty(new BigDecimal(0));
								storeItemBatchStock.setMrp(mrp2);
								storeItemBatchStock.setBarcodeNo(barcodeNo1);
								storeItemBatchStock
										.setDispencingPrice(dispensing_price);
								HibernateTemplate hbt1 = getHibernateTemplate();
								hbt1.setFlushModeName("FLUSH_EAGER");
								// updating mas_store_item for cost price
								MasStoreItem masStoreItem = new MasStoreItem();
								masStoreItem = (MasStoreItem) session
										.createCriteria(MasStoreItem.class)
										.add(Restrictions.eq("Id", storeGrnTObj
												.getItem().getId())).list()
										.get(0);
								try {
									masStoreItem
											.setCostPrice(storeItemBatchStock
													.getCostPrice());
								} catch (Exception e) {
									masStoreItem
											.setCostPrice(new BigDecimal(0));
								}
								hbt.update(masStoreItem);
								hbt1.setCheckWriteOperations(false);
								hbt1.update(storeItemBatchStock);
							}
						} else {

							if (!loaninId.get(i).toString()
									.equalsIgnoreCase("0")) {

								try {
									StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
									itemBatchStock
											.setDepartment(new MasDepartment(
													storeGrnM.getDepartment()
															.getId()));
									itemBatchStock.setItem(new MasStoreItem(
											storeGrnTObj.getItem().getId()));
									itemBatchStock.setBatchNo(storeGrnTObj
											.getBatchNo());

									if (storeGrnTObj.getLotNo() != null) {
										itemBatchStock.setLotNo(storeGrnTObj
												.getLotNo());
									} else {
										itemBatchStock.setLotNo(/*
																 * storeGrnTObj.
																 * getBrand (
																 * ).getBrandName
																 * ()+","+
																 */storeGrnTObj
												.getItem().getId()
												+ ","
												+ storeGrnTObj.getBatchNo());
									}

									BigDecimal recd_qty = new BigDecimal(
											convertedStock.get(i).toString());
									recd_qty = recd_qty.add(freeQty1);
									itemBatchStock.setReceivedQty(recd_qty);

									itemBatchStock.setFreeItem(storeGrnTObj
											.getFreeItem());
									// storeItemBatchStock.setBrand(new
									// MasStoreBrand(storeGrnTObj.getBrand().getId()));
									itemBatchStock.setCostPrice(storeGrnTObj
											.getFinalCostPrice());
									// updating mas_store_item for cost price
									MasStoreItem masStoreItem = new MasStoreItem();
									masStoreItem = (MasStoreItem) session
											.createCriteria(MasStoreItem.class)
											.add(Restrictions.eq("Id",
													storeGrnTObj.getItem()
															.getId())).list()
											.get(0);
									masStoreItem.setCostPrice(storeGrnTObj
											.getFinalCostPrice());

									hbt.update(masStoreItem);
									itemBatchStock.setBarcodeNo(barcodeNo1);
									itemBatchStock.setClosingStock(recd_qty);
									itemBatchStock.setExpiryDate(storeGrnTObj
											.getExpiryDate());
									itemBatchStock.setMrp(mrp2);
									itemBatchStock
											.setDispencingPrice(dispensing_price);
									MasHospital masHospital = new MasHospital();
									masHospital.setId(hospitalId);
									itemBatchStock.setHospital(masHospital);
									/*
									 * storeItemBatchStock.setOpeningBalanceDate(
									 * HMSUtil
									 * .convertStringTypeDateToDateType(date));
									 * storeItemBatchStock
									 * .setOpeningBalanceQty(recd_qty);
									 */

									HibernateTemplate hbt1 = getHibernateTemplate();
									hbt1.setFlushModeName("FLUSH_EAGER");
									hbt1.setCheckWriteOperations(false);
									hbt1.save(itemBatchStock);
								} catch (Exception e) {
									e.printStackTrace();
								}
							} // if loaninId =0
						} // if
					} // End validate if
				} // end of for loop
			} // if itembatchstocksize > 0
				// } //end of if GrnTlist > 0

			HibernateTemplate hbt3 = getHibernateTemplate();
			hbt3.setFlushModeName("FLUSH_EAGER");
			hbt3.setCheckWriteOperations(false);
			if (box.getString("validate").equals("t")) {
				if ((sos.equalsIgnoreCase("a"))) {
					StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
							.load(StoreIndentM.class, indentOrPoId);
					storeIndentM.setStatus("p");
					hbt3.update(storeIndentM);
				} else if (sos.equalsIgnoreCase("l")) {
					List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
					List<StoreGrnT> storeGrnTranList = new ArrayList<StoreGrnT>();
					List<StorePoDetail> storePoDetailTotList = new ArrayList<StorePoDetail>();
					boolean status = true;

					storePoDetailList = session
							.createCriteria(StorePoDetail.class)
							.createAlias("Po", "P")
							.add(Restrictions.eq("P.Id", po_id))
							.add(Restrictions.isNull("Cancelled")).list();

					/*
					 * for(StorePoDetail storePoDetail:storePoDetailList){
					 * if(storePoDetail.getQuantityReceived() != null){
					 * if(storePoDetail.getQuantityOrdered().intValue() ==
					 * storePoDetail.getQuantityReceived().intValue()){ status =
					 * true; }else{ status = false; break; } }else{ status =
					 * false; break; } }
					 */
					StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
							.load(StorePoHeader.class, po_id);
					// if(status){
					// storePoHeader.setStatus("p");
					// }
					int grnMasterId = 0;
					// storePoHeader.setStoreGrnM(storeGrnM);
					hbt3.update(storePoHeader);

				}
			}
			tx.commit();
			conFlag = true;
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
			conFlag = false;
		}
		map.put("maxIndentNo", no);
		map.put("conFlag", conFlag);
		List<StoreGrnM> gridGrnHeaderList = new ArrayList<StoreGrnM>();
		gridGrnHeaderList = session.createCriteria(StoreGrnM.class)
				.add(Restrictions.eq("Id", grn_id)).list();
		map.put("gridGrnHeaderList", gridGrnHeaderList);
		map.put("grn_id", grn_id);
		return map;
	}

	@SuppressWarnings("unchecked")
	public List<StoreGrnM> getGrnList() {
		Session session = (Session) getSession();
		List<StoreGrnM> grnList = session.createCriteria(StoreGrnM.class)
				.add(Restrictions.eq("Status", "y")).list();
		return grnList;
	}

	@SuppressWarnings("unchecked")
	public boolean updateGrn(StoreGrnM storeGrnM, List storeGrnTlist) {
		boolean successfullyAdded = false;
		Session session = (Session) getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {
			hbt.update(storeGrnM);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeGrnTlist.size() > 0) {

				/**
				 * laundry_group_id==53 means Laundry laundry_group_id=53
				 */

				int laundry_group_id = 0;
				laundry_group_id = Integer.parseInt(properties
						.getProperty("laundry_group_id"));
				String laundry_batch_no = "";
				laundry_batch_no = properties.getProperty("laundry_batch_no");

				for (int i = 0; i < storeGrnTlist.size(); i++) {
					StoreGrnT storeGrnT = new StoreGrnT();
					storeGrnT = (StoreGrnT) storeGrnTlist.get(i);

					/**
					 * if item group is laundry then default bacth is A for all
					 * item Code By Mukesh Narayan Singh Date 07 July 2011
					 */
					List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
					int item_Id = 0;
					item_Id = storeGrnT.getItem().getId();
					masStoreItemList = session
							.createCriteria(MasStoreItem.class)
							.add(Restrictions.idEq(item_Id)).list();
					int itemGroup = 0;
					if (masStoreItemList.size() > 0) {
						MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
								.get(0);
						if (masStoreItem.getDepartment() != null) {
							itemGroup = masStoreItem.getGroup().getId();
						}
					}
					if (laundry_group_id == itemGroup) {
						storeGrnT.setBatchNo(laundry_batch_no);
					}

					hbt.update(storeGrnT);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getDetailsForMoreInfoGrn() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		manufacturerList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasManufacturer as mm where mm.Status = 'y'");
		map.put("manufacturerList", manufacturerList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public List<StoreGrnT> getStoreGrnTListForMoreInfo(int storeGrnTId) {
		Session session = (Session) getSession();
		List<StoreGrnT> storeGrnTMoreInfoList = session
				.createCriteria(StoreGrnT.class)
				.add(Restrictions.eq("Id", storeGrnTId)).list();
		return storeGrnTMoreInfoList;
	}

	@SuppressWarnings("unchecked")
	public List<StoreGrnM> getGrn(int grnId) {
		Session session = (Session) getSession();
		List<StoreGrnM> grnMList = session.createCriteria(StoreGrnM.class)
				.add(Restrictions.eq("Id", grnId)).list();
		return grnMList;
	}

	// ////////////////////////////////LOAN IN //////////////////////////////
	@SuppressWarnings("unchecked")
	public Map<String, Object> showLoanInJsp(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		// String userName = "";
		int deptId = 0;
		// int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		/*
		 * if (dataMap.get("hospitalId") != null) { hospitalId =
		 * Integer.parseInt("" + dataMap.get("hospitalId")); } if
		 * (dataMap.get("userName") != null) { userName = ("" +
		 * dataMap.get("userName")); }
		 */

		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<StoreLoaninM> searchLoanInList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		// String max = "";
		// String startNo = "";
		String no = "";

		// Session session = (Session) getSession();
		try {
			poList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StorePoHeader as mi where mi.Status='o'");
			searchLoanInList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreLoaninM as sl where sl.Department.Id='"
							+ deptId + "'");
			loaninList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreLoaninM as sl");
			manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer as am");
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as ms order by ms.SupplierName");
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'y'");

			storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "'");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getLoaninNo() != null) {
					no = ("" + storeFyDocumentNo.getLoaninNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("poList", poList);
		map.put("searchLoanInList", searchLoanInList);
		map.put("loaninList", loaninList);
		map.put("manufacturerList", manufacturerList);
		map.put("brandList", brandList);
		map.put("supplierList", supplierList);
		map.put("employeeList", employeeList);
		map.put("max", no);
		return map;

	}

	@SuppressWarnings("unchecked")
	public boolean addLoanIn(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreLoaninM storeLoaninM = (StoreLoaninM) infoMap.get("storeLoaninM");
		List<StoreLoaninT> storeLoaninTlist = (ArrayList<StoreLoaninT>) infoMap
				.get("storeLoaninTlist");
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		StoreItemBatchStock storeItemBatchStock1 = new StoreItemBatchStock();
		StoreLoaninM storeLoaninM2 = new StoreLoaninM();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int poHeaderId = 0;
		String max = "";
		String no = "";

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("poId") != null) {
			poHeaderId = Integer.parseInt("" + dataMap.get("poId"));
		}

		int storeFyId = 0;

		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {

				hbt.save(storeLoaninM);
				int poId = storeLoaninM.getId();
				String loanInNo = "";
				loanInNo = (String) infoMap.get("loanInNo");
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setLoaninNo(loanInNo);
				hbt.update(storeFyDocumentNo);

			}

			// Updating Status in StorePoHeader as "p", so that after loanin
			// Entry has made successfully, StorePoHeader & StorePoDetail
			// cannot be changed
			StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
					.load(StorePoHeader.class, poHeaderId);
			// storePoHeader.setStatus("p");
			hbt.update(storePoHeader);

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeLoaninTlist.size() > 0) {

				if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("loanInId"));
					storeLoaninM2.setId(id);
				}

				for (int i = 0; i < storeLoaninTlist.size(); i++) {
					StoreLoaninT StoreLoaninTObj = new StoreLoaninT();
					StoreLoaninTObj = (StoreLoaninT) storeLoaninTlist.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {

						StoreLoaninTObj.setLoaninMaster(storeLoaninM2);
					} else {
						StoreLoaninTObj.setLoaninMaster(storeLoaninM);
					}
					hbt.save(StoreLoaninTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item
					List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
					StorePoDetail storePoDetail = new StorePoDetail();
					storePoDetailList = session
							.createCriteria(StorePoDetail.class)
							.add(Restrictions.eq("Po.Id", poHeaderId))
							.add(Restrictions.eq("Item.Id", StoreLoaninTObj
									.getItem().getId())).list();
					if (storePoDetailList != null
							&& storePoDetailList.size() > 0) {
						storePoDetail = storePoDetailList.get(0);
						BigDecimal existingQuantity = null;
						BigDecimal quantity_to_be_added = null;
						BigDecimal newQuantity = new BigDecimal(0);
						BigDecimal mdq = storePoDetail.getMdqValue();

						BigDecimal recd_qty = StoreLoaninTObj.getReceivedQty();
						existingQuantity = storePoDetail.getQuantityReceived();
						quantity_to_be_added = recd_qty.divide(mdq,
								new MathContext(4, RoundingMode.UP));

						if (existingQuantity == null) {
							existingQuantity = new BigDecimal(0);
						}

						newQuantity = existingQuantity
								.add(quantity_to_be_added);
						storePoDetail.setQuantityReceived(newQuantity);
						hbt.update(storePoDetail);
					}

					int item_id = StoreLoaninTObj.getItem().getId();
					int brand_id = StoreLoaninTObj.getBrand().getId();
					BigDecimal cost_price = StoreLoaninTObj.getFinalCostPrice();
					String batch_no = StoreLoaninTObj.getBatchNo();
					int department_id = storeLoaninM.getDepartment().getId();
					/*
					 * List<StoreItemBatchStock> temp = new
					 * ArrayList<StoreItemBatchStock>(); temp = hbt
					 * .find("from jkt.hms.masters.business.StoreItemBatchStock"
					 * ); if (temp != null & temp.size() > 0) { for (Iterator
					 * iterator = temp.iterator(); iterator .hasNext();) {
					 * StoreItemBatchStock t = (StoreItemBatchStock) iterator
					 * .next();
					 * 
					 * } }
					 */

					storeItemBatchStockList = hbt
							.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
									+ item_id
									+ " and inp.CostPrice = "
									+ cost_price
									+ " and inp.Department.Id= "
									+ department_id
									+ " and inp.BatchNo = '"
									+ batch_no
									+ "' and inp.Brand.Id = "
									+ brand_id);

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						int free_qty = 0;
						free_qty = StoreLoaninTObj.getFreeQty();
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);

						BigDecimal existing_qty = storeItemBatchStock
								.getLoanInQty();
						BigDecimal recd_qty = StoreLoaninTObj.getReceivedQty();
						BigDecimal new_qty = existing_qty.add(recd_qty);

						BigDecimal existing_closing_stock = storeItemBatchStock
								.getClosingStock();
						BigDecimal new_closing_stock = existing_closing_stock
								.add(recd_qty);
						storeItemBatchStock.setLoanInQty(new_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setClosingStock(new_closing_stock
								.add(new BigDecimal(free_qty)));
						hbt.update(storeItemBatchStock);
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeLoaninM
								.getDepartment());
						storeItemBatchStock.setItem(StoreLoaninTObj.getItem());
						storeItemBatchStock.setBatchNo(StoreLoaninTObj
								.getBatchNo());
						if (StoreLoaninTObj.getLotNo() != null) {
							storeItemBatchStock.setLotNo(StoreLoaninTObj
									.getLotNo());
						} else {
							storeItemBatchStock.setLotNo(StoreLoaninTObj
									.getItem()
									+ ","
									+ StoreLoaninTObj.getBatchNo()
									+ ","
									+ StoreLoaninTObj.getBrand());
						}
						int free_qty = 0;
						free_qty = StoreLoaninTObj.getFreeQty();

						BigDecimal recd_qty = StoreLoaninTObj.getReceivedQty();

						storeItemBatchStock.setLoanInQty(recd_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setFreeItem(StoreLoaninTObj
								.getFreeItem());
						storeItemBatchStock
								.setBrand(StoreLoaninTObj.getBrand());
						storeItemBatchStock.setCostPrice(StoreLoaninTObj
								.getFinalCostPrice());
						storeItemBatchStock.setClosingStock(recd_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setExpiryDate(StoreLoaninTObj
								.getExpiryDate());
						storeItemBatchStock.setFreeItem(StoreLoaninTObj
								.getFreeItem());

						// HibernateTemplate hbt1 = getHibernateTemplate();
						// hbt1.setFlushModeName("FLUSH_AUTO");
						// hbt1.setCheckWriteOperations(false);
						hbt.save(storeItemBatchStock);
						hbt.refresh(storeItemBatchStock);
					}
				}
			}

			successfullyAdded = true;
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message

			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map getViewAllMap() {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<StoreLoaninT> storeLoaninTList = new ArrayList<StoreLoaninT>();
		List<StoreLoaninM> storeLoaninMList = new ArrayList<StoreLoaninM>();
		Session session = (Session) getSession();
		try {
			storeLoaninTList = session.createCriteria(StoreLoaninT.class)
					.list();
			supplierList = session.createCriteria(MasStoreSupplier.class)
					.add(Restrictions.eq("Status", "y")).list();
			storeLoaninMList = session.createCriteria(StoreLoaninM.class)
					.add(Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeLoaninMList", storeLoaninMList);
		map.put("storeLoaninTList", storeLoaninTList);
		map.put("supplierList", supplierList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map searchLoanin(Map searchFieldMap) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreLoaninM> gridLoaninHeaderList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninT> gridLoaninDetailList = new ArrayList<StoreLoaninT>();
		String loanInNo = "";
		try {
			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridLoaninDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreLoaninT ");
				gridLoaninHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreLoaninM as poh where "
								+ " poh.GrnDate between '" + startDate
								+ "' and '" + endDate + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (!searchFieldMap.get("loanInNo").equals("0")) {
				loanInNo = (String) searchFieldMap.get("loanInNo");
				gridLoaninDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreLoaninT ");
				gridLoaninHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreLoaninM as pod where pod.LoaninNo = '"
								+ loanInNo + "'");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridLoaninDetailList", gridLoaninDetailList);
		map.put("gridLoaninHeaderList", gridLoaninHeaderList);

		return map;
	}

	/*
	 * public Map getLoanInModifyMap(int radio_str) {
	 * 
	 * Map map=new HashMap(); List<StoreLoaninM> gridLoaninMList= new
	 * ArrayList<StoreLoaninM>(); List<StoreLoaninT> gridLoaninTList= new
	 * ArrayList<StoreLoaninT>(); List<MasStoreSupplier> gridSupplierList= new
	 * ArrayList<MasStoreSupplier>(); List<MasUnitOfMeasurement> gridUomList=
	 * new ArrayList<MasUnitOfMeasurement>(); List<MasEmployee
	 * >gridEmployeeList= new ArrayList<MasEmployee>(); List<StorePoHeader
	 * >gridPoList= new ArrayList<StorePoHeader>(); List<MasStoreItem> itemList=
	 * new ArrayList<MasStoreItem>();
	 * 
	 * int id=0; gridLoaninMList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreLoaninM as md where md.Id =
	 * '"+radio_str+"'"); for (StoreLoaninM storeLoaninM :gridLoaninMList ) {
	 * id=storeLoaninM.getId(); }
	 * 
	 * gridLoaninTList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreLoaninT "); gridSupplierList =
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasStoreSupplier "); gridUomList=
	 * getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasUnitOfMeasurement ");
	 * gridEmployeeList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.MasEmployee ");
	 * gridPoList=getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StorePoHeader "); itemList=
	 * getHibernateTemplate().find("from jkt.hms.masters.business.MasStoreItem
	 * as msi where msi.Status = 'y' and msi.Id < 100");
	 * map.put("gridLoaninMList",gridLoaninMList);
	 * map.put("gridLoaninTList",gridLoaninTList);
	 * map.put("gridUomList",gridUomList);
	 * map.put("gridSupplierList",gridSupplierList); map.put("gridEmployeeList",
	 * gridEmployeeList); map.put("gridPoList", gridPoList); map.put("itemList",
	 * itemList); map.put("grnId", id );
	 * 
	 * return map; }
	 * 
	 * public Map<String,Object> modifyLoanin(int loanInId,int pageNo) {
	 * Map<String,Object> map=new HashMap<String,Object>(); List<StoreLoaninT>
	 * storeLoanInTList = new ArrayList<StoreLoaninT>(); List<StoreLoaninM>
	 * storeLoanInMList = new ArrayList<StoreLoaninM>(); List<MasStoreSupplier>
	 * supplierList= new ArrayList<MasStoreSupplier>(); List<MasStoreItem>
	 * itemList= new ArrayList<MasStoreItem>(); List<MasEmployee> employeeList=
	 * new ArrayList<MasEmployee>(); int firstResult = 0; int maxResults = 10;
	 * 
	 * if(pageNo != 0){ firstResult = firstResult + ( pageNo ) * 10; } Session
	 * session = (Session)getSession(); Criteria c =
	 * session.createCriteria(StoreLoaninT
	 * .class).add(Restrictions.eq("LoaninMaster.Id", loanInId));
	 * c.setFirstResult(0); c.setMaxResults(10); storeLoanInTList = c.list();
	 * 
	 * storeLoanInMList =
	 * session.createCriteria(StoreLoaninM.class).add(Restrictions.eq("Id",
	 * loanInId)).list(); log.debug("storeLoanInMList
	 * "+storeLoanInTList.size()); supplierList =
	 * session.createCriteria(MasStoreSupplier
	 * .class).add(Restrictions.eq("Status", "y")).list(); employeeList=
	 * session.createCriteria(MasEmployee.class).add(Restrictions.eq("Status",
	 * "y")).list(); itemList=
	 * session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status",
	 * "y")).list(); map.put("itemList", itemList); map.put("employeeList",
	 * employeeList); map.put("supplierList", supplierList);
	 * map.put("storeLoanInTList", storeLoanInTList);
	 * map.put("storeLoanInMList", storeLoanInMList); return map; }
	 */
	@SuppressWarnings("unchecked")
	public Map<String, Object> modifyLoanin(int loanInId, int pageNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninT> storeLoanInTList = new ArrayList<StoreLoaninT>();
		List<StoreLoaninM> storeLoanInMList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninM> searchLoanInList = new ArrayList<StoreLoaninM>();

		int firstResult = 0;
		int maxResults = 10;
		int deptId = 0;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreLoaninT.class).add(
				Restrictions.eq("LoaninMaster.Id", loanInId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		storeLoanInTList = c.list();

		storeLoanInMList = session.createCriteria(StoreLoaninM.class)
				.add(Restrictions.eq("Id", loanInId)).list();

		if (storeLoanInMList != null && storeLoanInMList.size() > 0) {
			deptId = storeLoanInMList.get(0).getDepartment().getId();
		}

		searchLoanInList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreLoaninM as sl where sl.Department.Id='"
						+ deptId + "'");

		map.put("storeLoanInTList", storeLoanInTList);
		map.put("storeLoanInMList", storeLoanInMList);
		map.put("searchLoanInList", searchLoanInList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public List<StoreLoaninT> getLoanInListForMoreInfo(int loaninDetailId) {
		/*
		 * Session session = (Session) getSession(); List<StoreLoaninT>
		 * loanInMoreInfoList = session .createCriteria(StoreLoaninT.class)
		 * .add(Restrictions.eq("Id", loaninDetailId)).list();
		 */
		List<StoreLoaninT> loanInMoreInfoList = new ArrayList<StoreLoaninT>();
		loanInMoreInfoList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreLoaninT as slt where slt.Id='"
						+ loaninDetailId + "'");
		return loanInMoreInfoList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getDetailsForLoanIn() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		Session session = (Session) getSession();

		manufacturerList = session.createCriteria(MasManufacturer.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		map.put("manufacturerList", manufacturerList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public boolean updateLoanIn(Map<String, Object> infoMap) {
		boolean successfullyAdded = false;
		StoreLoaninM storeLoaninM = null;
		int pageNo = 0;
		int loanInId = 0;
		List<StoreLoaninT> storeLoaninTlist = new ArrayList<StoreLoaninT>();

		if (infoMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
		}
		if (infoMap.get("loanInId") != null) {
			loanInId = Integer.parseInt("" + infoMap.get("loanInId"));
		}

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			if (pageNo == 1) {
				storeLoaninM = (StoreLoaninM) infoMap.get("storeLoaninM");
				hbt.update(storeLoaninM);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			if (infoMap.get("storeLoaninTlist") != null) {
				storeLoaninTlist = (List<StoreLoaninT>) infoMap
						.get("storeLoaninTlist");
				if (storeLoaninTlist.size() > 0) {
					for (int i = 0; i < storeLoaninTlist.size(); i++) {
						StoreLoaninT storeLoaninT = new StoreLoaninT();
						storeLoaninT = (StoreLoaninT) storeLoaninTlist.get(i);
						hbt.update(storeLoaninT);
					}
				}
				successfullyAdded = true;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	// -------------- BOO ENTRY-------------------------------
	@SuppressWarnings("unchecked")
	public Map<String, Object> showBooJsp(Map<String, Object> infoMap) {

		/*
		 * String userName = ""; int hospitalId = 0;
		 */int deptId = 0;

		if (infoMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + infoMap.get("deptId"));
		}
		/*
		 * if (infoMap.get("hospitalId") != null) { hospitalId =
		 * Integer.parseInt("" + infoMap.get("hospitalId")); } if
		 * (infoMap.get("userName") != null) { userName = ("" +
		 * infoMap.get("userName")); }
		 */
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> presidingOfficerList = new ArrayList<MasEmployee>();
		List<MasEmployee> officerIcList = new ArrayList<MasEmployee>();
		List<MasRank> rankList = new ArrayList<MasRank>();
		List<MasRank> presidingOfficerRankList = new ArrayList<MasRank>();
		List<MasRank> officerIcRankList = new ArrayList<MasRank>();
		List<StoreBoo> searchBooList = new ArrayList<StoreBoo>();
		// List<StoreBoo>booList=new ArrayList<StoreBoo>();
		// List<StoreGrnM>crvList= new ArrayList<StoreGrnM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreFyDocumentNo> storeFyDocumentNo1List = new ArrayList<StoreFyDocumentNo>();
		// String max = "";
		// String startNo = "";
		String no = "";
		String crvno = "";
		String maxNo = "";
		// Session session = (Session) getSession();

		employeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee as me");
		presidingOfficerList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee as me1");
		officerIcList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee as me2");
		rankList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasRank as mr");
		presidingOfficerRankList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasRank as mr1");
		officerIcRankList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasRank as mr2");
		searchBooList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBoo as sb");
		// /booList=getHibernateTemplate().find("from
		// jkt.hms.masters.business.StoreBoo as sb1");
		// crvList=getHibernateTemplate().find("from
		// jkt.hms.masters.business.StoreGrnM as sb1");
		storeFyDocumentNoList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
						+ deptId + "'");
		storeFyDocumentNo1List = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
						+ deptId + "'");

		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNo1List) {
			if (storeFyDocumentNo.getGrnNo() != null) {
				crvno = ("" + storeFyDocumentNo.getGrnNo());
				crvno = getMaxNo(crvno);
			} else {
				crvno = getMaxNo("");
			}

		}
		// if(storeFyDocumentNo.getDepartment().getId()==24)
		// {
		// crvno=(""+storeFyDocumentNo.getGrnNo());
		// }
		// }
		// try{

		// maxNo=getMaxNo(crvno);
		// }catch (Exception e) {
		// }

		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
			if (storeFyDocumentNo.getBooNo() != null) {
				no = ("" + storeFyDocumentNo.getBooNo());
				no = getMaxNo(no);
			} else {
				no = getMaxNo("");
			}
		}

		map.put("max", no);
		map.put("crvno", crvno);
		map.put("maxNo", maxNo);
		map.put("searchBooList", searchBooList);
		map.put("employeeList", employeeList);
		map.put("rankList", rankList);
		// map.put("booList", booList);
		map.put("presidingOfficerList", presidingOfficerList);
		map.put("officerIcList", officerIcList);
		map.put("presidingOfficerRankList", presidingOfficerRankList);
		map.put("officerIcRankList", officerIcRankList);
		// map.put("crvList", crvList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public boolean addBoo(Map<String, Object> infoMap) {
		StoreBoo storeBoo = (StoreBoo) infoMap.get("storeBoo");
		List<StoreBooMember> storeBooMlist = (ArrayList<StoreBooMember>) infoMap
				.get("storeBooMlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		int storeFyId = 0;
		int deptId = 0;
		String booNo = "";
		if (infoMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + infoMap.get("deptId"));
		}
		//
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(storeBoo);
			booNo = (String) infoMap.get("booNo");
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setBooNo(booNo);

			hbt.update(storeFyDocumentNo);

			if (storeBooMlist.size() > 0) {

				for (int i = 0; i < storeBooMlist.size(); i++) {
					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj = (StoreBooMember) storeBooMlist.get(i);
					storeBooMObj.setBoo(storeBoo);
					hbt.save(storeBooMObj);

				}
				// int pageNo = 0;

				// pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
				booNo = (String) infoMap.get("booNo");

				successfullyAdded = true;
				tx.commit();
			}
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message

			e.printStackTrace();
		} // finally {
			// if(session!=null){
			// session.close();
		// }
		// }

		return successfullyAdded;
	}

	public boolean updateBoo(StoreBoo storeBoo, List storeBooMlist) {
		boolean successfullyAdded = false;
		StoreBoo storeBoo2 = new StoreBoo();
		storeBoo2 = storeBoo;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeBoo2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeBooMlist.size() > 0) {

				for (int i = 0; i < storeBooMlist.size(); i++) {
					StoreBooMember storeBooMObj = new StoreBooMember();
					storeBooMObj = (StoreBooMember) storeBooMlist.get(i);
					storeBooMObj.setBoo(storeBoo2);
					hbt.update(storeBooMObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map searchBoo(Map searchFieldMap) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreBoo> gridBooHeaderList = new ArrayList<StoreBoo>();
		List<StoreBooMember> gridBooDetailList = new ArrayList<StoreBooMember>();
		String booNo = "";
		try {
			if (!searchFieldMap.get("booNo").equals("0")) {
				booNo = (String) searchFieldMap.get("booNo");

				gridBooDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBooMember ");
				gridBooHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBoo as pod where pod.BooNo = '"
								+ booNo + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
			e.printStackTrace();
		}
		try {
			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridBooDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBooMember ");
				gridBooHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBoo as poh where "
								+ " poh.BooDate between '" + startDate
								+ "' and '" + endDate + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridBooDetailList", gridBooDetailList);
		map.put("gridBooHeaderList", gridBooHeaderList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map getBooModifyMap(int radio_str) {

		Map map = new HashMap();
		List<StoreBoo> gridBooList = new ArrayList<StoreBoo>();
		List<StoreBooMember> gridBooMList = new ArrayList<StoreBooMember>();
		List<MasEmployee> gridEmployeeList = new ArrayList<MasEmployee>();
		List<MasRank> gridRankList = new ArrayList<MasRank>();

		int id = 0;
		gridBooList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBoo as md where md.Id = '"
						+ radio_str + "'");
		for (StoreBoo storeBoo : gridBooList) {
			id = storeBoo.getId();

		}
		gridBooMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBooMember as sb where sb.Boo='"
						+ radio_str + "'");
		gridEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee ");
		gridRankList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasRank ");

		map.put("gridBooList", gridBooList);
		map.put("gridBooMList", gridBooMList);
		map.put("gridEmployeeList", gridEmployeeList);
		map.put("gridRankList", gridRankList);
		map.put("booId", id);

		return map;
	}

	// ---------------- connection For reports

	@SuppressWarnings("unchecked")
	public List<StoreGrnM> getCrvNumberList() {
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = session.createCriteria(StoreGrnM.class)
				.add(Restrictions.eq("Status", "v")).addOrder(Order.asc("Id"))
				.list();
		return crvNumberList;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> findGrnLedgeraction(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> storegrnMList = new ArrayList<StoreGrnM>();
		Session session = (Session) getSession();
		String grnNo = "0";
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		if (dataMap.get("grnNo") != null && !dataMap.get("grnNo").equals("")) {
			grnNo = (String) dataMap.get("grnNo");
		}
		try {
			String qry = "select * from store_grn_m where grn_no =  '" + grnNo
					+ "' and status = 'v'";
			storegrnMList = (List) session.createSQLQuery(qry).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storegrnMList", storegrnMList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public List<StoreDefectiveDrugM> getDefectiveDrugsList() {
		Session session = (Session) getSession();
		List<StoreDefectiveDrugM> defectiveDrugsList = session
				.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("Status", "y")).list();
		return defectiveDrugsList;
	}

	@SuppressWarnings("unchecked")
	public List<StoreBoo> getBooList() {
		Session session = (Session) getSession();
		List<StoreBoo> booList = session.createCriteria(StoreBoo.class)
				.add(Restrictions.eq("Status", "o")).list();
		return booList;
	}

	private final String[] majorNames = { "", " thousand", " million",
			" billion", " trillion", " quadrillion", " quintillion" };

	private final String[] tensNames = { "", " ten", " twenty", " thirty",
			" fourty", " fifty", " sixty", " seventy", " eighty", " ninety" };

	private final String[] numNames = { "", " one", " two", " three", " four",
			" five", " six", " seven", " eight", " nine", " ten", " eleven",
			" twelve", " thirteen", " fourteen", " fifteen", " sixteen",
			" seventeen", " eighteen", " nineteen" };

	private String convertLessThanOneThousand(int number) {
		String soFar;

		if (number % 100 < 20) {
			soFar = numNames[number % 100];
			number /= 100;
		} else {
			soFar = numNames[number % 10];
			number /= 10;

			soFar = tensNames[number % 10] + soFar;
			number /= 10;
		}
		if (number == 0) {
			return soFar;
		}
		return numNames[number] + " hundred" + soFar;
	}

	public String convert(int number) {
		/* special case */
		if (number == 0) {
			return "zero";
		}

		String prefix = "";

		if (number < 0) {
			number = -number;
			prefix = "negative";
		}

		String soFar = "";
		int place = 0;

		do {
			int n = number % 1000;
			if (n != 0) {
				String s = convertLessThanOneThousand(n);
				soFar = s + majorNames[place] + soFar;
			}
			place++;
			number /= 1000;
		} while (number > 0);

		return (prefix + soFar).trim();
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getGrnPrintMap(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
							+ grnId + "'");

			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("grnNo", "" + storeGrnM.getGrnNo());
				/*
				 * SimpleDateFormat formatterIn = new
				 * SimpleDateFormat("yyyy-MM-dd"); SimpleDateFormat formatterOut
				 * = new SimpleDateFormat("dd/MM/yyyy"); String date4MySQL =
				 * formatterOut.format(formatterIn.parse(""+
				 * storeGrnM.getGrnDate()));
				 */
				map.put("supplier", ""
						+ storeGrnM.getSupplier().getSupplierName());
				map.put("grnNo", "" + storeGrnM.getGrnNo());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getContingentBillPrintMap(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		// String allocatedAmount = "";
		String grnAmount_String = "";

		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		List<MasStoreBudget> amountList = new ArrayList<MasStoreBudget>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
							+ grnId + "'");
			amountList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreBudget as md");
			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("grnNo", "" + storeGrnM.getGrnNo());

				/*
				 * SimpleDateFormat formatterIn = new
				 * SimpleDateFormat("yyyy-MM-dd"); SimpleDateFormat formatterOut
				 * = new SimpleDateFormat("dd/MM/yyyy");
				 */
				// String date4MySQL = formatterOut.format(formatterIn.parse(""+
				// storeGrnM.getGrnDate()));
				map.put("supplier", ""
						+ storeGrnM.getSupplier().getSupplierName());
				map.put("invoiceNo", "" + storeGrnM.getInvoiceNo());
				map.put("invoiceDate", "" + storeGrnM.getInvoiceDate());
				map.put("grnAmount", "" + storeGrnM.getGrnAmount());
				// double num = 12.31;
				// double iPart = (int)Math.floor(num);
				// double fPart = num - iPart;
				// String decimal ="";
				// decimal.toString(fPart);
				// convert emthod decalre below
				grnAmount_String = convert(1256);

				map.put("grnAmount_String", "" + grnAmount_String);
			}

			for (MasStoreBudget masStoreBudget : amountList) {
				map.put("allocatedAmount",
						"" + masStoreBudget.getTotalAllocatedAmount());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getProformaPrintMap(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		/*
		 * String allocatedAmount = ""; String grnAmount_String = "";
		 */
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		List<MasStoreBudget> amountList = new ArrayList<MasStoreBudget>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
							+ grnId + "'");
			amountList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreBudget as md");
			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("grnNo", "" + storeGrnM.getGrnNo());

				/*
				 * SimpleDateFormat formatterIn = new
				 * SimpleDateFormat("yyyy-MM-dd"); SimpleDateFormat formatterOut
				 * = new SimpleDateFormat("dd/MM/yyyy");
				 * 
				 * String date4MySQL = formatterOut.format(formatterIn.parse(""+
				 * storeGrnM.getGrnDate()));
				 */map.put("invoiceNo", "" + storeGrnM.getInvoiceNo());
				map.put("invoiceDate", "" + storeGrnM.getInvoiceDate());

			}

			for (MasStoreBudget masStoreBudget : amountList) {
				map.put("allocatedAmount",
						"" + masStoreBudget.getTotalAllocatedAmount());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getIndentList(String choice) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreAirForceDepot> unitList = new ArrayList<MasStoreAirForceDepot>();
		if (choice.equalsIgnoreCase("P")) {
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as mi order by mi.SupplierName");
			indentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.IndentType !='d' and md.Status ='o'");
			map.put("first_combo", supplierList);
			map.put("second_combo", indentList);
		} else if (choice.equalsIgnoreCase("A") || choice.equalsIgnoreCase("I")) {
			unitList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status= 'y'");
			map.put("first_combo", unitList);
		} else if (choice.equalsIgnoreCase("O")) {
			unitList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreAirForceDepot as mi where mi.Status= 'y'");
			map.put("first_combo", unitList);
		} else {
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as mi order by mi.SupplierName");
			map.put("first_combo", supplierList);
		}
		map.put("choice", choice);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getVendorList(String vendor) {
		Map<String, Object> map = new HashMap<String, Object>();
		int indentId = 0;
		// String name = "";
		List<MasStoreSupplier> vendorList = new ArrayList<MasStoreSupplier>();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();

		if (map.get("indentId") != null) {
			indentId = Integer.parseInt("" + map.get("indentId"));
		}
		vendorList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasStoreSupplier as sp order by sp.SupplierName");
		indentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as sp where sp.Id='"
						+ indentId + "'");

		map.put("vendorList", vendorList);
		map.put("vendor", vendor);
		map.put("indentList", indentList);
		return map;
	}

	// ----------------- adjust loan in
	@SuppressWarnings("unchecked")
	public List<StoreLoaninM> getloanInList() {
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		loaninList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreLoaninM as md where md.Status='y'");

		return loaninList;
	}

	// ------------ barcode-----------------

	@SuppressWarnings("unchecked")
	public Map getBarcodeList(int grnId) {

		Map map = new HashMap();
		List<StoreGrnM> grnMList = new ArrayList<StoreGrnM>();
		List<StoreGrnT> grnTList = new ArrayList<StoreGrnT>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		int id = 0;
		grnMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
						+ grnId + "'");
		grnTList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreGrnT as md where md.GrnMaster.Id = '"
						+ grnId + "'");
		brandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as msb");
		for (StoreGrnM storeGrnM : grnMList) {
			id = storeGrnM.getId();

		}

		map.put("grnMList", grnMList);
		map.put("grnTList", grnTList);
		map.put("brandList", brandList);
		map.put("grnId", id);

		return map;
	}

	// ----------------- adjust loan in
	@SuppressWarnings("unchecked")
	public Map<String, Object> getLoanInList(int poId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninT> loaninTList = new ArrayList<StoreLoaninT>();

		// loaninList = getHibernateTemplate().find("from
		// jkt.hms.masters.business.StoreLoaninM as md where md.Po.Id
		// ='"+poId+"' ");
		// loaninTList = getHibernateTemplate().find("from
		// jkt.hms.masters.business.StoreLoaninT as mdl where
		// mdl.LoaninMaster.Po.Id ='"+poId+"' ");
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		manufacturerList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasManufacturer as mdl where mdl.Status='y' ");
		map.put("loaninList", loaninList);
		map.put("loaninTList", loaninTList);
		map.put("manufacturerList", manufacturerList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public List<StoreLoaninM> getloanList() {
		List<StoreLoaninM> loaninList = new ArrayList<StoreLoaninM>();
		loaninList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreLoaninM as md where Status = 'o'");
		return loaninList;
	}

	@SuppressWarnings("unchecked")
	public boolean addGrns(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		StoreGrnM storeGrnM = (StoreGrnM) infoMap.get("storeGrnM");
		// MasStoreBudget masStoreBudget =
		// (MasStoreBudget)infoMap.get("masStoreBudget");
		List<StoreGrnT> storeGrnTlist = (ArrayList<StoreGrnT>) infoMap
				.get("storeGrnTlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int deptId = 0;
		/*
		 * String userName = ""; int hospitalId = 0; String max = "";
		 */String no = "";
		int numberOfRecordsInLoanIn = 0;

		if (dataMap.get("numberOfRecordsInLoanIn") != null) {
			numberOfRecordsInLoanIn = Integer.parseInt(dataMap.get(
					"numberOfRecordsInLoanIn").toString());
		}

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		/*
		 * if (dataMap.get("hospitalId") != null) { hospitalId =
		 * Integer.parseInt("" + dataMap.get("hospitalId")); } if
		 * (dataMap.get("userName") != null) { userName = ("" +
		 * dataMap.get("userName")); }
		 */
		int storeFyId = 0;

		boolean successfullyAdded = false;
		// StoreGrnM storeGrnM2 = new StoreGrnM();
		int indentId = 0;
		if (infoMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + infoMap.get("indentId"));
		}
		String sos = "";
		if (infoMap.get("sourceOfSupply") != ""
				|| infoMap.get("sourceOfSupply") != null) {
			sos = (String) infoMap.get("sourceOfSupply");
		}
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			hbt.save(storeGrnM);
			String grnNo = "";
			grnNo = (String) infoMap.get("grnNo");
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setGrnNo(grnNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 */

			if (sos.equalsIgnoreCase("l") || sos.equalsIgnoreCase("w")) {
				MasStoreBudget masStoreBudget = new MasStoreBudget();
				java.util.Date poDate = storeGrnM.getGrnDate();
				BigDecimal poAmount = storeGrnM.getGrnValue();

				List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
				masStoreFinancialList = session.createCriteria(
						MasStoreFinancial.class).list();
				java.util.Date start_date = null;
				java.util.Date end_date = null;
				int financial_id = 0;
				for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
						.hasNext();) {
					MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
							.next();
					start_date = (java.util.Date) masStoreFinancial
							.getStartDate();
					end_date = (java.util.Date) masStoreFinancial.getEndDate();
					if (poDate.after(start_date) && poDate.before(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					} else if (poDate.equals(start_date)
							|| poDate.equals(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					}
				}

				List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
				masStoreBudgetList = session
						.createCriteria(MasStoreBudget.class)
						.add(Restrictions.eq("Financial.Id", financial_id))
						.add(Restrictions.eq("Department.Id", deptId)).list();
				BigDecimal existing_committed_amount = null;
				if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
					masStoreBudget = masStoreBudgetList.get(0);
					try {
						existing_committed_amount = masStoreBudget
								.getCrvComittedAmount();
					} catch (Exception e) {
						existing_committed_amount = new BigDecimal(0);
					}

					masStoreBudget
							.setCrvComittedAmount(existing_committed_amount
									.add(poAmount));
					hbt.update(masStoreBudget);
				}
			}

			/*
			 * End of MasStoreBudget Update
			 */

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeGrnTlist.size() > 0) {
				for (int i = 0; i < storeGrnTlist.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTlist.get(i);
					storeGrnTObj.setGrnMaster(storeGrnM);
					hbt.save(storeGrnTObj);
					hbt.refresh(storeGrnTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item

					if (sos.equalsIgnoreCase("l")) {
						List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
						StorePoDetail storePoDetail = new StorePoDetail();
						storePoDetailList = session
								.createCriteria(StorePoDetail.class)
								.add(Restrictions.eq("Po.Id", indentId))
								.add(Restrictions.eq("Item.Id", storeGrnTObj
										.getItem().getId())).list();

						if (storePoDetailList != null
								&& storePoDetailList.size() > 0) {
							storePoDetail = storePoDetailList.get(0);
							BigDecimal existingQuantity = null;
							BigDecimal quantity_to_be_added = null;
							BigDecimal newQuantity = new BigDecimal(0);
							BigDecimal mdq = storePoDetail.getMdqValue();

							existingQuantity = storePoDetail
									.getQuantityReceived();
							BigDecimal recd_qty = storeGrnTObj.getReceivedQty();
							quantity_to_be_added = recd_qty.divide(mdq,
									new MathContext(4, RoundingMode.UP));

							if (existingQuantity == null) {
								existingQuantity = new BigDecimal(0);
							}

							newQuantity = existingQuantity
									.add(quantity_to_be_added);
							storePoDetail.setQuantityReceived(newQuantity);
							hbt.update(storePoDetail);
						}
					}

					int item_id = storeGrnTObj.getItem().getId();
					int brand_id = storeGrnTObj.getBrand().getId();
					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();

					storeItemBatchStockList = hbt
							.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
									+ item_id
									+ " and inp.CostPrice = "
									+ cost_price
									+ "and inp.Department.Id= "
									+ department_id
									+ "and inp.BatchNo ='"
									+ batch_no
									+ "' and inp.Brand.Id = "
									+ brand_id);
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						if (i > numberOfRecordsInLoanIn - 1) {
							int free_qty = 0;
							free_qty = storeGrnTObj.getFreeQty();
							// int id = storeItemBatchStockList.get(0).getId();
							// storeItemBatchStock =
							// (StoreItemBatchStock)hbt.load(StoreItemBatchStock.class,
							// id);

							storeItemBatchStock = storeItemBatchStockList
									.get(0);
							BigDecimal existing_qty = new BigDecimal(0);

							if (storeItemBatchStock.getReceivedQty() != null) {
								existing_qty = storeItemBatchStock
										.getReceivedQty();
							} else {
								existing_qty = new BigDecimal(0);
							}

							BigDecimal recd_qty = storeGrnTObj.getReceivedQty();

							BigDecimal new_qty = new BigDecimal(0);
							new_qty = existing_qty.add(recd_qty);
							BigDecimal existing_closing_stock = storeItemBatchStock
									.getClosingStock();
							BigDecimal new_closing_stock = new BigDecimal(0);
							new_closing_stock = existing_closing_stock
									.add(recd_qty);

							int id = storeItemBatchStock.getId();
							storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
									.load(StoreItemBatchStock.class, id);

							storeItemBatchStock.setReceivedQty(new_qty
									.add(new BigDecimal(free_qty)));

							storeItemBatchStock
									.setClosingStock(new_closing_stock
											.add(new BigDecimal(free_qty)));

							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_EAGER");
							hbt1.setCheckWriteOperations(false);
							hbt1.update(storeItemBatchStock);
						}
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeGrnM
								.getDepartment());
						storeItemBatchStock.setItem(storeGrnTObj.getItem());
						storeItemBatchStock.setBatchNo(storeGrnTObj
								.getBatchNo());
						if (storeGrnTObj.getLotNo() != null) {
							storeItemBatchStock.setLotNo(storeGrnTObj
									.getLotNo());
						} else {
							storeItemBatchStock.setLotNo(storeGrnTObj
									.getBrand()
									+ ","
									+ storeGrnTObj.getItem()
									+ "," + storeGrnTObj.getBatchNo());
						}

						int free_qty = 0;
						free_qty = storeGrnTObj.getFreeQty();

						BigDecimal recd_qty = storeGrnTObj.getReceivedQty();

						storeItemBatchStock.setReceivedQty(recd_qty
								.add(new BigDecimal(free_qty)));

						storeItemBatchStock.setFreeItem(storeGrnTObj
								.getFreeItem());
						storeItemBatchStock.setBrand(storeGrnTObj.getBrand());
						storeItemBatchStock.setCostPrice(storeGrnTObj
								.getFinalCostPrice());
						storeItemBatchStock.setClosingStock(recd_qty
								.add(new BigDecimal(free_qty)));
						storeItemBatchStock.setExpiryDate(storeGrnTObj
								.getExpiryDate());
						storeItemBatchStock.setFreeItem(storeGrnTObj
								.getFreeItem());

						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_AUTO");
						hbt1.setCheckWriteOperations(false);
						hbt1.save(storeItemBatchStock);
					} // if itembatchstocksize > 0
				} // end of for loop
			} // end of if GrnTlist > 0

			HibernateTemplate hbt3 = getHibernateTemplate();
			hbt3.setFlushModeName("FLUSH_EAGER");
			hbt3.setCheckWriteOperations(false);
			if ((sos.equalsIgnoreCase("a"))) {
				StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
						.load(StoreIndentM.class, indentId);
				storeIndentM.setStatus("p");
				hbt3.update(storeIndentM);
			} else if (sos.equalsIgnoreCase("l")) {
				StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
						.load(StorePoHeader.class, indentId);
				// storePoHeader.setStatus("p");
				// int grnMasterId = 0;
				storePoHeader.setGrnMaster(storeGrnM);
				hbt3.update(storePoHeader);
			}

			// int pageNo = 0;
			// pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
			grnNo = (String) infoMap.get("grnNo");
			successfullyAdded = true;
			tx.commit();
		} catch (Exception e) {

			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		map.put("maxIndentNo", no);

		return successfullyAdded;

	}

	// calculating actual Quantity ================

	public Map<String, Object> getActualQtyAsPerAU(Map<String, Object> paramMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int itemId = Integer.parseInt(paramMap.get("itemId").toString());
		int mdq = Integer.parseInt(paramMap.get("mdq").toString());
		int freeQty = Integer.parseInt(paramMap.get("freeQty").toString());
		BigDecimal qty = new BigDecimal(paramMap.get("qty").toString());
		BigDecimal amount = new BigDecimal(paramMap.get("amount").toString(),
				new MathContext(3, RoundingMode.UP));

		try {
			Criteria criteria = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Id", itemId));
			List<MasStoreItem> masStoreItemList = criteria.list();
			BigDecimal actual_qty = new BigDecimal(0);
			BigDecimal actual_free_qty = new BigDecimal(0);
			BigDecimal cost_price = new BigDecimal(0);
			// MathContext mc = new MathContext(3,RoundingMode.UP);

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
						.get(0);
				String formula = masStoreItem.getItemConversion().getFormula();
				Integer conv_factor = masStoreItem.getItemConversion()
						.getConversionFactor1();
				BigDecimal temp = new BigDecimal(0);
				actual_qty = new BigDecimal(0);
				cost_price = new BigDecimal(0);
				actual_free_qty = new BigDecimal(0);
				if (formula.equals("1")) {
					temp = qty.multiply(new BigDecimal(mdq));
					actual_qty = temp.divide(new BigDecimal(conv_factor));

					cost_price = amount.divide(actual_qty);
					temp = new BigDecimal(freeQty)
							.multiply(new BigDecimal(mdq));
					actual_free_qty = temp.divide(new BigDecimal(conv_factor));
				} else {
					actual_qty = qty;
					cost_price = amount.divide(actual_qty);
					actual_free_qty = new BigDecimal(freeQty);
				}
			}

			map.put("actualQuantity", actual_qty);
			map.put("costPrice", cost_price);
			map.put("freeQty", actual_free_qty);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	// ======== for adjusting loanin in crv and show in grid ================

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map getAdjustmentList(int indentId, int pageNo, String items) {

		Map map = new HashMap();
		List<StoreLoaninM> gridLoanInMList = new ArrayList<StoreLoaninM>();
		List<StoreLoaninT> gridLoanInTList = new ArrayList<StoreLoaninT>();
		@SuppressWarnings("unused")
		int id = 0;
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			gridLoanInTList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreLoaninT as md where md.LoaninMaster.Po.Id ='"
							+ indentId + "'");
			gridLoanInMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreLoaninM as md where md.Po.Id = '"
							+ indentId + "' and md.Status='o'");
			// String qry =
			// "select item_id,pvms_no,nomenclature from mas_store_item ";
			// objectList = (List) session.createSQLQuery(qry).list();

			StringTokenizer str = new StringTokenizer(items, ",");
			while (str.hasMoreTokens()) {
				objectList1.add(Integer.parseInt(str.nextToken().toString()));
			}
			if (objectList1.size() > 0) {
				Criteria c3 = session.createCriteria(StorePoDetail.class)
						.add(Restrictions.eq("Po.Id", indentId))
						.add(Restrictions.in("Item.Id", objectList1));
				poList = c3.list();
			}
			manufacturerList = session.createCriteria(MasManufacturer.class)
					.add(Restrictions.eq("Status", "y")).list();
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		map.put("gridLoanInMList", gridLoanInMList);
		map.put("gridLoanInTList", gridLoanInTList);
		map.put("indentId", indentId);
		map.put("objectList", objectList);
		map.put("manufacturerList", manufacturerList);
		map.put("poList", poList);
		return map;
	}

	public Map getATSODate(int indentId) {
		Map map = new HashMap();
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StorePoHeader.class).add(
				Restrictions.eq("Id", indentId));
		List<StorePoHeader> storePoHeaderList = c.list();
		map.put("storePoHeaderList", storePoHeaderList);
		return map;
	}

	// ----------------- adjust Loan In
	public boolean AdjustLoanIn(int loaninId, StoreGrnM storeGrnM, int poId,
			List storeGrnTlist, Map<String, Object> infoMap) {
		StoreGrnM storeGrnM2 = new StoreGrnM();

		if (!(infoMap.get("headerStored") + "").equals("yes")) {
			try {
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_AUTO");
				hbt.setCheckWriteOperations(false);
				hbt.save(storeGrnM);

				StoreLoaninM storeLoaninM = (StoreLoaninM) getHibernateTemplate()
						.load(StoreLoaninM.class, loaninId);
				storeLoaninM.setStatus("c");
				StorePoHeader storePoHeader = (StorePoHeader) getHibernateTemplate()
						.load(StorePoHeader.class, poId);
				// storePoHeader.setStatus("c");
				HibernateTemplate hbt1 = getHibernateTemplate();
				hbt1.setFlushModeName("FLUSH_EAGER");
				hbt1.setCheckWriteOperations(false);
				hbt1.update(storeLoaninM);
				hbt1.update(storePoHeader);

				if (storeGrnTlist.size() > 0) {
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						int id = Integer.parseInt("" + infoMap.get("loaninId"));
						storeGrnM2.setId(id);
					}
					for (int i = 0; i < storeGrnTlist.size(); i++) {
						StoreGrnT storeGrnTObj = new StoreGrnT();
						storeGrnTObj = (StoreGrnT) storeGrnTlist.get(i);
						if ((infoMap.get("headerStored") + "").equals("yes")) {
							storeGrnTObj.setGrnMaster(storeGrnM2);
						} else {
							storeGrnTObj.setGrnMaster(storeGrnM);
						}
						HibernateTemplate hbt2 = getHibernateTemplate();
						hbt2.setFlushModeName("FLUSH_AUTO");
						hbt2.setCheckWriteOperations(false);
						hbt2.save(storeGrnTObj);
					}
					int pageNo = 0;
					String loaninNo = "";
					pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
					loaninNo = (String) infoMap.get("loaninNo");
					if (pageNo == 1) {
						int StoreFyDocumentNoId = 1;
						StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
								.load(StoreFyDocumentNo.class,
										StoreFyDocumentNoId);
						storeFyDocumentNo.setGrnNo(loaninNo);
						HibernateTemplate hbt3 = getHibernateTemplate();
						hbt3.setFlushModeName("FLUSH_EAGER");
						hbt3.update(storeFyDocumentNo);
					}
				}
			} catch (Exception e) {

				e.printStackTrace();
			}

		}
		return true;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showGridJsp(Box box) {

		// Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();

		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();

		/*
		 * int poId = 0; String max = ""; String startNo = ""; String no = "";
		 */
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {
			if (box.getString("sourceOfSupply").equals("p")) {
				// indent
				storeIndentTList = hbt
						.find("from jkt.hms.masters.business.StoreIndentT as inp where inp.Indent.Id = "
								+ box.getInt(INDENT_ID)
								+ " and inp.Indent.IndentType !='d'");
				brandList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasStoreBrand as msb");
				for (Iterator iterator = storeIndentTList.iterator(); iterator
						.hasNext();) {
					StoreIndentT storeIndentT = (StoreIndentT) iterator.next();
					itemList.add(storeIndentT.getItem());

				}
			} else if (box.getString("sourceOfSupply").equals("a")) {
				// indent
				storeIndentTList = hbt
						.find("from jkt.hms.masters.business.StoreIndentT as inp where inp.Indent.Id = "
								+ box.getInt(INDENT_ID)
								+ " and inp.Indent.IndentType='d' ");
				brandList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasStoreBrand as msb");
				for (Iterator iterator = storeIndentTList.iterator(); iterator
						.hasNext();) {
					StoreIndentT storeIndentT = (StoreIndentT) iterator.next();
					itemList.add(storeIndentT.getItem());

				}
			}

			else if (box.getString("sourceOfSupply").equals("o")) {
				itemList = hbt
						.find("from jkt.hms.masters.business.MasStoreItem");
				brandList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasStoreBrand as msb");
			} else if (box.getString("sourceOfSupply").equals("l")) {
				// store po detail
				storePoDetailList = hbt
						.find("from jkt.hms.masters.business.StorePoDetail as inp where inp.Po.Id = "
								+ box.getInt(INDENT_ID));
				brandList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasStoreBrand as msb");
				for (Iterator iterator = storePoDetailList.iterator(); iterator
						.hasNext();) {
					StorePoDetail storePoDetail = (StorePoDetail) iterator
							.next();
					itemList.add(storePoDetail.getItem());
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (itemList != null && itemList.size() > 0) {
			for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
				MasStoreItem masStoreItem = (MasStoreItem) iterator.next();
				brandList.add(masStoreItem.getBrand());

			}
		}

		map.put("brandList", brandList);
		map.put("itemList", itemList);

		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showGridLoanInJsp(Box box) {

		// Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		// List<StoreFyDocumentNo> storeFyDocumentNoList = new
		// ArrayList<StoreFyDocumentNo>();

		List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();

		/*
		 * int poId = 0; String max = ""; String startNo = ""; String no = "";
		 */

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		try {

			// store po detail
			storePoDetailList = hbt
					.find("from jkt.hms.masters.business.StorePoDetail as inp where inp.Po.Id = "
							+ box.getInt("poId"));

			brandList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreBrand as msb");
			for (Iterator iterator = storePoDetailList.iterator(); iterator
					.hasNext();) {
				StorePoDetail storePoDetail = (StorePoDetail) iterator.next();
				itemList.add(storePoDetail.getItem());

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (itemList != null && itemList.size() > 0) {
			for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
				MasStoreItem masStoreItem = (MasStoreItem) iterator.next();
				brandList.add(masStoreItem.getBrand());

			}
		}

		map.put("brandList", brandList);
		map.put("itemList", itemList);

		return map;

	}

	public Map adjustLoanIn() {
		return null;
	}

	// --------- new GRid----------------------

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map<String, Object> getItemListForGrnByAutocomplete(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Box box = (Box) dataMap.get("box");
		String sos = box.getString("sourceOfSupply").trim();

		// String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));

		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";

			if (sos.equalsIgnoreCase("p")) {
				String qry = "Select item_id from store_indent_t where indent_id in(select indent_id  from store_indent_m where indent_type !='d' )";
				objectList = (List) session.createSQLQuery(qry).list();

				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						// .add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
			if (sos.equalsIgnoreCase("l")) {

				String qry = " SELECT item_id FROM store_po_detail where po_id='"
						+ indentId + "';";
				objectList = (List) session.createSQLQuery(qry).list();
				log.debug("objectList --" + objectList.size() + objectList);
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						// .add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
			if (sos.equalsIgnoreCase("a")) {
				String qry = "Select item_id from store_indent_t where indent_id in(select indent_id  from store_indent_m where indent_type ='d' )";
				objectList = (List) session.createSQLQuery(qry).list();

				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Nomenclature", str));
				// .add(Restrictions.eq("Department.Id", deptId));
				// .add(Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
			if (sos.equalsIgnoreCase("o") || sos.equalsIgnoreCase("w")
					|| sos.equalsIgnoreCase("i") || sos.equalsIgnoreCase("x")) {

				/*
				 * String qry =
				 * "Select item_id from mas_store_item where Status='y'";
				 * objectList = (List) session.createSQLQuery(qry).list();
				 */
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						// .add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Status", "y").ignoreCase());// .add(Restrictions.eq("Department.Id",
																			// deptId));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}

		}

		catch (Exception e) {

			e.printStackTrace();
		}
		map.put("itemList", itemList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> fillItemsForGrn(Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poDetailList = new ArrayList<StorePoDetail>();
		session = (Session) getSession();
		/*
		 * String pvms = null;
		 * 
		 * int deptId = 0; if (dataMap.get("deptId") != null) { deptId =
		 * Integer.parseInt("" + dataMap.get("deptId")); } int indentId = 0; if
		 * (dataMap.get("indentId") != null) { indentId = Integer.parseInt("" +
		 * dataMap.get("indentId")); }
		 */

		int poId = 0;
		if (dataMap.get("poId") != null) {
			poId = Integer.parseInt("" + dataMap.get("poId"));
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			// String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			StringBuffer output_str = new StringBuffer();
			StringTokenizer s = new StringTokenizer(str, "%");

			while (s.hasMoreTokens()) {
				output_str.append(s.nextToken());
				if (s.hasMoreTokens()) {
					output_str.append("\\%");
				}
			}

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
				Criteria c3 = session.createCriteria(StorePoDetail.class)
						.add(Restrictions.eq("Po.Id", poId))
						.add(Restrictions.eq("Item.Id", itemId));
				poDetailList = c3.list();
			}
			// String qry="SELECT sum(closing_stock) FROM store_item_batch_stock
			// where item_id='"+itemId+"' and department_id='"+deptId+"';";
			// objectList = (List) session.createSQLQuery(qry).list();
			//
			// if(objectList.get(0) !=null)
			// stockIn=new BigDecimal(""+objectList.get(0));
			// else
			// stockIn=new BigDecimal("0");
			List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
			manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer ");
			map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("poDetailList", poDetailList);
			map.put("manufacturerList", manufacturerList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> fillItemsForGrnForGrnWithoutPo(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poDetailList = new ArrayList<StorePoDetail>();
		List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();

		session = (Session) getSession();
		/*
		 * String pvms = null; int indentId = 0; if (dataMap.get("indentId") !=
		 * null) { indentId = Integer.parseInt("" + dataMap.get("indentId")); }
		 */
		int deptId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		int poId = 0;
		if (dataMap.get("poId") != null) {
			poId = Integer.parseInt("" + dataMap.get("poId"));
		}
		int hospitalId = 0;
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String str = "" + dataMap.get("nomenclature");
			StringBuffer output_str = new StringBuffer();
			StringTokenizer s = new StringTokenizer(str, "%");

			while (s.hasMoreTokens()) {
				output_str.append(s.nextToken());
				if (s.hasMoreTokens()) {
					output_str.append("\\%");
				}
			}

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			// Added by Ramdular 06/01/2010 Client Site- Silvassa
			int itemId = 0;
			String expiry = "";
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();
				expiry = masStoreItem.getExpiry();
			}
			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
			}
			int manufacturer_id = 0;
			for (MasStoreBrand brand : brandList) {
				manufacturer_id = brand.getManufacturer().getId();
			}
			if (manufacturer_id != 0) {
				Criteria c3 = session.createCriteria(MasManufacturer.class);
				// changed by manjul on 28/06/2012 as per client requirement
				// .add(Restrictions.eq("Id", manufacturer_id));
				manufacturerList = c3.list();
			}

			/*
			 * Code is Replaced By Mukesh Narayan SIngh Date 14 Dec 2010 Details
			 * is come on the behalf of Store Po Details and Now we are working
			 * with StoreGrn
			 */
			/*
			 * if (itemId != 0) { Criteria c2 =
			 * session.createCriteria(MasStoreBrand.class).add(
			 * Restrictions.eq("Item.Id", itemId)); brandList = c2.list();
			 * Criteria c3 =null; if(poId>0){ c3 =
			 * session.createCriteria(StorePoDetail.class)
			 * .add(Restrictions.eq("Po.Id", poId))
			 * .add(Restrictions.eq("Item.Id", itemId)); }else{
			 * List<StorePoHeader> storePoHeaderList=new
			 * ArrayList<StorePoHeader>();
			 * storePoHeaderList=session.createCriteria
			 * (StorePoHeader.class).addOrder(Order.desc("Id")).list();
			 * if(storePoHeaderList.size()>0){ StorePoHeader storePoHeader=new
			 * StorePoHeader();
			 * storePoHeader=(StorePoHeader)storePoHeaderList.get(0);
			 * poId=storePoHeader.getId(); c3 =
			 * session.createCriteria(StorePoDetail.class)
			 * .add(Restrictions.eq("Po.Id", poId))
			 * .add(Restrictions.eq("Item.Id", itemId)); } } poDetailList =
			 * c3.list(); }
			 */
			if (itemId != 0) {
				/*
				 * Criteria c2 =
				 * session.createCriteria(MasStoreBrand.class).add(
				 * Restrictions.eq("Item.Id", itemId)); brandList = c2.list();
				 */
				Criteria c3 = null;
				c3 = session.createCriteria(StoreGrnT.class)
						.createAlias("GrnMaster", "header")
						.add(Restrictions.eq("Item.Id", itemId))
						.add(Restrictions.eq("header.Hospital.Id", hospitalId))
						.addOrder(Order.desc("Id"));
				storeGrnTList = c3.list();
			}
			/*
			 * End Code is Replaced By Mukesh Narayan SIngh Date 14 Dec 2010
			 * Details is come on the behalf of Store Po Details and Now we are
			 * working with StoreGrn
			 */
			// String qry="SELECT sum(closing_stock) FROM store_item_batch_stock
			// where item_id='"+itemId+"' and department_id='"+deptId+"';";
			// objectList = (List) session.createSQLQuery(qry).list();
			//
			// if(objectList.get(0) !=null)
			// stockIn=new BigDecimal(""+objectList.get(0));
			// else
			// stockIn=new BigDecimal("0");
			// List<MasManufacturer> manufacturerList = new
			// ArrayList<MasManufacturer>();
			// List<MasManufacturer>manufacturerList=new
			// ArrayList<MasManufacturer>();
			// manufacturerList =
			// getHibernateTemplate().find("from jkt.hms.masters.business.MasManufacturer ");

			// Added By Ritu for general items--------------
			/*
			 * Code for get GRN No from property file and access right's from
			 * hospital parameter Code date 13 Oct 2010 Code By Mukesh Narayan
			 * Singh
			 */
			List<HospitalParameters> hospitalParametersList = new ArrayList<HospitalParameters>();

			hospitalParametersList = session
					.createCriteria(HospitalParameters.class)
					.add(Restrictions.eq("DeptIdStoreCodeRKS", deptId)).list();
			int departmentId = 0;
			if (hospitalParametersList.size() > 0) {

				for (HospitalParameters hospitalParameters : hospitalParametersList) {
					departmentId = hospitalParameters.getDeptIdStoreCodeRKS();
				}

			} else {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeVBCH", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentId = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
				}
			}

			if (departmentId > 0) {/*
									 * List<StoreItemBatchStock> genItemList =
									 * new ArrayList<StoreItemBatchStock>();
									 * genItemList =
									 * session.createCriteria(StoreItemBatchStock
									 * .class).createAlias("Item", "item")
									 * .add(Restrictions.eq("item.Id",
									 * itemId)).createAlias("Department", "d")
									 * .add(Restrictions.eq("d.Id",
									 * deptId)).list(); String prevLotNo = "";
									 * String newLotNo = "";
									 * if(genItemList.size() > 0){ prevLotNo =
									 * genItemList
									 * .get(genItemList.size()-1).getBatchNo();
									 * String st1 = ""; String st2 = ""; try{
									 * st1 =
									 * prevLotNo.substring(0,(prevLotNo.indexOf
									 * (" "))); st2 =
									 * prevLotNo.substring(prevLotNo
									 * .indexOf(" ")+1); Integer no =
									 * Integer.parseInt(st2)+1; newLotNo =
									 * st1.concat(" ").concat(no.toString());
									 * }catch (Exception e) { newLotNo =
									 * "Lot 1"; } }else{ newLotNo = "Lot 1"; }
									 * map.put("newLotNo", newLotNo);
									 */
			}
			map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("poDetailList", poDetailList);
			map.put("storeGrnTList", storeGrnTList);
			map.put("manufacturerList", manufacturerList);
			map.put("expiry", expiry);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	@SuppressWarnings("rawtypes")
	public Map<String, Object> getItemListForLoanInByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		// session = (Session) getSession();
		// String pvmsNo = null;
		int deptId = 0;
		int poId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		poId = Integer.parseInt("" + dataMap.get("poId"));
		List objectList = new ArrayList();
		Session session = (Session) getSession();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			if (poId != 0) {
				String qry = " SELECT item_id FROM store_po_detail where po_id='"
						+ poId + "';";
				objectList = (List) session.createSQLQuery(qry).list();
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.in("Id", objectList));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForLoanIn(Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StorePoDetail> poList = new ArrayList<StorePoDetail>();
		session = (Session) getSession();
		String pvms = null;

		int deptId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		// log.debug("deptId in fillItemsForLoanIn contro -------
		// "+deptId);

		int poId = 0;
		if (dataMap.get("poId") != null) {
			poId = Integer.parseInt("" + dataMap.get("poId"));
		}
		//
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			StringBuffer output_str = new StringBuffer();
			StringTokenizer s = new StringTokenizer(str, "%");

			while (s.hasMoreTokens()) {
				output_str.append(s.nextToken());
				if (s.hasMoreTokens()) {
					output_str.append("\\%");
				}
			}

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();
			//

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
			}
			if (itemId != 0) {
				Criteria c3 = session.createCriteria(StorePoDetail.class)
						.add(Restrictions.eq("Item.Id", itemId))
						.add(Restrictions.eq("Po.Id", poId));
				poList = c3.list();
			}

			map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("poList", poList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	// ===================== defective drugs ===============

	@SuppressWarnings("unchecked")
	public Map<String, Object> showDefectiveDrugJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		Set<StoreItemBatchStock> closingStockSet = new HashSet<StoreItemBatchStock>();
		Set<StoreItemBatchStock> set1 = new HashSet<StoreItemBatchStock>();
		HashMap<String, Object> map = new HashMap<String, Object>();

		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreDefectiveDrugM> drugList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugM> searchDrugList = new ArrayList<StoreDefectiveDrugM>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreCopyAddressList> copyList = new ArrayList<StoreCopyAddressList>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreFyDocumentNo> storeFyDocumentNo1List = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalReturnT> storeInternalReturnTList = new ArrayList<StoreInternalReturnT>();
		// MasStoreItem masStoreObj = new MasStoreItem();
		// String max = "";
		// String startNo = "";
		String no = "";
		Session session = (Session) getSession();
		try {
			brandList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreBrand as msb");
			drugList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreDefectiveDrugM as msb where  msb.Hospital.Id = '"
							+ hospitalId + "'");
			searchDrugList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreDefectiveDrugM as msb where  msb.Hospital.Id = '"
							+ hospitalId + "'");
			manufacturerList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasManufacturer as sca ");
			copyList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreCopyAddressList as sca ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId
							+ "' and  sfdn.Hospital.Id = '"
							+ hospitalId + "'");
			storeFyDocumentNo1List = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId
							+ "' and  sfdn.Hospital.Id = '"
							+ hospitalId + "'");
			storeInternalReturnTList = session
					.createCriteria(StoreInternalReturnT.class)
					.add(Restrictions.eq("Reason", "Defective"))
					// .createAlias("ReturnMain", "returnM")
					// .add(Restrictions.eq("returnM.Status", "d"))
					.list();
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNo1List) {
				if (storeFyDocumentNo.getAdjustmentNo() != null) {
					no = ("" + storeFyDocumentNo.getAdjustmentNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}

			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getDefectEntryNo() != null) {
					no = ("" + storeFyDocumentNo.getDefectEntryNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("max", no);
		map.put("searchDrugList", searchDrugList);
		map.put("drugList", drugList);
		map.put("brandList", brandList);
		map.put("set1", set1);
		map.put("manufacturerList", manufacturerList);
		map.put("copyList", copyList);
		map.put("storeInternalReturnTList", storeInternalReturnTList);
		return map;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map<String, Object> getItemListForDefectiveDrugsByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> itemList = new ArrayList<Object>();
		Session session = (Session) getSession();
		// String pvmsNo = null;
		// Box box = (Box) dataMap.get("box");
		int deptId = 0;
		int hospitalId = 0;
		int groupId = 0;
		int itemTypeId = 0;
		int sectionId = 0;
		int categoryId = 0;
		int classId = 0;
		if(dataMap.get("groupId")!= null){
			groupId = (Integer)dataMap.get("groupId");
		}
		if(dataMap.get("itemTypeId")!= null){
			itemTypeId = (Integer)dataMap.get("itemTypeId");
		}
		if(dataMap.get("sectionId")!= null){
			sectionId = (Integer)dataMap.get("sectionId");
		}
		if(dataMap.get("categoryId")!= null){
			categoryId = (Integer)dataMap.get("categoryId");
		}
		if(dataMap.get("classId")!= null){
			classId = (Integer)dataMap.get("classId");
		}
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		List objectList = new ArrayList();
		//
		try {
			String str = (String) dataMap.get("autoHint") + "%";
		/*	String qry = "SELECT distinct item_id FROM store_item_batch_stock where department_id='"
					+ deptId + "' and hospital_id = '" + hospitalId + "'";
			objectList = (List) session.createSQLQuery(qry).list();
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));
			// .add(Restrictions.in("Id", objectList));
			c.setFirstResult(0);
			c.setMaxResults(10);*/
			Criteria criteria = session
					.createCriteria(StoreItemBatchStock.class)
					.createAlias("Item", "item")
					.add(Restrictions.eq("item.Status", "y").ignoreCase())
					.add(Restrictions.gt("ClosingStock",
							new BigDecimal(0.0)))
					.add(Restrictions.like("item.Nomenclature", str).ignoreCase())
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", deptId))
					//.add(Restrictions.or(Restrictions.ne("BlockStatus", "Temporary Block"), Restrictions.isNull("BlockStatus")))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections
											.groupProperty("item.Id"))
									.add(Projections
											.property("item.PvmsNo"))
									.add(Projections
											.property("item.Nomenclature")));
			if (groupId != 0) {
				criteria = criteria.createAlias("item.Group", "group").add(
						Restrictions.eq("group.Id", groupId));
			}
			if (itemTypeId != 0) {
				criteria = criteria
						.createAlias("item.ItemType", "itemType").add(
								Restrictions.eq("itemType.Id",
										itemTypeId));
			}
			if (sectionId != 0) {
				criteria = criteria.createAlias("item.Section", "section")
						.add(Restrictions.eq("section.Id",
								sectionId));
			}
			if (categoryId != 0) {
				criteria = criteria.createAlias("item.ItemCategory",
						"category").add(
						Restrictions.eq("category.Id",
								categoryId));
			}
			if (classId != 0) {
				criteria = criteria.createAlias("item.ItemClass", "class")
						.add(Restrictions.eq("class.Id",
								classId));
			}
			
			
			itemList = criteria.list();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("objectList", objectList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> fillItemsForDefectiveDrugs(Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		// String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<Object[]> batchList = new ArrayList<Object[]>();
		int deptId = 0;
		int hospitalId = 0;
		String blockFlag = "";
		// BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("blockFlag") != null) {
			blockFlag =(String)dataMap.get("blockFlag");
		}
		int userType = 0;
		if (dataMap.get("userType") != null) {
			userType = Integer.parseInt("" + dataMap.get("userType"));
		}
		Date currentDate = new Date();
		try {
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			 currentDate = java.sql.Date.valueOf(date4MySQL);
		} catch (java.text.ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		 
		 
		try {
			
			String str = "" + dataMap.get("pvmsNo");
			
			
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			/*
			 * if (itemId != 0) { Criteria c2 =
			 * session.createCriteria(MasStoreBrand.class).add(
			 * Restrictions.eq("Item.Id", itemId)); brandList = c2.list(); }
			 */
			// code for manufacturer List which will be updated by updating
			// masStore-item Screen
			if (itemId != 0) {
				
		if(blockFlag.equalsIgnoreCase("block")){
				if(userType == 1){
					String blockStatus [] = {"Temporary Block","Parmanent Block"};
					Criteria c3 = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
							.add(Restrictions.eq("item.Id", itemId))
								.add(Restrictions.eq("item.Status", "y").ignoreCase())
							//.add(Restrictions.eq("Hospital.Id", hospitalId))
							//.add(Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.gt("ClosingStock", new BigDecimal (0)))
							//.add(Restrictions.or(Restrictions.gt("ExpiryDate", currentDate), Restrictions.isNull("ExpiryDate")))
							.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
							.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.groupProperty("BatchNo")).add(Projections.groupProperty("Id")));
					batchList = c3.list();
				}else{
					String blockStatus [] = {"Temporary Block","Parmanent Block"};
					Criteria c3 = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
							.add(Restrictions.eq("item.Id", itemId))
								.add(Restrictions.eq("item.Status", "y").ignoreCase())
							.add(Restrictions.eq("Hospital.Id", hospitalId))
							//.add(Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.gt("ClosingStock", new BigDecimal (0)))
							//.add(Restrictions.or(Restrictions.gt("ExpiryDate", currentDate), Restrictions.isNull("ExpiryDate")))
							.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
							.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.groupProperty("BatchNo")).add(Projections.groupProperty("Id")))
							;
					batchList = c3.list();
				}

		}else if(blockFlag.equalsIgnoreCase("unblock")){
			if(userType == 1){
				String blockStatus [] = {"Temporary Block","Parmanent Block"};
				Criteria c3 = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.add(Restrictions.eq("item.Id", itemId))
							.add(Restrictions.eq("item.Status", "y").ignoreCase())
						//.add(Restrictions.eq("Hospital.Id", hospitalId))
						//.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.gt("ClosingStock", new BigDecimal (0)))
						.add(Restrictions.or(Restrictions.gt("ExpiryDate", currentDate), Restrictions.isNull("ExpiryDate")))
						.add(Restrictions.and(Restrictions.in("BlockStatus", blockStatus), Restrictions.isNotNull("BlockStatus")))
				.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.groupProperty("BatchNo")).add(Projections.groupProperty("Id")));
				//.add(Restrictions.in("BlockStatus", blockStatus)).add(Restrictions.isNotNull("BlockStatus"));
				batchList = c3.list();
			
			}else{
				String blockStatus [] = {"Temporary Block","Parmanent Block"};
				
				Criteria c3 = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
						.add(Restrictions.eq("item.Id", itemId))
							.add(Restrictions.eq("item.Status", "y").ignoreCase())
						.add(Restrictions.eq("Hospital.Id", hospitalId))
					//	.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.gt("ClosingStock", new BigDecimal (0)))
						.add(Restrictions.or(Restrictions.gt("ExpiryDate", currentDate), Restrictions.isNull("ExpiryDate")))
						.add(Restrictions.and(Restrictions.in("BlockStatus", blockStatus), Restrictions.isNotNull("BlockStatus")))
				.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.groupProperty("BatchNo")).add(Projections.groupProperty("Id")));
				//.add(Restrictions.in("BlockStatus", blockStatus)).add(Restrictions.isNotNull("BlockStatus"));
				batchList = c3.list();
				
			 }
		}
		else{
			String blockStatus [] = {"Temporary Block","Parmanent Block"};
			Criteria c3 = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.gt("ClosingStock", new BigDecimal (0)))
			.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
			.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.groupProperty("BatchNo")).add(Projections.groupProperty("Id")));
			batchList = c3.list();
			
		 }
		}
			// map.put("brandList", brandList);
			map.put("itemList", itemList);
			map.put("batchList", batchList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getExpiryDateInAjax(Map<String, Object> dataMap) {
		/*
		 * int deptId = 0; int batchId = 0;
		 */int batchNo = 0;
		Date expiryDate = null;
		Date manufactureDate = null;
		int manufactureId = 0;
		String manufactureName = "";
		String batchNoString = "";
		// List objectList = new ArrayList();
		StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int mId = 1;
		String batchName = "";
		int hospitalId= (Integer)dataMap.get("hospitalId");
		try {
			/*
			 * if (dataMap.get("deptId") != null) { deptId = Integer.parseInt(""
			 * + dataMap.get("deptId")); }
			 */
			if (dataMap.get("batchNo") != null) {
				batchNo = Integer.parseInt("" + dataMap.get("batchNo"));
				
			} else if (dataMap.get("batchName") != null) {
				batchName = ("" + dataMap.get("batchName"));


				if(!batchName.equals("")){
					List<Integer> batchIdList = new ArrayList<Integer>();
					batchIdList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchName))
							.add(Restrictions.eq("Hospital.Id", hospitalId)).setProjection(Projections.property("Id")).list();
					batchNo = batchIdList.get(0);
				}
			}
			storeItemBatchStock = (StoreItemBatchStock) session.load(
					StoreItemBatchStock.class, batchNo);
			if (storeItemBatchStock != null) {
				if(storeItemBatchStock.getExpiryDate() != null){
					expiryDate = java.sql.Date.valueOf(("" + storeItemBatchStock.getExpiryDate()));
					map.put("expiryDate", expiryDate);
				}
				if (storeItemBatchStock.getManufactureDate() != null) {
					manufactureDate = java.sql.Date
							.valueOf(("" + storeItemBatchStock
									.getManufactureDate()));
				}
				if (storeItemBatchStock.getManufacturer() != null) {
					manufactureId = storeItemBatchStock.getManufacturer()
							.getId();
					manufactureName = storeItemBatchStock.getManufacturer()
							.getManufacturerName();
				}
				if(storeItemBatchStock.getBatchNo() != null){
					batchNoString = storeItemBatchStock.getBatchNo();
					
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		map.put("batchNoString", batchNoString);
		map.put("manufactureDate", manufactureDate);
		map.put("manufactureId", manufactureId);
		map.put("manufactureName", manufactureName);
		map.put("storeItemBatchStock", storeItemBatchStock);
		map.put("mId", mId);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addDefectiveDrugs(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Integer> storeInternalTIdList = new ArrayList<Integer>();
		StoreDefectiveDrugM storeDefectiveDrugM = (StoreDefectiveDrugM) infoMap
				.get("storeDefectiveDrugM");
		List<StoreDefectiveDrugT> storeDefectiveDrugTlist = (ArrayList<StoreDefectiveDrugT>) infoMap
				.get("storeDefectiveDrugTlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		int parent = 0;
		String entryNo = "";
		if (dataMap.get("storeInternalTIdList") != null) {
			storeInternalTIdList = (List<Integer>)dataMap.get("storeInternalTIdList");
		}
	
		StoreDefectiveDrugM storeDefectiveDrugM2 = new StoreDefectiveDrugM();
		int deptId = 0;
		int hospitalId = 0;
		/*
		 * String userName = ""; int hospitalId = 0; String max = ""; String no
		 * = "";
		 */
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		/*
		 * if (dataMap.get("hospitalId") != null) { hospitalId =
		 * Integer.parseInt("" + dataMap.get("hospitalId")); } if
		 * (dataMap.get("userName") != null) { userName = ("" +
		 * dataMap.get("userName")); }
		 */
		// Session sess = factory.openSession();
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (!(infoMap.get("headerStored") + "").equals("yes")) {
				hbt.save(storeDefectiveDrugM);

				int storeFyId = 0;
				entryNo = (String) infoMap.get("entryNo");
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id", hospitalId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setDefectEntryNo(entryNo);
				hbt.update(storeFyDocumentNo);

			}
			for (int i = 0; i < storeInternalTIdList.size(); i++) {
				int storeInternalTId = (Integer) storeInternalTIdList.get(i);
				 StoreInternalReturnT storeInternalReturnT =
				 (StoreInternalReturnT)hbt.load(StoreInternalReturnT.class,storeInternalTId);
				 storeInternalReturnT.setReason("c");
				 hbt.update(storeInternalReturnT);
			}

			if (storeDefectiveDrugTlist.size() > 0) {
				if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("entryId"));

					storeDefectiveDrugM2.setId(id);
				}
				for (int i = 0; i < storeDefectiveDrugTlist.size(); i++) {
					StoreDefectiveDrugT storeDefectiveDrugTObj = new StoreDefectiveDrugT();
					storeDefectiveDrugTObj = (StoreDefectiveDrugT) storeDefectiveDrugTlist
							.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						storeDefectiveDrugTObj.setDefectM(storeDefectiveDrugM2);
					} else {
						storeDefectiveDrugTObj.setDefectM(storeDefectiveDrugM);
					}
					// storeDefectiveDrugTObj is containing stockId in batch no
					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) session
							.load(StoreItemBatchStock.class, Integer
									.parseInt(storeDefectiveDrugTObj
											.getBatchNo()));
					storeDefectiveDrugTObj.setBatchNo(storeItemBatchStock
							.getBatchNo());
					hbt.saveOrUpdate(storeDefectiveDrugTObj);

				}

			}
			successfullyAdded = true;
			tx.commit();
			Criteria c = session.createCriteria(StoreDefectiveDrugT.class)
					.addOrder(Order.desc("Id"));
			c.setFirstResult(0);
			c.setMaxResults(1);
			List<StoreDefectiveDrugT> storeDefectiveDrugTList = c.list();
			if (storeDefectiveDrugTList != null
					&& storeDefectiveDrugTList.size() > 0) {
				parent = storeDefectiveDrugTList.get(0).getDefectM().getId();
			}
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */

		map.put("successfullyAdded", successfullyAdded);
		map.put("parent", parent);
		return map;

	}

	@SuppressWarnings("unchecked")
	public boolean updateDefectiveDrugs(Map<String, Object> infoMap,
			Map<String, Object> dataMap) {
		StoreDefectiveDrugM storeDefectiveDrugM = (StoreDefectiveDrugM) infoMap
				.get("storeDefectiveDrugM");
		List<StoreDefectiveDrugT> storeDefectiveDrugTlist = (ArrayList<StoreDefectiveDrugT>) infoMap
				.get("storeDefectiveDrugTlist");

		// List<StoreFyDocumentNo> storeFyDocumentNoList = new
		// ArrayList<StoreFyDocumentNo>();
		int entryId = (Integer) infoMap.get("entryId");

		boolean successfullyUpdated = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";
		entryNo = (String) infoMap.get("entryNo");
		/*
		 * StoreDefectiveDrugM storeDefectiveDrugM2 = new StoreDefectiveDrugM();
		 * String userName = ""; int deptId = 0; int hospitalId = 0; String max
		 * = ""; String no = "";
		 * 
		 * if (dataMap.get("deptId") != null) { deptId = Integer.parseInt("" +
		 * dataMap.get("deptId")); } if (dataMap.get("hospitalId") != null) {
		 * hospitalId = Integer.parseInt("" + dataMap.get("hospitalId")); } if
		 * (dataMap.get("userName") != null) { userName = ("" +
		 * dataMap.get("userName")); }
		 */
		// Session sess = factory.openSession();
		Session session = (Session) getSession();
		Transaction tx = null;
		try {

			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreDefectiveDrugM> storeDefectiveDrugMList1 = session
					.createCriteria(StoreDefectiveDrugM.class)
					.add(Restrictions.eq("EntryNo", entryNo)).list();
			storeDefectiveDrugM.setId(storeDefectiveDrugMList1.get(0).getId());
			storeDefectiveDrugMList1.get(0).setLastChgBy(
					storeDefectiveDrugM.getLastChgBy());
			storeDefectiveDrugMList1.get(0).setLastChgDate(
					storeDefectiveDrugM.getLastChgDate());
			storeDefectiveDrugMList1.get(0).setLastChgTime(
					storeDefectiveDrugM.getLastChgTime());
			storeDefectiveDrugMList1.get(0).setToPlace(
					storeDefectiveDrugM.getToPlace());

			hbt.merge(storeDefectiveDrugMList1.get(0));
			hbt.refresh(storeDefectiveDrugMList1.get(0));

			List<StoreDefectiveDrugT> totalItemList = new ArrayList<StoreDefectiveDrugT>();
			// List totalBatchList = new ArrayList();
			if (storeDefectiveDrugTlist.size() > 0) {

				for (int i = 0; i < storeDefectiveDrugTlist.size(); i++) {
					StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();

					storeItemBatchStock = (StoreItemBatchStock) session.load(
							StoreItemBatchStock.class, Integer
									.parseInt(storeDefectiveDrugTlist.get(i)
											.getBatchNo()));
					storeDefectiveDrugTlist.get(i).setBatchNo(
							storeItemBatchStock.getBatchNo());
					List<StoreDefectiveDrugT> existingList = hbt
							.find("from StoreDefectiveDrugT t where t.DefectM="
									+ entryId
									+ " and t.Item.Id="
									+ storeDefectiveDrugTlist.get(i).getItem()
											.getId()
									+ " and t.BatchNo="
									+ storeDefectiveDrugTlist.get(i)
											.getBatchNo() + "");

					if (existingList != null && existingList.size() > 0) {
						StoreDefectiveDrugT storeDefectiveDrugT1 = existingList
								.get(0);
						storeDefectiveDrugT1.setBatchNo(storeDefectiveDrugTlist
								.get(i).getBatchNo());

						storeDefectiveDrugT1
								.setDefectQty(storeDefectiveDrugTlist.get(i)
										.getDefectQty());

						storeDefectiveDrugT1
								.setDisposal(storeDefectiveDrugTlist.get(i)
										.getDisposal());
						storeDefectiveDrugT1
								.setExpiryDate(storeDefectiveDrugTlist.get(i)
										.getExpiryDate());
						storeDefectiveDrugT1.setItem(storeDefectiveDrugTlist
								.get(i).getItem());

						storeDefectiveDrugT1
								.setAuthyUnderDeclared(storeDefectiveDrugTlist
										.get(i).getAuthyUnderDeclared());
						hbt.update(storeDefectiveDrugT1);
						hbt.refresh(storeDefectiveDrugT1);
						totalItemList.add(storeDefectiveDrugT1);

					} else {
						storeDefectiveDrugTlist.get(i).setDefectM(
								new StoreDefectiveDrugM(entryId));
						hbt.save(storeDefectiveDrugTlist.get(i));
						totalItemList.add(storeDefectiveDrugTlist.get(i));
					}

				}

			}
			successfullyUpdated = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */

		return successfullyUpdated;

	}

	@SuppressWarnings("unchecked")
	public Map searchDefectiveDrug(Map searchFieldMap) throws ParseException {

		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreDefectiveDrugM> gridDefectiveDrugHeaderList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugT> gridDefectiveDrugDetailList = new ArrayList<StoreDefectiveDrugT>();
		String entryNo = "";
		try {
			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridDefectiveDrugDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreDefectiveDrugT ");
				gridDefectiveDrugHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreDefectiveDrugM as poh where "
								+ " poh.GrnDate between '" + startDate
								+ "' and '" + endDate + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (!searchFieldMap.get("entryNo").equals("0")) {

				entryNo = (String) searchFieldMap.get("entryNo");
				gridDefectiveDrugDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreDefectiveDrugT ");
				gridDefectiveDrugHeaderList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreDefectiveDrugM as pod where pod.EntryNo = '"
								+ entryNo + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridDefectiveDrugDetailList", gridDefectiveDrugDetailList);
		map.put("gridDefectiveDrugHeaderList", gridDefectiveDrugHeaderList);

		return map;
	}

	public Map<String, Object> defectiveDrugModifyMap(int entryId, int pageNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> gridDefectiveDrugMList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugT> gridDefectiveDrugTList = new ArrayList<StoreDefectiveDrugT>();
		int firstResult = 0;
		int maxResults = 10;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreDefectiveDrugT.class).add(
				Restrictions.eq("DefectM.Id", entryId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		gridDefectiveDrugTList = c.list();
		log.debug("gridDefectiveDrugTList  in DB"
				+ gridDefectiveDrugTList.size());

		gridDefectiveDrugMList = session
				.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("Id", entryId)).list();

		map.put("gridDefectiveDrugTList", gridDefectiveDrugTList);
		map.put("gridDefectiveDrugMList", gridDefectiveDrugMList);
		return map;
	}

	public List<StoreDefectiveDrugM> getDefectiveList() {
		Session session = (Session) getSession();
		List<StoreDefectiveDrugM> defectiveList = session
				.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("Status", "y")).list();
		return defectiveList;
	}

	public Map getDefectiveDrugModifyMap(int entryId, int pageNo) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> gridDefectiveDrugMList = new ArrayList<StoreDefectiveDrugM>();
		List<StoreDefectiveDrugT> gridDefectiveDrugTList = new ArrayList<StoreDefectiveDrugT>();
		List<StoreItemBatchStock> gridStoreItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		int firstResult = 0;
		int maxResults = 10;

		if (pageNo != 0) {
			firstResult = firstResult + (pageNo) * 10;
		}

		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreDefectiveDrugT.class).add(
				Restrictions.eq("DefectM.Id", entryId));
		c.setFirstResult(firstResult);
		c.setMaxResults(maxResults);
		gridDefectiveDrugTList = c.list();
		for (StoreDefectiveDrugT storeDefectiveDrugT : gridDefectiveDrugTList) {
			List<StoreItemBatchStock> storeItemBatchStocklist = session
					.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("BatchNo",
							storeDefectiveDrugT.getBatchNo()))
					.add(Restrictions.eq("Department.Id", storeDefectiveDrugT
							.getDefectM().getDepartment().getId()))
					.add(Restrictions.eq("Item.Id", storeDefectiveDrugT
							.getItem().getId())).list();
			gridStoreItemBatchStockList.add(storeItemBatchStocklist.get(0));

		}
		gridDefectiveDrugMList = session
				.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("Id", entryId)).list();
		log.debug("gridDefectiveDrugTList---" + gridDefectiveDrugTList.size());
		log.debug("gridDefectiveDrugMList---" + gridDefectiveDrugMList.size());
		map.put("gridDefectiveDrugTList", gridDefectiveDrugTList);
		map.put("gridDefectiveDrugMList", gridDefectiveDrugMList);
		map.put("gridStoreItemBatchStockList", gridStoreItemBatchStockList);
		return map;
	}

	public List<StoreDefectiveDrugM> getDefectDrug(int entryId) {
		Session session = (Session) getSession();
		List<StoreDefectiveDrugM> defectMList = session
				.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("Id", entryId)).list();
		return defectMList;
	}

	public boolean createAdjustment(Map<String, Object> infoMap) {
		StoreAdjustmentM storeAdjustmentM = (StoreAdjustmentM) infoMap
				.get("storeAdjustmentM");
		List<StoreAdjustmentT> storeAdjustmentTlist = (ArrayList<StoreAdjustmentT>) infoMap
				.get("storeAdjustmentTlist");
		List<StoreAdjustmentT> storePreviousAdjustmentTlist = (ArrayList<StoreAdjustmentT>) infoMap
				.get("storeAdjustmentTlist");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String entryNo = "";
		int deptId = 0;
		int hospitalId = 0;
		String userName = "";
		String max = "";
		String no = "";

		if (infoMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + infoMap.get("deptId"));
		}
		if (infoMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + infoMap.get("hospitalId"));
		}
		if (infoMap.get("userName") != null) {
			userName = ("" + infoMap.get("userName"));
		}
		StoreAdjustmentM storeAdjustmentM2 = new StoreAdjustmentM();

		// Session sess = factory.openSession();
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			entryNo = (String) infoMap.get("entryNo");
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreAdjustmentM> existingStoreAdjustmentMList = new ArrayList<StoreAdjustmentM>();
			List<StoreDefectiveDrugM> existingStoreDefectiveDrugMList = session
					.createCriteria(StoreDefectiveDrugM.class)
					.add(Restrictions.eq("EntryNo", entryNo)).list();
			if (existingStoreDefectiveDrugMList != null
					&& existingStoreDefectiveDrugMList.size() > 0) {
				existingStoreAdjustmentMList = session
						.createCriteria(StoreAdjustmentM.class)
						.add(Restrictions.eq("StoreDefectiveDrug.Id",
								existingStoreDefectiveDrugMList.get(0).getId()))
						.list();

			}

			if (existingStoreAdjustmentMList == null
					|| existingStoreAdjustmentMList.size() == 0) {

				int storeFyId = 0;

				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, storeFyId);
				if (storeFyDocumentNo.getAdjustmentNo() != null) {
					no = ("" + storeFyDocumentNo.getAdjustmentNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
				storeFyDocumentNo.setAdjustmentNo(no);
				hbt.update(storeFyDocumentNo);
				storeAdjustmentM.setAdjustmentNo(no);
				storeAdjustmentM.setStoreDefectiveDrug(new StoreDefectiveDrugM(
						existingStoreDefectiveDrugMList.get(0).getId()));
				hbt.save(storeAdjustmentM);

			}
			if (existingStoreAdjustmentMList != null
					&& existingStoreAdjustmentMList.size() > 0) {
				storePreviousAdjustmentTlist = session
						.createCriteria(StoreAdjustmentT.class)
						.createAlias("Adjust", "adj")
						.add(Restrictions.eq("adj.Id",
								existingStoreAdjustmentMList.get(0).getId()))
						.list();
			}
			if (storePreviousAdjustmentTlist != null
					&& storePreviousAdjustmentTlist.size() > 0) {
				for (StoreAdjustmentT storeAdjustmentT : storePreviousAdjustmentTlist) {
					List<StoreItemBatchStock> storeItemBatchStockList1 = new ArrayList<StoreItemBatchStock>();
					StoreItemBatchStock storeItemBatchStock1 = null;
					storeItemBatchStockList1 = hbt
							.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
									+ storeAdjustmentT.getItem().getId()
									+ " and inp.BatchNo ="
									+ storeAdjustmentT.getBatchNo()
									+ " and inp.Department.Id=" + deptId + " ");
					if (storeItemBatchStockList1 != null
							&& storeItemBatchStockList1.size() > 0) {
						storeItemBatchStock1 = storeItemBatchStockList1.get(0);
						BigDecimal existing_closing_stock = storeItemBatchStock1
								.getClosingStock();
						BigDecimal existing_adjust_stock = new BigDecimal(0);
						if (storeItemBatchStock1.getAdjustQty() != null) {
							existing_adjust_stock = storeItemBatchStock1
									.getAdjustQty();
						}

						BigDecimal adjust_qty = storeAdjustmentT.getAdjustQty();
						storeItemBatchStock1
								.setClosingStock(existing_closing_stock
										.add(adjust_qty));
						storeItemBatchStock1.setAdjustQty(existing_adjust_stock
								.subtract(adjust_qty));
						hbt.update(storeItemBatchStock1);

					}
				}
				hbt.deleteAll(storePreviousAdjustmentTlist);
			}
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeAdjustmentTlist.size() > 0) {
				if (existingStoreAdjustmentMList != null
						&& existingStoreAdjustmentMList.size() > 0) {
					int id = existingStoreAdjustmentMList.get(0).getId();

					storeAdjustmentM2.setId(id);
				}
				for (int i = 0; i < storeAdjustmentTlist.size(); i++) {
					StoreAdjustmentT storeAdjustmentTObj = new StoreAdjustmentT();
					storeAdjustmentTObj = (StoreAdjustmentT) storeAdjustmentTlist
							.get(i);
					if (existingStoreAdjustmentMList != null
							&& existingStoreAdjustmentMList.size() > 0) {
						storeAdjustmentTObj.setAdjust(storeAdjustmentM2);
					} else {
						storeAdjustmentTObj.setAdjust(storeAdjustmentM);
					}
					StoreItemBatchStock storeItemBatchStock4 = new StoreItemBatchStock();
					storeItemBatchStock4 = (StoreItemBatchStock) session.load(
							StoreItemBatchStock.class,
							Integer.parseInt(storeAdjustmentTObj.getBatchNo()));
					storeAdjustmentTObj.setBatchNo(storeItemBatchStock4
							.getBatchNo());
					hbt.save(storeAdjustmentTObj);

					int item_id = storeAdjustmentTObj.getItem().getId();
					// int brand_id = storeAdjustmentTObj.getBrand().getId();
					String batchNo = storeAdjustmentTObj.getBatchNo();

					storeItemBatchStockList = hbt
							.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
									+ item_id
									+ " and inp.BatchNo ="
									+ batchNo
									+ " and inp.Department.Id=" + deptId + " ");
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						BigDecimal existing_adjust_stock = new BigDecimal(0);
						int id = storeItemBatchStockList.get(0).getId();
						storeItemBatchStock = (StoreItemBatchStock) hbt.load(
								StoreItemBatchStock.class, id);
						BigDecimal existing_closing_stock = storeItemBatchStock
								.getClosingStock();
						if (storeItemBatchStock.getAdjustQty() != null) {
							existing_adjust_stock = storeItemBatchStock
									.getAdjustQty();
						}

						BigDecimal adjust_qty = storeAdjustmentTObj
								.getAdjustQty();
						storeItemBatchStock
								.setClosingStock(existing_closing_stock
										.subtract(adjust_qty));
						storeItemBatchStock.setAdjustQty(existing_adjust_stock
								.add(adjust_qty));
						hbt.update(storeItemBatchStock);
					}

				}
			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */

		return successfullyAdded;

	}

	public Map getResponseIndentList(Box box) {
		Map map = new HashMap();
		List<StoreIndentM> indentList = new ArrayList<StoreIndentM>();
		// Commneted By Mukesh on 22 Nov 2010
		// List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		List<Object> poList = new ArrayList<Object>();
		Session session = (Session) getSession();
		try {
			map.put("choice", box.getString(SOURCE_OF_SUPPLY));
			if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("P")) {
				indentList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreIndentM as md where md.IndentType !='d' and md.Status ='o' and md.Department.Id = "
								+ box.getInt("deptId")
								+ " and md.Hospital.Id = "
								+ box.getInt("hospitalId"));
				map.put("second_combo", indentList);
			} else if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("A")
					|| box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("I")
					|| box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("X")) {
				indentList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreIndentM as md where  md.Status='o' and md.IndentType='d' and md.SuppliedBy.Id = "
								+ box.getInt(SUPPLIER_ID)
								+ " and md.Department.Id = "
								+ box.getInt("deptId")
								+ " and md.Hospital.Id = "
								+ box.getInt("hospitalId"));

				map.put("second_combo", indentList);
			}
			if (box.getString(SOURCE_OF_SUPPLY).equalsIgnoreCase("L")) {
				/*
				 * poList = getHibernateTemplate() .find(
				 * "from jkt.hms.masters.business.StorePoHeader as mi where mi.Supplier.Id = "
				 * + box.getInt(SUPPLIER_ID) + " and mi.Department.Id = " +
				 * box.getInt("deptId") +
				 * " and mi.Status = 'o' and mi.StoreGrnM.Id is null ");
				 */

				// -------------changes bya anamika----------
				String qry = "SELECT store_po_header.po_id, store_po_header.po_number "
						+ "FROM store_po_detail, store_po_header "
						+ "Where quantity_ordered - coalesce(quantity_received,0) > 0 "
						+ "and store_po_header.po_id = store_po_detail.po_id "
						+ "and store_po_header.department_id = "
						+ box.getInt("deptId")
						+ " and store_po_header.supplier_id = "
						+ box.getInt(SUPPLIER_ID)
						+ " and store_po_header.hospital_id = "
						+ box.getInt("hospitalId")
						+ " and store_po_header.grn_master_id is null"
						+ " group by store_po_header.po_number,store_po_header.po_id";
				poList = (List) session.createSQLQuery(qry).list();

				// for(StorePoHeader storePoHeader:poList){
				// log.debug("
				// StorePoHeader-Id-"+storePoHeader.getId()+"StorePoHeader
				// getPoNumber--"+storePoHeader.getPoNumber());
				// }

				map.put("second_combo", poList);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */
		return map;
	}

	public Map getResponsePoList(Box box) {
		Map map = new HashMap();
		List<StorePoHeader> poList = new ArrayList<StorePoHeader>();
		poList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StorePoHeader as mi where  mi.Supplier.Id = "
						+ box.getInt(SUPPLIER_ID) + " and mi.Department.Id = "
						+ box.getInt("deptId")
						+ " and mi.StoreGrnM.Id is null ");
		map.put("second_combo", poList);

		return map;
	}

	public Map<String, Object> defectiveDrugModifyMap(int id) {
		return null;
	}

	// =========================================================================================================================
	// ====================END OF ABHA -------- GRN,LOANIN,BOOENTRY, DEFECTIVE
	// DRUGS ========================================
	// ========================================================================================================

	// *********************************************************************************************************************
	// ------------------------------------Start of Methods Written By
	// Vivek------------------------------------------
	// ****************************************************************************************************************

	// ------Indent To SOC--------------------------------------
	public Map<String, Object> getItemListForIndentToSOC(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			String qry1 = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where t.indent_id='"
					+ indentId + "' and m.indent_id=t.indent_id";
			objectList = (List) session.createSQLQuery(qry1).list();
			if (objectList.size() != 0) {
				Criteria c = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId));
				// .add(Restrictions.eq("Department.Id", storeDepartmentId));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.debug("itemList        ========================== "
				+ itemList.size());
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsCommon(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();

		session = (Session) getSession();
		String pvmsNo = null;
		int item_id = 0;
		List objectList = new ArrayList();
		List stockList = new ArrayList();
		BigDecimal quantityInHand = new BigDecimal(0);
		BigDecimal mrp = new BigDecimal(0);
		try {
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo));
			itemList = c.list();

			int itemId = 0;

			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();
			}
			if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
			}
			int manufacturer_id = 0;
			for (MasStoreBrand brand : brandList) {
				manufacturer_id = brand.getManufacturer().getId();
			}
			if (manufacturer_id != 0) {
				Criteria c3 = session.createCriteria(MasManufacturer.class)
						.add(Restrictions.eq("Id", manufacturer_id));
				manufacturerList = c3.list();
			}
			// To get Quantity in Hand
			if (dataMap.get("type") != null) {
				if (dataMap.get("type").toString().equalsIgnoreCase("purchase")
						&& itemList != null && itemList.size() > 0) {
					// int itemId = itemList.get(0).getId();
					int deptId = Integer.parseInt("" + dataMap.get("deptId"));

					String qry = "SELECT sum(closing_stock) FROM store_item_batch_stock where item_id='"
							+ itemId + "' and department_id='" + deptId + "';";

					objectList = (List) session.createSQLQuery(qry).list();

					if (objectList.get(0) != null) {
						quantityInHand = new BigDecimal("" + objectList.get(0));
					} else {
						quantityInHand = new BigDecimal("0");
					}

					map.put("quantityInHand", quantityInHand);
					String qry1 = "select mrp from store_item_batch_stock s where  s.mrp is not null and  s.item_id='"
							+ itemId
							+ "' and s.department_id='"
							+ deptId
							+ "';";
					stockList = session.createSQLQuery(qry1).list();
					if (stockList != null && stockList.size() > 0) {
						mrp = new BigDecimal("" + stockList.get(0));
					} else {
						mrp = new BigDecimal("0");
					}
				}
			}
			map.put("mrp", mrp);
			List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
			Criteria c3 = null;
			c3 = session.createCriteria(StoreGrnT.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.addOrder(Order.desc("Id"));
			storeGrnTList = c3.list();
			map.put("storeGrnTList", storeGrnTList);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		return map;

	}

	public Map<String, Object> fillItemsForIndentToSOC(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();

		List objectList = new ArrayList();
		int deptId = 0;
		BigDecimal stockIn = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		try {
			String str = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();

			}

			/*if (itemId != 0) {
				Criteria c2 = session.createCriteria(MasStoreBrand.class).add(
						Restrictions.eq("Item.Id", itemId));
				brandList = c2.list();
			}
			int manufacturer_id = 0;
			for (MasStoreBrand brand : brandList) {

				manufacturer_id = brand.getManufacturer().getId();
			}

			if (manufacturer_id != 0) {
				Criteria c3 = session.createCriteria(MasManufacturer.class)
						.add(Restrictions.eq("Id", manufacturer_id));
				manufacturerList = c3.list();
			}*/
			String qry = "SELECT sum(closing_stock) FROM store_item_batch_stock where item_id='"
					+ itemId + "' and department_id='" + deptId + "';";
			objectList = (List) session.createSQLQuery(qry).list();

			if (objectList.get(0) != null) {
				stockIn = new BigDecimal("" + objectList.get(0));
			} else {
				stockIn = new BigDecimal("0");
			}
			map.put("brandList", brandList);
			map.put("manufacturerList", manufacturerList);
			map.put("itemList", itemList);
			map.put("stockIn", stockIn);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map getBrandListForSOC(int itemId, int detailId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<MasManufacturer> masManufacturerList = new ArrayList<MasManufacturer>();
		masStoreBrandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as md where md.Item.Id = '"
						+ itemId + "' ");
		;
		masManufacturerList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasManufacturer  ");
		;
		storeIndentTList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentT as sit where sit.Id='"
						+ detailId + "'  ");
		;
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("masManufacturerList", masManufacturerList);
		map.put("storeIndentTList", storeIndentTList);
		return map;
	}

	public Map getBrandListForSOC(int itemId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> masManufacturerList = new ArrayList<MasManufacturer>();
		masStoreBrandList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreBrand as md where md.Item.Id = '"
						+ itemId + "' ");
		;
		masManufacturerList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasManufacturer  ");
		;
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("masManufacturerList", masManufacturerList);
		return map;
	}

	public Map<String, Object> showIndentJspSOC(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		Session session = (Session) getSession();
		String no = "";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			itemList = (List<MasStoreItem>) hbt
					.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
			departmentList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as md where md.Status='y'");
			storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "'");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType= 's'");
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToSocNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToSocNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("supplierList", supplierList);
		map.put("itemList", itemList);
		map.put("maxIndentNo", no);
		map.put("departmentList", departmentList);
		map.put("searchIndentList", searchIndentList);
		return map;
	}

	public Map<String, Object> addNextOrSubmitIndentToSOC(
			Map<String, Object> dataMap) {

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		int storeFyId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxIndentNo = "";
		StoreIndentM storeIndentM = new StoreIndentM();
		List<StoreIndentM> storeIndentMlist = new ArrayList<StoreIndentM>();
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>();

		// For Show Jsp
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int indentId = 0;
		String indentNo = "";
		if (dataMap.get("storeIndentM") != null) {
			storeIndentM = (StoreIndentM) dataMap.get("storeIndentM");
		}
		if (dataMap.get("indentNo") != null) {
			indentNo = "" + dataMap.get("indentNo");
		}

		if (dataMap.get("storeIndentTlist") != null) {
			storeIndentTlist = (List<StoreIndentT>) dataMap
					.get("storeIndentTlist");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + dataMap.get("indentId"));
		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			if (pageNo == 1) {
				hbt.save(storeIndentM);
				storeIndentMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentM as md where md.IndentNo = '"
								+ indentNo + "'");
				for (StoreIndentM storeIndentM2 : storeIndentMlist) {
					indentId = storeIndentM2.getId();
				}
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIndentToSocNo(indentNo);
				hbt.update(storeFyDocumentNo);
			}

			if (storeIndentTlist.size() > 0) {
				if (pageNo != 1) {
					storeIndentM.setId(indentId);
				}
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					storeIndentTObj.setIndent(storeIndentM);
					hbt.save(storeIndentTObj);
				}

			}
			successfullyAdded = "yes";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
					+ year + "' )c on mas.item_id=c.item_id;";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}

			e.printStackTrace();
		} /*
		 * finally { // session.close(); }
		 */

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		String no = "";

		try {
			itemList = (List<MasStoreItem>) hbt
					.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
			departmentList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as md where md.Status='y'");
			storeFyDocumentNoList = (List) getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo ");

		} catch (Exception e) {

		}

		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("indentId", indentId);

		map.put("itemList", itemList);
		map.put("maxIndentNo", no);
		map.put("departmentList", departmentList);

		return map;

	}

	public Map<String, Object> getIndentModifyMapForSOC(int indentId, int pageNo) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		List<Object> objectList = new ArrayList<Object>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId));
			gridIndentTList = c.list();

			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
							+ indentId + "' and md.Status='o'");
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = (List<MasStoreItem>) hbt
					.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
			brandList = (List<MasStoreBrand>) hbt
					.find("from jkt.hms.masters.business.MasStoreBrand as mis where mis.Status='y' ");
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as md where md.Status = 'y'");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");
			departmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment ");
		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("itemList", itemList);
		map.put("departmentList", departmentList);
		map.put("supplierList", supplierList);
		map.put("brandList", brandList);

		return map;
	}

	public boolean updateNextIndentToSOC(Map<String, Object> masterAndDetailMap) {

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		StoreIndentM storeIndentM2 = new StoreIndentM();
		StoreIndentM storeIndentM3 = new StoreIndentM();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		int indentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction tx = null;
		Session session = (Session) getSession();
		try {
			tx = session.beginTransaction();
			if (masterAndDetailMap.get("storeIndentM") != null) {
				storeIndentM3 = (StoreIndentM) masterAndDetailMap
						.get("storeIndentM");
			}
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("indentId") != null) {
				indentId = Integer.parseInt(""
						+ masterAndDetailMap.get("indentId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) masterAndDetailMap
						.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForUpdate
								.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.update(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) masterAndDetailMap
						.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForAdd
								.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.save(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		} /*
		 * finally { session.close(); }
		 */
		return successfullyAdded;

	}

	public Map<String, Object> getManufacturerNameInAjax(
			Map<String, Object> dataMap) {
		int deptId = 0;
		int brandId = 0;
		String manufacturerName = "";
		List objectList = new ArrayList();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int mId = 1;
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("brandId") != null) {
				brandId = Integer.parseInt("" + dataMap.get("brandId"));
			}
			String qry = "SELECT manu.manufacturer_id,manu.manufacturer_name FROM mas_store_brand brand,mas_manufacturer manu where brand.brand_id='"
					+ brandId
					+ "' and brand.manufacturer_id=manu.manufacturer_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			if (objectList.get(0) != null) {
				manufacturerName = ("" + objectList.get(0));
			}
			for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				mId = (Integer) object[0];
				manufacturerName = "" + object[1];
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("manufacturerName", manufacturerName);
		map.put("mId", mId);
		return map;
	}

	// ------End ofIndent To SOC-------------------------------

	// ------Indent To Depot-----------------------------------

	public Map<String, Object> getItemListForIndentToDepot(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			String qry1 = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where t.indent_id='"
					+ indentId + "' and m.indent_id=t.indent_id";
			objectList = (List) session.createSQLQuery(qry1).list();
			if (objectList.size() != 0) {
				Criteria c = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIndentToDepot(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = null;
		int deptId = 0;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no, mas.department_id,con.item_unit_name,sec.section_code from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id=con.item_conversion_id inner join mas_store_section sec on  mas.section_id=sec.section_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id='"
					+ deptId
					+ "' group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
					+ year
					+ "' )c on mas.item_id=c.item_id where mas.pvms_no='"
					+ pvmsNo + "';";
			objectList = (List) session.createSQLQuery(qry).list();
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo));
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public boolean updateNextIndentToDepot(
			Map<String, Object> masterAndDetailMap) {
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		StoreIndentM storeIndentM2 = new StoreIndentM();
		StoreIndentM storeIndentM3 = new StoreIndentM();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		int indentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			if (masterAndDetailMap.get("storeIndentM") != null) {
				storeIndentM3 = (StoreIndentM) masterAndDetailMap
						.get("storeIndentM");
			}
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("indentId") != null) {
				indentId = Integer.parseInt(""
						+ masterAndDetailMap.get("indentId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) masterAndDetailMap
						.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForUpdate
								.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.update(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) masterAndDetailMap
						.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForAdd
								.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.save(storeIndentT);
					}
				}
				successfullyAdded = true;
				// --------------Transaction Ended----------
				tx.commit();

			}
		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null) {
				tx.rollback();
			}

			e.printStackTrace();

		}

		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public Map getIndentModifyMapForDepot(int indentId, int pageNo) {

		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
							+ indentId + "' and md.Status='o'");
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
					+ year + "' )c on mas.item_id=c.item_id;";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");
			masStoreAirForceDepotList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");

			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null) {
				tx.rollback();
			}

			e.printStackTrace();

		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> addNextOrSubmitIndentToDepot(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxIndentNo = "";
		StoreIndentM storeIndentM = new StoreIndentM();
		List<StoreIndentM> storeIndentMlist = new ArrayList<StoreIndentM>();
		List<StoreIndentT> storeIndentTlist = new ArrayList<StoreIndentT>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		// For Show Jsp
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreSupplier> masStoreSupplierList = new ArrayList<MasStoreSupplier>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int indentId = 0;
		int storeFyId = 0;
		String indentNo = "";
		if (dataMap.get("storeIndentM") != null) {
			storeIndentM = (StoreIndentM) dataMap.get("storeIndentM");
		}
		if (dataMap.get("indentNo") != null) {
			indentNo = "" + dataMap.get("indentNo");
		}

		if (dataMap.get("storeIndentTlist") != null) {
			storeIndentTlist = (List<StoreIndentT>) dataMap
					.get("storeIndentTlist");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("indentId") != null) {
			indentId = Integer.parseInt("" + dataMap.get("indentId"));
		}
		// Session sess = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (pageNo == 1) {
				hbt.save(storeIndentM);
				indentId = storeIndentM.getId();
				/*
				 * storeIndentMlist=getHibernateTemplate().find("from
				 * jkt.hms.masters.business.StoreIndentM as md where md.IndentNo
				 * = '"+indentNo+"'"); for(StoreIndentM
				 * storeIndentM2:storeIndentMlist){
				 * indentId=storeIndentM2.getId(); }
				 */
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}

				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIndentToDepotNo(indentNo);

				hbt.update(storeFyDocumentNo);
			}

			if (storeIndentTlist.size() > 0) {
				if (pageNo != 1) {
					storeIndentM.setId(indentId);
				}
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					storeIndentTObj.setIndent(storeIndentM);
					hbt.save(storeIndentTObj);
				}

			}
			successfullyAdded = "yes";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id='"
					+ deptId
					+ "' group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
					+ year + "' )c on mas.item_id=c.item_id";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreSupplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as md order by md.SupplierName");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y'");
			sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");
			masStoreAirForceDepotList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}

			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		map.put("masStoreSupplierList", masStoreSupplierList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("indentId", indentId);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);

		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showIndentJspDepot(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int grnStartNo = 0;
		String no = "";
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.qty_in_mmf,mas.old_niv_no,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.qty_in_mmf, it.item_id from  store_indent_m im inner join store_indent_t it on im.indent_id=it.indent_id where im.mmf_for_the_year='"
					+ year + "' )c on mas.item_id=c.item_id;";
			objectList = (List) session.createSQLQuery(qry).list();
			masStoreAirForceDepotList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreAirForceDepot as md where md.Status = 'y'");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o'and  md.Department.Id='"
							+ deptId + "' and md.IndentType='d' ");
			sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");
			storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "'");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIndentToDepotNo() != null) {
					no = ("" + storeFyDocumentNo.getIndentToDepotNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("maxIndentNo", no);
		map.put("objectList", objectList);
		return map;

	}

	// ------End of Indent To Depot--------
	// --------------------------------------INDENT---------
	public Map printMmfIndent(int indentId) {

		Map map = new HashMap();
		Session session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		String indentType = "";

		Connection con = session.connection();
		try {
			map.put("conn", con);
			indentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
							+ indentId + "'");
			for (StoreIndentM indentM : indentMList) {

				map.put("indentor", "" + "CHAF,Bangalore");
				map.put("projectionTo", "DGAFMS");
				map.put("mmfYear", "" + indentM.getMmfForTheYear());
				map.put("Hosp_Name", ""
						+ indentM.getHospital().getHospitalName());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getItemListForMMFIndentModify(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		int mmfForTheYear = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		mmfForTheYear = Integer.parseInt("" + dataMap.get("mmfForTheYear"));
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			String qry = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where m.mmf_for_the_year='"
					+ mmfForTheYear
					+ "' and m.imported ='y' and m.indent_type='p'; ";
			objectList = (List) session.createSQLQuery(qry).list();
			if (objectList.size() != 0) {

				Criteria c = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> getItemListForMMFIndent(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		int mmfForTheYear = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		mmfForTheYear = Integer.parseInt("" + dataMap.get("mmfForTheYear"));
		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		try {

			String str = (String) dataMap.get("autoHint") + "%";
			String qry1 = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where m.mmf_for_the_year='"
					+ mmfForTheYear
					+ "' and m.imported ='y' and m.indent_type='p';";
			objectList1 = (List) session.createSQLQuery(qry1).list();
			if (objectList1.size() == 0) {
				String qry = "SELECT t.item_id FROM store_indent_t t,store_indent_m m where m.mmf_for_the_year='"
						+ mmfForTheYear + "'  and m.indent_type='p'; ";
				objectList = (List) session.createSQLQuery(qry).list();
				if ((objectList.size() != 0) && (mmfForTheYear != 0)) {
					Criteria c = session
							.createCriteria(MasStoreItem.class)
							.add(Restrictions.like("Nomenclature", str))
							.add(Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.not(Restrictions.in("Id",
									objectList)));
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
				} else {
					Criteria c = session.createCriteria(MasStoreItem.class)
							.add(Restrictions.like("Nomenclature", str))
							.add(Restrictions.eq("Department.Id", deptId));

					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();

				}
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> checkYearExists(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String thisYearValue = "n";
		String nextYearValue = "n";
		int mmfForTheYear = 0;
		int deptId = 0;
		String no = "";
		if (dataMap.get("mmfForTheYear") != null) {
			mmfForTheYear = Integer.parseInt("" + dataMap.get("mmfForTheYear"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = (Integer) dataMap.get("deptId");
		}
		String messageType = "";
		if (mmfForTheYear != 0) {
			storeIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sim where sim.MmfForTheYear='"
							+ mmfForTheYear + "'   and sim.IndentType='p'");
		}
		String messageTOBeVisibleToTheUser = "";
		searchIndentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
		if (storeIndentMList.size() == 0) {

		} else {
			messageTOBeVisibleToTheUser = "For " + mmfForTheYear
					+ " year Records already added.Go for Search to add more ";
			messageType = "failure";
			thisYearValue = "y";
			nextYearValue = "y";
		}
		storeFyDocumentNoList = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreFyDocumentNo ");
		for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
			if (storeFyDocumentNo.getDepartment().getId() == deptId) {
				no = ("" + storeFyDocumentNo.getMmfIndentNo());
				no = getMaxNo(no);
			}
		}
		map.put("maxIndentNo", no);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("messageType", messageType);
		map.put("searchIndentList", searchIndentList);
		map.put("nextYearValue", nextYearValue);
		map.put("thisYearValue", thisYearValue);
		return map;
	}

	public Map<String, Object> lockMMFIndent(int year) {
		String messageTOBeVisibleToTheUser = "Record Not Locked";
		Map<String, Object> map = new HashMap<String, Object>();
		String messageType = "failure";
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		int indentId = 0;
		try {
			storeIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sim where sim.MmfForTheYear='"
							+ year
							+ "'   and sim.Status='o' and sim.IndentType='p'");

			for (StoreIndentM storeIndentM : storeIndentMList) {
				indentId = Integer.parseInt("" + storeIndentM.getId());
			}
			if (indentId != 0) {
				StoreIndentM storeIndentM1 = (StoreIndentM) getHibernateTemplate()
						.load(StoreIndentM.class, indentId);
				storeIndentM1.setStatus("p");
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.update(storeIndentM1);
				messageType = "success";
				messageTOBeVisibleToTheUser = "Record  Locked";
			} else {
				messageType = "failure";
				messageTOBeVisibleToTheUser = "No Records found ";
			}

			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");

		} catch (Exception e) {
			e.printStackTrace();
			messageType = "failure";
			messageTOBeVisibleToTheUser = "Record Not Locked";
		}
		map.put("searchIndentList", searchIndentList);
		map.put("messageType", messageType);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return map;
	}

	public Map<String, Object> showLockMMFIndent() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		try {
			storeIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as sim where sim.IndentType='p'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeIndentMList", storeIndentMList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> importMMFIndent(Map<String, Object> dataMap)
			throws java.text.ParseException {
		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> storeIndentMTempList = new ArrayList<StoreIndentM>();
		@SuppressWarnings("unused")
		StoreIndentM storeIndentM = new StoreIndentM();
		@SuppressWarnings("unused")
		Map<String, Object> map = new HashMap<String, Object>();
		@SuppressWarnings("unused")
		String flag = "no";
		int indentId = 0;
		int pageNo = 1;
		String messageTOBeVisibleToTheUser = "";
		String messageType = "failure";
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String no = "";
		String date = "";
		String time = "";
		String userName = "";
		Date indentDate = null;
		Session session = (Session) getSession();
		Transaction tx = null;
		int year = 0;
		int departmentId = 0;
		int hospitalId = 0;
		int userId = 0;
		if (dataMap.get("deptId") != null) {
			departmentId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userId") != null) {
			userId = Integer.parseInt("" + dataMap.get("userId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("year") != null) {
			year = Integer.parseInt("" + dataMap.get("year"));
		}
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		String thisYearValue = "n";
		String nextYearValue = "n";

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			date = (String) utilMap.get("currentDate");
			time = (String) utilMap.get("currentTime");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			Date lastChgDate = java.sql.Date.valueOf(date4MySQL);
			// Checking for existence of Indent
			storeIndentMTempList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear='"
							+ year
							+ "' and md.Imported='y' and md.IndentType='p' ");
			if (storeIndentMTempList.size() > 0) {
				messageTOBeVisibleToTheUser = "Already Imported";
				thisYearValue = "y";
				nextYearValue = "y";
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				map.put("messageType", messageType);
				map.put("thisYearValue", thisYearValue);
				map.put("nextYearValue", nextYearValue);
				return map;
			}
			// Fetching records from MMF Department
			String qry = "SELECT sum(t.mmf_in_qty),t.item_id,m.id from store_mmf_department_m as m,store_mmf_department_t as t where m.id=t.store_mmf_department_m_id and m.mmf_for_the_year='"
					+ year + "' and m.status='o' group by t.Item_Id;";
			List c = (List) session.createSQLQuery(qry).list();
			if (c.size() == 0) {
				messageTOBeVisibleToTheUser = "No records in MMF Departmet";
				map.put("messageType", messageType);
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				map.put("thisYearValue", thisYearValue);
				map.put("nextYearValue", nextYearValue);
				return map;
			}
			// Getting indentId if records are already entered
			storeIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear='"
							+ year
							+ "' and md.Imported='n' and md.IndentType='p' and md.Status='o'");
			for (StoreIndentM storeIndentM2 : storeIndentMList) {
				indentId = storeIndentM2.getId();
				map.put("indentId", indentId);
			}
			int srNo = 1;
			int mmfDeptId = 0;
			// Importing records from MMF Department
			StoreIndentM storeIndentM2 = new StoreIndentM();
			if (indentId == 0) {
				storeIndentM2.setMmfForTheYear(year);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeIndentM2.setHospital(masHospital);

				MasDepartment department = new MasDepartment();
				department.setId(departmentId);
				storeIndentM2.setDepartment(department);

				storeIndentM2.setSection(null);
				storeIndentM2.setItemReqDept(department);
				storeIndentM2.setSuppliedBy(null);
				storeIndentM2.setRequiredForm("Commandant,CHAFB");

				SimpleDateFormat formatterIn1 = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut2 = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(date));
				storeIndentM2.setIndentDate(java.sql.Date.valueOf(date4MySQL));
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM2.setStatus("o");
				storeIndentM2.setIndentType("p");
				storeIndentM2.setLastChgDate(java.sql.Date.valueOf(date4MySQL));
				storeIndentM2.setLastChgTime(time);

				no = "01/" + year;
				storeIndentM2.setIndentNo(no);
				storeIndentM2.setImported("y");
				/*
				 * MasDepartment department2=new MasDepartment();
				 * department2.setId(1);
				 * storeIndentM2.setDepartment(department); MasDepartment
				 * department3=new MasDepartment(); department3.setId(1);
				 * storeIndentM2.setDepartment(department3);
				 */
				hbt.save(storeIndentM2);
				hbt.refresh(storeIndentM2);

				for (Iterator iterator = c.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					BigDecimal i0 = (BigDecimal) object[0];
					Integer i1 = (Integer) object[1];
					Integer i2 = (Integer) object[2];
					mmfDeptId = i2;
					StoreIndentT storeIndentT = new StoreIndentT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(i1);
					storeIndentT.setItem(masStoreItem);
					BigDecimal bigDecimal = new BigDecimal("" + i0);
					storeIndentT.setQtyInMmf(bigDecimal);
					storeIndentT.setSerialNo(srNo);

					storeIndentT.setIndent(storeIndentM2);

					storeIndentT.setSection(null);

					hbt.save(storeIndentT);
					srNo++;
				}

			} else {
				storeIndentM2.setId(indentId);
				for (Iterator iterator = c.iterator(); iterator.hasNext();) {
					Object[] object = (Object[]) iterator.next();
					BigDecimal i0 = (BigDecimal) object[0];
					Integer i1 = (Integer) object[1];
					Integer i2 = (Integer) object[2];
					mmfDeptId = i2;
					StoreIndentT storeIndentT = new StoreIndentT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(i1);
					storeIndentT.setItem(masStoreItem);
					BigDecimal bigDecimal = new BigDecimal("" + i0);
					storeIndentT.setQtyInMmf(bigDecimal);
					storeIndentT.setSerialNo(srNo);

					storeIndentT.setIndent(storeIndentM2);

					storeIndentT.setSection(null);

					hbt.save(storeIndentT);
					srNo++;
				}
			}

			String qry1 = "SELECT m.id from store_mmf_department_m as m where  m.mmf_for_the_year=2008 and m.status='o';";
			List deptList = (List) session.createSQLQuery(qry1).list();

			for (int i = 0; i < deptList.size(); i++) {
				mmfDeptId = Integer.parseInt("" + deptList.get(i));

				StoreMmfDepartmentM mmfDepartmentM = (StoreMmfDepartmentM) getHibernateTemplate()
						.load(StoreMmfDepartmentM.class, mmfDeptId);
				mmfDepartmentM.setStatus("p");
				hbt.update(mmfDepartmentM);
			}
			List<StoreIndentM> list2 = new ArrayList<StoreIndentM>();
			list2 = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.IndentNo='"
							+ no + "' ");
			for (StoreIndentM storeIndentM3 : list2) {
				indentId = storeIndentM3.getId();
				map.put("indentId", indentId);
			}

			StoreIndentM storeIndentM1 = (StoreIndentM) getHibernateTemplate()
					.load(StoreIndentM.class, indentId);
			storeIndentM1.setImported("y");
			hbt.update(storeIndentM1);
			messageType = "success";
			map.put("messageType", messageType);
			messageTOBeVisibleToTheUser = "Records are Imported Successfull.If you want to Modify Go for Search";
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
			// --------------Transaction Ended----------
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			// --------------In case of Transaction Failure----------
			if (tx != null) {
				tx.rollback();
			}

			map.put("messageType", messageType);
			messageTOBeVisibleToTheUser = "Records are not Imported ";
		}
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("searchIndentList", searchIndentList);
		map.put("thisYearValue", thisYearValue);
		map.put("nextYearValue", nextYearValue);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showImportMMFIndentJsp(
			Map<String, Object> dataMap) {
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Map<String, Object> map = new HashMap<String, Object>();
		int departmentId = 0;
		if (dataMap.get("departmentId") != null) {
			departmentId = Integer.parseInt("" + dataMap.get("departmentId"));
		}
		try {
			Session session = (Session) getSession();
			String qry = "SELECT DISTINCT mmf_for_the_year  from store_mmf_department_m where status='o';";
			List list = (List) session.createSQLQuery(qry).list();
			map.put("list", list);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map getIndentDepotPrintMap(int indentId) {
		Map map = new HashMap();
		Session session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		String indentType = "";

		Connection con = session.connection();
		try {
			map.put("conn", con);
			indentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
							+ indentId + "'");
			for (StoreIndentM indentM : indentMList) {
				map.put("indentNo", "" + indentM.getIndentNo());
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"dd/MM/yyyy");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ indentM.getIndentDate()));
				map.put("indentDate", "" + date4MySQL);
				map.put("indentor", "Commandant,CHAFB");
				map.put("nrs", "" + indentM.getNrs());
				map.put("address", "" + indentM.getPatientDetails());
				map.put("authority", "" + indentM.getAuthority());
				map.put("supplyDepot", ""
						+ indentM.getSuppliedBy().getAirForceDepotName());
				map.put("indentId", "" + indentM.getId());
				if (indentM.getIndentOption().equals("1")) {
					indentType = "Emergent";
				} else if (indentM.getIndentOption().equals("2")) {
					indentType = "Monthly";
				} else if (indentM.getIndentOption().equals("3")) {
					indentType = "Bi-Monthly";
				} else if (indentM.getIndentOption().equals("4")) {
					indentType = "Four Monthly";
				}

				map.put("typeOfIndet", indentType);
				map.put("Hosp_Name", indentM.getHospital().getHospitalName());
				map.put("section", indentM.getSection().getSectionName());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map showPrintIndentDepotJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		Map map = new HashMap();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		indentMList = (List<StoreIndentM>) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as sim where sim.Hospital.Id='"
						+ hospitalId + "' and sim.Department.Id='" + deptId
						+ "'");
		map.put("indentMList", indentMList);
		return map;
	}

	@SuppressWarnings({ "unchecked", "deprecation", "unchecked" })
	public Map<String, Object> getIndentSocPrintMap(int indentId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			indentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
							+ indentId + "'");
			for (StoreIndentM indentM : indentMList) {
				map.put("indentNo", "" + indentM.getIndentNo());
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"dd/MM/yyyy");
				@SuppressWarnings("unused")
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ indentM.getIndentDate()));
				map.put("detailOfPatient", "" + indentM.getPatientDetails());
				map.put("justification", "" + indentM.getJustificationNiv());
				map.put("specificJustification",
						"" + indentM.getPacJustification());
				map.put("dateOfReceive", "" + indentM.getEncodedDate());
				map.put("unitName", "DGFMSHQ");
				map.put("indentId", indentM.getId());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map getIndentModifyMap(int indentId, int pageNo) {

		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}

		try {
			Session session = (Session) getSession();
			Criteria c = session.createCriteria(StoreIndentT.class).add(
					Restrictions.eq("Indent.Id", indentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			itemList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y' and mi.Id<100");
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md where md.Id = '"
							+ indentId + "' and md.Status='o'");
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
			for (StoreIndentM storeIndentM : gridIndentMList) {
				id = storeIndentM.getMmfForTheYear();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("indentId", indentId);
		map.put("mmfForTheYear", id);
		map.put("itemList", itemList);
		map.put("searchIndentList", searchIndentList);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> checkExistenceOfCuurentYearIndent(int year) {
		Map<String, Object> indentMap = new HashMap<String, Object>();
		List<StoreIndentM> tempIndentList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchPanelIndentList = new ArrayList<StoreIndentM>();
		List<StoreIndentM> searchIndentListForNextYear = new ArrayList<StoreIndentM>();
		boolean masterRecordExist = false;
		int noOfRecordsAlreadyStored = 0;
		@SuppressWarnings("unused")
		int MaxSrNo = 0;
		int indentId = 0;
		int noOfRecordsAlreadyStoredNextYear = 0;
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		tempIndentList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear = '"
						+ year + "' and md.IndentType='p'");
		int nextYear = year + 1;
		searchIndentListForNextYear = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as md where md.MmfForTheYear = '"
						+ nextYear + "' and md.IndentType='p'");
		if (searchIndentListForNextYear.size() > 0) {
			noOfRecordsAlreadyStoredNextYear = searchIndentListForNextYear
					.size();
		}
		if (tempIndentList.size() > 0) {
			masterRecordExist = true;
			for (StoreIndentM storeIndentM : tempIndentList) {
				indentId = Integer.parseInt("" + storeIndentM.getId());
			}
			gridIndentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as md where md.Indent.Id = '"
							+ indentId + "' ");
			if (gridIndentTList.size() > 0) {
				noOfRecordsAlreadyStored = gridIndentTList.size();
			}

		}
		searchPanelIndentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'y' and  md.IndentType='p'");
		indentMap.put("masterRecordExist", masterRecordExist);
		indentMap.put("noOfRecordsAlreadyStored", noOfRecordsAlreadyStored);
		indentMap.put("noOfRecordsAlreadyStoredNextYear",
				noOfRecordsAlreadyStoredNextYear);
		indentMap.put("indentId", indentId);
		indentMap.put("searchPanelIndentList", searchPanelIndentList);
		return indentMap;
	}

	@SuppressWarnings("unchecked")
	public Map showIndent(int deptId) {

		// session = (Session)getSession();
		// Transaction tx = null;
		// try{
		// //--------------Transaction Started----------
		// tx= session.beginTransaction();
		// //--------------Transaction Ended----------
		// tx.commit();
		// }catch (Exception e) {
		// //--------------In case of Transaction Failure----------
		// if (tx != null) tx.rollback();
		// e.printStackTrace();
		// }
		// finally{
		// //--------Session Closing----------
		// session.close();
		// }
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreIndentM> searchIndentList = new ArrayList<StoreIndentM>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int grnStartNo = 0;
		String no = "";

		try {
			searchIndentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as md where md.Status = 'o' and md.IndentType='p'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		itemList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y' and mi.Id<100");
		try {
			sectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection ");
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			storeFyDocumentNoList = (List) getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getDepartment().getId() == deptId) {
					no = ("" + storeFyDocumentNo.getMmfIndentNo());
					no = getMaxNo(no);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchIndentList", searchIndentList);
		map.put("sectionList", sectionList);
		map.put("itemList", itemList);
		map.put("maxIndentNo", no);
		return map;
	}

	@SuppressWarnings("unchecked")
	public Map searchIndent(Map searchFieldMap) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreIndentM> gridIndentHeaderList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentDetailList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String indentNo = "";
		int mmfYear = 0;

		try {
			if (searchFieldMap.get("mmfYear") != null) {

				mmfYear = Integer.parseInt("" + searchFieldMap.get("mmfYear"));
				gridIndentDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentT ");
				gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentM as sim where sim.MmfForTheYear = '"
								+ mmfYear + "' and sim.Status='y' ");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentDetailList", gridIndentDetailList);
		map.put("gridIndentHeaderList", gridIndentHeaderList);
		map.put("itemList", itemList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public boolean addNextOrSubmitIndentToMMF(StoreIndentM storeIndentM,
			List storeIndentTlist, Map map) {

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxIndentNo = "";
		StoreIndentM storeIndentM2 = new StoreIndentM();
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_AUTO");
			hbt.setCheckWriteOperations(false);
			if (!(map.get("headerStored") + "").equals("yes")) {
				hbt.save(storeIndentM);
			}

			if (storeIndentTlist.size() > 0) {
				if ((map.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + map.get("indentId"));
					storeIndentM2.setId(id);
				}
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					if ((map.get("headerStored") + "").equals("yes")) {
						storeIndentTObj.setIndent(storeIndentM2);
					} else {
						storeIndentTObj.setIndent(storeIndentM);
					}
					hbt.save(storeIndentTObj);
				}

			}
			successfullyAdded = true;
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */

		return successfullyAdded;
	}

	public boolean updateIndent(StoreIndentM storeIndentM, List storeIndentTlist) {
		boolean successfullyAdded = false;
		StoreIndentM storeIndentM2 = new StoreIndentM();
		storeIndentM2 = storeIndentM;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeIndentM2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeIndentTlist.size() > 0) {
				for (int i = 0; i < storeIndentTlist.size(); i++) {
					StoreIndentT storeIndentTObj = new StoreIndentT();
					storeIndentTObj = (StoreIndentT) storeIndentTlist.get(i);
					// storeIndentTObj.setIndent(storeIndentM2);
					hbt.update(storeIndentTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@SuppressWarnings("unchecked")
	public boolean updateNextIndent(Map<String, Object> masterAndDetailMap)
			throws java.text.ParseException {
		boolean successfullyAdded = false;
		StoreIndentM storeIndentM2 = new StoreIndentM();
		List<StoreIndentT> storeIndentTListForUpdate = new ArrayList<StoreIndentT>();
		List<StoreIndentT> storeIndentTListForAdd = new ArrayList<StoreIndentT>();
		int indentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session) getSession();
		Transaction tx = null;
		int userId = 0;
		try {
			tx = session.beginTransaction();
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("indentId") != null) {
				indentId = Integer.parseInt(""
						+ masterAndDetailMap.get("indentId"));
			}
			if (masterAndDetailMap.get("userId") != null) {
				userId = Integer
						.parseInt("" + masterAndDetailMap.get("userId"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate()
						.load(StoreIndentM.class, indentId);
				Users users = new Users();
				users.setId(userId);
				storeIndentM.setLastChgBy(users);
				storeIndentM.setLastChgDate(lastChgDate);
				storeIndentM.setLastChgTime(lastChgTime);
				hbt.update(storeIndentM);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {

				storeIndentTListForUpdate = (List<StoreIndentT>) masterAndDetailMap
						.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {

						StoreIndentT storeIndentT = new StoreIndentT();

						storeIndentT = (StoreIndentT) storeIndentTListForUpdate
								.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.update(storeIndentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreIndentT>) masterAndDetailMap
						.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreIndentT storeIndentT = new StoreIndentT();
						storeIndentT = (StoreIndentT) storeIndentTListForAdd
								.get(i);

						StoreIndentM storeIndentM = new StoreIndentM();
						storeIndentM.setId(indentId);
						storeIndentT.setIndent(storeIndentM);

						hbt.save(storeIndentT);
					}
				}
				successfullyAdded = true;
				tx.commit();
			}
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */

		return successfullyAdded;
	}

	public StoreIndentM getStoresIndentMObject(int indentId) {
		StoreIndentM storeIndentM = (StoreIndentM) getHibernateTemplate().load(
				StoreIndentM.class, indentId);
		return storeIndentM;
	}

	@SuppressWarnings("unchecked")
	public int getIndentId(int mmfForTheYear) {
		@SuppressWarnings("unused")
		int indentId = 0;
		List<StoreIndentM> list = new ArrayList<StoreIndentM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIndentM as pod where pod.MmfForTheYear = '"
						+ mmfForTheYear + "'");
		for (StoreIndentM indentM2 : list) {
			indentId = Integer.parseInt("" + indentM2.getId());
		}
		return indentId;
	}

	public Map getIndentMAndT(int indentId) {
		Map map = new HashMap();
		List<StoreIndentM> previousStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> previousStoreIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		try {
			previousStoreIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sm where sm.Id='"
							+ indentId + "'");
			previousStoreIndentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT ");
			itemList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y' and mi.Id<100");
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("previousStoreIndentMList", previousStoreIndentMList);
		map.put("previousStoreIndentTList", previousStoreIndentTList);
		map.put("itemList", itemList);

		return map;
	}

	public Map getIndentMAndTUpdate(int indentId) {
		Map map = new HashMap();
		List<StoreIndentM> gridIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> gridIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		try {
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as sm where sm.Id='"
							+ indentId + "'");
			gridIndentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as st where st.Indent.Id='"
							+ indentId + "'  ");
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);

		return map;
	}

	// ---------------------------------------- Department Issue
	// ----------------------

	public Map<String, Object> getIssuePrintMap(int issue_m_id) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		Session session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String address1 = "";
		String address2 = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";
		try {
			storeIssueMList = getHibernateTemplate().find(
					" from jkt.hms.masters.business.StoreIssueM as sim where sim.Id='"
							+ issue_m_id + "'");
			for (StoreIssueM storeIssueM : storeIssueMList) {
				Hosp_Name = storeIssueM.getHospital().getHospitalName();
				demanNo = "" + storeIssueM.getIssueNo();
				accountingUnit = "";
				if (storeIssueM.getDocNo() != null) {
					recieptVoucherNo = "" + storeIssueM.getDocNo();
				} else {
					recieptVoucherNo = "";
				}
				String issueString = storeIssueM.getIssueNo();
				period1 = "" + issueString.substring(3);
				period2 = "" + issueString.substring(3);
				unit1 = "" + storeIssueM.getDepartment().getDepartmentName();
				address1 = "CHAFB,Bangalore-7";
				address2 = "";
				civNo = "CIV/" + storeIssueM.getIssueNo();
				dated = ""
						+ HMSUtil.changeDateToddMMyyyy(storeIssueM
								.getIssueDate());
				unit2 = "" + storeIssueM.getToStore().getDepartmentName();
				depotNo = "";

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", address1);
		map.put("address2", address2);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;
	}

	public Map<String, Object> getLoanOutPrintMap(Map dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();

		Session session = (Session) getSession();
		List<StoreInternalIndentM> indentMList = new ArrayList<StoreInternalIndentM>();
		Connection con = session.connection();
		int internalIndentId = 0;

		int toStore = 0;

		String Hosp_Name = "";
		if (dataMap.get("internalIndentId") != null) {
			internalIndentId = (Integer) dataMap.get("internalIndentId");
		}
		try {
			indentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreInternalIndentM as sim where  sim.Status='o' and sim.Id="
							+ internalIndentId + "");

			StoreInternalIndentM storeInternalIndentM = (StoreInternalIndentM) indentMList
					.get(0);
			Hosp_Name = storeInternalIndentM.getHospital().getHospitalName();

			toStore = storeInternalIndentM.getDepartment().getId();

		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("toStore", toStore);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;
	}

	public Map<String, Object> getIssueIndentMap(String demandNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> storeIndentMList = new ArrayList<StoreInternalIndentM>();
		Session session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String approvedBy = "";
		String requestBy = "";
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String address1 = "";
		String address2 = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";
		String empName = "";
		String empRank = "";
		String requestByName = "";
		String requestByRank = "";
		try {
			storeIndentMList = getHibernateTemplate()
					.find(" from jkt.hms.masters.business.StoreInternalIndentM as sim where sim.DemandNo='"
							+ demandNo + "'");
			for (StoreInternalIndentM storeIndentM : storeIndentMList) {
				Hosp_Name = storeIndentM.getHospital().getHospitalName();
				demanNo = "" + storeIndentM.getDemandNo();
				if (storeIndentM.getApprovedBy().getFirstName() != null) {
					empName = storeIndentM.getApprovedBy().getFirstName();
				}
				if (storeIndentM.getApprovedBy().getMiddleName() != null) {
					empName = empName + " "
							+ storeIndentM.getApprovedBy().getMiddleName();
				}
				if (storeIndentM.getApprovedBy().getLastName() != null) {
					empName = empName + " "
							+ storeIndentM.getApprovedBy().getLastName();
				}
				if (storeIndentM.getApprovedBy().getRank() != null) {
					empRank = storeIndentM.getApprovedBy().getRank()
							.getRankName();
				}
				approvedBy = "" + empName;

				if (storeIndentM.getRequestedBy().getFirstName() != null) {
					requestByName = storeIndentM.getRequestedBy()
							.getFirstName();
				}
				if (storeIndentM.getRequestedBy().getMiddleName() != null) {
					requestByName = requestByName + " "
							+ storeIndentM.getRequestedBy().getMiddleName();
				}
				if (storeIndentM.getRequestedBy().getLastName() != null) {
					requestByName = requestByName + " "
							+ storeIndentM.getRequestedBy().getLastName();
				}
				if (storeIndentM.getRequestedBy().getRank() != null) {
					requestByRank = storeIndentM.getRequestedBy().getRank()
							.getRankName();
				}
				requestBy = "" + requestByName;
				accountingUnit = "";
				recieptVoucherNo = "";
				period1 = "";
				period2 = "";
				unit1 = "" + storeIndentM.getDepartment().getDepartmentName();
				address1 = "CHAFB,Bangalore-7";
				address2 = "";
				civNo = "CIV";
				dated = ""
						+ HMSUtil.changeDateToddMMyyyy(storeIndentM
								.getDemandDate());
				unit2 = "" + storeIndentM.getToStore().getDepartmentName();
				depotNo = "";

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", address1);
		map.put("address2", address2);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		map.put("approvedBy", approvedBy);
		map.put("empRank", empRank);
		map.put("requestBy", requestBy);
		map.put("requestByRank", requestByRank);
		return map;
	}

	public Map<String, Object> showPrintIssueToDispensary() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		try {
			storeIssueMList = getHibernateTemplate().find(
					" from jkt.hms.masters.business.StoreIssueM as sgrm");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeIssueMList", storeIssueMList);
		return map;
	}

	public Map<String, Object> getAdjustLoanOutMap(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		int currentYear = Integer.parseInt(""
				+ gregorianCalendar.get(Calendar.YEAR));
		int toStoreId = 0;

		int deptId = 0;
		int issueMId = 0;

		String monthAndYear = "";
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("toStoreId") != null) {
				toStoreId = Integer.parseInt("" + dataMap.get("toStoreId"));
			}
			if (currentMonth == 1) {
				currentMonth = 12;
				currentYear = currentYear - 1;
				monthAndYear = (currentYear + "-" + currentMonth);

			} else {
				if (currentMonth <= 10) {
					monthAndYear = (currentYear + "-0" + (currentMonth - 1));
				} else {
					monthAndYear = (currentYear + "-" + (currentMonth - 1));
				}
			}
			// storeIssueTList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueT as sim where sim.IssueM <=
			// '"+monthAndYear+"' and sim.IssueM.IssueType='l' and
			// sim.IssueM.Status='o' and sim.IssueM.Department.Id='"+deptId+"'
			// and sim.IssueM.ToStore.Id='"+toStoreId+"'");
			storeIssueTList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueT as sim where sim.IssueM.IssueType='l'  and sim.IssueM.Status='o' and sim.IssueM.Department.Id='"
							+ deptId
							+ "'and sim.IssueM.ToStore.Id='"
							+ toStoreId + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeIssueTList", storeIssueTList);
		map.put("issueMId", issueMId);

		return map;
	}

	public String getMaxNo(String no) {
		String maxNo = "";
		String y1 = "";
		String y2 = "";
		String y3 = "";
		int tempMonth = 0;

		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		String currentYear = "" + gregorianCalendar.get(Calendar.YEAR);

		if ((Integer.parseInt(currentYear.substring(2)) - 1) <= 9) {
			y1 = "0" + (Integer.parseInt(currentYear.substring(2)) - 1);
		} else {
			y1 = "" + (Integer.parseInt(currentYear.substring(2)) - 1);
		}

		if (Integer.parseInt(currentYear.substring(2)) <= 9) {
			y2 = "0" + Integer.parseInt(currentYear.substring(2));
		} else {
			y2 = "" + Integer.parseInt(currentYear.substring(2));
		}
		if ((Integer.parseInt(currentYear.substring(2)) + 1) <= 9) {
			y3 = "0" + (Integer.parseInt(currentYear.substring(2)) + 1);
		} else {
			y3 = "" + (Integer.parseInt(currentYear.substring(2)) + 1);
		}

		try {
			if (!no.equals("") && !no.equals("0")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				tempMonth = Integer.parseInt(stringTokenizer.nextToken());

				String arr[] = no.split("/");
				// for no also containging month

				if (arr.length > 2) {
					if (currentMonth == (Integer.parseInt(arr[1]))) {
						tempMonth++;
					} else {
						tempMonth = 01;
					}
				}

				if (currentMonth < 4) {

					maxNo = tempMonth + "/" + currentMonth + "/" + currentYear;
				} else {
					maxNo = tempMonth + "/" + currentMonth + "/" + currentYear;
				}

			} else {
				if (currentMonth < 4) {
					maxNo = "01" + "/" + currentMonth + "/" + currentYear;
				} else {
					maxNo = "01" + "/" + currentMonth + "/" + currentYear;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return maxNo;
	}

	/**
	 * return financial year on the behalf of parameter date
	 * 
	 * @author Mukesh.narayan
	 * @param date
	 *            in this "11/04/2010" format
	 * @return sequence No
	 * @date 30 Nov 2010
	 */
	public String getMaxNoByDeptCode(Map<String, Object> dataMap) {
		String maxNo = "";
		/*
		 * String y1 = ""; String y2 = ""; String y3 = ""; int tempMonth = 0;
		 */
		String financialYear = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		financialYear = HMSUtil.getFinancialYearYY_YY(currentDate);
		String no = "";
		if (dataMap.get("no") != null) {
			no = (String) dataMap.get("no");
		}
		String deptType = "";
		String hospitalCode = "";

		if (dataMap.get("deptType") != null) {
			deptType = (String) dataMap.get("deptType");
		}
		
		try {
			if(no != null && !no.equals("") && !no.equals("0")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				String arr[] = no.split("/");
				int seqNo = 0;
				//deptType = arr[0];
				seqNo = Integer.parseInt(arr[1]);
				++seqNo;
				maxNo = deptType + "/" + seqNo + "/" + financialYear;
			} else {
				maxNo = deptType + "/" + "01" + "/" + financialYear;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//
		return maxNo;
	}
	
	public String getMaxNoForOpening(Map<String, Object> dataMap) {
		String maxNo = "";
		/*
		 * String y1 = ""; String y2 = ""; String y3 = ""; int tempMonth = 0;
		 */
		String financialYear = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		financialYear = HMSUtil.getFinancialYearYY_YY(currentDate);
		String no = "";
		if (dataMap.get("no") != null) {
			no = (String) dataMap.get("no");
		}
		String deptCode = "";
		String hospitalTypeCode = "";
		String hospitalCode = "";

		if (dataMap.get("deptCode") != null) {
			deptCode = (String) dataMap.get("deptCode");
		}
		if (dataMap.get("hospitalTypeCode") != null) {
			hospitalTypeCode = (String) dataMap.get("hospitalTypeCode");
		}
		if (dataMap.get("hospitalCode") != null) {
			hospitalCode = (String) dataMap.get("hospitalCode");
		}
		
		try {
			if(!no.equals("") && !no.equals("0")) {
				StringTokenizer stringTokenizer = new StringTokenizer(no, "/");
				String arr[] = no.split("/");
				int seqNo = 0;
				//hospitalTypeCode = arr[0];
				//hospitalCode = arr[1];
				//deptCode = arr[2];
				
				seqNo = Integer.parseInt(arr[1]);
				++seqNo;
				maxNo = hospitalTypeCode + hospitalCode+ deptCode + "/" + seqNo + "/" + financialYear;
			} else {
				maxNo = hospitalTypeCode + hospitalCode+ deptCode +  "/" + "01" + "/" + financialYear;
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return maxNo;
	}

	public Map getBrandMap(Map<String, Object> dataMap)
			throws java.text.ParseException {
		Map map = new HashMap();
		List<StoreItemBatchStock> masStoreBrandList = new ArrayList<StoreItemBatchStock>();
		List<StoreDeptReorderLevel> storeDeptReorderLevelList = new ArrayList<StoreDeptReorderLevel>();
		List masStoreBrandListWithoutExpiryDateRestriction = new ArrayList();
		
		Session session = (Session) getSession();
		int a = 0;
		int deptId = 0;
		int itemId = 0;
		int hospitalId = 0;
		if (dataMap.get("hospitalId") != null) {
			hospitalId = (Integer) dataMap.get("hospitalId");
		}
		if (dataMap.get("deptId") != null) {
			deptId = (Integer) dataMap.get("deptId");
		}
		if (dataMap.get("itemId") != null) {
			itemId = (Integer) dataMap.get("itemId");
		}
		String messageForRol = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = formatterOut.format(formatterIn.parse(date));
		Date issueDate = java.sql.Date.valueOf(date4MySQL);
		BigDecimal rol = new BigDecimal(0);
		BigDecimal clos = new BigDecimal(0);
		/**
		 * Cost Price is removed By Mukesh Narayan Singh Date 21 Dec 2010 After
		 * Discussed with Narayan Sir & Dharmendra "GRN should zero cost value"
		 */
		System.out.println(" deptId "+deptId+" hospitalId "+hospitalId);
		BigDecimal costPrice = new BigDecimal("0");
		try {
			String blockStatus [] = {"Temporary Block","Parmanent Block"};
			masStoreBrandList = session
					.createCriteria(StoreItemBatchStock.class)
					.createAlias("Item", "item")
					.createAlias("Department", "dept")
					.add(Restrictions.eq("dept.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("item.Id", itemId))
					// .add(Restrictions.gt("CostPrice", costPrice))
					.add(Restrictions.or(Restrictions.gt("ExpiryDate", issueDate), Restrictions.isNull("ExpiryDate")))
					.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
					//.add(Restrictions.or(Restrictions.ne("BlockStatus", blockStatus), Restrictions.isNull("BlockStatus")))
					.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
					//.add(Restrictions.isNull("BlockStatus"))
					.addOrder(Order.asc("ExpiryDate")).list();
			System.out.println(" deptId "+deptId);
			System.out.println(" hospitalId "+hospitalId);
			System.out.println(" itemId "+itemId);
			System.out.println(" masStoreBrandList "+masStoreBrandList.size());
			for (StoreItemBatchStock storeItemBatchStock : masStoreBrandList) {
				clos = clos.add(storeItemBatchStock.getClosingStock());
			}
			// String qry="select *,
			// stock.batch_no,stock.expiry_date,stock.closing_stock,stock.cost_price
			// FROM store_item_batch_stock stock where
			// stock.item_id='"+itemId+"' and stock.department_id='"+deptId+"'
			// and stock.closing_stock >0 and stock.expiry_date>'"+issueDate+"'
			// order by stock.expiry_date;";
			// masStoreBrandList = (List) session.createSQLQuery(qry).list();

			/*
			 * if(masStoreBrandList==null||masStoreBrandList.size()==0){
			 * qry="select
			 * stock.brand_id,brand.brand_name,stock.batch_no,stock.expiry_date
			 * ,stock.closing_stock,stock.cost_price FROM mas_store_brand
			 * brand,store_item_batch_stock stock where
			 * stock.item_id='"+itemId+"' and brand.brand_id=stock.brand_id and
			 * stock.department_id='"+deptId+"' and stock.closing_stock >0 order
			 * masStoreBrandListWithoutExpiryDateRestriction = (List)
			 * session.createSQLQuery(qry).list();
			 * if(masStoreBrandListWithoutExpiryDateRestriction
			 * !=null&&masStoreBrandListWithoutExpiryDateRestriction.size()>0){
			 * map.put("masStoreBrandListWithoutExpiryDateRestriction",
			 * masStoreBrandListWithoutExpiryDateRestriction); // }
			 */

			storeDeptReorderLevelList = session
					.createCriteria(StoreDeptReorderLevel.class)
					.add(Restrictions.eq("Item.Id", itemId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", deptId)).list();

			for (StoreDeptReorderLevel storeDeptReorderLevel : storeDeptReorderLevelList) {
				rol = storeDeptReorderLevel.getRol();
			}

			a = clos.compareTo(rol);
			if (clos.compareTo(rol) < 0) {
				messageForRol = "";
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			/**
			 * session.close() is done By Ramdular Prajapati Updated by Ujjwal
			 * Kashyap on 10th Sep 2013 Date 12 May 2010
			 */
			/*
			 * if(session!=null){ session.close(); }
			 */
		}
		//
		
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("rol", rol);
		map.put("clos", clos);
		map.put("a", a);
		return map;
	}

	public boolean addBrandDetails(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		List costPriceList = null;
		List batchNoList = null;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("costPriceList") != null) {
			costPriceList = (List) dataMap.get("costPriceList");
		}
		if (dataMap.get("batchNoList") != null) {
			batchNoList = (List) dataMap.get("batchNoList");
		}
		String issueNo = "";
		int[] brandIdList = new int[100];
		BigDecimal[] qtyIssuedArray = new BigDecimal[100];
		int issueId = 0;
		int itemId = 0;
		int detailId = 0;
		String batchNoArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int storeFyId = 0;
		int rowVal = 0;
		if (dataMap.get("batchNoArray") != null) {
			batchNoArray = (String[]) dataMap.get("batchNoArray");
		}

		if (dataMap.get("qtyIssuedTempArray") != null) {
			qtyIssuedTempArray = (String[]) dataMap.get("qtyIssuedTempArray");
		}
		if (dataMap.get("rowVal") != null) {
			rowVal = (Integer) dataMap.get("rowVal");
		}
		if (dataMap.get("itemId") != null) {
			itemId = Integer.parseInt("" + dataMap.get("itemId"));
		}
		if (dataMap.get("storeIssueTList") != null) {
			storeIssueTList = (List) dataMap.get("storeIssueTList");
		}
		if (dataMap.get("issueId") != null) {
			issueId = Integer.parseInt("" + dataMap.get("issueId"));
		}
		if (dataMap.get("issueNo") != null) {
			issueNo = ("" + dataMap.get("issueNo"));
		}
		if (dataMap.get("detailId") != null) {
			detailId = Integer.parseInt("" + dataMap.get("detailId"));
		}
		boolean successfullyAdded = false;

		Session session = (Session) getSession();
		Transaction tx = null;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			StoreIssueM storeIssueM2 = new StoreIssueM();

			String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.SrNo="
					+ rowVal + " and a.IssueM.Id=" + issueId + " ";
			Query query = session.createQuery(hql);
			int row = query.executeUpdate();
			if (storeIssueTList.size() > 0) {
				for (int i = 0; i < storeIssueTList.size(); i++) {
					StoreIssueT issueTObj = new StoreIssueT();
					issueTObj = (StoreIssueT) storeIssueTList.get(i);
					issueTObj.setIssued("y");
					hbt.save(issueTObj);
				}
			}

			// --------------------------Start of Stock
			// Updating--------------------------
			BigDecimal stock = null;
			BigDecimal issueQty = null;
			for (int i = 0; i < batchNoArray.length; i++) {
				// BigDecimal(""+qtyIssuedTempArray[i]))+"");
				if (!(new BigDecimal("" + qtyIssuedTempArray[i]))
						.equals(new BigDecimal("0"))) {
					BigDecimal costprice = new BigDecimal(""
							+ costPriceList.get(i));
					// String qry="select closing_stock,issue_qty from
					// store_item_batch_stock as a where
					// a.brand_id="+itemIssuedIdArray[i]+"'and
					// a.cost_price='"+costprice+"'and a.batch_no='"+
					// batchNoList.get(i)+"'and a.department_id='"+deptId+"';";
					String qry = "select closing_stock,issue_qty from store_item_batch_stock as a where  a.item_id='"
							+ itemId
							+ "' and a.department_id='"
							+ deptId
							+ "'and a.batch_no='"
							+ batchNoList.get(i)
							+ "'and a.cost_price='" + costprice + "';";
					List c = (List) session.createSQLQuery(qry).list();
					// list------"+c.size());
					// for (Iterator iterator = c.iterator();
					// iterator.hasNext();) {
					Object[] object = (Object[]) c.get(0);
					if (object[0] == null) {
						stock = new BigDecimal("0");
					} else {
						stock = (BigDecimal) object[0];
					}
					if (object[1] == null) {
						issueQty = new BigDecimal("0");
					} else {
						issueQty = (BigDecimal) object[1];
					}
					// }

					String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
							+ stock.subtract(new BigDecimal(
									qtyIssuedTempArray[i]))
							+ "'  where  a.CostPrice='"
							+ costprice
							+ "'and a.BatchNo='"
							+ batchNoList.get(i)
							+ "'and a.Department.Id='" + deptId + "'";
					String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
							+ issueQty
									.add(new BigDecimal(qtyIssuedTempArray[i]))
							+ "'  where  a.CostPrice='"
							+ costprice
							+ "'and a.BatchNo='"
							+ batchNoList.get(i)
							+ "'and a.Department.Id='" + deptId + "'";
					Query query2 = session.createQuery(hql2);
					int row2 = query2.executeUpdate();
					Query query3 = session.createQuery(hql3);
					int row3 = query3.executeUpdate();
					// --------------------------Start of Stock
					// Updating--------------------------
				}
			}
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueDeptNo(issueNo);
			hbt.update(storeFyDocumentNo);

			// --------------Transaction End----------
			tx.commit();
			successfullyAdded = true;
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} /*
		 * finally { session.close(); }
		 */
		return successfullyAdded;
	}

	public int getIssueId(String issueNo) {
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		int id = 0;
		try {
			storeIssueMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM as msb where msb.IssueNo = '"
							+ issueNo + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		for (StoreIssueM storeIssueM : storeIssueMList) {
			id = storeIssueM.getId();
		}
		return id;
	}

	// -------------------------------------- Start of Indent Soc Tracker
	// ------------------------------------------

	public Map<String, Object> getItemListForSocTracker(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		int indentId = 0;

		try {
			if (dataMap.get("indentId") != null) {
				indentId = Integer.parseInt("" + dataMap.get("indentId"));
			}
			if (indentId != 0) {
				storeIndentTList = getHibernateTemplate().find(
						" from jkt.hms.masters.business.StoreIndentT as sit where   sit.Indent.Id= '"
								+ indentId + "'");
			}
			map.put("storeIndentTList", storeIndentTList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getIndentListForSocTracker(
			Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> storeIndentMList = new ArrayList<StoreIndentM>();
		int selectedDepartmentId = 0;
		if (dataMap.get("selectedDepartmentId") != null) {
			selectedDepartmentId = Integer.parseInt(""
					+ dataMap.get("selectedDepartmentId"));
		}
		if (selectedDepartmentId != 0) {
			storeIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as sim where sim.IndentType='s' and sim.Status='o' and sim.Department.Id='"
							+ deptId
							+ "' and sim.ItemReqDept.Id= '"
							+ selectedDepartmentId + "'");
		}
		map.put("storeIndentMList", storeIndentMList);
		return map;
	}

	/*
	 * This is the method to get the Indent Soc Tracker related lists
	 */
	public Map<String, Object> showIndentSocTracker(Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreGroup> itemGroupList = new ArrayList<MasStoreGroup>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		int hospitalId = 0;
		try {
			//Added by Arbind on 01-03-2017
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			/*departmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("DepartmentName")).list();*/

			departmentList = session.createCriteria(MasInstituteDepartment.class)
					.setProjection(Projections.property("Department"))
					.add(Restrictions.eq("Institute.Id",hospitalId))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("Department", "dep")
					.addOrder(Order.asc("dep.DepartmentName"))
					.list();
			itemGroupList = session.createCriteria(MasStoreGroup.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("GroupName")).list();

			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("Nomenclature")).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("departmentList", departmentList);
		map.put("itemGroupList", itemGroupList);
		map.put("itemList", itemList);

		return map;

	}

	/*
	 * This is the method to get the map from store_indent_soc_tracker table
	 * based on the indentId,departmentId,nomenclature
	 */
	public Map<String, Object> getIndentSocTracker(Map<String, Object> idsMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (idsMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + idsMap.get("deptId"));
		}
		if (idsMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + idsMap.get("hospitalId"));
		}
		if (idsMap.get("userName") != null) {
			userName = ("" + idsMap.get("userName"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentSocTracker> storeIndentSocTrackerList = new ArrayList<StoreIndentSocTracker>();
		List<StoreIndentT> indentTList = new ArrayList<StoreIndentT>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List objectList = new ArrayList();
		int indentId = 0;
		int toDepartmentId = 0;
		String nomenclature = "";
		int indentIdForGrid = 0;
		int itemId = 0;
		Session session = (Session) getSession();
		try {
			if (idsMap.get("indentId") != null) {
				indentId = Integer.parseInt("" + idsMap.get("indentId"));
			}
			if (idsMap.get("toDepartmentId") != null) {
				toDepartmentId = Integer.parseInt(""
						+ idsMap.get("toDepartmentId"));
			}
			if (idsMap.get("itemId") != null) {
				itemId = Integer.parseInt("" + idsMap.get("itemId"));
			}

			String qry = "SELECT item.item_id,item.nomenclature,item.pvms_no,conversion.item_unit_name,t.unit_rate,t.last_receipt_qty,t.stock_in FROM store_indent_t t,store_indent_m m,mas_store_item item,mas_store_item_conversion conversion where m.indent_id='"
					+ indentId
					+ "' and m.indent_id=t.indent_id and item.item_id='"
					+ itemId
					+ "' and conversion.item_conversion_id=item.item_conversion_id and t.item_id='"
					+ itemId + "';";
			objectList = (List) session.createSQLQuery(qry).list();

			storeIndentSocTrackerList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentSocTracker as sist where sist.Department='"
							+ toDepartmentId
							+ "' and sist.Indent.Id='"
							+ indentId + "' and sist.Item.Id='" + itemId + "'");
			indentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as sist where  sist.Indent.Id='"
							+ indentId + "' and sist.Item.Id='" + itemId + "'");
			masStoreItemList = (List<MasStoreItem>) getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Id='"
							+ itemId + "'");
			map.put("storeIndentSocTrackerList", storeIndentSocTrackerList);
			map.put("objectList", objectList);
			map.put("indentTList", indentTList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/*
	 * This is the method used to add or update the Indent Soc Tracker details
	 */
	public boolean addOrUpdateIndentSocTracker(
			StoreIndentSocTracker indentSocTracker, int indentSocTrackerId) {
		Boolean addOrUpdate = false;
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			if (indentSocTrackerId != 0) {
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				hbt.update(indentSocTracker);
			} else {
				HibernateTemplate hbt2 = getHibernateTemplate();
				hbt2.setFlushModeName("FLUSH_AUTO");
				hbt2.setCheckWriteOperations(false);
				hbt2.save(indentSocTracker);
			}
			addOrUpdate = true;
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		return addOrUpdate;
	}

	public Map<String, Object> getItemMapForAutoComplete() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List<MasFormation> list = new ArrayList<MasFormation>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			list = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasFormation ");
			masStoreItemList = (List<MasStoreItem>) hbt
					.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masStoreItemList", masStoreItemList);
		return map;
	}

	// ----------------------------Start Of Issues To Dispensary (CIV)
	// ----------------------

	/*
	 * Methods starting for CIV Issue changes by vikas
	 */
	public Map showIssueDispensaryJsp(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptType = "";
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();
		List<MasInstituteDepartment> departmentList = new ArrayList<MasInstituteDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List<Object[]> employees = new ArrayList<Object[]>();
		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {
			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}
			/*
			 * storeInternalPendingIndentList = session
			 * .createCriteria(StoreInternalIndentM.class)
			 * .add(Restrictions.eq("Status", "o")) .createAlias("ToStore", "d")
			 * .add(Restrictions.eq("d.Id", deptId))
			 * .addOrder(Order.desc("Id")).list();
			 */
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			/*departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment where Lower(Status)=Lower('Y') order by DepartmentName asc");*/
			departmentList = session.createCriteria(MasInstituteDepartment.class).createAlias("Department", "dept").add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Institute.Id", hospitalId)).addOrder(Order.asc("dept.DepartmentName")).list();

			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			masStoreAirForceDepotList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot");
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee where Lower(Status)=Lower('Y') and Hospital.Id = '"
							+ hospitalId + "' order by FirstName asc");

			Query q = session
					.createQuery("select e.Id, e.FirstName,e.LastName from MasEmployee e where Lower(Status)=Lower('Y') and Hospital.Id = '"
							+ hospitalId + "' order by FirstName asc");
			employees = (List<Object[]>) q.list();

			employeeDeptByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
							+ deptId
							+ " and emp.Status='Y' and Hospital.Id = '"
							+ hospitalId + "' order by emp.FirstName asc");
			/*
			 * storeFyDocumentNoList = getHibernateTemplate().find("from
			 * jkt.hms.masters.business.StoreFyDocumentNo as sfdn where
			 * sfdn.Department.Id='"+deptId+"' "); for (StoreFyDocumentNo
			 * storeFyDocumentNo :storeFyDocumentNoList ) {
			 * if(storeFyDocumentNo.getIssueDeptNo() !=null){
			 * no=(""+storeFyDocumentNo.getIssueDeptNo());
			 * 
			 * }
			 */

			List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
			List<Integer> maxIdList = new ArrayList<Integer>();
			/*
			 * Commented By Ujjwal For Performance
			 */
			/*
			 * issueNoList = session.createCriteria(StoreIssueM.class)
			 * .setProjection(Projections.property("IssueNo")).list();
			 */
			// String queryForNo =
			// "select top 1 issue_no from store_issue_m order by id desc";
			// ---------changes by anamika-----------------
			//String queryForNo = "select  issue_no from store_issue_m order by id desc LIMIT 1";
			int maxId = 0;
			
			maxIdList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id", deptId))
					 .setProjection(Projections.max("Id")).list();
			//issueNoList = session.createSQLQuery(queryForNo).list();
			
			if(maxIdList.size()>0 && maxIdList.get(0)!= null){
				issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Id", maxIdList.get(0))).list();
				if(issueNoList.size()>0){
					no = issueNoList.get(0).getIssueNo();
				}
			}

			/*
			 * searchListForPopup = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
			 * + deptId +
			 * "' and sim.Status='o' and sim.IssueType='i'  order by IssueNo desc"
			 * );
			 */
			searchListForPopup = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "o"))
					.add(Restrictions.eq("IssueType", "i"))
					.addOrder(Order.desc("Id")).list();
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();

			String previousDate = HMSUtil.getPrevDate(Integer
					.parseInt(properties
							.getProperty("store.pending_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate = HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			if (mapDate.get("currentDate") != null) {
				currentDate = (String) mapDate.get("currentDate");
			}
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qry = "";
			/*
			 * qry =
			 * "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
			 * + " sim.id = sit.internal_id where sim.department_id="+deptId+
			 * " and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc"
			 * ;
			 */

			qry = "select distinct sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,"
					+ "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
					+ " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,"
					+ " mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by "
					+ " and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="
					+ deptId
					+ " and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
					+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
					+ "' and '"
					+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
					+ "' and sim.status = 'Intra Indent Approved' and sim.hospital_id = "
					+ hospitalId + "   order by sim.id desc";

			//
			storeInternalIndentPendingList = session.createSQLQuery(qry).list();
			map.put("storeInternalIndentPendingList",
					storeInternalIndentPendingList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			// max = getMaxNo(no);
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max = getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deptName", deptName);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		/*
		 * map.put("storeInternalPendingIndentList",
		 * storeInternalPendingIndentList);
		 */map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("employeeDeptByList", employeeDeptByList);
		map.put("max", max);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("patientList", patientList);
		map.put("storeSetup", storeSetup);
		map.put("employees", employees);
		return map;
	}

	public Map<String, Object> getDemandList(Map dataMap) {
		int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		/*
		 * List<StoreInternalIndentM> storeInternalIndentMList = new
		 * ArrayList<StoreInternalIndentM>();
		 */
		List<Object[]> storeInternalIndentMList = new ArrayList<Object[]>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptName = "";
		Session session = getSession();
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("userName") != null) {
				userName = ("" + dataMap.get("userName"));
			}
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""
						+ dataMap.get("dispenceryId"));
			}
			/*
			 * Code for Department Issue Code By Mukesh Narayan SIngh Date 02
			 * Dec 2010
			 */
			List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
			searchListForPopup = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
							+ deptId
							+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = '"
							+ hospitalId + "'  order by Id desc");

			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			map.put("searchListForPopup", searchListForPopup);
			/**
			 * End of Code for Department Issue Code By Mukesh Narayan SIngh
			 * Date 02 Dec 2010
			 */
			/**
			 * Commented By Ritu
			 * 
			 */
			/*
			 * storeInternalIndentMList = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Department.Id='"
			 * + dispenceryId + "' and siim.Status='o' and siim.ToStore='" +
			 * deptId + "'");
			 */
			/**
			 * Added By Ritu for multiple issue of a indent
			 */
			String previousDate = HMSUtil.getPrevDate(Integer
					.parseInt(properties
							.getProperty("store.pending_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate = HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			if (mapDate.get("currentDate") != null) {
				currentDate = (String) mapDate.get("currentDate");
			}
			String qry = "";
			/**
			 * deptId==151 means Laundry departmentIdForLaundry=151
			 */
			int laundry_department_id = 0;
			laundry_department_id = Integer.parseInt(properties
					.getProperty("departmentIdForLaundry"));

			if (deptId == laundry_department_id) {
				qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
						+ " sim.id = sit.internal_id where sim.department_id="
						+ dispenceryId
						+ " and sim.to_store="
						+ deptId
						+ " and sim.status='o' and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
						+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
						+ "' and '"
						+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
						+ "' and sim.hospital_id = '"
						+ hospitalId
						+ "' group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";

			} else {
				qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
						+ " sim.id = sit.internal_id where sim.department_id="
						+ dispenceryId
						+ " and sim.to_store="
						+ deptId
						+ " and indent_flag='ALL' and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
						+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
						+ "' and '"
						+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
						+ "' and sim.hospital_id = '"
						+ hospitalId
						+ "' and sim.status ='Intra Indent Approved' group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";

			}
			//
			storeInternalIndentMList = session.createSQLQuery(qry).list();
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qryPending = "";

			qryPending = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,"
					+ "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
					+ " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="
					+ deptId
					+ " and (sit.qty_request -coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
					+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
					+ "' and '"
					+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
					+ "' and sim.hospital_id = '"
					+ hospitalId
					+ "' and sim.status = 'Intra Indent Approved'	group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name ,emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";

			storeInternalIndentPendingList = session.createSQLQuery(qryPending)
					.list();
			map.put("storeInternalIndentPendingList",
					storeInternalIndentPendingList);
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
			employeeDeptByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
							+ deptId
							+ " and emp.Status='Y' and emp.Hospital.Id = '"
							+ hospitalId + "' order by emp.FirstName asc");
			map.put("employeeDeptByList", employeeDeptByList);
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			map.put("deptName", deptName);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ------------mthod added by vikas on 20/04/09--------------
	public Map<String, Object> getIssueList(Map dataMap) {
		int toDeptId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();

		try {

			if (dataMap.get("toDeptId") != null) {
				toDeptId = Integer.parseInt("" + dataMap.get("toDeptId"));
			}
			storeIssueMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM as siim  where  siim.IssueType='i' and siim.ToStore='"
							+ toDeptId + "'");

			map.put("storeIssueMList", storeIssueMList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// ------------mthod added by vikas on 20/04/09--------------
	// ------------------------- method for searching Issue
	// CIV-----------------------
	@SuppressWarnings("unchecked")
	public Map searchIssueCiv(Box box) {
		int issueId = 0;
		int deptId = 0;
		String deptName = "";
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		Map<String, Object> pageMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		StoreIssueM issueM = new StoreIssueM();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		deptId = Integer.parseInt("" + box.get("deptId"));
		Session session = (Session) getSession();
		Transaction tx = null;
		int pageNo = 1;
		String issued = "n";
		if (box.get("issueUnit") != null) {
			issueId = Integer.parseInt(box.get("issueUnit"));
		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		list = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Id = '"
						+ issueId + "' and sim.Department.Id =" + deptId);
		String date11 = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		date11 = (String) utilMap.get("currentDate");
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			for (StoreIssueM storeIssueM : list) {
				box.put("issueNo", storeIssueM.getIssueNo());
				try {
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"dd/MM/yyyy");
					String date4MySQL = formatterOut.format(storeIssueM
							.getIssueDate());
					String requestedDate4MySQL = formatterOut
							.format(storeIssueM.getRequestDate());

					box.put("requestDate", requestedDate4MySQL);
					box.put("issueDate", date4MySQL);
				} catch (Exception e) {
					box.put("issueDate", date11);
					box.put("requestDate", date11);
					e.printStackTrace();
				}
				if (storeIssueM.getDocNo() != null) {
					box.put("reference", storeIssueM.getDocNo());
				}

				box.put("departmentIdTemp", storeIssueM.getToStore().getId());

				box.put("requestBy", storeIssueM.getRequestBy().getId());
				box.put("approvedBy", storeIssueM.getApprovedBy().getId());
				box.put("issuedBy", storeIssueM.getIssuedBy().getId());
				box.put("requestNo", storeIssueM.getRequestNo().getId());

				departmentNameSendToJsp = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
								+ deptId + "'");
				storeInternalIndentMList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreInternalIndentM as siim  where    siim.ToStore='"
								+ deptId + "'");
				MasDepartment masDepartment = departmentNameSendToJsp.get(0);
				deptName = masDepartment.getDepartmentName();
				box.put("deptName", deptName);
				// --------------Transaction Ended----------
				tx.commit();

			}
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}
		pageMap.put("issueId", issueId);
		pageMap.put("pageNo", pageNo);
		pageMap.put("deptId", deptId);
		map = getIssueDetailPageByPage(pageMap);
		map.put("box", box);
		map.put("storeInternalIndentMList", storeInternalIndentMList);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> getIssueDetailPageByPage(
			Map<String, Object> pageMap) {
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		// List<StoreIssueT> issueTList=new ArrayList<StoreIssueT>();
		List issueTList = new ArrayList();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List stockAvailableList = new ArrayList();
		List loanOutList = new ArrayList();
		StoreSetup storeSetup = new StoreSetup();

		int issueId = 0;
		int pageNo = 1;
		String issued = "n";
		int deptId = 0;
		deptId = Integer.parseInt("" + pageMap.get("deptId"));
		HibernateTemplate hbt = getHibernateTemplate();
		Session session = (Session) getSession();
		session.flush();

		if (pageMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + pageMap.get("pageNo"));
		}

		int firstResult = 0;
		int maxResults = 20;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 20;
		}

		try {
			if (pageMap.get("issueId") != null) {
				issueId = Integer.parseInt("" + pageMap.get("issueId"));
			}

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}

			// Hibernate Pagination
			String pvmsSearch = "";

			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals("")) {
				pvmsSearch = (String) pageMap.get("pvmsSearch") + "%";
				map.put("pvmsNo1", pvmsSearch);
				// String query = " select b.item_id, i.pvms_no, i.nomenclature,
				// d.unit_name,a.department_id, a.id, b.id, max(b.qty_request),
				// sum(b.qty_issued) from store_issue_m a, store_issue_t
				// b,mas_store_item i, mas_store_item_conversion c,
				// mas_store_unit d where i.item_conversion_id =
				// c.item_conversion_id and c.purchase_unit_id = d.unit_id and
				// b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id
				// = " + issueId + " and (i.pvms_no like '" + pvmsSearch + "' or
				// i.nomenclature like '" + pvmsSearch + "') group by
				// b.item_id";
				String query = " select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id, max(b.qty_request), b.qty_issued,b.batch_no,b.expiry_date from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id = "
						+ issueId
						+ " and a.department_id="
						+ deptId
						+ " and i.pvms_no like '"
						+ pvmsSearch
						+ "' group by b.item_id,i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,b.id,b.qty_issued,b.batch_no,b.expiry_date";

				/**
				 * Commented By Ritu For searching all indent items
				 */
				// issueTList =
				// session.createSQLQuery(query).setFirstResult(firstResult).setMaxResults(maxResults).list();
				issueTList = session.createSQLQuery(query).list();
			} else {
				String query = "select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id,   b.id, max(b.qty_request), b.qty_issued,b.batch_no,b.expiry_date from store_issue_m a, store_issue_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id  and b.item_id=i.item_id and a.id = b.issue_m_id and b.issue_m_id  = "
						+ issueId
						+ " and a.department_id ="
						+ deptId
						+ " group by b.item_id,i.pvms_no,i.nomenclature, d.unit_name,a.department_id, a.id,b.id,b.qty_issued,b.batch_no,b.expiry_date order by b.id";

				/**
				 * Commented By Ritu For searching all indent items
				 */
				// issueTList =
				// session.createSQLQuery(query).setFirstResult(firstResult).setMaxResults(maxResults).list();
				issueTList = session.createSQLQuery(query).list();
			}

			employeeList = session.createCriteria(MasEmployee.class).list();
			departmentList = session.createCriteria(MasDepartment.class).list();

			if (pageMap.get("issue_type") != null
					&& pageMap.get("issue_type").toString().equals("l")) {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Status", "o"))
						.add(Restrictions.eq("IssueType", "l"))
						.addOrder(Order.desc("Id")).list();
			} else {
				searchListForPopup = session.createCriteria(StoreIssueM.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Status", "o"))
						.add(Restrictions.eq("IssueType", "i"))
						.addOrder(Order.desc("Id")).list();
			}

			// Get Loan Out Details
			List stockList = new ArrayList();
			List loanOutQtyList = new ArrayList();
			List objectList = new ArrayList();

			for (Iterator iterator = issueTList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				String str = "";
				if (pageMap.get("issue_type") != null
						&& pageMap.get("issue_type").toString().equals("l")) {
					str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b,mas_store_item i where b.item_id=i.item_id and a.id = b.issue_m_id and a.status='o' and  a.issue_type='l' and b.item_order='2' and b.item_issued = '"
							+ object[0] + "'";
					// order by i.pvms_no
				} else {
					str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b,mas_store_item i where b.item_id=i.item_id and a.id = b.issue_m_id and a.status='o' and  a.issue_type='i' and b.item_order='2' and b.item_issued = '"
							+ object[0] + "' ";
				}
				// order by i.pvms_no
				objectList = session.createSQLQuery(str).list();
				if (objectList.get(0) != null) {
					map.put(object[0].toString(), objectList.get(0).toString());
				} else {
					map.put(object[0].toString(), "0");
				}

				int itemId = Integer.parseInt(object[0].toString());
				int departmentId = Integer.parseInt(object[4].toString());
				int issueMId = Integer.parseInt(object[5].toString());

				BigDecimal stock = null;
				BigDecimal loanOutQty = null;
				String str3 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i  where a.item_id=i.item_id and a.item_id = '"
						+ itemId
						+ "' and a.department_id='"
						+ departmentId
						+ "' group by a.item_id ";// order by i.pvms_no";
				stockAvailableList = session.createSQLQuery(str3).list();

				String str1 = "select sum(a.qty_issued) from store_issue_t a,mas_store_item i where a.item_id=i.item_id and a.item_id = '"
						+ itemId
						+ "' and a.issue_m_id='"
						+ issueMId
						+ "' and a.item_order='" + 2 + "' group by a.item_id ";// order
																				// by
																				// i.pvms_no";

				loanOutList = session.createSQLQuery(str1).list();

				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}

				if (loanOutList.size() > 0 && loanOutList.get(0) != null) {
					loanOutQty = (BigDecimal) loanOutList.get(0);
				} else {
					loanOutQty = new BigDecimal("0");
				}
				stockList.add(stock);
				loanOutQtyList.add(loanOutQty);
			}

			// for complete stock list

			int totalPages = 0;
			double totalPage = 0.0;
			if (pageMap.get("pvmsSearch") != null
					&& !((String) pageMap.get("pvmsSearch")).equals("")) {

				String str1 = "select count(*) from store_issue_t a,store_issue_m b,mas_store_item i  where a.item_id=i.item_id and  a.issue_m_id=b.id and a.issue_m_id='"
						+ issueId
						+ "' and i.pvms_no like '"
						+ pvmsSearch
						+ "'	";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			} else {
				String str1 = "select count(*) from store_issue_t a,store_issue_m b  where a.issue_m_id=b.id and a.issue_m_id='"
						+ issueId + "' group by a.item_id";
				List countList = session.createSQLQuery(str1).list();
				if (countList != null && countList.size() > 0) {
					totalPage = (double) countList.size() / (double) 20;
					Double d = new Double(Math.ceil(totalPage));
					totalPages = d.intValue();
				}
			}

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date11 = (String) utilMap.get("currentDate");
			try {

				List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
				storeIssueMList1 = session.createCriteria(StoreIssueM.class)
						.add(Restrictions.eq("Id", issueId)).list();
				StoreIssueM storeIssueM = new StoreIssueM();
				if (storeIssueMList1.size() > 0 && storeIssueMList1 != null) {
					storeIssueM = storeIssueMList1.get(0);
				}
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"yyyy-MM-dd");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"dd/MM/yyyy");

				if (storeIssueM.getIssueDate() != null) {
					String date4MySQL = formatterOut.format(storeIssueM
							.getIssueDate());
					map.put("issueDate", date4MySQL);
				} else {
					map.put("requestDate", date11);
				}

				if (storeIssueM.getRequestDate() != null) {
					String requestedDate4MySQL = formatterOut
							.format(storeIssueM.getRequestDate());
					map.put("requestDate", requestedDate4MySQL);
				} else {
					map.put("requestDate", date11);
				}

				List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
				storeInternalIndentMList = session
						.createCriteria(StoreInternalIndentM.class)
						.add(Restrictions.eq("ToStore.Id", deptId)).list();

				if (storeInternalIndentMList != null
						&& storeInternalIndentMList.size() > 0) {
					map.put("storeInternalIndentMList",
							storeInternalIndentMList);
					if (storeIssueM.getRequestNo() != null) {
						map.put("requestNo", storeIssueM.getRequestNo().getId());
					}
				}
			} catch (Exception e) {
				map.put("issueDate", date11);
				map.put("requestDate", date11);
				e.printStackTrace();
			}

			map.put("stockList", stockList);
			map.put("totalPages", totalPages);
			map.put("loanOutQtyList", loanOutQtyList);
			session.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchListForPopup", searchListForPopup);
		map.put("issueTList", issueTList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("issueId", issueId);
		map.put("storeSetup", storeSetup);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map searchInternalIndentDetails(Map<String, Object> dataMap) {

		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int userId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userId") != null) {
			userId = Integer.parseInt("" + dataMap.get("userId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		int internalIndentId = 0;
		String issueNo = "";
		int issueId = 0;
		int firstResult = 0;
		int maxResults = 8;
		String no = "";

		int approvedBy = 0;
		int requestedBy = 0;
		int issuedBy = 0;

		String refNo = "";
		int despenceryName = 0;
		int storeFyId = 0;
		String date = "";
		String time = "";
		Date demandDate = null;
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueLoanOutList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList2 = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		int currentYear = Integer.parseInt(""
				+ gregorianCalendar.get(Calendar.YEAR));
		int month = 0;
		int year = 0;
		java.sql.Date startDate = null;
		java.sql.Date endDate = null;
		String messageTOBeVisibleToTheUser = "";
		String messageType = "failure";
		String adjustLoanButtonToShow = "false";
		int issueTempId = 0;
		StoreIssueM storeIssueM = null;
		// Retriving data from map
		if (dataMap.get("issueId") != null) {
			issueId = Integer.parseInt(("" + dataMap.get("issueId")));
		}
		if (dataMap.get("internalIndentId") != null) {
			internalIndentId = Integer.parseInt(""
					+ dataMap.get("internalIndentId"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("issueNo") != null) {
			issueNo = "" + dataMap.get("issueNo");
		}
		if (dataMap.get("approvedBy") != null) {
			approvedBy = Integer.parseInt("" + dataMap.get("approvedBy"));
		}
		if (dataMap.get("requestedBy") != null) {
			requestedBy = Integer.parseInt("" + dataMap.get("requestedBy"));
		}
		if (dataMap.get("issuedBy") != null) {
			issuedBy = Integer.parseInt("" + dataMap.get("issuedBy"));
		}
		if (dataMap.get("refNo") != null) {
			refNo = "" + dataMap.get("refNo");
		}
		if (dataMap.get("despenceryName") != null) {
			despenceryName = Integer.parseInt(""
					+ dataMap.get("despenceryName"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("date") != null) {
			date = ("" + dataMap.get("date"));
		}

		if (dataMap.get("time") != null) {
			time = ("" + dataMap.get("time"));
		}

		Session session = (Session) getSession();
		Transaction tx = null;

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			// --------------Transaction Started----------

			tx = session.beginTransaction();

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date22 = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date22));
			Date issueDate = java.sql.Date.valueOf(date4MySQL);
			String monthAndYear = "";
			if (currentMonth == 1) {
				currentMonth = 12;
				currentYear = currentYear - 1;
				monthAndYear = (currentYear + "-" + currentMonth);

			} else {
				if (currentMonth <= 10) {
					monthAndYear = (currentYear + "-0" + (currentMonth - 1));
				} else {
					monthAndYear = (currentYear + "-" + (currentMonth - 1));
				}
			}
			String currentMonthAndYear = "";
			currentMonthAndYear = (currentYear + "-0" + (currentMonth));

			// --------Start of Checking for Loan Out--------------------
			storeIssueLoanOutList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM as sim where     sim.IssueType='l'  and sim.Status='o' and sim.Department.Id='"
							+ deptId + "' ");
			if (storeIssueLoanOutList.size() > 0) {
				messageTOBeVisibleToTheUser = "Please Adjust Loan out ...!";
				messageType = "failure";
				adjustLoanButtonToShow = "true";
				map.put("messageTOBeVisibleToTheUser",
						messageTOBeVisibleToTheUser);
				map.put("messageType", messageType);
				map.put("adjustLoanButtonToShow", adjustLoanButtonToShow);
				// map.put("internalIndentId",internalIndentId);
				storeInternalIndentMList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreInternalIndentM as msb where msb.Id = '"
								+ internalIndentId + "' ");
				map.put("storeInternalIndentMList", storeInternalIndentMList);
				return map;
			}
			// --------End of Checking for Loan Out--------------------

			storeInternalIndentTList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreInternalIndentT as msb where msb.Internal.Id = '"
							+ internalIndentId + "' ");
			storeInternalIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM as msb where msb.Id = '"
							+ internalIndentId + "' ");

			/*
			 * for (StoreInternalIndentM storeInternalIndentM :
			 * storeInternalIndentMList) { demandDate = (Date)
			 * storeInternalIndentM.getDemandDate(); }
			 */
			// ----------------Start of Fetching records from Internal Indent &
			// storing in Issue-----

			// ---------------Start of Finding Adjusted loanout
			// Id------------------------

			// //"substring(sim.IssueDate, 1,7) = '"

			/*
			 * Code Commented By Mukesh narayan Singh Date 31 Aug 2010 Remark:--
			 * Not in Use as seen below
			 */
			/*
			 * storeIssueMList2 = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreIssueM as sim where  substring(convert(varchar,sim.IssueDate,121), 1, 7) ='"
			 * + currentMonthAndYear +
			 * "' and  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
			 * + deptId + "' and sim.ToStore.Id='" + despenceryName + "'"); if
			 * (storeIssueMList2.size() > 0) { for (StoreIssueM storeIssueM2 :
			 * storeIssueMList2) { issueTempId = Integer.parseInt("" +
			 * storeIssueM2.getId()); issueNo = "" + storeIssueM2.getIssueNo();
			 * } // ---------------End of Finding Adjusted loanout //
			 * Id------------------------ }
			 */
			/*
			 * storeFyDocumentNoList = getHibernateTemplate().find("from
			 * jkt.hms.masters.business.StoreFyDocumentNo as sfdn where
			 * sfdn.Department.Id='"+deptId+"' "); for (StoreFyDocumentNo
			 * storeFyDocumentNo :storeFyDocumentNoList ) {
			 * if(storeFyDocumentNo.getIssueDeptNo() !=null){
			 * no=(""+storeFyDocumentNo.getIssueDeptNo()); }else{ no=""; } }
			 */
			List<String> issueNoList = new ArrayList<String>();
			issueNoList = session.createCriteria(StoreIssueM.class)
					.setProjection(Projections.property("IssueNo")).list();

			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {

					no = ((String) issueNoList.get(i));
				}
			}
			String deptType = "";
			if (dataMap.get("deptType") != null) {
				deptType = (String) dataMap.get("deptType");
			}
			if (issueId == 0) {
				Map<String, Object> maxMap = new HashMap<String, Object>();
				maxMap.put("no", no);
				maxMap.put("deptType", deptType);
				String patientIssueNo = "";

				no = getMaxNoByDeptCode(maxMap);

				// no = getMaxNo(no);
				storeIssueM = new StoreIssueM();
				storeIssueM.setIssueNo(no);
				// }

				StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
				storeInternalIndentM.setId(internalIndentId);
				storeIssueM.setRequestNo(storeInternalIndentM);

				MasEmployee employee = new MasEmployee();
				employee.setId(approvedBy);
				storeIssueM.setApprovedBy(employee);

				MasEmployee employee2 = new MasEmployee();
				employee2.setId(requestedBy);
				storeIssueM.setRequestBy(employee2);

				MasEmployee employee3 = new MasEmployee();
				employee3.setId(issuedBy);
				storeIssueM.setIssuedBy(employee3);

				MasDepartment department1 = new MasDepartment();
				department1.setId(deptId);
				storeIssueM.setDepartment(department1);

				MasDepartment department = new MasDepartment();
				department.setId(despenceryName);
				storeIssueM.setToStore(department);
				storeIssueM.setDocNo(refNo);
				storeIssueM.setStatus("o");
				storeIssueM.setIssueType("i");
				SimpleDateFormat formatterIn2 = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut2 = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(date));
				Date issueDate2 = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate2);
				storeIssueM.setToUnit(null);
				storeIssueM.setToDepot(null);

				MasHospital hospital = new MasHospital();
				hospital.setId(hospitalId);
				storeIssueM.setHospital(hospital);

				storeIssueM.setLastChgDate(new Date(date));
				Users users = new Users();
				users.setId(userId);
				storeIssueM.setLastChgBy(users);
				storeIssueM.setLastChgTime(time);

				storeIssueM.setRequestDate(new Date(date));

				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);
			} else {
				storeIssueM = (StoreIssueM) getHibernateTemplate().load(
						StoreIssueM.class, issueId);
			}
			// String qryForId="SELECT id FROM store_issue_m s where
			// issue_no='"+no+"' and department_id='"+deptId+"';";
			// List objectList = (List) session.createSQLQuery(qryForId).list();
			// issueTempId=Integer.parseInt(""+objectList.get(0));

			// StoreIssueM tempStoreIssueM = new StoreIssueM();
			// tempStoreIssueM.setId(issueTempId);

			for (StoreInternalIndentT storeInternalIndentT : storeInternalIndentTList) {
				StoreIssueT storeIssueT = new StoreIssueT();
				storeIssueT.setIssueM(storeIssueM);
				MasStoreItem masStoreItem = new MasStoreItem();

				if (storeInternalIndentT.getItem() != null) {
					masStoreItem.setId(storeInternalIndentT.getItem().getId());
					storeIssueT.setItem(masStoreItem);
					// storeIssueT.setItemIssued(masStoreItem);
				}
				BigDecimal bigDecimal = new BigDecimal(
						storeInternalIndentT.getQtyRequest());
				storeIssueT.setQtyRequest(bigDecimal);
				storeIssueT.setIssueM(storeIssueM);
				// storeIssueT.setBrand(null);
				storeIssueT.setSrNo(storeInternalIndentT.getSrNo());
				storeIssueT.setIssued("n");
				storeIssueT.setQtyIssued(new BigDecimal(0));
				storeIssueT.setItemOrder("1");
				hbt.save(storeIssueT);
				hbt.refresh(storeIssueT);
			}

			// -----End of Fetching records from Internal Indent & storing in
			// Issue-----
			int StoreFyDocumentNoId = 1;
			// StoreFyDocumentNo
			// storeFyDocumentNo=(StoreFyDocumentNo)getHibernateTemplate().load(StoreFyDocumentNo.class,StoreFyDocumentNoId);
			// storeFyDocumentNo.setIssueCivNo(issueNo);
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			// storeFyDocumentNo.setIssueDeptReturnNo(issueNo);
			storeFyDocumentNo.setIssueDeptNo(issueNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
			StoreInternalIndentM internalIndentM = (StoreInternalIndentM) getHibernateTemplate()
					.load(StoreInternalIndentM.class, internalIndentId);
			internalIndentM.setStatus("p");
			hbt.update(internalIndentM);
			searchListForPopup = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
							+ deptId + "' and sim.Status='o'");
			// --------------Transaction End----------
			tx.commit();
		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} // finally {
			// --------Session Closing----------
			// session.close();

		// }
		if (issueId == 0) {
			map.put("issueId", storeIssueM.getId());
		}
		map.put("searchListForPopup", searchListForPopup);
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	/*
	 * Methods ending for CIV Issue changes by vikas
	 */

	public Map<String, Object> checkHinExistence(Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		Session session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}

			String hinNo = "" + dataMap.get("hinNo");
			Criteria c = session.createCriteria(Patient.class).add(
					Restrictions.eq("HinNo", hinNo));
			patientList = c.list();
			map.put("patientList", patientList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map openDeletePopupForIssueciv(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		Map map = new HashMap();
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		deleteStoreIssueList = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
						+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		return map;
	}

	public Map showDeleteIsuueCiv(Box box) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}

		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		Session session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}
		String qry = "SELECT i.item_id,item2.pvms_no,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id,i.item_from_indent,i.batch_no,i.cost_price,.brand.brand_name,i.id FROM store_issue_t i,mas_store_item item,mas_store_item item2,mas_store_brand brand where  i.issue_m_id='"
				+ issueId
				+ "'and i.brand_id=brand.brand_id and item.item_id=i.item_id  and item2.item_id=i.item_issued and  i.issued='y';";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String pvmsNo = "";
		String issuedItemName = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		int issueMId = 0;
		String itemFromIndent = "y";
		String batchNo = "";
		BigDecimal costPrice = null;
		String brandName = "";
		int issueTId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				pvmsNo = (String) object[1];
			} catch (Exception e) {
				pvmsNo = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}
			try {
				itemFromIndent = "" + object[6];
			} catch (Exception e) {
				e.printStackTrace();
				itemFromIndent = "y";
			}
			try {
				batchNo = "" + object[7];
			} catch (Exception e) {
				e.printStackTrace();
				batchNo = "";
			}
			try {
				costPrice = (BigDecimal) object[8];
			} catch (Exception e) {
				e.printStackTrace();
				costPrice = new BigDecimal("0");
			}
			try {
				brandName = (String) object[9];
			} catch (Exception e) {
				e.printStackTrace();
				brandName = "";
			}
			try {
				issueTId = (Integer) object[10];
			} catch (Exception e) {
				e.printStackTrace();
				issueTId = 0;
			}
			hData = new HashMap<String, Object>();

			hData.put("pvmsNo", pvmsNo);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);
			hData.put("batchNo", batchNo);
			hData.put("costPrice", costPrice);
			hData.put("brandName", brandName);
			hData.put("issueTId", issueTId);
			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deleteStoreIssueList = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
						+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map deleteIssueCivItems(Box box) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}

		Session session = (Session) getSession();
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		Transaction tx = null;
		BigDecimal stock = null;
		BigDecimal issueQty = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector itemIdVector = box.getVector("itemId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			Vector itemFromIndentList = box.getVector("itemFromIndent");
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int issueId = Integer.parseInt(delete.get(i).toString());
				int itemId = Integer.parseInt(itemIdVector.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				String itemFromIndent = (itemFromIndentList.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------
				tempList = hbt
						.find("from jkt.hms.masters.business.StoreIssueT as a where a.Id='"
								+ issueId + "' ");

				// for(StoreIssueT storeIssueT3 :tempList){
				StoreIssueT storeIssueT3 = tempList.get(0);
				if (storeIssueT3.getBatchNo() != null) {
					// tempBrandId = storeIssueT3.getBrand().getId();
					BigDecimal bigDecimal = storeIssueT3.getQtyIssued();
					String batchNo = storeIssueT3.getBatchNo();
					BigDecimal costPrice = storeIssueT3.getCostPrice();
					int itemIdFromT = storeIssueT3.getItem().getId();
					Date expiryDate = storeIssueT3.getExpiryDate();
					String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id='"
							+ tempBrandId
							+ "' and item_id='"
							+ itemIdFromT
							+ "' and batch_no='"
							+ batchNo
							+ "' and cost_price='"
							+ costPrice
							+ "' and expiry_date='" + expiryDate + "'";
					List c = (List) session.createSQLQuery(qry2).list();

					Object[] object = (Object[]) c.get(0);
					if (object[0] == null) {
						stock = new BigDecimal("0");
					} else {
						stock = (BigDecimal) object[0];
					}
					// Float issueqty=Float.parseFloat(object[1].toString());
					if (object[1] == null) {
						issueQty = new BigDecimal("0");
					} else {
						issueQty = (BigDecimal) object[1];
					}
					logger.debug(":::::::tore item batch stock::::::" + stock);
					stock = stock.add(bigDecimal);

					issueQty = issueQty.subtract(bigDecimal);
					List storeItemList = session
							.createCriteria(StoreItemBatchStock.class)
							.createAlias("Item", "item")
							.createAlias("Brand", "brand")
							.add(Restrictions.eq("BatchNo", batchNo))
							.add(Restrictions.eq("item.Id", itemIdFromT))
							.add(Restrictions.eq("brand.Id", tempBrandId))
							.add(Restrictions.eq("CostPrice", costPrice))
							.add(Restrictions.eq("ExpiryDate", expiryDate))
							.list();

					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemList
							.get(0);
					int storeId = storeItemBatchStock.getId();
					StoreItemBatchStock storeItemBatchStock2 = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class, storeId);
					storeItemBatchStock2.setClosingStock(stock);
					storeItemBatchStock2.setIssueQty(issueQty);
					hbt.update(storeItemBatchStock2);
					hbt.refresh(storeItemBatchStock2);

				}
				// --------------------------End of Stock
				// Updating--------------------------
				String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.Id='"
						+ issueId + "' ";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();

				if (itemFromIndent.equals("y")) {
					MasStoreItem storeItem = new MasStoreItem();
					storeItem.setId(itemId);
					storeIssueT2.setItem(storeItem);

					StoreIssueM issueM = new StoreIssueM();
					issueM.setId(issueId);
					storeIssueT2.setIssueM(issueM);
					storeIssueT2.setQtyRequest(qtyReq);
					storeIssueT2.setQtyIssued(new BigDecimal(0));
					storeIssueT2.setIssued("n");
					// storeIssueT2.setBrand(null);
					MasStoreItem storeItem2 = new MasStoreItem();
					storeItem2.setId(itemId);
					// storeIssueT2.setItemIssued(storeItem);
					hbt.save(storeIssueT2);
				}
			}

			deleteStoreIssueList = hbt
					.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='i'  and sim.Status='o' and sim.Department.Id='"
							+ deptId + "'");
			map.put("deleteStoreIssueList", deleteStoreIssueList);
			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}

		/*
		 * if (Integer.parseInt(map.get("total_records").toString()) ==
		 * Integer.parseInt(map.get("deleted_records").toString())) {
		 * (box.getInt("currPage") > 1)
		 * box.put("currPage",box.getInt("currPage")-1); }
		 */

		map = showDeleteIsuueCiv(box);
		return map;
	}

	public List<MasStoreItem> getItemList() {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		itemList = (List<MasStoreItem>) hbt
				.find("from jkt.hms.masters.business.MasStoreItem as mis where mis.Status='y'  and mis.Id<100 order by nomenclature");
		return itemList;
	}

	public Map<String, Object> getHinNo(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		Session session = (Session) getSession();
		int deptId = 0;
		int hospitalId = 0;
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			String str = (String) dataMap.get("autoHint") + "%";
			Criteria c = session.createCriteria(Patient.class)
					.add(Restrictions.like("HinNo", str))
					.add(Restrictions.eq("Hospital.Id", hospitalId));
			c.setFirstResult(0);
			c.setMaxResults(10);
			patientList = c.list();
			map.put("patientList", patientList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> adjustLoanOut(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> dateMap = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> storeIssueMLoanOutList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTLoanOutList = new ArrayList<StoreIssueT>();
		GregorianCalendar gregorianCalendar = new GregorianCalendar();
		int currentMonth = gregorianCalendar.get(Calendar.MONTH) + 1;
		int currentYear = Integer.parseInt(""
				+ gregorianCalendar.get(Calendar.YEAR));
		int month = 0;
		int year = 0;
		java.sql.Date startDate = null;
		java.sql.Date endDate = null;
		int issueMId = 0;
		int toStoreId = 0;
		int tempIssueMId = 0;
		int deptId = 0;
		int hospitalId = 0;
		String no = "";
		String max = "";
		String successfullyAdded = "n";
		String monthAndYear = "";
		String messageTOBeVisibleToTheUser = "";
		int issueId = 0;
		if (dataMap.get("issueMId") != null) {
			issueMId = Integer.parseInt("" + dataMap.get("issueMId"));
		}
		if (dataMap.get("toStoreId") != null) {
			toStoreId = Integer.parseInt("" + dataMap.get("toStoreId"));
		}
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (currentMonth == 1) {
			currentMonth = 12;
			currentYear = currentYear - 1;
			monthAndYear = (currentYear + "-" + currentMonth);

		} else {
			if (currentMonth <= 10) {
				monthAndYear = (currentYear + "-0" + (currentMonth - 1));
			} else {
				monthAndYear = (currentYear + "-" + (currentMonth - 1));
			}
		}

		String date = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		date = (String) utilMap.get("currentDate");
		int storefyId = 0;
		Transaction tx = null;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date22 = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn1 = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut1 = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut1.format(formatterIn1
					.parse(date22));
			Date currentDate = java.sql.Date.valueOf(date4MySQL1);
			// storeIssueMList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueM as sim where sim.IssueDate
			// <='"+currentDate+"' and sim.IssueType='l' and sim.Status='o' and
			// sim.Department.Id='"+deptId+"' and
			// sim.ToStore.Id='"+toStoreId+"'");
			storeIssueMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l'  and sim.Status='o' and sim.Department.Id= "
							+ deptId);
			storeFyDocumentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				storefyId = storeFyDocumentNo.getId();
				if (storeFyDocumentNo.getIssueDeptNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueDeptNo());
				} else {
					no = "";
				}
			}
			String deptType = "";
			if (dataMap.get("deptType") != null) {
				deptType = (String) dataMap.get("deptType");
			}
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			String patientIssueNo = "";

			no = getMaxNoByDeptCode(maxMap);
			// max = getMaxNo(no);

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storefyId);
			storeFyDocumentNo.setIssueDeptNo(max);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
			StoreIssueM storeIssueMTemp = new StoreIssueM();
			storeIssueMTemp.setIssueNo(max);
			storeIssueMTemp.setIssueType("i");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
			storeIssueMTemp.setIssueDate(issueDate);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(deptId);
			storeIssueMTemp.setDepartment(masDepartment);
			MasDepartment masDepartment1 = new MasDepartment();
			masDepartment1.setId(toStoreId);
			storeIssueMTemp.setToStore(masDepartment1);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId((Integer) dataMap.get("requestBy"));
			storeIssueMTemp.setRequestBy(masEmployee);
			MasEmployee masEmp = new MasEmployee();
			masEmp.setId((Integer) dataMap.get("approvedBy"));
			storeIssueMTemp.setApprovedBy(masEmp);
			MasEmployee masEmp1 = new MasEmployee();
			masEmp1.setId((Integer) dataMap.get("issuedBy"));
			storeIssueMTemp.setIssuedBy(masEmp1);
			storeIssueMTemp.setStatus("o");
			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			storeIssueMTemp.setHospital(masHospital);
			storeIssueMTemp.setRequestNo(new StoreInternalIndentM(Integer
					.parseInt(dataMap.get("demandNo").toString())));
			hbt.save(storeIssueMTemp);

			for (StoreIssueM storeIssueM : storeIssueMList) {
				tempIssueMId = storeIssueM.getId();
				if (tempIssueMId != 0) {
					storeIssueTList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreIssueT as sit where sit.IssueM.Id='"
									+ tempIssueMId + "'");
					for (StoreIssueT storeIssueT : storeIssueTList) {

						StoreIssueT storeIssueTTemp = new StoreIssueT();

						MasStoreItem item = new MasStoreItem();
						item.setId(storeIssueT.getItem().getId());
						storeIssueTTemp.setItem(item);

						storeIssueTTemp.setQtyRequest(storeIssueT
								.getQtyRequest());
						// storeIssueTTemp.setItemIssued(item);
						storeIssueTTemp.setBatchNo(storeIssueT.getBatchNo());
						storeIssueTTemp
								.setQtyIssued(storeIssueT.getQtyIssued());
						storeIssueTTemp.setRemarks(storeIssueT.getRemarks());
						storeIssueTTemp.setExpiryDate(storeIssueT
								.getExpiryDate());

						storeIssueTTemp
								.setCostPrice(storeIssueT.getCostPrice());
						storeIssueTTemp.setIssueM(storeIssueMTemp);

						MasStoreBrand brand = new MasStoreBrand();
						// brand.setId(storeIssueT.getBrand().getId());
						// storeIssueTTemp.setBrand(brand);

						storeIssueTTemp.setSrNo(storeIssueT.getSrNo());
						storeIssueTTemp.setIssued("y");
						storeIssueTTemp.setItemOrder("2");
						// storeIssueTTemp.setItemFromIndent("y");
						hbt.save(storeIssueTTemp);

						BigDecimal loanOutQty = null;
						String qry3 = "select loan_out_qty,closing_stock from store_item_batch_stock as a where a.brand_id='"
								+ storeIssueT.getBrandId()
								+ "'and a.department_id='"
								+ storeIssueT.getIssueM().getDepartment()
										.getId()
								+ "'and a.batch_no='"
								+ storeIssueT.getBatchNo()
								+ "'and a.cost_price='"
								+ storeIssueT.getCostPrice() + "';";
						List c2 = (List) session.createSQLQuery(qry3).list();
						// for (Iterator iterator = c2.iterator();
						// iterator.hasNext();) {
						Object[] object = (Object[]) c2.get(0);

						if (object[0] == null) {
							loanOutQty = new BigDecimal("0");
						} else {
							loanOutQty = (BigDecimal) object[0];
						}

						// String hql2="update from
						// jkt.hms.masters.business.StoreItemBatchStock as a set
						// a.ClosingStock='"+loanOutQty.add(new
						// BigDecimal(""+storeIssueT.getQtyIssued()))+"' where
						// a.Brand.Id='"+brandId.get(i)+"'and
						// a.Department.Id='"+deptId+"'and a.BatchNo='"+
						// batchNo.get(i)+"'and a.CostPrice='"+costprice+"'";
						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.LoanOutQty='"
								+ loanOutQty.subtract(new BigDecimal(""
										+ storeIssueT.getQtyIssued()))
								+ "'  where a.Brand.Id='"
								+ storeIssueT.getBrandId()
								+ "'and a.Department.Id='"
								+ storeIssueT.getIssueM().getDepartment()
										.getId()
								+ "'and a.BatchNo='"
								+ storeIssueT.getBatchNo()
								+ "'and a.CostPrice='"
								+ storeIssueT.getCostPrice() + "'";
						Query query2 = session.createQuery(hql3);
						int row2 = query2.executeUpdate();
						// Query query3 = session.createQuery(hql2);
						// int row3 = query3.executeUpdate();

					}
					for (StoreIssueT storeIssueT : storeIssueTList) {
						StoreIssueM storeIssueM3 = (StoreIssueM) getHibernateTemplate()
								.load(StoreIssueM.class,
										storeIssueT.getIssueM().getId());
						storeIssueM3.setStatus("p");
						hbt.update(storeIssueM3);
						hbt.refresh(storeIssueM3);
					}

				} else {
					if (tx != null) {
						tx.rollback();
					}
					successfullyAdded = "n";
					messageTOBeVisibleToTheUser = "Current month  Issue is not Created  ";
				}
			}

			// --------------Transaction Ended----------
			tx.commit();
			successfullyAdded = "y";
		} catch (Exception e) {
			// --------------In case of Transaction Failure----------
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} // finally {
			// --------Session Closing----------
			// session.close();
		// }
		storeIssueMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreIssueM as sit where sit.Department.Id='"
						+ deptId + "' and sit.IssueNo='" + max
						+ "' and sit.IssueType='i'");
		for (StoreIssueM issueM : storeIssueMList) {
			issueId = issueM.getId();
		}
		map.put("issueId", issueId);
		map.put("successfullyAdded", successfullyAdded);
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		return map;
	}

	public Map<String, Object> getItemListForIssueToDispensary(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List stockIdList = new ArrayList();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;

		try {

			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			Date issueDate = java.sql.Date.valueOf(date4MySQL);
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			issueId = Integer.parseInt("" + dataMap.get("issueId"));
			List objectList = new ArrayList();
			String str = (String) dataMap.get("autoHint") + "%";
			String qry = " SELECT item_id FROM store_issue_t where issue_m_id='"
					+ issueId + "'";

			String qry2 = "SELECT item_id FROM store_item_batch_stock where department_id='"
					+ deptId
					+ "' and closing_stock >0 and  expiry_date>'"
					+ issueDate + "'; ";
			stockIdList = (List) session.createSQLQuery(qry2).list();

			objectList = (List) session.createSQLQuery(qry).list();
			/*
			 * if((objectList.size() > 0)&&(stockIdList.size()>0)){
			 * 
			 * Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions
			 * .like("Nomenclature",str)) .add(Restrictions.eq("Department.Id",
			 * deptId)) .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.not(Restrictions.in("Id", objectList)));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 * }else if((stockIdList.size()>0)){ Criteria c =
			 * session.createCriteria
			 * (MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			 * .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.eq("Department.Id", deptId));
			 * 
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list(); }
			 */
			if ((stockIdList.size() > 0)) {
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.in("Id", stockIdList))
						.add(Restrictions.eq("Department.Id", deptId));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	// ----------------------------End Of Issues To Dispensary (CIV)
	// ----------------------

	// ----------------------------Start Of Issues To Dispensary Loan Out
	// ----------------------

	public Map<String, Object> getItemListForLoanoutByAutocomplete(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = (String) dataMap.get("autoHint") + "%";
			Integer[] ob = { 1750, 1063 };
			Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.like("Nomenclature", str))
					.add(Restrictions.not(Restrictions.in("Id", ob)));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	public Map<String, Object> openDeletePopupForIssueLoanOut(Map dataMap) {
		Map map = new HashMap();
		int deptId = 0;
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		hbt.setFlushModeName("FLUSH_EAGER");
		deleteStoreIssueList = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l'  and sim.Status='o' and sim.Department.Id='"
						+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		return map;
	}

	public Map showDeleteIsuueLoanout(Box box) {

		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		Session session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int departmentIdTemp = 0;
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		departmentIdTemp = Integer.parseInt("" + box.get("issueId"));

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}
		String qry = "SELECT i.item_id,item.nomenclature,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id FROM store_issue_t i,mas_store_item item,mas_store_item item2 where  i.issue_m_id='"
				+ issueId
				+ "' and item.item_id=i.item_id  and item2.item_id=i.item_issued and  i.issued='y' group by i.item_id;";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String issuedItemName = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		int issueMId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				nomenclature = (String) object[1];
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}
			hData = new HashMap<String, Object>();

			hData.put("nomenclature", nomenclature);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deleteStoreIssueList = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l'  and sim.Status='o' and sim.Department.Id='"
						+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;

	}

	public Map deleteIssueLoanoutItems(Box box) {

		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		Session session = (Session) getSession();
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector issueMId = box.getVector("issueMId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			BigDecimal stock = null;
			BigDecimal loanOutQty = null;
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int item_id = Integer.parseInt(delete.get(i).toString());
				int issueId = Integer.parseInt(issueMId.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------
				tempList = hbt
						.find("from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
								+ issueId
								+ "' and a.Item.Id=  '"
								+ item_id
								+ "'  ");

				for (StoreIssueT storeIssueT3 : tempList) {
					if (storeIssueT3.getBrandId() != null) {
						tempBrandId = Integer.parseInt(""
								+ storeIssueT3.getBrandId());
						BigDecimal bigDecimal = new BigDecimal(""
								+ issuedQty.get(i));

						String qry2 = "select closing_stock,loan_out_qty from store_item_batch_stock where brand_id="
								+ tempBrandId;
						List c = (List) session.createSQLQuery(qry2).list();

						for (Iterator iterator = c.iterator(); iterator
								.hasNext();) {
							Object[] object = (Object[]) iterator.next();
							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}
							if (object[1] == null) {
								loanOutQty = new BigDecimal("1");
							} else {
								loanOutQty = (BigDecimal) object[1];
							}
						}
						stock = stock.add(bigDecimal);
						loanOutQty = loanOutQty.subtract(bigDecimal);
						String qry1 = "update store_item_batch_stock as s set s.closing_stock ='"
								+ stock
								+ "' where brand_id='"
								+ tempBrandId
								+ "' ";
						Query query1 = session.createSQLQuery(qry1);
						int row1 = query1.executeUpdate();
						String qry3 = "update store_item_batch_stock as s set s.loan_out_qty ='"
								+ loanOutQty
								+ "' where brand_id='"
								+ tempBrandId + "' ";
						Query query2 = session.createSQLQuery(qry3);
						int row2 = query2.executeUpdate();
					}
				}
				// --------------------------End of Stock
				// Updating--------------------------

				String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
						+ issueId + "' and a.Item.Id=  '" + item_id + "' ";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();
			}

			deleteStoreIssueList = hbt
					.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='l'  and sim.Status='o' and sim.Department.Id='"
							+ deptId + "'");
			map.put("deleteStoreIssueList", deleteStoreIssueList);
			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1) {
				box.put("currPage", box.getInt("currPage") - 1);
			}
		}

		map = showDeleteIsuueCiv(box);
		return map;

	}

	/*
	 * ---------------------start of methods for loan out
	 * functionality----------------------------
	 * 
	 * @see jkt.hms.stores.dataservice.StoresDataService#(java.util.Map)
	 */
	public Map showIssueDispensaryManualJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		// List<StoreInternalIndentT> storeInternalIndentTList = new
		// ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		// List<MasStoreBrand> masStoreBrandList= new
		// ArrayList<MasStoreBrand>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		String max = "";
		String startNo = "";
		String no = "";
		try {
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			storeInternalIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM");
			departmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			// masStoreAirForceDepotList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreAirForceDepot");
			// itemList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreItem as it where it.Id<100 ");
			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueLoanoutNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueLoanoutNo());
				} else {
					no = "";
				}
			}
			// searchListForPopup=getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueM as sim where
			// sim.RequestType='m' and sim.IssueType and sim.DocType='l' and
			// sim.Status='o'");
			searchListForPopup = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
							+ deptId
							+ "' and sim.Status='o' and sim.IssueType='l'");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			max = getMaxNo(no);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		// map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("departmentList", departmentList);
		// map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		// map.put("itemList", itemList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		// map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		// map.put("patientList",patientList);
		return map;

	}

	public Map searchIssueLoanout(Box box) {
		int issueId = 0;
		int deptId = 0;
		String deptName = "";
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		Map<String, Object> pageMap = new HashMap<String, Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		StoreIssueM issueM = new StoreIssueM();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		deptId = Integer.parseInt("" + box.get("deptId"));
		Session session = (Session) getSession();
		Transaction tx = null;
		int pageNo = 1;
		String issued = "n";
		if (box.get("issueUnit") != null) {
			issueId = Integer.parseInt(box.get("issueUnit"));
		}
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		list = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.Id = '"
						+ issueId + "'");

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			StoreIssueM storeIssueM = (StoreIssueM) list.get(0);
			box.put("issueNo", storeIssueM.getIssueNo());

			if (storeIssueM.getDocNo() != null) {
				box.put("reference", storeIssueM.getDocNo());
			}

			box.put("departmentIdTemp", storeIssueM.getToStore().getId());

			box.put("requestBy", storeIssueM.getRequestBy().getId());
			box.put("approvedBy", storeIssueM.getApprovedBy().getId());
			box.put("issuedBy", storeIssueM.getIssuedBy().getId());
			box.put("requestNo", storeIssueM.getRequestNo().getId());

			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			storeIssueTList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.storeIssueTList as siim  where    siim.IssueM.Id='"
							+ issueId + "'");
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();
			box.put("deptName", deptName);
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}
		pageMap.put("issueId", issueId);
		pageMap.put("pageNo", pageNo);
		pageMap.put("deptId", deptId);
		map = getIssueDetailPageByPage(pageMap);
		map.put("box", box);
		map.put("storeIssueTList", storeIssueTList);

		return map;
	}

	public Map addBrandDetailsForLoanOut(Box box)
			throws java.text.ParseException {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));
		}
		if (box.get("userName") != null) {
			userName = ("" + box.get("userName"));
		}
		Map map = new HashMap();
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		String successfullyAdded = "n";
		int issueId = 0;
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int storeFyId = 0;
		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Vector brandId = box.getVector(BRAND_ID);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(RequestConstants.REMARKS);
			Vector batchNo = box.getVector(RequestConstants.BATCH_NO);
			Vector expDate = box.getVector(RequestConstants.EXPIRY_DATE);
			Vector costPrice = box.getVector(RequestConstants.COST_PRICE);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String issueNo = "" + box.get("issueNo");
			issueId = Integer.parseInt("" + box.get("issueId"));
			int departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			StoreIssueM storeIssueM = new StoreIssueM();
			if (issueId == 0) {
				storeIssueM.setIssueType("l");
				storeIssueM.setIssueNo(box.get("issueNo"));
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String dd = "" + box.get("issueDate");
				String date4MySQL = formatterOut.format(formatterIn.parse(dd));
				java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIssueM.setDepartment(masDepartment);
				MasDepartment masDepartment2 = new MasDepartment();
				masDepartment2.setId(Integer.parseInt(""
						+ box.get("departmentIdTemp")));
				storeIssueM.setToStore(masDepartment2);
				storeIssueM.setRequestNo(null);
				storeIssueM.setRequestDate(null);

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(Integer.parseInt("" + box.get("requestBy")));
				storeIssueM.setRequestBy(masEmployee);

				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setIssuedBy(masEmployee2);

				MasEmployee masEmployee3 = new MasEmployee();
				masEmployee3
						.setId(Integer.parseInt("" + box.get("approvedBy")));
				storeIssueM.setApprovedBy(masEmployee3);
				storeIssueM.setStatus("o");
				storeIssueM.setDocNo(box.get("docNo"));
				storeIssueM.setToUnit(null);
				storeIssueM.setToDepot(null);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(Integer.parseInt("" + box.get("hospitalId")));
				storeIssueM.setHospital(masHospital);
				Users users = new Users();
				users.setId(box.getInt("userId"));
				storeIssueM.setLastChgBy(users);
				storeIssueM.setLastChgDate(issueDate);
				storeIssueM.setLastChgTime(box.get("changed_time"));
				if ((box.get("patientName") != null)
						&& (!box.get("patientName").equals(""))) {
					String qry = "SELECT hin_id FROM patient where hin_no='"
							+ box.get("patientName") + "'";
					List listForHin = (List) session.createSQLQuery(qry).list();
					Integer hinId = (Integer) listForHin.get(0);
					Patient hin = new Patient();
					hin.setId(hinId);
					storeIssueM.setHin(hin);
				} else {
					storeIssueM.setHin(null);
				}
				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);
			} else {
				storeIssueM.setId(issueId);
			}
			for (int i = 0; i < brandId.size(); i++) {
				if (Integer.parseInt("" + qtyIssued.get(i)) != 0) {
					StoreIssueT storeIssueT = new StoreIssueT();
					BigDecimal costprice = null;
					if ((new BigDecimal("" + costPrice.get(i))) != (new BigDecimal(
							"0"))) {
						costprice = new BigDecimal("" + costPrice.get(i));
					} else {
						costprice = new BigDecimal("0");
					}

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem
							.setId(Integer.parseInt("" + box.get("itemId")));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setQtyRequest(new BigDecimal(0));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setBatchNo("" + batchNo.get(i));

					storeIssueT.setCostPrice(new BigDecimal("" + costprice));

					storeIssueT.setQtyIssued(new BigDecimal(""
							+ qtyIssued.get(i)));
					storeIssueT.setRemarks(box.get("remarks"));
					storeIssueT.setItemOrder("2");
					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(expDate.get(i).toString()));
					Date expDateT = java.sql.Date.valueOf(date4MySQL);
					try {
						storeIssueT.setExpiryDate(expDateT);
					} catch (Exception e) {
						storeIssueT.setExpiryDate(null);
					}

					MasStoreBrand brand = new MasStoreBrand();
					brand.setId(Integer.parseInt("" + brandId.get(i)));
					// storeIssueT.setBrand(brand);
					if (("" + remarks.get(i)).equals("emptyString")) {
						storeIssueT.setRemarks(null);
					} else {
						storeIssueT.setRemarks("" + remarks.get(i));
					}

					storeIssueT.setIssueM(storeIssueM);
					storeIssueT.setSrNo(0);
					storeIssueT.setIssued("y");
					// storeIssueT.setItemIssued(masStoreItem);
					hbt.save(storeIssueT);
					hbt.refresh(storeIssueT);

					// --------------------------Start of Stock
					// Updating--------------------------
					BigDecimal stock = null;
					BigDecimal loanOutQty = null;
					String qry3 = "select closing_stock,loan_out_qty from store_item_batch_stock as a where a.brand_id='"
							+ brandId.get(i)
							+ "'and a.department_id='"
							+ deptId
							+ "'and a.batch_no='"
							+ batchNo.get(i)
							+ "'and a.cost_price='" + costprice + "';";
					List c2 = (List) session.createSQLQuery(qry3).list();
					// for (Iterator iterator = c2.iterator();
					// iterator.hasNext();) {
					Object[] object = (Object[]) c2.get(0);
					if (object[0] == null) {
						stock = new BigDecimal("0");
					} else {
						stock = (BigDecimal) object[0];
					}
					if (object[1] == null) {
						loanOutQty = new BigDecimal("0");
					} else {
						loanOutQty = (BigDecimal) object[1];
					}

					String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
							+ stock.subtract(new BigDecimal(""
									+ qtyIssued.get(i)))
							+ "'  where a.Brand.Id='"
							+ brandId.get(i)
							+ "'and a.Department.Id='"
							+ deptId
							+ "'and a.BatchNo='"
							+ batchNo.get(i)
							+ "'and a.CostPrice='" + costprice + "'";
					String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.LoanOutQty='"
							+ loanOutQty.add(new BigDecimal(""
									+ qtyIssued.get(i)))
							+ "'  where a.Brand.Id='"
							+ brandId.get(i)
							+ "'and a.Department.Id='"
							+ deptId
							+ "'and a.BatchNo='"
							+ batchNo.get(i)
							+ "'and a.CostPrice='" + costprice + "'";
					Query query2 = session.createQuery(hql2);
					int row2 = query2.executeUpdate();
					Query query3 = session.createQuery(hql3);
					int row3 = query3.executeUpdate();

					// --------------------------End of Stock
					// Updating--------------------------
				}
			}
			String qry = "select id from store_issue_m where issue_no='"
					+ issueNo + "' and issue_type='l' and department_id='"
					+ deptId + "' and to_store='" + departmentIdTemp + "';";
			List objectList = (List) session.createSQLQuery(qry).list();
			issueId = Integer.parseInt("" + objectList.get(0));

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueLoanoutNo(issueNo);
			hbt.update(storeFyDocumentNo);
			// --------------Transaction End----------
			tx.commit();
			successfullyAdded = "y";
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		map.put("successfullyAdded", successfullyAdded);
		map.put("issueId", issueId);
		return map;
	}

	/*
	 * ---------------------End of methods for loan out
	 * functionality----------------------------
	 * 
	 * @see
	 * jkt.hms.stores.dataservice.StoresDataService#showIssueDispensaryManualJsp
	 * (java.util.Map)
	 */

	public Map<String, Object> fillItemsForIssueToDispensary(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = null;
		pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo));
			itemList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;

	}

	// ----------------------------End Of Issues To Dispensary Loan Out
	// ----------------------

	// --------------------------------Start Of Issues To Other Units on Surplus
	// (CIV) ---------------------------------
	public Map printIssueToOtherUnits(int issue_m_id) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		Session session = (Session) getSession();
		List<StoreIndentM> indentMList = new ArrayList<StoreIndentM>();
		Connection con = session.connection();
		String demanNo = "";
		String accountingUnit = "";
		String recieptVoucherNo = "";
		String period1 = "";
		String period2 = "";
		String unit1 = "";
		String unit2 = "";
		String address1 = "";
		String address2 = "";
		String depotNo = "";
		String civNo = "";
		String dated = "";
		String Hosp_Name = "";
		try {
			storeIssueMList = getHibernateTemplate().find(
					" from jkt.hms.masters.business.StoreIssueM as sim where sim.Id='"
							+ issue_m_id + "'");
			for (StoreIssueM storeIssueM : storeIssueMList) {
				Hosp_Name = storeIssueM.getHospital().getHospitalName();
				demanNo = "" + storeIssueM.getIssueNo();
				accountingUnit = "";
				recieptVoucherNo = "" + storeIssueM.getDocNo();
				period1 = "";
				period2 = "";
				unit1 = "" + storeIssueM.getDepartment().getDepartmentName();
				address1 = "CHAFB,Bangalore-7";
				address2 = "" + storeIssueM.getToUnit().getAirForceDepotName();
				civNo = "CIV" + storeIssueM.getIssueNo();
				dated = ""
						+ HMSUtil.changeDateToddMMyyyy(storeIssueM
								.getIssueDate());
				unit2 = "" + storeIssueM.getToUnit().getAirForceDepotName();
				depotNo = "";

			}
		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("demandNo", demanNo);
		map.put("accountingUnit", "");
		map.put("recieptVoucherNo", recieptVoucherNo);
		map.put("period1", period1);
		map.put("period2", period2);
		map.put("unit1", unit1);
		map.put("unit2", unit2);
		map.put("address1", address1);
		map.put("address2", address2);
		map.put("depotNo", depotNo);
		map.put("civNo", civNo);
		map.put("dated", dated);
		map.put("conn", con);
		map.put("Hosp_Name", Hosp_Name);
		return map;

	}

	public Map addBrandDetailsToOtherUnits(Box box)
			throws java.text.ParseException {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));
		}

		Map map = new HashMap();
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		String successfullyAdded = "n";
		int issueId = 0;
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Vector brandId = box.getVector(BRAND_ID);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(RequestConstants.REMARKS);
			Vector batchNo = box.getVector(RequestConstants.BATCH_NO);
			Vector expDate = box.getVector(RequestConstants.EXPIRY_DATE);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String issueNo = "" + box.get("issueNo");
			issueId = Integer.parseInt("" + box.get("issueId"));
			int departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			StoreIssueM storeIssueM = new StoreIssueM();
			if (issueId == 0) {
				storeIssueM.setIssueType("o");
				storeIssueM.setIssueNo(box.get("issueNo"));
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String dd = "" + box.get("issueDate");
				String date4MySQL = formatterOut.format(formatterIn.parse(dd));
				java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIssueM.setDepartment(masDepartment);
				MasStoreAirForceDepot masStoreAirForceDepot = new MasStoreAirForceDepot();
				masStoreAirForceDepot.setId(departmentIdTemp);
				storeIssueM.setToUnit(masStoreAirForceDepot);
				storeIssueM.setRequestNo(null);
				storeIssueM.setRequestDate(null);

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(Integer.parseInt("" + box.get("requestBy")));
				storeIssueM.setRequestBy(masEmployee);

				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setIssuedBy(masEmployee2);

				MasEmployee masEmployee3 = new MasEmployee();
				masEmployee3
						.setId(Integer.parseInt("" + box.get("approvedBy")));
				storeIssueM.setApprovedBy(masEmployee3);
				storeIssueM.setStatus("o");
				storeIssueM.setDocNo(box.get("docNo"));
				storeIssueM.setToDepot(null);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(Integer.parseInt("" + box.get("hospitalId")));
				storeIssueM.setHospital(masHospital);
				Users users = new Users();
				users.setId(box.getInt("userId"));
				storeIssueM.setLastChgBy(users);
				storeIssueM.setLastChgDate(issueDate);
				storeIssueM.setLastChgTime(box.get("changed_time"));

				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);
			} else {
				storeIssueM.setId(issueId);
			}
			for (int i = 0; i < brandId.size(); i++) {
				if (Integer.parseInt("" + qtyIssued.get(i)) != 0) {
					StoreIssueT storeIssueT = new StoreIssueT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem
							.setId(Integer.parseInt("" + box.get("itemId")));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setQtyRequest(new BigDecimal(0));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setBatchNo("" + batchNo.get(i));
					storeIssueT.setQtyIssued(new BigDecimal(""
							+ qtyIssued.get(i)));
					storeIssueT.setRemarks(box.get("remarks"));
					try {
						storeIssueT
								.setExpiryDate(new Date("" + expDate.get(i)));
					} catch (Exception e) {
						storeIssueT.setExpiryDate(null);
					}

					MasStoreBrand brand = new MasStoreBrand();
					brand.setId(Integer.parseInt("" + brandId.get(i)));
					// storeIssueT.setBrand(brand);
					if (("" + remarks.get(i)).equals("emptyString")) {
						storeIssueT.setRemarks(null);
					} else {
						storeIssueT.setRemarks("" + remarks.get(i));
					}

					storeIssueT.setIssueM(storeIssueM);
					storeIssueT.setSrNo(0);
					storeIssueT.setIssued("y");
					// storeIssueT.setItemIssued(masStoreItem);
					hbt.save(storeIssueT);
					hbt.refresh(storeIssueT);

					// --------------------------Start of Stock
					// Updating--------------------------
					BigDecimal stock = null;
					BigDecimal issueQty = null;
					for (int x = 0; x < qtyIssued.size(); x++) {
						String qry3 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id="
								+ brandId.get(i);
						List c2 = (List) session.createSQLQuery(qry3).list();

						for (Iterator iterator = c2.iterator(); iterator
								.hasNext();) {
							Object[] object = (Object[]) iterator.next();
							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}
							if (object[1] == null) {
								issueQty = new BigDecimal("1");
							} else {
								issueQty = (BigDecimal) object[1];
							}
						}

						String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
								+ stock.subtract(new BigDecimal(""
										+ qtyIssued.get(i)))
								+ "'  where a.Brand.Id='"
								+ brandId.get(i)
								+ "'";
						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
								+ issueQty.add(new BigDecimal(""
										+ qtyIssued.get(i)))
								+ "'  where a.Brand.Id='"
								+ brandId.get(i)
								+ "'";
						Query query2 = session.createQuery(hql2);
						int row2 = query2.executeUpdate();
						Query query3 = session.createQuery(hql3);
						int row3 = query3.executeUpdate();
					}
					// --------------------------Start of Stock
					// Updating--------------------------

				}
			}
			String qry = "select id from store_issue_m where issue_no='"
					+ issueNo + "' and issue_type='o' and department_id='"
					+ deptId + "' and to_unit='" + departmentIdTemp + "';";
			List objectList = (List) session.createSQLQuery(qry).list();
			issueId = Integer.parseInt("" + objectList.get(0));

			List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
			int storeFyId = 0;
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueOtherUnitsNo(issueNo);
			hbt.update(storeFyDocumentNo);

			// --------------Transaction End----------
			tx.commit();
			successfullyAdded = "y";
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		map.put("successfullyAdded", successfullyAdded);
		map.put("issueId", issueId);
		return map;
	}

	public Map<String, Object> openDeletePopupForIssueToOtherUnits(Map dataMap) {
		Map map = new HashMap();
		int departmentIdTemp = 0;
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		if (dataMap.get("departmentIdTemp") != null) {
			departmentIdTemp = Integer.parseInt(""
					+ dataMap.get("departmentIdTemp"));
		}
		hbt.setFlushModeName("FLUSH_EAGER");
		deleteStoreIssueList = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='o'  and sim.Status='o' and sim.ToUnit.Id=1");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		return map;
	}

	public Map showDeleteIsuueToOtherUnits(Box box) {

		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		Session session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int departmentIdTemp = 0;
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		departmentIdTemp = Integer.parseInt("" + box.get("issueId"));

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}
		String qry = "SELECT i.item_id,item.nomenclature,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id FROM store_issue_t i,mas_store_item item,mas_store_item item2 where  i.issue_m_id='"
				+ issueId
				+ "' and item.item_id=i.item_id  and item2.item_id=i.item_issued and  i.issued='y' group by i.item_id;";
		List objectList = (List) session.createSQLQuery(qry).list();

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String issuedItemName = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		int issueMId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				nomenclature = (String) object[1];
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}
			hData = new HashMap<String, Object>();

			hData.put("nomenclature", nomenclature);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		deleteStoreIssueList = hbt
				.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='o'  and sim.Status='o' and sim.Department.Id='"
						+ deptId + "'");
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;

	}

	public Map deleteIssueToOtherUnitsItems(Box box) {

		Session session = (Session) getSession();
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector issueMId = box.getVector("issueMId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			int deptId = Integer.parseInt("" + box.get("deptId"));
			BigDecimal stock = null;
			BigDecimal issueQty = null;
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int item_id = Integer.parseInt(delete.get(i).toString());
				int issueId = Integer.parseInt(issueMId.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------
				tempList = hbt
						.find("from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
								+ issueId
								+ "' and a.Item.Id=  '"
								+ item_id
								+ "'  ");

				for (StoreIssueT storeIssueT3 : tempList) {
					if (storeIssueT3.getBrandId() != null) {
						tempBrandId = Integer.parseInt(""
								+ storeIssueT3.getBrandId());
						BigDecimal bigDecimal = new BigDecimal(""
								+ issuedQty.get(i));

						String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id="
								+ tempBrandId;
						List c = (List) session.createSQLQuery(qry2).list();

						for (Iterator iterator = c.iterator(); iterator
								.hasNext();) {
							Object[] object = (Object[]) iterator.next();
							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}
							if (object[1] == null) {
								issueQty = new BigDecimal("1");
							} else {
								issueQty = (BigDecimal) object[1];
							}
						}
						stock = stock.add(bigDecimal);
						issueQty = issueQty.subtract(bigDecimal);
						String qry1 = "update store_item_batch_stock as s set s.closing_stock ='"
								+ stock
								+ "' where brand_id='"
								+ tempBrandId
								+ "' ";
						Query query1 = session.createSQLQuery(qry1);
						int row1 = query1.executeUpdate();
						String qry3 = "update store_item_batch_stock as s set s.issue_qty ='"
								+ issueQty
								+ "' where brand_id='"
								+ tempBrandId
								+ "' ";
						Query query2 = session.createSQLQuery(qry3);
						int row2 = query2.executeUpdate();
					}
				}
				// --------------------------End of Stock
				// Updating--------------------------

				String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
						+ issueId + "' and a.Item.Id=  '" + item_id + "' ";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();
			}
			deleteStoreIssueList = hbt
					.find("from jkt.hms.masters.business.StoreIssueM as sim where  sim.IssueType='o'  and sim.Status='o' and sim.Department.Id='"
							+ deptId + "'");
			map.put("deleteStoreIssueList", deleteStoreIssueList);
			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1) {
				box.put("currPage", box.getInt("currPage") - 1);
			}
		}

		map = showDeleteIsuueToOtherUnits(box);
		return map;

	}

	public Map showIssueToOtherUnitsJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		String max = "";
		String startNo = "";
		String no = "";
		try {
			patientList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			storeInternalIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM");
			departmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			masStoreAirForceDepotList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot");
			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo ");

			storeFyDocumentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueOtherUnitsNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueOtherUnitsNo());
				} else {
					no = "";
				}
			}
			searchListForPopup = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='o' and sim.Status='o' and sim.Department.Id='"
							+ deptId + "' ");

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			max = getMaxNo(no);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("patientList", patientList);
		return map;

	}

	public Map searchIssueToOtherUnits(Box box) {
		Map map = new HashMap();
		int issueId = 0;
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		try {
			issueId = Integer.parseInt("" + box.get("issueUnit"));
			list = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM as ss where ss.Id='"
							+ issueId + "'");
			for (StoreIssueM issueM : list) {
				box.put("issueId", issueId);
				box.put("issueNo", issueM.getIssueNo());
				box.put("departmentIdTemp", issueM.getToUnit().getId());
				box.put("docNo", issueM.getDocNo());
				box.put("requestBy", issueM.getRequestBy().getId());
				box.put("approvedBy", issueM.getApprovedBy().getId());
				box.put("issuedBy", issueM.getIssuedBy().getId());

			}
			map.put("box", box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreAirForceDepot> masStoreAirForceDepotList = new ArrayList<MasStoreAirForceDepot>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();

		String startNo = "";
		String no = "";
		try {
			patientList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			storeInternalIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM");
			departmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			masStoreAirForceDepotList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreAirForceDepot");
			itemList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreItem as it where it.Id<100 ");
			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo ");

			// searchListForPopup=getHibernateTemplate().find("from
			// jkt.hms.masters.business.StoreIssueM as sim where
			// sim.RequestType='m' and sim.IssueType and sim.DocType='l' and
			// sim.Status='o'");
			searchListForPopup = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM ");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("departmentList", departmentList);
		map.put("masStoreAirForceDepotList", masStoreAirForceDepotList);
		map.put("itemList", itemList);
		map.put("employeeList", employeeList);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("patientList", patientList);

		return map;
	}

	public Map<String, Object> getItemListThroughAjax(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = (String) dataMap.get("autoHint") + "%";
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIssueToDepot(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		try {
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", pvmsNo));
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	// -----------------------------------End Of Issues To Other Units on
	// Surplus (CIV) --------------------------------

	// --------------------------------Start Of Issues To Other Than Airforce
	// Units ---------------------------------

	public Map addBrandDetailsToOTAFU(Box box) throws java.text.ParseException {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (box.get("deptId") != null) {
			deptId = Integer.parseInt("" + box.get("deptId"));
		}
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + box.get("hospitalId"));
		}

		Map map = new HashMap();
		int itemId = 0;
		int detailId = 0;
		int itemIssuedIdArray[] = null;
		String qtyIssuedTempArray[] = null;
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		String successfullyAdded = "n";
		int issueId = 0;
		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			Vector brandId = box.getVector(BRAND_ID);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(RequestConstants.REMARKS);
			Vector batchNo = box.getVector(RequestConstants.BATCH_NO);
			Vector expDate = box.getVector(RequestConstants.EXPIRY_DATE);

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String issueNo = "" + box.get("issueNo");
			issueId = Integer.parseInt("" + box.get("issueId"));
			int departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			StoreIssueM storeIssueM = new StoreIssueM();
			if (issueId == 0) {
				storeIssueM.setIssueType("x");
				storeIssueM.setIssueNo(box.get("issueNo"));
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String dd = "" + box.get("issueDate");
				String date4MySQL = formatterOut.format(formatterIn.parse(dd));
				java.sql.Date issueDate = java.sql.Date.valueOf(date4MySQL);
				storeIssueM.setIssueDate(issueDate);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeIssueM.setDepartment(masDepartment);

				storeIssueM.setRequestNo(null);
				storeIssueM.setRequestDate(null);

				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(Integer.parseInt("" + box.get("requestBy")));
				storeIssueM.setRequestBy(masEmployee);

				MasUnit masUnit = new MasUnit();
				masUnit.setId(Integer.parseInt("" + box.get("departmentIdTemp")));
				storeIssueM.setOtafu(masUnit);

				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(Integer.parseInt("" + box.get("issuedBy")));
				storeIssueM.setIssuedBy(masEmployee2);

				MasEmployee masEmployee3 = new MasEmployee();
				masEmployee3
						.setId(Integer.parseInt("" + box.get("approvedBy")));
				storeIssueM.setApprovedBy(masEmployee3);
				storeIssueM.setStatus("o");
				storeIssueM.setDocNo(box.get("docNo"));
				storeIssueM.setToUnit(null);
				storeIssueM.setToDepot(null);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(Integer.parseInt("" + box.get("hospitalId")));
				storeIssueM.setHospital(masHospital);
				Users users = new Users();
				users.setId(box.getInt("userId"));
				storeIssueM.setLastChgBy(users);
				storeIssueM.setLastChgDate(issueDate);
				storeIssueM.setLastChgTime(box.get("changed_time"));

				hbt.save(storeIssueM);
				hbt.refresh(storeIssueM);
			} else {
				storeIssueM.setId(issueId);
			}
			for (int i = 0; i < brandId.size(); i++) {
				if (Integer.parseInt("" + qtyIssued.get(i)) != 0) {
					StoreIssueT storeIssueT = new StoreIssueT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem
							.setId(Integer.parseInt("" + box.get("itemId")));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setQtyRequest(new BigDecimal(0));
					storeIssueT.setItem(masStoreItem);
					storeIssueT.setBatchNo("" + batchNo.get(i));
					storeIssueT.setQtyIssued(new BigDecimal(""
							+ qtyIssued.get(i)));
					storeIssueT.setRemarks(box.get("remarks"));
					try {
						storeIssueT
								.setExpiryDate(new Date("" + expDate.get(i)));
					} catch (Exception e) {
						storeIssueT.setExpiryDate(null);
					}

					MasStoreBrand brand = new MasStoreBrand();
					brand.setId(Integer.parseInt("" + brandId.get(i)));
					// storeIssueT.setBrand(brand);
					if (("" + remarks.get(i)).equals("emptyString")) {
						storeIssueT.setRemarks(null);
					} else {
						storeIssueT.setRemarks("" + remarks.get(i));
					}

					storeIssueT.setIssueM(storeIssueM);
					storeIssueT.setSrNo(0);
					storeIssueT.setIssued("y");
					// storeIssueT.setItemIssued(masStoreItem);
					hbt.save(storeIssueT);
					hbt.refresh(storeIssueT);

					// --------------------------Start of Stock
					// Updating--------------------------
					BigDecimal stock = null;
					BigDecimal issueQty = null;
					for (int x = 0; x < qtyIssued.size(); x++) {
						String qry3 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id="
								+ brandId.get(i);
						List c2 = (List) session.createSQLQuery(qry3).list();

						for (Iterator iterator = c2.iterator(); iterator
								.hasNext();) {
							Object[] object = (Object[]) iterator.next();
							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}
							if (object[1] == null) {
								issueQty = new BigDecimal("1");
							} else {
								issueQty = (BigDecimal) object[1];
							}
						}

						String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock='"
								+ stock.subtract(new BigDecimal(""
										+ qtyIssued.get(i)))
								+ "'  where a.Brand.Id='"
								+ brandId.get(i)
								+ "'";
						String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
								+ issueQty.add(new BigDecimal(""
										+ qtyIssued.get(i)))
								+ "'  where a.Brand.Id='"
								+ brandId.get(i)
								+ "'";
						Query query2 = session.createQuery(hql2);
						int row2 = query2.executeUpdate();
						Query query3 = session.createQuery(hql3);
						int row3 = query3.executeUpdate();
					}
					// --------------------------Start of Stock
					// Updating--------------------------

				}
			}
			String qry = "select id from store_issue_m where issue_no='"
					+ issueNo + "' and issue_type='x' and department_id='"
					+ deptId + "' and otafu='" + departmentIdTemp + "';";
			List objectList = (List) session.createSQLQuery(qry).list();
			issueId = Integer.parseInt("" + objectList.get(0));

			int storeFyId = 0;
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueOtafuNo(issueNo);
			hbt.update(storeFyDocumentNo);

			// --------------Transaction End----------
			tx.commit();
			successfullyAdded = "y";
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		map.put("successfullyAdded", successfullyAdded);
		map.put("issueId", issueId);
		return map;
	}

	public Map<String, Object> openDeletePopupForIssueToOTAFU(Map dataMap) {
		Map map = new HashMap();
		int deptId = 0;
		Session session = (Session) getSession();
		List<StoreIssueM> deleteStoreIssueList = new ArrayList<StoreIssueM>();
		HibernateTemplate hbt = getHibernateTemplate();
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
		try {
			Criteria c = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("IssueType", "x"))
					.add(Restrictions.eq("Status", "o"))
					.add(Restrictions.eq("Department.Id", deptId));
			c.setFirstResult(0);
			c.setMaxResults(10);
			deleteStoreIssueList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("deptId", deptId);
		return map;
	}

	public Map showDeleteIsuueToOTAFU(Box box) {
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map map = new HashMap();
		HibernateTemplate hbt = getHibernateTemplate();
		Session session = (Session) getSession();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		int departmentIdTemp = 0;

		departmentIdTemp = Integer.parseInt("" + box.get("departmentIdTemp"));

		hbt.setFlushModeName("FLUSH_EAGER");
		int issueId = 0;
		if (box.get("issueId") != null) {
			issueId = Integer.parseInt("" + box.get("issueId"));
		}
		String qry = "SELECT i.item_id,item.nomenclature,item2.nomenclature,i.qty_request,i.qty_issued,i.issue_m_id FROM store_issue_t i,mas_store_item item,mas_store_item item2 where  i.issue_m_id = :issueId and item.item_id=i.item_id  and item2.item_id=i.item_issued and  i.issued='y' group by i.item_id;";
				//  + issueId //commented by amit das on 27-04-2017
		
		// added by amit das on 27-04-2017
		SQLQuery sqlQuery = session.createSQLQuery(qry);
		sqlQuery.setInteger("issueId", issueId);
		
		// List objectList = (List) session.createSQLQuery(qry).list(); //commented by amit das on 27-04-2017
		
		List objectList = (List) sqlQuery.list(); //added by amit das on 27-04-2017

		int id = 0;
		String nomenclature = null;
		int itemId = 0;
		int detailId = 0;
		String issuedItemName = null;
		BigDecimal requestedQty = null;
		BigDecimal issuedQty = null;
		int issueMId = 0;

		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			try {
				itemId = (Integer) object[0];
			} catch (Exception e) {
				e.printStackTrace();
				itemId = 0;
			}
			try {
				nomenclature = (String) object[1];
			} catch (Exception e) {
				nomenclature = "";
			}
			try {
				issuedItemName = (String) object[2];
			} catch (Exception e) {
				e.printStackTrace();
				issuedItemName = "";
			}
			try {
				requestedQty = new BigDecimal("" + object[3]);
			} catch (Exception e) {
				requestedQty = new BigDecimal("" + 0);
			}

			try {
				issuedQty = new BigDecimal("" + object[4]);
			} catch (Exception e) {
				e.printStackTrace();
				issuedQty = new BigDecimal("" + 0);
			}

			try {
				issueMId = (Integer) object[5];
			} catch (Exception e) {
				e.printStackTrace();
				issueMId = 0;
			}
			hData = new HashMap<String, Object>();

			hData.put("nomenclature", nomenclature);
			hData.put("issuedItemName", issuedItemName);
			hData.put("requestedQty", requestedQty);
			hData.put("issuedQty", issuedQty);
			hData.put("itemId", itemId);
			hData.put("issueMId", issueMId);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			Criteria c = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("IssueType", "x"))
					.add(Restrictions.eq("Status", "o"))
					.add(Restrictions.eq("Department.Id", deptId));
			c.setFirstResult(0);
			c.setMaxResults(10);
			deleteStoreIssueList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("deleteStoreIssueList", deleteStoreIssueList);
		map.put("pagedArray", pagedArray);
		return map;

	}

	public Map deleteIssueToOTAFU(Box box) {
		int deptId = 0;
		deptId = Integer.parseInt("" + box.get("deptId"));
		Session session = (Session) getSession();
		List<StoreIssueT> storeTenderTList = new ArrayList<StoreIssueT>();
		StoreIssueT storeIssueT = new StoreIssueT();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> deleteStoreIssueList = new ArrayList<StoreIssueT>();
		int departmentIdTemp = 0;
		Transaction tx = null;
		try {
			// --------------Transaction Started----------
			tx = session.beginTransaction();

			departmentIdTemp = Integer.parseInt(""
					+ box.get("departmentIdTemp"));
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector id = box.getVector("id");
			Vector nomenclature = box.getVector("nomenclature");
			Vector delete = box.getVector("items_to_be_deleted");
			Vector issueMId = box.getVector("issueMId");
			Vector qtyInReq = box.getVector("requestedQty");
			Vector issuedQty = box.getVector("issuedQty");
			BigDecimal stock = null;
			BigDecimal issueQty = null;
			String obj = null;
			int tempBrandId = 0;

			for (int i = 0; i < delete.size(); i++) {
				StoreIssueT storeIssueT2 = new StoreIssueT();
				int item_id = Integer.parseInt(delete.get(i).toString());
				int issueId = Integer.parseInt(issueMId.get(i).toString());
				BigDecimal qtyReq = new BigDecimal(qtyInReq.get(i).toString());
				List<StoreIssueT> tempList = new ArrayList<StoreIssueT>();

				// --------------------------Start of Stock
				// Updating--------------------------
				/*tempList = hbt
						.find("from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
								+ issueId
								+ "' and a.Item.Id=  '"
								+ item_id
								+ "'  ");*/
				// commented by amit das on 27-04-2017
				// added by amit das on 27-04-2017
				tempList = hbt
						.find("from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id=? and a.Item.Id= ?",issueId,item_id);
				

				for (StoreIssueT storeIssueT3 : tempList) {
					if (storeIssueT3.getBrandId() != null) {
						tempBrandId = Integer.parseInt(""
								+ storeIssueT3.getBrandId());
						BigDecimal bigDecimal = new BigDecimal(""
								+ issuedQty.get(i));

						/*String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id="
								+ tempBrandId;*/
						// commented by amit das on 27-04-2017
						// added by amit das on 27-04-2017
						String qry2 = "select closing_stock,issue_qty from store_item_batch_stock where brand_id= :tempBrandId";
						
						List c = (List) session.createSQLQuery(qry2).setInteger("tempBrandId", tempBrandId).list(); //edited by amit das on 27-04-2017

						for (Iterator iterator = c.iterator(); iterator
								.hasNext();) {
							Object[] object = (Object[]) iterator.next();
							if (object[0] == null) {
								stock = new BigDecimal("0");
							} else {
								stock = (BigDecimal) object[0];
							}
							if (object[1] == null) {
								issueQty = new BigDecimal("1");
							} else {
								issueQty = (BigDecimal) object[1];
							}
						}
						stock = stock.add(bigDecimal);
						issueQty = issueQty.subtract(bigDecimal);
						/*String qry1 = "update store_item_batch_stock as s set s.closing_stock ='"
								+ stock
								+ "' where brand_id='"
								+ tempBrandId
								+ "' ";*/
						// commented by amit das on 27-04-2017
						// added by amit das on 27-04-2017
						String qry1 = "update store_item_batch_stock as s set s.closing_stock = :stock where brand_id= :tempBrandId";
						
						Query query1 = session.createSQLQuery(qry1).setBigDecimal("stock", stock).setInteger("tempBrandId", tempBrandId); //edited by amit das on 27-04-2017
						int row1 = query1.executeUpdate();
						/*String qry3 = "update store_item_batch_stock as s set s.issue_qty ='"
								+ issueQty
								+ "' where brand_id='"
								+ tempBrandId
								+ "' ";*/
						// commented by amit das on 27-04-2017
						// added by amit das on 27-04-2017
						String qry3 = "update store_item_batch_stock as s set s.issue_qty = :issueQty where brand_id =:tempBrandId";
							
						Query query2 = session.createSQLQuery(qry3).setBigDecimal("issueQty", issueQty).setInteger("tempBrandId", tempBrandId); //edited by amit das on 27-04-2017
						int row2 = query2.executeUpdate();
					}
				}
				// --------------------------End of Stock
				// Updating--------------------------

				/*String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id='"
						+ issueId + "' and a.Item.Id=  '" + item_id + "' ";*/
				// commented by amit das on 27-04-2017
				// added by amit das on 27-04-2017
				String hql = "delete from jkt.hms.masters.business.StoreIssueT as a where a.IssueM.Id=:issueId and a.Item.Id= :item_id";
				
				Query query = session.createQuery(hql).setInteger("issueId", issueId).setInteger("item_id", item_id); //edited by amit das on 27-04-2017
				int row = query.executeUpdate();
			}

			try {
				Criteria c = session.createCriteria(StoreIssueM.class)
						.add(Restrictions.eq("IssueType", "x"))
						.add(Restrictions.eq("Status", "o"))
						.add(Restrictions.eq("Department.Id", deptId));
				c.setFirstResult(0);
				c.setMaxResults(10);
				deleteStoreIssueList = c.list();
			} catch (Exception e) {
				e.printStackTrace();
			}
			// map.put("deleteStoreIssueList",deleteStoreIssueList);
			map.put("total_records", id.size());
			map.put("deleted_records", delete.size());
			// --------------Transaction Ended----------
			tx.commit();

		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1) {
				box.put("currPage", box.getInt("currPage") - 1);
			}
		}

		map = showDeleteIsuueToOTAFU(box);
		return map;

	}

	public Map showIssueToOTAFUJsp(Map<String, Object> dataMap) {
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasUnit> masUnitList = new ArrayList<MasUnit>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();

		String max = "";
		String startNo = "";
		String no = "";

		try {
			departmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			masUnitList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasUnit");
			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id=?",deptId);
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getIssueOtafuNo() != null) {
					no = ("" + storeFyDocumentNo.getIssueOtafuNo());
				} else {
					no = "";
				}
			}
			max = getMaxNo(no);
			searchListForPopup = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM as sim where sim.IssueType='x' and sim.Status='o' and sim.Department.Id= ? ",deptId); //edited by amit das on 27-04-2017

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("departmentList", departmentList);
		map.put("masUnitList", masUnitList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		map.put("searchListForPopup", searchListForPopup);
		return map;

	}

	public Map searchIssueToOTAFU(Box box) {
		Map map = new HashMap();
		int issueId = 0;
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		try {
			issueId = Integer.parseInt("" + box.get("issueUnit"));
			list = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIssueM as ss where ss.Id= ?", issueId); // edited by amit das on 27-04-2017
							
			for (StoreIssueM issueM : list) {
				box.put("issueId", issueId);
				box.put("issueNo", issueM.getIssueNo());
				if (issueM.getOtafu() != null) {
					box.put("departmentIdTemp", issueM.getOtafu().getId());
				} else {
					box.put("departmentIdTemp", 0);
				}
				box.put("docNo", issueM.getDocNo());
				box.put("requestBy", issueM.getRequestBy().getId());
				box.put("approvedBy", issueM.getApprovedBy().getId());
				box.put("issuedBy", issueM.getIssuedBy().getId());

			}
			map.put("box", box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<MasUnit> masUnitList = new ArrayList<MasUnit>();

		String startNo = "";
		String no = "";
		try {
			masUnitList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasUnit as pt where pt.Status='y'");
			storeInternalIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM");
			departmentList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment");
			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");
			storeFyDocumentNoList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo ");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("storeInternalIndentMList", storeInternalIndentMList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("departmentList", departmentList);
		map.put("itemList", itemList);
		map.put("employeeList", employeeList);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("masUnitList", masUnitList);

		return map;
	}

	public Map<String, Object> getItemListThroughAjaxToOTAFU(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = (String) dataMap.get("autoHint") + "%";
			// Criteria c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str));
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIssueToOTAFU(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String queryString = null;
			String str = "" + dataMap.get("nomenclature");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;
	}

	public boolean addIndent(StoreIndentM storeIndentM)
			throws IllegalStateException, SystemException {
		return false;
	}

	public boolean addIndents(StoreIndentM storeIndentM, List list, Map map) {
		return false;
	}

	public Map<String, Object> getItemListForIssueToOTAFU(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int issueId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		issueId = Integer.parseInt("" + dataMap.get("issueId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			if (issueId != 0) {
				String qry = " SELECT item_id FROM store_issue_t where issue_m_id= :issueId";
				objectList = (List) session.createSQLQuery(qry).setInteger("issueId", issueId).list();
				Criteria c = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.not(Restrictions.in("Id", objectList)));
				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();
			} else {
				Criteria c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.add(Restrictions.eq("Department.Id", deptId));

				c.setFirstResult(0);
				c.setMaxResults(10);
				itemList = c.list();

			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillIssueToOTAFUBasedOnLotNo(
			Map<String, Object> dataMap) {
		List objectList = new ArrayList();
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String lotNo = null;
		lotNo = "" + dataMap.get("lotNo");
		int itemId = 0;
		try {
			String qry = "SELECT item_id FROM store_item_batch_stock where lot_no= :lotNo";
			objectList = (List) session.createSQLQuery(qry).setParameter("lotNo", lotNo).list();
			itemId = Integer.parseInt("" + objectList.get(0));
			if (itemId != 0) {
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				String queryString = null;
				String str = "" + dataMap.get("nomenclature");
				Criteria c = session.createCriteria(MasStoreItem.class).add(
						Restrictions.like("Id", itemId));
				itemList = c.list();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;

	}

	// -----------------------------------End Of Issues To Other Than Airforce
	// Units --------------------------------

	// ----------------------------Start Of Vendor Return ----------------------
	public Map<String, Object> getItemListForVendorReturn(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		int indentId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		indentId = Integer.parseInt("" + dataMap.get("indentId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			// String qry1 ="SELECT t.item_id FROM store_indent_t
			// t,store_indent_m m where t.indent_id='"+indentId+"' and
			// m.indent_id=t.indent_id";
			// String qry="select Distinct(sib.brand_id),brand.brand_name from
			// store_item_batch_stock as sib,mas_store_brand as brand where
			// sib.department_id='"+deptId+"' and sib.brand_id=brand.brand_id
			// and and brand.brand_name LIKE '"+str+";";
			// objectList = (List) session.createSQLQuery(qry).list();
			String query = "SELECT DISTINCT (sib.Brand.BrandName),sib.Brand.Id from  StoreItemBatchStock as sib where   sib.Brand.BrandName like '"
					+ str + "'";
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			Query q2 = session.createQuery(query);
			q2.setFirstResult(0);
			q2.setMaxResults(10);
			itemList = q2.list();
			// if(objectList.size()!=0){
			// Criteria c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			// .add(Restrictions.eq("Department.Id", deptId))
			// .add(Restrictions.not(Restrictions.in("Id", objectList)));
			// c.setFirstResult(0);
			// c.setMaxResults(10);
			// itemList = c.list();
			// }else{
			// Criteria c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			// .add(Restrictions.eq("Department.Id", deptId));
			// c.setFirstResult(0);
			// c.setMaxResults(10);
			// itemList = c.list();
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsForIndentToVendorReturn(
			Map<String, Object> dataMap) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String brandName = null;
		int item_id = 0;
		int deptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		brandName = "" + dataMap.get("brandName");
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		try {
			String qry = "SELECT item.item_id,item.pvms_no,item.nomenclature,brand.brand_id  FROM mas_store_item item,mas_store_brand brand where brand.brand_id=item.item_id and brand.brand_name='"
					+ brandName + "' ;";
			objectList = (List) session.createSQLQuery(qry).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;
	}

	public Map<String, Object> showVendorReturnJsp(Map<String, Object> map) {
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<StoreItemBatchStock> listOfItemsInStock = new ArrayList<StoreItemBatchStock>();
		// List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> issueReturnNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<StoreGrnReturnM> returnNoList = new ArrayList<StoreGrnReturnM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreGrnReturnM> searchList = new ArrayList<StoreGrnReturnM>();
		Session session = (Session) getSession();
		String returnNo = "";
		String finalReturnNo = "";
		int storeFyDocumentNoId = 0;
		String buttonFlag = "";
		String no = "";
		int deptId = 0;
		String max = "";
		if (map.get("buttonFlag") != null) {
			buttonFlag = (String) map.get("buttonFlag");
		}
		if (map.get("deptId") != null) {
			deptId = Integer.parseInt("" + map.get("deptId"));
		}
		try {
			storeFyDocumentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ deptId + "' ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getVendorReturnNo() != null) {
					no = ("" + storeFyDocumentNo.getVendorReturnNo());
				} else {
					no = "";
				}
			}
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as pt order by pt.SupplierName");
			searchList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreGrnReturnM as pt where pt.Status='y' and pt.Department.id='"
							+ deptId + "'");
			max = getMaxNo(no);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			deptList = session.createQuery(
					"select md from MasDepartment  as md where md.DepartmentType.Id="
							+ deptId).list();

			listOfItemsInStock = session
					.createQuery(
							"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ " group by sib.Id,sib.BatchNo,sib.CostPrice,sib.Item.Id,sib.Brand.Id,sib.Department.Id,sib.BlockedQty,sib.LotNo,sib.LoanOutQty,sib.LoanInQty,sib.DonatedItem,sib.FreeItem,sib.SalesTax,sib.DispencingPrice,sib.BarcodeNo,sib.Mrp ,sib.ClosingStock,sib.IssueReturn,sib.ReceiptReturnNonreturnable,sib.ReceiptReturnReturnable,sib.AdjustQty,sib.IssueQty,sib.ReceivedQty,sib.OpeningBalanceAmount,sib.OpeningBalanceQty,sib.OpeningBalanceDate,sib.ExpiryDate")
					.list();
			// brandList = session.createQuery("select
			// Distinct(sib.Brand.Id),sib.Brand.BrandName from
			// StoreItemBatchStock as sib where sib.Department.Id="+
			// deptId).list();
			employeeList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("Status", "y")).list();
			issueReturnNoList = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
							+ deptId).list();
			Iterator iterator = listOfItemsInStock.iterator();
			while (iterator.hasNext()) {
				Object[] pair = (Object[]) iterator.next();
				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) pair[0];
				BigDecimal qtyInHand = (BigDecimal) pair[1];
				String pvmsNo = storeItemBatchStock.getItem().getPvmsNo();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (!buttonFlag.equals("next")) {
			if (issueReturnNoList != null && issueReturnNoList.size() > 0) {
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) issueReturnNoList
						.get(0);
				returnNo = ("" + storeFyDocumentNo.getIssueDeptReturnNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				try {
					finalReturnNo = getMaxNo(returnNo);
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalReturnNo", finalReturnNo);
			}
		}
		map.put("listOfItemsInStock", listOfItemsInStock);
		map.put("issueReturnNoList", issueReturnNoList);
		// map.put("brandList", brandList);
		map.put("returnNoList", returnNoList);
		map.put("deptList", deptList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		map.put("supplierList", supplierList);
		map.put("searchList", searchList);

		return map;
	}

	public Map<String, Object> showStockDetailsForVendorReturn(
			Map<String, Object> map) {
		List listOfItemsInStock = new ArrayList();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int brandId = (Integer) map.get("brandId");
		try {
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = "";
			try {
				date4MySQL = formatterOut.format(formatterIn.parse(date));
			} catch (java.text.ParseException e) {
				e.printStackTrace();
			}
			Date issueDate = java.sql.Date.valueOf(date4MySQL);
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			listOfItemsInStock = session
					.createQuery(
							"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ " and sib.Brand.Id="
									+ brandId
									+ "and sib.ExpiryDate >"
									+ issueDate
									+ "and sib.ClosingStock>0"
									+ "group by sib.BatchNo,sib.CostPrice ")
					.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitVendorReturnDetails(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		String succesfullyAdded = "";
		String fromDateToDate = null;
		String issueType = "w";
		List<String> pvmsList = (List) dataMap.get("pvmsList");
		List<String> batchNumberList = (List) dataMap.get("batchNumberList");
		// List brandNameList = (List) dataMap.get("brandNameList");
		List expiryDateList = (List) dataMap.get("expiryDateList");
		List issQtyList = (List) dataMap.get("issQtyList");
		List costPriceList = (List) dataMap.get("costPriceList");
		List amountList = (List) dataMap.get("amountList");
		List storeItemBatchStockIdList = (List) dataMap
				.get("storeItemBatchStockIdList");
		List srNolist = (List) dataMap.get("srNolist");
		String date = (String) dataMap.get("date");
		String time = (String) dataMap.get("time");
		StoreGrnReturnM storeGrnReturnM = new StoreGrnReturnM();

		String returnDate = (String) dataMap.get("returnDate");
		String returnNo = (String) dataMap.get("returnNo");
		String referenceNo = (String) dataMap.get("referenceNo");
		String SONo = (String) dataMap.get("SONo");

		int returnById = (Integer) dataMap.get("returnById");

		String remarks = (String) dataMap.get("remarks");
		String reason = (String) dataMap.get("reason");

		int vendorId = (Integer) dataMap.get("vendorId");
		int hospitalId = (Integer) dataMap.get("hospitalId");
		String userName = (String) dataMap.get("userName");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreGrnReturnM> StoreGrnReturnMTemp = new ArrayList<StoreGrnReturnM>();
		int storeFyId = 0;
		int deptId = 0;
		int userId = 0;
		int approvedById = 0;
		int storeGrnReturnMId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		userId = Integer.parseInt("" + dataMap.get("userId"));
		if (dataMap.get("storeGrnReturnMId") != null) {
			storeGrnReturnMId = Integer.parseInt(""
					+ dataMap.get("storeGrnReturnMId"));
		}
		int itemId = Integer.parseInt("" + dataMap.get("itemId"));
		approvedById = Integer.parseInt("" + dataMap.get("approvedById"));
		Date dateToInsert = null;
		if (!date.equals("")) {
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		}
		Date returnDateForAdd = HMSUtil
				.convertStringTypeDateToDateType(returnDate);
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Transaction transaction = null;
		try {
			// --------------Transaction Started----------
			transaction = session.beginTransaction();
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));

			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setVendorReturnNo(returnNo);
			hbt.update(storeFyDocumentNo);

			if (storeGrnReturnMId == 0) {
				storeGrnReturnM.setReturnNo(returnNo);

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeGrnReturnM.setDepartment(masDepartment);

				MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
				masStoreSupplier.setId(vendorId);
				storeGrnReturnM.setSupplier(masStoreSupplier);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeGrnReturnM.setHospital(masHospital);

				storeGrnReturnM.setReturnDate(returnDateForAdd);
				storeGrnReturnM.setRefDocNo(referenceNo);

				MasEmployee employee = new MasEmployee();
				employee.setId(approvedById);
				storeGrnReturnM.setApprovedBy(employee);

				storeGrnReturnM.setReason(reason);
				storeGrnReturnM.setRemarks(remarks);

				MasEmployee returnBy = new MasEmployee();
				returnBy.setId(returnById);
				storeGrnReturnM.setReturnBy(returnBy);

				Users users = new Users();
				users.setId(userId);
				storeGrnReturnM.setLastChgBy(users);
				storeGrnReturnM.setLastChgDate(dateToInsert);
				storeGrnReturnM.setLastChgTime(time);
				storeGrnReturnM.setStatus("y");
				storeGrnReturnM.setSupplyOrderNo(SONo);
				hbt.save(storeGrnReturnM);
			} else {
				storeGrnReturnM.setId(storeGrnReturnMId);
			}
			Iterator itr = issQtyList.iterator();
			for (int i = 0; i < issQtyList.size(); i++) {
				BigDecimal totalQtyReturned;
				StoreGrnReturnT storeGrnReturnT = new StoreGrnReturnT();
				storeGrnReturnT.setGrnReturn(storeGrnReturnM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(pvmsList.get(i)));
				storeGrnReturnT.setItem(masStoreItem);
				StoreItemBatchStock storeItemBatchStock1 = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, Integer
								.parseInt((String) storeItemBatchStockIdList
										.get(i)));
				storeGrnReturnT.setBatchNo(storeItemBatchStock1.getBatchNo());
				storeGrnReturnT.setSrNo(Integer.parseInt(srNolist.get(i)
						.toString()));

				// MasStoreBrand masStoreBrand = new MasStoreBrand();
				// masStoreBrand.setId(Integer.parseInt("" +
				// brandNameList.get(i)));
				// storeGrnReturnT.setBrand(masStoreBrand);

				String expiryDate = (String) expiryDateList.get(i);
				if (expiryDate != null) {
					Date expiryDateToInsert = HMSUtil
							.convertStringTypeDateToDateType(expiryDate);
					storeGrnReturnT.setExpiryDate(expiryDateToInsert);
				} else {
					storeGrnReturnT.setExpiryDate(null);
				}
				BigDecimal issuedReturnFromJsp = new BigDecimal(""
						+ issQtyList.get(i));
				storeGrnReturnT.setReturnQty(issuedReturnFromJsp);
				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				storeGrnReturnT.setUnitRate(bigDecimal2);
				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				storeGrnReturnT.setReturnAmount(bigDecimal3);
				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));
				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock
						.getIssueReturn();
				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned.add(issuedReturnFromJsp);
				} else {
					totalQtyReturned = issuedReturnFromJsp;
				}
				BigDecimal closingStock = (BigDecimal) storeItemBatchStock
						.getClosingStock();
				closingStock = closingStock.subtract(issuedReturnFromJsp);
				storeItemBatchStock.setIssueReturn(totalQtyReturned);
				storeItemBatchStock.setClosingStock(closingStock);
				hbt.save(storeGrnReturnT);
				hbt.update(storeItemBatchStock);

			}

			Criteria c2 = session.createCriteria(StoreGrnReturnM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("ReturnNo", returnNo));
			StoreGrnReturnMTemp = (List<StoreGrnReturnM>) c2.list();
			for (StoreGrnReturnM grnReturnM : StoreGrnReturnMTemp) {
				storeGrnReturnMId = Integer.parseInt("" + grnReturnM.getId());
			}

			// --------------Transaction End----------
			transaction.commit();
			succesfullyAdded = "true";
		} catch (Exception e) {
			if (transaction != null) {
				transaction.rollback();
			}
			e.printStackTrace();
		}
		map.put("succesfullyAdded", succesfullyAdded);
		map.put("storeGrnReturnMId", storeGrnReturnMId);
		map.put("returnNo", returnNo);
		return map;
	}

	public Map<String, Object> showDeleteVendorReturn(Map<String, Object> map) {
		Session session = (Session) getSession();

		String returnNo = (String) map.get("returnNo");
		List<StoreGrnReturnM> storeReturnMList = session.createQuery(
				"select sim from StoreGrnReturnM as sim where sim.ReturnNo = '"
						+ returnNo + "'").list();
		if (storeReturnMList.size() > 0) {
			StoreGrnReturnM storeGrnReturnM = (StoreGrnReturnM) storeReturnMList
					.get(0);
			int returnId = storeGrnReturnM.getId();
			List<StoreGrnReturnT> storeReturnTList = session.createQuery(
					"select sit from StoreGrnReturnT as sit where sit.GrnReturn.Id='"
							+ returnId + "'").list();
			map.put("storeReturnTList", storeReturnTList);
		}

		return map;
	}

	public boolean deleteStockDetailsVendorReturn(Map<String, Object> map) {

		BigDecimal totalQtyReturned;
		boolean sucessfullyDeleted = false;
		Session session = (Session) getSession();
		int returnTId = (Integer) map.get("returnTId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreGrnReturnT tObj = (StoreGrnReturnT) hbt.load(
					StoreGrnReturnT.class, returnTId);
			int brandId = tObj.getBrand().getId();
			String batchNo = tObj.getBatchNo();
			BigDecimal costPrice = tObj.getUnitRate();
			BigDecimal qtyReturned = tObj.getReturnQty();
			String hql = "delete from StoreGrnReturnT as sit where sit.Id like :returnTId";
			Query query = session.createQuery(hql).setParameter("returnTId",
					returnTId);
			int row = query.executeUpdate();

			List storeItemBatchStockList = session.createQuery(
					"select sib  from StoreItemBatchStock as sib where sib.BatchNo="
							+ batchNo + "and sib.Brand.Id=" + brandId
							+ "and sib.CostPrice=" + costPrice).list();
			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
					.get(0);
			BigDecimal qtyReturnedFromDB = (BigDecimal) storeItemBatchStock
					.getIssueReturn();
			if (qtyReturned != null) {
				totalQtyReturned = qtyReturnedFromDB.subtract(qtyReturned);
			} else {
				totalQtyReturned = qtyReturnedFromDB;
			}
			BigDecimal closingStock = (BigDecimal) storeItemBatchStock
					.getClosingStock();
			closingStock = closingStock.add(qtyReturned);
			storeItemBatchStock.setIssueQty(totalQtyReturned);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.update(storeItemBatchStock);

			sucessfullyDeleted = true;
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return sucessfullyDeleted;
	}

	@SuppressWarnings({ "unchecked", "unused" })
	public Map<String, Object> searchVendorReturn(Map<String, Object> searchMap)
			throws ParseException {
		String fromDate = "";
		String toDate = "";
		int returnId = 0;
		int pageNo = 1;
		int firstResult = 0;
		int maxResults = 30;
		int departmentId = 0;
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		// if (searchMap.get("pageNo") != null) {
		// pageNo = Integer.parseInt("" + searchMap.get("pageNo"));
		// }
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> storeItemBatchStockList1 = new ArrayList<StoreItemBatchStock>();
		List<StoreInternalReturnM> searchReturnMList = new ArrayList<StoreInternalReturnM>();
		List<StoreGrnReturnT> searchReturnTList = new ArrayList<StoreGrnReturnT>();
		Session session = (Session) getSession();

		if (searchMap.get("departmentId") != null
				&& !searchMap.get("departmentId").equals("0")) {
			departmentId = (Integer) searchMap.get("departmentId");
		}

		if (searchMap.get("fromDate") != null
				&& searchMap.get("toDate") != null
				&& !(searchMap.get("fromDate").equals(""))
				&& (!searchMap.get("toDate").equals(""))) {
			fromDate = (String) searchMap.get("fromDate");
			toDate = (String) searchMap.get("toDate");
			String date4MySQL1;
			String date4MySQL2;
			try {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				date4MySQL1 = formatterOut.format(formatterIn.parse(fromDate));
				date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				searchReturnTList = session
						.createCriteria(StoreInternalReturnT.class)
						.add(Restrictions.eq("ReturnMain.Id", returnId)).list();
				// searchSupplierList =
				// session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
				// "y")).list();
				searchReturnMList = session
						.createCriteria(StoreInternalReturnM.class)
						.add(Restrictions.eq("Status", "y"))
						.add(Restrictions.between("ReturnDate", startDate,
								endDate)).list();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 30;
		}
		if ((Integer) searchMap.get("returnId") != 0) {
			returnId = (Integer) searchMap.get("returnId");

			Criteria c = session.createCriteria(StoreGrnReturnT.class).add(
					Restrictions.eq("GrnReturn.Id", returnId));

			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			searchReturnTList = c.list();

			searchReturnMList = session.createCriteria(StoreGrnReturnM.class)
					.add(Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("Id", returnId)).list();
		}

		if (searchReturnTList != null && searchReturnTList.size() > 0) {
			for (StoreGrnReturnT storeGrnReturnT : searchReturnTList) {
				storeItemBatchStockList1 = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Item.Id", storeGrnReturnT
								.getItem().getId()))
						.add(Restrictions.eq("BatchNo",
								storeGrnReturnT.getBatchNo())).list();
				MasStoreItem masStoreItem = (MasStoreItem) session.load(
						MasStoreItem.class, storeGrnReturnT.getItem().getId());
				storeGrnReturnT.getItem().setNomenclature(
						masStoreItem.getNomenclature());
				storeGrnReturnT.getItem().setPvmsNo(masStoreItem.getPvmsNo());
				storeItemBatchStockList.add(storeItemBatchStockList1.get(0));
			}
		}
		supplierList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasStoreSupplier as pt order by pt.SupplierName");
		List<StoreGrnReturnM> searchList = new ArrayList<StoreGrnReturnM>();

		searchList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreGrnReturnM as pt where pt.Status='y' and pt.Department.id='"

						+ departmentId + "'");

		map.put("searchList", searchList);
		map.put("searchReturnMList", searchReturnMList);

		map.put("supplierList", supplierList);
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		map.put("searchReturnTList", searchReturnTList);

		return map;
	}

	// ----------------------------End Of Vendor Return ----------------------

	// *********************************************************************************************************************
	// ------------------------------------End of Methods Written By
	// Vivek------------------------------------------
	// ****************************************************************************************************************
	// *********************************************************************************************************************
	// *********************************************************************************************************************
	// ------------------------------------ Methods Written By
	// Vikas------------------------------------------
	// ****************************************************************************************************************

	// -------------------------------methods for opd patient issue by
	// vikas-------------------------------

	public Map<String, Object> showOPDPatientIssue() {

		List<MasEmployee> empList = new ArrayList<MasEmployee>();

		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int departmentTypeId = 10;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			// deptList = session.createCriteria(MasDepartment.class).list();
			empList = session
					.createQuery(
							"select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("empList", empList);
		return map;
	}

	public Map<String, Object> getHinNoList(String serviceNumber) {
		Session session = (Session) getSession();
		List<Object> hinList = new ArrayList<Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			hinList = session.createCriteria(Patient.class)
					.add(Restrictions.eq("ServiceNo", serviceNumber)).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("hinList", hinList);
		return map;
	}

	public Map<String, Object> showOPDPatientIssueGrid(Map map) {

		List listOfItemsInStock = new ArrayList();
		List opdIssueNo = new ArrayList();
		List itemList = new ArrayList();
		List hinNoList = new ArrayList();
		List issueNoList = new ArrayList();
		List<MasEmployee> empList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		String hinNo = "";

		String opdIssuenoIncremented = "";
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (map.get("hinNo") == null
					&& Integer.parseInt(map.get("hinId").toString()) != 0) {
				int hinId = (Integer) map.get("hinId");
				hinNoList = session.createQuery(
						"select p from Patient as p where p.Id=" + hinId)
						.list();
				Patient patient = (Patient) hinNoList.get(0);
				hinNo = patient.getHinNo();
			} else {
				hinNo = (String) map.get("hinNo");
			}
			// listOfItemsInStock = session.createQuery("select sib,
			// sum(sib.ClosingStock) from StoreItemBatchStock as sib where
			// sib.Department.Id="+deptId+ "group by
			// sib.BatchNo,sib.CostPrice,sib.Brand.Id ").list();
			opdIssueNo = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
							+ deptId).list();
			// issueNoList = session.createQuery("select sim from StoreIpIssueM
			// as sim where sim.Department.Id="+deptId+"and
			// sim.IssueType='w'").list();
			empList = session
					.createQuery(
							"select emp from MasEmployee  as emp where emp.EmpCategory.Id=" + 1)
					.list();
			Iterator iterator = listOfItemsInStock.iterator();

			if (map.get("buttonFlag") != null) {
				String issueNo = (String) map.get("issueNo");
				opdIssuenoIncremented = issueNo;
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.OpdIssueNo="+opdIssuenoIncremented).list();
				// opdIssueNo=
				// session.createCriteria(StoreFyDocumentNo.class).add(Restrictions.eq("OpdIssueNo",
				// opdIssuenoIncremented)).list();
			} else {
				// opdIssueNo = session.createQuery("select syd from
				// StoreFyDocumentNo as syd where
				// syd.Department.Id="+deptId).list();
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) opdIssueNo
						.get(0);
				String opdIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();
				opdIssuenoIncremented = getMaxNo(opdIssueNoFromDB);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("opdIssueNo", opdIssueNo);
		// map.put("issueNoList", issueNoList);
		map.put("empList", empList);
		map.put("hinNo", hinNo);
		map.put("opdIssuenoIncremented", opdIssuenoIncremented);
		return map;
	}

	public Map<String, Object> showOPDStockDetailsJsp(Map map) {
		List listOfItemsInStock = new ArrayList();

		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int itemId = (Integer) map.get("itemId");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			listOfItemsInStock = session
					.createQuery(
							"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ " and sib.Item.Id="
									+ itemId
									+ " and sib.ExpiryDate != 'null' group by sib.BatchNo, sib.CostPrice , sib.Brand.Id")
					.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);

		return map;
	}

	public boolean submitOPDPatientStockDetails(Map map) {

		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		// String fromDateToDate= null;
		// List<String> pvmsList=(List)map.get("pvmsList");

		List<String> batchNumberList = (List) map.get("batchNumberList");
		List brandNameList = (List) map.get("brandNameList");
		List expiryDateList = (List) map.get("expiryDateList");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		List amountList = (List) map.get("amountList");
		List storeItemBatchStockIdList = (List) map
				.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		int deptId = (Integer) map.get("deptId");
		int hospitalId = (Integer) map.get("hospitalId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");
		String opdIssueno = (String) map.get("opdIssueno");
		int hinId = (Integer) map.get("hinId");

		int empId = (Integer) map.get("empId");
		int itemId = (Integer) map.get("itemId");
		String prescription = (String) map.get("prescription");
		String buttonFlag = (String) map.get("buttonFlag");
		String serviceNo = (String) map.get("serviceNo");

		Date dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(
					StoreFyDocumentNo.class, storeFyDocumentNoId);
			StoreOpPatientIssueM storeOpPatientIssueM = null;
			String opdPatientIssueNoFromDB = storeFyDocumentNo.getOpdIssueNo();

			if (!opdPatientIssueNoFromDB.equals(opdIssueno)) {

				storeFyDocumentNo.setOpdIssueNo(opdIssueno);
				hbt.update(storeFyDocumentNo);

				storeOpPatientIssueM = new StoreOpPatientIssueM();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				storeOpPatientIssueM.setDepartment(masDepartment);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeOpPatientIssueM.setHospital(masHospital);
				storeOpPatientIssueM.setIssueType("I");
				Patient patient = new Patient();
				if (hinId != 0) {
					patient.setId(hinId);
					storeOpPatientIssueM.setHin(patient);
					storeOpPatientIssueM.setServiceNo(serviceNo);
				} else {
					storeOpPatientIssueM.setServiceNo(serviceNo);
				}

				storeOpPatientIssueM.setIssueNo(opdIssueno);
				storeOpPatientIssueM.setIssueDate(dateToInsert);
				storeOpPatientIssueM.setStatus("y");
				storeOpPatientIssueM.setPrescriptionNo(prescription);
				MasEmployee masEmployee = new MasEmployee();
				masEmployee.setId(empId);
				storeOpPatientIssueM.setEmp(masEmployee);
//				storeOpPatientIssueM.setLastChgBy(userName);
				storeOpPatientIssueM.setLastChgDate(dateToInsert);
				storeOpPatientIssueM.setLastChgTime(time);
				hbt.save(storeOpPatientIssueM);
			} else {
				String issueType = "I";
				// List storeOPDPatientMList = session.createQuery("select som
				// from StoreOpPatientIssueM as som where
				// som.IssueNo="+opdIssueno+" and som.IssueType='I'").list();
				List storeOPDPatientMList = session
						.createCriteria(StoreOpPatientIssueM.class)
						.add(Restrictions.eq("IssueNo", opdIssueno))
						.add(Restrictions.eq("IssueType", issueType)).list();
				storeOpPatientIssueM = (StoreOpPatientIssueM) storeOPDPatientMList
						.get(0);

			}

			Iterator itr = issQtyList.iterator();
			int i = 0;
			for (int j = 0; i < issQtyList.size(); j++)

			{

				BigDecimal totalQtyIssued;
				StoreOpPatientIssueT storeOpPatientIssueT = new StoreOpPatientIssueT();
				storeOpPatientIssueT.setOpIssue(storeOpPatientIssueM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(itemId);
				storeOpPatientIssueT.setItemIdRequire(masStoreItem);
				storeOpPatientIssueT.setItemIdIssue(masStoreItem);

				storeOpPatientIssueT.setBatchNo(batchNumberList.get(i));

				MasStoreBrand masStoreBrand = new MasStoreBrand();
				masStoreBrand
						.setId(Integer.parseInt("" + brandNameList.get(i)));
				storeOpPatientIssueT.setBrand(masStoreBrand);

				String expiryDate = (String) expiryDateList.get(i);

				Date expiryDateToInsert = HMSUtil
						.convertStringTypeDateToDateType(expiryDate);
				storeOpPatientIssueT.setExpiryDate(expiryDateToInsert);

				BigDecimal issuedQtyFromJsp = new BigDecimal(""
						+ issQtyList.get(i));
				storeOpPatientIssueT.setQtyIssued(issuedQtyFromJsp);

				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				storeOpPatientIssueT.setRate(bigDecimal2);

				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				storeOpPatientIssueT.setAmount(bigDecimal3);
				// hbt.save(storeIpIssueT);

				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));
				// submitWardConsumptionDetails===***********"+storeItemBatchStockId);
				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyIssued = (BigDecimal) storeItemBatchStock
						.getIssueQty();
				// BigDecimal issQty=(BigDecimal)issQtyList.get(i);
				if (qtyIssued != null) {
					totalQtyIssued = qtyIssued.add(issuedQtyFromJsp);
				} else {
					totalQtyIssued = issuedQtyFromJsp;
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock
						.getClosingStock();
				closingStock = closingStock.subtract(issuedQtyFromJsp);
				storeItemBatchStock.setIssueQty(totalQtyIssued);
				storeItemBatchStock.setClosingStock(closingStock);

				// hbt.save(storeIpIssueM);
				hbt.save(storeOpPatientIssueT);
				hbt.update(storeItemBatchStock);

				i++;
			}

			succesfullyAdded = true;
		} catch (Exception e) {

			e.printStackTrace();

		}

		return succesfullyAdded;
	}

	public Map<String, Object> showModifyOPDPatientIssueJsp(Map map) {
		Session session = (Session) getSession();

		String opdIssueno = (String) map.get("OPDIssueNo");

		String issueType = "I";
		List storeOPDPatientMList = session
				.createCriteria(StoreOpPatientIssueM.class)
				.add(Restrictions.eq("IssueNo", opdIssueno))
				.add(Restrictions.eq("IssueType", issueType)).list();

		if (storeOPDPatientMList.size() > 0) {
			StoreOpPatientIssueM storOpPatientIssueM = (StoreOpPatientIssueM) storeOPDPatientMList
					.get(0);
			int storeOPDIssueMId = storOpPatientIssueM.getId();
			List storeOPDIssueTList = session.createQuery(
					"select sot from StoreOpPatientIssueT as sot where sot.OpIssue.Id="
							+ storeOPDIssueMId).list();
			map.put("storeOPDIssueTList", storeOPDIssueTList);
		}
		return map;
	}

	public boolean deleteStockDetails(Map map) {

		BigDecimal totalQtyIssued;
		boolean sucessfullyDeleted = false;
		Session session = (Session) getSession();
		// int brandId=(Integer)map.get("brandId");
		int opdIssueTId = (Integer) map.get("opdIssueTId");

		// String batchNo=(String)map.get("batchNo");
		// BigDecimal costPrice= new BigDecimal(""+map.get("costPrice"));
		// BigDecimal qtyIssued= new BigDecimal(""+map.get("qtyIssued"));
		// int qtyIssued=(Integer)map.get("qtyIssued");

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreOpPatientIssueT storeOpPatientIssueT = (StoreOpPatientIssueT) hbt
					.load(StoreOpPatientIssueT.class, opdIssueTId);
			int brandId = storeOpPatientIssueT.getBrand().getId();
			String batchNo = storeOpPatientIssueT.getBatchNo();
			BigDecimal costPrice = storeOpPatientIssueT.getRate();
			BigDecimal qtyIssued = storeOpPatientIssueT.getQtyIssued();

			String hql = "delete from StoreOpPatientIssueT as sit where sit.Id like :opdIssueTId";
			Query query = session.createQuery(hql).setParameter("opdIssueTId",
					opdIssueTId);
			int row = query.executeUpdate();

			List storeItemBatchStockList = session.createQuery(
					"select sib  from StoreItemBatchStock as sib where sib.BatchNo= '"
							+ batchNo + "' and sib.Brand.Id = " + brandId
							+ " and sib.CostPrice = " + costPrice).list();
			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
					.get(0);
			BigDecimal qtyIssuedFromDB = (BigDecimal) storeItemBatchStock
					.getIssueQty();
			if (qtyIssued != null) {
				totalQtyIssued = qtyIssuedFromDB.subtract(qtyIssued);
			} else {
				totalQtyIssued = qtyIssuedFromDB;
			}
			BigDecimal closingStock = (BigDecimal) storeItemBatchStock
					.getClosingStock();
			closingStock = closingStock.add(qtyIssued);

			storeItemBatchStock.setIssueQty(totalQtyIssued);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.update(storeItemBatchStock);

			sucessfullyDeleted = true;
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return sucessfullyDeleted;
	}

	public Map<String, Object> showStockDetailsForLotNo(Map map) {

		Session session = (Session) getSession();
		List listOfItemsInStock = new ArrayList();
		String lotNo = (String) map.get("lotNo");
		int deptId = (Integer) map.get("deptId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			listOfItemsInStock = session
					.createQuery(
							"select sib from StoreItemBatchStock as sib where sib.LotNo="
									+ lotNo
									+ "and sib.ExpiryDate != 'null' and sib.Department.Id="
									+ deptId).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);
		return map;
	}

	public Map<String, Object> getItemListForOPD(Map map) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> itemList1 = new ArrayList<StoreItemBatchStock>();
		Session session = (Session) getSession();

		int deptId = 0;
		deptId = Integer.parseInt("" + map.get("deptId"));

		try {
			String str = (String) map.get("autoHint") + "%";

			String query = "SELECT DISTINCT (sib.Item.Nomenclature),sib.Item.Id from  StoreItemBatchStock as sib where sib.Department.Id="
					+ deptId
					+ "  and  sib.Item.Nomenclature like '"
					+ str
					+ "'";
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			// Criteria c = session.createCriteria(
			// StoreItemBatchStock.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
			// .createAlias("Brand", "brand")
			// .add(Restrictions.like("brand.BrandName",str));
			// .createAlias("Department", "dept")
			// .add(Restrictions.eq("dept.Id", deptId));

			// c.setFirstResult(0);
			// c.setMaxResults(10);
			// itemList = c.list();

			Iterator itr = itemList.iterator();
			while (itr.hasNext()) {
				Object[] pair = (Object[]) itr.next();
				String nomenclature = (String) pair[0];

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> fillItemsInGridForOPD(Map map) {

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		int itemId = (Integer) map.get("itemId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Id", itemId)).list();

			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	public Map<String, Object> fillItemsInGridForLotNo(Map map) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String lotNo = (String) map.get("lotNo");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemList = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("LotNo", lotNo)).list();

			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	// *********************************************************************************************************************
	// ------------------------------------End of Methods Written By
	// Vikas------------------------------------------
	// ****************************************************************************************************************

	// ********************************Start Of Modules By Deepti
	// Tevatia****************************

	// --------------------------Return from
	// Dispensary------------------------------

	public Map<String, Object> showReturnFromDispensaryJsp(
			Map<String, Object> map) {
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		List<StoreItemBatchStock> listOfItemsInStock = new ArrayList<StoreItemBatchStock>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreFyDocumentNo> issueReturnNoList = new ArrayList<StoreFyDocumentNo>();
		List<EmpScMapping> employeeList = new ArrayList<EmpScMapping>();
		List<MasEmployee> employeeAllList = new ArrayList<MasEmployee>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<StoreInternalReturnM> returnNoList = new ArrayList<StoreInternalReturnM>();
		String returnNo = "";
		String finalReturnNo = "";
		int storeFyDocumentNoId = 0;
		String buttonFlag = "";
		Session session = (Session) getSession();

		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("stores.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (map.get("buttonFlag") != null) {
			buttonFlag = (String) map.get("buttonFlag");
		}
		int empCategoryIdForReturnFromDispensary = Integer.parseInt(properties
				.getProperty("empCategoryIdForReturnFromDispensary"));

		int deptId = 0;
		int hospitalId = 0;

		if (map.get("deptId") != null) {
			deptId = (Integer) map.get("deptId");
		}
		if (map.get("hospitalId") != null) {
			hospitalId = (Integer) map.get("hospitalId");
		}
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			deptList = session
					.createQuery(
							"select md from MasDepartment  as md where upper(md.Status) = upper('Y') order by md.DepartmentName asc ")
					.list();

			/*
			 * listOfItemsInStock = session.createQuery(
			 * "select sib,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
			 * + deptId + "group by sib.BatchNo,sib").list();
			 * 
			 * String sqlQuery=""; sqlQuery=
			 * "select sib,sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
			 * + deptId + "group by sib.BatchNo,sib"; listOfItemsInStock
			 * =getHibernateTemplate().find(sqlQuery);
			 */
			brandList = session
					.createQuery(
							"select Distinct(sib.Brand.Id),sib.Brand.BrandName from  StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ " and sib.Hospital.Id = "
									+ hospitalId + " ").list();
			/*
			 * employeeList = session .createCriteria(MasEmployee.class)
			 * .add(Restrictions.eq("Status", "y"))
			 * .add(Restrictions.eq("EmpCategory.Id",
			 * empCategoryIdForReturnFromDispensary))
			 * .addOrder(Order.asc("FirstName")).list();
			 */
			//changes by anamika-------------
			/*employeeList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.addOrder(Order.asc("EmployeeName")).list();*/
			employeeList =  session.createCriteria(EmpScMapping.class).createAlias("Employee", "emp")
					.add(Restrictions.eq("Department.Id", deptId)).createAlias("emp.Hospital", "hospital").add(Restrictions.eq("emp.Status", "y").ignoreCase())
					.add(Restrictions.eq("hospital.Id", hospitalId))
					.addOrder(Order.asc("emp.EmployeeName")).list();
			
			
			employeeAllList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("FirstName")).list();
			returnNoList = session.createQuery(
					"select sim from  StoreInternalReturnM as sim where sim.FromDepartment.Id="
							+ deptId + " and sim.Hospital.Id = " + hospitalId
							+ " ").list();
			issueReturnNoList = session.createQuery(
					"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
							+ deptId + " and syd.Hospital.Id = " + hospitalId
							+ " ").list();
			/*
			 *
			 */
			/*
			 * Iterator iterator = listOfItemsInStock.iterator(); while
			 * (iterator.hasNext()) { Object[] pair = (Object[])
			 * iterator.next(); StoreItemBatchStock storeItemBatchStock =
			 * (StoreItemBatchStock) pair[0]; BigDecimal qtyInHand =
			 * (BigDecimal) pair[1]; String pvmsNo =
			 * storeItemBatchStock.getItem().getPvmsNo(); }
			 */
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		if (!buttonFlag.equals("next")) {
			if (issueReturnNoList != null && issueReturnNoList.size() > 0) {
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) issueReturnNoList
						.get(0);
				returnNo = ("" + storeFyDocumentNo.getIssueDeptReturnNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				try {
					finalReturnNo = getMaxNo(returnNo);
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalReturnNo", finalReturnNo);
				map.put("returnNo", returnNo);
			} else {
				/**
				 * Code for StoreFyDocumentNo if this department is not exit in
				 * this table then save Code By Mukesh Narayan Singh Date 12
				 * July 2011
				 */
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(deptId);
				try {
					finalReturnNo = getMaxNo(returnNo);
				} catch (Exception e) {
					e.printStackTrace();
				}

				String issueDeptReturnNo = "";
				storeFyDocumentNo.setIssueDeptReturnNo(issueDeptReturnNo);
				storeFyDocumentNo.setDepartment(masDepartment);
				hbt.save(storeFyDocumentNo);
				hbt.refresh(storeFyDocumentNo);

				List<StoreFyDocumentNo> issueReturnNoTempList = new ArrayList<StoreFyDocumentNo>();
				issueReturnNoTempList = session.createQuery(
						"select syd from StoreFyDocumentNo as syd where syd.Department.Id="
								+ deptId + " and syd.Hospital.Id = "
								+ hospitalId + " ").list();
				if (issueReturnNoTempList != null
						&& issueReturnNoTempList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo2 = (StoreFyDocumentNo) issueReturnNoTempList
							.get(0);
					storeFyDocumentNoId = storeFyDocumentNo2.getId();

					map.put("storeFyDocumentNoId", storeFyDocumentNoId);
					map.put("finalReturnNo", finalReturnNo);
				}
			}
		}

		map.put("listOfItemsInStock", listOfItemsInStock);
		map.put("issueReturnNoList", issueReturnNoList);
		map.put("brandList", brandList);
		map.put("returnNoList", returnNoList);
		map.put("deptList", deptList);
		map.put("employeeList", employeeList);
		map.put("employeeAllList", employeeAllList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		return map;
	}

	public Map<String, Object> showStockDetailsForReturnDispensary(
			Map<String, Object> map) {
		List listOfItemsInStock = new ArrayList();

		Session session = (Session) getSession();
		int deptId = (Integer) map.get("deptId");
		int brandId = (Integer) map.get("brandId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			listOfItemsInStock = session
					.createQuery(
							"select sib,  sum(sib.ClosingStock) from StoreItemBatchStock as sib where sib.Department.Id="
									+ deptId
									+ " and sib.Brand.Id="
									+ brandId
									+ "group by sib.BatchNo,sib.CostPrice ")
					.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("listOfItemsInStock", listOfItemsInStock);

		return map;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> submitReturnDispensaryDetails(
			Map<String, Object> map) {
		int IpIssueMId = 0;
		String issueNo = "";
		Session session = (Session) getSession();
		boolean succesfullyAdded = false;
		String fromDateToDate = null;
		String flag = "";
		String issueType = "w";
		List<String> pvmsList = (List) map.get("pvmsList");
		List<String> batchNumberList = (List) map.get("batchNumberList");
		// List brandNameList = (List) map.get("brandNameList");

		List expiryDateList = (List) map.get("expiryDateList");
		List srNolist = (List) map.get("srNolist");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		List reasonList = new ArrayList();
		if (map.get("reasonList") != null) {
			reasonList = (List) map.get("reasonList");
		}
		List amountList = (List) map.get("amountList");
		List storeItemBatchStockIdList = (List) map
				.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");
		if (map.get("flag") != null) {
			flag = (String) map.get("flag");
		}
		int fromDeptId = (Integer) map.get("fromDeptId");
		int toDeptId = (Integer) map.get("toDeptId");
		String returnDate = (String) map.get("returnDate");
		String returnNo = (String) map.get("returnNo");
		String referenceNo = (String) map.get("referenceNo");

		int receivedById = (Integer) map.get("receivedById");
		int returnById = (Integer) map.get("returnById");

		String remarks = (String) map.get("remarks");
		String reason = (String) map.get("reason");

		int hospitalId = (Integer) map.get("hospitalId");
		int userId = (Integer) map.get("userId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");

		Date dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		Date returnDateForAdd = HMSUtil
				.convertStringTypeDateToDateType(returnDate);
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt.load(
				StoreFyDocumentNo.class, storeFyDocumentNoId);
		StoreInternalReturnM mObj = null;
		String returnNoFromDB = storeFyDocumentNo.getIssueDeptReturnNo();
		Transaction tx = null;
		tx = session.beginTransaction();
		if (!returnNoFromDB.equals(returnNo)) {
			storeFyDocumentNo.setIssueDeptReturnNo(returnNo);
			hbt.update(storeFyDocumentNo);

			mObj = new StoreInternalReturnM();
			mObj.setReturnNo(returnNo);

			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(fromDeptId);
			mObj.setFromDepartment(masDepartment);

			MasDepartment masDepartment1 = new MasDepartment();
			masDepartment1.setId(toDeptId);
			mObj.setToDepartment(masDepartment1);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			mObj.setHospital(masHospital);
			mObj.setReturnDate(returnDateForAdd);
			mObj.setReferenceNo(referenceNo);

			MasEmployee receivedBy = new MasEmployee();
			receivedBy.setId(receivedById);
			mObj.setReceivedBy(receivedBy);

			mObj.setReason(reason);
			mObj.setRemarks(remarks);

			MasEmployee returnBy = new MasEmployee();
			returnBy.setId(returnById);
			mObj.setReturnBy(returnBy);

			Users users = new Users();
			users.setId(userId);
			mObj.setLastChangedBy(users);
			mObj.setLastChangedDate(dateToInsert);
			mObj.setLastChangedTime(time);
			if (flag != null && flag.equals("defective")) {
				mObj.setStatus("d");
			} else {
				mObj.setStatus("y");
			}
			hbt.save(mObj);
			IpIssueMId = mObj.getId();
			issueNo = mObj.getReturnNo();
		} else {

			List returnList = session
					.createCriteria(StoreInternalReturnM.class)
					.add(Restrictions.eq("ReturnNo", returnNo))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "y")).list();
			mObj = (StoreInternalReturnM) returnList.get(0);
		}

		Iterator itr = issQtyList.iterator();
		int i = 0;
		for (int j = 0; i < issQtyList.size(); j++)

		{

			BigDecimal totalQtyReturned;
			StoreInternalReturnT tObj = new StoreInternalReturnT();
			tObj.setReturnMain(mObj);
			MasStoreItem masStoreItem = new MasStoreItem();
			masStoreItem.setId(Integer.parseInt(pvmsList.get(i).toString()));
			tObj.setItem(masStoreItem);

			StoreItemBatchStock storeItemBatchStock1 = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class,Integer.parseInt((String) storeItemBatchStockIdList.get(i)));

			tObj.setBatchNo(storeItemBatchStock1.getBatchNo());
			if(!reasonList.get(i).equals("")){
				tObj.setReason(reasonList.get(i).toString());
			}
			StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
			itemBatchStock.setId(Integer.parseInt(storeItemBatchStockIdList.get(i).toString()));
			tObj.setStock(itemBatchStock);
			tObj.setSrNo(Integer.parseInt(srNolist.get(i).toString()));

			String expiryDate = (String) expiryDateList.get(i);

			tObj.setExpiryDate(expiryDate);

			BigDecimal issuedReturnFromJsp = new BigDecimal(""+ issQtyList.get(i));
			tObj.setReturnQty(issuedReturnFromJsp);
			BigDecimal bigDecimal2 = new BigDecimal("" + costPriceList.get(i));
			tObj.setRate(bigDecimal2);
			BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
			tObj.setItemAmount(bigDecimal3);

			int storeItemBatchStockId = Integer.parseInt(""+ storeItemBatchStockIdList.get(i));

			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, storeItemBatchStockId);
			BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock.getIssueReturn();

			if (qtyReturned != null) {
				totalQtyReturned = qtyReturned.add(issuedReturnFromJsp);
			} else {
				totalQtyReturned = issuedReturnFromJsp;
			}

			BigDecimal closingStock = (BigDecimal) storeItemBatchStock.getClosingStock();
			closingStock = closingStock.subtract(issuedReturnFromJsp);

			storeItemBatchStock.setIssueReturn(totalQtyReturned);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.save(tObj);
			hbt.update(storeItemBatchStock);
			
			List<StoreItemBatchStock> storeItemBatchStockListForToDepartment = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id",Integer.parseInt(pvmsList.get(i).toString())))
					.add(Restrictions.eq("BatchNo",storeItemBatchStock1.getBatchNo()))
					.add(Restrictions.eq("Department.Id", toDeptId)).list();
			// code for updating stock for toDepartment
			if (storeItemBatchStockListForToDepartment != null
					&& storeItemBatchStockListForToDepartment.size() > 0) {
				StoreItemBatchStock storeItemBatchStock3 = storeItemBatchStockListForToDepartment
						.get(0);
				if (storeItemBatchStock3.getReceiptReturnReturnable() != null) {
					storeItemBatchStock3
							.setReceiptReturnReturnable(storeItemBatchStock3
									.getReceiptReturnReturnable().add(
											issuedReturnFromJsp));
				} else {
					storeItemBatchStock3
							.setReceiptReturnReturnable(issuedReturnFromJsp);
				}

				if (storeItemBatchStock3.getClosingStock() != null) {
					closingStock = storeItemBatchStock3.getClosingStock();

				} else {
					closingStock = new BigDecimal(0);
				}
				storeItemBatchStock3.setClosingStock(closingStock
						.add(issuedReturnFromJsp));
				hbt.update(storeItemBatchStock3);
			} else {
				StoreItemBatchStock storeItemBatchStock3 = new StoreItemBatchStock();
				storeItemBatchStock3.setItem(new MasStoreItem(Integer
						.parseInt(pvmsList.get(i).toString())));
				storeItemBatchStock3.setBatchNo(storeItemBatchStock1
						.getBatchNo());
				storeItemBatchStock3.setDepartment(new MasDepartment(toDeptId));
				storeItemBatchStock3
						.setExpiryDate(HMSUtil
								.convertStringTypeDateToDateType((String) expiryDateList
										.get(i)));
				Date currentDate = Calendar.getInstance().getTime();
				MasHospital masHospital = new MasHospital();
				masHospital.setId(hospitalId);
				storeItemBatchStock.setHospital(masHospital);

				storeItemBatchStock3.setOpeningBalanceDate(currentDate);
				storeItemBatchStock3.setOpeningBalanceQty(issuedReturnFromJsp);
				storeItemBatchStock3.setCostPrice(new BigDecimal(""
						+ costPriceList.get(i)));
				storeItemBatchStock3.setOpeningBalanceAmount(new BigDecimal(""
						+ costPriceList.get(i)).multiply(issuedReturnFromJsp));
				storeItemBatchStock3.setReceivedQty(issuedReturnFromJsp);
				List<StoreItemBatchStock> storeItemBatchStockForOtherDetails = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Item.Id",
								Integer.parseInt(pvmsList.get(i).toString())))
						.add(Restrictions.eq("BatchNo",
								storeItemBatchStock1.getBatchNo()))
						.addOrder(Order.desc("Id")).list();
				if (storeItemBatchStockForOtherDetails.get(0).getMrp() != null) {
					storeItemBatchStock3
							.setMrp(storeItemBatchStockForOtherDetails.get(0)
									.getMrp());
				}
				if (storeItemBatchStockForOtherDetails.get(0)
						.getDispencingPrice() != null) {
					storeItemBatchStock3
							.setDispencingPrice(storeItemBatchStockForOtherDetails
									.get(0).getDispencingPrice());
				}
				if (storeItemBatchStockForOtherDetails.get(0).getBarcodeNo() != null) {
					storeItemBatchStock3
							.setBarcodeNo(storeItemBatchStockForOtherDetails
									.get(0).getBarcodeNo());
				}
				try {
					closingStock = storeItemBatchStockForOtherDetails.get(0)
							.getClosingStock();
				} catch (Exception e) {
					closingStock = new BigDecimal(0);
				}
				storeItemBatchStock3.setClosingStock(issuedReturnFromJsp);
				hbt.save(storeItemBatchStock3);

			}

			i++;
		}
		tx.commit();
		succesfullyAdded = true;
		map.put("fromDeptId", fromDeptId);
		map.put("issueNo", issueNo);
		//
		//
		map.put("IpIssueMId", IpIssueMId);
		return map;
	}

	public Map<String, Object> showDeleteReturnFromDispensary(
			Map<String, Object> map) {
		Session session = (Session) getSession();

		String returnNo = (String) map.get("returnNo");

		List<StoreInternalReturnM> storeReturnMList = session.createQuery(
				"select sim from StoreInternalReturnM as sim where sim.ReturnNo = '"
						+ returnNo + "'").list();
		if (storeReturnMList.size() > 0) {
			StoreInternalReturnM storeInternalReturnM = (StoreInternalReturnM) storeReturnMList
					.get(0);
			int returnId = storeInternalReturnM.getId();
			List<StoreInternalReturnT> storeReturnTList = session.createQuery(
					"select sit from StoreInternalReturnT as sit where sit.ReturnMain.Id="
							+ returnId).list();
			map.put("storeReturnTList", storeReturnTList);
		}

		return map;
	}

	public boolean deleteStockDetailsReturnToDispensary(Map<String, Object> map) {

		BigDecimal totalQtyReturned;
		boolean sucessfullyDeleted = false;
		Session session = (Session) getSession();
		int returnTId = (Integer) map.get("returnTId");
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreInternalReturnT tObj = (StoreInternalReturnT) hbt.load(
					StoreInternalReturnT.class, returnTId);
			int brandId = tObj.getBrand().getId();
			String batchNo = tObj.getBatchNo();
			BigDecimal costPrice = tObj.getRate();
			BigDecimal qtyReturned = tObj.getReturnQty();

			String hql = "delete from StoreInternalReturnT as sit where sit.Id like :returnTId";
			Query query = session.createQuery(hql).setParameter("returnTId",
					returnTId);
			int row = query.executeUpdate();

			List storeItemBatchStockList = session.createQuery(
					"select sib  from StoreItemBatchStock as sib where sib.BatchNo="
							+ batchNo + "and sib.Brand.Id=" + brandId
							+ "and sib.CostPrice=" + costPrice).list();
			StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
					.get(0);
			BigDecimal qtyReturnedFromDB = (BigDecimal) storeItemBatchStock
					.getIssueReturn();
			if (qtyReturned != null) {
				totalQtyReturned = qtyReturnedFromDB.subtract(qtyReturned);
			} else {
				totalQtyReturned = qtyReturnedFromDB;
			}
			BigDecimal closingStock = (BigDecimal) storeItemBatchStock
					.getClosingStock();
			closingStock = closingStock.add(qtyReturned);

			storeItemBatchStock.setIssueQty(totalQtyReturned);
			storeItemBatchStock.setClosingStock(closingStock);
			hbt.update(storeItemBatchStock);

			sucessfullyDeleted = true;
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return sucessfullyDeleted;
	}

	@SuppressWarnings({ "unchecked", "unused" })
	public Map<String, Object> searchReturnToDispensary(
			Map<String, Object> searchMap) throws ParseException {
		String fromDate = "";
		String toDate = "";
		int returnId = 0;
		int pageNo = 1;
		int firstResult = 0;
		int maxResults = 30;
		int deptId = 0;
		if (searchMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + searchMap.get("pageNo"));
		}

		if (searchMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + searchMap.get("deptId"));
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchSupplierList = new ArrayList<MasStoreSupplier>();
		List<StoreInternalReturnM> searchReturnMList = new ArrayList<StoreInternalReturnM>();
		List<StoreInternalReturnT> searchReturnTList = new ArrayList<StoreInternalReturnT>();
		List<StoreItemBatchStock> storeItemBatchStockList1 = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();

		List<StoreInternalReturnM> returnNoList = new ArrayList<StoreInternalReturnM>();
		Session session = (Session) getSession();

		if (!(searchMap.get("fromDate").equals(""))
				&& (!searchMap.get("toDate").equals(""))) {
			fromDate = (String) searchMap.get("fromDate");
			toDate = (String) searchMap.get("toDate");
			String date4MySQL1;
			String date4MySQL2;
			try {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				date4MySQL1 = formatterOut.format(formatterIn.parse(fromDate));
				date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				searchReturnTList = session
						.createCriteria(StoreInternalReturnT.class)
						.add(Restrictions.eq("ReturnMain.Id", returnId)).list();
				// searchSupplierList =
				// session.createCriteria(MasStoreSupplier.class).add(Restrictions.eq("Status",
				// "y")).list();
				searchReturnMList = session
						.createCriteria(StoreInternalReturnM.class)
						.add(Restrictions.eq("Status", "y"))
						.add(Restrictions.between("ReturnDate", startDate,
								endDate)).list();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		if ((Integer) searchMap.get("returnId") != 0) {
			returnId = (Integer) searchMap.get("returnId");
			searchReturnTList.clear();

			Criteria c = session.createCriteria(StoreInternalReturnT.class)
					.add(Restrictions.eq("ReturnMain.Id", returnId));

			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			searchReturnTList = c.list();

			searchReturnMList = session
					.createCriteria(StoreInternalReturnM.class)
					.add(Restrictions.eq("Status", "y"))
					.add(Restrictions.eq("Id", returnId)).list();

		}
		for (StoreInternalReturnT storeInternalReturnT : searchReturnTList) {
			storeItemBatchStockList1 = session
					.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", storeInternalReturnT
							.getItem().getId()))
					.add(Restrictions.eq("BatchNo",
							storeInternalReturnT.getBatchNo())).list();
			MasStoreItem masStoreItem = (MasStoreItem) session.load(
					MasStoreItem.class, storeInternalReturnT.getItem().getId());
			storeInternalReturnT.getItem().setNomenclature(
					masStoreItem.getNomenclature());
			storeInternalReturnT.getItem().setPvmsNo(masStoreItem.getPvmsNo());
			storeItemBatchStockList.add(storeItemBatchStockList1.get(0));
		}
		returnNoList = session.createQuery(
				"select sim from  StoreInternalReturnM as sim where sim.FromDepartment.Id="
						+ deptId).list();
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		map.put("searchReturnMList", searchReturnMList);
		map.put("returnNoList", returnNoList);
		map.put("searchReturnTList", searchReturnTList);

		return map;
	}

	public Map<String, Object> getItemListForDepartmentReturn(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		// int returnId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		// returnId = Integer.parseInt("" + dataMap.get("returnId"));
		List objectList = new ArrayList();
		try {
			String str = (String) dataMap.get("autoHint") + "%";
			String query = "SELECT DISTINCT (sib.Brand.BrandName),sib.Brand.Id from  StoreItemBatchStock as sib where sib.Brand.BrandName like '"
					+ str + "'";
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			Query q2 = session.createQuery(query);
			q2.setFirstResult(0);
			q2.setMaxResults(10);
			itemList = q2.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	// New Grid For MMf Department

	public Map<String, Object> showMmfDepartment(int deptId) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreFyDocumentNo> mmfNoList = new ArrayList<StoreFyDocumentNo>();

		int storeFyDocumentNoId = 0;
		String mmfNo = "";
		String finalMmfNo = "";
		Session session = (Session) getSession();

		departmentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		approvedByEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee ");

		searchStoreMmfDepartmentMList = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("StoreWardDept.Id", deptId))
				.add(Restrictions.eq("MmfStoreType", "e")).list();

		// Earlier MMF No Generation with Financial year 08-09

		/*
		 * mmfNoList = session.createCriteria(StoreFyDocumentNo.class)
		 * .add(Restrictions.eq("Department.Id", deptId)).list();
		 * 
		 * if(mmfNoList != null && mmfNoList.size() > 0){ StoreFyDocumentNo
		 * storeFyDocumentNo= (StoreFyDocumentNo)mmfNoList.get(0); mmfNo =
		 * (""+storeFyDocumentNo.getMmfNo()); storeFyDocumentNoId =
		 * storeFyDocumentNo.getId(); try{ finalMmfNo = getMaxNo(mmfNo);
		 * (Exception e) { e.printStackTrace(); } map.put("mmfNoList",
		 * mmfNoList); map.put("storeFyDocumentNoId", storeFyDocumentNoId);
		 * map.put("finalMmfNo", finalMmfNo); }
		 */

		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);

		return map;

	}

	public Map<String, Object> createAndImportMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		;
		BigDecimal currQtymmf = new BigDecimal(0);
		BigDecimal preQtymmf = new BigDecimal(0);
		String remark = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTListPreviousYear = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTListCurrentYear = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		StoreFyDocumentNo storeFyDocumentNo = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMListPreviousYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMListCurrentYear = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();

		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		int previousYear = currentYear - 1;
		String mmfNo = "";

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();

			int sno = 0;
			// String mmfNo = box.get("mmfNo");

			// For Generating & Saving new MMF No for StoreFyDocumentNo Table

			searchStoreMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMListCurrentYear = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", currentYear))
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMListPreviousYear = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear", previousYear))
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentTListPreviousYear = session
					.createCriteria(StoreMmfDepartmentT.class)
					.addOrder(Order.asc("SrNo"))
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear", previousYear))
					.add(Restrictions.eq(
							"m.StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.list();

			if (storeMmfDepartmentMListPreviousYear != null
					&& storeMmfDepartmentMListPreviousYear.size() > 0) {
				if (storeMmfDepartmentMListCurrentYear.size() == 0) {
					// 2
					// block");
					departmentList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
					approvedByEmployeeList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.MasEmployee ");
					map.put("departmentList", departmentList);
					map.put("approvedByEmployeeList", approvedByEmployeeList);
					StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();

					/*
					 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) !=
					 * 0) { MasEmployee masEmployee = new MasEmployee();
					 * masEmployee.setId(box
					 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
					 * storeMmfDepartmentM.setApprovedBy(masEmployee); }
					 */
					mmfNo = "01/" + currentYear;
					List<StoreFyDocumentNo> mmfNoList = session
							.createCriteria(StoreFyDocumentNo.class)
							.add(Restrictions.eq(
									"Department.Id",
									box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
							.list();

					if (mmfNoList != null && mmfNoList.size() > 0) {
						storeFyDocumentNo = mmfNoList.get(0);
					}
					storeFyDocumentNo.setMmfNo(mmfNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);

					storeMmfDepartmentM.setDocNo(mmfNo);
					map.put("docId", mmfNo);
					storeMmfDepartmentM.setLastChgBy(box.get(CHANGED_BY));
					storeMmfDepartmentM.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(box
									.getString(CHANGED_DATE)));
					storeMmfDepartmentM.setLastChgTime(box.get(CHANGED_TIME));
					storeMmfDepartmentM.setMmfForTheYear(currentYear);
					storeMmfDepartmentM.setCheckedBy(box.getString(CHECKED_BY));
					storeMmfDepartmentM.setPreparedBy(box
							.getString(PREPARED_BY));
					storeMmfDepartmentM.setMmfStoreType(box.get("storeType"));
					storeMmfDepartmentM.setRemarks(box.get(REMARKS).toString());
					storeMmfDepartmentM.setStatus("o");

					MasDepartment storeWardDept = new MasDepartment();
					storeWardDept
							.setId(box
									.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					storeMmfDepartmentM.setStoreWardDept(storeWardDept);
					MasHospital masHospital = new MasHospital();
					masHospital.setId(box.getInt("hospitalId"));
					storeMmfDepartmentM.setHospital(masHospital);

					hbt.setFlushModeName("FLUSH_AUTO");
					hbt.setCheckWriteOperations(false);
					hbt.save(storeMmfDepartmentM);

					if (storeMmfDepartmentTListPreviousYear != null
							&& storeMmfDepartmentTListPreviousYear.size() > 0) {
						sno = storeMmfDepartmentTListPreviousYear.get(0)
								.getSrNo().intValue();

						for (Iterator iterator = storeMmfDepartmentTListPreviousYear
								.iterator(); iterator.hasNext();) {
							StoreMmfDepartmentT storeMmfDepartmentTPreviousYear = (StoreMmfDepartmentT) iterator
									.next();
							StoreMmfDepartmentT storeMmfDepartmentTnew = new StoreMmfDepartmentT();
							storeMmfDepartmentTnew
									.setItem(storeMmfDepartmentTPreviousYear
											.getItem());
							storeMmfDepartmentTnew
									.setPreYearMmf(storeMmfDepartmentTPreviousYear
											.getCurrYearMmf());
							storeMmfDepartmentTnew
									.setCurrYearMmf(storeMmfDepartmentTPreviousYear
											.getCurrYearMmf());
							storeMmfDepartmentTnew
									.setMmfInQty(storeMmfDepartmentTPreviousYear
											.getCurrYearMmf());
							storeMmfDepartmentTnew
									.setRemarks(storeMmfDepartmentTPreviousYear
											.getRemarks());
							storeMmfDepartmentTnew
									.setSrNo(storeMmfDepartmentTPreviousYear
											.getSrNo());
							storeMmfDepartmentTnew
									.setStoreMmfDepartmentM(storeMmfDepartmentM);
							hbt.save(storeMmfDepartmentTnew);
						}

					}

					storeMmfDepartmentMListCurrentYear = session
							.createCriteria(StoreMmfDepartmentM.class)
							.add(Restrictions.eq("MmfForTheYear", currentYear))
							.add(Restrictions.eq(
									"StoreWardDept.Id",
									box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
							.add(Restrictions.eq("MmfStoreType",
									box.get("storeType"))).list();

					storeMmfDepartmentTListCurrentYear = session
							.createCriteria(StoreMmfDepartmentT.class)
							.createAlias("StoreMmfDepartmentM", "m")
							.add(Restrictions
									.eq("m.MmfForTheYear", currentYear))
							.add(Restrictions.eq(
									"m.StoreWardDept.Id",
									box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
							.add(Restrictions.eq("m.MmfStoreType",
									box.get("storeType"))).list();
					if (storeMmfDepartmentTListCurrentYear != null
							&& storeMmfDepartmentTListCurrentYear.size() > 0) {
						int mmfMasterId = storeMmfDepartmentTListCurrentYear
								.get(0).getStoreMmfDepartmentM().getId();
						mmfNo = storeMmfDepartmentTListCurrentYear.get(0)
								.getStoreMmfDepartmentM().getDocNo();
						map.put("mmfMasterId", mmfMasterId);
						map.put("mmfNo", mmfNo);
					}

					for (Iterator iterator = storeMmfDepartmentTListCurrentYear
							.iterator(); iterator.hasNext();) {
						StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
								.next();

						try {
							id = storeMmfDepartmentT.getId();
						} catch (Exception e) {
							id = 0;
						}

						try {
							pvms = storeMmfDepartmentT.getItem().getPvmsNo();
						} catch (Exception e) {
							pvms = "";
						}

						try {
							nomenclature = storeMmfDepartmentT.getItem()
									.getNomenclature();
						} catch (Exception e) {
							nomenclature = "";
						}

						try {
							au = storeMmfDepartmentT.getItem()
									.getItemConversion().getPurchaseUnit()
									.getUnitName();
						} catch (Exception e) {
							au = "";
						}

						try {
							qtymmf = storeMmfDepartmentT.getMmfInQty();
						} catch (Exception e) {
							qtymmf = new BigDecimal(0);
						}
						try {
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						} catch (Exception e) {
							currQtymmf = new BigDecimal(0);
						}
						try {
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						} catch (Exception e) {
							preQtymmf = new BigDecimal(0);
						}
						try {
							qtymmf = storeMmfDepartmentT.getMmfInQty();
						} catch (Exception e) {
							qtymmf = new BigDecimal(0);
						}
						try {
							remark = storeMmfDepartmentT.getRemarks();
						} catch (Exception e) {
							remark = "";
						}

						hData = new HashMap<String, Object>();
						hData.put("id", id);
						hData.put("pvms", pvms);
						hData.put("nomenclature", nomenclature);
						hData.put("au", au);
						hData.put("qtymmf", qtymmf);
						hData.put("currQtymmf", currQtymmf);
						hData.put("preQtymmf", preQtymmf);
						hData.put("remark", remark);

						vResult.add(hData);
					}

					if (vResult.size() > 0) {
						testPageData = new HashMap[vResult.size()];
						vResult.copyInto(testPageData);
					}

					try {
						pagedArray = new PageUtil().convertToPagedArrayIndex(
								testPageData, box);
					} catch (Exception e) {
						e.printStackTrace();

					}

				}

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		map.put("import", "import");
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);

		return map;
	}

	public Map<String, Object> resetMmfDepartmentData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		String docId = "";
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector srno = box.getVector("srno");
			Vector qtymmf = box.getVector("qtymmf");
			Vector items = box.getVector("id");
			Vector remark = box.getVector("remark");

			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreMmfDepartmentT tObj = (StoreMmfDepartmentT) hbt.load(
						StoreMmfDepartmentT.class, itemId);
				tObj.setMmfInQty(new BigDecimal(0));
				tObj.setCurrYearMmf(new BigDecimal(0));
				docId = tObj.getStoreMmfDepartmentM().getDocNo();
				tObj.setRemarks("");
				hbt.update(tObj);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		map = getMmfDepartmentData(box);
		map.put("docId", docId);
		return map;
	}

	public Map<String, Object> getMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		String remark = null;
		String docId = "";
		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		// List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new
		// ArrayList<StoreMmfDepartmentT>();

		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		if (box.getString("pvmsNo") != null
				&& (!(box.getString("pvmsNo").equals("")))) {

			try {
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
				int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
				departmentList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
				approvedByEmployeeList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasEmployee ");

				searchStoreMmfDepartmentMList = session
						.createCriteria(StoreMmfDepartmentM.class)
						.add(Restrictions.eq(
								"StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType",
								box.get("storeType"))).list();

				map.put("departmentList", departmentList);
				map.put("approvedByEmployeeList", approvedByEmployeeList);
				map.put("searchStoreMmfDepartmentMList",
						searchStoreMmfDepartmentMList);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				/*
				 * storeMmfDepartmentTList = hbt .find("from
				 * jkt.hms.masters.business.StoreMmfDepartmentT as inp where
				 * inp.StoreMmfDepartmentM.MmfForTheYear=" + currentYear + " and
				 * inp.StoreMmfDepartmentM.StoreWardDept.Id=" +
				 * box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT) +" and
				 * inp.StoreMmfDepartmentM.MmfStoreType="+box.get("storeType"));
				 */

				// for searching in gridItems for pvms no and niv
				String str = box.getString("pvmsNo") + "%";

				storeMmfDepartmentTList = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear", currentYear))
						.add(Restrictions.eq(
								"m.StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("m.MmfStoreType",
								box.get("storeType"))).createAlias("Item", "s")
						.add(Restrictions.like("s.PvmsNo", str)).list();

				/*
				 * else{storeMmfDepartmentTList=session.createCriteria(
				 * StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM",
				 * "m") .add(Restrictions.eq("m.MmfForTheYear", currentYear)).
				 * add(Restrictions.eq("m.StoreWardDept.Id",
				 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
				 * .add
				 * (Restrictions.eq("m.MmfStoreType",box.get("storeType"))).add
				 * (Restrictions.in("Item.PvmsNo", str)).list(); }
				 */
				int mmfMasterId = 0;
				int approvedId = 0;

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					mmfMasterId = storeMmfDepartmentTList.get(0)
							.getStoreMmfDepartmentM().getId();
					docId = storeMmfDepartmentTList.get(0)
							.getStoreMmfDepartmentM().getDocNo();
					map.put("docId", docId);
					if (storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
							.getApprovedBy() != null) {
						approvedId = storeMmfDepartmentTList.get(0)
								.getStoreMmfDepartmentM().getApprovedBy()
								.getId();
						map.put("approvedId", approvedId);
					}

					map.put("mmfMasterId", mmfMasterId);
				}
				// changes done on 23-12-2008
				List<StoreMmfDepartmentM> storeMmfDepartmentMListForGettingMasterId = new ArrayList<StoreMmfDepartmentM>();

				storeMmfDepartmentMListForGettingMasterId = session
						.createCriteria(StoreMmfDepartmentM.class)
						.add(Restrictions.eq("MmfForTheYear", currentYear))
						.add(Restrictions.eq(
								"StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType",
								box.get("storeType"))).list();
				if (storeMmfDepartmentMListForGettingMasterId != null
						&& storeMmfDepartmentMListForGettingMasterId.size() > 0) {
					map.put("mmfMasterId",
							storeMmfDepartmentMListForGettingMasterId.get(0)
									.getId());
				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
						.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
							.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
								.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null) {
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						} else {
							preQtymmf = new BigDecimal(0);
						}
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null) {
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						} else {
							currQtymmf = new BigDecimal(0);
						}
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					storeMmfDepartmentTList1 = session
							.createCriteria(StoreMmfDepartmentT.class)
							.createAlias("StoreMmfDepartmentM", "m")
							.add(Restrictions.eq("m.MmfStoreType",
									box.get("storeType")))
							.add(Restrictions.eq("m.MmfForTheYear",
									box.getInt(MMF_DEPARTMENT_DATE)))
							.createAlias("Item", "i")
							.add(Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();
					boolean flag = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
										.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true) {
							break;
						}

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}

				if (vResult.size() > 0) {
					testPageData = new HashMap[vResult.size()];
					vResult.copyInto(testPageData);
				}

				try {
					pagedArray = new PageUtil().convertToPagedArrayIndex(
							testPageData, box);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("pagedArray", pagedArray);
		}

		else {
			try {
				org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
				int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
				departmentList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
				approvedByEmployeeList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasEmployee ");

				searchStoreMmfDepartmentMList = session
						.createCriteria(StoreMmfDepartmentM.class)
						.add(Restrictions.eq(
								"StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType",
								box.get("storeType"))).list();

				map.put("departmentList", departmentList);
				map.put("approvedByEmployeeList", approvedByEmployeeList);
				map.put("searchStoreMmfDepartmentMList",
						searchStoreMmfDepartmentMList);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				/*
				 * storeMmfDepartmentTList = hbt .find("from
				 * jkt.hms.masters.business.StoreMmfDepartmentT as inp where
				 * inp.StoreMmfDepartmentM.MmfForTheYear=" + currentYear + " and
				 * inp.StoreMmfDepartmentM.StoreWardDept.Id=" +
				 * box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT) +" and
				 * inp.StoreMmfDepartmentM.MmfStoreType="+box.get("storeType"));
				 */

				// for searching in gridItems for pvms no and niv
				storeMmfDepartmentTList = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear", currentYear))
						.add(Restrictions.eq(
								"m.StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("m.MmfStoreType",
								box.get("storeType"))).list();

				/*
				 * else{storeMmfDepartmentTList=session.createCriteria(
				 * StoreMmfDepartmentT.class).createAlias("StoreMmfDepartmentM",
				 * "m") .add(Restrictions.eq("m.MmfForTheYear", currentYear)).
				 * add(Restrictions.eq("m.StoreWardDept.Id",
				 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
				 * .add
				 * (Restrictions.eq("m.MmfStoreType",box.get("storeType"))).add
				 * (Restrictions.in("Item.PvmsNo", str)).list(); }
				 */
				int mmfMasterId = 0;
				int approvedId = 0;

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					mmfMasterId = storeMmfDepartmentTList.get(0)
							.getStoreMmfDepartmentM().getId();
					docId = storeMmfDepartmentTList.get(0)
							.getStoreMmfDepartmentM().getDocNo();
					map.put("docId", docId);
					if (storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
							.getApprovedBy() != null) {
						approvedId = storeMmfDepartmentTList.get(0)
								.getStoreMmfDepartmentM().getApprovedBy()
								.getId();
						map.put("approvedId", approvedId);
					}

					map.put("mmfMasterId", mmfMasterId);
				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
						.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
							.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
								.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null) {
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						} else {
							preQtymmf = new BigDecimal(0);
						}
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null) {
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						} else {
							currQtymmf = new BigDecimal(0);
						}
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					storeMmfDepartmentTList1 = session
							.createCriteria(StoreMmfDepartmentT.class)
							.createAlias("StoreMmfDepartmentM", "m")
							.add(Restrictions.eq("m.MmfStoreType",
									box.get("storeType")))
							.add(Restrictions.eq("m.MmfForTheYear",
									box.getInt(MMF_DEPARTMENT_DATE)))
							.createAlias("Item", "i")
							.add(Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();
					boolean flag = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
										.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true) {
							break;
						}

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}

				if (vResult.size() > 0) {
					testPageData = new HashMap[vResult.size()];
					vResult.copyInto(testPageData);
				}

				try {
					pagedArray = new PageUtil().convertToPagedArrayIndex(
							testPageData, box);
				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("pagedArray", pagedArray);
		}

		return map;
	}

	public Map<String, Object> searchMmfDepartmentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		String remark = null;
		String remarks = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		int id = 0;
		String docId = "";
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee");

			searchStoreMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			if (searchStoreMmfDepartmentMList != null
					&& searchStoreMmfDepartmentMList.size() > 0) {
				map.put("docId", searchStoreMmfDepartmentMList.get(0)
						.getDocNo());
			}

			map.put("departmentList", departmentList);
			map.put("approvedByEmployeeList", approvedByEmployeeList);
			map.put("searchStoreMmfDepartmentMList",
					searchStoreMmfDepartmentMList);
			if (searchStoreMmfDepartmentMList != null
					&& searchStoreMmfDepartmentMList.size() > 0) {
				map.put("remarks", searchStoreMmfDepartmentMList.get(0)
						.getRemarks());
				// map.put("docId", box.getInt(DOC_NO));
			}

			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			storeMmfDepartmentTList = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")

					.add(Restrictions.eq(
							"m.StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.add(Restrictions.eq("m.DocNo", box.get(DOC_NO))).list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (storeMmfDepartmentTList != null
				&& storeMmfDepartmentTList.size() > 0) {
			int mmfMasterId = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getId();
			int mmfDate = storeMmfDepartmentTList.get(0)
					.getStoreMmfDepartmentM().getMmfForTheYear();
			if (storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
					.getApprovedBy() != null) {
				int approvedId = storeMmfDepartmentTList.get(0)
						.getStoreMmfDepartmentM().getApprovedBy().getId();
				docId = storeMmfDepartmentTList.get(0).getStoreMmfDepartmentM()
						.getDocNo();
				map.put("approvedId", approvedId);
				map.put("docId", docId);
			}
			map.put("mmfMasterId", mmfMasterId);
			map.put("mmfDate", mmfDate);
		}

		for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
				.hasNext();) {
			StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
					.next();

			try {
				id = storeMmfDepartmentT.getId();
			} catch (Exception e) {
				id = 0;
			}

			try {
				pvms = storeMmfDepartmentT.getItem().getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = storeMmfDepartmentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				au = storeMmfDepartmentT.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				qtymmf = storeMmfDepartmentT.getMmfInQty();
			} catch (Exception e) {
				qtymmf = new BigDecimal(0);
			}

			try {
				if (preQtymmf != null) {
					preQtymmf = storeMmfDepartmentT.getPreYearMmf();
				} else {
					preQtymmf = new BigDecimal(0);
				}
			} catch (Exception e) {
				preQtymmf = new BigDecimal(0);
			}
			try {
				if (currQtymmf != null) {
					currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
				} else {
					currQtymmf = new BigDecimal(0);
				}
			} catch (Exception e) {
				currQtymmf = new BigDecimal(0);
			}
			try {
				remark = storeMmfDepartmentT.getRemarks();
			} catch (Exception e) {
				remark = "";
			}
			hData = new HashMap<String, Object>();
			// code for checking that approval for particular item is alredy
			// done
			List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
			storeMmfDepartmentTList1 = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.Id", storeMmfDepartmentT.getItem()
							.getId())).list();
			boolean flag = false;
			for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
				if (storeMmfDepartmentT2.getApprovedStatus() != null
						&& !storeMmfDepartmentT2.getApprovedStatus().equals("")) {
					if (storeMmfDepartmentT2.getApprovedStatus()
							.equalsIgnoreCase("p")) {
						hData.put("approvedStatus", "p");
						flag = true;
					}

				}
				if (flag == true) {
					break;
				}

			}

			hData.put("id", id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("currQtymmf", currQtymmf);
			hData.put("preQtymmf", preQtymmf);
			hData.put("remark", remark);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map<String, Object> getItemDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		String str = null;
		String str1 = null;
		// BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String mmfNo = box.get("mmfNo");

			map.put("mmfNo", mmfNo);

			if (box.getInt("mmfMasterId") != 0) {
				storeMmfDepartmentTList = hbt
						.find("from jkt.hms.masters.business.StoreMmfDepartmentT as inp where inp.StoreMmfDepartmentM.Id = "
								+ box.getInt("mmfMasterId"));
			}

			for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
					.hasNext();) {
				StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
						.next();
				mmfTItems.add(storeMmfDepartmentT.getItem().getId());
			}

			if (box.get("search_text") != null
					&& box.getString("search_text").length() > 0) {
				if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					str = box.getString("search_text") + "%";
					str1 = box.getString("pvms") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.or(
									Restrictions.like("Nomenclature", str),
									Restrictions.like("PvmsNo", str1)));
				} else {
					str = box.getString("search_text") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("Nomenclature", str));
				}
			} else {
				if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					str1 = box.getString("pvms") + "%";

					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("PvmsNo", str1));
				} else {
					c = session.createCriteria(MasStoreItem.class);
					c.setFirstResult(0);
					c.setMaxResults(1000);
				}
			}
		}

		catch (HibernateException e) {
			e.printStackTrace();
		}
		/*
		 * int firstResult = box.getInt("currPage") - 1 *
		 * box.getInt("numOfRows"); int maxResults = box.getInt("numOfRows");
		 * c.setFirstResult(firstResult); c.setMaxResults(maxResults);
		 */
		itemList = c.list();
		StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();

			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
						.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			// if (!mmfTItems.contains(item_id)) {
			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("strength", strength);
			hData.put("qtymmf", new BigDecimal(0));

			// code for checking that approval for particular item is alredy
			// done

			List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
			try {
				storeMmfDepartmentTList1 = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfStoreType",
								box.get("storeType")))
						.add(Restrictions.eq("m.MmfForTheYear",
								box.getInt(MMF_DEPARTMENT_DATE)))
						.createAlias("Item", "i")
						.add(Restrictions.eq("i.Id", item_id)).list();
			} catch (Exception e) {

			}
			boolean flag = false;
			for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
				if (storeMmfDepartmentT2.getApprovedStatus() != null
						&& !storeMmfDepartmentT2.getApprovedStatus().equals("")) {
					if (storeMmfDepartmentT2.getApprovedStatus()
							.equalsIgnoreCase("p")) {
						hData.put("approvedStatus", "p");
						flag = true;
					}

				}
				if (flag == true) {
					break;
				}

			}

			for (StoreMmfDepartmentT storeMmfDepartmentT1 : storeMmfDepartmentTList) {

				if (storeMmfDepartmentT1.getItem().getId() == masStoreItem
						.getId()) {

					hData.put("qtymmf", storeMmfDepartmentT1.getMmfInQty());

					break;
				}
			}
			// hData.put(TENDER_ANNREQ, annreq);
			hData.put("au", au);

			vResult.add(hData);

			// }
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("mmfTItems", mmfTItems);
		map.put("pagedArray", pagedArray);
		map.put("storeType", box.get("storeType"));
		session.flush();
		return map;
	}

	public Map<String, Object> getItemDetailsForMmfDepartmentJspForNextRecord(
			Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = new BigDecimal(0);
		String str = null;
		// BigDecimal annreq = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		mmfTItems = box.getVector("mmfTItems");
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			String mmfNo = box.get("mmfNo");

			map.put("mmfNo", mmfNo);

			if (box.getInt("mmfMasterId") != 0) {
				storeMmfDepartmentTList = hbt
						.find("from jkt.hms.masters.business.StoreMmfDepartmentT as inp where inp.StoreMmfDepartmentM.Id = "
								+ box.getInt("mmfMasterId"));
			}
			int count = 1;
			for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
					.hasNext();) {
				if (count != 1) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
							.next();
					mmfTItems.add(storeMmfDepartmentT.getItem().getId());
				}
				count++;
			}

			if (box.get("search_text") != null
					&& box.getString("search_text").length() > 0) {
				if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					str = box.getString("search_text") + "%";
					pvms = box.getString("pvms");
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.or(
									Restrictions.like("Nomenclature", str),
									Restrictions.eq("PvmsNo", pvms)));
				} else {
					str = box.getString("search_text") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("Nomenclature", str));
				}
				// itemList = c.list();
			} else {
				int itemId = 0;
				if (box.getString("buttonName").equals("next")) {
					itemId = box.getInt("itemId");
				} else {
					itemId = Integer.parseInt(box
							.getString("itemIdForNextRecord"));
				}

				c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.ge("Id", itemId))
						.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(1000);
				// itemList = c.list();
				String itemIdForNextRecord = Integer.toString(itemId);
				map.put("itemIdForNextRecord", itemIdForNextRecord);
			}
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		/*
		 * int firstResult = box.getInt("currPage") - 1 *
		 * box.getInt("numOfRows"); int maxResults = box.getInt("numOfRows");
		 * c.setFirstResult(firstResult); c.setMaxResults(maxResults);
		 */

		// StoreMmfDepartmentT storeMmfDepartmentT=new StoreMmfDepartmentT();
		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();

			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
						.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			// if (!mmfTItems.contains(item_id)) {
			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("strength", strength);

			// hData = new HashMap<String, Object>();

			// code for checking that approval for particular item is alredy
			// done
			List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
			storeMmfDepartmentTList1 = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.Id", item_id)).list();
			boolean flag = false;
			for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
				if (storeMmfDepartmentT2.getApprovedStatus() != null
						&& !storeMmfDepartmentT2.getApprovedStatus().equals("")) {
					if (storeMmfDepartmentT2.getApprovedStatus()
							.equalsIgnoreCase("p")) {
						hData.put("approvedStatus", "p");
						flag = true;
					}

				}
				if (flag == true) {
					break;
				}

			}

			hData.put("qtymmf", new BigDecimal(0));

			for (StoreMmfDepartmentT storeMmfDepartmentT1 : storeMmfDepartmentTList) {

				if (storeMmfDepartmentT1.getItem().getId() == masStoreItem
						.getId()) {

					hData.put("qtymmf", storeMmfDepartmentT1.getMmfInQty());

					break;
				}
			}
			// hData.put(TENDER_ANNREQ, annreq);
			hData.put("au", au);
			vResult.add(hData);

			// }
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("storeType", box.get("storeType"));
		map.put("mmfTItems", mmfTItems);
		session.flush();
		return map;
	}

	public Map<String, Object> doAddMmfItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Vector items = box.getVector("itemId");
		Vector qtymmf = box.getVector("qtymmf");
		// Vector annreq = box.getVector(TENDER_ANNREQ);
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);
		int mmfMasterId = box.getInt("mmfMasterId");
		int newmmfMasterId = 0;
		int previousYear = box.getInt("previousYear");
		StoreMmfDepartmentM storeMmfDepartmentM = null;
		List<StoreMmfDepartmentM> storeMmfDepartmentMList1 = null;

		StoreMmfDepartmentM newMObj = null;
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		MasStoreItem masStoreItem = null;

		int sr_no = 0;
		int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		String mmfNo = box.get("mmfNo");
		String no = "";
		StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();

		/*
		 * storeMmfDepartmentMList = hbt .find("from
		 * jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id =" +
		 * mmfMasterId);
		 * 
		 * storeMmfDepartmentTList = hbt .find("from
		 * jkt.hms.masters.business.StoreMmfDepartmentT as b where
		 * b.StoreMmfDepartmentM.Id =" + mmfMasterId + " order by b.SrNo desc");
		 * 
		 * if (storeMmfDepartmentMList != null && storeMmfDepartmentMList.size()
		 * > 0) { storeMmfDepartmentM = (StoreMmfDepartmentM)
		 * storeMmfDepartmentMList .get(0); }
		 */

		/*
		 * if (storeMmfDepartmentTList != null && storeMmfDepartmentTList.size()
		 * > 0) { sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue(); }
		 * 
		 * 
		 * if (mmfNo == null || mmfNo.equals("")) { // For Generating & Saving
		 * new MMF No for StoreFyDocumentNo Table
		 * 
		 * List<StoreFyDocumentNo> mmfNoList = session
		 * .createCriteria(StoreFyDocumentNo.class).addOrder(Order.desc("Id"))
		 * .add(Restrictions.eq("Department.Id",box.getInt(
		 * STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))) .list();
		 * 
		 * if (mmfNoList != null && mmfNoList.size() > 0) { storeFyDocumentNo =
		 * (StoreFyDocumentNo) mmfNoList.get(0); mmfNo = ("" +
		 * storeFyDocumentNo.getMmfNo());
		 * 
		 * mmfNo = "01/" + currentYear; } }
		 */
		try {
			List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
			List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			/*
			 * if (box.getInt("mmfMasterId") != 0) {
			 * 
			 * storeMmfDepartmentMList = hbt .find("from
			 * jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id =" +
			 * mmfMasterId);
			 * 
			 * storeMmfDepartmentTList = hbt .find("from
			 * jkt.hms.masters.business.StoreMmfDepartmentT as b where
			 * b.StoreMmfDepartmentM.Id =" + mmfMasterId + " order by b.SrNo
			 * desc");
			 * 
			 * if (storeMmfDepartmentMList != null &&
			 * storeMmfDepartmentMList.size() > 0) { storeMmfDepartmentM =
			 * (StoreMmfDepartmentM) storeMmfDepartmentMList .get(0); }
			 * 
			 * if (storeMmfDepartmentTList != null &&
			 * storeMmfDepartmentTList.size() > 0) { sr_no =
			 * storeMmfDepartmentTList.get(0).getSrNo().intValue(); }
			 * newmmfMasterId = storeMmfDepartmentM.getId();
			 */

			storeMmfDepartmentTList = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq(
							"m.StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.addOrder(Order.desc("SrNo")).list();

			if (storeMmfDepartmentTList != null
					&& storeMmfDepartmentTList.size() > 0) {
				sr_no = storeMmfDepartmentTList.get(0).getSrNo().intValue();
			}
			storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();
			mmfNo = "01/" + currentYear;
			newMObj = new StoreMmfDepartmentM();

			if (storeMmfDepartmentMList.size() > 0
					&& storeMmfDepartmentMList != null) {
				newMObj = storeMmfDepartmentMList.get(0);

				newmmfMasterId = newMObj.getId();
			} else {

				/*
				 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT) != 0) {
				 * MasEmployee masEmployee = new MasEmployee();
				 * masEmployee.setId(box
				 * .getInt(APPROVED_BY_EMPLOYEE_ID_MMF_DEPENDENT));
				 * newMObj.setApprovedBy(masEmployee); }
				 */
				// according to new requirements of adding 2 textfields
				newMObj.setDocNo(mmfNo);
				map.put("docId", mmfNo);
				newMObj.setLastChgBy(box.get(CHANGED_BY));
				newMObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				newMObj.setLastChgTime(box.get(CHANGED_TIME));
				newMObj.setMmfForTheYear(currentYear);

				// doAddMmfItems----"+ box.get(REMARKS));
				newMObj.setRemarks(box.get(REMARKS));
				newMObj.setStatus("o");
				newMObj.setCheckedBy(box.getString(CHECKED_BY));
				newMObj.setPreparedBy(box.getString(PREPARED_BY));

				MasDepartment storeWardDept = new MasDepartment();
				storeWardDept.setId(box
						.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
				newMObj.setStoreWardDept(storeWardDept);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				newMObj.setHospital(masHospital);
				newMObj.setMmfStoreType(box.get("storeType"));
				hbt.save(newMObj);
				hbt.refresh(newMObj);
				List<StoreFyDocumentNo> mmfNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq(
								"Department.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.list();

				if (mmfNoList != null && mmfNoList.size() > 0) {
					storeFyDocumentNo = mmfNoList.get(0);
					storeFyDocumentNo.setMmfNo(mmfNo);
					hbt.saveOrUpdate(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}

				else {
					storeFyDocumentNo.setMmfNo(mmfNo);
					MasDepartment masDepartment = new MasDepartment();
					masDepartment
							.setId(box
									.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					storeFyDocumentNo.setDepartment(masDepartment);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}

				storeMmfDepartmentMList1 = session
						.createCriteria(StoreMmfDepartmentM.class)
						.add(Restrictions.eq("MmfForTheYear",
								box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq(
								"StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("MmfStoreType",
								box.get("storeType"))).list();
				newmmfMasterId = storeMmfDepartmentMList1.get(0).getId();

			}
			for (int i = 0; i < items.size(); i++) {
				if (items_to_be_added.contains(items.get(i))) {
					masStoreItem = new MasStoreItem();
					masStoreItem
							.setId(Integer.valueOf(items.get(i).toString()));

					storeMmfDepartmentT = new StoreMmfDepartmentT();

					storeMmfDepartmentT.setItem(masStoreItem);
					// Create new department Master record
					storeMmfDepartmentT.setStoreMmfDepartmentM(newMObj);

					storeMmfDepartmentT.setMmfInQty(new BigDecimal(qtymmf
							.get(i).toString()));
					// todo
					storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(qtymmf
							.get(i).toString()));

					List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
					/*
					 * preStoreMmfDepartmentTList=(List<StoreMmfDepartmentT>)session
					 * .createCriteria(StoreMmfDepartmentT.class).createAlias(
					 * "StoreMmfDepartmentT","i").add(Restrictions.eq(
					 * "i.StoreMmfDepartmentM.MmfForTheYear", previousYear))
					 * 
					 * 
					 * 
					 * .add(Restrictions.eq("i.StoreMmfDepartmentM.StoreWardDept.Id"
					 * ,
					 * box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT))
					 * .add(Restrictions.eq("i.ItemId",
					 * Integer.valueOf(.get(i).toString())).list();
					 */

					// storeMmfDepartmentT.setPreYearMmf();
					preStoreMmfDepartmentTList = hbt
							.find("from StoreMmfDepartmentT  premmf where premmf.Item="
									+ Integer.valueOf(items.get(i).toString())
									+ " and premmf.StoreMmfDepartmentM.MmfForTheYear="
									+ (currentYear - 1)
									+ " and premmf.StoreMmfDepartmentM.StoreWardDept.Id="
									+ box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
					if (preStoreMmfDepartmentTList != null
							&& preStoreMmfDepartmentTList.size() > 0) {
						storeMmfDepartmentT
								.setPreYearMmf((preStoreMmfDepartmentTList
										.get(0)).getMmfInQty());
					} else {
						storeMmfDepartmentT.setPreYearMmf(new BigDecimal(0));
					}
					storeMmfDepartmentT.setSrNo(++sr_no);
					hbt.save(storeMmfDepartmentT);
					hbt.refresh(storeMmfDepartmentT);
				}
			}
			box.put("mmfMasterId", newmmfMasterId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				map = getItemDetailsForMmfDepartmentJspForNextRecord(box);
			} else {
				map = getItemDetails(box);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("newmmfMasterId", newmmfMasterId);
		map.put("currentYear", currentYear);
		map.put("previousYear", previousYear);
		return map;
	}

	public Map<String, Object> updateGridItemsInMmf(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		String obj = null;
		String docId = "";
		Vector items = box.getVector("id");
		if (items.size() > 0) {
			try {

				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				Vector srno = box.getVector("srno");
				Vector qtymmf = box.getVector("qtymmf");

				Vector remark = box.getVector("remark");
				int itemId1 = 0;

				if (items.get(0).toString() != null
						&& !items.get(0).toString().equals("")) {
					itemId1 = Integer.parseInt(items.get(0).toString());
				}
				StoreMmfDepartmentT tObj1 = (StoreMmfDepartmentT) hbt.load(
						StoreMmfDepartmentT.class, itemId1);
				tObj1.getStoreMmfDepartmentM()
						.setLastChgBy(box.get(CHANGED_BY));
				tObj1.getStoreMmfDepartmentM().setLastChgDate(
						HMSUtil.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				tObj1.getStoreMmfDepartmentM().setLastChgTime(
						box.get(CHANGED_TIME));
				tObj1.getStoreMmfDepartmentM().setRemarks(box.get(REMARKS));
				tObj1.getStoreMmfDepartmentM().setPreparedBy(
						box.get(PREPARED_BY));
				tObj1.getStoreMmfDepartmentM().setCheckedBy(
						box.getString(CHECKED_BY));
				hbt.update(tObj1);
				for (int i = 0; i < srno.size(); i++) {
					int itemId = Integer.parseInt(items.get(i).toString());
					StoreMmfDepartmentT tObj = (StoreMmfDepartmentT) hbt.load(
							StoreMmfDepartmentT.class, itemId);
					tObj.setMmfInQty(new BigDecimal(qtymmf.get(i).toString()));
					tObj.setCurrYearMmf(new BigDecimal(qtymmf.get(i).toString()));
					docId = tObj.getStoreMmfDepartmentM().getDocNo();
					tObj.setRemarks(remark.get(i).toString());
					docId = tObj.getStoreMmfDepartmentM().getDocNo();
					hbt.update(tObj);
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
		}
		map = getMmfDepartmentData(box);
		map.put("docId", docId);
		return map;
	}

	public Map<String, Object> getCurrentYearMmf(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);

		String remark = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		// added by shailesh
		List<StoreMmfDepartmentT> preStoreMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		// added by shailesh
		List<Integer> mmfDepartmentQntCurrYear = new ArrayList<Integer>();
		String docId = "";

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreMmfDepartmentT storeMmfDepartmentT1 = new StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
			int previousYear = currentYear - 1;
			String mmfNo = box.get("mmfNo");
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			searchStoreMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			map.put("currentYear", currentYear);
			map.put("storeType", box.get("storeType"));
			map.put("previousYear", previousYear);
			map.put("departmentList", departmentList);
			map.put("approvedByEmployeeList", approvedByEmployeeList);
			map.put("searchStoreMmfDepartmentMList",
					searchStoreMmfDepartmentMList);
			map.put("storeMmfDepartmentMList", storeMmfDepartmentMList);

			map.put("mmfNo", mmfNo);
			if (storeMmfDepartmentMList != null
					&& storeMmfDepartmentMList.size() > 0) {
				map.put("docId", storeMmfDepartmentMList.get(0).getDocNo());
				int approvedId = 0;
				try {
					approvedId = storeMmfDepartmentMList.get(0).getApprovedBy()
							.getId();
				} catch (Exception e) {
					approvedId = 0;
				}
				String remarks = storeMmfDepartmentMList.get(0).getRemarks();
				String preparedBy = storeMmfDepartmentMList.get(0)
						.getPreparedBy();
				String checkedBy = storeMmfDepartmentMList.get(0)
						.getCheckedBy();
				map.put("checkedBy", checkedBy);
				map.put("preparedBy", preparedBy);
				map.put("approvedId", approvedId);
				map.put("remarks", remarks);

				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				storeMmfDepartmentTList = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear",
								box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq(
								"m.StoreWardDept.Id",
								box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
						.add(Restrictions.eq("m.MmfStoreType",
								box.get("storeType"))).list();

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					int mmfMasterId = storeMmfDepartmentTList.get(0)
							.getStoreMmfDepartmentM().getId();
					map.put("mmfMasterId", mmfMasterId);

				}

				for (Iterator iterator = storeMmfDepartmentTList.iterator(); iterator
						.hasNext();) {
					StoreMmfDepartmentT storeMmfDepartmentT = (StoreMmfDepartmentT) iterator
							.next();

					try {
						id = storeMmfDepartmentT.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						pvms = storeMmfDepartmentT.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = storeMmfDepartmentT.getItem()
								.getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						au = storeMmfDepartmentT.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}

					try {
						remark = storeMmfDepartmentT.getRemarks();
					} catch (Exception e) {
						remark = "";
					}
					try {
						if (storeMmfDepartmentT.getPreYearMmf() != null) {
							preQtymmf = storeMmfDepartmentT.getPreYearMmf();
						} else {
							preQtymmf = new BigDecimal(0);
						}
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}

					try {
						if (storeMmfDepartmentT.getCurrYearMmf() != null) {
							currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						} else {
							currQtymmf = new BigDecimal(0);
						}
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					hData = new HashMap<String, Object>();
					// code for checking that approval for particular item is
					// alredy done
					List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
					storeMmfDepartmentTList1 = session
							.createCriteria(StoreMmfDepartmentT.class)
							.createAlias("StoreMmfDepartmentM", "m")
							.add(Restrictions.eq("m.MmfStoreType",
									box.get("storeType")))
							.add(Restrictions.eq("m.MmfForTheYear",
									box.getInt(MMF_DEPARTMENT_DATE)))
							.createAlias("Item", "i")
							.add(Restrictions.eq("i.Id", storeMmfDepartmentT
									.getItem().getId())).list();
					boolean flag = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT2 : storeMmfDepartmentTList1) {
						if (storeMmfDepartmentT2.getApprovedStatus() != null
								&& !storeMmfDepartmentT2.getApprovedStatus()
										.equals("")) {
							if (storeMmfDepartmentT2.getApprovedStatus()
									.equalsIgnoreCase("p")) {
								hData.put("approvedStatus", "p");
								flag = true;
							}

						}
						if (flag == true) {
							break;
						}

					}

					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("qtymmf", qtymmf);
					hData.put("preQtymmf", preQtymmf);
					hData.put("currQtymmf", currQtymmf);

					hData.put("remark", remark);

					vResult.add(hData);
				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("pagedArray", pagedArray);
		return map;

	}

	public Map<String, Object> deleteGridItemsForMmf(Box box) {
		Session session = (Session) getSession();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList1 = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();

			Vector srno = box.getVector("srno");
			// Vector annreq = box.getVector(TENDER_ANNREQ);
			Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);

			storeMmfDepartmentMList = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq(
							"StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("MmfStoreType", box.get("storeType")))
					.list();

			storeMmfDepartmentTList1 = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq(
							"m.StoreWardDept.Id",
							box.getInt(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.list();
			String obj = null;
			for (int i = 0; i < delete.size(); i++) {
				int itemId = Integer.parseInt(delete.get(i).toString());
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// String hql="delete from
				// jkt.hms.masters.business.StoreMmfDepartmentT as a where
				// a.Item.Id = "+itemId;
				String hql = "delete from jkt.hms.masters.business.StoreMmfDepartmentT as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						itemId);
				int row = query.executeUpdate();

			}
			if (storeMmfDepartmentTList1.size() == delete.size()) {
				int StoreMmfDepartmentMId = storeMmfDepartmentTList1.get(0)
						.getStoreMmfDepartmentM().getId();
				String hql = "delete from jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id like :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						StoreMmfDepartmentMId);
				int row = query.executeUpdate();
			}
			map.put("total_records", srno.size());
			map.put("deleted_records", delete.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1) {
				box.put("currPage", box.getInt("currPage") - 1);
			}
		}
		box.remove("pvmsNo");

		map = getMmfDepartmentData(box);
		return map;

	}

	// ---------------------------------- Physical
	// Stock----------------------------------------

	public Map<String, Object> searchPhysicalStock(int departmentId) {
		List<StoreStockTakingT> searchStoreStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<StoreItemBatchStock> searchStoreItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		Map<String, Object> indentTFieldsMap = new HashMap<String, Object>();
		try {
			if ((departmentId != 0)) {
				searchStoreStockTakingTList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreStockTakingT as SST where SST.StockTakingM.Department.Id='"
								+ departmentId + "'");
				searchMasDepartmentList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.MasDepartment as md");
				searchStoreItemBatchStockList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreItemBatchStock as stb where stb.Department.Id= '"
								+ departmentId + "'");
				searchStoreStockTakingMList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreStockTakingM as SST ");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		indentTFieldsMap.put("searchStoreStockTakingTList",
				searchStoreStockTakingTList);
		indentTFieldsMap.put("searchStoreItemBatchStockList",
				searchStoreItemBatchStockList);
		indentTFieldsMap
				.put("searchMasDepartmentList", searchMasDepartmentList);
		indentTFieldsMap.put("searchStoreStockTakingMList",
				searchStoreStockTakingMList);

		return indentTFieldsMap;
	}

	public boolean addPhysicalStock(StoreStockTakingM storeStockTakingM,
			List<StoreStockTakingT> storeStockTakingTlist) {
		boolean successfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
		try {
			hbt.save(storeStockTakingM);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {

			if (storeStockTakingTlist.size() > 0) {
				for (int i = 0; i < storeStockTakingTlist.size(); i++) {
					StoreStockTakingT storeStockTakingTObj = new StoreStockTakingT();
					storeStockTakingTObj = (StoreStockTakingT) storeStockTakingTlist
							.get(i);
					storeStockTakingTObj.setStockTakingM(storeStockTakingM);
					hbt.save(storeStockTakingTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public boolean addPhysicalStock11(StoreStockTakingM storeStockTakingM,
			List<StoreStockTakingT> storeStockTakingTlist,
			Map<String, Object> map) {

		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		int pageNo = 0;
		StoreStockTakingM storeStockTakingM2 = new StoreStockTakingM();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);

		if (!(map.get("headerStored") + "").equals("yes")) {
			try {
				hbt.save(storeStockTakingM);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {
			if (storeStockTakingTlist.size() > 0) {
				if ((map.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + map.get("physicalStockId"));
					storeStockTakingM2.setId(id);
				}
				for (int i = 0; i < storeStockTakingTlist.size(); i++) {
					StoreStockTakingT storeStockTakingTObj = new StoreStockTakingT();
					storeStockTakingTObj = (StoreStockTakingT) storeStockTakingTlist
							.get(i);
					if ((map.get("headerStored") + "").equals("yes")) {
						storeStockTakingTObj
								.setStockTakingM(storeStockTakingM2);
					} else {
						storeStockTakingTObj.setStockTakingM(storeStockTakingM);
					}
					hbt.save(storeStockTakingTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public boolean updatePhysicalStock(StoreStockTakingM storeStockTakingM,
			List<StoreStockTakingT> storeStockTakingTlist) {
		boolean successfullyAdded = false;
		StoreStockTakingM storeStockTakingM2 = new StoreStockTakingM();
		storeStockTakingM2 = storeStockTakingM;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeStockTakingM2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeStockTakingTlist.size() > 0) {
				for (int i = 0; i < storeStockTakingTlist.size(); i++) {
					StoreStockTakingT storeStockTakingTObj = new StoreStockTakingT();
					storeStockTakingTObj = (StoreStockTakingT) storeStockTakingTlist
							.get(i);
					hbt.update(storeStockTakingTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public Map<String, Object> getItemDetailsForStockTakingAdd(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		session = (Session) getSession();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal qtyInHand = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector indentTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		try {
			int pageno = 1;
			int numOfRows = 25;
			try {
				if (box.get("pageno") != null) {
					pageno = Integer.parseInt(box.getString("pageno"));
				}
			} catch (Exception e) {
				// e.printStackTrace();
				pageno = 1;
			}

			try {
				if (box.get("numOfRows") != null) {
					numOfRows = Integer.parseInt(box.getString("numOfRows"));
				}
			} catch (Exception e) {
				numOfRows = 5;
			}

			map.put("pageno", pageno);

			int first = (pageno - 1) * numOfRows;
			int totalRecords = 0;
			String str = "";
			Criteria c = null;

			if (box.getString("search_text").equals("")
					&& box.getString("pvms").equals("")) {
				c = session.createCriteria(MasStoreItem.class);
				String qry = "select count(*) from mas_store_item ";
				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);
			} else if (!box.getString("search_text").equals("")
					&& box.getString("pvms").equals("")) {
				str = "%" + box.getString("search_text") + "%";
				c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("Nomenclature", str))
						.addOrder(Order.asc("Nomenclature"))
						.addOrder(Order.asc("PvmsNo"));
				String qry = "select count(*) from mas_store_item where nomenclature like '%"
						+ box.getString("search_text") + "%'";
				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);
			} else if (!box.getString("pvms").equals("")
					&& box.getString("search_text").equals("")) {
				str = "%" + box.getString("pvms") + "%";
				c = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("PvmsNo", str))
						.addOrder(Order.asc("Nomenclature"))
						.addOrder(Order.asc("PvmsNo"));
				String qry = "select count(*) from mas_store_item where pvms_no like '%"
						+ box.getString("pvms") + "%'";
				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);
			}

			double totalPages = 0.0;
			totalPages = (double) totalRecords / (double) numOfRows;
			Double d = new Double(Math.ceil(totalPages));
			map.put("totalPages", d.intValue());

			if (totalRecords < numOfRows) {
				itemList = c.list();
			} else {
				itemList = c.setFirstResult(first).setMaxResults(numOfRows)
						.list();
			}
			List a = new ArrayList<Integer>();
			for (int i = 0; i < itemList.size(); i++) {
				a.add(itemList.get(i).getId());
			}

			brandList = session.createCriteria(MasStoreBrand.class)
					.add(Restrictions.in("Item.Id", a)).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("brandList", brandList);

		return map;
	}

	public Map<String, Object> doAddStockTakingItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();

		Vector items = box.getVector("itemId");
		Vector brand = box.getVector("brand");
		Vector batch = box.getVector("batch");
		Vector expiry = box.getVector("expiry");
		Vector costprice = box.getVector("cost_price");

		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);

		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		try {
			List<StoreStockTakingM> storeStockTakingMList = new ArrayList<StoreStockTakingM>();
			List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
			StoreStockTakingM storeStockTakingM = new StoreStockTakingM();
			StoreStockTakingT storeStockTakingT = new StoreStockTakingT();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			int srno = 1;

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(box
					.getString(PHYSICAL_STOCK_DATE)));
			java.sql.Date stockDate = java.sql.Date.valueOf(date4MySQL1);

			storeStockTakingMList = session
					.createCriteria(StoreStockTakingM.class)
					.add(Restrictions.eq("Department.Id",
							box.getInt(DEPARTMENT_ID)))
					.add(Restrictions.eq("PhysicalDate", stockDate)).list();

			if (storeStockTakingMList != null
					&& storeStockTakingMList.size() > 0) {
				storeStockTakingM = storeStockTakingMList.get(0);
				storeStockTakingTList = session
						.createCriteria(StoreStockTakingT.class)
						.add(Restrictions.eq("StockTakingM.Id",
								storeStockTakingM.getId()))
						.addOrder(Order.desc("SrNo")).list();
				if (storeStockTakingTList != null
						&& storeStockTakingTList.size() > 0) {
					srno = storeStockTakingTList.get(0).getSrNo().intValue();
				}
			}

			BigDecimal cp = new BigDecimal(0);
			for (int i = 0; i < items.size(); i++) {
				if (items_to_be_added.contains(items.get(i))) {
					storeStockTakingT = new StoreStockTakingT();
					storeStockTakingT.setBatchNo(batch.get(i).toString());
					// storeStockTakingT.setBrand(new
					// MasStoreBrand(Integer.parseInt(brand.get(i).toString())));

					try {
						cp = new BigDecimal(costprice.get(i).toString());
					} catch (Exception e) {
						cp = new BigDecimal(0);
					}

					storeStockTakingT.setCostPrice(cp);

					date4MySQL1 = formatterOut.format(formatterIn.parse(expiry
							.get(i).toString()));
					java.sql.Date expiryDate = java.sql.Date
							.valueOf(date4MySQL1);

					storeStockTakingT.setExpiryDate(expiryDate);
					storeStockTakingT.setItem(new MasStoreItem(Integer
							.parseInt(items.get(i).toString())));
					storeStockTakingT
							.setRemarks("items added during stock verification");
					storeStockTakingT.setSrNo(++srno);
					storeStockTakingT.setStockTakingM(storeStockTakingM);
					storeStockTakingT.setItemBatchStock(null);
					storeStockTakingT.setStockDeficient(new BigDecimal(0));
					storeStockTakingT.setStockSurplus(new BigDecimal(0));
					storeStockTakingT.setStoreStockDefective(new BigDecimal(0));
					storeStockTakingT.setStoreStockService(new BigDecimal(0));
					storeStockTakingT.setComputedStock(new BigDecimal(0));

					hbt.save(storeStockTakingT);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map = getItemDetailsForStockTakingAdd(box);
		return map;
	}

	public Map<String, Object> showAdjustment1(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();

		List<StoreAdjustmentM> searchStoreAdjustmentMList = new ArrayList<StoreAdjustmentM>();
		List<StoreAdjustmentT> searchStoreAdjustmentTList = new ArrayList<StoreAdjustmentT>();
		List<MasDepartment> searchMasDepartmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> searchStoreStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> searchStoreItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		boolean adjustmentRecordExists = false;
		String max = "";
		String startNo = "";
		String no = "";
		String empty = "false";
		int physicalStockMId = 0;
		String max1 = "";
		Session session = (Session) getSession();
		try {
			if ((box.getInt("departmentId") != 0 && box
					.get("physicalStockMDate") != null)) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn.parse(box
						.getString("physicalStockMDate")));
				java.sql.Date physicalDate = java.sql.Date.valueOf(date4MySQL1);

				searchStoreStockTakingMList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreStockTakingM as SST where SST.Department.Id = "
								+ box.getInt("departmentId")
								+ " and SST.PhysicalDate = '"
								+ physicalDate
								+ "' and SST.Hospital.Id = '"
								+ box.getInt("hospitalId") + "'");
				// searchStoreAdjustmentMList =
				// getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreAdjustmentM as md where
				// md.Department.Id = "+box.getInt("departmentId"));
				// searchStoreAdjustmentTList =
				// getHibernateTemplate().find("from
				// jkt.hms.masters.business.StoreAdjustmentT as md");
				// searchMasDepartmentList = getHibernateTemplate().find("from
				// jkt.hms.masters.business.MasDepartment as md where md.Status
				// = 'y'");
				searchStoreItemBatchStockList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreItemBatchStock as stock where stock.Hospital.Id = '"
								+ box.getInt("hospitalId") + "' ");
				storeFyDocumentNoList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreFyDocumentNo as inp where inp.Department.Id = "
								+ box.getInt("departmentId")
								+ " and inp.Hospital.Id = '"
								+ box.getInt("hospitalId") + "'");
				for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
					if (storeFyDocumentNo.getDepartment().getId() == box
							.getInt("departmentId")) {
						no = ("" + storeFyDocumentNo.getAdjustmentNo());
					}
				}

				/*
				 * searchStoreStockTakingTList =
				 * getHibernateTemplate().find("from
				 * jkt.hms.masters.business.StoreStockTakingT as SST where
				 * SST.StockTakingM.Department.Id='"+ departmentId + "'and
				 * SST.StockTakingM.PhysicalDate='"+ physicalDate + "'");
				 * searchStoreStockTakingTList.size()); StoreStockTakingT
				 * stockTakingT = (StoreStockTakingT)
				 * searchStoreStockTakingTList.get(0); physicalStockMId =
				 * stockTakingT.getStockTakingM().getId();
				 * 
				 * 
				 * if (searchStoreStockTakingTList.size() == 0) { empty =
				 * "false"; } else { empty = "true"; }
				 */

				int pageno = 1;
				int numOfRows = 5;
				try {
					if (box.get("pageno") != null) {
						pageno = Integer.parseInt(box.getString("pageno"));
					}
				} catch (Exception e) {
					// e.printStackTrace();
					pageno = 1;
				}

				try {
					if (box.get("numOfRows") != null) {
						numOfRows = Integer
								.parseInt(box.getString("numOfRows"));
					}
				} catch (Exception e) {
					numOfRows = 5;
				}

				map.put("pageno", pageno);

				int first = (pageno - 1) * numOfRows;
				int totalRecords = 0;
				if (searchStoreStockTakingMList != null
						&& searchStoreStockTakingMList.size() > 0) {
					StoreStockTakingM mObj = (StoreStockTakingM) searchStoreStockTakingMList
							.get(0);
					physicalStockMId = mObj.getId();

					String qry = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
							+ physicalStockMId;
					String queryForNumber = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
							+ physicalStockMId
							+ " and ( stock_surplus > 0 or stock_deficient > 0 ) ";
					try {
						totalRecords = Integer.parseInt(session
								.createSQLQuery(qry).list().get(0).toString());
						int stocktakingforadjustmentcount = Integer
								.parseInt(session
										.createSQLQuery(queryForNumber).list()
										.get(0).toString());

						if (stocktakingforadjustmentcount == 0) {
							adjustmentRecordExists = true;
						} else {
							adjustmentRecordExists = false;
						}

					} catch (Exception e) {
						totalRecords = 0;
					}
					map.put("totalRecords", totalRecords);
					map.put("adjustmentRecordExists", adjustmentRecordExists);

					double totalPages = 0.0;
					totalPages = (double) totalRecords / (double) numOfRows;
					Double d = new Double(Math.ceil(totalPages));
					map.put("totalPages", d.intValue());

					Criteria c = session
							.createCriteria(StoreStockTakingT.class)
							.createAlias("StockTakingM", "stm")
							.createAlias("Item", "Item")
							.add(Restrictions.eq("stm.Id", physicalStockMId))
							.add(Restrictions.eq("stm.Department.Id",
									box.getInt("departmentId")))
							// .addOrder(Order.asc("Item.Id"))
							.addOrder(Order.asc("Item.PvmsNo"))
							.addOrder(Order.asc("Item.Nomenclature"))
							//Changed by Arbind on 28-03-2017
							//.add(Restrictions.gt("ComputedStock",	(new BigDecimal(0))));
							.add(Restrictions.gt("StoreStockService", (new BigDecimal(0))));

					/*c.setFirstResult(first);
					c.setMaxResults(numOfRows);*/
					searchStoreStockTakingTList = c.list();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			max = getMaxNo(no);
			if(box.getInt("departmentId") != 0 && box.get("departmentId") != "") {
				max1 = "adj/" + box.getInt("departmentId") + "/" + max;
			} else {
				max1 = "adj/" + max;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
		map.put("searchStoreStockTakingTList", searchStoreStockTakingTList);
		map.put("searchStoreItemBatchStockList", searchStoreItemBatchStockList);
		map.put("physicalStockMId", physicalStockMId);
		map.put("physicalStockMDate", box.get("physicalStockMDate"));
		map.put("max", max1);
		return map;

	}

	public boolean addAdjustment(Box box) {
		List<StoreStockTakingM> storeStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
		StoreAdjustmentT storeAdjustmentT = new StoreAdjustmentT();
		boolean flag = false;

		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn.parse(box
					.getString(RequestConstants.ADJUSTMENT_DATE)));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(box
					.getString(RequestConstants.CHANGED_DATE)));
			java.sql.Date adjustmentDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date changedDate = java.sql.Date.valueOf(date4MySQL2);

			storeAdjustmentM = new StoreAdjustmentM();
			storeAdjustmentM.setAdjustmentNo(box
					.get(RequestConstants.ADJUSTMENT_NO));

			storeAdjustmentM.setAdjustmentDate(adjustmentDate);
			storeAdjustmentM.setReason(box.getString(RequestConstants.REASON));
			storeAdjustmentM.setDepartment(new MasDepartment(box
					.getInt(DEPARTMENT_ID)));
			storeAdjustmentM.setHospital(new MasHospital(box
					.getInt(RequestConstants.HOSPITAL_ID)));
			storeAdjustmentM.setRemarks(box.getString(REMARKS));
			Users users = new Users();
			users.setId(box.getInt("userId"));
			storeAdjustmentM.setLastChangedBy(users);
			storeAdjustmentM.setLastChangedDate(changedDate);
			storeAdjustmentM
					.setApprovedBy(box
							.getString(RequestConstants.APPROVED_BY_EMPLOYEE_ID_ADJUSTMENT));
			storeAdjustmentM.setLastChangedTime(box.getString(CHANGED_TIME));
			storeAdjustmentM.setStatus("o");
			storeAdjustmentM.setStoreStockTakingM(new StoreStockTakingM(box
					.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)));
			hbt.save(storeAdjustmentM);

			storeStockTakingTList = session
					.createCriteria(StoreStockTakingT.class)
					.add(Restrictions.eq("StockTakingM.Id",
							box.getInt(RequestConstants.PHYSICAL_STOCK_ID_ID)))
					.addOrder(Order.asc("Item.Id")).list();

			if (storeStockTakingTList != null
					&& storeStockTakingTList.size() > 0) {
				int slno = 1;
				for (Iterator iterator = storeStockTakingTList.iterator(); iterator
						.hasNext();) {
					StoreStockTakingT storeStockTakingT = (StoreStockTakingT) iterator
							.next();
					if (storeStockTakingT.getStoreStockService().subtract(storeStockTakingT.getComputedStock()).compareTo(new BigDecimal(0)) != 0) {
						storeAdjustmentT = new StoreAdjustmentT();
						storeAdjustmentT.setSlNo(slno++);
						storeAdjustmentT.setItem(storeStockTakingT.getItem());
						// storeAdjustmentT.setBrand(storeStockTakingT.getBrand());
						storeAdjustmentT.setBatchNo(storeStockTakingT
								.getBatchNo());
						storeAdjustmentT.setExpiryDate(storeStockTakingT
								.getExpiryDate());
						if (storeStockTakingT.getStoreStockService() != null
								&& storeStockTakingT.getComputedStock() != null) {

							storeAdjustmentT.setAdjustQty(storeStockTakingT
									.getStoreStockService().subtract(
											storeStockTakingT
													.getComputedStock()));
						} else {
							storeAdjustmentT.setAdjustQty(new BigDecimal(0.00));
						}
						storeAdjustmentT.setAdjust(storeAdjustmentM);
						hbt.save(storeAdjustmentT);
						hbt.refresh(storeAdjustmentT);

						//Changed by Arbind on 28-03-2017 Checked hospital and department wise
						if (storeStockTakingT.getItemBatchStock() != null 
								&& storeStockTakingT.getStockTakingM().getHospital().getId() == box.getInt("hospitalId")
								&& storeStockTakingT.getStockTakingM().getDepartment().getId() == box.getInt("deptId")) {
							storeItemBatchStockList = session
									.createCriteria(StoreItemBatchStock.class)
									.add(Restrictions.eq("Id",
											storeStockTakingT
													.getItemBatchStock()
													.getId())).list();

							if (storeItemBatchStockList != null
									&& storeItemBatchStockList.size() > 0) {
								StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
										.get(0);
								BigDecimal closingStock = (BigDecimal) storeItemBatchStock
										.getClosingStock();
								BigDecimal difference = new BigDecimal(0.00);
								if (storeStockTakingT.getStoreStockService() != null
										&& storeStockTakingT.getComputedStock() != null) {
									difference = storeStockTakingT
											.getStoreStockService()
											.subtract(
													storeStockTakingT
															.getComputedStock());
								}
								BigDecimal finalStock = closingStock
										.add(difference);

								storeItemBatchStock.setAdjustQty(difference);
								storeItemBatchStock.setClosingStock(finalStock);
								//Added by Arbind on 28-03-2017 User and last changed date added
								users.setId(box.getInt("userId"));
								storeItemBatchStock.setLastChgBy(users);
								storeItemBatchStock.setLastChgDate(changedDate);
								hbt.update(storeItemBatchStock);
								hbt.refresh(storeItemBatchStock);
							}
						} else {

							List<StoreItemBatchStock> storeItemBatchStockList1 = session
									.createCriteria(StoreItemBatchStock.class)
									.add(Restrictions.eq("Hospital.Id",
											storeStockTakingT.getStockTakingM()
													.getHospital().getId()))
									.add(Restrictions.eq("Department.Id",
											storeStockTakingT.getStockTakingM()
													.getDepartment().getId()))
									.add(Restrictions.eq("BatchNo",
											storeStockTakingT.getBatchNo()))
									.add(Restrictions
											.eq("Item.Id", storeStockTakingT
													.getItem().getId())).list();
							if (storeItemBatchStockList1 != null
									&& storeItemBatchStockList1.size() > 0) {
								StoreItemBatchStock storeItemBatchStock1 = new StoreItemBatchStock();
								storeItemBatchStock1 = storeItemBatchStockList1
										.get(0);
								try {
									BigDecimal adjustQty = storeItemBatchStock1
											.getAdjustQty();
									storeItemBatchStock1
											.setAdjustQty(adjustQty
													.add(storeStockTakingT
															.getStoreStockService()
															.subtract(
																	storeStockTakingT
																			.getComputedStock())));
								} catch (Exception e) {
									storeItemBatchStock1
											.setAdjustQty(storeStockTakingT
													.getStoreStockService()
													.subtract(
															storeStockTakingT
																	.getComputedStock()));
								}
								BigDecimal compStock = storeStockTakingT
										.getComputedStock();
								BigDecimal defi = storeStockTakingT
										.getStockDeficient();
								BigDecimal surplus = storeStockTakingT
										.getStockSurplus();
								BigDecimal finalStock = compStock.add(surplus)
										.subtract(defi);
								try {
									BigDecimal closingStock = storeItemBatchStock1
											.getClosingStock();
									storeItemBatchStock1
											.setClosingStock(finalStock
													.add(closingStock));
								} catch (Exception e) {
									storeItemBatchStock1
											.setClosingStock(finalStock);
								}
								//Added by Arbind on 28-03-2017 User and last changed date added
								users.setId(box.getInt("userId"));
								storeItemBatchStock1.setLastChgBy(users);
								storeItemBatchStock1.setLastChgDate(changedDate);
								hbt.update(storeItemBatchStock1);
								hbt.refresh(storeItemBatchStock1);
							} else {
								// Add Items which are not in Item Batch Stock
								StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
								storeItemBatchStock.setItem(storeStockTakingT
										.getItem());
								storeItemBatchStock
										.setBatchNo(storeStockTakingT
												.getBatchNo());
								storeItemBatchStock
										.setDepartment(storeStockTakingT
												.getStockTakingM()
												.getDepartment());
								storeItemBatchStock
										.setExpiryDate(storeStockTakingT
												.getExpiryDate());
								storeItemBatchStock
										.setOpeningBalanceDate(changedDate);
								storeItemBatchStock
										.setOpeningBalanceQty(storeStockTakingT
												.getStoreStockService()
												.subtract(
														storeStockTakingT
																.getComputedStock()));
								storeItemBatchStock
										.setAdjustQty(storeStockTakingT
												.getStoreStockService()
												.subtract(
														storeStockTakingT
																.getComputedStock()));

								BigDecimal compStock = storeStockTakingT
										.getComputedStock();
								BigDecimal defi = storeStockTakingT
										.getStockDeficient();
								BigDecimal surplus = storeStockTakingT
										.getStockSurplus();
								BigDecimal finalStock = compStock.add(surplus)
										.subtract(defi);

								storeItemBatchStock.setClosingStock(finalStock);
								storeItemBatchStock
										.setCostPrice(storeStockTakingT
												.getCostPrice());
								//Added by Arbind on 28-03-2017 Hospital, User and last changed date added
								storeItemBatchStock.setHospital(new MasHospital(box
										.getInt(RequestConstants.HOSPITAL_ID)));
								users.setId(box.getInt("userId"));
								storeItemBatchStock.setLastChgBy(users);
								storeItemBatchStock.setLastChgDate(changedDate);
								// storeItemBatchStock.setBrand(storeStockTakingT.getBrand());
								hbt.save(storeItemBatchStock);
								hbt.refresh(storeItemBatchStock);
							}
						}
					}
				}
			}

			if (storeStockTakingTList != null
					&& storeStockTakingTList.size() > 0) {
				StoreStockTakingM stockM = storeStockTakingTList.get(0)
						.getStockTakingM();
				stockM.setStatus("p");
				hbt.update(stockM);
			}
			tx.commit();
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		return flag;
	}

	/*
	 * public boolean storeItemBatch(Map<String, Object> map) {
	 * 
	 * String sucessfully = "false"; Session session = (Session) getSession();
	 * int brandId = (Integer) map.get("brandId"); int adjustmentID = (Integer)
	 * map.get("adjustmentID"); String batchNo = (String) map.get("batchNo");
	 * BigDecimal costPrice = new BigDecimal("" + map.get("costPrice"));
	 * BigDecimal surplusStock = new BigDecimal("" + map.get("surplusStock"));
	 * BigDecimal deficient = new BigDecimal("" + map.get("deficient"));
	 * 
	 * try { org.springframework.orm.hibernate3.HibernateTemplate hbt =
	 * getHibernateTemplate(); hbt.setFlushModeName("FLUSH_EAGER");
	 * hbt.setCheckWriteOperations(false);
	 * 
	 * 
	 * String hql="delete from StoreAdjustmentM as sit where sit.Id like
	 * :adjustmentID"; Query query =
	 * session.createQuery(hql).setParameter("adjustmentID", adjustmentID); int
	 * row = query.executeUpdate();
	 * 
	 * session.createQuery("select sib from StoreItemBatchStock as sib where
	 * sib.BatchNo=" + batchNo + "and sib.Brand.Id=" + brandId + "and
	 * sib.CostPrice=" + costPrice).list(); (storeItemBatchStockList.size()>0){
	 * StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock)
	 * storeItemBatchStockList.get(0); int storeItemBatchStockId =
	 * storeItemBatchStock.getId(); StoreItemBatchStock storeItemBatchStockObj =
	 * (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class,
	 * storeItemBatchStockId); BigDecimal closingStock = (BigDecimal)
	 * storeItemBatchStock.getClosingStock(); BigDecimal new_adjust_qty = new
	 * BigDecimal(0);
	 * 
	 * if (!deficient.toString().equals("0.000")&&
	 * surplusStock.toString().equals("0.000")) { closingStock =
	 * closingStock.subtract(deficient); new_adjust_qty =
	 * storeItemBatchStock.getAdjustQty().add(deficient); } else if
	 * (deficient.toString().equals("0.000") &&
	 * !surplusStock.toString().equals("0.000")) { closingStock =
	 * closingStock.add(surplusStock); new_adjust_qty =
	 * storeItemBatchStock.getAdjustQty().add(surplusStock); } else {
	 * closingStock = (BigDecimal) storeItemBatchStock.getClosingStock(); }
	 * 
	 * storeItemBatchStockObj.setClosingStock(closingStock);
	 * storeItemBatchStockObj.setAdjustQty(new_adjust_qty);
	 * hbt.update(storeItemBatchStockObj);
	 * 
	 * storeItemBatchStock.setClosingStock(closingStock);
	 * hbt.update(storeItemBatchStock); sucessfully = "true"; } else {
	 * sucessfully = "false"; } }catch (HibernateException e) {
	 * e.printStackTrace(); }
	 * 
	 * return false; }
	 */
	public int getStoreMmfDepartmentId(int docNo) {
		@SuppressWarnings("unused")
		int mmfDepartmentId = 0;
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreMmfDepartmentM as pod where pod.DocNo = '"
						+ docNo + "'");
		for (StoreMmfDepartmentM storeMmfDepartmentM2 : list) {
			mmfDepartmentId = Integer.parseInt(""
					+ storeMmfDepartmentM2.getId());
		}
		return mmfDepartmentId;
	}

	/*
	 * Start of Methods for Raisisng CIV
	 */
	// --------------------------------New Grid For Department
	// Indent----------------------
	public Map<String, Object> showDepartmentIndent(int deptId, int hospitalId) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentList1 = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();

		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";
		Session session = (Session) getSession();
		try {

			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("table_constant.properties");
			// URL myURL= get getResource("/WEB-INF/commonFile.properties");
			String mas_department_type_cstr = null;
			try {
				Properties prop = new Properties();
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
				mas_department_type_cstr = prop
						.getProperty("mas_department_type_cstr");

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			/*
			 * Commented By Ujjwal For Performance
			 */
			/*
			 * sectionList = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.MasStoreSection as ms where ms.Status = 'y'"
			 * );
			 */
			/*
			 * Enf By Ujjwal
			 */

			departmentList = session.createCriteria(MasDepartment.class, "mi")
					.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();

			// departmentList = getHibernateTemplate()
			// .find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'Y'");

			departmentList1 = session
					.createCriteria(MasDepartment.class, "mc")
					.createAlias("mc.DepartmentType", "dptype")
					.add(Restrictions.eq("dptype.DepartmentTypeCode",
							mas_department_type_cstr))
					.add(Restrictions.eq("mc.Status", "Y").ignoreCase()).list();
			// departmentList1 = getHibernateTemplate()
			// .find("from jkt.hms.masters.business.MasDepartment as mc where mc.DepartmentType.DepartmentTypeCode ='"
			// + mas_department_type_cstr
			// + "' and mc.Status = 'Y'");

			requestByEmployeeList = session
					.createCriteria(MasEmployee.class, "mi")
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
			// requestByEmployeeList = getHibernateTemplate()
			// .find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y'  and mi.Hospital.Id="
			// + hospitalId + " and  Department.Id=" + deptId + "");

			approvedByEmployeeList = session
					.createCriteria(MasEmployee.class, "mi")
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();

			// approvedByEmployeeList = getHibernateTemplate()
			// .find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y'  and mi.Hospital.Id="
			// + hospitalId + " and Department.Id =" + deptId + "");

			searchStoreInternalIndentMList = session
					.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.addOrder(Order.desc("Id")).list();
			/*
			 * Code for demand No code by Mukesh Narayan Singh Date 24 Jan 2011
			 */
			List<Object[]> storeInternalIndentMDemandNoList = new ArrayList<Object[]>();
			String qry = "";
			qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
					+ " sim.id = sit.internal_id where sim.department_id="
					+ deptId
					+ "and sim.hospital_id="
					+ hospitalId
					+ " group by sim.demand_no,sim.id,sim.demand_date order by sim.id desc";
			storeInternalIndentMDemandNoList = session.createSQLQuery(qry)
					.list();
			map.put("storeInternalIndentMDemandNoList",
					storeInternalIndentMDemandNoList);
			/*
			 * End Of Code for demand No code by Mukesh Narayan Singh Date 24
			 * Jan 2011
			 */
			demandNoList = session.createCriteria(StoreFyDocumentNo.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			//

			List<MasDepartment> departmentForIndentNoList = new ArrayList<MasDepartment>();

			// departmentForIndentNoList = session
			// .createCriteria(MasDepartment.class, "mi")
			// .add(Restrictions.eq("mi.Status", "Y'"))
			// .add(Restrictions.eq("mi.Id", deptId)).list();

			departmentForIndentNoList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where UPPER(mi.Status) = UPPER('Y') and mi.Id="
							+ deptId + "");

			String deptType = "";
			if (departmentForIndentNoList.size() > 0) {
				for (MasDepartment masDepartment : departmentForIndentNoList) {
					deptType = "IND_"
							+ masDepartment.getDepartmentType()
									.getDepartmentTypeCode();
				}
			}

			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("deptType", deptType);

			if (demandNoList != null && demandNoList.size() > 0) {
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
						.get(0);
				demandNo = ("" + storeFyDocumentNo.getDemandNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				maxMap.put("no", demandNo);
				demandNo = getMaxNoByDeptCode(maxMap);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				// finalDemandNo = getMaxNo(demandNo);
				map.put("demandNoList", demandNoList);
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalDemandNo", finalDemandNo);
			} else {
				// /*
				maxMap.put("no", demandNo);
				// demandNo =getMaxNoByDeptCode(maxMap);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				// finalDemandNo = getMaxNo(demandNo);
				map.put("finalDemandNo", finalDemandNo);
			}

			// List<StoreInternalIndentM> indentList = new
			// ArrayList<StoreInternalIndentM>();
			// indentList = session.createCriteria(StoreInternalIndentM.class)
			// .add(Restrictions.eq("Department.Id", deptId))
			// .add(Restrictions.eq("Hospital.Id", hospitalId))
			// .addOrder(Order.desc("Id")).setMaxResults(1).list();
			// for (StoreInternalIndentM storeInternalIndentM : indentList) {
			// finalDemandNo = storeInternalIndentM.getDemandNo();
			// }
			// String[] final1 = finalDemandNo.split("/");
			// int final2 = Integer.parseInt("" + final1[1]) + 1;
			// map.put("finalDemandNo", final1[0] + "/" + final2 + "/" +
			// final1[2]);

		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */

		map.put("sectionList", sectionList);
		map.put("departmentList", departmentList);
		map.put("departmentList1", departmentList1);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		/*
		 * map.put("searchStoreInternalIndentMList",
		 * searchStoreInternalIndentMList);
		 */
		return map;

	}

	public Map<String, Object> getDepartmentIndentData(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentT> storeInternalIndentTList1 = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentList1 = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
		int sno = 0;
		String demandNo = box.get(DEMAND_NO);
		String status1 = box.get("status1");
		int deptId = 0;
		int hospitalId = 0;
		if (box.get(FROM_WARD) != null && !box.get(FROM_WARD).equals("0")) {
			deptId = Integer.parseInt("" + box.get(FROM_WARD));
		}
		hospitalId = Integer.parseInt(box.get(RequestConstants.HOSPITAL_ID));

		storeInternalIndentMList = hbt
				.find("from jkt.hms.masters.business.StoreInternalIndentM as inp where inp.DemandNo = '"
						+ demandNo
						+ "' and inp.Hospital.Id="
						+ hospitalId
						+ " and inp.Department.Id=" + box.get(FROM_WARD));

		map.put("storeInternalIndentMList", storeInternalIndentMList);
		if (box.getString("pvmsNo").length() > 0) {
			String strForPvms = box.getString("pvmsNo");
			strForPvms = strForPvms.replace(" ", "%") + "%";
			storeInternalIndentTList = hbt
					.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.DemandNo = '"
							+ demandNo
							+ "' and inp.Internal.Department.Id="
							+ box.get(FROM_WARD)
							+ " and inp.Internal.Hospital.Id="
							+ hospitalId
							+ " and inp.Item.PvmsNo like '" + strForPvms + "'");
		} else {
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "m")
					.add(Restrictions.eq("m.DemandNo", demandNo))
					.add(Restrictions.eq("m.Hospital.Id", hospitalId))
					.add(Restrictions.eq("m.Department.Id",
							box.getInt(FROM_WARD))).list();
			// hbt.find("from jkt.hms.masters.business.StoreInternalIndentT as
			// inp where inp.Internal.DemandNo = '" + demandNo + "' and
			// inp.Internal.Department.Id=" + box.get(FROM_WARD));
		}
		// Check for existence of previous year records
		storeInternalIndentTList1 = hbt
				.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.DemandNo = '"
						+ demandNo
						+ "' and inp.Internal.Department.Id="
						+ box.get(FROM_WARD)
						+ " and inp.Internal.Hospital.Id="
						+ hospitalId + " order by inp.SrNo desc");
		departmentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'Y' ");
		departmentList1 = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasDepartment as mc where mc.DepartmentType = 3 and mc.Status = 'Y'");
		/*
		 * approvedByEmployeeList = getHibernateTemplate() .find(
		 * "from jkt.hms.masters.business.MasEmployee as mi where mi.EmpCategory.Id='1' "
		 * ); requestByEmployeeList = getHibernateTemplate() .find(
		 * "from jkt.hms.masters.business.MasEmployee as mi where mi.EmpCategory.Id='1'"
		 * );
		 */
		requestByEmployeeList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y'  and Department.Id="
						+ deptId + " and mi.Hospital.Id=" + hospitalId);
		approvedByEmployeeList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasEmployee as mi where mi.Status = 'Y'  and Department.Id ="
						+ deptId + " and mi.Hospital.Id=" + hospitalId);
		// search list for Demand no for search criteria on each page

		searchStoreInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.addOrder(Order.desc("Id")).list();
		/*
		 * Code for demand No code by Mukesh Narayan Singh Date 24 Jan 2011
		 */
		List<Object[]> storeInternalIndentMDemandNoList = new ArrayList<Object[]>();
		String qry = "";
		qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
				+ " sim.id = sit.internal_id where sim.department_id="
				+ deptId
				+ "and sim.hospital_id="
				+ hospitalId
				+ " group by sim.demand_no,sim.id,sim.demand_date order by sim.id desc";
		storeInternalIndentMDemandNoList = session.createSQLQuery(qry).list();
		map.put("storeInternalIndentMDemandNoList",
				storeInternalIndentMDemandNoList);
		/*
		 * End Of Code for demand No code by Mukesh Narayan Singh Date 24 Jan
		 * 2011
		 */
		map.put("departmentList", departmentList);
		map.put("departmentList1", departmentList1);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("newDemandNo", demandNo);
		map.put("status1", status1);

		if (storeInternalIndentTList != null
				&& storeInternalIndentTList.size() > 0) {
			int internalIndentId = storeInternalIndentTList.get(0)
					.getInternal().getId();
			map.put("internalIndentId", internalIndentId);

		}
		for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
				.hasNext();) {
			StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
					.next();

			try {
				id = storeInternalIndentT.getId();
			} catch (Exception e) {
				id = 0;
			}

			try {
				pvms = storeInternalIndentT.getItem().getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = storeInternalIndentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				au = storeInternalIndentT.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				qtyRequest = storeInternalIndentT.getQtyRequest();
			} catch (Exception e) {
				qtyRequest = 0;
			}
			try {
				stock = storeInternalIndentT.getStockInHand();
			} catch (Exception e) {
				stock = 0;
			}

			hData = new HashMap<String, Object>();

			// Map<String, Object> groupByItemMap = new HashMap<String,
			// Object>();
			// String str = "select inp.item_id,sum(inp.closing_stock) from
			// store_item_batch_stock as inp where department_id =
			// "+box.get(TO_WARD)+" group by inp.item_id";
			// List<StoreItemBatchStock> groupByItemList =
			// session.createSQLQuery(str).list();
			//
			// for (Iterator iterator2 = groupByItemList.iterator();
			// iterator2.hasNext();)
			// {
			// Object[] obj =(Object[]) iterator2.next();
			// //Integer itemId = (Integer) obj[0];
			// BigDecimal closingStock = (BigDecimal) obj[1];
			//
			// groupByItemMap.put(obj[0].toString(),closingStock);
			// }

			hData.put("id", id);

			hData.put("stock", stock);

			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("qtyRequest", qtyRequest);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
			// metyhod------"+pagedArray.getBeginPage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("demandNo", box.get(DEMAND_NO));
		map.put("pagedArray", pagedArray);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	public Map<String, Object> createAndImportDepartmentIndentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> storeInternalIndentTList1 = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();

		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
			StoreInternalIndentM storeInternalIndentM1 = new StoreInternalIndentM();

			storeInternalIndentMList = session
					.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
					.addOrder(Order.desc("Id")).list();
			if (storeInternalIndentMList != null
					&& storeInternalIndentMList.size() > 0) {
				storeInternalIndentM1 = storeInternalIndentMList.get(0);
				storeInternalIndentTList = session
						.createCriteria(StoreInternalIndentT.class)
						.add(Restrictions.eq("Internal.Id",
								storeInternalIndentM1.getId())).list();
				// Check for existence of previous year records

				// storeInternalIndentTList1 = hbt.find("from
				// jkt.hms.masters.business.StoreInternalIndentT as inp where
				// inp.Internal.DemandNo = '" + demandNo + "' and
				// inp.Internal.Department.Id=" + box.get(FROM_WARD) + " order
				// by inp.SrNo desc");
				departmentList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
				approvedByEmployeeList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasEmployee as mi where mi.EmpCategory.Id='1'");
				requestByEmployeeList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasEmployee as mi where mi.EmpCategory.Id='1' ");

				map.put("departmentList", departmentList);
				map.put("approvedByEmployeeList", approvedByEmployeeList);
				map.put("requestByEmployeeList", requestByEmployeeList);
				StoreInternalIndentM storeInternalIndentM = null;

				int internalIndentId = storeInternalIndentM1.getId();
				StoreInternalIndentM storeInternalIndentMNew = (StoreInternalIndentM) getHibernateTemplate()
						.load(StoreInternalIndentM.class, internalIndentId);
				StoreInternalIndentM storeInternalIndentMNew2 = new StoreInternalIndentM();
				MasEmployee masEmployee1 = new MasEmployee();
				masEmployee1.setId(box
						.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				storeInternalIndentMNew2.setApprovedBy(masEmployee1);

				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box
						.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				storeInternalIndentMNew2.setRequestedBy(masEmployee2);

				storeInternalIndentMNew2.setDemandNo(box.getString(DEMAND_NO));
				Users users = new Users();
				users.setId(box.getInt("userId"));
				storeInternalIndentMNew2.setLastChgBy(users);
				storeInternalIndentMNew2.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				// storeInternalIndentM.setLastChgTime(box.get(CHANGED_TIME));
				storeInternalIndentMNew2.setDemandDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(DEMAND_DATE)));
				storeInternalIndentMNew2.setStatus("o");

				MasDepartment fromDept = new MasDepartment();
				fromDept.setId(box.getInt(FROM_WARD));
				storeInternalIndentMNew2.setDepartment(fromDept);

				MasDepartment toDept = new MasDepartment();
				toDept.setId(box.getInt(TO_WARD));
				storeInternalIndentMNew2.setToStore(toDept);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				storeInternalIndentMNew2.setHospital(masHospital);
				hbt.save(storeInternalIndentMNew2);

				StoreInternalIndentT storeInternalIndentTnew = null;
				List<StoreInternalIndentM> StoreInternalIndentMlIST3 = session
						.createCriteria(StoreInternalIndentM.class)
						.add(Restrictions.eq("Department.Id",
								box.getInt(FROM_WARD)))
						.add(Restrictions.eq("DemandNo",
								box.getString(DEMAND_NO))).list();
				for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
						.hasNext();) {
					StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
							.next();
					storeInternalIndentTnew = new StoreInternalIndentT();
					storeInternalIndentTnew.setItem(storeInternalIndentT
							.getItem());
					// storeInternalIndentTnew.setMmfQty(storeInternalIndentT.getMmfQty());
					storeInternalIndentTnew.setQtyRequest(storeInternalIndentT
							.getQtyRequest());
					storeInternalIndentTnew.setSrNo(storeInternalIndentT
							.getSrNo());
					storeInternalIndentTnew.setInternal(storeInternalIndentM);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ storeInternalIndentT.getItem().getId()
							+ " and department_id="
							+ box.getInt(FROM_WARD)
							+ " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						try {
							storeInternalIndentTnew
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} catch (Exception e) {
							storeInternalIndentTnew.setStockInHand(new Integer(
									0));
						}
					} else {
						storeInternalIndentTnew.setStockInHand(0);
					}
					storeInternalIndentTnew
							.setInternal(StoreInternalIndentMlIST3.get(0));
					storeInternalIndentTnew.setDepartment(storeInternalIndentT
							.getDepartment());
					hbt.save(storeInternalIndentTnew);
				}
				// hbt.refresh(storeInternalIndentTnew);
				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				int deptId = box.getInt(FROM_WARD);
				demandNoList = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId)).list();

				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
						.get(0);
				storeFyDocumentNo.setDemandNo(box.getString(DEMAND_NO));
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.saveOrUpdate(storeFyDocumentNo);
				hbt.refresh(storeFyDocumentNo);
				// hbt.setCheckWriteOperations(false);
				// storeInternalIndentTList = hbt.find("from
				// jkt.hms.masters.business.StoreInternalIndentT as inp where
				// inp.StoreMmfDepartmentM.MmfForTheYear=" + currentYear + " and
				// inp.StoreMmfDepartmentM.StoreWardDept.Id=" +
				// box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
				storeInternalIndentTList = hbt
						.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.DemandNo = '"
								+ box.getString(DEMAND_NO)
								+ "' and inp.Internal.Department.Id="
								+ box.getInt(FROM_WARD));

			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (storeInternalIndentTList != null
				&& storeInternalIndentTList.size() > 0) {
			int internalIndentId = storeInternalIndentTList.get(0)
					.getInternal().getId();
			String demandNo = storeInternalIndentTList.get(0).getInternal()
					.getDemandNo();
			map.put("internalIndentId", internalIndentId);
			map.put("demandNo", demandNo);
		}
		for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
				.hasNext();) {
			StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
					.next();

			try {
				id = storeInternalIndentT.getId();
			} catch (Exception e) {
				id = 0;
			}

			try {
				pvms = storeInternalIndentT.getItem().getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = storeInternalIndentT.getItem().getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				au = storeInternalIndentT.getItem().getItemConversion()
						.getPurchaseUnit().getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				qtyRequest = storeInternalIndentT.getQtyRequest();
			} catch (Exception e) {
				qtyRequest = 0;
			}

			hData = new HashMap<String, Object>();

			// Map<String, Object> groupByItemMap = new HashMap<String,
			// Object>();
			String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
					+ box.getInt(FROM_WARD)
					+ " and item_id="
					+ id
					+ " group by inp.item_id";

			List<Object> groupByItemList = session.createSQLQuery(str).list();

			hData.put("id", id);
			if (groupByItemList != null && groupByItemList.size() > 0) {
				hData.put("stock",
						((BigDecimal) groupByItemList.get(0)).intValue());
			} else {
				hData.put("stock", 0);
			}
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("au", au);
			hData.put("qtymmf", qtymmf);
			hData.put("qtyRequest", qtyRequest);

			vResult.add(hData);
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (map.get("demandNo") == null) {
			map.put("demandNo", box.get("demandNo"));

		}
		if (box.get("demandNo") != null) {
			map.put("newDemandNo", box.get("demandNo"));

		}
		map.put("pagedArray", pagedArray);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	/*
	 * ----------------------------End of Methods for Raisisng
	 * CIV---------------
	 */

	public Map<String, Object> getItemDetailsForDepartmentIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal qtyInHand = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector indentTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List objectList = new ArrayList();
		Criteria c = null;

		String demandDate = box.getString(DEMAND_DATE);
		demandDate = demandDate.substring(6, demandDate.length());
		int demandYear = Integer.parseInt(demandDate);
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			if (box.getInt("internalIndentId") != 0) {
				storeInternalIndentTList = hbt
						.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = "
								+ box.getInt("internalIndentId"));
			}

			for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
					.hasNext();) {
				StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
						.next();
				indentTItems.add(storeInternalIndentT.getItem().getId());
			}

			String queryString = null;
			queryString = "from jkt.hms.masters.business.MasStoreItem as inp where 1 = 1 ";

			if (box.get("search") != null
					&& box.getString("search").equals("true")) {
				if (box.get("search_text") != null
						&& box.getString("search_text").length() > 0) {
					String str = box.getString("search_text") + "%";
					c = session.createCriteria(MasStoreItem.class).add(
							Restrictions.like("Nomenclature", str));
					itemList = c.list();
				} else if (box.get("pvms") != null
						&& box.getString("pvms").length() > 0) {
					pvms = box.getString("pvms");
					c = session.createCriteria(MasStoreItem.class)
							.add(Restrictions.like("PvmsNo", pvms))
							.addOrder(Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(1000);
					itemList = c.list();
				} else {
					c = session.createCriteria(MasStoreItem.class).addOrder(
							Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(1000);
					itemList = c.list();
				}
			} else {
				c = session.createCriteria(MasStoreItem.class).addOrder(
						Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(1000);
				itemList = c.list();
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		storeSetupList = session.createCriteria(StoreSetup.class).list();

		for (Iterator iterator = itemList.iterator(); iterator.hasNext();) {
			MasStoreItem masStoreItem = (MasStoreItem) iterator.next();

			// check for dispensary
			if (box.getInt("deptId") == storeSetupList.get(0)
					.getStoreDispensary().getId()) {
				storeIndentTList = session.createCriteria(StoreIndentT.class)
						.createAlias("Indent", "m")
						.add(Restrictions.eq("m.MmfForTheYear", demandYear))
						.add(Restrictions.eq("Item.Id", masStoreItem.getId()))
						.list();
				if (storeIndentTList != null && storeIndentTList.size() > 0) {
					qtymmf = storeIndentTList.get(0).getQtyInMmf();
				} else {
					qtymmf = new BigDecimal(0);
				}

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
						+ box.getInt("deptId")
						+ " and item_id = "
						+ masStoreItem.getId();
				storeItemBatchStockList = session.createSQLQuery(str).list();
				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					Iterator iterator1 = storeItemBatchStockList.iterator();
					while (iterator1.hasNext()) {
						qtyInHand = (BigDecimal) iterator1.next();
					}
				} else {
					qtyInHand = new BigDecimal(0);
				}

				// calculate loan out quantity
				str = "select sum(b.qty_issued) from store_issue_m a, store_issue_t b where a.id  = b.issue_m_id and a.status='o' and  a.issue_type='l' and b.item_issued= "
						+ item_id;
				objectList = session.createSQLQuery(str).list();

			} else {
				storeMmfDepartmentTList = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear", demandYear))
						.add(Restrictions.eq("m.StoreWardDept.Id",
								box.getInt(FROM_WARD)))
						.add(Restrictions.eq("Item.Id", masStoreItem.getId()))
						.list();

				if (storeMmfDepartmentTList != null
						&& storeMmfDepartmentTList.size() > 0) {
					qtymmf = storeMmfDepartmentTList.get(0).getMmfInQty();
				} else {
					qtymmf = new BigDecimal(0);
				}

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				String str = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
						+ box.getInt("deptId")
						+ " and item_id = "
						+ masStoreItem.getId();
				storeItemBatchStockList = session.createSQLQuery(str).list();
				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					Iterator iterator1 = storeItemBatchStockList.iterator();
					while (iterator1.hasNext()) {
						qtyInHand = (BigDecimal) iterator1.next();
					}
				} else {
					qtyInHand = new BigDecimal(0);
				}
			}

			// get item details to show in the Grid
			try {
				pvms = masStoreItem.getPvmsNo();
			} catch (Exception e) {
				pvms = "";
			}

			try {
				nomenclature = masStoreItem.getNomenclature();
			} catch (Exception e) {
				nomenclature = "";
			}

			try {
				strength = masStoreItem.getStrength();
			} catch (Exception e) {
				strength = "";
			}

			try {
				au = masStoreItem.getItemConversion().getPurchaseUnit()
						.getUnitName();
			} catch (Exception e) {
				au = "";
			}

			try {
				item_id = masStoreItem.getId();
			} catch (Exception e) {
				item_id = 0;
			}

			if (!indentTItems.contains(item_id)) {
				hData = new HashMap<String, Object>();

				hData.put("itemId", item_id);
				hData.put("pvms", pvms);
				hData.put("nomenclature", nomenclature);
				hData.put("strength", strength);
				hData.put("qtymmf", new Integer(qtymmf.intValue()));

				if (qtyInHand != null) {
					hData.put("qtyInHand", new Integer(qtyInHand.intValue()));
				} else {
					hData.put("qtyInHand", new Integer(0));
				}

				hData.put("qtyRequest", new Integer(qtymmf.intValue()));

				if (objectList != null && objectList.size() > 0
						&& objectList.get(0) != null) {
					hData.put("loanOut", objectList.get(0).toString());
				} else {
					hData.put("loanOut", "0");
				}

				// hData.put(TENDER_ANNREQ, annreq);
				hData.put("au", au);

				vResult.add(hData);
			}
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		// map.put("box", box);
		return map;
	}

	public Map<String, Object> getItemDetailsForDepartmentIndentForNextRecord(
			Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		BigDecimal qtymmf = null;
		BigDecimal qtyInHand = null;
		int item_id = 0;
		int qtyRequest = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector indentTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		BigDecimal stock = new BigDecimal(0);
		List objectList = new ArrayList();
		Criteria c = null;

		String demandDate = box.getString(DEMAND_DATE);
		demandDate = demandDate.substring(6, demandDate.length());
		int demandYear = Integer.parseInt(demandDate);
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
			if (box.getInt("internalIndentId") != 0) {
				storeInternalIndentTList = hbt
						.find("from jkt.hms.masters.business.StoreInternalIndentT as inp where inp.Internal.Id = "
								+ box.getInt("internalIndentId"));
			}

			for (Iterator iterator = storeInternalIndentTList.iterator(); iterator
					.hasNext();) {
				StoreInternalIndentT storeInternalIndentT = (StoreInternalIndentT) iterator
						.next();
				indentTItems.add(storeInternalIndentT.getItem().getId());
			}

			// String queryString = null;
			// queryString = "from jkt.hms.masters.business.MasStoreItem as inp
			// where 1 = 1 ";
			//
			//
			// if (box.get("search_text")!=null &&
			// box.getString("search_text").length()>0)
			// {
			//
			// String str = "%" + box.getString("search_text") + "%";
			// c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.like("Nomenclature",str));
			// itemList = c.list();
			// }
			// else
			// {
			// int itemId=0;
			// if(box.getString("buttonName").equals("next")){
			// itemId=box.getInt("itemId");
			// }else{
			// itemId=Integer.parseInt(box.getString("itemIdForNextRecord"));
			// }
			//
			// c =
			// session.createCriteria(MasStoreItem.class).add(Restrictions.gt("Id",itemId)).addOrder(Order.asc("Id"));
			// c.setFirstResult(0);
			// c.setMaxResults(1000);
			// itemList = c.list();
			// String itemIdForNextRecord=Integer.toString(itemId);
			// value for button name and item
			// id-----------------------"+itemList.size()+"---itemId-----"+itemId);
			// map.put("itemIdForNextRecord",itemIdForNextRecord);
			// }

			// storeSetupList = session.createCriteria(StoreSetup.class).list();

			// for (Iterator iterator = itemList.iterator();
			// iterator.hasNext();)
			// {
			// MasStoreItem masStoreItem = (MasStoreItem)iterator.next();

			// check for dispensary
			// if
			// (box.getInt("deptId")==storeSetupList.get(0).getStoreDispensary().getId())
			// {
			// storeIndentTList = session.createCriteria(StoreIndentT.class)
			// .createAlias("Indent","m")
			// .add(Restrictions.eq("m.MmfForTheYear", demandYear))
			// .add(Restrictions.eq("Item.Id", masStoreItem.getId())).list();
			// if(storeIndentTList != null && storeIndentTList.size() > 0)
			// {
			// qtymmf = storeIndentTList.get(0).getQtyInMmf();
			// and quantity in mmf-------"+qtymmf);;
			// }
			// else
			// {
			// value--------------"+demandYear);
			// qtymmf = new BigDecimal(0);
			// quantity in mmf-------"+qtymmf);;
			// }
			//
			//
			// List<StoreItemBatchStock> storeItemBatchStockList = new
			// ArrayList<StoreItemBatchStock>();
			// String str = "select sum(inp.closing_stock) from
			// store_item_batch_stock as inp where department_id = " +
			// box.getInt("deptId") + " and item_id = " + masStoreItem.getId();
			// storeItemBatchStockList = session.createSQLQuery(str).list();
			// if (storeItemBatchStockList!=null &&
			// storeItemBatchStockList.size()>0)
			// {
			// Iterator iterator1 = storeItemBatchStockList.iterator();
			// while (iterator1.hasNext())
			// {
			// qtyInHand = (BigDecimal) iterator1.next();
			// }
			// }
			// else
			// {
			// qtyInHand = new BigDecimal(0);
			// }
			//
			//
			// //calculate loan out quantity
			// str = "select sum(b.qty_issued) from store_issue_m a,
			// store_issue_t b where a.id = b.issue_m_id and a.status='o' and
			// a.issue_type='l' and b.item_issued= " + item_id;
			// objectList = session.createSQLQuery(str).list();
			//
			// }
			// else
			// {
			// StoreMmfDepartmentT^^^^^^^^^^^^^^^^^^^^^^^^^^");
			// storeMmfDepartmentTList =
			// session.createCriteria(StoreMmfDepartmentT.class)
			// .createAlias("StoreMmfDepartmentM","m")
			// .add(Restrictions.eq("m.MmfForTheYear", demandYear))
			// .add(Restrictions.eq("m.StoreWardDept.Id",
			// box.getInt(FROM_WARD)))
			// .add(Restrictions.eq("Item.Id", masStoreItem.getId())).list();
			//
			// if(storeMmfDepartmentTList != null &&
			// storeMmfDepartmentTList.size() > 0)
			// {
			// qtymmf = storeMmfDepartmentTList.get(0).getMmfInQty();
			// }
			// else
			// {
			// qtymmf = new BigDecimal(0);
			// }
			//
			// List<StoreItemBatchStock> storeItemBatchStockList = new
			// ArrayList<StoreItemBatchStock>();
			// String str = "select sum(inp.closing_stock) from
			// store_item_batch_stock as inp where department_id = " +
			// box.getInt("deptId") + " and item_id = " + masStoreItem.getId();
			// storeItemBatchStockList = session.createSQLQuery(str).list();
			// if (storeItemBatchStockList!=null &&
			// storeItemBatchStockList.size()>0)
			// {
			// Iterator iterator1 = storeItemBatchStockList.iterator();
			// while (iterator1.hasNext())
			// {
			// qtyInHand = (BigDecimal) iterator1.next();
			// }
			// }
			// else
			// qtyInHand = new BigDecimal(0);
			// }
			//
			// get item details to show in the Grid
			for (StoreInternalIndentT storeInternalIndentT : storeInternalIndentTList) {

				try {
					pvms = storeInternalIndentT.getItem().getPvmsNo();
				} catch (Exception e) {
					pvms = "";
				}

				try {
					nomenclature = storeInternalIndentT.getItem()
							.getNomenclature();
				} catch (Exception e) {
					nomenclature = "";
				}

				try {
					au = storeInternalIndentT.getItem().getItemConversion()
							.getPurchaseUnit().getUnitName();
				} catch (Exception e) {
					au = "";
				}

				try {
					item_id = storeInternalIndentT.getItem().getId();
				} catch (Exception e) {
					item_id = 0;
				}
				try {
					qtyRequest = storeInternalIndentT.getQtyRequest();
				} catch (Exception e) {
					qtyRequest = 0;
				}
				try {
					List<StoreItemBatchStock> storeItemBatchStockList = session
							.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("Item.Id", item_id)).list();
					if (storeItemBatchStockList.get(0) != null
							&& storeItemBatchStockList.size() > 0) {
						stock = storeItemBatchStockList.get(0)
								.getClosingStock();
					} else {
						stock = new BigDecimal(0);
					}
				} catch (Exception e) {
					stock = new BigDecimal(0);
				}
				if (!indentTItems.contains(item_id)) {
					hData = new HashMap<String, Object>();

					hData.put("itemId", item_id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);

					hData.put("qtyRequest", qtyRequest);
					hData.put("stock", stock);
					// if (qtyInHand !=null)
					// hData.put("qtyInHand", new
					// Integer(qtyInHand.intValue()));
					// else
					// hData.put("qtyInHand", new Integer(0));
					//
					// hData.put("qtyRequest", new Integer(qtymmf.intValue()));
					//
					// if (objectList!=null && objectList.size()>0 &&
					// objectList.get(0)!=null)
					// hData.put("loanOut",objectList.get(0).toString());
					// else
					// hData.put("loanOut", "0");

					// hData.put(TENDER_ANNREQ, annreq);
					hData.put("au", au);

					vResult.add(hData);
				}
			}

			if (vResult.size() > 0) {
				testPageData = new HashMap[vResult.size()];
				vResult.copyInto(testPageData);
			}
			try {
				pagedArray = new PageUtil().convertToPagedArrayIndex(
						testPageData, box);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		// map.put("box", box);
		return map;
	}

	public Map<String, Object> showAddDepartmentIndentJsp(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		Integer qtyRequest = null;
		Integer stock = null;

		int id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentT> storeInternalIndentTList1 = new ArrayList<StoreInternalIndentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreInternalIndentT storeInternalIndentT1 = new StoreInternalIndentT();
		int sno = 0;
		int hospitalId = 0;
		String demandNo = box.get(DEMAND_NO);
		hospitalId = Integer.parseInt(box.get(RequestConstants.HOSPITAL_ID));

		//
		List storeItemBatchStockList = new ArrayList();
		try {
			int pageNo = box.getInt("pageNo");

			storeInternalIndentMList = hbt
					.find("from jkt.hms.masters.business.StoreInternalIndentM as inp where inp.DemandNo = '"
							+ demandNo
							+ "and inp.hospital_id="
							+ hospitalId
							+ "' and inp.Department.Id=" + box.get(FROM_WARD));

			map.put("storeInternalIndentMList", storeInternalIndentMList);

			Criteria c = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "m")
					.add(Restrictions.eq("m.DemandNo", demandNo))
					.add(Restrictions.eq("m.Hospital.Id", hospitalId))
					.add(Restrictions.eq("m.Department.Id",
							box.getInt(FROM_WARD)));

			int firstResult = 0;
			int maxResults = 14;

			if (pageNo != 1) {
				firstResult = firstResult + (pageNo - 1) * 14;
			}
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			storeInternalIndentTList = c.list();

			Criteria c1 = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "m")
					.add(Restrictions.eq("m.DemandNo", demandNo))
					.add(Restrictions.eq("m.Department.Id",
							box.getInt(FROM_WARD)))
					.add(Restrictions.eq("m.Hospital.Id", hospitalId));
			int sizeOfStoreInternalIndentT = 0;
			if (c1.list() != null && c1.list().size() > 0) {
				sizeOfStoreInternalIndentT = c1.list().size();
				for (StoreInternalIndentT storeInternalIndentT : storeInternalIndentTList) {
					String qry = "select sum(closing_stock) from store_item_batch_stock i where i.item_id="
							+ storeInternalIndentT.getItem().getId()
							+ "and i.hospital_id=" + hospitalId + " ";
					List<Object> objectList = session.createSQLQuery(qry)
							.list();
					storeItemBatchStockList.add((BigDecimal) objectList.get(0));
				}
			}
			map.put("storeItemBatchStockList", storeItemBatchStockList);
			map.put("sizeOfStoreInternalIndentT", sizeOfStoreInternalIndentT);

			//
			map.put("storeInternalIndentTList", storeInternalIndentTList);
			map.put("pageNo", pageNo);
			map.put("newDemandNo", demandNo);

			if (storeInternalIndentTList != null
					&& storeInternalIndentTList.size() > 0) {
				int internalIndentId = storeInternalIndentTList.get(0)
						.getInternal().getId();
				map.put("internalIndentId", internalIndentId);

			}
			map.put("demandNo", box.get(DEMAND_NO));

		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		return map;
	}

	public Map<String, Object> doAddInternalIndentItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Vector qtymmf = box.getVector("qtymmf");
		Vector qtyRequest = box.getVector("qtyRequest");
		Vector stock = box.getVector("stock");
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);
		// Vector annreq = box.getVector(TENDER_ANNREQ);

		int deptId = box.getInt(FROM_WARD);
		int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);
		int newinternalIndentId = 0;

		int hospitalid = 0;
		hospitalid = box.getInt(RequestConstants.HOSPITAL_ID);

		StoreInternalIndentM storeInternalIndentM = null;
		StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (box.getInt("internalIndentId") != 0) {
				//

				// storeMmfDepartmentMList = hbt.find("from
				// jkt.hms.masters.business.StoreMmfDepartmentM as a where a.Id
				// ="+mmfMasterId+" and a.StoreWardDept.Id=" +
				// box.get(STORE_DEPT_WARD_DEPARTMENT_ID_MMF_DEPENDENT));
				storeInternalIndentMList = hbt
						.find("from jkt.hms.masters.business.StoreInternalIndentM as a where a.Id ="
								+ internalIndentId
								+ " and a.Hospital.Id= "
								+ hospitalid);
				// storeMmfDepartmentTList = hbt.find("from
				// jkt.hms.masters.business.StoreMmfDepartmentT as b where
				// b.StoreMmfDepartmentM.Id ="+mmfMasterId+" and
				// b.StoreMmfDepartmentM.MmfForTheYear = " +
				// box.getInt(MMF_DEPARTMENT_DATE) + " order by b.SrNo desc");
				storeInternalIndentTList = hbt
						.find("from jkt.hms.masters.business.StoreInternalIndentT as b where b.Internal.Id ="
								+ internalIndentId + " order by b.SrNo desc");

				if (storeInternalIndentMList != null
						&& storeInternalIndentMList.size() > 0) {
					storeInternalIndentM = (StoreInternalIndentM) storeInternalIndentMList
							.get(0);
				}

				if (storeInternalIndentTList != null
						&& storeInternalIndentTList.size() > 0) {
					sr_no = storeInternalIndentTList.get(0).getSrNo()
							.intValue();
				}
				newinternalIndentId = storeInternalIndentM.getId();
			} else {
				//

				/*
				 * Code for Duplicate Indent No Date 21 Jan 2011
				 */
				List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
				storeInternalIndentMForDemandNoList = session
						.createCriteria(StoreInternalIndentM.class, "siim")
						.add(Restrictions.eq("siim.Department.Id", deptId))
						.add(Restrictions.eq("siim.Hospital.Id",
								box.getInt("hospitalId")))
						.add(Restrictions.eq("siim.DemandNo", demandNo)).list();
				// storeInternalIndentMForDemandNoList = hbt
				// .find("from jkt.hms.masters.business.StoreInternalIndentM as siim where siim.Department.Id="
				// + deptId
				// + " and siim.DemandNo='"
				// + demandNo
				// + "'");

				/*
				 * if(storeInternalIndentMForDemandNoList.size()>0){
				 * 
				 * String finalDemandNo=""; String deptType="";
				 * List<StoreFyDocumentNo> demandNoForDuplicateList = new
				 * ArrayList<StoreFyDocumentNo>(); demandNoForDuplicateList =
				 * session.createCriteria(StoreFyDocumentNo.class)
				 * .add(Restrictions.eq("Department.Id", deptId)).list();
				 * 
				 * List<MasDepartment> departmentForIndentNoList = new
				 * ArrayList<MasDepartment>();
				 * departmentForIndentNoList=getHibernateTemplate().find(
				 * "from jkt.hms.masters.business.MasDepartmentType as mi inner join MasDepartment md where mi.Status = 'y' and mi.Id="
				 * +deptId+"");
				 * 
				 * if(departmentForIndentNoList.size()>0){ for (MasDepartment
				 * masDepartment : departmentForIndentNoList) {
				 * deptType="IND_"+masDepartment
				 * .getDepartmentType().getDepartmentTypeCode(); } }
				 * List<String>type=new ArrayList<String>();
				 * type=session.createCriteria
				 * (MasDepartmentType.class).add(Restrictions
				 * .eq("MasDepartments.Id",
				 * deptId)).setProjection(Projections.property("")).list(); //
				 * .createAlias("MasDepartments",
				 * "dept").add(Restrictions.eq("", value)) deptType="IND_"+type;
				 * 
				 * Map<String, Object> maxMap=new HashMap<String, Object>();
				 * maxMap.put("deptType", deptType); try { maxMap.put("no",
				 * demandNo); demandNo=getMaxNoByDeptCode(maxMap); } catch
				 * (Exception e) { e.printStackTrace(); }
				 * 
				 * End Of caode for duplicate Indent Id Date 21 Jan 2011 Date 21
				 * Jan 2011
				 * 
				 * }
				 */

				newMObj = new StoreInternalIndentM();
				if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
					MasEmployee masEmployee1 = new MasEmployee();
					masEmployee1.setId(box
							.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
					newMObj.setApprovedBy(masEmployee1);
				}

				if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
					MasEmployee masEmployee2 = new MasEmployee();
					masEmployee2.setId(box
							.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
					newMObj.setRequestedBy(masEmployee2);
				}
				int storeDepartmentId = 0;
				if (box.get("storeDepartmentId") != null
						&& !box.get("storeDepartmentId").equals("")) {
					storeDepartmentId = box.getInt("storeDepartmentId");

				}
				if (storeDepartmentId != 0) {
					MasDepartment masdepartment1 = new MasDepartment();
					masdepartment1.setId(storeDepartmentId);
					newMObj.setStoreDepartment(masdepartment1);
				}

				newMObj.setDemandNo(demandNo);
				Users users = new Users();
				users.setId(box.getInt(USER_ID));

				newMObj.setLastChgBy(users);

				newMObj.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));

				newMObj.setStatus("o");
				/*
				 * IndentFlag=ALL means All Item Except Laundry Item
				 * IndentFlag=LDN means Indent Only Laundry Item
				 */
				newMObj.setIndentFlag("ALL");
				MasDepartment fromDept = new MasDepartment();
				fromDept.setId(box.getInt(FROM_WARD));
				newMObj.setDepartment(fromDept);

				MasDepartment toDept = new MasDepartment();
				toDept.setId(box.getInt(TO_WARD));
				newMObj.setToStore(toDept);

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				newMObj.setHospital(masHospital);

				newMObj.setDemandDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(DEMAND_DATE)));
				hbt.save(newMObj);
				hbt.refresh(newMObj);

				/*
				 * session.save(newMObj); session.refresh(newMObj);
				 */
				newinternalIndentId = newMObj.getId();

				// Auto-Increment No for demand No of Department Indent
				/*
				 * Synchronization code by ujjwal to generate the correct
				 * demandNo on 04082014 at silvassa
				 */
				synchronized (this) {

					List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
					demandNoList = session
							.createCriteria(StoreFyDocumentNo.class)
							.add(Restrictions.eq("Department.Id", deptId))
							.add(Restrictions.eq("Hospital.Id",
									box.getInt("hospitalId"))).list();
					if (demandNoList.size() > 0) {
						StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
								.get(0);
						storeFyDocumentNo.setDemandNo(demandNo);

						hbt.update(storeFyDocumentNo);
						hbt.refresh(storeFyDocumentNo);
						// session.saveOrUpdate(storeFyDocumentNo);
						// session.refresh(storeFyDocumentNo);
					} else {
						StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
						storeFyDocumentNo.setAdjustmentNo("0");
						storeFyDocumentNo.setAdjustmentStartNo("0");
						storeFyDocumentNo.setBalanceNo("0");
						storeFyDocumentNo.setBalanceStartNo("0");
						storeFyDocumentNo.setDefectEntryNo("0");
						storeFyDocumentNo.setDefectEntryStartNo("0");
						storeFyDocumentNo.setDemandNo(demandNo);
						storeFyDocumentNo.setDemandStartNo("0");
						storeFyDocumentNo.setDepartment(new MasDepartment(box
								.getInt(FROM_WARD)));
						storeFyDocumentNo.setGrnNo("0");
						storeFyDocumentNo.setGrnStartNo("0");
						storeFyDocumentNo.setIssueDeptNo("0");
						storeFyDocumentNo.setIssueDeptReturnNo("0");
						storeFyDocumentNo.setIssueDeptReturnStartNo("0");
						storeFyDocumentNo.setIssueDeptStartNo("0");
						storeFyDocumentNo.setVendorReturnNo("0");
						storeFyDocumentNo.setVendorReturnStartNo("0");
						String issueDeptNo = "";
						issueDeptNo = getMaxNo("0");
						String issueDeptStartNo = issueDeptNo;
						storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
						storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
						MasHospital hospital = new MasHospital();
						hospital.setId(box.getInt("hospitalId"));
						storeFyDocumentNo.setHospital(hospital);
						hbt.save(storeFyDocumentNo);
						hbt.refresh(storeFyDocumentNo);
						// session.save(storeFyDocumentNo);
						// session.refresh(storeFyDocumentNo);

					}
				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//
			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get(FROM_WARD)
							+ " and hospital_id = "
							+ hospitalid + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}
					MasDepartment department = new MasDepartment();
					department.setId(box.getInt(FROM_WARD));
					storeInternalIndentT.setDepartment(department);

					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */

				}
			}

			box.put("internalIndentId", newinternalIndentId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				// map = getItemDetailsForDepartmentIndentForNextRecord(box);
			} else {
				// map = getItemDetailsForDepartmentIndent(box);
			}
			List<StoreInternalIndentM> storeInternalIndentMList2 = session
					.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Hospital.Id", hospitalid))
					.add(Restrictions.eq("Id", newinternalIndentId)).list();
			box.put(DEMAND_NO, storeInternalIndentMList2.get(0).getDemandNo());
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */

		map.put("newinternalIndentId", newinternalIndentId);

		return map;
	}

	public Map<String, Object> updateGridItemsInDepartmentIndent(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		StoreInternalIndentT storeInternalIndentT = null;
		try {
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			int deptId = box.getInt(TO_WARD);
			int approvedByEmpId = box
					.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT);
			int requestBYEmpId = box
					.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT);
			String demandNo = box.getString(DEMAND_NO);
			int internalIndentId = box.getInt("internalIndentId");
			StoreInternalIndentM mObj = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class, internalIndentId);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(box.getInt(TO_WARD));
			mObj.setToStore(masDepartment);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box
					.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
			mObj.setApprovedBy(masEmployee);
			String status1 = box.get("status1");
			map.put("status1", status1);
			MasEmployee masEmployee2 = new MasEmployee();
			masEmployee2.setId(box
					.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
			mObj.setRequestedBy(masEmployee2);
			hbt.update(mObj);

			Vector srno = box.getVector("srno");
			// Vector qtymmf = box.getVector("qtymmf");
			Vector items = box.getVector("id");
			Vector qtyRequest = box.getVector("qtyRequest");
			Vector stock = box.getVector("stock");

			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreInternalIndentT tObj = (StoreInternalIndentT) hbt.load(
						StoreInternalIndentT.class, itemId);
				int qm = 0;
				int qr = 0;
				int st = 0;
				// try
				// {
				// qm = Integer.parseInt(qtymmf.get(i).toString());
				// }
				// catch(Exception e)
				// {
				// qm = 0;
				// }

				try {
					qr = Integer.parseInt(qtyRequest.get(i).toString());
				} catch (Exception e) {
					qr = 0;
				}

				try {
					st = Integer.parseInt(stock.get(i).toString());
				} catch (Exception e) {
					st = 0;
				}

				// tObj.setMmfQty(qm);
				tObj.setQtyRequest(qr);
				tObj.setStockInHand(st);
				hbt.update(tObj);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		boolean updated = false;
		updated = true;
		String message = "";
		if (updated) {
			message = "Data update Successfully.";
		} else {
			message = "Some Problem Occured.";
		}
		map = getDepartmentIndentData(box);
		map.put("message", message);
		return map;
	}

	public Map<String, Object> deleteGridItemsForDepartmentIndent(Box box) {
		Session session = (Session) getSession();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			HibernateTemplate hbt = getHibernateTemplate();

			Vector srno = box.getVector("srno");
			// Vector annreq = box.getVector(TENDER_ANNREQ);
			Vector items = box.getVector("id");
			Vector delete = box.getVector(ITEMS_TO_BE_DELETED);

			String obj = null;
			for (int i = 0; i < delete.size(); i++) {
				int itemId = Integer.parseInt(delete.get(i).toString());
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);
				// String hql="delete from
				// jkt.hms.masters.business.StoreMmfDepartmentT as a where
				// a.Item.Id = "+itemId;
				String hql = "delete from jkt.hms.masters.business.StoreInternalIndentT as a where a.Id= :itemId";
				Query query = session.createQuery(hql).setParameter("itemId",
						itemId);
				int row = query.executeUpdate();

			}
			map.put("total_records", srno.size());
			map.put("deleted_records", delete.size());
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		if (Integer.parseInt(map.get("total_records").toString()) == Integer
				.parseInt(map.get("deleted_records").toString())) {
			if (box.getInt("currPage") > 1) {
				box.put("currPage", box.getInt("currPage") - 1);
			}
		}

		map = getDepartmentIndentData(box);
		return map;

	}

	// New Grid For Physical Stock

	public Map<String, Object> showPhysicalStock(int deptId, int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = (Map<String, Object>) HMSUtil
				.getCurrentDateAndTime();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingT> searchStoreStockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingM> stockTakingMOfPhysicalDateList = new ArrayList<StoreStockTakingM>();

		Session session = (Session) getSession();
		String physicalDate = "";
		java.sql.Date stockDate = null;

		physicalDate = (String) utilMap.get("currentDate");

		try {
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(physicalDate));
			stockDate = java.sql.Date.valueOf(date4MySQL1);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			//Commented by Arbind on 02-03-2017
			/*departmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "Y")).list();*/
			//Added by Arbind on 02-03-2017
			departmentList = session.createCriteria(MasInstituteDepartment.class)
					.setProjection(Projections.property("Department"))
					.add(Restrictions.eq("Institute.Id",hospitalId))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("Department", "dep")
					.addOrder(Order.asc("dep.DepartmentName"))
					.list();

			searchStoreStockTakingMList = session
					.createCriteria(StoreStockTakingM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.addOrder(Order.desc("PhysicalDate")).add(Restrictions.eq("Status", "o")).list();
			stockTakingMOfPhysicalDateList = session
					.createCriteria(StoreStockTakingM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("PhysicalDate", stockDate)).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		Box box = new Box("");
		box.put("deptId", deptId);
		map = getGridDataForPhysicalStock(box);

		map.put("departmentList", departmentList);
		// map.put("searchStoreStockTakingTList", searchStoreStockTakingTList);
		map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
		map.put("stockTakingMOfPhysicalDateList",
				stockTakingMOfPhysicalDateList);

		return map;

	}

	public Map<String, Object> createGridForPhysicalStockData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		String pvms = null;
		String nomenclature = null;
		String au = null;
		Integer qtymmf = null;
		String remark = null;
		String brand = null;
		String batchNo = null;
		Date expiryDate = null;
		BigDecimal computedStock = null;
		BigDecimal stockInStore = null;
		BigDecimal stockDefective = null;
		BigDecimal surplus = null;
		BigDecimal deficient = null;

		int id = 0;
		String no = "";
		int storeFyId = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingM> stockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> stockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		int deptId = box.getInt(DEPARTMENT_ID);
		String physicalDate = box.get(PHYSICAL_STOCK_DATE);
		Transaction tx = null;
		try {
			tx = session.getTransaction();
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(physicalDate));
			java.sql.Date stockDate = java.sql.Date.valueOf(date4MySQL1);

			//Commented by Arbind on 02-03-2017
			/*departmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "Y")).list();*/
			//Added by Arbind on 02-03-2017
			departmentList = session.createCriteria(MasInstituteDepartment.class)
					.setProjection(Projections.property("Department"))
					.add(Restrictions.eq("Institute.Id",box.getInt("hospitalId")))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("Department", "dep")
					.addOrder(Order.asc("dep.DepartmentName"))
					.list();

			stockTakingMList = session
					.createCriteria(StoreStockTakingM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("PhysicalDate", stockDate)).add(Restrictions.eq("Status", "o")).list();

			searchStoreStockTakingMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreStockTakingM as i where i.Department.Id = "
							+ deptId + " and i.Hospital.Id = "
							+ box.getInt("hospitalId")
							+ "order by i.PhysicalDate desc");
			map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
			map.put("stockTakingMList", stockTakingMList);
			map.put("departmentList", departmentList);

			if (stockTakingMList == null || stockTakingMList.size() == 0) {
				HibernateTemplate hbt = getHibernateTemplate();
				hbt.setFlushModeName("FLUSH_EAGER");
				hbt.setCheckWriteOperations(false);

				tx.begin();
				
				//Added by Arbind on 08-03-2017
				storeFyDocumentNoList = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id",	box.getInt("hospitalId"))).list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, storeFyId);
				if (storeFyDocumentNo.getAdjustmentNo() != null) {
					no = ("" + storeFyDocumentNo.getAdjustmentNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
				storeFyDocumentNo.setAdjustmentNo(no);
				hbt.update(storeFyDocumentNo);
				//Added by Arbind on 08-03-2017 end
				
				storeItemBatchStockList = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId")))
						.add(Restrictions.ge("ClosingStock", new BigDecimal(0)))
						.addOrder(Order.asc("Item.Id")).list();

				StoreStockTakingM stockTakingM = new StoreStockTakingM();

				MasDepartment department = new MasDepartment();
				department.setId(deptId);
				stockTakingM.setDepartment(department);

				stockTakingM.setPhysicalDate(stockDate);
				stockTakingM
						.setLastChangedDate(HMSUtil
								.convertStringTypeDateToDateType(box
										.get(CHANGED_DATE)));
				Users users = new Users();
				users.setId(box.getInt("userId"));
				stockTakingM.setLastChangedBy(users);
				stockTakingM.setLastChangedTime(box.get(CHANGED_TIME));

				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				stockTakingM.setHospital(masHospital);

				stockTakingM.setStatus("o");
				hbt.save(stockTakingM);
				hbt.refresh(stockTakingM);

				int srNo = 1;
				int buffersize = 0;
				for (Iterator iterator = storeItemBatchStockList.iterator(); iterator
						.hasNext();) {
					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) iterator
							.next();
					StoreStockTakingT stockTakingT = new StoreStockTakingT();
					/*
					 * Code Remove By Mukesh
					 * if(storeItemBatchStock.getClosingStock().compareTo(new
					 * BigDecimal(0))>0){ Date 08 Feb 2010
					 */
					// if(storeItemBatchStock.getClosingStock().compareTo(new
					// BigDecimal(0))>0){
					stockTakingT.setBatchNo(storeItemBatchStock.getBatchNo());

					/*
					 * This code is chnaged By Mukesh Narayan Singh Date 02 Feb
					 * 2011
					 */

					/*
					 * code commented by anamika-----for discusion
					 * Set<MasStoreBrand> masStoreBrandSet = new
					 * HashSet<MasStoreBrand>(); if
					 * (storeItemBatchStock.getItem().getMasStoreBrands() !=
					 * null) { masStoreBrandSet = storeItemBatchStock.getItem()
					 * .getMasStoreBrands(); if (masStoreBrandSet.size() > 0) {
					 * for (MasStoreBrand masStoreBrand : masStoreBrandSet) { //
					 * MasStoreBrand masbrand = new MasStoreBrand(); //
					 * masbrand.setId(storeItemBatchStock.getBrand().getId());
					 * stockTakingT.setBrand(masStoreBrand); } } }
					 */

					stockTakingT.setComputedStock(storeItemBatchStock
							.getClosingStock());
					stockTakingT.setCostPrice(storeItemBatchStock
							.getCostPrice());
					stockTakingT.setExpiryDate(storeItemBatchStock
							.getExpiryDate());

					MasStoreItem item = new MasStoreItem();
					item.setId(storeItemBatchStock.getItem().getId());
					stockTakingT.setItem(item);
					stockTakingT.setRemarks("");
					stockTakingT.setSrNo(srNo++);
					stockTakingT.setStockDeficient(new BigDecimal(0));
					stockTakingT.setStockSurplus(new BigDecimal(0));
					stockTakingT.setStockTakingM(stockTakingM);
					stockTakingT.setStoreStockDefective(new BigDecimal(0));

					stockTakingT.setStoreStockService(storeItemBatchStock
							.getClosingStock());
					stockTakingT.setItemBatchStock(storeItemBatchStock);
					hbt.save(stockTakingT);
					// buffersize++;
					// }

					// if (buffersize % 60 == 0) {
					// session.flush();
					// session.clear();
					// }
					// hbt.refresh(stockTakingT);
				}

				tx.commit();
			}
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
		/*	if (session != null) {
				session.close();
			}*/
			e.printStackTrace();
		}
		map = getGridDataForPhysicalStock(box);
		return map;
	}

	public Map<String, Object> updateGridItemsInPhysicalStock(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
		StoreStockTakingT storeStockTakingT = null;
		Session session = (Session) getSession();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			Vector srno = box.getVector("srno");
			Vector items = box.getVector("id");

			Vector stockInStore = box.getVector("stockInStore");
			// Vector stockDefective = box.getVector("stockDefective");
			Vector surplus = box.getVector("surplus");
			Vector deficient = box.getVector("deficient");
			Vector remark = box.getVector("remark");

			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreStockTakingT tObj = (StoreStockTakingT) hbt.load(
						StoreStockTakingT.class, itemId);
				tObj.setStoreStockService(new BigDecimal(stockInStore.get(i)
						.toString()));
				// tObj.setStoreStockDefective(new
				// BigDecimal(stockDefective.get(i).toString()));

				BigDecimal difference = tObj.getStoreStockService().subtract(
						tObj.getComputedStock());

				if (difference.doubleValue() > 0) {
					tObj.setStockSurplus(difference);
					tObj.setStockDeficient(new BigDecimal(0));
				}

				if (difference.doubleValue() < 0) {
					tObj.setStockDeficient(difference.abs());
					tObj.setStockSurplus(new BigDecimal(0));
				}

				if (difference.doubleValue() == 0) {
					tObj.setStockDeficient(new BigDecimal(0));
					tObj.setStockSurplus(new BigDecimal(0));
				}

				tObj.setRemarks(remark.get(i).toString());
				hbt.update(tObj);
			}
			/*
			 * } catch (HibernateException e) { e.printStackTrace(); }
			 */
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		map = getGridDataForPhysicalStock(box);
		return map;
	}

	// Display Grids Only

	public Map<String, Object> getGridDataForPhysicalStock(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = (Map<String, Object>) HMSUtil
				.getCurrentDateAndTime();

		String pvms = "";
		String nomenclature = "";
		String au = "";
		Integer qtymmf = null;
		String remark = null;
		String brand = null;
		String batchNo = null;
		Date expiryDate = null;

		BigDecimal computedStock = null;
		BigDecimal stockInStore = null;
		BigDecimal stockDefective = null;
		BigDecimal surplus = null;
		BigDecimal deficient = null;

		int id = 0;
		int deptId = 0;
		String physicalDate = "";

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreStockTakingM> stockTakingMList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingT> stockTakingTList = new ArrayList<StoreStockTakingT>();
		List<StoreStockTakingT> stockTakingTList1 = new ArrayList<StoreStockTakingT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreStockTakingM> searchStoreStockTakingMList = new ArrayList<StoreStockTakingM>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		if (box.getInt(DEPARTMENT_ID) != 0) {
			deptId = box.getInt(DEPARTMENT_ID);
			physicalDate = box.get(PHYSICAL_STOCK_DATE);
		} else {
			deptId = box.getInt("deptId");
		}

		if (physicalDate == "") {
			physicalDate = (String) utilMap.get("currentDate");
		}
		int itemId = box.getInt("itemId");

		try {
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(physicalDate));
			java.sql.Date stockDate = java.sql.Date.valueOf(date4MySQL1);
			
			itemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();

			//Commented by Arbind on 02-03-2017
			/*departmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "Y")).list();*/
			//Added by Arbind on 02-03-2017
			departmentList = session.createCriteria(MasInstituteDepartment.class)
					.setProjection(Projections.property("Department"))
					.add(Restrictions.eq("Institute.Id",box.getInt("hospitalId")))
					.add(Restrictions.eq("Status","y").ignoreCase())
					.createAlias("Department", "dep")
					.addOrder(Order.asc("dep.DepartmentName"))
					.list();

			stockTakingMList = session
					.createCriteria(StoreStockTakingM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("PhysicalDate", stockDate)).add(Restrictions.eq("Status", "o")).list();

			searchStoreStockTakingMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreStockTakingM as i where i.Department.Id = "
							+ deptId + "  and i.Hospital.Id = "
							+ box.getInt("hospitalId")
							+ " order by i.PhysicalDate desc");
			map.put("searchStoreStockTakingMList", searchStoreStockTakingMList);
			map.put("departmentList", departmentList);
			map.put("stockTakingMList", stockTakingMList);

			int pageno = 1;
			int numOfRows = 25;
			try {
				if (box.get("pageno") != null) {
					pageno = Integer.parseInt(box.getString("pageno"));
				}
			} catch (Exception e) {
				// e.printStackTrace();
				pageno = 1;
			}

			try {
				if (box.get("numOfRows") != null) {
					numOfRows = Integer.parseInt(box.getString("numOfRows"));
				}
			} catch (Exception e) {
				numOfRows = 5;
			}

			map.put("pageno", pageno);

			int first = (pageno - 1) * numOfRows;
			int totalRecords = 0;
			if (stockTakingMList != null && stockTakingMList.size() > 0) {
				StoreStockTakingM mObj = (StoreStockTakingM) stockTakingMList
						.get(0);
				int stockTakingMId = mObj.getId();

				String qry = "";

				if (itemId != 0) {
					qry = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
							+ stockTakingMId + "item_id=" + itemId;
				} else {
					qry = "SELECT count(*) FROM store_stock_taking_t where stock_taking_m_id = "
							+ stockTakingMId;
				}

				try {
					totalRecords = Integer.parseInt(session.createSQLQuery(qry)
							.list().get(0).toString());
				} catch (Exception e) {
					totalRecords = 0;
				}
				map.put("totalRecords", totalRecords);

				double totalPages = 0.0;
				totalPages = (double) totalRecords / (double) numOfRows;
				Double d = new Double(Math.ceil(totalPages));
				map.put("totalPages", d.intValue());

				// Criteria c =
				// session.createCriteria(StoreStockTakingT.class).add(Restrictions.or((Restrictions.gt("ComputedStock",
				// (new BigDecimal(0)))),Restrictions.eq("Remarks",
				// "items added during stock verification")))
				Criteria c = session.createCriteria(StoreStockTakingT.class)
						.createAlias("StockTakingM", "stm")
						.add(Restrictions.eq("stm.Id", stockTakingMId))
						.add(Restrictions.eq("stm.Department.Id", deptId))
						.createAlias("Item", "Item");

				if (itemId != 0) {
					c = c.add(Restrictions.eq("Item.Id", itemId));
				}
				
				if (box.getString("pvmsNo") != null && !box.getString("pvmsNo").equals("")) {
					c = c.add(Restrictions.eq("Item.PvmsNo",box.getString("pvmsNo")));
				}
				c = c.addOrder(Order.asc("Item.PvmsNo"));
				if (itemId == 0) {
					c.setFirstResult(first);

					if (totalRecords < numOfRows) {
						c.setMaxResults(totalRecords);
					} else {
						c.setMaxResults(numOfRows);
					}

				}
				c.addOrder(Order.asc("Item.Nomenclature"));
				stockTakingTList = c.list();
			}
			map.put("stockTakingTList", stockTakingTList);
			if (stockTakingTList != null && stockTakingTList.size() > 0) {

				for (Iterator iterator = stockTakingTList.iterator(); iterator
						.hasNext();) {
					StoreStockTakingT tObj = (StoreStockTakingT) iterator
							.next();

					try {
						id = tObj.getId();
					} catch (Exception e) {
						id = 0;
					}

					try {
						if(itemList.size()>0){
						 for(MasStoreItem item :itemList){
							 if(tObj.getItem().getId().equals(item.getId())){
								 pvms = item.getPvmsNo();
								 
							 }
						 	}
						}
						
					} catch (Exception e) {
						pvms = "";
					}

					try {
						
						if(itemList.size()>0){
							 for(MasStoreItem item :itemList){
								 if(tObj.getItem().getId().equals(item.getId())){
									 nomenclature = item.getNomenclature();
									
								 }
							 	}
							}
					} catch (Exception e) {
						nomenclature = "";
					}

					/*try {
						brand = tObj.getBrand().getBrandName();
					} catch (Exception e) {
						brand = "";
					}*/

					try {
						if(itemList.size()>0){
							 for(MasStoreItem item :itemList){
								 if(tObj.getItem().getId().equals(item.getId())){
									 au = item.getItemConversion().getPurchaseUnit().getUnitName();
									 
								 }
							 	}
							}
					} catch (Exception e) {
						au = "";
					}

					try {
						batchNo = tObj.getBatchNo();
					} catch (Exception e) {
						batchNo = "";
					}

					try {
						expiryDate = tObj.getExpiryDate();
					} catch (Exception e) {
						expiryDate = null;
					}

					try {
						computedStock = tObj.getComputedStock();
					} catch (Exception e) {
						computedStock = new BigDecimal(0);
					}

					try {
						stockInStore = tObj.getStoreStockService();
					} catch (Exception e) {
						stockInStore = new BigDecimal(0);
					}

					try {
						stockDefective = tObj.getStoreStockDefective();
					} catch (Exception e) {
						stockDefective = new BigDecimal(0);
					}

					try {
						surplus = tObj.getStockSurplus();
					} catch (Exception e) {
						surplus = new BigDecimal(0);
					}

					try {
						deficient = tObj.getStockDeficient();
					} catch (Exception e) {
						deficient = new BigDecimal(0);
					}

					try {
						remark = tObj.getRemarks();
					} catch (Exception e) {
						remark = "";
					}

					hData = new HashMap<String, Object>();
					hData.put("id", id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);

					hData.put("brand", brand);
					hData.put("au", au);

					hData.put("batchNo", batchNo);
					hData.put("expiryDate", expiryDate);
					hData.put("computedStock", computedStock);
					hData.put("stockInStore", stockInStore);

					hData.put("stockDefective", stockDefective);
					hData.put("surplus", surplus);
					hData.put("deficient", deficient);

					hData.put("remark", remark);

					vResult.add(hData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			if (!box.contains("numOfRows")) {
				box.put("numOfRows", 5);
			}
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		return map;
	}

	public String getMmfNo(int docId) {

		Session session = (Session) getSession();
		String docNo = "";
		List<StoreMmfDepartmentM> list = session
				.createCriteria(StoreMmfDepartmentM.class)
				.add(Restrictions.eq("Id", docId)).list();
		if (list.size() > 0) {
			StoreMmfDepartmentM mObj = (StoreMmfDepartmentM) list.get(0);
			docNo = mObj.getDocNo();
		}
		return docNo;
	}

	// ********************************END Of Modules By Deepti
	// Tevatia****************************

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// --------------------------------------------------------- Balance
	// -------------------------------

	public Map<String, Object> fillItemsForBalance(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = null;
		int item_id = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		List objectList = new ArrayList();
		pvmsNo = "" + dataMap.get("pvmsNo");
		try {
			// String qry="select
			// mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name
			// from mas_store_item mas inner join mas_store_item_conversion con
			// on mas.item_conversion_id = con.item_conversion_id ";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,mas.old_niv_no, mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id=con.item_conversion_id where mas.pvms_no='"
					+ pvmsNo + "'";
			objectList = (List) session.createSQLQuery(qry).list();
			pvmsNo = "" + dataMap.get("pvmsNo");
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("PvmsNo", pvmsNo));
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("objectList", objectList);
		return map;

	}

	public Map<String, Object> getItemListForLoanoutByAutocompleteBalance(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {

			Session session = (Session) getSession();
			String pvmsNo = null;
			int deptId = 0;
			int balanceId = 0;
			int hospitalId = 0;
			int groupId = 0;
			int itemTypeId = 0;
			int sectionId = 0;
			int categoryId = 0;
			int classId = 0;
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
			if(dataMap.get("groupId")!= null){
				groupId =(Integer)dataMap.get("groupId");
			}
			if(dataMap.get("itemTypeId")!= null){
				itemTypeId =(Integer)dataMap.get("itemTypeId");
			}
			if(dataMap.get("sectionId")!= null){
				sectionId =(Integer)dataMap.get("sectionId");
			}
			if(dataMap.get("categoryId")!= null){
				categoryId =(Integer)dataMap.get("categoryId");
			}
			if(dataMap.get("classId")!= null){
				classId =(Integer)dataMap.get("classId");
			}
			
			List objectList = new ArrayList();
			List objectList1 = new ArrayList();
			try {
				String str = (String) dataMap.get("autoHint") + "%";
				String qry = "SELECT t.item_id FROM store_balance_t t,store_balance_m m where t.store_balance_m_id='"
						+ balanceId + "' and m.id=t.store_balance_m_id ";
				objectList = (List) session.createSQLQuery(qry).list();
		if (objectList.size() != 0) {

					Criteria c = session
							.createCriteria(MasStoreItem.class)
							.add(Restrictions.like("Nomenclature", str).ignoreCase())
							.add(Restrictions.not(Restrictions.in("Id",
									objectList)));

					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
		} else {
			Criteria c = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.like("Nomenclature", str).ignoreCase())
					;
					if (groupId != 0) {
						c = c.add(Restrictions.eq("Group.Id", groupId));
					}
					if (itemTypeId != 0) {
						c = c.add(Restrictions.eq("ItemType.Id",itemTypeId));
					}
					if (sectionId != 0) {
						c = c.add(Restrictions.eq("Section.Id",sectionId));
					}
					if (categoryId != 0) {
						c = c.add(Restrictions.eq("ItemCategory.Id",categoryId));
					}
					if (classId != 0) {
						c = c.add(Restrictions.eq("ItemClass.Id",classId));
					}
					c.setFirstResult(0);
					c.setMaxResults(10);
					itemList = c.list();
				}
			} catch (HibernateException e) {
				e.printStackTrace();
			}
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> showBalance(Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<MasInstituteDepartment> departmentForIndentNoList = new ArrayList<MasInstituteDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		int grnStartNo = 0;
		String no = "";
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.Department.Id='"
							+ deptId + "' and md.Hospital.Id = '" + hospitalId
							+ "' order by md.Id desc");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where emp.Department.Id='"
							+ deptId + "' and emp.Hospital.Id = '" + hospitalId
							+ "' order by emp.FirstName");
			/*brandList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'Y'");
*/
			manufacturerList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasManufacturer as mm where UPPER(mm.Status) = UPPER('Y') order by mm.ManufacturerName");

			storeGroupList = session.createCriteria(MasStoreGroup.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			itemTypeList = session.createCriteria(MasItemType.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			sectionList = session.createCriteria(MasStoreSection.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			categoryList = session.createCriteria(MasItemCategory.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			itemClassList = session.createCriteria(MasItemClass.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();

			departmentForIndentNoList = session
					.createCriteria(MasInstituteDepartment.class, "mi")
					.add(Restrictions.eq("mi.Status", "Y").ignoreCase())
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Institute.Id", hospitalId))
					.list();
			
			String deptCode = "";
			String hospitalTypeCode = "";
			String hospitalCode = "";
			String balanceNo = "";
			if (departmentForIndentNoList.size() > 0) {
				for (MasInstituteDepartment masInstituteDepartment: departmentForIndentNoList) {
					deptCode =masInstituteDepartment.getDepartment().getDepartmentCode();
					hospitalTypeCode = masInstituteDepartment.getInstitute().getHospitalType().getHospitalTypeCode();
					hospitalCode = masInstituteDepartment.getInstitute().getHospitalCode();
				}
			}
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("deptCode", deptCode);
			maxMap.put("hospitalTypeCode", hospitalTypeCode);
			maxMap.put("hospitalCode", hospitalCode);

			
			storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id = "
							+ hospitalId
							+ " and sfdn.Department.Id = "
							+ deptId);
			/*
			 * for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList)
			 * { if (storeFyDocumentNo.getDepartment() != null) { if
			 * (storeFyDocumentNo.getDepartment().getId() == 1) { no = ("" +
			 * storeFyDocumentNo.getBalanceNo()); no = getMaxNo(no);
			 * 
			 * } } //} }
			 */
			
			if (storeFyDocumentNoList != null
					&& storeFyDocumentNoList.size() > 0) {
				for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
					if (storeFyDocumentNo.getBalanceNo() != null && !storeFyDocumentNo.getBalanceNo().equals("")) {
						balanceNo = ("" + storeFyDocumentNo.getBalanceNo());
						maxMap.put("no", balanceNo);
						balanceNo = getMaxNoForOpening(maxMap);
						map.put("max", balanceNo);

					} else {
						//
						maxMap.put("no", balanceNo);
						balanceNo = getMaxNoForOpening(maxMap);
						map.put("max", balanceNo);

					}
				}
			} else {
				maxMap.put("no", balanceNo);
				balanceNo = getMaxNoForOpening(maxMap);
				map.put("max", balanceNo);

			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		
		map.put("objectList", objectList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		//map.put("max", no);
		return map;

	}

	public Map<String, Object> searchBalance(Map<String, Object> searchFieldMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		String toDate = "";
		List<StoreBalanceM> gridIndentHeaderList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridIndentDetailList = new ArrayList<StoreBalanceT>();
		List<MasEmployee> gridApprovedByList = new ArrayList<MasEmployee>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		String balanceNo = "";
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (searchFieldMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + searchFieldMap.get("deptId"));
		}
		if (searchFieldMap.get("hospitalId") != null) {
			hospitalId = Integer
					.parseInt("" + searchFieldMap.get("hospitalId"));
		}
		if (searchFieldMap.get("userName") != null) {
			userName = ("" + searchFieldMap.get("userName"));
		}
		try {
			if (searchFieldMap.get("max") != "") {
				balanceNo = (String) searchFieldMap.get("max");

				gridIndentDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceT ");
				gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as pod where pod.BalanceNo = '"
								+ balanceNo + "' and pod.Department.Id='"
								+ deptId + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if ((!searchFieldMap.get("fromDate").equals(""))
					&& (!searchFieldMap.get("toDate").equals(""))
					&& balanceNo.equals("")) {
				fromDate = (String) searchFieldMap.get("fromDate");
				toDate = (String) searchFieldMap.get("toDate");

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(fromDate));
				String date4MySQL2 = formatterOut.format(formatterIn
						.parse(toDate));
				java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
				java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

				gridIndentDetailList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceT ");
				gridIndentHeaderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as poh where "
								+ " poh.BalanceDate between '" + startDate
								+ "' and '" + endDate
								+ "'and poh.Department.Id='" + deptId + "'");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		gridApprovedByList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee as isc");
		brandList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'y'");
		manufacturerList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y'");
		map.put("approvedByEmployeeList", gridApprovedByList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		map.put("indentDetailList", gridIndentDetailList);
		map.put("indentHeaderList", gridIndentHeaderList);

		return map;

	}

	public boolean addBalance(StoreBalanceM storeBalanceM,
			List<StoreBalanceT> storeBalanceTlist, Map<String, Object> infoMap) {

		boolean successfullyAdded = false;
		StoreBalanceM storeBalanceM2 = new StoreBalanceM();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");

		hbt.setCheckWriteOperations(false);
		if (!(infoMap.get("headerStored") + "").equals("yes")) {

			try {
				hbt.save(storeBalanceM);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {

			if (storeBalanceTlist.size() > 0) {
				if ((infoMap.get("headerStored") + "").equals("yes")) {
					int id = Integer.parseInt("" + infoMap.get("balanceId"));
					storeBalanceM2.setId(id);
				}
				for (int i = 0; i < storeBalanceTlist.size(); i++) {
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTlist.get(i);
					if ((infoMap.get("headerStored") + "").equals("yes")) {
						storeBalanceTObj.setStoreBalanceM(storeBalanceM2);
					} else {
						storeBalanceTObj.setStoreBalanceM(storeBalanceM);
					}
					hbt.save(storeBalanceTObj);
				}
				int pageNo = 0;
				String maxBalanceNo = "";
				pageNo = Integer.parseInt("" + infoMap.get("pageNo"));
				maxBalanceNo = "" + infoMap.get("max");
				if (pageNo == 1) {
					int StoreFyDocumentNoId = 1;
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
							.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
					HibernateTemplate hbt2 = getHibernateTemplate();
					storeFyDocumentNo.setBalanceNo(maxBalanceNo);
					hbt2.setFlushModeName("FLUSH_EAGER");
					hbt2.update(storeFyDocumentNo);
				}
			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;

	}

	public Map<String, Object> getBalanceModifyMap(int radio_str) {

		Map map = new HashMap();
		List<StoreBalanceM> gridStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridStoreBalanceTList = new ArrayList<StoreBalanceT>();

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();

		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		int id = 0;
		gridStoreBalanceMList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceM as md where md.Id = '"
						+ radio_str + "'");
		for (StoreBalanceM storeBalanceM : gridStoreBalanceMList) {
			id = storeBalanceM.getId();

		}
		itemList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y'");
		brandList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'y'");
		manufacturerList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y'");
		gridStoreBalanceTList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreBalanceT as siit where siit.StoreBalanceM.Id = '"
						+ id + "'");
		approvedByEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee ");
		map.put("itemList", itemList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("gridStoreBalanceTList", gridStoreBalanceTList);
		map.put("gridStoreBalanceMList", gridStoreBalanceMList);
		map.put("balanceId", id);

		return map;
	}

	public Map<String, Object> getBalanceMAndTUpdate(int balanceId) {
		Map map = new HashMap();
		List<StoreBalanceM> gridBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridBalanceTList = new ArrayList<StoreBalanceT>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();

		try {
			gridBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as sm where sm.Id='"
							+ balanceId + "'");
			gridBalanceTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceT as st where st.StoreBalanceM.Id='"
							+ balanceId + "'  ");
			itemList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreItem as mi where mi.Status = 'y'");
			brandList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'y'");
			manufacturerList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasManufacturer as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreBalanceMList", gridBalanceMList);
		map.put("searchStoreBalanceTList", gridBalanceTList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("itemList", itemList);
		map.put("brandList", brandList);
		map.put("manufacturerList", manufacturerList);

		return map;
	}

	public boolean updateBalance(StoreBalanceM storeBalanceM,
			List<StoreBalanceT> storeBalanceTlist) {
		boolean successfullyAdded = false;
		StoreBalanceM storeBalanceM2 = new StoreBalanceM();
		storeBalanceM2 = storeBalanceM;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {

			hbt.update(storeBalanceM2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			if (storeBalanceTlist.size() > 0) {
				for (int i = 0; i < storeBalanceTlist.size(); i++) {
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTlist.get(i);
					hbt.update(storeBalanceTObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public int getBalanceId(int balanceNo) {

		int balanceId = 0;
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreBalanceM as pod where pod.BalanceNo = '"
						+ balanceNo + "'");
		for (StoreBalanceM balanceM2 : list) {
			balanceId = Integer.parseInt("" + balanceM2.getId());
		}
		return balanceId;
	}

	public Map getBalance1ModifyMap(int balanceId, int pageNo,
			Map<String, Object> dataMap) {

		Map map = new HashMap();
		List<StoreBalanceM> gridIndentMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> gridIndentTList = new ArrayList<StoreBalanceT>();
		List<MasEmployee> gridApprovedByList = new ArrayList<MasEmployee>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;

		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}

		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {
			Criteria c = session.createCriteria(StoreBalanceT.class).add(
					Restrictions.eq("StoreBalanceM.Id", balanceId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.Id ="
							+ balanceId + "and md.Department.Id='" + deptId
							+ "'");
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			gridApprovedByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as isc");
			brandList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreBrand as mi where mi.Status = 'y'");
			searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where md.Department.Id='"
							+ deptId + "'");

		} catch (Exception e) {

			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("balanceId", balanceId);
		map.put("approvedByEmployeeList", gridApprovedByList);
		map.put("brandList", brandList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("objectList", objectList);

		return map;

	}

	public boolean updateNextBalance1(Map<String, Object> masterAndDetailMap) {
		boolean successfullyAdded = false;
		@SuppressWarnings("unused")
		StoreBalanceM storeIndentM2 = new StoreBalanceM();
		StoreBalanceM storeIndentM3 = new StoreBalanceM();
		List<StoreBalanceT> storeIndentTListForUpdate = new ArrayList<StoreBalanceT>();
		List<StoreBalanceT> storeIndentTListForAdd = new ArrayList<StoreBalanceT>();
		int balanceId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		int deptId = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			if (masterAndDetailMap.get("storeBalanceM") != null) {
				storeIndentM3 = (StoreBalanceM) masterAndDetailMap
						.get("storeBalanceM");
			}
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreBalanceT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreBalanceT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("balanceId") != null) {
				balanceId = Integer.parseInt(""
						+ masterAndDetailMap.get("balanceId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("deptId") != null) {
				deptId = (Integer) masterAndDetailMap.get("deptId");
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreBalanceT>) masterAndDetailMap
						.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {

						StoreBalanceT storeBalanceT = new StoreBalanceT();
						List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
						storeBalanceT = (StoreBalanceT) storeIndentTListForUpdate
								.get(i);
						int srNo = storeBalanceT.getSrNo();
						StoreBalanceT previousBalanceT = new StoreBalanceT();
						previousBalanceT = (StoreBalanceT) session
								.createCriteria(StoreBalanceT.class)
								.add(Restrictions.eq("StoreBalanceM.Id",
										balanceId))
								.add(Restrictions.eq("SrNo", srNo)).list()
								.get(0);
						int item_id = previousBalanceT.getItem().getId();
						String batchNo = previousBalanceT.getBatchNo();
						BigDecimal qty = previousBalanceT.getQty();
						storeItemBatchStockList = session
								.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("Item.Id", item_id))
								.add(Restrictions.eq("BatchNo", batchNo))
								.add(Restrictions.eq("Department.Id", deptId))
								.list();
						// updating according to previous stock and next stock
						StoreItemBatchStock storeItemBatchStock = storeItemBatchStockList
								.get(0);
						BigDecimal closing_stock = storeItemBatchStock
								.getClosingStock();
						BigDecimal net_qty = closing_stock.subtract(qty);
						storeItemBatchStock.setClosingStock(net_qty
								.add(storeBalanceT.getQty()));
						storeItemBatchStock.setMrp(storeBalanceT.getMrp());
						storeItemBatchStock.setDispencingPrice(storeBalanceT
								.getDispencingPrice());
						hbt.update(storeItemBatchStock);

						session.flush();
						hbt.flush();

						StoreBalanceT storeBalanceT1 = new StoreBalanceT();

						storeBalanceT1 = (StoreBalanceT) storeIndentTListForUpdate
								.get(i);
						StoreBalanceM storeBalanceM = new StoreBalanceM();
						storeBalanceM.setId(balanceId);
						storeBalanceT1.setStoreBalanceM(storeBalanceM);

						hbt.merge(storeBalanceT1);

						// updating mas_store_item for cost price
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem = (MasStoreItem) hbt.load(
								MasStoreItem.class, storeBalanceT.getItem()
										.getId());
						masStoreItem.setCostPrice(storeBalanceT.getUnitRate());
						hbt.update(masStoreItem);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreBalanceT>) masterAndDetailMap
						.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreBalanceT storeBalanceT = new StoreBalanceT();
						storeBalanceT = (StoreBalanceT) storeIndentTListForAdd
								.get(i);

						StoreBalanceM storeBalanceM = new StoreBalanceM();
						storeBalanceM.setId(balanceId);
						storeBalanceT.setStoreBalanceM(storeBalanceM);

						hbt.save(storeBalanceT);
						List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
						storeItemBatchStockList = session
								.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("Item.Id", storeBalanceT
										.getItem().getId()))
								.add(Restrictions.eq("BatchNo",
										storeBalanceT.getBatchNo()))
								.add(Restrictions.eq("Department.Id", deptId))
								.list();
						if (storeItemBatchStockList != null
								&& storeItemBatchStockList.size() > 0) {
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock = storeItemBatchStockList
									.get(0);
							if (storeItemBatchStock.getClosingStock() != null) {
								BigDecimal closing_stock = storeItemBatchStock
										.getClosingStock();
								storeItemBatchStock
										.setClosingStock(closing_stock
												.add(storeBalanceT.getQty()));
							} else {
								storeItemBatchStock
										.setClosingStock(storeBalanceT.getQty());
							}
							if (storeBalanceT.getMrp() != null) {
								storeItemBatchStock.setMrp(storeBalanceT
										.getMrp());
							}
							if (storeBalanceT.getDispencingPrice() != null) {
								storeItemBatchStock
										.setDispencingPrice(storeBalanceT
												.getDispencingPrice());
							}
							hbt.update(storeItemBatchStock);
						} else {

							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeItemBatchStock
									.setDepartment(new MasDepartment(deptId));
							storeItemBatchStock
									.setItem(storeBalanceT.getItem());
							storeItemBatchStock.setBatchNo(storeBalanceT
									.getBatchNo());
							// storeItemBatchStock.setBrand(storeBalanceTObj.getBrand());
							storeItemBatchStock.setCostPrice(storeBalanceT
									.getUnitRate());
							if (storeBalanceT.getDispencingPrice() != null) {
								storeItemBatchStock
										.setDispencingPrice(storeBalanceT
												.getDispencingPrice());
							}
							if (storeBalanceT.getMrp() != null) {
								storeItemBatchStock.setMrp(storeBalanceT
										.getMrp());
							}
							storeItemBatchStock.setExpiryDate(storeBalanceT
									.getExpiryDate());
							storeItemBatchStock.setClosingStock(storeBalanceT
									.getQty());
							storeItemBatchStock
									.setOpeningBalanceDate(storeBalanceT
											.getStoreBalanceM()
											.getBalanceDate());
							storeItemBatchStock
									.setOpeningBalanceQty(storeBalanceT
											.getQty());
							HibernateTemplate hbt1 = getHibernateTemplate();
							hbt1.setFlushModeName("FLUSH_AUTO");
							hbt1.setCheckWriteOperations(false);
							hbt1.save(storeItemBatchStock);
						}

					}
				}
				tx.commit();
				successfullyAdded = true;
			}
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}

		return successfullyAdded;
	}

	public Map<String, Object> addNextOrSubmitBalance(
			Map<String, Object> dataMap, Box box) {
		Map<String, Object> map = new HashMap<String, Object>(); 
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		StoreBalanceM storeBalanceM = new StoreBalanceM();
		List<StoreBalanceM> storeBalanceMlist = new ArrayList<StoreBalanceM>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();

		// For Show Jsp
		List<StoreBalanceM> searchStoreBalanceMList = new ArrayList<StoreBalanceM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		// List<MasStoreBrand> brandList= new ArrayList<MasStoreBrand>();
		List<StoreBalanceM> list = new ArrayList<StoreBalanceM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int balanceId = 0;
		int hospitalId = 0;
		int userId = 0;
		String balanceNo = "";
		Date balanceDate = new Date();
		if (dataMap.get("storeBalanceM") != null) {
			storeBalanceM = (StoreBalanceM) dataMap.get("storeBalanceM");
		}
		if (dataMap.get("balanceNo") != null) {
			balanceNo = "" + dataMap.get("balanceNo");
		}

		if (dataMap.get("storeBalanceTList") != null) {
			storeBalanceTList = (List<StoreBalanceT>) dataMap
					.get("storeBalanceTList");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("balanceId") != null) {
			balanceId = Integer.parseInt("" + dataMap.get("balanceId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userId") != null) {
			userId = Integer.parseInt("" + dataMap.get("userId"));
		}
		if (dataMap.get("balanceDate") != null) {
			balanceDate = (Date) (dataMap.get("balanceDate"));
		}
		int deptId = 0;

		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		Vector manufactureId = box.getVector("manufacturerId");
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			String no = "";
			//if (pageNo == 1) {
				storeFyDocumentNoList = (List) getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id ="
								+ hospitalId + " and department_id =" + deptId);
				try {
					hbt.save(storeBalanceM); 
					synchronized (this) {

						if (storeFyDocumentNoList.size() > 0) {
							StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) storeFyDocumentNoList.get(0);
							storeFyDocumentNo.setBalanceNo(balanceNo);
							hbt.update(storeFyDocumentNo);
							hbt.refresh(storeFyDocumentNo); 
						} else {

							StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
							storeFyDocumentNo.setAdjustmentNo("0");
							storeFyDocumentNo.setAdjustmentStartNo("0");
							storeFyDocumentNo.setBalanceNo(balanceNo);
							storeFyDocumentNo.setBalanceStartNo("0");
							storeFyDocumentNo.setDefectEntryNo("0");
							storeFyDocumentNo.setDefectEntryStartNo("0");
							storeFyDocumentNo.setDemandNo("0");
							storeFyDocumentNo.setDemandStartNo("0");
							storeFyDocumentNo.setInIndentNo("0");
							storeFyDocumentNo.setDepartment(new MasDepartment(deptId));
							storeFyDocumentNo.setGrnNo("0");
							storeFyDocumentNo.setGrnStartNo("0");
							storeFyDocumentNo.setIssueDeptNo("0");
							storeFyDocumentNo.setIssueDeptReturnNo("0");
							storeFyDocumentNo.setIssueDeptReturnStartNo("0");
							storeFyDocumentNo.setIssueDeptStartNo("0");
							storeFyDocumentNo.setVendorReturnNo("0");
							storeFyDocumentNo.setVendorReturnStartNo("0");
							String issueDeptNo = "";
							issueDeptNo = getMaxNo("0");
							String issueDeptStartNo = issueDeptNo;
							storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
							storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
							MasHospital hospital = new MasHospital();
							hospital.setId(hospitalId);
							storeFyDocumentNo.setHospital(hospital);
							hbt.save(storeFyDocumentNo);
							hbt.refresh(storeFyDocumentNo); 
						}
					}
					

				} catch (Exception e) {

					e.printStackTrace();
				}
				storeBalanceMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreBalanceM as md where md.BalanceNo = '"
								+ balanceNo + "' and md.Hospital.Id ="
								+ hospitalId);
				for (StoreBalanceM storeBalanceM2 : storeBalanceMlist) {
					balanceId = storeBalanceM2.getId();
				//}
				/*
				 * int StoreFyDocumentNoId = 1; StoreFyDocumentNo
				 * storeFyDocumentNo = (StoreFyDocumentNo)
				 * getHibernateTemplate() .load(StoreFyDocumentNo.class,
				 * StoreFyDocumentNoId);
				 * storeFyDocumentNo.setBalanceNo(balanceNo);
				 * hbt.update(storeFyDocumentNo);
				 */
			}
			/*if (storeFyDocumentNoList != null
					&& storeFyDocumentNoList.size() > 0) {
				for (StoreFyDocumentNo storeFyDocumentNo2 : storeFyDocumentNoList) {
					if (storeFyDocumentNo2.getBalanceNo() != null) {
						no = ("" + storeFyDocumentNo2.getBalanceNo());
						no = getMaxNo(no);
					} else {
						no = getMaxNo(no);
					}
					storeFyDocumentNo2.setBalanceNo(no);

					hbt.update(storeFyDocumentNo2);
					hbt.refresh(storeFyDocumentNo2);
				}
			} else {
				StoreFyDocumentNo fyDocumentNo = new StoreFyDocumentNo();
				no = getMaxNo(no);
				fyDocumentNo.setBalanceNo(no);
				hbt.save(fyDocumentNo);
				hbt.refresh(fyDocumentNo);
			}
			*/
				List<StoreItemBatchStock> storeItemBatchStocksList=new ArrayList<StoreItemBatchStock>();
				List<StoreBalanceT > StoreBalanceTList =new ArrayList<StoreBalanceT>();
			if (storeBalanceTList.size() > 0) {
				if (pageNo != 1) {
					storeBalanceM.setId(balanceId);
				}
				for (int i = 0; i < storeBalanceTList.size(); i++) {
					//StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
					StoreBalanceT storeBalanceTObj = new StoreBalanceT();
					storeBalanceTObj = (StoreBalanceT) storeBalanceTList.get(i);
					// saving cost price in mas store item
					if (storeBalanceTObj.getUnitRate() != null) {
						MasStoreItem masStoreItem = (MasStoreItem) getHibernateTemplate()
								.load(MasStoreItem.class,
										storeBalanceTObj.getItem().getId());

						masStoreItem.setCostPrice(storeBalanceTObj
								.getUnitRate());
						hbt.update(masStoreItem);
					}
					/**
					 * laundry_group_id==53 means Laundry laundry_group_id=53
					 */

					int laundry_group_id = 0;
					laundry_group_id = Integer.parseInt(properties
							.getProperty("laundry_group_id"));
					String laundry_batch_no = "";
					laundry_batch_no = properties
							.getProperty("laundry_batch_no");

					/**
					 * if item group is laundry then default bacth is A for all
					 * item Code By Mukesh Narayan Singh Date 07 July 2011
					 */
					List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
					int item_id = storeBalanceTObj.getItem().getId();
					masStoreItemList = session
							.createCriteria(MasStoreItem.class)
							.add(Restrictions.idEq(item_id)).list();
					int itemGroup = 0;
					if (masStoreItemList.size() > 0) {
						MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
								.get(0);
						if (masStoreItem.getDepartment() != null) {
							itemGroup = masStoreItem.getGroup().getId();
						}
					}
					if (laundry_group_id == itemGroup) {
						storeBalanceTObj.setBatchNo(laundry_batch_no);
					}

					storeBalanceTObj.setStoreBalanceM(storeBalanceM);
					hbt.save(storeBalanceTObj);
					StoreBalanceTList.add(storeBalanceTObj);

			/*		BigDecimal cost_price = storeBalanceTObj.getUnitRate();
					String batch_no = storeBalanceTObj.getBatchNo();
					storeItemBatchStockList = hbt
							.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
									+ item_id
									+ " and inp.Department.Id= "
									+ deptId
									+ " and inp.Hospital.Id = "
									+ hospitalId
									+ " and inp.BatchNo ='"
									+ batch_no + "' ");

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {

						int id = storeItemBatchStockList.get(0).getId();

						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
								.load(StoreItemBatchStock.class, id);

						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());

						BigDecimal a = null;
						BigDecimal b = null;
						BigDecimal c = null;
						a = storeBalanceTObj.getQty();
						b = storeItemBatchStock.getClosingStock();

						c = a.add(b);

						storeItemBatchStock.setClosingStock(c);

						
						 * This is added BY Mukesh Narayan SIngh Date 24 Feb
						 * 2011 Stock Opening Balance Enty Update
						 
						BigDecimal stockOpeningBalanceQty = new BigDecimal(0);
						BigDecimal stockOpeningBalanceEntryQty = new BigDecimal(
								0);
						BigDecimal stockOpeningBalanceQtyTotal = new BigDecimal(
								0);
						if (storeItemBatchStock.getOpeningBalanceQty() != null) {
							stockOpeningBalanceEntryQty = storeBalanceTObj
									.getQty();
							stockOpeningBalanceQty = storeItemBatchStock
									.getOpeningBalanceQty();
							stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);
							storeItemBatchStock
									.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
						} else {
							if (storeBalanceTObj.getQty() != null) {
								stockOpeningBalanceEntryQty = storeBalanceTObj
										.getQty();
							} else {
								stockOpeningBalanceEntryQty = new BigDecimal(0);
							}
							stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);
							storeItemBatchStock
									.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
						}
						if (storeBalanceTObj.getDispencingPrice() != null) {
							storeItemBatchStock
									.setDispencingPrice(storeBalanceTObj
											.getDispencingPrice());
						} else {
							storeItemBatchStock
									.setDispencingPrice(new BigDecimal(0));
						}
						if (storeBalanceTObj.getMrp() != null) {
							storeItemBatchStock.setMrp(storeBalanceTObj
									.getMrp());
						} else {
							storeItemBatchStock
									.setDispencingPrice(new BigDecimal(0));
						}

						storeItemBatchStock
								.setOpeningBalanceDate(storeBalanceTObj
										.getStoreBalanceM().getBalanceDate());

						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());

						hbt.update(storeItemBatchStock);
					} else {
						MasDepartment department = new MasDepartment();
						department.setId(deptId);
						storeItemBatchStock.setDepartment(department);
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						storeItemBatchStock.setHospital(masHospital);
						// storeItemBatchStock.setDepartment(storeBalanceTObj
						// .getStoreBalanceM().getDepartment());
						storeItemBatchStock.setItem(storeBalanceTObj.getItem());
						storeItemBatchStock.setBatchNo(storeBalanceTObj
								.getBatchNo());
						// storeItemBatchStock.setBrand(storeBalanceTObj.getBrand());
						storeItemBatchStock.setCostPrice(storeBalanceTObj
								.getUnitRate());
						if (storeBalanceTObj.getDispencingPrice() != null) {
							storeItemBatchStock
									.setDispencingPrice(storeBalanceTObj
											.getDispencingPrice());
						}
						if (storeBalanceTObj.getMrp() != null) {
							storeItemBatchStock.setMrp(storeBalanceTObj
									.getMrp());
						}
						storeItemBatchStock.setExpiryDate(storeBalanceTObj
								.getExpiryDate());
						storeItemBatchStock.setManufactureDate(storeBalanceTObj
								.getManufactureDate());
						MasManufacturer masManufacturer = new MasManufacturer();
						masManufacturer.setId(Integer.parseInt(manufactureId
								.get(i).toString()));
						storeItemBatchStock.setManufacturer(masManufacturer);
						storeItemBatchStock.setClosingStock(storeBalanceTObj
								.getQty());
						storeItemBatchStock.setOpeningBalanceDate(balanceDate);
						storeItemBatchStock
								.setOpeningBalanceQty(storeBalanceTObj.getQty());
						Users user = new Users();
						user.setId(userId);
						storeItemBatchStock.setLastChgBy(user);
						storeItemBatchStock.setLastChgDate(HMSUtil
								.convertStringTypeDateToDateType(date));
						hbt.save(storeItemBatchStock);
					}*/

				}

			}
			successfullyAdded = "yes";

			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id = con.item_conversion_id ";
			objectList = (List) session.createSQLQuery(qry).list();
			/*
			 * if(objectList.size()!=0){ Criteria c =
			 * session.createCriteria(MasStoreItem
			 * .class).add(Restrictions.eq("Department.Id",
			 * deptId)).add(Restrictions.not(Restrictions.in("Id",
			 * objectList))); c.setFirstResult(0); c.setMaxResults(10); itemList
			 * = c.list(); }else{ Criteria c =
			 * session.createCriteria(MasStoreItem
			 * .class).add(Restrictions.eq("Department.Id", deptId));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list(); }
			 */

			// itemList = getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreItem as mi where mi.Status =
			// 'y'");
			searchStoreBalanceMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreBalanceM as md where  md.Hospital.Id = "
							+ hospitalId);
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where emp.Hospital.Id = "
							+ hospitalId);
			// brandList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.MasStoreBrand ");
			tx.commit(); 
		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} // finally {
			// session.close();
		// }

		// map.put("itemList",itemList);
		map.put("objectList", objectList);
		map.put("approvedByList", approvedByEmployeeList);
		// map.put("brandList", brandList);
		map.put("searchStoreBalanceMList", searchStoreBalanceMList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("balanceId", balanceId);

		return map;
	}

	public Map<String, Object> showLastDemandNo(int pageNo) {
		Map map = new HashMap();
		List<StoreInternalIndentM> gridIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentT> gridIndentTList = new ArrayList<StoreInternalIndentT>();
		@SuppressWarnings("unused")
		List<MasStoreSection> gridSectionList = new ArrayList<MasStoreSection>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreInternalIndentM> searchStoreInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> sectionList = new ArrayList<MasDepartment>();
		List<StoreInternalIndentM> list = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		StoreInternalIndentM t = new StoreInternalIndentM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		int internalIndentId = 0;
		int grnStartNo = 0;
		String no = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {
			gridIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreInternalIndentM as md ");
			for (Iterator i = gridIndentMList.listIterator(); i.hasNext();) {
				t = (StoreInternalIndentM) i.next();

			}
			internalIndentId = t.getId();
			Criteria c = session.createCriteria(StoreInternalIndentT.class)
					.add(Restrictions.eq("Internal.Id", internalIndentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,b.stock,c.mmf_qty,mas.department_id,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id left outer join (select ba.item_id,sum(ba.closing_stock) stock from store_item_batch_stock ba where department_id=1 group by ba.item_id)b on mas.item_id=b.item_id left outer join (select it.mmf_qty, it.item_id from  store_internal_indent_m im inner join store_internal_indent_t it on im.id=it.internal_id where it.mmf_qty='"
					+ year + "' )c on mas.item_id=c.item_id;";
			objectList = (List) session.createSQLQuery(qry).list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreInternalIndentM as md where md.Id ="
							+ internalIndentId);
			searchStoreInternalIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreInternalIndentM as md ");
			requestByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			sectionList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as ms where ms.Status = 'y'");
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			storeFyDocumentNoList = (List) getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreFyDocumentNo ");
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getDepartment().getId() == 1) {
					no = ("" + storeFyDocumentNo.getDemandNo());
					no = getMaxNo(no);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("internalIndentId", internalIndentId);
		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("requestByList", requestByEmployeeList);
		map.put("searchStoreInternalIndentMList",
				searchStoreInternalIndentMList);
		map.put("sectionList", sectionList);
		map.put("objectList", objectList);
		map.put("max", no);

		return map;
	}

	public Map<String, Object> showLastDocNo(int pageNo) {
		Map map = new HashMap();
		List<StoreMmfDepartmentM> gridIndentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> gridIndentTList = new ArrayList<StoreMmfDepartmentT>();
		@SuppressWarnings("unused")
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		StoreMmfDepartmentM t = new StoreMmfDepartmentM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		int mmfDepartmentId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			for (Iterator i = gridIndentMList.listIterator(); i.hasNext();) {
				t = (StoreMmfDepartmentM) i.next();

			}
			mmfDepartmentId = t.getId();

			Criteria c = session.createCriteria(StoreMmfDepartmentT.class).add(
					Restrictions.eq("StoreMmfDepartmentM.Id", mmfDepartmentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md where md.Id ="
							+ mmfDepartmentId);
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreMmfDepartmentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("mmfDepartmentId", mmfDepartmentId);
		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("objectList", objectList);

		return map;
	}

	public Map<String, Object> addNextOrSubmitMmfDepartment(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		String successfullyAdded = "no";
		@SuppressWarnings("unused")
		int pageNo = 0;
		String maxDocNo = "";
		StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
		List<StoreMmfDepartmentM> storeMmfDepartmentMlist = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTlist = new ArrayList<StoreMmfDepartmentT>();

		// For Show Jsp
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();

		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));

		int mmfDepartmentId = 0;
		String docNo = "";
		if (dataMap.get("storeMmfDepartmentM") != null) {
			storeMmfDepartmentM = (StoreMmfDepartmentM) dataMap
					.get("storeMmfDepartmentM");
		}
		if (dataMap.get("docNo") != null) {
			docNo = "" + dataMap.get("docNo");
		}

		if (dataMap.get("storeMmfDepartmentTlist") != null) {
			storeMmfDepartmentTlist = (List<StoreMmfDepartmentT>) dataMap
					.get("storeMmfDepartmentTlist");
		}
		if (dataMap.get("pageNo") != null) {
			pageNo = Integer.parseInt("" + dataMap.get("pageNo"));
		}
		if (dataMap.get("mmfDepartmentId") != null) {
			mmfDepartmentId = Integer.parseInt(""
					+ dataMap.get("mmfDepartmentId"));
		}
		// Session sess = factory.openSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			if (pageNo == 1) {
				hbt.save(storeMmfDepartmentM);
				storeMmfDepartmentMlist = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreMmfDepartmentM as md where md.DocNo = '"
								+ docNo + "'");
				for (StoreMmfDepartmentM storeMmfDepartmentM2 : storeMmfDepartmentMlist) {
					mmfDepartmentId = storeMmfDepartmentM2.getId();
				}
				int StoreFyDocumentNoId = 1;
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
				storeFyDocumentNo.setMmfNo(docNo);
				hbt.update(storeFyDocumentNo);
			}

			if (storeMmfDepartmentTlist.size() > 0) {
				if (pageNo != 1) {
					storeMmfDepartmentM.setId(mmfDepartmentId);
				}
				for (int i = 0; i < storeMmfDepartmentTlist.size(); i++) {
					StoreMmfDepartmentT storeMmfDepartmentTObj = new StoreMmfDepartmentT();
					storeMmfDepartmentTObj = (StoreMmfDepartmentT) storeMmfDepartmentTlist
							.get(i);
					storeMmfDepartmentTObj
							.setStoreMmfDepartmentM(storeMmfDepartmentM);
					hbt.save(storeMmfDepartmentTObj);
				}

			}
			successfullyAdded = "yes";
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreMmfDepartmentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			tx.commit();

		} catch (RuntimeException e) {
			if (tx != null) {
				tx.rollback();
			}
			// throw e; // or display error message
			e.printStackTrace();
		} // finally {
			// session.close();
		// }
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("objectList", objectList);
		map.put("successfullyAdded", successfullyAdded);
		map.put("departmentList", departmentList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("mmfDepartmentId", mmfDepartmentId);
		return map;

	}

	public Map getMmfDepartmentModifyMapForDepot(int mmfDepartmentId, int pageNo) {

		Map map = new HashMap();
		List<StoreMmfDepartmentM> gridIndentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentT> gridIndentTList = new ArrayList<StoreMmfDepartmentT>();
		@SuppressWarnings("unused")
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		int id = 0;
		int firstResult = 0;
		int maxResults = 8;

		if (pageNo != 1) {
			firstResult = firstResult + (pageNo - 1) * 8;
		}
		List<StoreMmfDepartmentM> searchStoreMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		List objectList = new ArrayList();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		int year = Integer.parseInt(date.substring(6));
		try {

			Criteria c = session.createCriteria(StoreMmfDepartmentT.class).add(
					Restrictions.eq("StoreMmfDepartmentM.Id", mmfDepartmentId));
			c.setFirstResult(firstResult);
			c.setMaxResults(maxResults);
			gridIndentTList = c.list();
			gridIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md where md.Id ="
							+ mmfDepartmentId);
			String qry = "select mas.item_id,mas.pvms_no,mas.nomenclature,mas.strength,con.item_unit_name from mas_store_item mas inner join mas_store_item_conversion con on mas.item_conversion_id= con.item_conversion_id ;";
			objectList = (List) session.createSQLQuery(qry).list();
			searchStoreMmfDepartmentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreMmfDepartmentM as md ");
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee ");
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("gridIndentMList", gridIndentMList);
		map.put("gridIndentTList", gridIndentTList);
		map.put("mmfDepartmentId", mmfDepartmentId);
		map.put("departmentList", departmentList);
		map.put("approvedByList", approvedByEmployeeList);
		map.put("searchStoreMmfDepartmentMList", searchStoreMmfDepartmentMList);
		map.put("objectList", objectList);

		return map;
	}

	public int getStoreMmfDepartmentId(String docNo) {
		@SuppressWarnings("unused")
		int mmfDepartmentId = 0;
		List<StoreMmfDepartmentM> list = new ArrayList<StoreMmfDepartmentM>();
		list = (List) getHibernateTemplate().find(
				"from jkt.hms.masters.business.StoreMmfDepartmentM as pod where pod.DocNo = '"
						+ docNo + "'");
		for (StoreMmfDepartmentM storeMmfDepartmentM2 : list) {
			mmfDepartmentId = Integer.parseInt(""
					+ storeMmfDepartmentM2.getId());
		}
		return mmfDepartmentId;
	}

	public boolean updateNextMmfDepartment(
			Map<String, Object> masterAndDetailMap) {

		boolean successfullyAdded = false;
		StoreMmfDepartmentM storeIndentM2 = new StoreMmfDepartmentM();
		StoreMmfDepartmentM storeIndentM3 = new StoreMmfDepartmentM();
		List<StoreMmfDepartmentT> storeIndentTListForUpdate = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeIndentTListForAdd = new ArrayList<StoreMmfDepartmentT>();
		int mmfDepartmentId = 0;
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		int pageNo = 0;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		try {
			if (masterAndDetailMap.get("storeMmfDepartmentM") != null) {
				storeIndentM3 = (StoreMmfDepartmentM) masterAndDetailMap
						.get("storeMmfDepartmentM");
			}
			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreMmfDepartmentT>) (masterAndDetailMap
						.get("storeIndentTListForUpdate"));
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreMmfDepartmentT>) (masterAndDetailMap
						.get("storeIndentTListForAdd"));
			}
			if (masterAndDetailMap.get("mmfDepartmentId") != null) {
				mmfDepartmentId = Integer.parseInt(""
						+ masterAndDetailMap.get("mmfDepartmentId"));
			}

			if (masterAndDetailMap.get("lastChgBy") != null) {
				lastChgBy = ("" + masterAndDetailMap.get("lastChgBy"));
			}
			if (masterAndDetailMap.get("lastChgTime") != null) {
				lastChgTime = ("" + masterAndDetailMap.get("lastChgTime"));
			}
			if (masterAndDetailMap.get("pageNo") != null) {
				pageNo = Integer.parseInt(("" + masterAndDetailMap
						.get("pageNo")));
			}
			if (masterAndDetailMap.get("lastChgDate") != null) {
				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL = formatterOut.format(formatterIn.parse(""
						+ masterAndDetailMap.get("lastChgDate")));
				lastChgDate = java.sql.Date.valueOf(date4MySQL);
			}
			if (pageNo == 1) {
				hbt.update(storeIndentM3);
			}

			if (masterAndDetailMap.get("storeIndentTListForUpdate") != null) {
				storeIndentTListForUpdate = (List<StoreMmfDepartmentT>) masterAndDetailMap
						.get("storeIndentTListForUpdate");
				if (storeIndentTListForUpdate.size() > 0) {
					for (int i = 0; i < storeIndentTListForUpdate.size(); i++) {
						StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
						storeMmfDepartmentT = (StoreMmfDepartmentT) storeIndentTListForUpdate
								.get(i);

						StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
						storeMmfDepartmentM.setId(mmfDepartmentId);
						storeMmfDepartmentT
								.setStoreMmfDepartmentM(storeMmfDepartmentM);

						hbt.update(storeMmfDepartmentT);
					}
				}
				successfullyAdded = true;
			}
			if (masterAndDetailMap.get("storeIndentTListForAdd") != null) {
				storeIndentTListForAdd = (List<StoreMmfDepartmentT>) masterAndDetailMap
						.get("storeIndentTListForAdd");
				if (storeIndentTListForAdd.size() > 0) {
					for (int i = 0; i < storeIndentTListForAdd.size(); i++) {
						StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
						storeMmfDepartmentT = (StoreMmfDepartmentT) storeIndentTListForAdd
								.get(i);

						StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
						storeMmfDepartmentM.setId(mmfDepartmentId);
						storeMmfDepartmentT
								.setStoreMmfDepartmentM(storeMmfDepartmentM);

						hbt.save(storeMmfDepartmentT);
					}
				}
				successfullyAdded = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return successfullyAdded;

	}

	// --------------------------------------------
	// Ack------------------------------------
	public Map<String, Object> showAckJsp(int deptId, int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreIssueM> searchStoreIssueMList = new ArrayList<StoreIssueM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		try {
			storeIssueMList = getHibernateTemplate()
					.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
							+ null
							+ " and mi.AckDate = "
							+ null
							+ " and mi.IssueM.Hospital = "
							+ hospitalId
							+ " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')"
							+ " and  (mi.Issued = 'y' or mi.Issued = 'Y') and mi.IssueM.ToStore.Id = "
							+ deptId + "order by mi.IssueM.IssueDate desc");
			
			
			departmentList = getHibernateTemplate()
					.find("select distinct mi.Department from jkt.hms.masters.business.StoreIssueM as mi where mi.ToStore.Id='"
							+ deptId
							+ "' and mi.Hospital= '"
							+ hospitalId
							+ "' ");
			
			employeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Department.Id",deptId)).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			for (StoreIssueM storeIssueM : storeIssueMList) {
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")) {
					int storeIssueMId = storeIssueM.getId();
					/*
					 * storeIssueTList = getHibernateTemplate() .find(
					 * "from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
					 * + storeIssueMId + " and mi.ReceivedBy = " + null +
					 * " and mi.AckDate = " + null +
					 * " and  mi.Issued = 'y' and mi.ItemOrder!='2'");
					 */

					// Ramdular 5/12/2010 ----------------
					storeIssueTList = getHibernateTemplate()
							.find("from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
									+ storeIssueMId
									+ " and mi.ReceivedBy = "
									+ null
									+ " and mi.IssueM.Hospital='"
									+ hospitalId
									+ "' and mi.AckDate = "
									+ null
									+ " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')"
									+ " and  mi.Issued = 'y' or mi.Issued = 'Y'");

					if (storeIssueTList != null && storeIssueTList.size() > 0) {
						storeIssueMList1.add(storeIssueM);
					}

				} else {
					storeIssueMList1.add(storeIssueM);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		approvedByEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee as me  where Department.Id ="
						+ deptId + "and me.Hospital =" + hospitalId);
		// departmentList = getHibernateTemplate().find("from
		// jkt.hms.masters.business.MasDepartment as mi where mi.Id='"+deptId+"'
		// ");
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		// map.put("searchStoreIssueMList", searchStoreIssueMList);

		return map;
	}

	public Map<String, Object> getAcknowledgementDetails(int deptId,
			int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreIssueM> searchStoreIssueMList = new ArrayList<StoreIssueM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		Session session = (Session) getSession();
		try {

			storeIssueMList = getHibernateTemplate()
					.find(" from jkt.hms.masters.business.StoreIssueM  as mi   where"
							/* + "  mi.Hospital = "+hospitalId+ " and " */
							+ "( mi.Status = 'O' or mi.Status = 'o') and mi.ToStore.Id = "
							+ deptId);

			departmentList = getHibernateTemplate()
					.find("select distinct mi.Department from jkt.hms.masters.business.StoreIssueM as mi where mi.ToStore.Id='"
							+ deptId
							+ "' and mi.Hospital= '"
							+ hospitalId
							+ "' ");

			/*
			 * for (StoreIssueM storeIssueM : storeIssueMList) { if
			 * (storeIssueM.getIssueType().equalsIgnoreCase("i")) { int
			 * storeIssueMId = storeIssueM.getId();
			 * 
			 * storeIssueTList = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
			 * + storeIssueMId + " and mi.ReceivedBy = " + null +
			 * " and mi.AckDate = " + null +
			 * " and  mi.Issued = 'y' and mi.ItemOrder!='2'");
			 * 
			 * 
			 * // Ramdular 5/12/2010 ---------------- storeIssueTList =
			 * getHibernateTemplate().find(
			 * "from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
			 * + storeIssueMId + " and mi.ReceivedBy = " + null
			 * +" and mi.IssueM.Hospital='" +hospitalId +"' and mi.AckDate = " +
			 * null + " and  mi.Issued = 'y' or mi.Issued = 'Y'");
			 * 
			 * if (storeIssueTList != null && storeIssueTList.size() > 0) {
			 * storeIssueMList1.add(storeIssueM); }
			 * 
			 * } else { storeIssueMList1.add(storeIssueM); } }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */

		approvedByEmployeeList = session
				.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		// departmentList = getHibernateTemplate().find("from
		// jkt.hms.masters.business.MasDepartment as mi where mi.Id='"+deptId+"'
		// ");
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList);
		map.put("departmentList", departmentList);

		// map.put("searchStoreIssueMList", searchStoreIssueMList);

		return map;
	}

	public Map<String, Object> createGridIssueData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList1 = new ArrayList<StoreIssueM>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		int itemId = 0;
		String pvms = null;
		String nomenclature = null;
		String au = null;
		int brand = 0;
		String brandname = null;

		String batchNo = null;
		BigDecimal qtyRequest = new BigDecimal(0);
		BigDecimal qtyIssued = new BigDecimal(0);
		String expiry_date = null;
		int id = 0;
		int issueId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreIssueM> issueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();

		// int issueDeptId = box.getInt(ISSUE_DEPT);
		int issueNo = box.getInt(ISSUE_NO);
		String issue_No = box.get("issue_No");
		int hospitalId = box.getInt("hospitalId");
		int deptId = box.getInt(RequestConstants.DEPARTMENT_ID);
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("stores.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {

			issueMList = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("Id", issueNo))
					.add(Restrictions.eq("Status", "o")).list();
			approvedByEmployeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as me  where Department.Id ="
							+ deptId + "and me.Hospital =" + hospitalId);
			employeeList=session.createCriteria(MasEmployee.class).add(Restrictions.eq("Department.Id",deptId)).add(Restrictions.eq("Status", "y").ignoreCase()).list();

			storeIssueMList = getHibernateTemplate()
					.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
							+ null
							+ " and mi.AckDate = "
							+ null
							+ " and mi.IssueM.Hospital = "
							+ hospitalId
							+ " and  mi.Issued = 'y' and mi.IssueM.ToStore.Id = "
							+ deptId);
			departmentList = getHibernateTemplate()
					.find("select distinct mi.Department from jkt.hms.masters.business.StoreIssueM as mi where mi.ToStore.Id="
							+ deptId
							+ "and mi.Hospital="
							+ hospitalId
							+ " and mi.Status='o'");

			for (StoreIssueM storeIssueM : storeIssueMList) {
				if (storeIssueM.getIssueType().equalsIgnoreCase("i")
						&& storeIssueM.getStatus().equalsIgnoreCase("o")) {
					int storeIssueMId = storeIssueM.getId();

					storeIssueTList = getHibernateTemplate().find(
							"from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
									+ storeIssueMId + " and mi.ReceivedBy = "
									+ null + " and mi.IssueM.Hospital = '"
									+ hospitalId + "' and mi.AckDate = " + null
									+ " and  mi.Issued = 'y' ");
					if (storeIssueTList != null && storeIssueTList.size() > 0) {
						storeIssueMList1.add(storeIssueM);
					}

				}
			}

			if (issueMList != null && issueMList.size() > 0) {
				StoreIssueM mObj = (StoreIssueM) issueMList.get(0);
				int storeIssueMId = mObj.getId();

				/*
				 * Case 1: Loan Out, issue_type = "l" Get All Issued but not
				 * acknowledged Items from store_issue_t
				 * 
				 * Only do the Second Case, Case 1 will be adjusted after
				 * issuing. Case 2: Issue, issue_type = "i" Get only records of
				 * item_order 3 issued but not acknowledged from store_issue_t.
				 */

				/*
				 * if (mObj.getIssueType().equalsIgnoreCase("l")) {
				 * storeIssueTList =
				 * session.createCriteria(StoreIssueT.class).add
				 * (Restrictions.eq("IssueM.Id", storeIssueMId))
				 * .add(Restrictions.eq("Issued", "y"))
				 * .add(Restrictions.isNull("AckDate"))
				 * .add(Restrictions.isNull("ReceivedBy")).list(); }
				 */
				if (mObj.getIssueType().equalsIgnoreCase("i")) {
					storeIssueTList = session.createCriteria(StoreIssueT.class)
							.add(Restrictions.eq("IssueM.Id", storeIssueMId))
							.add(Restrictions.eq("Issued", "y"))
							.createAlias("IssueM", "im")
							.add(Restrictions.eq("im.Hospital.Id", hospitalId))
							.add(Restrictions.isNull("AckDate"))
							.add(Restrictions.isNull("ReceivedBy")).list();
				}
			}

			if (storeIssueTList != null && storeIssueTList.size() > 0) {
				for (Iterator iterator = storeIssueTList.iterator(); iterator
						.hasNext();) {
					StoreIssueT tObj = (StoreIssueT) iterator.next();

					try {
						expiry_date = HMSUtil
								.convertDateToStringWithoutTime(tObj
										.getExpiryDate());
					} catch (Exception e) {
						expiry_date = null;
					}

					try {
						itemId = tObj.getItem().getId();
					} catch (Exception e) {
						itemId = 0;
					}
					try {
						issueId = tObj.getIssueM().getId();
					} catch (Exception e) {
						issueId = 0;
					}

					try {
						id = tObj.getId();
					} catch (Exception e) {
						id = 0;
					}
					try {
						pvms = tObj.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = tObj.getItem().getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						// brand = tObj.getBrand().getId();
					} catch (Exception e) {
						brand = 0;
					}
					try {
						// brandname = tObj.getBrand().getBrandName();
					} catch (Exception e) {
						brandname = "";
					}

					try {
						au = tObj.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						batchNo = tObj.getBatchNo();
					} catch (Exception e) {
						batchNo = "";
					}

					try {
						qtyRequest = tObj.getQtyRequest();
					} catch (Exception e) {
						qtyRequest = new BigDecimal(0);
					}
					try {
						qtyIssued = tObj.getQtyIssued();
					} catch (Exception e) {
						qtyIssued = new BigDecimal(0);
					}

					hData = new HashMap<String, Object>();
					hData.put("issueId", issueId);
					hData.put("itemId", itemId);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("brand", brand);
					hData.put("brandname", brandname);
					hData.put("au", au);
					hData.put("batchNo", batchNo);
					hData.put("qtyRequest", qtyRequest);
					hData.put("qtyIssued", qtyIssued);
					hData.put("expiry_date", expiry_date);
					vResult.add(hData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList1);
		map.put("departmentList", departmentList);
		map.put("issueMList", issueMList);
		map.put("issue_No", issue_No);
		map.put("storeIssueMId", issueNo);
		map.put("employeeList", employeeList);
		return map;
	}

	public Map<String, Object> doAddAckItems(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();
		Date ackDate = HMSUtil.dateFormatterDDMMYYYY(box.getString(ACK_DATE));
		int ackBy = box.getInt(ACK_BY);
		List<StoreItemBatchStock> storeItemBatchStocksListForMap = new ArrayList<StoreItemBatchStock>(); // added by amit das on 15-02-2017
		final Map<String,Object> stockMapForLeanServer=new HashMap<String,Object>(); // added by amit das on 15-02-2017
		int issueddeptId = box.getInt(ISSUE_DEPT);
		int issueMasterId = box.getInt("issueId");
		int hospitalId = 0;
		hospitalId = box.getInt("hospitalId");
		Transaction tx = null;
		boolean flag = false;
		String message = "";
		try {

			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			tx = session.beginTransaction();
			BigDecimal dispencingPrice = new BigDecimal(0);
			BigDecimal mrp = new BigDecimal(0);
			List storeIssueMList = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("Id", issueMasterId)).list();

			if (storeIssueMList != null && storeIssueMList.size() > 0) {
				StoreIssueM storeIssueM = (StoreIssueM) storeIssueMList.get(0);
				List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();

				if (storeIssueM.getIssueType().equalsIgnoreCase("i")) {
					storeIssueTList = session
							.createCriteria(StoreIssueT.class)
							.add(Restrictions.eq("IssueM.Id",
									storeIssueM.getId()))
							.add(Restrictions.eq("Issued", "y"))
							.createAlias("IssueM", "im")
							.add(Restrictions.eq("im.Hospital.Id", hospitalId))
							.add(Restrictions.isNull("AckDate"))
							.add(Restrictions.isNull("ReceivedBy")).list();
					// .add(Restrictions.eq("ItemOrder", "3")).list();
				}

			if(box.getString("flag").equalsIgnoreCase("a")){	
				for (StoreIssueT storeIssueT : storeIssueTList) {
					List<StoreItemBatchStock> storeItemBatchStockList = session
							.createQuery(
									"select sib  from StoreItemBatchStock as sib where sib.Item.Id ="
											+ storeIssueT.getItem().getId()
											+ " and sib.BatchNo='"
											+ storeIssueT.getBatchNo()
											+ "' and  sib.Hospital = '"
											+ hospitalId
											+ "'   and sib.Department.Id = "
											+ box.getInt("deptId") + " ")
							.list();
					// If alreay Item exists in Item Batch Stock, then update
					// the stock
					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) storeItemBatchStockList
								.get(0);
						int storeItemBatchStockId = storeItemBatchStock.getId();
						StoreItemBatchStock storeItemBatchStockObj = (StoreItemBatchStock) hbt
								.load(StoreItemBatchStock.class,
										storeItemBatchStockId);
						BigDecimal closingStock = (BigDecimal) storeItemBatchStock
								.getClosingStock();
						BigDecimal receivedQty = (BigDecimal) storeItemBatchStock
								.getReceivedQty();
						if (receivedQty == null) {
							receivedQty = new BigDecimal(0);
						}
						if (storeIssueT.getQtyIssued()
								.equals(new BigDecimal(0))) {
							closingStock = (BigDecimal) storeItemBatchStock
									.getClosingStock();
						} else {
							closingStock = closingStock.add(storeIssueT
									.getQtyIssued());
						}
						storeItemBatchStockObj.setClosingStock(closingStock);
						if (storeIssueT.getQtyIssued()
								.equals(new BigDecimal(0))) {
							receivedQty = (BigDecimal) storeItemBatchStock
									.getReceivedQty();
						} else {
							receivedQty = receivedQty.add(storeIssueT
									.getQtyIssued());
						}
						storeItemBatchStockObj.setReceivedQty(receivedQty);
						// storeItemBatchStockObj.setId(null);
						hbt.update(storeItemBatchStockObj);
						storeItemBatchStocksListForMap.add(storeItemBatchStockObj); // added by amit das on 15-02-2017
					} else // If item not found in item batch stock, add the
					// item with stock
					{
						List<StoreItemBatchStock> storeItemBatchStockList1 = session
								.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("Item.Id", storeIssueT
										.getItem().getId()))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Department.Id",
										issueddeptId))
								.add(Restrictions.eq("BatchNo",
										storeIssueT.getBatchNo())).list();
						StoreItemBatchStock storeItemBatchStock1 = (StoreItemBatchStock) storeItemBatchStockList1
								.get(0);
						StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setItem(new MasStoreItem(
								storeIssueT.getItem().getId()));
						String batch = null;
						storeItemBatchStock
								.setBatchNo(storeIssueT.getBatchNo());
						storeItemBatchStock.setMrp(storeItemBatchStock1
								.getMrp());
						storeItemBatchStock
								.setDispencingPrice(storeItemBatchStock1
										.getDispencingPrice());
						storeItemBatchStock.setDepartment(new MasDepartment(box
								.getInt("deptId")));
						storeItemBatchStock.setExpiryDate(storeIssueT
								.getExpiryDate());
						storeItemBatchStock.setOpeningBalanceDate(ackDate);
						storeItemBatchStock.setClosingStock(storeIssueT
								.getQtyIssued());
						storeItemBatchStock
								.setOpeningBalanceQty(new BigDecimal(0));
						storeItemBatchStock.setReceivedQty(storeIssueT
								.getQtyIssued());
						// storeItemBatchStock.setBrand(storeIssueT.getBrand());
						storeItemBatchStock.setCostPrice(storeIssueT
								.getCostPrice());
						MasHospital masHospital = new MasHospital();
						masHospital.setId(hospitalId);
						storeItemBatchStock.setHospital(masHospital);
						hbt.save(storeItemBatchStock);
						storeItemBatchStocksListForMap.add(storeItemBatchStock); // added by amit das on 15-02-2017
					}
					storeIssueT.setAckDate(ackDate);
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(ackBy);
					storeIssueT.setReceivedBy(masEmployee);
					hbt.update(storeIssueT);
				}
				storeIssueM.setStatus("p");
				if(box.getInt("receivedBy") != 0){
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(box.getInt("receivedBy"));
					storeIssueM.setReceivedBy(masEmployee);
				}
				hbt.update(storeIssueM);
				message = "Acknowledgement Approved successfully";
			}else{
				storeIssueM.setStatus("r");
				if(box.getInt("receivedBy") != 0){
					MasEmployee masEmployee = new MasEmployee();
					masEmployee.setId(box.getInt("receivedBy"));
					storeIssueM.setReceivedBy(masEmployee);
				}
				hbt.update(storeIssueM);
				message = "Acknowledgement Reject";
				
			}
				flag = true;
			}
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		stockMapForLeanServer.put("storeItemBatchStocksListForMap", storeItemBatchStocksListForMap); // added by amit das on 15-02-2017
		map.put("flag", flag);
		map.put("message", message);
		// added by amit das on 15-02-2017
		//#13- Tech Debt: Comment out the code those are related to Lean server
		/*final MasHospital  masHospital=(MasHospital)session.get(MasHospital.class, hospitalId); 
		new Thread(){
			public void run(){
				if(masHospital!=null && masHospital.getServerIp()!=null && masHospital.getServerPort()!=null){
					//patientMap.put("hospital", masHospital);
					//String patientRegMessage=savePatientDataForRegistrationToCentralServer(patientMap);
				} 
				if(masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){
					//patientMap.put("hospital", masHospital);
					List<StoreItemBatchStock> storeItemBatchStocks=(List<StoreItemBatchStock>)stockMapForLeanServer.get("storeItemBatchStocksListForMap");
					 Map<String,Object> stockMapForLean=new HashMap<String,Object>();
					for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStocks){
						stockMapForLean.put("stockDataList", storeItemBatchStock);
						//stockMapForLean.put("storeFyId", stockMapForLeanServer.get("storeFyId"));
						//stockMapForLean.put("issueNo", stockMapForLeanServer.get("issueNo"));
						stockMapForLean.put("hospital",masHospital);
						String patientRegMessage=saveStockToLeanServer(stockMapForLean,masHospital);
						if(!"success".equalsIgnoreCase(patientRegMessage)){
							stockMapForLean.put("status","N");
						 saveStockToLeanServer(stockMapForLean);
						}else{
							stockMapForLean.put("status","Y");
						 saveStockToLeanServer(stockMapForLean);
						}
					}
					
				}
			}
			
		}.start();*/
		// ended by amit das on 15-02-2017
		
		
		
		return map;
	}

	// ---------------------------------- Supply Order Entry
	// -----------------------------------

	@SuppressWarnings("unchecked")
	public Map<String, Object> searchSupplyOrderEntry(int indentId) {
		List<StoreIndentT> searchStoreIndentTList = new ArrayList<StoreIndentT>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		Map<String, Object> indentTFieldsMap = new HashMap<String, Object>();
		List<StoreSupplyOrderEntry> searchSupplyOrderList = new ArrayList<StoreSupplyOrderEntry>();
		try {
			if ((indentId != 0)) {
				searchStoreIndentTList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentT ");
				searchStoreIndentMList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreIndentM as md");
				supplierList = getHibernateTemplate()
						.find("from jkt.hms.masters.business.MasStoreSupplier as i order by i.SupplierName");
				searchSupplyOrderList = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreSupplyOrderEntry ");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		indentTFieldsMap.put("searchStoreIndentTList", searchStoreIndentTList);
		indentTFieldsMap.put("searchStoreIndentMList", searchStoreIndentMList);
		indentTFieldsMap.put("searchSupplyOrderList", searchSupplyOrderList);
		indentTFieldsMap.put("supplierList", supplierList);
		return indentTFieldsMap;
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> showSupplyOrderEntryJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> searchStoreIndentTList = new ArrayList<StoreIndentT>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<StoreSupplyOrderEntry> searchSupplyOrderList = new ArrayList<StoreSupplyOrderEntry>();
		try {
			searchStoreIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM as md");
			searchStoreIndentTList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentT as i ");
			supplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as i order by i.SupplierName");
			searchSupplyOrderList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreSupplyOrderEntry as i");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		map.put("searchStoreIndentTList", searchStoreIndentTList);
		map.put("searchSupplyOrderList", searchSupplyOrderList);
		map.put("supplierList", supplierList);
		return map;
	}

	public boolean addStoreSupplyOrderEntry(int indentId,
			List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist) {
		boolean successfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
		try {

			if (storeSupplyOrderEntrylist.size() > 0) {
				StoreIndentM storeIndentM = new StoreIndentM();
				storeIndentM.setId(indentId);
				for (int i = 0; i < storeSupplyOrderEntrylist.size(); i++) {
					StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();
					storeSupplyOrderEntryObj = (StoreSupplyOrderEntry) storeSupplyOrderEntrylist
							.get(i);
					storeSupplyOrderEntryObj.setIndent(storeIndentM);
					hbt.save(storeSupplyOrderEntryObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	public boolean updateSupplyOrderEnter(int indentId,
			List<StoreSupplyOrderEntry> storeSupplyOrderEntrylist) {
		boolean successfullyAdded = false;
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);
		try {

			if (storeSupplyOrderEntrylist.size() > 0) {
				StoreIndentM storeIndentM = new StoreIndentM();
				storeIndentM.setId(indentId);
				for (int i = 0; i < storeSupplyOrderEntrylist.size(); i++) {
					StoreSupplyOrderEntry storeSupplyOrderEntryObj = new StoreSupplyOrderEntry();
					storeSupplyOrderEntryObj = (StoreSupplyOrderEntry) storeSupplyOrderEntrylist
							.get(i);
					storeSupplyOrderEntryObj.setIndent(storeIndentM);
					hbt.update(storeSupplyOrderEntryObj);
				}

			}
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	/*
	 * public Map<String, Object> showSupplyOrderEntry() { Map<String,Object>
	 * map=new HashMap<String,Object>(); List<StoreIndentM> storeIssueMList= new
	 * ArrayList<StoreIndentM>(); List<StoreIndentT> storeIssueTList=new
	 * ArrayList<StoreIndentT>(); List<StoreIndentM> searchStoreIndentMList =
	 * new ArrayList<StoreIndentM>(); List<StoreIndentM> list= new
	 * ArrayList<StoreIndentM>(); session = (Session)getSession(); try {
	 * searchStoreIndentMList = getHibernateTemplate().find("from
	 * jkt.hms.masters.business.StoreIndentM as inp where inp.IndentType='p' or
	 * inp.IndentType='s'"); } catch (Exception e) { e.printStackTrace(); }
	 * map.put("searchStoreIndentMList", searchStoreIndentMList); return map; }
	 */

	public Map<String, Object> createGridSupplyOrderEntryData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		String pvms = null;
		String nomenclature = null;
		String au = null;
		BigDecimal qty_recd = null;
		String firstRecNo = "";
		Date supplyOrderDate = new Date();
		Date date_of_receipt = new Date();
		String batch_no = null;
		Date manuf_date = new Date();
		Date expiry_date = new Date();
		String crv_no_date = null;
		String enclosure_no = null;
		String secondRecNo = "";
		Date secondRecDate = new Date();
		String supplyOrderNo = "";
		BigDecimal rate = null;
		String supplier_address = null;
		int itemId = 0;
		int supplyOrderId = 0;
		int indentId = 0;
		int indentTId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		int indentNo = box.getInt(INDENT_NO);
		/*
		 * Properties properties = new Properties(); URL resourcePath =
		 * Thread.currentThread
		 * ().getContextClassLoader().getResource("stores.properties"); try {
		 * properties.load(resourcePath.openStream()); } catch (Exception e) {
		 * e.printStackTrace(); }
		 */
		try {
			searchStoreIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as inp where inp.IndentType='"
							+ box.getString("indent_type")
							+ "' and inp.Department.Id=" + box.getInt("deptId"));
			storeSupplyOrderEntryList = session
					.createCriteria(StoreSupplyOrderEntry.class)
					.add(Restrictions.eq("Indent.Id", indentNo)).list();
			if (storeSupplyOrderEntryList != null
					&& storeSupplyOrderEntryList.size() > 0) {
				for (Iterator iterator = storeSupplyOrderEntryList.iterator(); iterator
						.hasNext();) {
					StoreSupplyOrderEntry tObj = (StoreSupplyOrderEntry) iterator
							.next();

					try {
						supplyOrderId = tObj.getId();
					} catch (Exception e) {
						supplyOrderId = 0;
					}

					try {
						pvms = tObj.getItem().getPvmsNo();
					} catch (Exception e) {
						pvms = "";
					}

					try {
						nomenclature = tObj.getItem().getNomenclature();
					} catch (Exception e) {
						nomenclature = "";
					}

					try {
						supplier_address = tObj.getSupplier().getSupplierName()
								+ " " + tObj.getSupplier().getAddress1() + " "
								+ tObj.getSupplier().getAddress2();
					} catch (Exception e) {
						supplier_address = "";
					}

					try {
						au = tObj.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} catch (Exception e) {
						au = "";
					}

					try {
						supplyOrderNo = tObj.getSupplyOrderNo();
					} catch (Exception e) {
						supplyOrderNo = "";
					}

					try {
						supplyOrderDate = tObj.getSupplyOrderDate();
					} catch (Exception e) {
						supplyOrderDate = null;
					}

					try {
						rate = tObj.getRate();
					} catch (Exception e) {
						rate = new BigDecimal(0);
					}

					try {
						qty_recd = tObj.getQty();
					} catch (Exception e) {
						qty_recd = new BigDecimal(0);
					}
					try {
						itemId = tObj.getItem().getId();
					} catch (Exception e) {
						itemId = 0;
					}

					try {
						indentId = tObj.getIndent().getId();
					} catch (Exception e) {
						indentId = 0;
					}

					try {
						date_of_receipt = tObj.getDateOfReceipt();
					} catch (Exception e) {
						date_of_receipt = null;
					}

					try {
						batch_no = tObj.getBatchNo();
					} catch (Exception e) {
						batch_no = "";
					}

					try {
						manuf_date = tObj.getManufacturingDate();
					} catch (Exception e) {
						manuf_date = null;
					}

					try {
						expiry_date = tObj.getExpiryDate();
					} catch (Exception e) {
						expiry_date = null;
					}

					try {
						if (tObj.getCrvNo() != null) {
							crv_no_date = tObj.getCrvNo() + " dated "
									+ tObj.getCrvDate();
						} else {
							crv_no_date = "";
						}
					} catch (Exception e) {
						crv_no_date = "";
					}

					try {
						enclosure_no = tObj.getEnclosureNo();
					} catch (Exception e) {
						enclosure_no = "";
					}

					hData = new HashMap<String, Object>();
					hData.put("supplyOrderId", supplyOrderId);
					hData.put("date_of_receipt", date_of_receipt == null ? ""
							: date_of_receipt);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au == null ? "" : "");
					hData.put("qty_recd", qty_recd == null ? "0" : qty_recd);
					hData.put("batch_no", batch_no == null ? "" : batch_no);
					hData.put("manuf_date", manuf_date == null ? ""
							: manuf_date);
					hData.put("expiry_date", expiry_date == null ? ""
							: expiry_date);
					hData.put("supplyOrderNo", supplyOrderNo == null ? ""
							: supplyOrderNo);
					hData.put("supplyOrderDate", supplyOrderDate == null ? ""
							: supplyOrderDate);
					hData.put("supplier_address", supplier_address);
					hData.put("crv_no_date", crv_no_date);
					hData.put("enclosure_no", enclosure_no == null ? ""
							: enclosure_no);
					/*
					 * String converted_date =
					 * firstRecDate.toString().substring(8) + "/"
					 * +firstRecDate.toString().substring(5, 7) + "/" +
					 * firstRecDate.toString().substring(0, 4); converted_date);
					 */
					vResult.add(hData);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}
		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		map.put("pagedArray", pagedArray);
		return map;
	}

	public Map<String, Object> getItemDetailsForSupplyOrderEntry(Box box) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		int indentId = box.getInt(INDENT_NO);
		// Date
		// firstRecDate=HMSUtil.dateFormatterDDMMYYYY(box.getString("firstRecDate"));
		// Date
		// secondRecDate=HMSUtil.dateFormatterDDMMYYYY(box.getString("secondRecDate"));
		Vector mmf = box.getVector("mmf");
		String lastChgBy = box.get(CHANGED_BY);
		String lastChgTime = box.get(CHANGED_TIME);
		Date lastChgDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString(CHANGED_DATE));
		Date firstRecDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString("firstRecDate"));
		Vector supplyOrderNo = box.getVector("supplyOrderNo");
		Vector items = box.getVector("itemId");
		Vector rate = box.getVector("rate");
		Vector indentTId = box.getVector("indentTId");
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
		StoreSupplyOrderEntry storeSupplyOrderEntry = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			searchStoreIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM");
			for (int i = 0; i < items.size(); i++) {
				storeSupplyOrderEntry = new StoreSupplyOrderEntry();
				StoreIndentM SMObj = new StoreIndentM();
				SMObj.setId(indentId);
				storeSupplyOrderEntry.setIndent(SMObj);

				storeSupplyOrderEntry.setSupplyOrderDate(firstRecDate);

				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(items.get(i).toString()));
				storeSupplyOrderEntry.setItem(masStoreItem);

				storeSupplyOrderEntry.setSupplyOrderNo(supplyOrderNo.get(i)
						.toString());

				storeSupplyOrderEntry.setRate(new BigDecimal(rate.get(i)
						.toString()));

				storeSupplyOrderEntry.setQty(new BigDecimal(mmf.get(i)
						.toString()));

				storeSupplyOrderEntry.setLastChgBy(lastChgBy);

				storeSupplyOrderEntry.setLastChgDate(lastChgDate);

				storeSupplyOrderEntry.setLastChgTime(lastChgTime);

				storeSupplyOrderEntry.setIndentType("y");
				hbt.save(storeSupplyOrderEntry);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	public Map<String, Object> getItemDetailsForUpdateSupplyOrderEntry(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();

		String lastChgBy = box.get(CHANGED_BY);
		String lastChgTime = box.get(CHANGED_TIME);
		Date lastChgDate = HMSUtil.convertStringTypeDateToDateType(box
				.getString(CHANGED_DATE));

		int indentId = box.getInt(INDENT_NO);
		Date firstRecDate = HMSUtil.dateFormatterDDMMYYYY(box
				.getString("firstRecDate"));
		Vector mmf = box.getVector("mmf");
		Vector supplyOrderNo = box.getVector("supplyOrderNo");
		Vector items = box.getVector("itemId");
		Vector rate = box.getVector("rate");
		Vector indentTId = box.getVector("indentTId");
		int supplyOrderId = box.getInt("supplyOrderId");

		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		StoreSupplyOrderEntry storeSupplyOrderEntry = null;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			searchStoreIndentMList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreIndentM");
			storeSupplyOrderEntry = (StoreSupplyOrderEntry) hbt.load(
					StoreSupplyOrderEntry.class, supplyOrderId);
			for (int i = 0; i < items.size(); i++) {

				// storeSupplyOrderEntry = new StoreSupplyOrderEntry();
				StoreIndentM SMObj = new StoreIndentM();
				SMObj.setId(indentId);
				storeSupplyOrderEntry.setIndent(SMObj);

				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(items.get(i).toString()));
				storeSupplyOrderEntry.setItem(masStoreItem);

				storeSupplyOrderEntry.setSupplyOrderDate(firstRecDate);

				storeSupplyOrderEntry.setSupplyOrderNo(supplyOrderNo.get(i)
						.toString());

				storeSupplyOrderEntry.setRate(new BigDecimal(rate.get(i)
						.toString()));

				storeSupplyOrderEntry.setQty(new BigDecimal(mmf.get(i)
						.toString()));

				storeSupplyOrderEntry.setLastChgBy(lastChgBy);

				storeSupplyOrderEntry.setLastChgDate(lastChgDate);

				storeSupplyOrderEntry.setLastChgTime(lastChgTime);

				storeSupplyOrderEntry.setId(supplyOrderId);

				hbt.update(storeSupplyOrderEntry);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	public Map<String, Object> getConnectionForReport() {
		Map<String, Object> connectionMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		Connection con = session.connection();
		connectionMap.put("con", con);
		return connectionMap;
	}

	// ------------ Print LPO-----------------

	public Map getLPOList(int grnId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreGrnM> crvNumberList = new ArrayList<StoreGrnM>();
		Connection con = session.connection();
		try {
			map.put("conn", con);
			crvNumberList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.StoreGrnM as md where md.Id = '"
							+ grnId + "'");
			for (StoreGrnM storeGrnM : crvNumberList) {
				map.put("PO_No", "" + storeGrnM.getPo().getPoNumber());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public Map<String, Object> showMMFDepartmentWiseSplitup(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		try {
			storeMmfDepartmentTList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreMmfDepartmentT as inp where inp.StoreMmfDepartmentM.MmfForTheYear= "
							+ box.getInt("year")
							+ " and inp.Item.PvmsNo = '"
							+ box.getString("pvmsno") + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeMmfDepartmentTList", storeMmfDepartmentTList);
		return map;
	}

	public Map<String, Object> getIndentNosForSupplyOrderEntry(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIndentM> searchStoreIndentMList = new ArrayList<StoreIndentM>();
		Session session = (Session) getSession();
		try {
			searchStoreIndentMList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIndentM as inp where inp.IndentType='"
							+ box.getString("indent_type")
							+ "' and inp.Department.Id=" + box.getInt("deptId"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchStoreIndentMList", searchStoreIndentMList);
		return map;
	}

	public Map<String, Object> getItemsForSupplyOrderEntryJsp(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector supplyOrderEntries = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		String pvms = null;
		String nomenclature = null;
		String au = null;
		int indent_t_id = 0;
		int item_id = 0;

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreIndentT> storeIndentTList = new ArrayList<StoreIndentT>();
			List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
			storeIndentTList = hbt
					.find("from jkt.hms.masters.business.StoreIndentT as inp where inp.Indent.Id="
							+ box.getInt("indent_id"));
			supplierList = hbt
					.find("from jkt.hms.masters.business.MasStoreSupplier as m order by m.SupplierName");
			storeSupplyOrderEntryList = hbt
					.find("from jkt.hms.masters.business.StoreSupplyOrderEntry as inp where inp.Indent.Id= "
							+ box.getInt("indent_id"));

			for (Iterator iterator = storeSupplyOrderEntryList.iterator(); iterator
					.hasNext();) {
				StoreSupplyOrderEntry storeSupplyOrderEntry = (StoreSupplyOrderEntry) iterator
						.next();
				supplyOrderEntries.add(storeSupplyOrderEntry.getItem().getId());
			}

			for (Iterator iterator = storeIndentTList.iterator(); iterator
					.hasNext();) {
				StoreIndentT storeIndentT = (StoreIndentT) iterator.next();

				try {
					indent_t_id = storeIndentT.getId();
				} catch (Exception e) {
					indent_t_id = 0;
				}

				try {
					pvms = storeIndentT.getItem().getPvmsNo();
				} catch (Exception e) {
					pvms = "";
				}

				try {
					item_id = storeIndentT.getItem().getId();
				} catch (Exception e) {
					item_id = 0;
				}

				try {
					nomenclature = storeIndentT.getItem().getNomenclature();
				} catch (Exception e) {
					nomenclature = "";
				}

				try {
					au = storeIndentT.getItem().getItemConversion()
							.getPurchaseUnit().getUnitName();
				} catch (Exception e) {
					au = "";
				}

				if (!supplyOrderEntries.contains(item_id)) {
					hData = new HashMap<String, Object>();
					hData.put("indent_t_id", indent_t_id);
					hData.put("pvms", pvms);
					hData.put("nomenclature", nomenclature);
					hData.put("au", au);
					hData.put("item_id", item_id);
					vResult.add(hData);
				}
			}

			if (vResult.size() > 0) {
				testPageData = new HashMap[vResult.size()];
				vResult.copyInto(testPageData);
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("supplierList", supplierList);
		return map;
	}

	public Map<String, Object> doAddSupplyOrderEntryItems(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreSupplyOrderEntry> storeSupplyOrderEntryList = new ArrayList<StoreSupplyOrderEntry>();
		StoreSupplyOrderEntry storeSupplyOrderEntry = null;
		Vector items = box.getVector("item_id");
		Vector indent_t = box.getVector("indent_t_id");
		Vector qty_recd = box.getVector("qty_recd");
		Vector supplier = box.getVector("supplier");
		Vector supply_order_no = box.getVector("rc_no");
		Vector supply_order_date = box.getVector("rc_date");
		Vector date_of_receipt = box.getVector("date_of_receipt");
		Vector batch_no = box.getVector("batch_no");
		Vector manuf_date = box.getVector("manuf_date");
		Vector expiry_date = box.getVector("expiry_date");
		Vector enclosure_no = box.getVector("enclosure_no");
		Vector items_to_be_added = box.getVector(ITEMS_TO_BE_ADDED);

		String indent_type = box.get("indent_type");
		int indent_id = box.getInt("indent_id");

		int sr_no = 0;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			storeSupplyOrderEntryList = hbt
					.find("from jkt.hms.masters.business.StoreSupplyOrderEntry as inp where inp.Indent.Id="
							+ box.getInt("indent_id")
							+ " order by inp.SerialNo desc");

			if (storeSupplyOrderEntryList != null
					&& storeSupplyOrderEntryList.size() > 0) {
				sr_no = storeSupplyOrderEntryList.get(0).getSerialNo();
			}

			for (int i = 0; i < items.size(); i++) {
				if (items_to_be_added.contains(items.get(i))) {
					storeSupplyOrderEntry = new StoreSupplyOrderEntry();
					storeSupplyOrderEntry
							.setIndent(new StoreIndentM(indent_id));
					storeSupplyOrderEntry.setSerialNo(++sr_no);
					storeSupplyOrderEntry.setItem(new MasStoreItem(Integer
							.parseInt(items.get(i).toString())));
					try {
						storeSupplyOrderEntry.setQty(new BigDecimal(qty_recd
								.get(i).toString()));
					} catch (Exception e) {
						storeSupplyOrderEntry.setQty(new BigDecimal(0));
					}
					storeSupplyOrderEntry.setDepartment(new MasDepartment(box
							.getInt("deptId")));

					try {
						storeSupplyOrderEntry.setSupplier(new MasStoreSupplier(
								Integer.parseInt(supplier.get(i).toString())));
					} catch (Exception e) {
						storeSupplyOrderEntry.setSupplier(null);
					}

					storeSupplyOrderEntry.setSupplyOrderNo(supply_order_no.get(
							i).toString());
					storeSupplyOrderEntry.setSupplyOrderDate(HMSUtil
							.convertStringTypeDateToDateType(supply_order_date
									.get(i).toString()));
					storeSupplyOrderEntry.setIndentType(indent_type);
					storeSupplyOrderEntry.setDateOfReceipt(HMSUtil
							.convertStringTypeDateToDateType(date_of_receipt
									.get(i).toString()));
					storeSupplyOrderEntry
							.setBatchNo(batch_no.get(i).toString());
					storeSupplyOrderEntry.setManufacturingDate(HMSUtil
							.convertStringTypeDateToDateType(manuf_date.get(i)
									.toString()));
					storeSupplyOrderEntry.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expiry_date.get(i)
									.toString()));
					storeSupplyOrderEntry.setEnclosureNo(enclosure_no.get(i)
							.toString());
					hbt.save(storeSupplyOrderEntry);
				}
			}

			map.put("total_records", items.size());
			map.put("added_records", items_to_be_added.size());

			if (items.size() == items_to_be_added.size()) {
				if (box.getInt("currPage") > 1) {
					box.put("currPage", box.getInt("currPage") - 1);
				}
			}

			map = getItemsForSupplyOrderEntryJsp(box);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By K.R.
	// Othivadivel------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------Start of Reports Functions Written
	// By Mansi------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	public String getHospitalName(int hospitalId) {
		Session session = (Session) getSession();
		String hospitalName = "";
		List<MasHospital> list = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Id", hospitalId)).list();

		if (list.size() > 0) {
			MasHospital obj = (MasHospital) list.get(0);
			hospitalName = obj.getHospitalName();
			//+ "  " + obj.getAddress();
		}
		return hospitalName;
	}

	public Map showItemCatalogueJsp(int departmentId) {
		Map map = new HashMap();

		List<MasItemCategory> subSectionList = new ArrayList<MasItemCategory>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasStoreGroup> itemGroupList = new ArrayList<MasStoreGroup>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		Session session = getSession();

		itemGroupList = session.createCriteria(MasStoreGroup.class)
				.createAlias("Department", "d")
				.add(Restrictions.eq("d.Id", departmentId))
				.add(Restrictions.eq("Status", "y")).list();
		manufacturerList = session.createCriteria(MasManufacturer.class)
				.add(Restrictions.eq("Status", "y")).list();
		subSectionList = (List<MasItemCategory>) getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasItemCategory ");
		sectionList = (List<MasStoreSection>) getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasStoreSection ");
		map.put("itemGroupList", itemGroupList);
		map.put("manufacturerList", manufacturerList);

		map.put("subSectionList", subSectionList);
		map.put("sectionList", sectionList);
		return map;
	}

	public Map<String, Object> showVendorReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchMasStoreSupplierList = new ArrayList<MasStoreSupplier>();
		Session session = (Session) getSession();
		try {
			searchMasStoreSupplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as m order by m.SupplierName");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSupplierList", searchMasStoreSupplierList);
		return map;
	}

	public Map<String, Object> showBrandReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> searchMasStoreBrandList = new ArrayList<MasStoreBrand>();
		Session session = (Session) getSession();
		try {
			searchMasStoreBrandList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreBrand");
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreBrandList", searchMasStoreBrandList);
		return map;
	}

	public Map<String, Object> showDrugListBodySystemWiseReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> searchMasStoreSectionList = new ArrayList<MasStoreSection>();
		Session session = (Session) getSession();
		try {
			searchMasStoreSectionList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreSection");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSectionList", searchMasStoreSectionList);
		return map;

	}

	public Map<String, Object> showVendorTurnoverEnquiryReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchMasStoreSupplierList = new ArrayList<MasStoreSupplier>();
		Session session = (Session) getSession();
		try {
			searchMasStoreSupplierList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasStoreSupplier as m order by m.SupplierName");

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSupplierList", searchMasStoreSupplierList);
		return map;
	}

	public Map<String, Object> showExternalIssueReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasUnit> searchMasUnitList = new ArrayList<MasUnit>();
		Session session = (Session) getSession();
		try {
			searchMasUnitList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasUnit");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("searchMasUnitList", searchMasUnitList);
		return map;
	}

	public Map<String, Object> showDMConsumDrugWiseReportJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasUnit> searchMasStoreItemGenericList = new ArrayList<MasUnit>();
		Session session = (Session) getSession();
		try {
			searchMasStoreItemGenericList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasStoreItemGeneric");

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("searchMasStoreItemGenericList", searchMasStoreItemGenericList);
		return map;
	}

	// -----------------------------------------------------------------------------------------------------------------
	// -------------------------------------End of Functions Written By
	// Mansi-------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------

	/**
	 * added by Priyanka on 13-May-2008
	 */
	public Map<String, Object> getDBConnection() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Connection conn = session.connection();
		map.put("conn", conn);
		return map;
	}

	public Map<String, Object> submitGrn(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int deptId = 0;
		int hospitalId = 0;
		int supplierOrUnitId = 0;
		int indentOrPoId = 0;
		int employeeId = 0;

		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date grnDate = null;
		java.sql.Date invoiceDate = null;
		java.sql.Date date_received_surplus = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String howReceived = "";
		String rrNo = "";
		String modeOfConveyance = "";
		String invoiceNo = "";
		String date4MySQL = "";
		String grnNo = "";
		String max = "";
		String no = "";
		String userName = "";
		String sos = "";
		String supplyOrderNo = "";
		String remarks = "";

		BigDecimal invoiceAmount = null;
		BigDecimal freightDuty = null;
		BigDecimal exciseDuty = null;
		BigDecimal octroi = null;
		BigDecimal insuranceCharge = null;
		BigDecimal otherCharges = null;
		BigDecimal customDuty = null;
		BigDecimal grnValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;
		BigDecimal roundOffValue = null;
		BigDecimal actualGrnValue = null;
		BigDecimal mrp = null;
		BigDecimal dispencingPrice = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");

		sos = box.get(SOURCE_OF_SUPPLY);
		supplierOrUnitId = box.getInt("vendorId");

		/*if (sos.equalsIgnoreCase("w") || sos.equalsIgnoreCase("i")
				|| sos.equalsIgnoreCase("x")) {
			indentOrPoId = 0;
		} else {
			indentOrPoId = box.getInt(INDENT_ID);
		}*/

		grnNo = box.getString(GRN_NO);

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(GRN_DATE)));
			grnDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			grnDate = null;
		}

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(RECEIVED_DATE)));
			date_received_surplus = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			date_received_surplus = null;
		}

		howReceived = box.getString(HOW_RECEIVED);
		rrNo = box.getString(RR_NO);
		modeOfConveyance = box.getString(MODE_OF_CONVEYANCE);

		employeeId = box.getInt("employeeId");
		invoiceNo = box.getString(INVOICE_NO);

		try {
			date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(INVOICE_DATE)));
			invoiceDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			invoiceDate = null;
		}

		try {
			invoiceAmount = new BigDecimal(box.getString(INVOICE_AMOUNT));
		} catch (Exception e) {
			invoiceAmount = new BigDecimal(0);
		}

		try {
			freightDuty = new BigDecimal(box.getString(FREIGHT_DUTY));
		} catch (Exception e) {
			freightDuty = new BigDecimal(0);
		}

		try {
			exciseDuty = new BigDecimal(box.getString(EXCISE_DUTY));
		} catch (Exception e) {
			exciseDuty = new BigDecimal(0);
		}

		try {
			octroi = new BigDecimal(box.getString(OCTROI));
		} catch (Exception e) {
			octroi = new BigDecimal(0);
		}

		try {
			insuranceCharge = new BigDecimal(box.getString(INSURANCE_CHARGES));
		} catch (Exception e) {
			insuranceCharge = new BigDecimal(0);
		}

		try {
			customDuty = new BigDecimal(box.getString(CUSTOM_DUTY));
		} catch (Exception e) {
			customDuty = new BigDecimal(0);
		}

		try {
			otherCharges = new BigDecimal(box.getString(OTHER_CHARGES));
		} catch (Exception e) {
			otherCharges = new BigDecimal(0);
		}

		try {
			grnValue = new BigDecimal(box.getString("grnValue"));
		} catch (Exception e) {
			grnValue = new BigDecimal(0);
		}

		try {
			actualGrnValue = new BigDecimal(box.getString("actualGrnValue"));
		} catch (Exception e) {
			actualGrnValue = new BigDecimal(0);
		}

		try {
			roundOffValue = new BigDecimal(box.getString("roundOfValue"));
		} catch (Exception e) {
			roundOffValue = new BigDecimal(0);
		}

		try {
			vat = new BigDecimal(box.getString("vatTax"));
		} catch (Exception e) {
			vat = new BigDecimal(0);
		}

		try {
			discount = new BigDecimal(box.getString("totDiscount"));
		} catch (Exception e) {
			discount = new BigDecimal(0);
		}

		supplyOrderNo = box.getString(SUPPLY_ORDER_NO);
		remarks = box.getString(REMARKS);

		// Create StoreGrnM object and Set the Values

		StoreGrnM storeGrnM = new StoreGrnM();
		storeGrnM.setReceiveType(sos);
		storeGrnM.setAtSoNo(supplyOrderNo);
		storeGrnM.setDateReceivedSurplus(date_received_surplus);
		storeGrnM.setHowReceived(howReceived);
		storeGrnM.setModeOfConveyance(modeOfConveyance);
		storeGrnM.setRemarks(remarks);
		storeGrnM.setRrNo(rrNo);
		storeGrnM.setRoundOffValue(roundOffValue);

		try {
			storeGrnM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeGrnM.setDepartment(null);
		}

		try {
			storeGrnM.setEmployee(new MasEmployee(employeeId));
		} catch (Exception e) {
			storeGrnM.setEmployee(null);
		}

		try {
			storeGrnM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeGrnM.setHospital(null);
		}
		
		if (sos.equalsIgnoreCase("Indent From Institute")) {
			
			if (box.getInt("indentId") != 0) {
				storeGrnM.setIndent(new StoreInternalIndentM(box.getInt("indentId")));
			} else {
				storeGrnM.setIndent(null);
			}
		}  else if (sos.equalsIgnoreCase("Local Purchase")) {
			if (supplierOrUnitId != 0) {
				storeGrnM.setSupplier(new MasStoreSupplier(supplierOrUnitId));
			} else {
				storeGrnM.setSupplier(null);
			}

			if (box.getInt("poId") != 0) {
				storeGrnM.setPo(new StorePoHeader(box.getInt("poId")));
			} else {
				storeGrnM.setPo(null);
			}
		} 
		

		Session session = (Session) getSession();
		Transaction tx = null;
		storeGrnM.setCustomDuty(customDuty);
		storeGrnM.setExciseDuty(exciseDuty);
		storeGrnM.setFreightDuty(freightDuty);
		storeGrnM.setInsuranceCharge(insuranceCharge);
		storeGrnM.setOctroi(octroi);
		storeGrnM.setOtherCharges(otherCharges);

		storeGrnM.setGrnValue(actualGrnValue);
		storeGrnM.setVat(vat);
		storeGrnM.setDiscount(discount);
		storeGrnM.setGrnAmount(grnValue);

		storeGrnM.setGrnNo(grnNo);
		storeGrnM.setGrnDate(grnDate);

		storeGrnM.setInvoiceNo(invoiceNo);
		storeGrnM.setInvoiceDate(invoiceDate);
		storeGrnM.setInvoiceAmount(invoiceAmount);
		if(box.getString("challanNo") != null){
			storeGrnM.setChallanNo(box.getString("challanNo"));
		}

		storeGrnM.setStatus("o");
		Users users = new Users();
		users.setId(box.getInt("userId"));
		storeGrnM.setLastChgBy(users);
		storeGrnM.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(date));
		storeGrnM.setLastChgTime(time);

		// Create StoreGrnTList Contains StoreGrnT Objects and Set the
		// Corresponding Values
		List<StoreGrnT> storeGrnTList = new ArrayList<StoreGrnT>();
		StoreGrnT storeGrnT = null;

		Vector itemId = box.getVector(ITEM_ID);
		Vector brandId = box.getVector(BRAND_ID);
		Vector manufacturerId = box.getVector(MANUFACTURER_ID);
		Vector batchNo = box.getVector(BATCH_NO);
		Vector batchId = box.getVector("batchId");
		Vector lotNo = box.getVector(LOT_NO);
		Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
		Vector freeQty = box.getVector(FREE_QTY);
		Vector dispType = box.getVector("dispenseType");
		Vector mdqValue = box.getVector("mdq");
		Vector ratePerMdq = box.getVector("ratePerMdq");
		Vector convertedStock = box.getVector("convertedStock");
		Vector discountAmount = box.getVector("discountAmount");
		Vector taxAmount = box.getVector("taxAmount");
		Vector finalCostPrice = box.getVector(COST_PRICE);
		Vector amountValue = box.getVector(AMOUNT);
		Vector freeItem = box.getVector(FREE_ITEM);
		Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
		Vector expiryDate = box.getVector(EXPIRY_DATE);
		Vector flag = box.getVector("flag");
		Vector loaninId = box.getVector(DETAIL_ID);
		Vector dispencingPrice1 = box.getVector("dispencingPrice");
		Vector mrp1 = box.getVector("mrp");
		Vector barCodeNo = box.getVector("barCodeNo");
		Vector qtyOrdered=box.getVector("issuedQty");
		int slno = 1;
		tx = session.beginTransaction();
		/**
		 * laundry_group_id==53 means Laundry laundry_group_id=53
		 */

		int laundry_group_id = 0;
		laundry_group_id = Integer.parseInt(properties
				.getProperty("laundry_group_id"));

		for (int i = 0; i < itemId.size(); i++) {
			if (itemId.get(i).toString().equalsIgnoreCase("0")) {
				break;
			}

			storeGrnT = new StoreGrnT();
			storeGrnT.setSerialNo(slno++);
			storeGrnT.setItem(new MasStoreItem(new Integer(itemId.get(i)
					.toString())));
			// storeGrnT.setBrand(new MasStoreBrand(new
			// Integer(brandId.get(i).toString())));
			if (!manufacturerId.get(i).equals("")) {
				storeGrnT.setManufacturer(new MasManufacturer(new Integer(
						manufacturerId.get(i).toString())));
			}
			
			try {
				
				if (!batchId.get(i).equals("")) {
					storeGrnT.setStock(new StoreItemBatchStock(new Integer(batchId.get(i).toString())));
				}

			} catch (Exception e) {
				
				
			}
			
			/**
			 * if item group is laundry then default bacth is A for all item
			 * Code By Mukesh Narayan Singh Date 07 July 2011
			 */
			List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
			int item_Id = 0;
			item_Id = Integer.parseInt("" + itemId.get(i));
			masStoreItemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.idEq(item_Id)).list();
			int itemGroup = 0;
			if (masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
						.get(0);
				if (masStoreItem.getDepartment() != null) {
					itemGroup = masStoreItem.getGroup().getId();
				}
			}
			if (laundry_group_id == itemGroup) {
				storeGrnT.setBatchNo("A");
			} else {
				storeGrnT.setBatchNo(batchNo.get(i).toString());
			}
			// storeGrnT.setBatchNo(batchNo.get(i).toString());

			// storeGrnT.setLotNo(lotNo.get(i).toString());
			try {
				storeGrnT.setReceivedQty(new BigDecimal(receivedQty.get(i)
						.toString()));

			} catch (Exception e) {
				storeGrnT.setReceivedQty(new BigDecimal(0));
			}
			try {
				storeGrnT.setMrp(new BigDecimal(mrp1.get(i).toString()));

			} catch (Exception e) {
				storeGrnT.setMrp(new BigDecimal(0));
			}
			try {
				storeGrnT.setDispencingPrice(new BigDecimal(dispencingPrice1
						.get(i).toString()));

			} catch (Exception e) {
				storeGrnT.setDispencingPrice(new BigDecimal(0));
			}
			try {
				storeGrnT.setBarcodeNo(barCodeNo.get(i).toString());

			} catch (Exception e) {
				storeGrnT.setBarcodeNo("");
			}
			try {
				storeGrnT.setFreeQty(new Integer(freeQty.get(i).toString()));
			} catch (Exception e) {
				storeGrnT.setFreeQty(new Integer(0));
			}

			try {
				storeGrnT.setDiscount(new BigDecimal(discountAmount.get(i)
						.toString()));
			} catch (Exception e) {
				storeGrnT.setDiscount(new BigDecimal(0));
			}

			try {
				storeGrnT.setTax(new BigDecimal(taxAmount.get(i).toString()));
			} catch (Exception e) {
				storeGrnT.setTax(new BigDecimal(0));
			}

			try {
				storeGrnT.setFinalCostPrice(new BigDecimal(finalCostPrice
						.get(i).toString()));
			} catch (Exception e) {
				storeGrnT.setFinalCostPrice(new BigDecimal(0));
			}

			try {
				storeGrnT.setAmountValue(new BigDecimal(amountValue.get(i)
						.toString()));
			} catch (Exception e) {
				storeGrnT.setAmountValue(new BigDecimal(0));
			}
			try {
				storeGrnT.setFreeItem(freeItem.get(i).toString());
			} catch (Exception e) {
				storeGrnT.setFreeItem("");
			}
			try {
				storeGrnT.setDispType(dispType.get(i).toString());
			} catch (Exception e) {
				storeGrnT.setDispType("");
			}

			try {
				storeGrnT.setMdqValue(new Integer(mdqValue.get(i).toString()));
			} catch (Exception e) {
				storeGrnT.setMdqValue(new Integer(0));
			}

			try {
				storeGrnT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
						.toString()));
			} catch (Exception e) {
				storeGrnT.setRatePerMdq(new BigDecimal(0));
			}

			try {
				storeGrnT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
						.toString()));
			} catch (Exception e) {
				storeGrnT.setUnitRate(new BigDecimal(0));
			}

			try {
				if (manufacturerDate.get(i) != ""
						&& manufacturerDate.get(i) != null) {
					storeGrnT
							.setManufacturerDate(java.sql.Date
									.valueOf(formatterOut.format(formatterIn
											.parse(manufacturerDate.get(i)
													.toString()))));
				} else {
					storeGrnT.setManufacturerDate(null);
				}
			} catch (Exception e) {
				storeGrnT.setManufacturerDate(null);
				e.printStackTrace();
			}
			try {
				storeGrnT
						.setExpiryDate(java.sql.Date.valueOf(formatterOut
								.format(formatterIn.parse(expiryDate.get(i)
										.toString()))));
			} catch (Exception e) {
				storeGrnT.setExpiryDate(null);
				e.printStackTrace();
			}
			// code for adding default grn qty
			List<StorePoDetail> storePoDetailList1 = new ArrayList<StorePoDetail>();
			if (sos.equalsIgnoreCase("Local Purchase")) {
				
				storePoDetailList1 = session
						.createCriteria(StorePoDetail.class)
						.add(Restrictions.eq("Po.Id", indentOrPoId))
						.add(Restrictions.eq("Item.Id", storeGrnT.getItem()
								.getId())).list();
				if (storePoDetailList1 != null && storePoDetailList1.size() > 0) {
					storeGrnT.setGrnQty(storePoDetailList1.get(0)
							.getQuantityOrdered());
				} else {
					storeGrnT.setGrnQty(new BigDecimal(0));
				}

			}
		/*
		 * Added By Ujjwal For QtyOrdered data Saving
		 * on 06/01/2016
		 */
			try{
				
				storeGrnT.setQtyOrdered(new BigDecimal(qtyOrdered.get(i).toString()));
			}catch(Exception e){storeGrnT.setQtyOrdered(new BigDecimal(0))
			;}
			
			storeGrnTList.add(storeGrnT);
		}

		// Save the Persistence Objects

		try {

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Save StoreGrnM data & update StoreFyDocumentNo for Grn Number
			 */

			Criteria c = session.createCriteria(StoreFyDocumentNo.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId));

			storeFyDocumentNoList = c.list();
			String grnStartNo = "";
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getGrnStartNo() != null) {
					grnStartNo = ("" + storeFyDocumentNo.getGrnStartNo());

					grnStartNo = getMaxNo(grnStartNo);
				} else {
					grnStartNo = getMaxNo("");
				}
			}
			//
			storeGrnM.setGrnStartNo(grnStartNo);

			int storeFyId = 0;

			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			//
			/*
			 * List<StoreFyDocumentNo> storeFyDocumentNoList1 = session
			 * .createCriteria(StoreFyDocumentNo.class)
			 * .add(Restrictions.eq("Department.Id", deptId)).list();
			 * StoreFyDocumentNo storeFyDocumentNo =
			 * storeFyDocumentNoList1.get(0);
			 */
			/*
			 * Code for get GRN No from property file and access right's from
			 * hospital parameter Code date 15 Oct 2010 Code By Mukesh Narayan
			 * Singh
			 */
			List<HospitalParameters> hospitalParametersList = new ArrayList<HospitalParameters>();

			hospitalParametersList = session
					.createCriteria(HospitalParameters.class)
					.add(Restrictions.eq("DeptIdStoreCodeRKS", deptId)).list();
			int departmentIdForPOCode = 0;
			String grnCode = "";

			if (hospitalParametersList.size() > 0) {

				for (HospitalParameters hospitalParameters : hospitalParametersList) {
					departmentIdForPOCode = hospitalParameters
							.getDeptIdStoreCodeRKS();
				}

				grnCode = properties.getProperty("store.store_grn_code_rks");
			} else if (deptId != 192 && deptId != 194) {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeVBCH", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
					grnCode = properties
							.getProperty("store.store_grn_code_vbch");
				}
			} else if (deptId == 192) {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeNursingCollege",
								deptId)).list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
				}
				grnCode = properties
						.getProperty("store.store_grn_code_nurding_college");
			} else if (deptId == 194) {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeSickel", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
				}
				//
				grnCode = properties.getProperty("store.store_grn_code_Anemia");
			}

			if (deptId == 201) {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeKhanvel", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
				}
				//
				grnCode = properties
						.getProperty("store.store_grn_code_khanvel");

			} else if (deptId == 206) {

				hospitalParametersList = session
						.createCriteria(HospitalParameters.class)
						.add(Restrictions.eq("DeptIdStoreCodeDhms", deptId))
						.list();
				if (hospitalParametersList.size() > 0) {
					for (HospitalParameters hospitalParameters : hospitalParametersList) {
						departmentIdForPOCode = hospitalParameters
								.getDeptIdStoreCodeVBCH();
					}
				}
				//
				grnCode = properties.getProperty("store.store_grn_code_dhms");

			}
			
			if(storeFyDocumentNoList.size()>0){
			for (StoreFyDocumentNo storeFyDocumentNo2 : storeFyDocumentNoList) {
				if (storeFyDocumentNo2.getGrnNo() != null) {
					no = ("" + storeFyDocumentNo2.getGrnNo());
					no = getMaxGrnNo(no);
				} else {
					no = getMaxGrnNo(no);
				}
				storeFyDocumentNo2.setGrnNo(no);

				hbt.update(storeFyDocumentNo2);
				hbt.refresh(storeFyDocumentNo2);
			}
		}else{
			no = getMaxGrnNo(no);
			StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
			storeFyDocumentNo.setAdjustmentNo("0");
			storeFyDocumentNo.setAdjustmentStartNo("0");
			storeFyDocumentNo.setBalanceNo("0");
			storeFyDocumentNo.setBalanceStartNo("0");
			storeFyDocumentNo.setDefectEntryNo("0");
			storeFyDocumentNo.setDefectEntryStartNo("0");
			storeFyDocumentNo.setDemandNo("0");
			storeFyDocumentNo.setDemandStartNo("0");
			storeFyDocumentNo.setDepartment(new MasDepartment(deptId));
			storeFyDocumentNo.setGrnNo(no);
			storeFyDocumentNo.setGrnStartNo("0");
			storeFyDocumentNo.setIssueDeptNo("0");
			storeFyDocumentNo.setIssueDeptReturnNo("0");
			storeFyDocumentNo.setIssueDeptReturnStartNo("0");
			storeFyDocumentNo.setIssueDeptStartNo("0");
			storeFyDocumentNo.setVendorReturnNo("0");
			storeFyDocumentNo.setVendorReturnStartNo("0");
			String issueDeptNo = "";
			issueDeptNo = getMaxNo("0");
			String issueDeptStartNo = issueDeptNo;
			storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
			storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
			MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			storeFyDocumentNo.setHospital(hospital);
			hbt.save(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);
		}

			// String no1 = storeFyDocumentNoList1.get(0).getGrnNo();

			// no1 = getMaxNo(no1);

			/*
			 * If Source of Supply is "w" or "l" (only in Local Purchase Case)
			 * Update MasStoreBudget for the current Financial Year Get the
			 * financial Id from MasStoreFinancial Get the Record from
			 * MasStoreBudget : Check Financial Id and Department Id Update the
			 * CRV Committed Amount
			 */

			if (sos.equalsIgnoreCase("l") || sos.equalsIgnoreCase("w")
					|| sos.equalsIgnoreCase("x")) {
				MasStoreBudget masStoreBudget = new MasStoreBudget();
				java.util.Date poDate = storeGrnM.getGrnDate();
				BigDecimal poAmount = storeGrnM.getGrnValue();

				List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
				masStoreFinancialList = session.createCriteria(
						MasStoreFinancial.class).list();
				java.util.Date start_date = null;
				java.util.Date end_date = null;
				int financial_id = 0;
				for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
						.hasNext();) {
					MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
							.next();
					start_date = (java.util.Date) masStoreFinancial
							.getStartDate();
					end_date = (java.util.Date) masStoreFinancial.getEndDate();
					if (poDate.after(start_date) && poDate.before(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					} else if (poDate.equals(start_date)
							|| poDate.equals(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					}
				}

				List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
				masStoreBudgetList = session
						.createCriteria(MasStoreBudget.class)
						.add(Restrictions.eq("Financial.Id", financial_id))
						.add(Restrictions.eq("Department.Id", deptId)).list();
				BigDecimal existing_committed_amount = null;
				BigDecimal existing_balance_amount = null;
				BigDecimal existing_spent_amount = null;
				BigDecimal existing_alotted_amount = null;
				if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
					masStoreBudget = masStoreBudgetList.get(0);
					try {
						existing_committed_amount = masStoreBudget
								.getCrvComittedAmount();
					} catch (Exception e) {
						existing_committed_amount = new BigDecimal(0);
					}

					try {
						existing_balance_amount = masStoreBudget
								.getBalanceAmount();
					} catch (Exception e) {
						existing_balance_amount = new BigDecimal(0);
					}

					try {
						existing_spent_amount = masStoreBudget.getSpendAmount();
					} catch (Exception e) {
						existing_spent_amount = new BigDecimal(0);
					}

					try {
						existing_alotted_amount = masStoreBudget
								.getTotalAllocatedAmount();
					} catch (Exception e) {
						existing_alotted_amount = new BigDecimal(0);
					}

					// masStoreBudget.setCrvComittedAmount(existing_committed_amount.add(poAmount));
					masStoreBudget.setBalanceAmount(existing_balance_amount
							.subtract(poAmount));
					masStoreBudget.setSpendAmount(existing_spent_amount
							.add(poAmount));

					storeGrnM.setCrvComittedAmount(existing_committed_amount);
					storeGrnM.setAllottedAmount(existing_alotted_amount);

					// hbt.update(masStoreBudget);
				}
			}
			storeGrnM.setGrnNo(no);
			hbt.save(storeGrnM);
			hbt.refresh(storeGrnM);
			/*
			 * End of MasStoreBudget Update
			 */

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeGrnTList.size() > 0) {
				for (int i = 0; i < storeGrnTList.size(); i++) {
					StoreGrnT storeGrnTObj = new StoreGrnT();
					storeGrnTObj = (StoreGrnT) storeGrnTList.get(i);
					storeGrnTObj.setGrnMaster(storeGrnM);
					hbt.save(storeGrnTObj);
					hbt.refresh(storeGrnTObj);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item
					// Only for New Items (not for Loan in Items)
					/*
					 * if (sos.equalsIgnoreCase("l") &&
					 * loaninId.get(i).toString().equalsIgnoreCase("0")) {
					 * List<StorePoDetail> storePoDetailList = new
					 * ArrayList<StorePoDetail>(); StorePoDetail storePoDetail =
					 * new StorePoDetail(); storePoDetailList =
					 * session.createCriteria
					 * (StorePoDetail.class).add(Restrictions.eq("Po.Id",
					 * indentOrPoId)) .add(Restrictions.eq("Item.Id",
					 * storeGrnTObj.getItem().getId())).list();
					 * 
					 * if (storePoDetailList!=null &&
					 * storePoDetailList.size()>0) { storePoDetail =
					 * storePoDetailList.get(0); BigDecimal existingQuantity =
					 * null; BigDecimal quantity_to_be_added = null; BigDecimal
					 * newQuantity = new BigDecimal(0); Integer mdq =
					 * storePoDetail.getMdqValue();
					 * 
					 * existingQuantity = storePoDetail.getQuantityReceived();
					 * BigDecimal recd_qty = storeGrnTObj.getReceivedQty();
					 * //quantity_to_be_added = recd_qty.divide(new
					 * BigDecimal(mdq), new MathContext(4,RoundingMode.UP));
					 * quantity_to_be_added = recd_qty;
					 * 
					 * if (existingQuantity==null) existingQuantity = new
					 * BigDecimal(0);
					 * 
					 * newQuantity = existingQuantity.add(quantity_to_be_added);
					 * storePoDetail.setQuantityReceived(newQuantity);
					 * PoDetails"); } }
					 */
					// Update Stock in Item Batch Stock
					// Only for New Items (not for Loan in Items)
					int item_id = storeGrnTObj.getItem().getId();

					BigDecimal cost_price = storeGrnTObj.getFinalCostPrice();
					String batch_no = storeGrnTObj.getBatchNo();
					int department_id = storeGrnM.getDepartment().getId();
					// int brand_id = storeGrnTObj.getBrand().getId();
					
					  storeItemBatchStockList = hbt.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = " + item_id 
					  		//+ "and inp.CostPrice = " + cost_price +" "
					  		+ "	and inp.Department.Id= "+department_id +" and inp.BatchNo ='"+batch_no + "' and inp.Hospital.Id = "+box.getInt("hospitalId"));
					  
				if (storeItemBatchStockList!=null && storeItemBatchStockList.size()>0) { 
					//if (!loaninId.get(i).toString().equalsIgnoreCase("0")) {
						storeItemBatchStock = storeItemBatchStockList.get(0);
						BigDecimal existing_qty = new BigDecimal(0);

						if (storeItemBatchStock.getReceivedQty() != null) {
							existing_qty = storeItemBatchStock.getReceivedQty();
						} else {
							existing_qty = new BigDecimal(0);
						}
						BigDecimal recd_qty = new BigDecimal(0);
						BigDecimal freeQty1 = new BigDecimal(0);
						if(receivedQty.get(i) != null){
						 recd_qty = new BigDecimal(receivedQty.get(i).toString());
						}
						/*if(freeQty.get(i) != null){
							freeQty1 = new BigDecimal(new Integer(freeQty.get(i).toString()));
						}*/
						//System.out.println("freeQty1=="+freeQty1);
						//recd_qty = recd_qty.add(freeQty1);
						BigDecimal new_qty = new BigDecimal(0);
						new_qty = existing_qty.add(recd_qty);
						BigDecimal cost_price1 = new BigDecimal(0);
						try {
							cost_price1 = storeItemBatchStock
									.getCostPrice();
						} catch (Exception e) {
							cost_price1 = new BigDecimal(0);
						}

						BigDecimal existing_closing_stock = storeItemBatchStock
								.getClosingStock();
						BigDecimal new_closing_stock = new BigDecimal(0);
						new_closing_stock = existing_closing_stock
								.add(recd_qty);
						// code for updating cost price according to
						// weigted average
						BigDecimal totalCost = (existing_closing_stock.multiply(cost_price1)).add(recd_qty.multiply(cost_price));
						BigDecimal averageCost = new BigDecimal(0);
						try {

							averageCost = totalCost.divide(new_qty, 3);
						} catch (Exception e) {
							e.printStackTrace();
						}
						int id = storeItemBatchStock.getId();
						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
								.load(StoreItemBatchStock.class, id);
						storeItemBatchStock.setCostPrice(averageCost);
						storeItemBatchStock.setReceivedQty(new_qty);
						storeItemBatchStock
								.setClosingStock(new_closing_stock);
						//storeItemBatchStock.setMrp(mrp2);
						//storeItemBatchStock.setBarcodeNo(barcodeNo1);
						//storeItemBatchStock.setDispencingPrice(dispensing_price);
						storeItemBatchStock.setExpiryDate(storeGrnTObj
								.getExpiryDate());
						
						hbt.update(storeItemBatchStock);

						// updating mas_store_item for cost price
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem = (MasStoreItem) session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id", item_id)).list().get(0);
						masStoreItem.setCostPrice(cost_price1);
						hbt.update(masStoreItem);

			}else{
				//if (!loaninId.get(i).toString().equalsIgnoreCase("0")) {
					try {
				StoreItemBatchStock	itemBatchStock = new StoreItemBatchStock();
				itemBatchStock.setDepartment(new MasDepartment(storeGrnM.getDepartment().getId()));
				itemBatchStock.setItem(new MasStoreItem(storeGrnTObj.getItem().getId()));
				itemBatchStock.setBatchNo(storeGrnTObj.getBatchNo());

					/*	if (storeGrnTObj.getLotNo() != null) {
							itemBatchStock.setLotNo(storeGrnTObj
											.getLotNo());
						} else {
							itemBatchStock
									.setLotNo(
											 * storeGrnTObj.
											 * getBrand (
											 * ).getBrandName
											 * ()+","+
											 storeGrnTObj
											.getItem().getId()
											+ ","
											+ storeGrnTObj
													.getBatchNo());
						}
*/
						BigDecimal recd_qty = new BigDecimal(0);
						//BigDecimal freeQty1 = new BigDecimal(0);
						if(receivedQty.get(i) != null){
						 recd_qty = new BigDecimal(receivedQty.get(i).toString());
						}
						if (manufacturerDate.get(i) != "" && manufacturerDate.get(i) != null) {
							itemBatchStock.setManufactureDate(java.sql.Date.valueOf(formatterOut.format(formatterIn.parse(manufacturerDate.get(i).toString()))));
						} 
						/*if(freeQty.get(i) != null){
							freeQty1 = new BigDecimal(new Integer(freeQty.get(i).toString()));
							}
						
						recd_qty = recd_qty.add(freeQty1);*/
						itemBatchStock.setReceivedQty(recd_qty);

						itemBatchStock.setFreeItem(storeGrnTObj.getFreeItem());
						// storeItemBatchStock.setBrand(new
						// MasStoreBrand(storeGrnTObj.getBrand().getId()));
						itemBatchStock.setCostPrice(storeGrnTObj.getFinalCostPrice());
						// updating mas_store_item for cost price
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem = (MasStoreItem) session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id",storeGrnTObj.getItem().getId())).list().get(0);
						masStoreItem.setCostPrice(storeGrnTObj.getFinalCostPrice());

						hbt.update(masStoreItem);
						//itemBatchStock.setBarcodeNo(barcodeNo1);
						itemBatchStock.setClosingStock(recd_qty);
						itemBatchStock.setExpiryDate(storeGrnTObj.getExpiryDate());
						//itemBatchStock.setMrp(mrp2);
						//itemBatchStock.setDispencingPrice(dispensing_price);
						MasHospital masHospital  = new MasHospital();
						masHospital.setId(hospitalId);
						itemBatchStock.setHospital(masHospital);
						itemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
						
						 itemBatchStock.setOpeningBalanceQty(recd_qty);
						hbt.save(itemBatchStock);
					} catch (Exception e) {
						e.printStackTrace();
					}
				//}  // if loaninId =0 }
					 /// if itembatchstocksize > 0
				} // end of for loop
			} // end of if GrnTlist > 0
		}			
			HibernateTemplate hbt3 = getHibernateTemplate();
			hbt3.setFlushModeName("FLUSH_EAGER");
			hbt3.setCheckWriteOperations(false);
			if ((sos.equalsIgnoreCase("Indent From Institute"))) {
				 StoreInternalIndentM storeInternalIndentM = (StoreInternalIndentM)getHibernateTemplate().load(StoreInternalIndentM.class, box.getInt("indentId"));
				 storeInternalIndentM.setStatus("Receive");
				 hbt3.update(storeInternalIndentM);
			} else if (sos.equalsIgnoreCase("Local Purchase")) {
				List<MmMasRequestStatus> statusList = new ArrayList<MmMasRequestStatus>();
				List poStatusList = new ArrayList();
				
				statusList = session.createCriteria(MmMasRequestStatus.class).add(Restrictions.eq("StatusCode", "RCV")).list();
				if(statusList.size()>0){
				MmMasRequestStatus mmMasRequestStatus =(MmMasRequestStatus)statusList.get(0); 
				 StorePoHeader storePoHeader = (StorePoHeader)hbt.load(StorePoHeader.class,box.getInt("poId"));
				 storePoHeader.setStatus(mmMasRequestStatus);
				 hbt.update(storePoHeader);
				}
			}
			tx.commit();
			map.put("messageTOBeVisibleToTheUser", "GRN Created Successfully");
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
				map.put("messageTOBeVisibleToTheUser",
						"GRN Not Created !..... ");
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		map.put("maxIndentNo", no);
		return map;
	}

	public Map<String, Object> getGrnNoListForAutoComplete(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> itemList = new ArrayList<StoreGrnM>();

		Session session = (Session) getSession();

		try {

			Map<String, Object> utilMap = new HashMap<String, Object>();

			List objectList = new ArrayList();
			String str = box.get("autoHint") + "%";

			Criteria c = session.createCriteria(StoreGrnM.class).add(
					Restrictions.like("GrnNo", str));

			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);

		return map;

	}

	public Map<String, Object> getBudgetDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			List<StoreGrnM> storeGrnMList = new ArrayList<StoreGrnM>();
			StoreGrnM storeGrnM = new StoreGrnM();
			storeGrnMList = session.createCriteria(StoreGrnM.class)
					.add(Restrictions.eq("GrnNo", box.getString(GRN_NO)))
					.list();
			java.util.Date grnDate = null;
			BigDecimal grnAmount = new BigDecimal(0);
			BigDecimal vat = new BigDecimal(0);
			BigDecimal disc = new BigDecimal(0);
			if (storeGrnMList != null && storeGrnMList.size() > 0) {
				storeGrnM = (StoreGrnM) storeGrnMList.get(0);
				grnDate = storeGrnM.getGrnDate();
				grnAmount = storeGrnM.getGrnAmount();
				vat = storeGrnM.getVat();
				disc = storeGrnM.getDiscount();
				map.put("grn_amount", grnAmount);
				map.put("vat", vat);
				map.put("disc", disc);
			}

			List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
			masStoreFinancialList = session.createCriteria(
					MasStoreFinancial.class).list();
			java.util.Date start_date = null;
			java.util.Date end_date = null;
			int financial_id = 0;
			for (Iterator iterator2 = masStoreFinancialList.iterator(); iterator2
					.hasNext();) {
				MasStoreFinancial masStoreFinancial = (MasStoreFinancial) iterator2
						.next();
				start_date = (java.util.Date) masStoreFinancial.getStartDate();
				end_date = (java.util.Date) masStoreFinancial.getEndDate();
				if (grnDate != null) {
					if (grnDate.after(start_date) && grnDate.before(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					} else if (grnDate.equals(start_date)
							|| grnDate.equals(end_date)) {
						financial_id = masStoreFinancial.getId();
						break;
					}
				}

			}
			MasStoreBudget masStoreBudget = new MasStoreBudget();
			List<MasStoreBudget> masStoreBudgetList = new ArrayList<MasStoreBudget>();
			masStoreBudgetList = session
					.createCriteria(MasStoreBudget.class)
					.add(Restrictions.eq("Financial.Id", financial_id))
					.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
					.list();
			BigDecimal existing_committed_amount = null;
			if (masStoreBudgetList != null && masStoreBudgetList.size() > 0) {
				masStoreBudget = masStoreBudgetList.get(0);
				map.put("allocatedAmount",
						masStoreBudget.getTotalAllocatedAmount());
				map.put("spentAmount", masStoreBudget.getSpendAmount());
				map.put("balanceAmount", masStoreBudget.getBalanceAmount());
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getItemListForCompleteStockNomenclatureByAutocomplete(
			Map dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = null;
		int deptId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));

		try {
			String str = (String) dataMap.get("autoHint") + "%";

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	public Map<String, Object> getStockDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();

		String pvms = null;
		String nomenclature = null;

		String au = null;
		Integer qtymmf = null;
		String str = null;
		BigDecimal stockInHand = null;
		BigDecimal loanIn = null;
		BigDecimal loanOut = null;
		int item_id = 0;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		Query q = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			int deptId = box.getInt("deptId");
			if (box.getString("nillStock").equals("false")) {
				if (box.get("item_id") != null
						&& box.get("item_id").length() > 0) {

					BigDecimal stock = new BigDecimal("0");
					pvms = box.getString("item_id");
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
							+

							"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
							+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
							+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
							+ "where i.pvms_no='"
							+ pvms
							+ "' and s.department_id='"
							+ deptId
							+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else if (!box.getString("pvmsVal").equals("")) {

					pvms = box.getString("pvmsVal");

					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
							+

							"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
							+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
							+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
							+ "where i.pvms_no='"
							+ pvms
							+ "' and s.department_id='"
							+ deptId
							+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else {
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
							+

							"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
							+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
							+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
							+ "where s.closing_stock>0 and s.department_id='"
							+ deptId
							+ "' group by i.pvms_no,i.nomenclature,u.unit_name order by s.item_id";
					q = session.createSQLQuery(qry);
					q.setFirstResult(0);
					q.setMaxResults(1000);
					// BigDecimal stock=new BigDecimal("0");
					// c =
					// session.createCriteria(StoreItemBatchStock.class).createAlias("Item",
					// "item")
					// .add(Restrictions.gt("ClosingStock",
					// stock)).addOrder(Order.asc("item.Id"));
					// c.setFirstResult(0);
					// c.setMaxResults(1000);
				}
			} else {
				if (box.get("item_id") != null
						&& box.get("item_id").length() > 0) {

					BigDecimal stock = new BigDecimal("0");
					pvms = box.getString("item_id");
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
							+

							"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
							+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
							+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
							+ "where i.pvms_no='"
							+ pvms
							+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else if (!box.getString("pvmsVal").equals("")) {
					pvms = box.getString("pvmsVal");

					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
							+

							"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
							+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
							+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
							+ "where i.pvms_no='"
							+ pvms
							+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
					q = session.createSQLQuery(qry);

				} else {
					String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
							+

							"sum(s.closing_stock) as stock,s.item_id from mas_store_item i left outer join store_item_batch_stock s on i.item_id=s.item_id "
							+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
							+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
							+ "where i.department_id='"
							+ deptId
							+ "' group by i.pvms_no,i.nomenclature,u.unit_name order by i.item_id";
					q = session.createSQLQuery(qry);
					q.setFirstResult(0);
					q.setMaxResults(1000);

				}
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		}

		List list = q.list();
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			if (object[0] == null) {
				pvms = "";
			} else {
				pvms = (String) object[0];
			}

			if (object[1] == null) {
				nomenclature = "";
			} else {
				nomenclature = (String) object[1];
			}

			if (object[2] == null) {
				au = "";
			} else {
				au = (String) object[2];
			}

			if (object[3] == null) {
				loanIn = new BigDecimal("0");
			} else {
				loanIn = (BigDecimal) object[3];
			}

			if (object[4] == null) {
				loanOut = new BigDecimal("0");
			} else {
				loanOut = (BigDecimal) object[4];
			}

			if (object[5] == null) {
				stockInHand = new BigDecimal("0");
			} else {
				stockInHand = (BigDecimal) object[5];
			}

			if (object[6] == null) {
				item_id = 0;
			} else {
				item_id = (Integer) object[6];
			}

			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("loanIn", loanIn);
			hData.put("loanOut", loanOut);
			hData.put("stockInHand", stockInHand);
			hData.put("au", au);
			vResult.add(hData);

		}

		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);

		return map;
	}

	public Map<String, Object> getStockDetailsForNextRecord(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemList = new ArrayList<StoreItemBatchStock>();

		String pvms = null;
		String nomenclature = null;
		String strength = null;
		String au = null;
		Integer qtymmf = null;
		String str = null;
		BigDecimal stockInHand = null;
		int item_id = 0;
		BigDecimal loanIn = null;
		BigDecimal loanOut = null;

		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector mmfTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Criteria c = null;
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		Query q = null;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			if (box.get("item_id") != null && box.get("item_id").length() > 0) {

				BigDecimal stock = new BigDecimal("0");
				pvms = box.getString("item_id");
				String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.pvms_no='"
						+ pvms
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
				q = session.createSQLQuery(qry);

			} else if (!box.getString("pvmsVal").equals("")) {
				BigDecimal stock = new BigDecimal("0");
				pvms = box.getString("pvmsVal");
				String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where i.pvms_no='"
						+ pvms
						+ "' group by i.pvms_no,i.nomenclature,u.unit_name";
				q = session.createSQLQuery(qry);

			} else {

				int itemId = 0;
				if (box.getString("buttonName").equals("next")) {
					itemId = box.getInt("itemId");
				} else {
					itemId = Integer.parseInt(box
							.getString("itemIdForNextRecord"));
				}

				String qry = "select i.pvms_no,i.nomenclature,u.unit_name,sum(s.loan_in_qty) as loanin,sum(s.loan_out_qty) as loanout,"
						+

						"sum(s.closing_stock) as stock,s.item_id from mas_store_item i inner join store_item_batch_stock s on i.item_id=s.item_id "
						+ "left outer join mas_store_item_conversion c on i.item_conversion_id=c.item_conversion_id "
						+ "left outer join mas_store_unit u on c.purchase_unit_id=u.unit_id "
						+ "where s.closing_stock>0 and s.item_id>"
						+ itemId
						+ " group by i.pvms_no,i.nomenclature,u.unit_name order by s.item_id";
				q = session.createSQLQuery(qry);
				q.setFirstResult(0);
				q.setMaxResults(1000);

				/*
				 * BigDecimal stock=new BigDecimal("0"); c =
				 * session.createCriteria
				 * (StoreItemBatchStock.class).createAlias("Item",
				 * "item").add(Restrictions.ge("Id",itemId))
				 * .add(Restrictions.gt("ClosingStock",
				 * stock)).addOrder(Order.asc("item.Id")); c.setFirstResult(0);
				 * c.setMaxResults(1000);
				 */

				String itemIdForNextRecord = Integer.toString(itemId);
				map.put("itemIdForNextRecord", itemIdForNextRecord);
			}
		}

		catch (HibernateException e) {
			e.printStackTrace();
		}

		List list = q.list();
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();

			if (object[0] == null) {
				pvms = "";
			} else {
				pvms = (String) object[0];
			}

			if (object[1] == null) {
				nomenclature = "";
			} else {
				nomenclature = (String) object[1];
			}

			if (object[2] == null) {
				au = "";
			} else {
				au = (String) object[2];
			}

			if (object[3] == null) {
				loanIn = new BigDecimal("0");
			} else {
				loanIn = (BigDecimal) object[3];
			}

			if (object[4] == null) {
				loanOut = new BigDecimal("0");
			} else {
				loanOut = (BigDecimal) object[4];
			}

			if (object[5] == null) {
				stockInHand = new BigDecimal("0");
			} else {
				stockInHand = (BigDecimal) object[5];
			}

			if (object[6] == null) {
				item_id = 0;
			} else {
				item_id = (Integer) object[6];
			}

			hData = new HashMap<String, Object>();
			hData.put("itemId", item_id);
			hData.put("pvms", pvms);
			hData.put("nomenclature", nomenclature);
			hData.put("loanIn", loanIn);
			hData.put("loanOut", loanOut);
			hData.put("stockInHand", stockInHand);
			hData.put("au", au);
			vResult.add(hData);

		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);

		return map;
	}

	public Map<String, Object> submitLoanIn(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		int deptId = 0;
		int hospitalId = 0;
		int supplierId = 0;
		int employeeId = 0;

		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		java.sql.Date loanInDate = null;
		java.sql.Date challanDate = null;

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		String challanNumber = "";
		String loaninNo = "";
		String max = "";
		String no = "";
		int po_id = 0;
		String userName = "";
		String remarks = "";
		BigDecimal loanInValue = null;
		BigDecimal discount = null;
		BigDecimal vat = null;

		// Collecting Parameter Values from Box

		deptId = box.getInt("deptId");
		hospitalId = box.getInt("hospitalId");
		userName = box.getString("userName");
		supplierId = box.getInt(SUPPLIER_ID);
		loaninNo = box.getString(LOANIN_NO);
		po_id = box.getInt(PO_ID);

		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(LOANIN_DATE)));
			loanInDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			loanInDate = null;
		}

		try {
			String date4MySQL = formatterOut.format(formatterIn.parse(box
					.getString(CHALLAN_DATE)));
			challanDate = java.sql.Date.valueOf(date4MySQL);
		} catch (Exception e) {
			challanDate = null;
		}

		challanNumber = box.getString(CHALLAN_NO);
		employeeId = box.getInt(EMPLOYEE_ID);

		try {
			loanInValue = new BigDecimal(box.getString("loanInValue"));
		} catch (Exception e) {
			loanInValue = new BigDecimal(0);
		}

		remarks = box.getString(REMARKS);

		// Create StoreLoanInM object and Set the Values

		StoreLoaninM storeLoaninM = new StoreLoaninM();
		storeLoaninM.setChallanDate(challanDate);
		storeLoaninM.setChallanNo(challanNumber);

		storeLoaninM.setLastChgBy(userName);
		storeLoaninM.setLastChgDate(HMSUtil
				.convertStringTypeDateToDateType(date));
		storeLoaninM.setLastChgTime(time);
		storeLoaninM.setLoaninAmount(loanInValue);
		storeLoaninM.setLoaninDate(loanInDate);
		storeLoaninM.setLoaninNo(loaninNo);
		storeLoaninM.setLoaninValue(loanInValue);
		storeLoaninM.setRemarks(remarks);
		storeLoaninM.setStatus("o");
		storeLoaninM.setSupplier(new MasStoreSupplier(supplierId));

		try {
			storeLoaninM.setDepartment(new MasDepartment(deptId));
		} catch (Exception e) {
			storeLoaninM.setDepartment(null);
		}

		try {
			storeLoaninM.setEmployee(new MasEmployee(employeeId));
		} catch (Exception e) {
			storeLoaninM.setEmployee(null);
		}

		try {
			storeLoaninM.setHospital(new MasHospital(hospitalId));
		} catch (Exception e) {
			storeLoaninM.setHospital(null);
		}

		try {
			storeLoaninM.setPo(new StorePoHeader(po_id));
		} catch (Exception e) {
			storeLoaninM.setPo(null);
		}

		// Create StoreLoanInTList Contains StoreLoanInT Objects and Set the
		// Corresponding Values
		List<StoreLoaninT> storeLoaninTList = new ArrayList<StoreLoaninT>();
		StoreLoaninT storeLoaninT = null;

		Vector itemId = box.getVector(ITEM_ID);
		Vector brandId = box.getVector(BRAND_ID);
		Vector manufacturerId = box.getVector(MANUFACTURER_ID);
		Vector batchNo = box.getVector(BATCH_NO);
		Vector lotNo = box.getVector(LOT_NO);
		Vector receivedQty = box.getVector(QUANTITY_RECEIVED);
		Vector freeQty = box.getVector(FREE_QTY);
		Vector dispType = box.getVector("dispenseType");
		Vector mdqValue = box.getVector("mdq");
		Vector ratePerMdq = box.getVector("ratePerMdq");
		Vector convertedStock = box.getVector("convertedStock");
		Vector discountAmount = box.getVector("discountAmount");
		Vector taxAmount = box.getVector("taxAmount");
		Vector finalCostPrice = box.getVector(COST_PRICE);
		Vector amountValue = box.getVector(AMOUNT);
		Vector freeItem = box.getVector(FREE_ITEM);
		Vector manufacturerDate = box.getVector(MANUFACTURING_DATE);
		Vector expiryDate = box.getVector(EXPIRY_DATE);
		Vector flag = box.getVector("flag");

		int slno = 1;
		for (int i = 0; i < itemId.size(); i++) {
			if (itemId.get(i).toString().equalsIgnoreCase("0")) {
				break;
			}
			storeLoaninT = new StoreLoaninT();
			storeLoaninT.setSerialNo(slno++);
			storeLoaninT.setItem(new MasStoreItem(new Integer(itemId.get(i)
					.toString())));
			storeLoaninT.setBrand(new MasStoreBrand(new Integer(brandId.get(i)
					.toString())));
			storeLoaninT.setManufacturer(new MasManufacturer(new Integer(
					manufacturerId.get(i).toString())));
			storeLoaninT.setBatchNo(batchNo.get(i).toString());
			storeLoaninT.setLotNo(lotNo.get(i).toString());
			try {
				storeLoaninT.setReceivedQty(new BigDecimal(receivedQty.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setReceivedQty(new BigDecimal(0));
			}

			try {
				storeLoaninT.setFreeQty(new Integer(freeQty.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setFreeQty(new Integer(0));
			}

			try {
				storeLoaninT.setDiscount(new BigDecimal(discountAmount.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setDiscount(null);
			}

			try {
				storeLoaninT
						.setTax(new BigDecimal(taxAmount.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setTax(null);
			}

			try {
				storeLoaninT.setFinalCostPrice(new BigDecimal(finalCostPrice
						.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setFinalCostPrice(new BigDecimal(0));
			}

			try {
				storeLoaninT.setAmountValue(new BigDecimal(amountValue.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setAmountValue(new BigDecimal(0));
			}

			storeLoaninT.setFreeItem(freeItem.get(i).toString());
			storeLoaninT.setDispType(dispType.get(i).toString());
			try {
				storeLoaninT
						.setMdqValue(new Integer(mdqValue.get(i).toString()));
			} catch (Exception e) {
				storeLoaninT.setMdqValue(new Integer(0));
			}

			try {
				storeLoaninT.setRatePerMdq(new BigDecimal(ratePerMdq.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setRatePerMdq(new BigDecimal(0));
			}

			try {
				storeLoaninT.setUnitRate(new BigDecimal(ratePerMdq.get(i)
						.toString()));
			} catch (Exception e) {
				storeLoaninT.setUnitRate(new BigDecimal(0));
			}

			try {
				storeLoaninT.setManufacturerDate(formatterOut
						.format(formatterIn.parse(manufacturerDate.get(i)
								.toString())));
			} catch (Exception e) {
				storeLoaninT.setManufacturerDate(null);
			}
			try {
				storeLoaninT
						.setExpiryDate(java.sql.Date.valueOf(formatterOut
								.format(formatterIn.parse(expiryDate.get(i)
										.toString()))));
			} catch (Exception e) {
				storeLoaninT.setExpiryDate(null);
			}
			storeLoaninTList.add(storeLoaninT);
		}

		// Save the Persistence Objects
		Session session = (Session) getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Save StoreLoanInM data & update StoreFyDocumentNo for LoanIn
			 * Number
			 */

			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", deptId));
			storeFyDocumentNoList = c.list();
			String loanInStartNo = "";
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getLoaninStartNo() != null) {
					loanInStartNo = ("" + storeFyDocumentNo.getLoaninStartNo());
					loanInStartNo = getMaxNo(loanInStartNo);
				} else {
					loanInStartNo = getMaxNo("");
				}
			}
			storeLoaninM.setLoaninNo(loanInStartNo);

			int storeFyId = 0;

			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setLoaninNo(loaninNo);
			storeFyDocumentNo.setLoaninStartNo(loanInStartNo);
			hbt.update(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			hbt.save(storeLoaninM);

			/*
			 * Updating the Stock in StoreITemBatchStock
			 */

			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			StoreItemBatchStock storeItemBatchStock = null;

			if (storeLoaninTList.size() > 0) {
				for (int i = 0; i < storeLoaninTList.size(); i++) {
					storeLoaninT = new StoreLoaninT();
					storeLoaninT = (StoreLoaninT) storeLoaninTList.get(i);
					storeLoaninT.setLoaninMaster(storeLoaninM);
					hbt.save(storeLoaninT);
					hbt.refresh(storeLoaninT);

					// Updating Quantity Received in StorePoDetail for the
					// particular Item

					List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
					StorePoDetail storePoDetail = new StorePoDetail();
					storePoDetailList = session
							.createCriteria(StorePoDetail.class)
							.add(Restrictions.eq("Po.Id", po_id))
							.add(Restrictions.eq("Item.Id", storeLoaninT
									.getItem().getId())).list();

					if (storePoDetailList != null
							&& storePoDetailList.size() > 0) {
						storePoDetail = storePoDetailList.get(0);
						BigDecimal existingQuantity = null;
						BigDecimal quantity_to_be_added = null;
						BigDecimal newQuantity = new BigDecimal(0);
						BigDecimal mdq = storePoDetail.getMdqValue();

						existingQuantity = storePoDetail.getQuantityReceived();
						BigDecimal recd_qty = storeLoaninT.getReceivedQty();
						quantity_to_be_added = recd_qty;

						if (existingQuantity == null) {
							existingQuantity = new BigDecimal(0);
						}

						newQuantity = existingQuantity
								.add(quantity_to_be_added);
						storePoDetail.setQuantityReceived(newQuantity);
						HibernateTemplate hbt2 = getHibernateTemplate();
						hbt2.setFlushModeName("FLUSH_EAGER");
						hbt2.setCheckWriteOperations(false);
						hbt2.update(storePoDetail);
						hbt2.refresh(storePoDetail);
					}

					// Update Stock in Item Batch Stock
					// for All Items

					int item_id = storeLoaninT.getItem().getId();
					int brand_id = storeLoaninT.getBrand().getId();
					BigDecimal cost_price = storeLoaninT.getFinalCostPrice();
					String batch_no = storeLoaninT.getBatchNo();
					int department_id = storeLoaninM.getDepartment().getId();

					storeItemBatchStockList = hbt
							.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
									+ item_id
									+ " and inp.CostPrice = "
									+ cost_price
									+ "and inp.Department.Id= "
									+ department_id
									+ "and inp.BatchNo ='"
									+ batch_no + "' ");

					if (storeItemBatchStockList != null
							&& storeItemBatchStockList.size() > 0) {
						storeItemBatchStock = storeItemBatchStockList.get(0);
						BigDecimal existing_qty = new BigDecimal(0);
						BigDecimal loaninQty = new BigDecimal(0);

						if (storeItemBatchStock.getReceivedQty() != null) {
							existing_qty = storeItemBatchStock.getReceivedQty();
						} else {
							existing_qty = new BigDecimal(0);
						}

						if (storeItemBatchStock.getLoanInQty() != null) {
							loaninQty = storeItemBatchStock.getLoanInQty();
						} else {
							loaninQty = new BigDecimal(0);
						}

						BigDecimal recd_qty = new BigDecimal(convertedStock
								.get(i).toString());

						BigDecimal new_qty = new BigDecimal(0);
						BigDecimal newLoaninQty = new BigDecimal(0);
						new_qty = existing_qty.add(recd_qty);
						newLoaninQty = loaninQty.add(recd_qty);

						BigDecimal existing_closing_stock = storeItemBatchStock
								.getClosingStock();
						BigDecimal new_closing_stock = new BigDecimal(0);
						new_closing_stock = existing_closing_stock
								.add(recd_qty);

						int id = storeItemBatchStock.getId();
						storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
								.load(StoreItemBatchStock.class, id);

						storeItemBatchStock.setReceivedQty(new_qty);
						storeItemBatchStock.setLoanInQty(newLoaninQty);
						storeItemBatchStock.setClosingStock(new_closing_stock);

						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_EAGER");
						hbt1.setCheckWriteOperations(false);
						hbt1.update(storeItemBatchStock);
					} else {
						storeItemBatchStock = new StoreItemBatchStock();
						storeItemBatchStock.setDepartment(storeLoaninM
								.getDepartment());
						storeItemBatchStock.setItem(storeLoaninT.getItem());
						storeItemBatchStock.setBatchNo(storeLoaninT
								.getBatchNo());
						if (storeLoaninT.getLotNo() != null) {
							storeItemBatchStock.setLotNo(storeLoaninT
									.getLotNo());
						} else {
							storeItemBatchStock.setLotNo(storeLoaninT
									.getBrand()
									+ ","
									+ storeLoaninT.getItem()
									+ "," + storeLoaninT.getBatchNo());
						}

						BigDecimal recd_qty = new BigDecimal(convertedStock
								.get(i).toString());

						storeItemBatchStock.setReceivedQty(recd_qty);
						storeItemBatchStock.setLoanInQty(recd_qty);
						storeItemBatchStock.setFreeItem(storeLoaninT
								.getFreeItem());
						storeItemBatchStock.setBrand(storeLoaninT.getBrand());
						storeItemBatchStock.setCostPrice(storeLoaninT
								.getFinalCostPrice());
						storeItemBatchStock.setClosingStock(recd_qty);
						storeItemBatchStock.setExpiryDate(storeLoaninT
								.getExpiryDate());

						HibernateTemplate hbt1 = getHibernateTemplate();
						hbt1.setFlushModeName("FLUSH_AUTO");
						hbt1.setCheckWriteOperations(false);
						hbt1.save(storeItemBatchStock);
					} // if itembatchstocksize > 0
				} // end of for loop
			} // end of if GrnTlist > 0
			tx.commit();
			map.put("messageTOBeVisibleToTheUser",
					"Loan In Created Successfully");
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
				map.put("messageTOBeVisibleToTheUser",
						"Loan In Not Created !..... ");
			}
			// throw e; // or display error message
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> showMmfDepartmentApproval(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		departmentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		departmentList = getHibernateTemplate()
				.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");
		MasStoreItem firstItem = null;

		Criteria c = session.createCriteria(MasStoreItem.class)
				.createAlias("Department", "d")
				.add(Restrictions.eq("d.Id", box.getInt("deptId")))
				.addOrder(Order.asc("Id"));
		c.setFirstResult(0);
		c.setMaxResults(5);

		List<MasStoreItem> masList = c.list();
		if (masList != null && masList.size() > 0) {
			firstItem = masList.get(0);
		}
		map.put("firstItem", firstItem);
		approvedByEmployeeList = getHibernateTemplate().find(
				"from jkt.hms.masters.business.MasEmployee ");
		map.put("departmentList", departmentList);
		map.put("fromShowDepartmentApproval", "true");
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		return map;
	}

	public Map<String, Object> getCurrentYearMmfByItem(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> firstItemList = new ArrayList<MasStoreItem>();
		String pvms = null;
		String nomenclature = null;
		String departmentName = null;
		BigDecimal preQtymmf = new BigDecimal(0);
		BigDecimal qtymmf = new BigDecimal(0);
		BigDecimal currQtymmf = new BigDecimal(0);
		long storeItemId = 1;
		String remark = null;

		int id = 0;
		List objectCurrentYearList = new ArrayList();
		List objectPreviousYearList = new ArrayList();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		// List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		List<Integer> objectList = new ArrayList<Integer>();

		List<StoreMmfDepartmentM> storeMmfDepartmentMList = new ArrayList<StoreMmfDepartmentM>();
		// added by shailesh

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			// StoreMmfDepartmentT storeMmfDepartmentT1 = new
			// StoreMmfDepartmentT();
			int currentYear = box.getInt(MMF_DEPARTMENT_DATE);

			int previousYear = currentYear - 1;
			String qry = "select count(*) from mas_store_item";
			String stringtotalIds = (String) (session.createSQLQuery(qry)
					.list()).get(0).toString();
			int totalIds = Integer.parseInt(stringtotalIds);

			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

			map.put("departmentList", departmentList);

			/*
			 * String
			 * qry="select * from mas_store_item where pvms_no='010105' ";
			 * List<MasStoreItem>
			 * storeItemsList=session.createSQLQuery(qry).list();
			 */
			// if(storeItemsList!=null&&storeItemsList.size()>0){
			int count = box.getInt("storeItemId");

			if (!box.getString("navigation").equals("")
					&& box.getString("navigation").equalsIgnoreCase("next")) {
				count++;
				for (int id1 = 1; id1 <= totalIds; id1++) {

					MasStoreItem firstItem = null;

					Criteria c = session.createCriteria(MasStoreItem.class)
							.createAlias("Department", "d")
							.add(Restrictions.eq("Id", count))
							.add(Restrictions.eq("d.Id", box.getInt("deptId")))
							.addOrder(Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(5);

					List<MasStoreItem> masList = c.list();
					if (masList != null && masList.size() > 0) {
						firstItem = masList.get(0);
					}
					if (firstItem != null) {
						map.put("firstItem", firstItem);
						box.put("pvmsNo", firstItem.getPvmsNo());
						break;
					} else {
						count++;
					}

				}

			}
			if (!box.getString("navigation").equals("")
					&& box.getString("navigation").equalsIgnoreCase("previous")) {
				count--;
				for (int id1 = 1; id1 <= totalIds; id1++) {

					MasStoreItem firstItem = null;
					Criteria c = session.createCriteria(MasStoreItem.class)
							.createAlias("Department", "d")
							.add(Restrictions.eq("Id", count))
							.add(Restrictions.eq("d.Id", box.getInt("deptId")))
							.addOrder(Order.asc("Id"));
					c.setFirstResult(0);
					c.setMaxResults(5);

					List<MasStoreItem> masList = c.list();
					if (masList != null && masList.size() > 0) {
						firstItem = masList.get(0);
					}
					if (firstItem != null) {
						map.put("firstItem", firstItem);
						box.put("pvmsNo", firstItem.getPvmsNo());
						break;
					} else {
						count--;
					}

				}

			}
			if (!box.getString("fromUpdate").equals("")) {
				List<MasStoreItem> updateList = new ArrayList<MasStoreItem>();
				updateList = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.eq("PvmsNo", box.getString("pvmsNo")))
						.list();

				MasStoreItem firstItem = null;
				if (updateList != null & updateList.size() > 0) {
					firstItem = (MasStoreItem) getHibernateTemplate().load(
							MasStoreItem.class, updateList.get(0).getId());
					if (firstItem != null) {
						map.put("firstItem", firstItem);
					}
				}
			}
			if (box.getString("navigation").equals("")
					&& !box.getString("fromSearch").equalsIgnoreCase("true")
					&& box.getString("fromUpdate").equals("")) {

				MasStoreItem firstItem = null;
				Criteria c = session.createCriteria(MasStoreItem.class)
						.createAlias("Department", "d")
						.add(Restrictions.eq("Id", count))
						.add(Restrictions.eq("d.Id", box.getInt("deptId")))
						.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
				}
				if (firstItem != null) {
					map.put("firstItem", firstItem);
				}
			}
			if (box.getString("navigation").equals("")
					&& box.getString("fromSearch").equalsIgnoreCase("true")) {

				box.put("pvmsNo", box.getString("pvmsNo"));
				MasStoreItem firstItem = null;
				Criteria c = session.createCriteria(MasStoreItem.class)
						.createAlias("Department", "d")
						.add(Restrictions.eq("Id", count))
						.add(Restrictions.eq("d.Id", box.getInt("deptId")))
						.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
				}
				if (box.getString("flag").equalsIgnoreCase("true")) {
					String pvmsNo1 = box.getString("pvmsNo");
					if (!pvmsNo1.equalsIgnoreCase("")) {

						List<MasStoreItem> masStoreItemList1 = new ArrayList<MasStoreItem>();

						masStoreItemList1 = session
								.createCriteria(MasStoreItem.class)
								.add(Restrictions.eq("PvmsNo", pvmsNo1))
								.createAlias("Department", "d")
								.add(Restrictions.eq("d.Id",
										box.getInt("deptId"))).list();
						if (masStoreItemList1 != null
								&& masStoreItemList1.size() > 0) {
							firstItem = (MasStoreItem) getHibernateTemplate()
									.load(MasStoreItem.class,
											masStoreItemList1.get(0).getId());
						}

					}
				}

				if (firstItem != null) {
					map.put("firstItem", firstItem);
				}
			}
			if (!box.getString("pvmsGroup").equals("")
					&& box.getString("pvmsGroup").equalsIgnoreCase(
							"pvms_search")
					&& box.getString("navigation").equals("")
					&& !box.getString("fromUpdate").equals("fromUpdate")
					&& !box.getString("fromSearch").equalsIgnoreCase("true")
					&& box.getString("page").equals("")) {
				MasStoreItem firstItem = null;

				Criteria c = session.createCriteria(MasStoreItem.class)
						.createAlias("Department", "d")
						.add(Restrictions.eq("Id", count))
						.add(Restrictions.eq("d.Id", box.getInt("deptId")))
						.addOrder(Order.asc("Id"));
				c.setFirstResult(0);
				c.setMaxResults(5);

				List<MasStoreItem> masList = c.list();
				if (masList != null && masList.size() > 0) {
					firstItem = masList.get(0);
					box.put("pvmsNo", firstItem.getPvmsNo());
				}

				box.put("pvms_search", "pvms_search");
				if (firstItem != null) {
					map.put("firstItem", firstItem);
				}

			}
			if (!box.getString("pvmsGroup").equals("")
					&& box.getString("pvmsGroup")
							.equalsIgnoreCase("niv_search")
					&& box.getString("navigation").equals("")
					&& box.getString("fromUpdate").equals("")
					&& box.getString("fromSearch").equalsIgnoreCase("")) {
				MasStoreItem firstItem = null;
				firstItemList = session.createCriteria(MasStoreItem.class)
						.createAlias("ItemType", "m")
						.add(Restrictions.eq("m.Id", 2))
						.createAlias("Department", "d")
						.add(Restrictions.eq("d.Id", box.getInt("deptId")))
						.list();
				if (firstItemList != null && firstItemList.size() > 0) {
					firstItem = firstItemList.get(0);
					box.put("pvmsNo", firstItem.getPvmsNo());
					map.put("firstItem", firstItem);
				}
				box.put("niv_search", "niv_search");

			}
			int currYearMmfSum = 0;
			int preYearMmfSum = 0;
			String currYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
					+ box.getInt(MMF_DEPARTMENT_DATE)
					+ "'"
					+ " and s.pvms_no='"
					+ box.getString("pvmsNo")
					+ "' and m.mmf_store_type='"
					+ box.getString("storeType")
					+ "'";

			objectCurrentYearList = (List) session.createSQLQuery(
					currYearMmfSumQuery).list();
			if (objectCurrentYearList != null
					&& objectCurrentYearList.size() > 0) {
				if (objectCurrentYearList.get(0) != null) {
					map.put("currYearMmfSum", new BigDecimal(""
							+ objectCurrentYearList.get(0)));
				}
			} else {
				map.put("currYearMmfSum", new BigDecimal(0));

			}
			int previousYear1 = box.getInt(MMF_DEPARTMENT_DATE) - 1;
			String preYearMmfSumQuery = "SELECT sum(curr_year_mmf) FROM store_mmf_department_t t,store_mmf_department_m m,mas_store_item s where t.store_mmf_department_m_id=m.id and t.item_id=s.item_id and m.mmf_for_the_year='"
					+ previousYear1
					+ "'"
					+ " and s.pvms_no='"
					+ box.getString("pvmsNo")
					+ "' and m.mmf_store_type='"
					+ box.getString("storeType") + "'";

			objectPreviousYearList = session.createSQLQuery(preYearMmfSumQuery)
					.list();
			if (objectPreviousYearList != null
					&& objectPreviousYearList.size() > 0) {
				if (objectPreviousYearList.get(0) != null) {
					map.put("preYearMmfSum", new BigDecimal(""
							+ objectPreviousYearList.get(0)));
				}

			} else {
				map.put("preYearMmfSum", new BigDecimal(0));

			}
			storeMmfDepartmentTList = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.addOrder(Order.asc("m.StoreWardDept")).list();

			// code for inserting new transactions which are present in previous
			// year but not in this year for particular item

			List<StoreMmfDepartmentT> storeMmfDepartmentTListForPreviousYear = new ArrayList<StoreMmfDepartmentT>();

			storeMmfDepartmentTListForPreviousYear = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE) - 1))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.addOrder(Order.asc("m.StoreWardDept")).list();
			List<MasStoreItem> pvmsNolist = new ArrayList<MasStoreItem>();
			pvmsNolist = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", box.get("pvmsNo"))).list();
			List<StoreMmfDepartmentT> newList = new ArrayList<StoreMmfDepartmentT>();
			if (storeMmfDepartmentTListForPreviousYear != null
					&& storeMmfDepartmentTListForPreviousYear.size() > 0) { // int
				// buttonCount=1;
				for (StoreMmfDepartmentT preYearStoreMmfDepartmentT : storeMmfDepartmentTListForPreviousYear) {
					boolean check = false;
					for (StoreMmfDepartmentT storeMmfDepartmentT : storeMmfDepartmentTList) {
						if (storeMmfDepartmentT.getStoreMmfDepartmentM()
								.getStoreWardDept().getId() == preYearStoreMmfDepartmentT
								.getStoreMmfDepartmentM().getStoreWardDept()
								.getId()) { //
							// department
							// names"+storeMmfDepartmentT.getStoreMmfDepartmentM().getStoreWardDept().getDepartmentName());
							check = true;
							// newList.add(preYearStoreMmfDepartmentT);
							// storeMmfDepartmentT.setPreYearMmf(preYearStoreMmfDepartmentT.getCurrYearMmf());
						}
					}
					if (!check) {
						List<StoreMmfDepartmentM> serchingMasterIdListForParticularDepartment = new ArrayList<StoreMmfDepartmentM>();
						serchingMasterIdListForParticularDepartment = session
								.createCriteria(StoreMmfDepartmentM.class)
								.createAlias("StoreWardDept", "s")
								.add(Restrictions.eq("s.Id",
										preYearStoreMmfDepartmentT
												.getStoreMmfDepartmentM()
												.getStoreWardDept().getId()))
								.add(Restrictions.eq("MmfForTheYear",
										box.getInt(MMF_DEPARTMENT_DATE)))
								.add(Restrictions.eq("MmfStoreType",
										box.getString("storeType"))).list();

						if (serchingMasterIdListForParticularDepartment == null
								|| serchingMasterIdListForParticularDepartment
										.size() == 0) {
							StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
							String mmfNo = "01/"
									+ box.getInt(MMF_DEPARTMENT_DATE);
							storeMmfDepartmentM.setDocNo(mmfNo);
							storeMmfDepartmentM.setMmfForTheYear(box
									.getInt(MMF_DEPARTMENT_DATE));
							storeMmfDepartmentM.setMmfStoreType(box
									.getString("storeType"));
							storeMmfDepartmentM.setLastChgBy("admin");

							storeMmfDepartmentM.setLastChgDate(HMSUtil
									.convertStringTypeDateToDateType(box
											.get(CHANGED_DATE)));
							storeMmfDepartmentM.setLastChgTime(box
									.get(CHANGED_TIME));
							storeMmfDepartmentM.setStatus("p");
							MasHospital masHospital = new MasHospital();
							masHospital.setId(1);
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(preYearStoreMmfDepartmentT
									.getStoreMmfDepartmentM()
									.getStoreWardDept().getId());
							storeMmfDepartmentM.setStoreWardDept(masDepartment);
							storeMmfDepartmentM.setHospital(masHospital);
							hbt.save(storeMmfDepartmentM);
							hbt.refresh(storeMmfDepartmentM);
						}

						serchingMasterIdListForParticularDepartment = session
								.createCriteria(StoreMmfDepartmentM.class)
								.createAlias("StoreWardDept", "s")
								.add(Restrictions.eq("s.Id",
										preYearStoreMmfDepartmentT
												.getStoreMmfDepartmentM()
												.getStoreWardDept().getId()))
								.add(Restrictions.eq("MmfForTheYear",
										box.getInt(MMF_DEPARTMENT_DATE)))
								.add(Restrictions.eq("MmfStoreType",
										box.getString("storeType"))).list();

						StoreMmfDepartmentT storeMmfDepartmentT = new StoreMmfDepartmentT();
						storeMmfDepartmentT
								.setPreYearMmf(preYearStoreMmfDepartmentT
										.getCurrYearMmf());
						storeMmfDepartmentT.setCurrYearMmf(new BigDecimal(0));
						storeMmfDepartmentT.setMmfInQty(new BigDecimal(0));
						MasStoreItem item = new MasStoreItem();

						item.setId(pvmsNolist.get(0).getId());
						storeMmfDepartmentT.setItem(item);
						StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
						storeMmfDepartmentM
								.setId(serchingMasterIdListForParticularDepartment
										.get(0).getId());
						storeMmfDepartmentT
								.setStoreMmfDepartmentM(storeMmfDepartmentM);
						if (storeMmfDepartmentTList.size() > 0) {
							storeMmfDepartmentT.setSrNo(storeMmfDepartmentTList
									.get(storeMmfDepartmentTList.size() - 1)
									.getSrNo());
						} else {
							storeMmfDepartmentT.setSrNo(1);
						}
						hbt.save(storeMmfDepartmentT);
						hbt.refresh(storeMmfDepartmentT);

					}

				}
			}

			storeMmfDepartmentTList = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.addOrder(Order.asc("m.StoreWardDept")).list();
			map.put("currentYear", currentYear);
			map.put("previousYear", previousYear);
			map.put("departmentList", departmentList);
			int itemId = 0;
			map.put("storeMmfDepartmentMList", storeMmfDepartmentMList);

			if (storeMmfDepartmentTList != null
					&& storeMmfDepartmentTList.size() > 0) {
				for (StoreMmfDepartmentT storeMmfDepartmentT : storeMmfDepartmentTList) {

					/*
					 * String qry = "select item_id from mas_store_item where
					 * pvms_no=" + box.get("pvmsNo");
					 * session.createSQLQuery(qry).list(); if (objectList.get(0)
					 * != null && objectList.size() > 0) {
					 * 
					 * itemId = objectList.get(0); }
					 */
					hData = new HashMap<String, Object>();

					/*
					 * storeMmfDepartmentTList = hbt .find("from
					 * jkt.hms.masters.business.StoreMmfDepartmentT as inp where
					 * inp
					 * .StoreMmfDepartmentM=" + storeMmfDepartmentM.getId() + "
					 * and inp.Item=" + itemId); if (storeMmfDepartmentTList !=
					 * null && storeMmfDepartmentTList.size() > 0) {
					 */
					try {
						id = storeMmfDepartmentT.getId();
						hData.put("id", id);
					} catch (Exception e) {
						id = 0;
					}

					try {

						preQtymmf = storeMmfDepartmentT.getPreYearMmf();

						if (preQtymmf == null) {
							preQtymmf = new BigDecimal(0);
						}
						hData.put("preQtymmf", preQtymmf);
					} catch (Exception e) {
						preQtymmf = new BigDecimal(0);
					}
					try {
						currQtymmf = storeMmfDepartmentT.getCurrYearMmf();
						if (currQtymmf == null) {
							currQtymmf = new BigDecimal(0);
						}
						hData.put("currQtymmf", currQtymmf);
					} catch (Exception e) {
						currQtymmf = new BigDecimal(0);
					}
					try {
						qtymmf = storeMmfDepartmentT.getMmfInQty();
						if (qtymmf == null) {
							qtymmf = new BigDecimal(0);
						}
						hData.put("qtymmf", qtymmf);
					} catch (Exception e) {
						qtymmf = new BigDecimal(0);
					}
					try {
						remark = storeMmfDepartmentT.getRemarks();
						if (remark == null) {
							remark = "";
						}
						hData.put("remark", remark);
					} catch (Exception e) {
						remark = "";
					}
					try {
						departmentName = storeMmfDepartmentT
								.getStoreMmfDepartmentM().getStoreWardDept()
								.getDepartmentName();

						if (departmentName == null) {
							departmentName = "";
						}
						hData.put("departmentName", departmentName);
					} catch (Exception e) {
						departmentName = "";
					}
					vResult.add(hData);
				}

			}

		}

		catch (HibernateException e) {
			e.printStackTrace();
		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {

			List<StoreMmfDepartmentT> alreadyUpdatedTList = new ArrayList<StoreMmfDepartmentT>();
			HibernateTemplate hbt = getHibernateTemplate();

			if (!box.getString("pvmsNo").equals("")
					|| (map.get("firstItem") != null)) {
				String pvms2 = box.getString("pvmsNo");
				/*
				 * if((map.get("firstItem")!=null)){
				 * pvms2=((MasStoreItem)map.get("firstItem")).getPvmsNo(); }
				 */
				alreadyUpdatedTList = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear",
								box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("m.MmfStoreType",
								box.getString("storeType")))
						.createAlias("Item", "i")
						.add(Restrictions.eq("i.PvmsNo", pvms2))
						.add(Restrictions.eq("ApprovedStatus", "p")).list();

				if (alreadyUpdatedTList != null
						&& alreadyUpdatedTList.size() > 0) {
					map.put("tListForDispensary", "true");
				}

				else {
					map.put("tListForDispensary", "false");
				}
			}
			List<StoreMmfItemRemarks> storeMmfItemRemarksList = new ArrayList<StoreMmfItemRemarks>();
			// showing remarks for particular pvms item
			storeMmfItemRemarksList = session
					.createCriteria(StoreMmfItemRemarks.class)
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.add(Restrictions.eq("MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("MmfStoreType",
							box.getString("storeType"))).list();

			if (storeMmfItemRemarksList != null
					&& storeMmfItemRemarksList.size() > 0) {
				map.put("updateRemarksForItem", storeMmfItemRemarksList.get(0)
						.getRemarks());
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);

		map.put("pvmsNo", box.get("pvmsNo"));
		return map;

	}

	public Map<String, Object> updateGridItemsInMmfDepartmentApproval(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
		List<StoreMmfDepartmentT> storeMmfDepartmentTListForDispensary = new ArrayList<StoreMmfDepartmentT>();
		StoreMmfDepartmentT storeMmfDepartmentT = null;
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		StoreMmfDepartmentM storeMmfDepartmentM = new StoreMmfDepartmentM();
		BigDecimal sumValueForDispensary = new BigDecimal(0);
		String lastChgBy = "";
		Date lastChgDate = null;
		String lastChgTime = "";
		try {
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment as mi where mi.Status = 'y'");

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Vector srno = box.getVector("srno");
			Vector currQtymmf = box.getVector("currQtymmf");

			Vector items = box.getVector("id");
			Vector remark = box.getVector("remark");
			storeMmfDepartmentTList = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.MmfStoreType", box.get("storeType")))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))

					.list();

			String obj = null;
			for (int i = 0; i < srno.size(); i++) {
				int itemId = Integer.parseInt(items.get(i).toString());
				StoreMmfDepartmentT tObj = (StoreMmfDepartmentT) hbt.load(
						StoreMmfDepartmentT.class, itemId);

				tObj.setCurrYearMmf(new BigDecimal(currQtymmf.get(i).toString()));
				tObj.setRemarks(remark.get(i).toString());
				tObj.getStoreMmfDepartmentM().setStatus("p");
				tObj.setApprovedStatus("p");
				/*
				 * if(!box.getString("updateRemarksForItem").equals("")){
				 * List<StoreMmfDepartmentT>listForUpdationOfRemarks=new
				 * ArrayList<StoreMmfDepartmentT>(); }
				 */
				hbt.update(tObj);
				hbt.refresh(tObj);
			}
			// code for inserting 25% mmf of total mmf to dispensary misc
			// department
			List<StoreMmfDepartmentM> mListForDispensary = new ArrayList<StoreMmfDepartmentM>();
			List<StoreMmfDepartmentT> tListForDispensary = new ArrayList<StoreMmfDepartmentT>();
			List<StoreMmfDepartmentT> tListForDispensary1 = new ArrayList<StoreMmfDepartmentT>();
			mListForDispensary = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.createAlias("StoreWardDept", "s")
					.add(Restrictions.eq("s.Id", 55))
					.add(Restrictions.eq("MmfStoreType", "e")).list();

			if (mListForDispensary == null || mListForDispensary.size() == 0) {

				String mmfNo = "01/" + box.getInt(MMF_DEPARTMENT_DATE);
				storeMmfDepartmentM.setDocNo(mmfNo);
				storeMmfDepartmentM.setMmfForTheYear(box
						.getInt(MMF_DEPARTMENT_DATE));
				storeMmfDepartmentM.setMmfStoreType("e");
				storeMmfDepartmentM.setLastChgBy("admin");

				storeMmfDepartmentM
						.setLastChgDate(HMSUtil
								.convertStringTypeDateToDateType(box
										.get(CHANGED_DATE)));
				storeMmfDepartmentM.setLastChgTime(box.get(CHANGED_TIME));
				storeMmfDepartmentM.setStatus("p");
				MasHospital masHospital = new MasHospital();
				masHospital.setId(1);
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(55);
				storeMmfDepartmentM.setStoreWardDept(masDepartment);
				storeMmfDepartmentM.setHospital(masHospital);
				hbt.save(storeMmfDepartmentM);
				hbt.refresh(storeMmfDepartmentM);
			}

			List<StoreMmfDepartmentM> newMListForDispensary = new ArrayList<StoreMmfDepartmentM>();
			newMListForDispensary = session
					.createCriteria(StoreMmfDepartmentM.class)
					.add(Restrictions.eq("MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.createAlias("StoreWardDept", "s")
					.add(Restrictions.eq("s.Id", 55))
					.add(Restrictions.eq("MmfStoreType", "e")).list();
			// List
			// objectList=session.createSQLQuery(queryForAllPvmsItems).list();
			// List<MasStoreItem> allPvmsList=new ArrayList<MasStoreItem>();
			/*
			 * for (Iterator iterator = objectList.iterator();
			 * iterator.hasNext();) { MasStoreItem masStoreItem=new
			 * MasStoreItem(); Object[] object = (Object[]) iterator.next();
			 * //int srNo = (Integer)object[0];
			 * masStoreItem.setId((Integer)object[0]) ;
			 * masStoreItem.setPvmsNo((String)object[1]);
			 * masStoreItem.setNomenclature((String)object[3]);
			 * allPvmsList.add(masStoreItem); }
			 */
			int count = 1;
			/*
			 * for(MasStoreItem ms:allPvmsList) {
			 */
			String sumOfMMFForSinglePvmsId = "select sum(curr_year_mmf) from store_mmf_department_t t "
					+ "left outer join store_mmf_department_m m "
					+ " on t.store_mmf_department_m_id=m.id left outer join mas_store_item i on i.item_id=t.item_id "
					+ " where i.pvms_no='"
					+ box.getString("pvmsNo")
					+ "' and m.mmf_for_the_year='"
					+ box.getInt(MMF_DEPARTMENT_DATE)
					+ "' and m.mmf_store_type='"
					+ box.getString("storeType")
					+ "'  and m.store_ward_dept!=55 ";

			List objectList1 = new ArrayList();
			objectList1 = session.createSQLQuery(sumOfMMFForSinglePvmsId)
					.list();

			if (objectList1 != null && objectList1.size() > 0) {

				if (objectList1.get(0) != null) {
					sumValueForDispensary = new BigDecimal(
							Double.parseDouble((objectList1.get(0).toString())) / (4.0));

				}
			}
			tListForDispensary = session
					.createCriteria(StoreMmfDepartmentT.class)
					.createAlias("StoreMmfDepartmentM", "m")
					.add(Restrictions.eq("m.MmfForTheYear",
							box.getInt(MMF_DEPARTMENT_DATE)))
					.add(Restrictions.eq("m.StoreWardDept.Id", 55))
					.add(Restrictions.eq("m.MmfStoreType", "e"))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.PvmsNo", box.getString("pvmsNo")))
					.list();

			if (tListForDispensary != null
					&& tListForDispensary.size() > 0
					&& !box.getString("UpdateWithoutBuffer").equals(
							"UpdateWithoutBuffer")) {
				if (tListForDispensary.get(0).getMmfInQty() == new BigDecimal(
						0.00)
						|| ("0.00").equals(tListForDispensary.get(0)
								.getMmfInQty().toString())) {
					StoreMmfDepartmentT oldStoreMmfDepartmentT = new StoreMmfDepartmentT();
					oldStoreMmfDepartmentT = tListForDispensary.get(0);
					oldStoreMmfDepartmentT
							.setCurrYearMmf(sumValueForDispensary);
					oldStoreMmfDepartmentT.setMmfInQty(sumValueForDispensary);
					hbt.update(oldStoreMmfDepartmentT);
					hbt.refresh(oldStoreMmfDepartmentT);
				}
			}
			StoreMmfItemRemarks storeMmfItemRemarks = new StoreMmfItemRemarks();

			if (objectList1 != null && objectList1.size() > 0) {

				if (objectList1.get(0) != null) {
					tListForDispensary1 = session
							.createCriteria(StoreMmfDepartmentT.class)
							.createAlias("StoreMmfDepartmentM", "m")
							.add(Restrictions.eq("m.MmfForTheYear",
									box.getInt(MMF_DEPARTMENT_DATE) - 1))
							.add(Restrictions.eq("m.StoreWardDept.Id", 55))
							.add(Restrictions.eq("m.MmfStoreType", "e"))
							.createAlias("Item", "i")
							.add(Restrictions.eq("i.PvmsNo",
									box.getString("pvmsNo"))).list();
					if (tListForDispensary == null
							|| tListForDispensary.size() == 0) {

						StoreMmfDepartmentT newStoreMmfDepartmentT = new StoreMmfDepartmentT();
						StoreMmfDepartmentM storeMmfDepartmentM1 = new StoreMmfDepartmentM();
						storeMmfDepartmentM1.setId(newMListForDispensary.get(0)
								.getId());
						newStoreMmfDepartmentT
								.setStoreMmfDepartmentM(storeMmfDepartmentM1);
						newStoreMmfDepartmentT
								.setCurrYearMmf(sumValueForDispensary);
						newStoreMmfDepartmentT
								.setMmfInQty(sumValueForDispensary);
						newStoreMmfDepartmentT.setApprovedStatus("p");
						if (tListForDispensary1 != null
								&& tListForDispensary1.size() > 0) {

							if (tListForDispensary1.get(0).getCurrYearMmf() != null) {
								newStoreMmfDepartmentT
										.setPreYearMmf(tListForDispensary1.get(
												0).getCurrYearMmf());
							} else {
								newStoreMmfDepartmentT
										.setPreYearMmf(new BigDecimal(0));
							}
						} else {
							newStoreMmfDepartmentT
									.setPreYearMmf(new BigDecimal(0));
						}
						newStoreMmfDepartmentT.setSrNo(count);
						count++;
						MasStoreItem masStoreItem = new MasStoreItem();
						List<MasStoreItem> pvmsCorrespondingIdList = session
								.createCriteria(MasStoreItem.class)
								.add(Restrictions.eq("PvmsNo",
										box.getString("pvmsNo"))).list();
						if (pvmsCorrespondingIdList != null
								&& pvmsCorrespondingIdList.size() > 0) {
							masStoreItem.setId(pvmsCorrespondingIdList.get(0)
									.getId());
						}
						newStoreMmfDepartmentT.setItem(masStoreItem);

						if (!box.getString("UpdateWithoutBuffer").equals(
								"UpdateWithoutBuffer")) {
							hbt.save(newStoreMmfDepartmentT);
							hbt.refresh(newStoreMmfDepartmentT);
						}

					}
				}

				// updating last chgby and lastchgdate and last chg time
				List<StoreMmfDepartmentT> storeMmfDepartmentTList3 = new ArrayList<StoreMmfDepartmentT>();
				storeMmfDepartmentTList3 = session
						.createCriteria(StoreMmfDepartmentT.class)
						.createAlias("StoreMmfDepartmentM", "m")
						.add(Restrictions.eq("m.MmfForTheYear",
								box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("m.MmfStoreType",
								box.get("storeType")))
						.createAlias("Item", "i")
						.add(Restrictions.eq("i.PvmsNo",
								box.getString("pvmsNo")))
						.addOrder(Order.asc("m.StoreWardDept")).list();
				for (StoreMmfDepartmentT storeMmfDepartmentT3 : storeMmfDepartmentTList3) {
					StoreMmfDepartmentT t1 = storeMmfDepartmentT3;
					t1.setLastChgBy(box.getString("userName"));
					t1.setLastChgTime((String) HMSUtil.getCurrentDateAndTime()
							.get("currentTime"));
					t1.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType((String) HMSUtil
									.getCurrentDateAndTime().get("currentDate")));
					hbt.update(t1);
					hbt.refresh(t1);

				}
				// saving Remarks for the pvms item in store_mmf_item_remarks

				List<MasStoreItem> pvmsCorrespondingIdList = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.eq("PvmsNo", box.getString("pvmsNo")))
						.list();

				List<StoreMmfItemRemarks> storeMmfItemRemarksList = new ArrayList<StoreMmfItemRemarks>();
				storeMmfItemRemarksList = session
						.createCriteria(StoreMmfItemRemarks.class)
						.createAlias("Item", "i")
						.add(Restrictions.eq("i.PvmsNo",
								box.getString("pvmsNo")))
						.add(Restrictions.eq("MmfForTheYear",
								box.getInt(MMF_DEPARTMENT_DATE)))
						.add(Restrictions.eq("MmfStoreType",
								box.getString("storeType"))).list();

				if (box.getString("updateRemarksForItem") != null
						&& !box.getString("updateRemarksForItem").equals("")) {
					storeMmfItemRemarks.setRemarks(box
							.getString("updateRemarksForItem"));
				}

				MasStoreItem masStoreItem1 = new MasStoreItem();
				storeMmfItemRemarks.setMmfForTheYear(box
						.getInt(MMF_DEPARTMENT_DATE));
				storeMmfItemRemarks.setMmfStoreType(box.getString("storeType"));
				if (pvmsCorrespondingIdList != null
						&& pvmsCorrespondingIdList.size() > 0) {
					masStoreItem1.setId(pvmsCorrespondingIdList.get(0).getId());
				}
				storeMmfItemRemarks.setItem(masStoreItem1);
				if (storeMmfItemRemarksList != null
						&& storeMmfItemRemarksList.size() > 0) {
					StoreMmfItemRemarks objectForUpdate = storeMmfItemRemarksList
							.get(0);
					objectForUpdate.setRemarks(box
							.getString("updateRemarksForItem"));

					hbt.update(objectForUpdate);
					hbt.refresh(objectForUpdate);
				} else {
					hbt.save(storeMmfItemRemarks);
				}

			}
			// }

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		box.put("fromUpdate", "fromUpdate");
		map = getCurrentYearMmfByItem(box);
		map.put("departmentList", departmentList);
		map.put("updateRemarksForItem", box.getString("updateRemarksForItem"));
		return map;
	}

	public Map<String, Object> getItemListForNomenclature(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();

		Session session = (Session) getSession();
		String pvmsNo = null;

		try {

			Map<String, Object> utilMap = new HashMap<String, Object>();

			List objectList = new ArrayList();
			String str = box.get("autoHint") + "%";

			/*
			 * if((objectList.size() > 0)&&(stockIdList.size()>0)){
			 * 
			 * Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions
			 * .like("Nomenclature",str)) .add(Restrictions.eq("Department.Id",
			 * deptId)) .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.not(Restrictions.in("Id", objectList)));
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 * }else if((stockIdList.size()>0)){ Criteria c =
			 * session.createCriteria
			 * (MasStoreItem.class).add(Restrictions.like("Nomenclature",str))
			 * .add(Restrictions.in("Id",stockIdList))
			 * .add(Restrictions.eq("Department.Id", deptId));
			 * 
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list(); }
			 */

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));

			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		map.put("forMMf", "forMMf");

		return map;

	}

	public Map<String, Object> checkNomenclatureExistence(
			Map<String, Object> dataMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {

			String nomenclature = "" + dataMap.get("nomenclature");

			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Nomenclature", nomenclature));
			itemList = c.list();
			map.put("itemList", itemList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> getItemObject(Box box) {
		Session session = (Session) getSession();

		String pvmsName = "";
		String qry = "";
		MasStoreItem firstItem = new MasStoreItem();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			if (!"".equals(box.get("nomenclature"))) {
				itemList = session
						.createCriteria(MasStoreItem.class)
						.add(Restrictions.eq("Nomenclature",
								box.get("nomenclature"))).list();
				if (itemList != null && itemList.size() > 0) {
					firstItem = itemList.get(0);

				} else {
					firstItem.setPvmsNo("");
					firstItem.setNomenclature("");

					// firstItem.getItemConversion().setItemUnitName("");

				}
			} else {
				firstItem.setPvmsNo("");
				firstItem.setNomenclature("");
				// firstItem.getItemConversion().setItemUnitName("");

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		box.put("firstItem", firstItem);
		if (firstItem.getPvmsNo() != null && !"".equals(firstItem.getPvmsNo())) {
			box.put("pvmsNo", firstItem.getPvmsNo());
		}
		box.put("fromSearch", "true");
		map.putAll(getCurrentYearMmfByItem(box));
		map.put("firstItem", firstItem);
		return map;

	}

	public Map<String, Object> getItemObjectFromPvms(Box box) {
		Session session = (Session) getSession();

		String pvmsName = "";
		String qry = "";
		MasStoreItem firstItem = new MasStoreItem();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			if (!"".equals(box.get("pvmsNo"))) {
				pvmsName = "" + box.get("pvmsNo") + "%";
				itemList = session.createCriteria(MasStoreItem.class)
						.add(Restrictions.like("PvmsNo", pvmsName)).list();

				if (itemList != null && itemList.size() > 0) {
					firstItem = itemList.get(0);

				} else {
					firstItem.setPvmsNo("");
					firstItem.setNomenclature("");

				}

			} else {
				firstItem.setPvmsNo("");
				firstItem.setNomenclature("");

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		box.put("firstItem", firstItem);
		if (firstItem.getPvmsNo() != null && !"".equals(firstItem.getPvmsNo())) {
			box.put("pvmsNo", firstItem.getPvmsNo());
		}

		box.put("fromSearch", "true");

		map.putAll(getCurrentYearMmfByItem(box));
		if (box.getString("flag").equals("true")) {
			map.put("firstItem", firstItem);
		} else if (box.getString("enter").equals("true")) {
			map.put("firstItem", firstItem);
		} else {
			map.put("firstItem", null);
		}
		return map;

	}

	public List<MmfItemDetails> getDataForItemMmfReport(int date,
			String storeType) {
		Session session = getSession();
		List<MmfItemDetails> mmfItemDetailsList = new ArrayList<MmfItemDetails>();
		try {
			String qry = "select item_id from mas_store_item ";
			List<Object> masStoreItemList = new ArrayList<Object>();
			masStoreItemList = session.createSQLQuery(qry).list();
			List<StoreMmfDepartmentT> storeMmfDepartmentTList = new ArrayList<StoreMmfDepartmentT>();
			for (Object obj : masStoreItemList) {
				MmfItemDetails mmfItemDetails = new MmfItemDetails();
				String sumOfMMFForSinglePvmsIdForCurrentYear = "select sum(curr_year_mmf) from store_mmf_department_t t "
						+ "left outer join store_mmf_department_m m "
						+ " on t.store_mmf_department_m_id=m.id left outer join mas_store_item i on i.item_id=t.item_id "
						+ " where i.item_id='"
						+ (Integer) obj
						+ "' and m.mmf_for_the_year='"
						+ date
						+ "' and m.mmf_store_type='"
						+ storeType
						+ "'  and m.store_ward_dept!=55 ";
				List<Object> objectList = session.createSQLQuery(
						sumOfMMFForSinglePvmsIdForCurrentYear).list();
				if (objectList.get(0) != null) {
					mmfItemDetails.setCurrentYearSum(((BigDecimal) objectList
							.get(0)).doubleValue());
				}
				String sumOfMMFForSinglePvmsIdForPreviousYear = "select sum(curr_year_mmf) from store_mmf_department_t t "
						+ "left outer join store_mmf_department_m m "
						+ " on t.store_mmf_department_m_id=m.id left outer join mas_store_item i on i.item_id=t.item_id "
						+ " where i.item_id='"
						+ (Integer) obj
						+ "' and m.mmf_for_the_year='"
						+ (date - 1)
						+ "' and m.mmf_store_type='"
						+ storeType
						+ "'  and m.store_ward_dept!=55 ";

				objectList = session.createSQLQuery(
						sumOfMMFForSinglePvmsIdForPreviousYear).list();
				if (objectList.get(0) != null) {
					mmfItemDetails.setPreviousYearSum(((BigDecimal) objectList
							.get(0)).doubleValue());
				}

				MasStoreItem masStoreItem = (MasStoreItem) session.load(
						MasStoreItem.class, (Integer) obj);
				mmfItemDetails.setNomeclature("[" + masStoreItem.getPvmsNo()
						+ "]" + masStoreItem.getNomenclature());
				mmfItemDetailsList.add(mmfItemDetails);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return mmfItemDetailsList;
	}

	public Map<String, Object> getSectionList() {
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		try {

			sectionList = session.createCriteria(MasStoreSection.class)
					.add(Restrictions.eq("Status", "y")).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("sectionList", sectionList);
		return map;
	}

	public Map<String, Object> getEcelSheetDataForMMf(Box box) {
		int date = box.getInt(MMF_DEPARTMENT_DATE);
		String storeType = box.get("storeType");
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		String qry = "select concat('[',c.`pvms_no`,'] ',c.`nomenclature`) AS mas_store_item_nomenclature, "
				+ "sum(if(a.mmf_for_the_year="
				+ date
				+ "-1,b.curr_year_mmf,0)) as 'prev year', "
				+ "sum(if(a.mmf_for_the_year="
				+ date
				+ ",b.curr_year_mmf,0)) as 'Appr1 MMF' ,r.remark  "
				+ "from "
				+ "store_mmf_department_m a,  store_mmf_department_t b, mas_store_item c left join store_mmf_item_remarks r on r.item_id=c.item_id ,mas_department d, "
				+

				"mas_store_item_conversion e "
				+ "where a.id = b.store_mmf_department_m_id and e.item_conversion_id=c.item_conversion_id and "
				+ "a.store_ward_dept=d.department_id  "
				+ "and b.item_id = c.item_id "
				+ "and a.mmf_store_type='"
				+ storeType + "' " + "group by b.item_id";

		try {
			List<Object> mmfDataList = new ArrayList<Object>();

			mmfDataList = session.createSQLQuery(qry).list();

			byte[] buffer = new byte[18024];
			HSSFWorkbook wb = new HSSFWorkbook();
			HSSFSheet sheet = wb.createSheet("TESTEXCEL");
			// Create a new font and alter it.
			HSSFFont font = wb.createFont();
			font.setFontHeightInPoints((short) 10);
			font.setFontName(HSSFFont.FONT_ARIAL);
			font.setColor((short) 62);
			font.setItalic(false);
			font.setStrikeout(false);
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			HSSFFont font1 = wb.createFont();
			font1.setFontHeightInPoints((short) 10);
			font1.setFontName(HSSFFont.FONT_ARIAL);
			font1.setColor((short) 80);
			font1.setItalic(false);
			font1.setStrikeout(false);
			font1.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

			// Fonts are set into a style so create a new one to
			// use.
			HSSFCellStyle style = wb.createCellStyle();
			style.setFont(font);

			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setFont(font1);
			style1.setLocked(true);

			HSSFRow row2 = sheet.createRow((short) 2);
			// Create a cell and put a value in it.
			HSSFCell cell20 = row2.createCell((short) 3);
			cell20.setCellValue("COMMAND HOSPITAL AIR FORCE, BANGALORE -7");
			cell20.setCellStyle(style1);
			sheet.addMergedRegion(new Region(2, (short) 3, 2, (short) 7));

			HSSFRow row3 = sheet.createRow((short) 3);
			// Create a cell and put a value in it.
			HSSFCell cell30 = row3.createCell((short) 3);
			cell30.setCellValue("MMF Entry Approval Form Item Wise");
			cell30.setCellStyle(style1);
			sheet.addMergedRegion(new Region(3, (short) 3, 3, (short) 7));

			HSSFRow row4 = sheet.createRow((short) 4);
			// Create a cell and put a value in it.
			HSSFCell cell40 = row4.createCell((short) 4);
			cell40.setCellValue("Mmf for The Year :" + date + "");
			cell40.setCellStyle(style1);
			HSSFCell cell43 = row4.createCell((short) 1);
			cell43.setCellValue("Mmf for The Year :" + date + "");
			cell43.setCellStyle(style1);
			sheet.addMergedRegion(new Region(4, (short) 1, 4, (short) 7));

			HSSFRow row5 = sheet.createRow((short) 5);
			if (storeType.equalsIgnoreCase("e")) {
				storeType = "Expandable";
			} else {
				storeType = "ECHS";
			}
			HSSFCell cell44 = row5.createCell((short) 5);
			cell40.setCellValue("Mmf Type :");
			cell40.setCellStyle(style1);
			HSSFCell cell45 = row5.createCell((short) 3);
			cell45.setCellValue("Mmf Type :" + storeType);
			cell45.setCellStyle(style1);
			sheet.addMergedRegion(new Region(5, (short) 3, 5, (short) 7));

			HSSFRow headingRow = sheet.createRow((short) 6);

			HSSFCell cell50 = headingRow.createCell((short) 0);
			cell50.setCellValue("Sl.No");
			cell50.setCellStyle(style);
			HSSFCell cell51 = headingRow.createCell((short) 1);
			cell51.setCellValue("Pvms/Nomenclature");
			cell51.setCellStyle(style);
			HSSFCell cell52 = headingRow.createCell((short) 2);
			cell52.setCellValue("Total Pre Year Mmf");
			cell52.setCellStyle(style);

			HSSFCell cell53 = headingRow.createCell((short) 3);
			cell53.setCellValue("Total Approved Mmf");
			cell53.setCellStyle(style);
			HSSFCell cell531 = headingRow.createCell((short) 4);
			cell531.setCellValue("Remarks");
			cell531.setCellStyle(style);

			int row = 7;
			int slno = 0;
			for (Iterator iterator = mmfDataList.iterator(); iterator.hasNext();) {
				Object[] object = (Object[]) iterator.next();
				sheet.createRow((short) row).createCell((short) 0)
						.setCellValue(++slno);
				sheet.createRow((short) row).createCell((short) 1)
						.setCellValue((String) (object[0]));
				if (object[1] != null) {
					sheet.createRow((short) row).createCell((short) 2)
							.setCellValue(object[1].toString());
				} else {
					sheet.createRow((short) row).createCell((short) 2)
							.setCellValue("");
				}
				if (object[2] != null) {
					sheet.createRow((short) row).createCell((short) 3)
							.setCellValue(object[2].toString());
				} else {
					sheet.createRow((short) row).createCell((short) 3)
							.setCellValue("");
				}
				if (object[3] != null) {
					sheet.createRow((short) row).createCell((short) 4)
							.setCellValue((String) object[3]);
				} else {
					sheet.createRow((short) row).createCell((short) 4)
							.setCellValue("");
				}

				sheet.setColumnWidth((short) 0, (short) (6 * 256));
				sheet.setColumnWidth((short) 1, (short) (60 * 256));
				sheet.setColumnWidth((short) 2, (short) (15 * 256));
				sheet.setColumnWidth((short) 3, (short) (15 * 256));
				sheet.setColumnWidth((short) 4, (short) (60 * 256));
				row++;
			}
			String grp_name = "MMFReports";
			// Write the output to a file
			grp_name = grp_name + ".xls";
			FileOutputStream fileOut = new FileOutputStream(grp_name);
			wb.write(fileOut);
			fileOut.close();

			map.put("flag", "DataFound");
			map.put("download_path", grp_name);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			map.put("flag", "NoData");
		}

		return map;
	}

	public Map getSOItemDetails(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> masterDataMap = new HashMap<String, Object>();
		List<StorePoDetail> storePoDetailList = new ArrayList<StorePoDetail>();
		List<StorePoHeader> storePoHeaderList = new ArrayList<StorePoHeader>();
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;

		List objectList = new ArrayList();
		List objectList1 = new ArrayList();
		String itemField = box.get("search_text");
		String pvmsNoField = box.get("pvms");

		String autoHint = box.get(itemField);
		try {
			String str = itemField + "%";
			String str1 = pvmsNoField + "%";

			Criteria ch = session.createCriteria(StorePoHeader.class).add(
					Restrictions.eq("Id", box.getInt("po_id")));
			storePoHeaderList = ch.list();
			StorePoHeader storePoHeader = (StorePoHeader) storePoHeaderList
					.get(0);

			/*
			 * Criteria cd = session.createCriteria(StorePoDetail.class)
			 * .createAlias("Po", "p").createAlias("Item", "item")
			 * .add(Restrictions.eq("p.Id", box.getInt("po_id")));
			 */
			Criteria cd = session.createCriteria(StorePoDetail.class)
					.createAlias("Po", "p").createAlias("Item", "item")
					.add(Restrictions.eq("p.Id", box.getInt("po_id")))
					// .add(Restrictions.not(Restrictions.eqProperty("QuantityOrdered",
					// "QuantityReceived")))
					.add(Expression
							.sqlRestriction("quantity_ordered != coalesce(quantity_received,0)"));

			if (pvmsNoField != null && pvmsNoField != "") {
				cd = cd.add(Restrictions.like("item.PvmsNo", str1));
			} else if (itemField != null && itemField != "") {
				cd = cd.add(Restrictions.like("item.Nomenclature", str));
			}
			storePoDetailList = cd.list();

			for (StorePoDetail storePoDetail : storePoDetailList) {
				int item_id = 0;
				String pvmsNo = null;
				String nomenclature = null;
				String au = null;
				if (storePoDetail.getItem() != null) {
					pvmsNo = storePoDetail.getItem().getPvmsNo();
					item_id = storePoDetail.getItem().getId();
					nomenclature = storePoDetail.getItem().getNomenclature();

					if (storePoDetail.getItem().getItemConversion() != null) {
						au = storePoDetail.getItem().getItemConversion()
								.getPurchaseUnit().getUnitName();
					} else {
						au = "-";
					}
					hData = new HashMap<String, Object>();
					hData.put("itemId", item_id);
					hData.put(PVMS_NO, pvmsNo);
					hData.put(NOMENCLATURE, nomenclature);
					hData.put(AU, au);
					vResult.add(hData);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();

		}
		if (vResult.size() > 0) {
			testPageData = new HashMap[vResult.size()];
			vResult.copyInto(testPageData);
		}

		try {
			pagedArray = new PageUtil().convertToPagedArrayIndex(testPageData,
					box);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("pagedArray", pagedArray);
		map.put("itemField", itemField);
		map.put("pvmsNoField", pvmsNoField);
		map.put("storePoHeaderList", storePoHeaderList);
		map.put("storePoDetailList", storePoDetailList);
		return map;
	}

	public boolean submitAdjustLoanIn(int loaninId, StoreGrnM storeGrnM,
			int poId, List list, Map<String, Object> infoMap) {
		return false;
	}

	public Map<String, Object> getOtherItemsForIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> itemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<Object[]> mainStoreStockList = new ArrayList<Object[]>();
		
		try {
			String str = "";
			str = box.get("requiredField");
			str = str.trim();
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", str)).list();
			map.put("itemList", itemList);
			/*String qry = "select sum(inp.closing_stock) from store_item_batch_stock as inp where department_id = "
					+ box.getInt(FROM_WARD)
					+ " and item_id="
					+ itemList.get(0).getId()
					+ " and hospital_id = "
					+ box.getInt("hospitalId") + " group by inp.item_id ";*/
			String blockStatus [] = {"Temporary Block","Parmanent Block"};
			Criteria c3 = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Item.Id", itemList.get(0).getId()))
					.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
					.add(Restrictions.eq("Department.Id", box.getInt(FROM_WARD)))
			.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
			.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock")));
			List<Object[]> objectList = c3.list();
			/*List<Object> objectList = session.createSQLQuery(qry).list();*/
			if (objectList != null && objectList.size() > 0) {
				for (Object[] obj : objectList) {
					
					if(obj[1] != null){
					map.put("stock", (BigDecimal) obj[1]);
					}
				}

			} else {
				map.put("stock", new BigDecimal(0));
			}
			//=======================================
			String depCodeMainStore = "";
			String stockMessage = "";
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");
			try {
				Properties prop = new Properties();
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
				depCodeMainStore = prop.getProperty("depCodeMainStore");
			} catch (IOException e) {
				e.printStackTrace();
			}
			mainStoreStockList = session.createCriteria(StoreItemBatchStock.class).createAlias("Department", "dept")
					.add(Restrictions.eq("Item.Id", itemList.get(0).getId()))
					.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
					.add(Restrictions.eq("dept.DepartmentCode", depCodeMainStore))
			.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
			.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock"))).list();
			if (mainStoreStockList != null && mainStoreStockList.size() > 0) {
				for (Object[] stockObj : mainStoreStockList) {
					
					if(stockObj[1] != null && ((BigDecimal)stockObj[1]).compareTo(new BigDecimal(0))>0){
						
					}else{
						stockMessage="Main Store Stock Not Available";
						map.put("stockMessage", stockMessage);
					}
				}

			} else {
				stockMessage="Main Store Stock Not Available";
				map.put("stockMessage", stockMessage);
			}
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getItemListForVendorReturnJsp(Box box) {
		return null;
	}

	public boolean deleteDefectiveItems(int id) {
		boolean flag = false;
		Session session = (Session) getSession();
		List<StoreDefectiveDrugT> storeDefectiveDrugTList = new ArrayList<StoreDefectiveDrugT>();
		List<StoreDefectiveDrugM> storeDefectiveDrugMList = new ArrayList<StoreDefectiveDrugM>();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			storeDefectiveDrugTList = session
					.createCriteria(StoreDefectiveDrugT.class)
					.add(Restrictions.eq("DefectM.Id", id)).list();
			for (StoreDefectiveDrugT storeDefectiveDrugT : storeDefectiveDrugTList) {
				session.delete(storeDefectiveDrugT);

			}
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public boolean deleteDefectiveDrug(Box box) {
		boolean flag = false;
		int pageNo = 0;
		int entryId = 0;
		Session session = (Session) getSession();
		List<StoreDefectiveDrugT> storeDefectiveDrugTList = new ArrayList<StoreDefectiveDrugT>();
		List<StoreDefectiveDrugM> storeDefectiveDrugMList = new ArrayList<StoreDefectiveDrugM>();
		try {
			Vector itemIds = box.getVector("itemIds");

			Vector batchNos = box.getVector("batchNos");
			Vector manufacturerIds = box.getVector("manufacturerIds");
			Vector expiryIds = box.getVector("expiryIds");
			Vector itemIds1 = new Vector();

			Vector batchNos1 = new Vector();
			Vector manufacturerIds1 = new Vector();

			Vector expiryIds1 = new Vector();
			for (int i = 0; i < itemIds.size(); i++) {
				if (!(expiryIds.get(i).toString().equals(""))
						&& expiryIds.get(i) != null) {
					expiryIds1.add(expiryIds.get(i));
				}
				if (!(itemIds.get(i).toString().equals(""))
						&& itemIds.get(i) != null) {
					itemIds1.add(itemIds.get(i));
				}
				if (!(batchNos.get(i).toString().equals(""))
						&& batchNos.get(i) != null) {
					batchNos1.add(batchNos.get(i));
				}
				if (!(manufacturerIds.get(i).toString().equals(""))
						&& manufacturerIds.get(i) != null) {
					manufacturerIds1.add(manufacturerIds.get(i));
				}
			}

			if (box.get("pageNo") != null) {
				pageNo = Integer.parseInt(box.get("pageNo"));

			}
			if (box.get(ENTRY_ID) != null) {
				entryId = Integer.parseInt(box.get(ENTRY_ID));

			}

			for (int i = 0; i < itemIds1.size(); i++) {

				SimpleDateFormat formatterIn = new SimpleDateFormat(
						"dd/MM/yyyy");
				SimpleDateFormat formatterOut = new SimpleDateFormat(
						"yyyy-MM-dd");
				String date4MySQL1 = formatterOut.format(formatterIn
						.parse(expiryIds1.get(i).toString()));
				storeDefectiveDrugTList = session
						.createCriteria(StoreDefectiveDrugT.class)
						.add(Restrictions.eq("DefectM.Id", entryId))
						.add(Restrictions.eq("BatchNo", batchNos1.get(i)
								.toString()))
						.add(Restrictions.eq("Item.Id",
								Integer.valueOf(itemIds1.get(i).toString())))
						.add(Restrictions.eq("ExpiryDate",
								java.sql.Date.valueOf(date4MySQL1)))
						.add(Restrictions.eq("ManufacturedBy.Id", Integer
								.valueOf(manufacturerIds1.get(i).toString())))
						.list();
				StoreDefectiveDrugT storeDefectiveDrugT = storeDefectiveDrugTList
						.get(0);

				String hql = "delete from jkt.hms.masters.business.StoreDefectiveDrugT as a where a.Id='"
						+ storeDefectiveDrugTList.get(0).getId() + "' ";
				Query query = session.createQuery(hql);
				int row = query.executeUpdate();

			}
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public Map<String, Object> updateGridItemsInVendorReturn(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		Session session = (Session) getSession();
		String succesfullyAdded = "";
		String fromDateToDate = null;
		String issueType = "w";
		int userId = 0;
		List<String> pvmsList = (List) dataMap.get("pvmsList");
		List<String> batchNumberList = (List) dataMap.get("batchNumberList");
		// List brandNameList = (List) dataMap.get("brandNameList");
		List expiryDateList = (List) dataMap.get("expiryDateList");
		List issQtyList = (List) dataMap.get("issQtyList");
		List costPriceList = (List) dataMap.get("costPriceList");
		List amountList = (List) dataMap.get("amountList");
		List storeItemBatchStockIdList = (List) dataMap
				.get("storeItemBatchStockIdList");
		List srNolist = (List) dataMap.get("srNolist");
		String date = (String) dataMap.get("date");
		String time = (String) dataMap.get("time");
		StoreGrnReturnM storeGrnReturnM = new StoreGrnReturnM();

		String returnDate = (String) dataMap.get("returnDate");
		String returnNo = (String) dataMap.get("returnNo");
		String referenceNo = (String) dataMap.get("referenceNo");
		String SONo = (String) dataMap.get("SONo");

		int returnById = (Integer) dataMap.get("returnById");

		String remarks = (String) dataMap.get("remarks");
		String reason = (String) dataMap.get("reason");

		int vendorId = (Integer) dataMap.get("vendorId");
		int hospitalId = (Integer) dataMap.get("hospitalId");
		String userName = (String) dataMap.get("userName");
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreGrnReturnM> StoreGrnReturnMTemp = new ArrayList<StoreGrnReturnM>();
		int storeFyId = 0;
		int deptId = 0;
		int approvedById = 0;
		int storeGrnReturnMId = 0;
		deptId = Integer.parseInt("" + dataMap.get("deptId"));
		userId = Integer.parseInt("" + dataMap.get("userId"));
		if (dataMap.get("storeGrnReturnMId") != null) {
			storeGrnReturnMId = Integer.parseInt(""
					+ dataMap.get("storeGrnReturnMId"));
		}
		int itemId = Integer.parseInt("" + dataMap.get("itemId"));
		approvedById = Integer.parseInt("" + dataMap.get("approvedById"));
		Date dateToInsert = null;
		if (!date.equals("")) {
			dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);
		}
		Date returnDateForAdd = HMSUtil
				.convertStringTypeDateToDateType(returnDate);

		Transaction transaction = null;
		try {
			// --------------Transaction Started----------
			transaction = session.beginTransaction();

			List<StoreGrnReturnM> storeGrnReturnMList1 = session
					.createCriteria(StoreGrnReturnM.class)
					.add(Restrictions.eq("ReturnNo", returnNo))
					.add(Restrictions.eq("Department.Id", deptId)).list();

			storeGrnReturnM = storeGrnReturnMList1.get(0);
			map.put(VENDOR_RETURN_ID, storeGrnReturnM.getId());
			map.put("returnNo", returnNo);
			MasStoreSupplier masStoreSupplier = new MasStoreSupplier();
			masStoreSupplier.setId(vendorId);
			storeGrnReturnM.setSupplier(masStoreSupplier);

			storeGrnReturnM.setReturnDate(returnDateForAdd);
			storeGrnReturnM.setRefDocNo(referenceNo);

			MasEmployee employee = new MasEmployee();
			employee.setId(approvedById);
			storeGrnReturnM.setApprovedBy(employee);

			storeGrnReturnM.setReason(reason);
			storeGrnReturnM.setRemarks(remarks);

			MasEmployee returnBy = new MasEmployee();
			returnBy.setId(returnById);
			storeGrnReturnM.setReturnBy(returnBy);

			Users users = new Users();
			users.setId(userId);
			storeGrnReturnM.setLastChgBy(users);
			storeGrnReturnM.setLastChgDate(dateToInsert);
			storeGrnReturnM.setLastChgTime(time);
			storeGrnReturnM.setStatus("y");
			storeGrnReturnM.setSupplyOrderNo(SONo);
			hbt.update(storeGrnReturnM);

			List<StoreGrnReturnT> storeGrnReturnTList1 = session
					.createCriteria(StoreGrnReturnT.class)
					.add(Restrictions.eq("GrnReturn.Id",
							storeGrnReturnM.getId())).list();
			for (StoreGrnReturnT storeGrnReturnT : storeGrnReturnTList1) {
				List<StoreItemBatchStock> storeItemBatchStockList2 = new ArrayList<StoreItemBatchStock>();
				storeItemBatchStockList2 = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Item.Id", storeGrnReturnT
								.getItem().getId()))
						.add(Restrictions.eq("BatchNo",
								storeGrnReturnT.getBatchNo()))
						.add(Restrictions.eq("Department.Id", deptId)).list();
				StoreItemBatchStock storeItemBatchStock2 = storeItemBatchStockList2
						.get(0);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock2
						.getIssueReturn();
				BigDecimal totalQtyReturned = new BigDecimal(0);
				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned.subtract(storeGrnReturnT
							.getReturnQty());
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock2
						.getClosingStock();
				closingStock = closingStock.add(totalQtyReturned);

				storeItemBatchStock2.setIssueReturn(storeItemBatchStock2
						.getIssueReturn().subtract(totalQtyReturned));
				storeItemBatchStock2.setClosingStock(closingStock);

				hbt.update(storeItemBatchStock2);
				hbt.refresh(storeItemBatchStock2);

			}

			for (StoreGrnReturnT storeGrnReturnT : storeGrnReturnTList1) {
				hbt.delete(storeGrnReturnT);
			}
			Iterator itr = issQtyList.iterator();
			for (int i = 0; i < issQtyList.size(); i++) {
				BigDecimal totalQtyReturned;
				StoreGrnReturnT storeGrnReturnT = new StoreGrnReturnT();

				storeGrnReturnT.setGrnReturn(storeGrnReturnM);
				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(Integer.parseInt(pvmsList.get(i)));
				storeGrnReturnT.setItem(masStoreItem);
				StoreItemBatchStock storeItemBatchStock1 = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, Integer
								.parseInt((String) storeItemBatchStockIdList
										.get(i)));

				storeGrnReturnT.setBatchNo(storeItemBatchStock1.getBatchNo());
				storeGrnReturnT.setSrNo(Integer.parseInt(srNolist.get(i)
						.toString()));

				// MasStoreBrand masStoreBrand = new MasStoreBrand();
				// masStoreBrand.setId(Integer.parseInt("" +
				// brandNameList.get(i)));
				// storeGrnReturnT.setBrand(masStoreBrand);

				String expiryDate = (String) expiryDateList.get(i);
				if (expiryDate != null) {
					Date expiryDateToInsert = HMSUtil
							.convertStringTypeDateToDateType(expiryDate);
					storeGrnReturnT.setExpiryDate(expiryDateToInsert);
				} else {
					storeGrnReturnT.setExpiryDate(null);
				}
				BigDecimal issuedReturnFromJsp = new BigDecimal(""
						+ issQtyList.get(i));
				storeGrnReturnT.setReturnQty(issuedReturnFromJsp);
				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				storeGrnReturnT.setUnitRate(bigDecimal2);
				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				storeGrnReturnT.setReturnAmount(bigDecimal3);

				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));

				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock
						.getIssueReturn();

				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned.add(issuedReturnFromJsp);
				} else {
					totalQtyReturned = issuedReturnFromJsp;
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock
						.getClosingStock();
				closingStock = closingStock.subtract(issuedReturnFromJsp);

				storeItemBatchStock.setIssueReturn(totalQtyReturned);
				storeItemBatchStock.setClosingStock(closingStock);
				hbt.save(storeGrnReturnT);
				hbt.update(storeItemBatchStock);

			}

			Criteria c2 = session.createCriteria(StoreGrnReturnM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("ReturnNo", returnNo));
			StoreGrnReturnMTemp = (List<StoreGrnReturnM>) c2.list();
			for (StoreGrnReturnM grnReturnM : StoreGrnReturnMTemp) {
				storeGrnReturnMId = Integer.parseInt("" + grnReturnM.getId());
			}

			// --------------Transaction End----------
			transaction.commit();
			succesfullyAdded = "true";
		} catch (Exception e) {
			if (transaction != null) {
				transaction.rollback();
			}

			e.printStackTrace();
		}
		map.put("succesfullyAdded", succesfullyAdded);
		map.put("storeGrnReturnMId", storeGrnReturnMId);
		return map;

	}

	public Map<String, Object> updateGridItemsInDepartmentReturn(
			Map<String, Object> map) {

		Session session = (Session) getSession();
		boolean succesfullyUpdated = false;
		String fromDateToDate = null;
		String issueType = "w";
		List<String> pvmsList = (List) map.get("pvmsList");
		List<String> batchNumberList = (List) map.get("batchNumberList");

		List expiryDateList = (List) map.get("expiryDateList");
		List srNolist = (List) map.get("srNolist");
		List issQtyList = (List) map.get("issQtyList");
		List costPriceList = (List) map.get("costPriceList");
		List amountList = (List) map.get("amountList");
		List storeItemBatchStockIdList = (List) map
				.get("storeItemBatchStockIdList");
		String date = (String) map.get("date");

		int fromDeptId = (Integer) map.get("fromDeptId");
		int toDeptId = (Integer) map.get("toDeptId");
		String returnDate = (String) map.get("returnDate");
		String returnNo = (String) map.get("returnNo");
		String referenceNo = (String) map.get("referenceNo");

		int receivedById = (Integer) map.get("receivedById");
		int returnById = (Integer) map.get("returnById");

		String remarks = (String) map.get("remarks");
		String reason = (String) map.get("reason");

		int hospitalId = (Integer) map.get("hospitalId");
		int userId = (Integer) map.get("userId");
		String time = (String) map.get("time");
		String userName = (String) map.get("userName");
		int storeFyDocumentNoId = (Integer) map.get("storeFyDocumentNoId");

		StoreInternalReturnM mObj = null;
		Transaction transaction = null;
		try {
			// --------------Transaction Started----------
			transaction = session.beginTransaction();
			Date dateToInsert = HMSUtil.convertStringTypeDateToDateType(date);

			Date returnDateForAdd = HMSUtil
					.convertStringTypeDateToDateType(returnDate);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			mObj = new StoreInternalReturnM();
			List<StoreInternalReturnM> StoreInternalReturnMList2 = new ArrayList<StoreInternalReturnM>();
			StoreInternalReturnMList2 = session
					.createCriteria(StoreInternalReturnM.class)
					.add(Restrictions.eq("ReturnNo", returnNo))

					.add(Restrictions.eq("FromDepartment.Id", fromDeptId))
					.list();
			mObj = StoreInternalReturnMList2.get(0);
			map.put(ISSUE_RETURN_ID, mObj.getId());
			map.put("returnNo", returnNo);
			MasDepartment masDepartment = new MasDepartment();
			masDepartment.setId(fromDeptId);
			mObj.setFromDepartment(masDepartment);

			MasDepartment masDepartment1 = new MasDepartment();
			masDepartment1.setId(toDeptId);
			mObj.setToDepartment(masDepartment1);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(hospitalId);
			mObj.setHospital(masHospital);
			mObj.setReturnDate(returnDateForAdd);
			mObj.setReferenceNo(referenceNo);

			MasEmployee receivedBy = new MasEmployee();
			receivedBy.setId(receivedById);
			mObj.setReceivedBy(receivedBy);

			mObj.setReason(reason);
			mObj.setRemarks(remarks);

			MasEmployee returnBy = new MasEmployee();
			returnBy.setId(returnById);
			mObj.setReturnBy(returnBy);

			Users users = new Users();
			users.setId(userId);
			mObj.setLastChangedBy(users);
			mObj.setLastChangedDate(dateToInsert);
			mObj.setLastChangedTime(time);
			mObj.setStatus("y");
			hbt.update(mObj);

			List<StoreInternalReturnT> storeInternalReturnTList1 = session
					.createCriteria(StoreInternalReturnT.class)
					.add(Restrictions.eq("ReturnMain.Id", mObj.getId())).list();
			for (StoreInternalReturnT storeInternalReturnT : storeInternalReturnTList1) {
				// code for reverting back stock of from department to previeous
				// state
				List<StoreItemBatchStock> storeItemBatchStockList2 = new ArrayList<StoreItemBatchStock>();
				storeItemBatchStockList2 = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Item.Id", storeInternalReturnT
								.getItem().getId()))
						.add(Restrictions.eq("BatchNo",
								storeInternalReturnT.getBatchNo()))
						.add(Restrictions.eq("Department.Id", fromDeptId))
						.list();

				StoreItemBatchStock storeItemBatchStock2 = storeItemBatchStockList2
						.get(0);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock2
						.getIssueReturn();
				BigDecimal totalQtyReturned = new BigDecimal(0);
				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned
							.subtract(storeInternalReturnT.getReturnQty());
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock2
						.getClosingStock();
				closingStock = closingStock.add(storeInternalReturnT
						.getReturnQty());
				if (storeItemBatchStock2.getIssueReturn() != null) {
					storeItemBatchStock2.setIssueReturn(storeItemBatchStock2
							.getIssueReturn().subtract(totalQtyReturned));
				} else {
					storeItemBatchStock2.setIssueReturn(totalQtyReturned);
				}
				storeItemBatchStock2.setClosingStock(closingStock);

				hbt.update(storeItemBatchStock2);
				hbt.refresh(storeItemBatchStock2);
				// code for reverting back stock of to department to previeous
				// state
				List<StoreItemBatchStock> storeItemBatchStockList3 = new ArrayList<StoreItemBatchStock>();
				storeItemBatchStockList3 = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Item.Id", storeInternalReturnT
								.getItem().getId()))
						.add(Restrictions.eq("BatchNo",
								storeInternalReturnT.getBatchNo()))
						.add(Restrictions.eq("Department.Id", toDeptId)).list();

				StoreItemBatchStock storeItemBatchStock3 = storeItemBatchStockList3
						.get(0);
				BigDecimal qtyReturned1 = (BigDecimal) storeItemBatchStock3
						.getIssueReturn();
				BigDecimal totalQtyReturned1 = new BigDecimal(0);
				if (qtyReturned1 != null) {
					totalQtyReturned1 = qtyReturned1
							.subtract(storeInternalReturnT.getReturnQty());
				}

				BigDecimal closingStock1 = (BigDecimal) storeItemBatchStock3
						.getClosingStock();
				closingStock1 = closingStock1.subtract(storeInternalReturnT
						.getReturnQty());
				if (storeItemBatchStock3.getIssueReturn() != null) {
					storeItemBatchStock3.setIssueReturn(storeItemBatchStock3
							.getIssueReturn().add(totalQtyReturned));
				} else {
					storeItemBatchStock3.setIssueReturn(totalQtyReturned1);
				}
				storeItemBatchStock3.setClosingStock(closingStock1);

				hbt.update(storeItemBatchStock3);
				hbt.refresh(storeItemBatchStock3);

			}

			for (StoreInternalReturnT storeInternalReturnT : storeInternalReturnTList1) {
				hbt.delete(storeInternalReturnT);
			}
			Iterator itr = issQtyList.iterator();
			int i = 0;

			for (int j = 0; i < issQtyList.size(); j++)

			{

				BigDecimal totalQtyReturned;
				StoreInternalReturnT tObj = new StoreInternalReturnT();
				tObj.setReturnMain(mObj);
				MasStoreItem masStoreItem = new MasStoreItem();

				masStoreItem
						.setId(Integer.parseInt(pvmsList.get(i).toString()));
				tObj.setItem(masStoreItem);

				StoreItemBatchStock storeItemBatchStock1 = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, Integer
								.parseInt((String) storeItemBatchStockIdList
										.get(i)));

				tObj.setBatchNo(storeItemBatchStock1.getBatchNo());
				tObj.setSrNo(Integer.parseInt(srNolist.get(i).toString()));

				String expiryDate = (String) expiryDateList.get(i);

				tObj.setExpiryDate(expiryDate);

				BigDecimal issuedReturnFromJsp = new BigDecimal(""
						+ issQtyList.get(i));
				tObj.setReturnQty(issuedReturnFromJsp);
				BigDecimal bigDecimal2 = new BigDecimal(""
						+ costPriceList.get(i));
				tObj.setRate(bigDecimal2);
				BigDecimal bigDecimal3 = new BigDecimal("" + amountList.get(i));
				tObj.setItemAmount(bigDecimal3);

				int storeItemBatchStockId = Integer.parseInt(""
						+ storeItemBatchStockIdList.get(i));

				StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, storeItemBatchStockId);
				BigDecimal qtyReturned = (BigDecimal) storeItemBatchStock
						.getIssueReturn();

				if (qtyReturned != null) {
					totalQtyReturned = qtyReturned.add(issuedReturnFromJsp);
				} else {
					totalQtyReturned = issuedReturnFromJsp;
				}

				BigDecimal closingStock = (BigDecimal) storeItemBatchStock
						.getClosingStock();
				closingStock = closingStock.subtract(issuedReturnFromJsp);

				storeItemBatchStock.setIssueReturn(totalQtyReturned);
				storeItemBatchStock.setClosingStock(closingStock);

				hbt.save(tObj);
				hbt.update(storeItemBatchStock);

				List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
				StoreItemBatchStock storeItemBatchStock3 = new StoreItemBatchStock();
				storeItemBatchStockList = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Department.Id", toDeptId))
						.add(Restrictions.eq("Item.Id", masStoreItem.getId()))
						.add(Restrictions.eq("BatchNo",
								storeItemBatchStock.getBatchNo())).list();

				if (storeItemBatchStockList != null
						&& storeItemBatchStockList.size() > 0) {
					storeItemBatchStock3 = storeItemBatchStockList.get(0);
					storeItemBatchStock3.setClosingStock(storeItemBatchStock3
							.getClosingStock().add(issuedReturnFromJsp));
					hbt.update(storeItemBatchStock3);
				} else {
					storeItemBatchStock3.setBarcodeNo(storeItemBatchStock
							.getBarcodeNo() == null ? "" : storeItemBatchStock
							.getBarcodeNo());
					storeItemBatchStock3.setBatchNo(storeItemBatchStock
							.getBatchNo() == null ? "" : storeItemBatchStock
							.getBatchNo());
					storeItemBatchStock3.setClosingStock(issuedReturnFromJsp);
					storeItemBatchStock3.setCostPrice(storeItemBatchStock
							.getCostPrice() == null ? new BigDecimal(0)
							: storeItemBatchStock.getCostPrice());
					storeItemBatchStock3.setDepartment(new MasDepartment(
							toDeptId));
					storeItemBatchStock3.setDispencingPrice(storeItemBatchStock
							.getDispencingPrice() == null ? new BigDecimal(0)
							: storeItemBatchStock.getDispencingPrice());
					storeItemBatchStock3.setExpiryDate(storeItemBatchStock
							.getExpiryDate() == null ? null
							: storeItemBatchStock.getExpiryDate());
					storeItemBatchStock3.setItem(new MasStoreItem(masStoreItem
							.getId()));
					storeItemBatchStock3
							.setMrp((storeItemBatchStock.getMrp() == null ? new BigDecimal(
									0) : storeItemBatchStock.getMrp()));
					storeItemBatchStock3.setOpeningBalanceDate(Calendar
							.getInstance().getTime());
					storeItemBatchStock3
							.setOpeningBalanceQty(issuedReturnFromJsp);
					storeItemBatchStock3.setSalesTax(storeItemBatchStock
							.getSalesTax() == null ? new BigDecimal(0)
							: storeItemBatchStock.getSalesTax());
					hbt.save(storeItemBatchStock3);
				}

				i++;
			}

			// --------------Transaction End----------
			transaction.commit();
			succesfullyUpdated = true;
		} catch (Exception e) {
			if (transaction != null) {
				transaction.rollback();
			}

			e.printStackTrace();
		}
		map.put("successfullyAdded", succesfullyUpdated);
		// map.put("storeInternalReturnMId", mObj.getId());
		return map;
	}

	public List<MasStoreItem> getItemsNotUsed(Box box) {
		Session session = getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<MasStoreItem> itemList2 = new ArrayList<MasStoreItem>();
		Set<MasStoreItem> itemList1 = new HashSet<MasStoreItem>();
		try {
			// code to be written on for getting parameters list on the
			Calendar c = Calendar.getInstance();
			c.add(Calendar.MONTH, -1);
			// checkFordepartmentissue
			List<StoreIssueT> issueTlist = session
					.createCriteria(StoreIssueT.class)
					.createAlias("IssueM", "i")
					.add(Restrictions.between("i.IssueDate", c.getTime(),
							Calendar.getInstance().getTime())).list();
			if (issueTlist != null && issueTlist.size() > 0) {
				for (StoreIssueT storeIssueT : issueTlist) {
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem = storeIssueT.getItem();
					itemList.add(masStoreItem);
				}
			}
			List<StoreIpIssueT> ipIssueTlist = session
					.createCriteria(StoreIpIssueT.class)
					.createAlias("IpIssue", "i")
					.add(Restrictions.not(Restrictions.between("i.IpIssueDate",
							c.getTime(), Calendar.getInstance().getTime())))
					.list();
			// itemList=session.createCriteria(arg0)
			if (ipIssueTlist != null && ipIssueTlist.size() > 0) {
				for (StoreIpIssueT storeIpIssueT : ipIssueTlist) {
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem = storeIpIssueT.getItem();
					itemList2.add(masStoreItem);
				}
			}
		}

		catch (Exception e) {
			e.printStackTrace();
		}
		itemList1.addAll(itemList);
		itemList1.addAll(itemList2);
		itemList = new ArrayList<MasStoreItem>(itemList1);
		return itemList;
	}

	public Map<String, Object> getReportDataForBinRegister(
			Map<String, Object> dataMap) {
		Session session = getSession();
		int itemId = 0;
		String itemCode = "";
		String storesStartingDate = "2009-01-01";
		BigDecimal openingBalance = new BigDecimal(0);
		BigDecimal netBalance = new BigDecimal(0);
		String itemName = "";
		String description = "";
		String qryForGettingOpeningBalance = "";
		String qryForGettingPurchaseQnty = "";
		String qryFordepartmentIssue = "";
		String qryForVendorReturn = "";
		String qryForAdjustment = "";
		String qryForGettingIssuedItems = "";
		String qryForPurchaseListAfterStoresStarted = "";
		String qryForIssueListAfterStoreStarted = "";
		String qryForVendorReturnAfterStoresStarted = "";
		String qryForAdjustmentAfterStoresStarted = "";
		String qryForissuedItemsAfterStoreStarted = "";
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			int deptId = (Integer) dataMap.get("deptId");
			String fromDate = (String) dataMap.get("fromDate");
			String toDate = (String) dataMap.get("toDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);
			List<Object> masStoreItemList = new ArrayList<Object>();
			List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();

			masStoreItemList = session.createSQLQuery(
					"select item_id,pvms_no,nomenclature from mas_store_item")
					.list();
			for (Iterator iterator = masStoreItemList.iterator(); iterator
					.hasNext();) {
				PojoForMasStoreItem pojoForMasStoreItem = new PojoForMasStoreItem();
				List<ChildPojoForMasstoreItem> childPojoList = new ArrayList<ChildPojoForMasstoreItem>();
				Object[] object = (Object[]) iterator.next();

				itemId = (Integer) object[0];
				pojoForMasStoreItem.setId(itemId);

				itemCode = (String) object[1];
				pojoForMasStoreItem.setItemCode(itemCode);
				itemName = (String) object[2];
				pojoForMasStoreItem.setItemName(itemName);
				qryForGettingOpeningBalance = "select  i.pvms_no,i.nomenclature,sibs.opening_balance_date,"
						+

						" 'Opening Balance',sibs.item_id, sum(sibs.opening_balance_qty), '1' "
						+ " from store_item_batch_stock sibs,mas_store_item i "
						+ "where sibs.opening_balance_date is not null "
						+ "and sibs.department_id ="
						+ deptId
						+ " "
						+ " and i.item_id=sibs.item_id and i.item_id="
						+ itemId
						+ " " + " group by sibs.item_id ";

				List<Object> openingBalanceList = session.createSQLQuery(
						qryForGettingOpeningBalance).list();
				if (openingBalanceList != null && openingBalanceList.size() > 0) {
					for (Iterator iterator1 = openingBalanceList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						try {
							openingBalance = (BigDecimal) object1[5];
						} catch (Exception e) {
							openingBalance = new BigDecimal(0);
						}
						netBalance = openingBalance;

					}
				}
				qryForGettingPurchaseQnty = "select c.pvms_no,c.nomenclature,sgm.grn_date, 'Receipt', sgt.item_id, "
						+ "	case d.`formula` when 1 "
						+ " then ((sgt.received_qty + sgt.free_qty) * sgt.mdq_value) / d.conversion_factor1 "
						+ "   else (sgt.received_qty + sgt.free_qty) end as qnty, '2' "
						+ "  from store_grn_m sgm, "
						+ "  store_grn_t sgt,  mas_store_item c, mas_store_item_conversion d where    sgt.item_id = c.item_id "
						+ " and sgm.department_id ="
						+ deptId
						+ " "
						+ " and   c.item_conversion_id = d.item_conversion_id and   sgt.grn_master_id = sgm.grn_master_id and "
						+ "sgm.grn_date between '"
						+ startDate
						+ "' and  '"
						+ endDate + "' and c.item_id=" + itemId + "  ";

				List<Object> purchaseQntyList = session.createSQLQuery(
						qryForGettingPurchaseQnty).list();
				if (purchaseQntyList != null && purchaseQntyList.size() > 0) {
					for (Iterator iterator1 = purchaseQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance.add(childPojoForMasstoreItem
								.getQnt());
					}
				}
				qryFordepartmentIssue = "select i.pvms_no,i.nomenclature,sim.issue_date,'Issue', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,mas_store_item i,store_issue_t sit where sim.issue_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ "	and   sim.department_id ="
						+ deptId
						+ " 	  and   sit.issue_m_id = sim.id and   sim.issue_type = 'i' "
						+ "   and i.item_id=sit.item_id  and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> departmentIssueQntyList = session.createSQLQuery(
						qryFordepartmentIssue).list();
				if (departmentIssueQntyList != null
						&& departmentIssueQntyList.size() > 0) {
					for (Iterator iterator1 = departmentIssueQntyList
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance
								.subtract(childPojoForMasstoreItem.getQnt());
					}
				}
				qryForVendorReturn = "select i.pvms_no,i.nomenclature,sgrm.return_date, 'Vendor Return', sgrt.item_id, sgrt.return_qty, '3' "
						+ " from store_grn_return_m sgrm, store_grn_return_t sgrt,mas_store_item i  where sgrm.return_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ " and   sgrm.department_id = "
						+ deptId
						+ " and i.item_id=sgrt.item_id and   sgrt.grn_return_id = sgrm.grn_return_id and i.item_id="
						+ itemId + "";

				List<Object> vendorReturnQntyList = session.createSQLQuery(
						qryForVendorReturn).list();
				if (vendorReturnQntyList != null
						&& vendorReturnQntyList.size() > 0) {
					for (Iterator iterator1 = vendorReturnQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance
								.subtract(childPojoForMasstoreItem.getQnt());
					}
				}

				qryForAdjustment = "select i.pvms_no,i.nomenclature,sadm.adjustment_date, 'Adjustment',sadt.item_id, sadt.adjust_qty, '2' "
						+ "from store_adjustment_m  sadm,store_adjustment_t  sadt,mas_store_item i "
						+ " where sadm.adjustment_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' and   sadm.department_id = "
						+ deptId
						+ " "
						+ " and   sadt.adjust_id = sadm.id and i.item_id=sadt.item_id and   sadt.adjust_qty != 0 and i.item_id="
						+ itemId + "";
				List<Object> adjustmentQntyList = session.createSQLQuery(
						qryForAdjustment).list();
				if (adjustmentQntyList != null && adjustmentQntyList.size() > 0) {
					for (Iterator iterator1 = adjustmentQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance.add(childPojoForMasstoreItem
								.getQnt());
					}
				}

				qryForGettingIssuedItems = "select i.pvms_no,i.nomenclature,sim.issue_date,'Receipt (Internal)', sit.item_issued, sit.qty_issued, '2' "
						+ " from store_issue_m sim, store_issue_t sit,mas_store_item i where sim.issue_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ " and   sim.to_store = "
						+ deptId
						+ "  and   sit.issue_m_id = sim.id and   sim.issue_type = 'i'"
						+ " and i.item_id=sit.item_id   and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> issuedItemsQntyList = session.createSQLQuery(
						qryForGettingIssuedItems).list();
				if (issuedItemsQntyList != null
						&& issuedItemsQntyList.size() > 0) {
					for (Iterator iterator1 = issuedItemsQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance.add(childPojoForMasstoreItem
								.getQnt());
					}
				}
				qryForPurchaseListAfterStoresStarted = "select c.pvms_no,c.nomenclature,sgm.grn_date, 'Receipt', sgt.item_id, "
						+ " (case d.`formula` when 1  then ((sgt.received_qty + sgt.free_qty) * sgt.mdq_value) / d.conversion_factor1 else (sgt.received_qty + sgt.free_qty) end), '2' "
						+ " from store_grn_m sgm, store_grn_t sgt,mas_store_item c,mas_store_item_conversion d  where sgm.grn_date between '"
						+ storesStartingDate
						+ "' "
						+ " and DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY)   and   sgm.department_id ="
						+ deptId
						+ "  and   sgt.item_id = c.item_id "
						+ " and   c.item_conversion_id = d.item_conversion_id   and   sgt.grn_master_id = sgm.grn_master_id and c.item_id="
						+ itemId + "";

				List<Object> purchaseListAfterStoresStarted = session
						.createSQLQuery(qryForPurchaseListAfterStoresStarted)
						.list();
				if (purchaseListAfterStoresStarted != null
						&& purchaseListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = purchaseListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance.add(childPojoForMasstoreItem
								.getQnt());
					}
				}

				qryForIssueListAfterStoreStarted = "select i.pvms_no,i.nomenclature,sim.issue_date,'Issue', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,   store_issue_t sit,mas_store_item i  where sim.issue_date between '"
						+ storesStartingDate
						+ "' and "
						+ "DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY)  and   sim.department_id ="
						+ deptId
						+ "   and   sit.issue_m_id = sim.id "
						+ "   and i.item_id=sit.item_id   and   sit.issued = 'y' and i.item_id="
						+ itemId + " ";

				List<Object> IssueListAfterStoresStarted = session
						.createSQLQuery(qryForIssueListAfterStoreStarted)
						.list();
				if (IssueListAfterStoresStarted != null
						&& IssueListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = IssueListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance
								.subtract(childPojoForMasstoreItem.getQnt());
					}
				}
				qryForVendorReturnAfterStoresStarted = "select i.pvms_no,i.nomenclature,sgrm.return_date, 'Return', sgrt.item_id, sgrt.return_qty, '2' "
						+ " from store_grn_return_m sgrm,   store_grn_return_t sgrt,mas_store_item i where sgrm.return_date between '"
						+ storesStartingDate
						+ "' and "
						+ "DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY)   and   sgrm.department_id = "
						+ deptId
						+ "  and i.item_id=sgrt.item_id "
						+ " and   sgrt.grn_return_id = sgrm.grn_return_id and i.item_id="
						+ itemId + "";
				List<Object> vendorReturnListAfterStoresStarted = session
						.createSQLQuery(qryForVendorReturnAfterStoresStarted)
						.list();
				if (vendorReturnListAfterStoresStarted != null
						&& vendorReturnListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = vendorReturnListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance.add(childPojoForMasstoreItem
								.getQnt());
					}
				}

				qryForAdjustmentAfterStoresStarted = "select i.pvms_no,i.nomenclature,sadm.adjustment_date, 'Adjustment',sadt.item_id, sadt.adjust_qty, '2' "
						+ " from store_adjustment_m  sadm,  store_adjustment_t  sadt,mas_store_item i "
						+ " where sadm.adjustment_date between '"
						+ storesStartingDate
						+ "' and DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY) "
						+ " and   sadm.department_id = "
						+ deptId
						+ " and   sadt.adjust_id = sadm.id and i.item_id=sadt.item_id "
						+ " and   sadt.adjust_qty != 0 and i.item_id="
						+ itemId
						+ "";

				List<Object> adjustmentListAfterStoresStarted = session
						.createSQLQuery(qryForAdjustmentAfterStoresStarted)
						.list();
				if (adjustmentListAfterStoresStarted != null
						&& adjustmentListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = adjustmentListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance.add(childPojoForMasstoreItem
								.getQnt());
					}
				}

				qryForissuedItemsAfterStoreStarted = "select i.pvms_no,i.nomenclature,sim.issue_date,'RCPT', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,  store_issue_t sit,mas_store_item i "
						+ " where sim.issue_date between '"
						+ storesStartingDate
						+ "' and DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY) "
						+ " and   sim.to_store ="
						+ deptId
						+ "  and   sit.issue_m_id = sim.id and i.item_id=sit.item_id and   sit.issued = 'y' and i.item_id="
						+ itemId + "";

				List<Object> issuedItemsListAfterStoresStarted = session
						.createSQLQuery(qryForissuedItemsAfterStoreStarted)
						.list();
				if (issuedItemsListAfterStoresStarted != null
						&& issuedItemsListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = issuedItemsListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						ChildPojoForMasstoreItem childPojoForMasstoreItem = new ChildPojoForMasstoreItem();
						try {
							childPojoForMasstoreItem
									.setIssueDate((Date) object1[2]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueDate(null);
						}
						try {
							childPojoForMasstoreItem
									.setDescription((String) object1[3]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setDescription("");
						}
						try {
							childPojoForMasstoreItem
									.setQnt((BigDecimal) object1[5]);
						} catch (Exception e) {
							childPojoForMasstoreItem.setIssueOrReciptType(0);
						}
						childPojoList.add(childPojoForMasstoreItem);
						netBalance = netBalance
								.subtract(childPojoForMasstoreItem.getQnt());
					}
				}
				pojoForMasStoreItem.setClosingStock(netBalance);
				netBalance = new BigDecimal(0);
				pojoForMasStoreItem
						.setChildPojoForMasstoreItemList(childPojoList);
				pojoParentList.add(pojoForMasStoreItem);

			}

			map.put("pojoParentList", pojoParentList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getReportDataForStockRegister(
			Map<String, Object> dataMap) {
		Session session = getSession();
		int itemId = 0;
		String itemCode = "";
		String storesStartingDate = "2011-01-01";
		BigDecimal openingBalance = new BigDecimal(0);
		BigDecimal recipetQty = new BigDecimal(0);
		BigDecimal openingBalanceAsOnPrevStartDate = new BigDecimal(0);
		BigDecimal netBalance = new BigDecimal(0);
		String itemName = "";
		String description = "";
		String qryForGettingOpeningBalance = "";
		String qryForGettingPurchaseQnty = "";
		String qryFordepartmentIssue = "";
		String qryForVendorReturn = "";
		String qryForAdjustment = "";
		String qryForGettingIssuedItems = "";
		String qryForPurchaseListAfterStoresStarted = "";
		String qryForIssueListAfterStoreStarted = "";
		String qryForVendorReturnAfterStoresStarted = "";
		String qryForAdjustmentAfterStoresStarted = "";
		String qryForissuedItemsAfterStoreStarted = "";
		Map<String, Object> map = new HashMap<String, Object>();
		BigDecimal recieptQnty = new BigDecimal(0);
		BigDecimal issueQnty = new BigDecimal(0);
		try {
			int deptId = (Integer) dataMap.get("deptId");
			int groupId = 0;
			if (dataMap.get("groupId") != null) {
				groupId = (Integer) dataMap.get("groupId");
			}
			if (dataMap.get("itemId") != null) {
				itemId = (Integer) dataMap.get("itemId");
			}

			String fromDate = (String) dataMap.get("fromDate");
			String toDate = (String) dataMap.get("toDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);
			List<Object> masStoreItemList = new ArrayList<Object>();
			List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
			if (itemId > 0) {
				masStoreItemList = session
						.createSQLQuery(
								"select msi.item_id,msi.pvms_no,msi.nomenclature from mas_store_item as msi where msi.status='y' and msi.item_id="
										+ itemId).list();
			} else if (groupId > 0) {
				masStoreItemList = session
						.createSQLQuery(
								"select msi.item_id,msi.pvms_no,msi.nomenclature from mas_store_item as msi where msi.status='y' and msi.group_id="
										+ groupId).list();
			} else {
				masStoreItemList = session
						.createSQLQuery(
								"select msi.item_id,msi.pvms_no,msi.nomenclature from mas_store_item as msi where msi.status='y'")
						.list();
			}
			for (Iterator iterator = masStoreItemList.iterator(); iterator
					.hasNext();) {
				PojoForMasStoreItem pojoForMasStoreItem = new PojoForMasStoreItem();
				List<ChildPojoForMasstoreItem> childPojoList = new ArrayList<ChildPojoForMasstoreItem>();
				Object[] object = (Object[]) iterator.next();

				itemId = (Integer) object[0];
				pojoForMasStoreItem.setId(itemId);

				itemCode = (String) object[1];
				pojoForMasStoreItem.setItemCode(itemCode);
				itemName = (String) object[2];
				pojoForMasStoreItem.setItemName(itemName);
				qryForGettingOpeningBalance = " select i.pvms_no,i.nomenclature,sibs.opening_balance_date,'Opening Balance',sibs.item_id, "
						+ "sum(cast(isnull(sibs.opening_balance_qty,0) as decimal(16,4))) as opening_balance_qty,'1' as  a from store_item_batch_stock sibs,mas_store_item i "
						+ "where sibs.opening_balance_date is not null and sibs.department_id ="
						+ deptId
						+ " "
						+ "and i.item_id = sibs.item_id and i.item_id="
						+ itemId
						+ "  "
						+ "group by sibs.item_id,i.pvms_no,i.nomenclature,sibs.opening_balance_date ";

				List<Object> openingBalanceList = session.createSQLQuery(
						qryForGettingOpeningBalance).list();
				String ledgerDate = "";
				if (openingBalanceList != null && openingBalanceList.size() > 0) {
					for (Iterator iterator1 = openingBalanceList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						try {
							openingBalance = (BigDecimal) object1[5];
						} catch (Exception e) {
							openingBalance = new BigDecimal(0);
						}
						netBalance = openingBalance;
						recieptQnty = openingBalance;
						pojoForMasStoreItem.setOpeningStock(openingBalance);
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
					}
				}
				qryForGettingPurchaseQnty = "select c.pvms_no,c.nomenclature,sgm.grn_date, 'Receipt', sgt.item_id, "
						+ "        case d.formula when 1 "
						+ " then ((sgt.received_qty + sgt.free_qty) * sgt.mdq_value) / d.conversion_factor1 "
						+ "   else (sgt.received_qty + sgt.free_qty) end as qnty, '2' "
						+ "  from store_grn_m sgm, "
						+ "  store_grn_t sgt,  mas_store_item c, mas_store_item_conversion d where    sgt.item_id = c.item_id "
						+ " and sgm.department_id ="
						+ deptId
						+ " "
						+ " and   c.item_conversion_id = d.item_conversion_id and   sgt.grn_master_id = sgm.grn_master_id and "
						+ "sgm.grn_date between '"
						+ startDate
						+ "' and  '"
						+ endDate + "' and c.item_id=" + itemId + "  ";
				List<Object> purchaseQntyList = session.createSQLQuery(
						qryForGettingPurchaseQnty).list();
				if (purchaseQntyList != null && purchaseQntyList.size() > 0) {
					for (Iterator iterator1 = purchaseQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						recipetQty = recqnty;
						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}
				}
				qryFordepartmentIssue = "select i.pvms_no,i.nomenclature,sim.issue_date,'Issue', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,mas_store_item i,store_issue_t sit where sim.issue_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ "        and   sim.department_id ="
						+ deptId
						+ "           and   sit.issue_m_id = sim.id and   sim.issue_type = 'i' "
						+ "   and i.item_id=sit.item_id  and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> departmentIssueQntyList = session.createSQLQuery(
						qryFordepartmentIssue).list();
				if (departmentIssueQntyList != null
						&& departmentIssueQntyList.size() > 0) {
					for (Iterator iterator1 = departmentIssueQntyList
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();

						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
					}

				}
				qryForVendorReturn = "select i.pvms_no,i.nomenclature,sgrm.return_date, 'Vendor Return', sgrt.item_id, sgrt.return_qty, '3' "
						+ " from store_grn_return_m sgrm, store_grn_return_t sgrt,mas_store_item i  where sgrm.return_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ " and   sgrm.department_id = "
						+ deptId
						+ " and i.item_id=sgrt.item_id and   sgrt.grn_return_id = sgrm.grn_return_id and i.item_id="
						+ itemId + "";
				List<Object> vendorReturnQntyList = session.createSQLQuery(
						qryForVendorReturn).list();
				if (vendorReturnQntyList != null
						&& vendorReturnQntyList.size() > 0) {
					for (Iterator iterator1 = vendorReturnQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
					}

				}

				qryForAdjustment = "select i.pvms_no,i.nomenclature,sadm.adjustment_date, 'Adjustment',sadt.item_id, sadt.adjust_qty, '2' "
						+ "from store_adjustment_m  sadm,store_adjustment_t  sadt,mas_store_item i "
						+ " where sadm.adjustment_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' and   sadm.department_id = "
						+ deptId
						+ " "
						+ " and   sadt.adjust_id = sadm.id and i.item_id=sadt.item_id and   sadt.adjust_qty != 0 and i.item_id="
						+ itemId + "";
				List<Object> adjustmentQntyList = session.createSQLQuery(
						qryForAdjustment).list();
				if (adjustmentQntyList != null && adjustmentQntyList.size() > 0) {
					for (Iterator iterator1 = adjustmentQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}

				}

				qryForGettingIssuedItems = "select i.pvms_no,i.nomenclature,sim.issue_date,'Receipt (Internal)', sit.item_issued, sit.qty_issued, '2' "
						+ " from store_issue_m sim, store_issue_t sit,mas_store_item i where sim.issue_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ " and   sim.to_store = "
						+ deptId
						+ "  and   sit.issue_m_id = sim.id and   sim.issue_type = 'i'"
						+ " and i.item_id=sit.item_id   and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> issuedItemsQntyList = session.createSQLQuery(
						qryForGettingIssuedItems).list();
				if (issuedItemsQntyList != null
						&& issuedItemsQntyList.size() > 0) {
					for (Iterator iterator1 = issuedItemsQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
						recipetQty = recipetQty.add(recqnty);
					}

				}

				qryForPurchaseListAfterStoresStarted = "select c.pvms_no,c.nomenclature,sgm.grn_date, 'Receipt', sgt.item_id, "
						+ " (case d.formula when 1  then ((sgt.received_qty + sgt.free_qty) * sgt.mdq_value) / d.conversion_factor1 else (sgt.received_qty + sgt.free_qty) end) as temp, '2' ,mss.supplier_name"
						+ " from store_grn_m sgm, store_grn_t sgt,mas_store_item c,mas_store_item_conversion d ,mas_store_supplier mss where sgm.grn_date between '"
						+ storesStartingDate
						// + startDate
						+ "' "
						// + " and DATE_SUB('startDate, INTERVAL 1 DAY) " +
						+ " and dateadd(day, -1,'"
						+ endDate
						+ "') "
						// dateadd(day, -1, '2011-01-01')
						+ "  and   sgm.department_id ="
						+ deptId
						+ "  and   sgt.item_id = c.item_id "
						+ " and sgm.supplier_id=mss.supplier_id and   c.item_conversion_id = d.item_conversion_id   and   sgt.grn_master_id = sgm.grn_master_id and c.item_id="
						+ itemId + "";
				List<Object> purchaseListAfterStoresStarted = session
						.createSQLQuery(qryForPurchaseListAfterStoresStarted)
						.list();
				String supplierName = "";
				if (purchaseListAfterStoresStarted != null
						&& purchaseListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = purchaseListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						try {
							supplierName = (String) object1[7];
						} catch (Exception e) {
							// TODO: handle exception
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						pojoForMasStoreItem.setSupplierName(supplierName);
						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);

						recipetQty = recipetQty.add(recqnty);
					}
				}

				qryForIssueListAfterStoreStarted = "select i.pvms_no,i.nomenclature,sim.issue_date,'Issue', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,   store_issue_t sit,mas_store_item i  where sim.issue_date between '"
						+ storesStartingDate
						// +startDate
						// + "DATE_SUB('"+ startDate+ "', INTERVAL 1 DAY)  "
						+ "' and dateadd(day, -1,'"
						+ endDate
						+ "') "
						+ "and   sim.department_id ="
						+ deptId
						+ "   and   sit.issue_m_id = sim.id "
						+ "   and i.item_id=sit.item_id   and   sit.issued = 'y' and i.item_id="
						+ itemId + " ";
				List<Object> IssueListAfterStoresStarted = session
						.createSQLQuery(qryForIssueListAfterStoreStarted)
						.list();
				if (IssueListAfterStoresStarted != null
						&& IssueListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = IssueListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
					}

				}
				qryForVendorReturnAfterStoresStarted = "select i.pvms_no,i.nomenclature,sgrm.return_date, 'Return', sgrt.item_id, sgrt.return_qty, '2' "
						+ " from store_grn_return_m sgrm,   store_grn_return_t sgrt,mas_store_item i where sgrm.return_date between '"
						+ storesStartingDate
						// +startDate
						// + "DATE_SUB('"+ startDate+ "', INTERVAL 1 DAY)" +
						+ "' and dateadd(day, -1,'"
						+ endDate
						+ "') "
						+ "   and   sgrm.department_id = "
						+ deptId
						+ "  and i.item_id=sgrt.item_id "
						+ " and   sgrt.grn_return_id = sgrm.grn_return_id and i.item_id="
						+ itemId + "";
				List<Object> vendorReturnListAfterStoresStarted = session
						.createSQLQuery(qryForVendorReturnAfterStoresStarted)
						.list();
				if (vendorReturnListAfterStoresStarted != null
						&& vendorReturnListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = vendorReturnListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
						recipetQty = recipetQty.add(recqnty);
					}
				}

				qryForAdjustmentAfterStoresStarted = "select i.pvms_no,i.nomenclature,sadm.adjustment_date, 'Adjustment',sadt.item_id, sadt.adjust_qty, '2' "
						+ " from store_adjustment_m  sadm,  store_adjustment_t  sadt,mas_store_item i "
						+ " where sadm.adjustment_date between '"
						+ storesStartingDate
						// +startDate
						// + "' and DATE_SUB('"+ startDate+
						// "', INTERVAL 1 DAY) "
						+ "' and dateadd(day, -1,'"
						+ endDate
						+ "') "
						+ " and   sadm.department_id = "
						+ deptId
						+ " and   sadt.adjust_id = sadm.id and i.item_id=sadt.item_id "
						+ " and   sadt.adjust_qty != 0 and i.item_id="
						+ itemId
						+ "";
				List<Object> adjustmentListAfterStoresStarted = session
						.createSQLQuery(qryForAdjustmentAfterStoresStarted)
						.list();
				if (adjustmentListAfterStoresStarted != null
						&& adjustmentListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = adjustmentListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}
						/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
						recipetQty = recipetQty.add(recqnty);

					}
				}

				qryForissuedItemsAfterStoreStarted = "select i.pvms_no,i.nomenclature,sim.issue_date,'RCPT', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,  store_issue_t sit,mas_store_item i "
						+ " where sim.issue_date between '"
						+ storesStartingDate
						// +startDate
						// + "' and DATE_SUB('"+ startDate+
						// "', INTERVAL 1 DAY) "
						+ "' and dateadd(day, -1,'"
						+ endDate
						+ "') "
						+ " and   sim.to_store ="
						+ deptId
						+ "  and   sit.issue_m_id = sim.id and i.item_id=sit.item_id and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> issuedItemsListAfterStoresStarted = session
						.createSQLQuery(qryForissuedItemsAfterStoreStarted)
						.list();
				if (issuedItemsListAfterStoresStarted != null
						&& issuedItemsListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = issuedItemsListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}/*
						 * if(object1[2]!=null){
						 * //ledgerDate=HMSUtil.convertStringTypeDateToDateType
						 * (""+object1[2]); ledgerDate=""+object1[2];
						 * pojoForMasStoreItem.setLedgerDate(ledgerDate); }
						 */
						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
						// recipetQty=recipetQty.add(recqnty);
					}
				}
				pojoForMasStoreItem.setClosingStock(netBalance);
				pojoForMasStoreItem.setIssueQnty(issueQnty);
				// pojoForMasStoreItem.setReceiptQnty(recieptQnty);
				pojoForMasStoreItem.setReceiptQnty(recipetQty);
				pojoParentList.add(pojoForMasStoreItem);
				issueQnty = new BigDecimal(0);
				recieptQnty = new BigDecimal(0);
				netBalance = new BigDecimal(0);

			}
			map.put("pojoParentList", pojoParentList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getReportDataForStockValuation(
			Map<String, Object> dataMap) {
		Session session = getSession();
		int itemId = 0;
		String itemCode = "";
		String storesStartingDate = "2009-01-01";
		BigDecimal openingBalance = new BigDecimal(0);
		BigDecimal netBalance = new BigDecimal(0);
		String itemName = "";
		String description = "";
		String qryForGettingOpeningBalance = "";
		String qryForGettingPurchaseQnty = "";
		String qryFordepartmentIssue = "";
		String qryForVendorReturn = "";
		String qryForAdjustment = "";
		String qryForGettingIssuedItems = "";
		String qryForPurchaseListAfterStoresStarted = "";
		String qryForIssueListAfterStoreStarted = "";
		String qryForVendorReturnAfterStoresStarted = "";
		String qryForAdjustmentAfterStoresStarted = "";
		String qryForissuedItemsAfterStoreStarted = "";
		Map<String, Object> map = new HashMap<String, Object>();
		BigDecimal recieptQnty = new BigDecimal(0);
		BigDecimal issueQnty = new BigDecimal(0);
		try {
			int deptId = (Integer) dataMap.get("deptId");
			String fromDate = (String) dataMap.get("fromDate");
			String toDate = (String) dataMap.get("toDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);
			List<Object> masStoreItemList = new ArrayList<Object>();
			List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();

			masStoreItemList = session.createSQLQuery(
					"select item_id,pvms_no,nomenclature from mas_store_item")
					.list();
			for (Iterator iterator = masStoreItemList.iterator(); iterator
					.hasNext();) {
				PojoForMasStoreItem pojoForMasStoreItem = new PojoForMasStoreItem();
				List<ChildPojoForMasstoreItem> childPojoList = new ArrayList<ChildPojoForMasstoreItem>();
				Object[] object = (Object[]) iterator.next();

				itemId = (Integer) object[0];
				pojoForMasStoreItem.setId(itemId);

				itemCode = (String) object[1];
				pojoForMasStoreItem.setItemCode(itemCode);
				itemName = (String) object[2];
				pojoForMasStoreItem.setItemName(itemName);
				qryForGettingOpeningBalance = "select  i.pvms_no,i.nomenclature,sibs.opening_balance_date,"
						+

						" 'Opening Balance',sibs.item_id, sum(sibs.opening_balance_qty), '1' "
						+ " from store_item_batch_stock sibs,mas_store_item i "
						+ "where sibs.opening_balance_date is not null "
						+ "and sibs.department_id ="
						+ deptId
						+ " "
						+ " and i.item_id=sibs.item_id and i.item_id="
						+ itemId
						+ " " + " group by sibs.item_id ";

				List<Object> openingBalanceList = session.createSQLQuery(
						qryForGettingOpeningBalance).list();
				if (openingBalanceList != null && openingBalanceList.size() > 0) {
					for (Iterator iterator1 = openingBalanceList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						try {
							openingBalance = (BigDecimal) object1[5];
						} catch (Exception e) {
							openingBalance = new BigDecimal(0);
						}
						netBalance = openingBalance;
						recieptQnty = openingBalance;

					}
				}
				qryForGettingPurchaseQnty = "select c.pvms_no,c.nomenclature,sgm.grn_date, 'Receipt', sgt.item_id, "
						+ "	case d.`formula` when 1 "
						+ " then ((sgt.received_qty + sgt.free_qty) * sgt.mdq_value) / d.conversion_factor1 "
						+ "   else (sgt.received_qty + sgt.free_qty) end as qnty, '2' "
						+ "  from store_grn_m sgm, "
						+ "  store_grn_t sgt,  mas_store_item c, mas_store_item_conversion d where    sgt.item_id = c.item_id "
						+ " and sgm.department_id ="
						+ deptId
						+ " "
						+ " and   c.item_conversion_id = d.item_conversion_id and   sgt.grn_master_id = sgm.grn_master_id and "
						+ "sgm.grn_date between '"
						+ startDate
						+ "' and  '"
						+ endDate + "' and c.item_id=" + itemId + "  ";

				List<Object> purchaseQntyList = session.createSQLQuery(
						qryForGettingPurchaseQnty).list();
				if (purchaseQntyList != null && purchaseQntyList.size() > 0) {
					for (Iterator iterator1 = purchaseQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}
				}
				qryFordepartmentIssue = "select i.pvms_no,i.nomenclature,sim.issue_date,'Issue', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,mas_store_item i,store_issue_t sit where sim.issue_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ "	and   sim.department_id ="
						+ deptId
						+ " 	  and   sit.issue_m_id = sim.id and   sim.issue_type = 'i' "
						+ "   and i.item_id=sit.item_id  and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> departmentIssueQntyList = session.createSQLQuery(
						qryFordepartmentIssue).list();
				if (departmentIssueQntyList != null
						&& departmentIssueQntyList.size() > 0) {
					for (Iterator iterator1 = departmentIssueQntyList
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();

						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
					}

				}
				qryForVendorReturn = "select i.pvms_no,i.nomenclature,sgrm.return_date, 'Vendor Return', sgrt.item_id, sgrt.return_qty, '3' "
						+ " from store_grn_return_m sgrm, store_grn_return_t sgrt,mas_store_item i  where sgrm.return_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ " and   sgrm.department_id = "
						+ deptId
						+ " and i.item_id=sgrt.item_id and   sgrt.grn_return_id = sgrm.grn_return_id and i.item_id="
						+ itemId + "";

				List<Object> vendorReturnQntyList = session.createSQLQuery(
						qryForVendorReturn).list();
				if (vendorReturnQntyList != null
						&& vendorReturnQntyList.size() > 0) {
					for (Iterator iterator1 = vendorReturnQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
					}

				}

				qryForAdjustment = "select i.pvms_no,i.nomenclature,sadm.adjustment_date, 'Adjustment',sadt.item_id, sadt.adjust_qty, '2' "
						+ "from store_adjustment_m  sadm,store_adjustment_t  sadt,mas_store_item i "
						+ " where sadm.adjustment_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' and   sadm.department_id = "
						+ deptId
						+ " "
						+ " and   sadt.adjust_id = sadm.id and i.item_id=sadt.item_id and   sadt.adjust_qty != 0 and i.item_id="
						+ itemId + "";
				List<Object> adjustmentQntyList = session.createSQLQuery(
						qryForAdjustment).list();
				if (adjustmentQntyList != null && adjustmentQntyList.size() > 0) {
					for (Iterator iterator1 = adjustmentQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}

				}

				qryForGettingIssuedItems = "select i.pvms_no,i.nomenclature,sim.issue_date,'Receipt (Internal)', sit.item_issued, sit.qty_issued, '2' "
						+ " from store_issue_m sim, store_issue_t sit,mas_store_item i where sim.issue_date between '"
						+ startDate
						+ "' and '"
						+ endDate
						+ "' "
						+ " and   sim.to_store = "
						+ deptId
						+ "  and   sit.issue_m_id = sim.id and   sim.issue_type = 'i'"
						+ " and i.item_id=sit.item_id   and   sit.issued = 'y' and i.item_id="
						+ itemId + "";
				List<Object> issuedItemsQntyList = session.createSQLQuery(
						qryForGettingIssuedItems).list();
				if (issuedItemsQntyList != null
						&& issuedItemsQntyList.size() > 0) {
					for (Iterator iterator1 = issuedItemsQntyList.iterator(); iterator1
							.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}

				}
				qryForPurchaseListAfterStoresStarted = "select c.pvms_no,c.nomenclature,sgm.grn_date, 'Receipt', sgt.item_id, "
						+ " (case d.`formula` when 1  then ((sgt.received_qty + sgt.free_qty) * sgt.mdq_value) / d.conversion_factor1 else (sgt.received_qty + sgt.free_qty) end), '2' "
						+ " from store_grn_m sgm, store_grn_t sgt,mas_store_item c,mas_store_item_conversion d  where sgm.grn_date between '"
						+ storesStartingDate
						+ "' "
						+ " and DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY)   and   sgm.department_id ="
						+ deptId
						+ "  and   sgt.item_id = c.item_id "
						+ " and   c.item_conversion_id = d.item_conversion_id   and   sgt.grn_master_id = sgm.grn_master_id and c.item_id="
						+ itemId + "";

				List<Object> purchaseListAfterStoresStarted = session
						.createSQLQuery(qryForPurchaseListAfterStoresStarted)
						.list();
				if (purchaseListAfterStoresStarted != null
						&& purchaseListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = purchaseListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}
				}

				qryForIssueListAfterStoreStarted = "select i.pvms_no,i.nomenclature,sim.issue_date,'Issue', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,   store_issue_t sit,mas_store_item i  where sim.issue_date between '"
						+ storesStartingDate
						+ "' and "
						+ "DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY)  and   sim.department_id ="
						+ deptId
						+ "   and   sit.issue_m_id = sim.id "
						+ "   and i.item_id=sit.item_id   and   sit.issued = 'y' and i.item_id="
						+ itemId + " ";

				List<Object> IssueListAfterStoresStarted = session
						.createSQLQuery(qryForIssueListAfterStoreStarted)
						.list();
				if (IssueListAfterStoresStarted != null
						&& IssueListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = IssueListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);
					}

				}
				qryForVendorReturnAfterStoresStarted = "select i.pvms_no,i.nomenclature,sgrm.return_date, 'Return', sgrt.item_id, sgrt.return_qty, '2' "
						+ " from store_grn_return_m sgrm,   store_grn_return_t sgrt,mas_store_item i where sgrm.return_date between '"
						+ storesStartingDate
						+ "' and "
						+ "DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY)   and   sgrm.department_id = "
						+ deptId
						+ "  and i.item_id=sgrt.item_id "
						+ " and   sgrt.grn_return_id = sgrm.grn_return_id and i.item_id="
						+ itemId + "";
				List<Object> vendorReturnListAfterStoresStarted = session
						.createSQLQuery(qryForVendorReturnAfterStoresStarted)
						.list();
				if (vendorReturnListAfterStoresStarted != null
						&& vendorReturnListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = vendorReturnListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);
					}
				}

				qryForAdjustmentAfterStoresStarted = "select i.pvms_no,i.nomenclature,sadm.adjustment_date, 'Adjustment',sadt.item_id, sadt.adjust_qty, '2' "
						+ " from store_adjustment_m  sadm,  store_adjustment_t  sadt,mas_store_item i "
						+ " where sadm.adjustment_date between '"
						+ storesStartingDate
						+ "' and DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY) "
						+ " and   sadm.department_id = "
						+ deptId
						+ " and   sadt.adjust_id = sadm.id and i.item_id=sadt.item_id "
						+ " and   sadt.adjust_qty != 0 and i.item_id="
						+ itemId
						+ "";

				List<Object> adjustmentListAfterStoresStarted = session
						.createSQLQuery(qryForAdjustmentAfterStoresStarted)
						.list();
				if (adjustmentListAfterStoresStarted != null
						&& adjustmentListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = adjustmentListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.add(recqnty);
						recieptQnty = recieptQnty.add(recqnty);

					}
				}

				qryForissuedItemsAfterStoreStarted = "select i.pvms_no,i.nomenclature,sim.issue_date,'RCPT', sit.item_issued, sit.qty_issued, '3' "
						+ " from store_issue_m sim,  store_issue_t sit,mas_store_item i "
						+ " where sim.issue_date between '"
						+ storesStartingDate
						+ "' and DATE_SUB('"
						+ startDate
						+ "', INTERVAL 1 DAY) "
						+ " and   sim.to_store ="
						+ deptId
						+ "  and   sit.issue_m_id = sim.id and i.item_id=sit.item_id and   sit.issued = 'y' and i.item_id="
						+ itemId + "";

				List<Object> issuedItemsListAfterStoresStarted = session
						.createSQLQuery(qryForissuedItemsAfterStoreStarted)
						.list();
				if (issuedItemsListAfterStoresStarted != null
						&& issuedItemsListAfterStoresStarted.size() > 0) {
					for (Iterator iterator1 = issuedItemsListAfterStoresStarted
							.iterator(); iterator1.hasNext();) {
						Object[] object1 = (Object[]) iterator1.next();
						BigDecimal recqnty = new BigDecimal(0);
						try {
							recqnty = (BigDecimal) object1[5];
						} catch (Exception e) {
							recqnty = new BigDecimal(0);
						}

						netBalance = netBalance.subtract(recqnty);
						issueQnty = issueQnty.add(recqnty);

					}
				}
				pojoForMasStoreItem.setClosingStock(netBalance);
				pojoForMasStoreItem.setIssueQnty(issueQnty);
				pojoForMasStoreItem.setReceiptQnty(recieptQnty);
				pojoParentList.add(pojoForMasStoreItem);
				issueQnty = new BigDecimal(0);
				recieptQnty = new BigDecimal(0);
				netBalance = new BigDecimal(0);

			}

			map.put("pojoParentList", pojoParentList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public MasStoreItem getItemForItemCode(String itemCode) {

		Session session = getSession();
		MasStoreItem masStoreItem = new MasStoreItem();
		try {

			masStoreItem = (MasStoreItem) session
					.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("PvmsNo", itemCode)).list().get(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return masStoreItem;
	}

	public Map<String, Object> getItemListForIndent1(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> itemList = new ArrayList<Object>();

		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		Session session = (Session) getSession();
		String pvmsNo = null;

		int deptId = 0;
		int hospitalId = 0;
		deptId = box.getInt("deptId");
		int toWard = 0;
		toWard = box.getInt("toWard");
		

		List<Integer> objectList = new ArrayList<Integer>();
		int internalIndentId = 0;
		int storeDepartmentId = 0;
		/*
		 * if (box.get("storeDepartmentId") != null &&
		 * !box.get("storeDepartmentId").equals("")) { storeDepartmentId =
		 * box.getInt("storeDepartmentId"); }
		 */

		if (box.get("internalIndentId") != null
				&& !box.get("internalIndentId").equals("")) {

			internalIndentId = box.getInt("internalIndentId");
		}
		if (box.get("hospitalId") != null && !box.get("hospitalId").equals("")) {

			hospitalId = box.getInt("hospitalId");
		}
		try {
			//System.out.println("auto hint========"+box.get("autoHint"));
			String str = box.get("autoHint") + "%";
			//System.out.println("str========"+str);
			String qry = "select t.item_id from store_internal_indent_m m,store_internal_indent_t t where  m.id=t.internal_id and m.id="
					+ internalIndentId;
			//
			objectList = session.createSQLQuery(qry).list();

			// add(Restrictions.like("Nomenclature",str))
			/*
			 * Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions
			 * .eq("Status", "y")).add( Restrictions.like("Nomenclature", str));
			 */
			// c.add(Restrictions.eq("Department.Id", storeDepartmentId));
			String sql = "";
			if (objectList != null && objectList.size() > 0) {

				// c.add(Restrictions.not(Restrictions.in("Id", objectList)));
				int counter = 0;
				for (Integer object : objectList) {
					if (counter == 0) {
						sql = "" + object.intValue();
					} else {
						sql = sql + "," + object.intValue();
					}
					++counter;
				}
			}
			/*
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 */
			String query = "";
			if (toWard > 0) {
				/*
				 * This Case Deaprtment Indent Code By Mukesh Narayan SIngh Date
				 * 22/01/2011
				 */
				toWard = toWard;
			} else {
				/*
				 * This Case Deaprtment Issue Without Indent Code By Mukesh
				 * Narayan SIngh Date 22/01/2011
				 */
				toWard = deptId;
			}
			Criteria criteria = null;
			if (deptId == 47) {
				query = "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id in (192) and mst.Status='Y' and stock.ClosingStock>0 and  mst.Nomenclature like "
						+ " UPPER('"
						+ str
						+ "') "
						+ "and stock.Hospital="
						+ hospitalId
						+ " group by mst.Id,mst.PvmsNo,mst.Nomenclature";
				//
		} else if (sql == "") {
			if(box.getInt("userType") == 1){
				criteria = session
						.createCriteria(StoreItemBatchStock.class)
						.createAlias("Item", "item")
						.add(Restrictions.eq("item.Status", "y").ignoreCase())
						.add(Restrictions.gt("ClosingStock",
								new BigDecimal(0.0)))
						.add(Restrictions.like("item.Nomenclature", str).ignoreCase())
						//.add(Restrictions.eq("Hospital.Id", hospitalId))
						//.add(Restrictions.eq("Department.Id", deptId))
						.setProjection(
								Projections
										.projectionList()
										.add(Projections
												.groupProperty("item.Id"))
										.add(Projections
												.property("item.PvmsNo"))
										.add(Projections
												.property("item.Nomenclature")));
				if (box.getInt("groupId") != 0) {
					criteria = criteria.createAlias("item.Group", "group").add(
							Restrictions.eq("group.Id", box.getInt("groupId")));
				}
				if (box.getInt("itemTypeId") != 0) {
					criteria = criteria
							.createAlias("item.ItemType", "itemType").add(
									Restrictions.eq("itemType.Id",
											box.getInt("itemTypeId")));
				}
				if (box.getInt("sectionId") != 0) {
					criteria = criteria.createAlias("item.Section", "section")
							.add(Restrictions.eq("section.Id",
									box.getInt("sectionId")));
				}
				if (box.getInt("categoryId") != 0) {
					criteria = criteria.createAlias("item.ItemCategory",
							"category").add(
							Restrictions.eq("category.Id",
									box.getInt("categoryId")));
				}
				if (box.getInt("classId") != 0) {
					criteria = criteria.createAlias("item.ItemClass", "class")
							.add(Restrictions.eq("class.Id",
									box.getInt("classId")));
				}
				itemList = criteria.list();
			}else{
				criteria = session
						.createCriteria(StoreItemBatchStock.class)
						.createAlias("Item", "item")
						.add(Restrictions.eq("item.Status", "y").ignoreCase())
						.add(Restrictions.gt("ClosingStock",
								new BigDecimal(0.0)))
						.add(Restrictions.like("item.Nomenclature", str).ignoreCase())
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						//.add(Restrictions.eq("Department.Id", deptId))
						.setProjection(
								Projections
										.projectionList()
										.add(Projections
												.groupProperty("item.Id"))
										.add(Projections
												.property("item.PvmsNo"))
										.add(Projections
												.property("item.Nomenclature")));
				if (box.getInt("groupId") != 0) {
					criteria = criteria.createAlias("item.Group", "group").add(
							Restrictions.eq("group.Id", box.getInt("groupId")));
				}
				if (box.getInt("itemTypeId") != 0) {
					criteria = criteria
							.createAlias("item.ItemType", "itemType").add(
									Restrictions.eq("itemType.Id",
											box.getInt("itemTypeId")));
				}
				if (box.getInt("sectionId") != 0) {
					criteria = criteria.createAlias("item.Section", "section")
							.add(Restrictions.eq("section.Id",
									box.getInt("sectionId")));
				}
				if (box.getInt("categoryId") != 0) {
					criteria = criteria.createAlias("item.ItemCategory",
							"category").add(
							Restrictions.eq("category.Id",
									box.getInt("categoryId")));
				}
				if (box.getInt("classId") != 0) {
					criteria = criteria.createAlias("item.ItemClass", "class")
							.add(Restrictions.eq("class.Id",
									box.getInt("classId")));
				}
				itemList = criteria.list();
			}
				
			} else {
				
				query = "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id in ("
						+ toWard
						+ ") and mst.Id not in("
						+ sql
						+ ") and UPPER(mst.Status)=UPPER('Y') and stock.ClosingStock>0 and  mst.Nomenclature like "
						+ "UPPER('"
						+ str
						+ "')"
						+ "and stock.Hospital="
						+ hospitalId
						+ " group by mst.Id,mst.PvmsNo,mst.Nomenclature";
				//
			}
			//
			// Query q = session.createQuery(query);
			// q.setFirstResult(0);
			// q.setMaxResults(10);
			// itemList = q.list();
			// criteria.setFirstResult(0);
			// criteria.setMaxResults(10);
			

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		map.put("objectList", objectList);
		return map;
	}

	public Map<String, Object> getItemListForIndent(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> itemList = new ArrayList<Object>();

		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		Session session = (Session) getSession();
		String pvmsNo = null;

		int deptId = 0;
		int hospitalId = 0;
		deptId = box.getInt("deptId");
		int toWard = 0;
		toWard = box.getInt("toWard");

		//List<Integer> objectList = new ArrayList<Integer>();
		//int internalIndentId = 0;
		//int storeDepartmentId = 0;
		/*
		 * if (box.get("storeDepartmentId") != null &&
		 * !box.get("storeDepartmentId").equals("")) { storeDepartmentId =
		 * box.getInt("storeDepartmentId"); }
		 */

		/*if (box.get("internalIndentId") != null
				&& !box.get("internalIndentId").equals("")) {

			internalIndentId = box.getInt("internalIndentId");
		}*/
		if (box.get("hospitalId") != null && !box.get("hospitalId").equals("")) {
			hospitalId = box.getInt("hospitalId");
		}
		if (toWard > 0) {
			/*
			 * This Case Deaprtment Indent Code By Mukesh Narayan SIngh Date
			 * 22/01/2011
			 */
			toWard = toWard;
		} else {
			/*
			 * This Case Deaprtment Issue Without Indent Code By Mukesh
			 * Narayan SIngh Date 22/01/2011
			 */
			toWard = deptId;
		}
		String query = "";
		try {
			String str = box.get("autoHint") + "%";
			/*String qry = "select t.item_id from store_internal_indent_m m,store_internal_indent_t t where  m.id=t.internal_id and m.id="
					+ internalIndentId;*/
			//
			//objectList = session.createSQLQuery(qry).list();

			// add(Restrictions.like("Nomenclature",str))
		if(box.getString("flag").equals("emergency")){
				query = "select msi.item_id,msi.pvms_no, msi.nomenclature from mas_store_item msi left join store_item_batch_stock sibs on msi.item_id=sibs.item_id"
						+ " where sibs.hospital_id="+hospitalId+ " and sibs.department_id="+toWard+" and lower(msi.status)='y'  and upper(msi.nomenclature) like upper('"+str+"') "
						+ " group by msi.item_id,msi.nomenclature"
						+ " having sum(sibs.closing_stock)=0";
				
				Query q = session.createSQLQuery(query);
				
				 itemList = q.list();
			
		}else{
			  Criteria c = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status", "y").ignoreCase())
					  			.add( Restrictions.like("Nomenclature", str).ignoreCase()).setProjection(Projections
										.projectionList().add(Projections.property("Id"))
										.add(Projections.property("PvmsNo"))
										.add(Projections.property("Nomenclature")));
			  
			  if (box.getInt("groupId") != 0) {
					c = c.add(Restrictions.eq("Group.Id", box.getInt("groupId")));
				}
				if (box.getInt("itemTypeId") != 0) {
					c = c.add(Restrictions.eq("ItemType.Id",box.getInt("itemTypeId")));
				}
				if (box.getInt("sectionId") != 0) {
					c = c.add(Restrictions.eq("Section.Id",box.getInt("sectionId")));
				}
				if (box.getInt("categoryId") != 0) {
					c = c.add(Restrictions.eq("ItemCategory.Id",box.getInt("categoryId")));
				}
				if (box.getInt("classId") != 0) {
					c = c.add(Restrictions.eq("ItemClass.Id",box.getInt("classId")));
				}
				
				c.setFirstResult(0);
				c.setMaxResults(10); 
				itemList = c.list();
		}
				
			 
			// c.add(Restrictions.eq("Department.Id", storeDepartmentId));
			/*String sql = "";
			if (objectList != null && objectList.size() > 0) {

				// c.add(Restrictions.not(Restrictions.in("Id", objectList)));
				int counter = 0;
				for (Integer object : objectList) {
					if (counter == 0) {
						sql = "" + object.intValue();
					} else {
						sql = sql + "," + object.intValue();
					}
					++counter;
				}
			}*/
			
			  
			 
			
			
			//Criteria criteria = null;
			/*if (deptId == 47) {
				query = "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id in (192) and mst.Status='Y' and stock.ClosingStock>0 and  mst.Nomenclature like "
						+ " UPPER('"
						+ str
						+ "') "
						+ "and stock.Hospital="
						+ hospitalId
						+ " group by mst.Id,mst.PvmsNo,mst.Nomenclature";
				//
			} else if (sql == "") {*/
				/*
				 * query = "select mst.Id," + "mst.PvmsNo," +
				 * "mst.Nomenclature " +
				 * "from MasStoreItem as mst,StoreItemBatchStock stock " +
				 * "where mst.Id= stock.Item and stock.Department.Id in (" +
				 * toWard +
				 * ") and UPPER(mst.Status)=UPPER('y') and stock.ClosingStock>0 and  mst.Nomenclature like "
				 * + "('"+ str + "')" +"and stock.Hospital=" + hospitalId
				 * +" group by mst.Id,mst.PvmsNo,mst.Nomenclature";
				 */
			/*if(!box.getString("flag").equals("emergency")){
				criteria = session
						.createCriteria(StoreItemBatchStock.class)
						.createAlias("Item", "item")
						.add(Restrictions.eq("item.Status", "y").ignoreCase())
						.add(Restrictions.gt("ClosingStock",
								new BigDecimal(0.0)))
						.add(Restrictions.like("item.Nomenclature", str).ignoreCase())
						.add(Restrictions.eq("Hospital.Id", hospitalId))
						.add(Restrictions.eq("Department.Id", toWard))
						.add(Restrictions.or(Restrictions.ne("BlockStatus", "Temporary Block"), Restrictions.isNull("BlockStatus")))
						.setProjection(
								Projections
										.projectionList()
										.add(Projections
												.groupProperty("item.Id"))
										.add(Projections
												.property("item.PvmsNo"))
										.add(Projections
												.property("item.Nomenclature")));
				if (box.getInt("groupId") != 0) {
					criteria = criteria.createAlias("item.Group", "group").add(
							Restrictions.eq("group.Id", box.getInt("groupId")));
				}
				if (box.getInt("itemTypeId") != 0) {
					criteria = criteria
							.createAlias("item.ItemType", "itemType").add(
									Restrictions.eq("itemType.Id",
											box.getInt("itemTypeId")));
				}
				if (box.getInt("sectionId") != 0) {
					criteria = criteria.createAlias("item.Section", "section")
							.add(Restrictions.eq("section.Id",
									box.getInt("sectionId")));
				}
				if (box.getInt("categoryId") != 0) {
					criteria = criteria.createAlias("item.ItemCategory",
							"category").add(
							Restrictions.eq("category.Id",
									box.getInt("categoryId")));
				}
				if (box.getInt("classId") != 0) {
					criteria = criteria.createAlias("item.ItemClass", "class")
							.add(Restrictions.eq("class.Id",
									box.getInt("classId")));
				}
				
				
				itemList = criteria.list();
			}
			else if(box.getString("flag").equals("emergency")){
				
				query = "select msi.item_id,msi.pvms_no, msi.nomenclature from mas_store_item msi left join store_item_batch_stock sibs on msi.item_id=sibs.item_id"
						+ " where sibs.hospital_id="+hospitalId+ " and sibs.department_id="+toWard+" and lower(msi.status)='y'  and upper(msi.nomenclature) like upper('"+str+"') "
						+ " group by msi.item_id,msi.nomenclature"
						+ " having sum(sibs.closing_stock)=0";
				
				Query q = session.createSQLQuery(query);
				
				 itemList = q.list();
			}
						
				
				
			} else {
				query = "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id in ("
						+ toWard
						+ ") and mst.Id not in("
						+ sql
						+ ") and UPPER(mst.Status)=UPPER('Y') and stock.ClosingStock>0 and  mst.Nomenclature like "
						+ "UPPER('"
						+ str
						+ "')"
						+ "and stock.Hospital="
						+ hospitalId
						+ " group by mst.Id,mst.PvmsNo,mst.Nomenclature";
				//
			}*/
			//
			// Query q = session.createQuery(query);
			// q.setFirstResult(0);
			// q.setMaxResults(10);
			// itemList = q.list();
			// criteria.setFirstResult(0);
			// criteria.setMaxResults(10);
			

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		//map.put("objectList", objectList);
		return map;
	}

	public Map<String, Object> getPoList(Box box) {
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoHeader> storePoHeaderList = new ArrayList<StorePoHeader>();
		try {
			storePoHeaderList = session
					.createCriteria(StorePoHeader.class)
					.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
					.list();
			map.put("storePoHeaderList", storePoHeaderList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> getDataForBarcode(Box box) {
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		try {
			storeItemBatchStockList = session
					.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("BarcodeNo", box.get("barcodeNo")))
					.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
					.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		return map;
	}

	public Map<String, Object> addBrandDetailsForBarcode(Box box) {
		int issueIdForBarcode = 0;
		String requestType = "";
		String issueType = "";
		String docType = "";
		String issueNo = "";
		Date issueDate = new Date();
		int toStore = 0;
		int toDepot = 0;
		BigDecimal qtyRequested = new BigDecimal(0);
		int requestNo = 0;
		Date requestDate = new Date();
		int requestedBy = 0;
		int issuedBy = 0;
		int approvedBy = 0;
		StoreIssueM issueM = new StoreIssueM();
		int issueId = 0;
		int itemId = 0;
		int issuedItemId = 0;
		String docNo = "";
		Map dataMap = new HashMap();
		boolean flag = false;
		String messageTOBeVisibleToTheUser = "";
		String qtyInRequest = "";
		int detailId = 0;
		String barcodeNo = "";
		String batchNo = "";
		int srNo = 0;
		String expiryDate = "";
		BigDecimal qtyIssued = new BigDecimal(0);
		BigDecimal closingStock = new BigDecimal(0);

		BigDecimal totalQtyIssued = new BigDecimal(0);
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		Transaction tx = null;

		try {
			tx = session.beginTransaction();

			if (box.getInt("issueIdForBarcode") == 0) {
				if (box.get(RequestConstants.REQUEST_TYPE) != null) {
					requestType = (box.get(RequestConstants.REQUEST_TYPE));
				}
				if (box.get(RequestConstants.ISSUE_TYPE) != null) {
					issueType = (box.get(RequestConstants.ISSUE_TYPE));
				}

				if (box.get(RequestConstants.DOC_TYPE) != null) {
					docType = (box.get(RequestConstants.DOC_TYPE));
				}
				if (box.get(RequestConstants.DOC_NO) != null) {
					docNo = (box.get(RequestConstants.DOC_NO));
				}
				if (box.get(RequestConstants.ISSUE_NO) != null) {
					issueNo = (box.get(RequestConstants.ISSUE_NO));
				}
				if (box.get(RequestConstants.ISSUE_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(box.get(RequestConstants.ISSUE_DATE)));
					issueDate = java.sql.Date.valueOf(date4MySQL);
				}

				if (box.get(RequestConstants.DEPARTMENT_ID_TEMP) != null) {
					toStore = box.getInt(RequestConstants.DEPARTMENT_ID_TEMP);
				}
				if (box.get(RequestConstants.DEPARTMENT_INDENT_ID) != null) {
					toDepot = (box
							.getInt(RequestConstants.DEPARTMENT_INDENT_ID));
				}
				if (box.getInt(RequestConstants.REQUEST_NO) != 0) {
					requestNo = box.getInt(RequestConstants.REQUEST_NO);
				}
				if (box.get("qtyIssued") != null) {
					qtyIssued = new BigDecimal(box.get("qtyIssued"));
				}
				if (box.get(RequestConstants.REQUEST_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(box.get(RequestConstants.REQUEST_DATE)));
					requestDate = java.sql.Date.valueOf(date4MySQL);
				}
				if (box.get(RequestConstants.REQUEST_BY) != null) {
					requestedBy = (box.getInt(RequestConstants.REQUEST_BY));
				}
				if (box.get(RequestConstants.ISSUED_BY) != null) {
					issuedBy = (box.getInt(RequestConstants.ISSUED_BY));
				}
				if (box.get(RequestConstants.APPROVED_BY) != null) {
					approvedBy = (box.getInt(RequestConstants.APPROVED_BY));
				}
				String userName = "";
				if (!box.getString("userName").equals("")) {
					userName = box.getString("userName");

				}
				Users users = new Users();
				users.setId(box.getInt("userId"));
				issueM.setLastChgBy(users);
				Date currentDate = (Date) (HMSUtil
						.getCurrentDateAndTimeObject());
				String currentTime = (String) (HMSUtil.getCurrentDateAndTime()
						.get("currentTime"));
				issueM.setLastChgDate(currentDate);
				issueM.setLastChgTime(currentTime);

				issueM.setIssueType("i");
				issueM.setIssueNo(issueNo);
				issueM.setIssueDate(issueDate);
				int hospitalId = 0;
				if (box.getInt("hospitalId") != 0) {
					hospitalId = box.getInt("hospitalId");
				}
				issueM.setHospital(new MasHospital(hospitalId));

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				// StoreInternalIndentM storeInternalIndentM = new
				// StoreInternalIndentM();
				// storeInternalIndentM.setId(toDepot);
				// issueM.setToDepot(storeInternalIndentM);

				MasDepartment department2 = new MasDepartment();
				department2.setId(toStore);
				issueM.setToStore(department2);

				// MasStoreAirForceDepot airForceDepot = new
				// MasStoreAirForceDepot();
				// airForceDepot.setId(toDepot);
				// issueM.setToUnit(airForceDepot);

				issueM.setRequestDate(requestDate);

				MasEmployee employee = new MasEmployee();
				employee.setId(requestedBy);
				issueM.setRequestBy(employee);

				MasEmployee employee2 = new MasEmployee();
				employee2.setId(approvedBy);
				issueM.setApprovedBy(employee2);

				MasEmployee employee3 = new MasEmployee();
				employee3.setId(issuedBy);
				issueM.setIssuedBy(employee3);
				issueM.setStatus("o");
				issueM.setDocNo(docNo);
				issueM.setRequestNo(new StoreInternalIndentM(requestNo));
				session.save(issueM);
				storeIssueMList = session
						.createCriteria(StoreIssueM.class)
						.add(Restrictions.eq("Status", "o"))
						.add(Restrictions.eq("IssueNo", issueNo))
						.add(Restrictions.eq("Department.Id",
								box.getInt("deptId")))
						.add(Restrictions.eq("ToStore.Id", toStore)).list();
				issueIdForBarcode = storeIssueMList.get(0).getId();
			} else {
				issueIdForBarcode = box.getInt("issueIdForBarcode");
			}
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			itemId = box.getInt("itemId");
			srNo = box.getInt("srNo");
			issuedItemId = box.getInt("issuedItemId");
			issuedItemId = box.getInt("issuedItemId");
			try {
				qtyRequested = new BigDecimal(box.get("qtyRequested"));
			} catch (Exception e) {
				qtyRequested = new BigDecimal(0);
			}
			try {
				qtyIssued = new BigDecimal(box.get("qtyIssued"));
			} catch (Exception e) {
				qtyIssued = new BigDecimal(0);
			}

			barcodeNo = box.getString("barcodeNo");
			batchNo = box.getString("batchNo");
			expiryDate = box.getString("expiryDate");

			List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
			storeIssueTList = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("SrNo", srNo))
					.add(Restrictions.eq("IssueM.Id", issueIdForBarcode))
					.list();
			if (storeIssueTList != null && storeIssueTList.size() > 0) {
				getHibernateTemplate().delete(storeIssueTList.get(0));
			}

			try {
				StoreIssueT storeIssueT1 = new StoreIssueT();

				storeIssueT1.setSrNo(srNo);
				storeIssueT1.setBatchNo(batchNo);
				storeIssueT1.setExpiryDate(HMSUtil
						.convertStringTypeDateToDateType(expiryDate));
				storeIssueT1.setItem(new MasStoreItem(itemId));
				// storeIssueT1.setItemIssued(new MasStoreItem(issuedItemId));
				storeIssueT1.setIssueM(new StoreIssueM(issueIdForBarcode));
				storeIssueT1.setIssued("y");
				storeIssueT1.setItemOrder("3");
				List<StoreItemBatchStock> storeItemBatchStockList1 = session
						.createCriteria(StoreItemBatchStock.class)
						.add(Restrictions.eq("Department.Id",
								box.getInt("deptId")))
						.add(Restrictions.eq("Item.Id", itemId))
						.add(Restrictions.eq("BatchNo", batchNo)).list();
				if (storeItemBatchStockList1 != null
						&& storeItemBatchStockList1.size() > 0) {
					if (storeItemBatchStockList1.get(0).getCostPrice() != null) {
						storeIssueT1.setCostPrice(storeItemBatchStockList1.get(
								0).getCostPrice());
						try {
							closingStock = storeItemBatchStockList1.get(0)
									.getClosingStock();
						} catch (Exception e) {
							closingStock = new BigDecimal(0);
						}
					}
				}
				storeIssueT1.setQtyIssued(qtyIssued);

				storeIssueT1.setQtyRequest(qtyRequested);
				getHibernateTemplate().save(storeIssueT1);
				hbt.refresh(storeIssueT1);
				hbt.flush();
				messageTOBeVisibleToTheUser = "isssued successFully..";
				String hql2 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.ClosingStock="
						+ closingStock.subtract(qtyIssued)
						+ "  where  a.BatchNo='"
						+ batchNo
						+ "' and a.Department.Id=" + box.getInt("deptId") + "";
				String hql3 = "update from jkt.hms.masters.business.StoreItemBatchStock  as a set a.IssueQty='"
						+ totalQtyIssued.add(qtyIssued)
						+ "'  where   a.BatchNo='"
						+ batchNo
						+ "' and a.Department.Id=" + box.getInt("deptId") + "";
				Query query2 = session.createQuery(hql2);
				int row2 = query2.executeUpdate();
				Query query3 = session.createQuery(hql3);
				int row3 = query3.executeUpdate();
				tx.commit();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		// --------------------------------------------Rstore------------------------------------

		catch (Exception e) {
			e.printStackTrace();
			tx.rollback();
		}
		map.put("messageTOBeVisibleToTheUser", messageTOBeVisibleToTheUser);
		map.put("issueIdForBarcode", issueIdForBarcode);
		return map;
	}

	public Map<String, Object> getAutoCompleteForPriceList(Box box) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		int categoryId = 0;
		try {
			if (box.get(ITEM_CATEGORY_CODE) != null
					&& box.getInt(ITEM_CATEGORY_CODE) != 0) {
				categoryId = box.getInt(ITEM_CATEGORY_CODE);
			}
			String str = box.getString("autoHint") + "%";
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str));
			if (categoryId != 0) {
				c.add(Restrictions.eq("ItemCategory.Id", categoryId));
			}
			c.setFirstResult(0);
			c.setMaxResults(10);

			itemList = c.list();
			map.put("itemList", itemList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> showPriceListReportJsp() {

		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemCategory> masItemCategoryList = new ArrayList<MasItemCategory>();
		Session session = getSession();
		masItemCategoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("masItemCategoryList", masItemCategoryList);

		return map;
	}

	public Map<String, Object> getListForFsNReportData() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemCategory> itemCategoryList = new ArrayList<MasItemCategory>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreGroup> groupList = new ArrayList<MasStoreGroup>();
		List<MasDepartment> departmentList1 = new ArrayList<MasDepartment>();
		Session session = getSession();
		itemCategoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		groupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		departmentList1 = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("DepartmentType.Id", 3))
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("itemCategoryList", itemCategoryList);
		map.put("itemTypeList", itemTypeList);
		map.put("groupList", groupList);
		map.put("departmentList", departmentList1);

		return map;
	}

	public Map<String, Object> getDataForVendorAnalysis() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemCategory> itemCategoryList = new ArrayList<MasItemCategory>();
		List<MasStoreSupplier> supplierList = new ArrayList<MasStoreSupplier>();
		List<MasManufacturer> manufacturerList = new ArrayList<MasManufacturer>();
		Session session = getSession();
		try {
			itemCategoryList = session.createCriteria(MasItemCategory.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			supplierList = session.createCriteria(MasStoreSupplier.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			manufacturerList = session.createCriteria(MasManufacturer.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemCategoryList", itemCategoryList);
		map.put("supplierList", supplierList);
		map.put("manufacturerList", manufacturerList);
		return map;
	}

	public List<StoreInternalIndentM> printDepartmentIndent(int deptId) {
		Session session = (Session) getSession();
		List<StoreInternalIndentM> deptIndentNumberList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Department.Id", deptId))
				.addOrder(Order.desc("Id")).list();
		return deptIndentNumberList;
	}

	public Map<String, Object> showSupplierWisePurchaseReport() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSupplier> searchMasStoreSupplierList = new ArrayList<MasStoreSupplier>();
		Session session = getSession();
		try {
			searchMasStoreSupplierList = session
					.createCriteria(MasStoreSupplier.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("searchMasStoreSupplierList", searchMasStoreSupplierList);
		return map;
	}

	public Map<String, Object> getItemsForItemGroup(int groupId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = getSession();
		if (groupId != 0) {
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.createAlias("Group", "g")
					.add(Restrictions.eq("g.Id", groupId))
					.addOrder(Order.asc("Nomenclature")).list();
		}
		map.put("itemList", itemList);
		return map;
	}

	public Map<String, Object> showPharamacyStaticsJsp(int departmentId) {
		Map<String, Object> map = new HashMap<String, Object>();
		// List<MasItemCategory> itemCategoryList = new
		// ArrayList<MasItemCategory>();
		// List<MasStoreGroup> itemGroupList = new ArrayList<MasStoreGroup>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {
			// itemCategoryList =
			// session.createCriteria(MasItemCategory.class).add(Restrictions.eq("Status",
			// "y")).list();
			// itemGroupList =
			// session.createCriteria(MasStoreGroup.class).add(Restrictions.eq("Status",
			// "y")).list();
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y")).list();
			employeeList = session.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("Department.Id", departmentId))
					.add(Restrictions.eq("Status", "y")).list();
			// map.put("itemCategoryList", itemCategoryList);
			// map.put("itemGroupList", itemGroupList);
		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		map.put("itemList", itemList);
		map.put("employeeList", employeeList);

		return map;
	}

	public Map<String, Object> showDeptIssueWithoutIndentJsp(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		String deptType = "";
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();

		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {

			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			departmentList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasDepartment where Status='Y' or Status='y' order by DepartmentName asc");
			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");

			employeeList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee where Status='Y' or Status='y' and Hospital.Id = "
							+ hospitalId + " order by FirstName asc");
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
			employeeDeptByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
							+ deptId
							+ " and emp.Status='Y' or Status='y' and emp.Hospital.Id = "
							+ hospitalId + " order by emp.FirstName asc");
			map.put("employeeDeptByList", employeeDeptByList);
			/*
			 * storeFyDocumentNoList = getHibernateTemplate().find("from
			 * jkt.hms.masters.business.StoreFyDocumentNo as sfdn where
			 * sfdn.Department.Id='"+deptId+"' "); for (StoreFyDocumentNo
			 * storeFyDocumentNo :storeFyDocumentNoList ) {
			 * if(storeFyDocumentNo.getIssueDeptNo() !=null){
			 * no=(""+storeFyDocumentNo.getIssueDeptNo());
			 * 
			 * }
			 */
			demandNoList = session.createCriteria(StoreFyDocumentNo.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			String demandNo = "";
			String finalDemandNo = "";
			int storeFyDocumentNoId = 0;
			if (demandNoList != null && demandNoList.size() > 0) {
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
						.get(0);
				demandNo = ("" + storeFyDocumentNo.getDemandNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				/*
				 * try { finalDemandNo = getMaxNo(demandNo);
				 * 
				 * } catch (Exception e) { e.printStackTrace(); }
				 */
				try {
					// max = getMaxNo(no);

					Map<String, Object> maxMap = new HashMap<String, Object>();
					maxMap.put("no", demandNo);
					maxMap.put("deptType", deptType);
					finalDemandNo = getMaxNoByDeptCode(maxMap);
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalDemandNo", finalDemandNo);
			} else {
				// finalDemandNo = getMaxNo(demandNo);
				try {
					// max = getMaxNo(no);
					Map<String, Object> maxMap = new HashMap<String, Object>();
					maxMap.put("no", demandNo);
					maxMap.put("deptType", deptType);
					finalDemandNo = getMaxNoByDeptCode(maxMap);
				} catch (Exception e) {
					e.printStackTrace();
				}
				map.put("finalDemandNo", finalDemandNo);
			}

			List<String> issueNoList = new ArrayList<String>();
			issueNoList = session.createCriteria(StoreIssueM.class)
					.setProjection(Projections.property("IssueNo"))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();

			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {

					no = ((String) issueNoList.get(i));
				}
			}

			searchListForPopup = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
							+ deptId
							+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = "
							+ hospitalId + "  order by Id desc");
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			// max = getMaxNo(no);
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max = getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deptName", deptName);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		map.put("max", max);
		map.put("searchListForPopup", searchListForPopup);
		return map;
	}

	public Map<String, Object> getDetailsForPharmacyConsumptionReport() {
		return null;
	}

	public Map<String, Object> addIssueWithoutIndentDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		StoreIssueM issueM = new StoreIssueM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			if (box.getInt("issueId") == 0) {
				issueM.setIssueType("i");
				issueM.setIssueNo(box.getString(ISSUE_NO));
				issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(box
						.getString(ISSUE_DATE)));

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				MasDepartment department2 = new MasDepartment();
				department2.setId(box.getInt(DEPARTMENT_ID_TEMP));
				issueM.setToStore(department2);

				issueM.setRequestDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(REQUEST_DATE)));

				MasEmployee employee = new MasEmployee();
				employee.setId(box.getInt(REQUEST_BY));
				issueM.setRequestBy(employee);

				MasEmployee employee2 = new MasEmployee();
				employee2.setId(box.getInt(APPROVED_BY));
				issueM.setApprovedBy(employee2);

				MasEmployee employee3 = new MasEmployee();
				employee3.setId(box.getInt(ISSUED_BY));
				issueM.setIssuedBy(employee3);
				issueM.setStatus("o");

				MasHospital hospital = new MasHospital();
				hospital.setId(box.getInt("hospitalId"));
				issueM.setHospital(hospital);

				issueM.setDocNo(box.getString(REQUEST_NO));
				Users users = new Users();
				users.setId(box.getInt("userId"));
				issueM.setLastChgBy(users);
				issueM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				issueM.setLastChgTime(box.getString(CHANGED_TIME));

				hbt.save(issueM);
			}

			int srNo = box.getInt(SR_NO);
			int itemId = box.getInt(ITEM_ID);
			BigDecimal qtyReq = new BigDecimal(box.getString(QTY_IN_REQUEST));
			int itemIssued = box.getInt(ISSUED_ITEM);
			Vector batchNos = box.getVector(BATCH_NO);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(REMARKS);
			Vector expDates = box.getVector(EXPIRY_DATE);
			Vector costPrice = box.getVector(COST_PRICE);

			for (int i = 0; i < batchNos.size(); i++) {
				if (!qtyIssued.get(i).toString().equals("")
						&& Integer.parseInt(qtyIssued.get(i).toString()) != 0) {
					StoreIssueT storeIssueT = new StoreIssueT();

					storeIssueT.setBatchNo(batchNos.get(i).toString());

					MasStoreItem storeItem = new MasStoreItem();
					storeItem.setId(itemId);
					storeIssueT.setItem(storeItem);

					MasStoreItem storeItem1 = new MasStoreItem();
					storeItem1.setId(itemIssued);
					// storeIssueT.setItemIssued(storeItem1);

					storeIssueT.setQtyRequest(qtyReq);
					storeIssueT.setQtyIssued(new BigDecimal(qtyIssued.get(i)
							.toString()));
					storeIssueT.setRemarks(remarks.get(i).toString());
					storeIssueT.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expDates.get(i)
									.toString()));
					storeIssueT.setCostPrice(new BigDecimal(costPrice.get(i)
							.toString()));
					storeIssueT.setSrNo(srNo);
					storeIssueT.setIssued("y");
					if (box.getInt("issueId") == 0) {
						storeIssueT.setIssueM(issueM);
					} else {
						StoreIssueM stIssueM = new StoreIssueM();
						stIssueM.setId(box.getInt("issueId"));
						storeIssueT.setIssueM(stIssueM);

					}
					hbt.save(storeIssueT);

					// --------------Update
					// StoreItemBatchStock-----------------------------

					List<StoreItemBatchStock> batchStockList = new ArrayList<StoreItemBatchStock>();
					batchStockList = session
							.createCriteria(StoreItemBatchStock.class)
							.add(Restrictions.eq("BatchNo", batchNos.get(i)))
							.createAlias("Item", "item")
							.add(Restrictions.eq("item.Id", itemId))
							.createAlias("Department", "d")
							.add(Restrictions.eq("d.Id", box.getInt("deptId")))
							.list();

					StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
					itemBatchStock = batchStockList.get(0);

					StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class,
									itemBatchStock.getId());
					if (batchStockObj.getClosingStock() != null) {
						batchStockObj.setClosingStock(batchStockObj
								.getClosingStock().subtract(
										new BigDecimal(qtyIssued.get(i)
												.toString())));
					}
					if (batchStockObj.getIssueQty() != null) {
						batchStockObj
								.setIssueQty(batchStockObj.getIssueQty().add(
										new BigDecimal(qtyIssued.get(i)
												.toString())));
					} else {
						batchStockObj.setIssueQty(new BigDecimal(qtyIssued.get(
								i).toString()));
					}

					hbt.update(batchStockObj);
				}
			}

			// --------------Update StoreFyDocumentNo
			// Table-------------------------

			int storeFyId = 0;
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", box.getInt("deptId")));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueDeptNo(box.getString(ISSUE_NO));
			hbt.update(storeFyDocumentNo);

			flag = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<Integer> lastIssueNoList = new ArrayList<Integer>();
		List<StoreIssueM> lastIssueMList = new ArrayList<StoreIssueM>();
		lastIssueNoList = session.createCriteria(StoreIssueM.class)
				.setProjection(Projections.max("Id")).list();
		lastIssueMList = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", lastIssueNoList.get(0))).list();
		map.put("issueId", lastIssueNoList.get(0));
		map.put("flag", flag);
		return map;
	}

	// ---------By Dipali---------
	@Override
	public Map<String, Object> getPatientForDrugIssue(
			Map<String, Object> mapForDs) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<PatientPrescriptionHeader> patientList = new ArrayList<PatientPrescriptionHeader>();
		Session session = (Session) getSession();

		String hinNo = "";
		String patientFName = "";
		String patientMName = "";
		String patientLName = "";
		int hospitalId = 0;
		int deptId = 0;
		if (mapForDs.get("hinNo") != null) {
			hinNo = (String) mapForDs.get("hinNo");
		}
		if (mapForDs.get("deptId") != null) {
			deptId = (Integer) mapForDs.get("deptId");
		}
		if (mapForDs.get("patientFName") != null) {
			patientFName = (String) mapForDs.get("patientFName");
		}
		if (mapForDs.get("patientLName") != null) {
			patientLName = (String) mapForDs.get("patientLName");
		}
		if (mapForDs.get("patientMName") != null) {
			patientMName = (String) mapForDs.get("patientMName");
		}
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			// List<Visit> visitIdList = new ArrayList<Visit>();
			List<Integer> maxVisitIdList = new ArrayList<Integer>();
			int maxVisitId = 0;
			String previousDate = HMSUtil
					.getPrevDate(Integer.parseInt(properties
							.getProperty("store.patientdrug_issue_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate = HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			if (mapDate.get("currentDate") != null) {
				currentDate = (String) mapDate.get("currentDate");
			}
			String sql = "";
			sql = "select v.Id from jkt.hms.masters.business.Visit v join v.Hin as p where v.VisitDate between '"
					+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
					+ "' and '"
					+ HMSUtil.getConvertDateYYYYMMDD(currentDate) + "'";
			if (hinNo != "") {
				sql = sql + " and  p.HinNo = '" + hinNo + "'";
			} else {

				if (patientFName != "" && patientMName != ""
						&& patientLName != "") {
					// sql="select max(v.Id) from jkt.hms.masters.business.Visit v join v.Hin as p ";
					sql = sql + " and p.PFirstName='" + patientFName
							+ "' and p.PMiddleName='" + patientMName
							+ "' and p.PLastName='" + patientLName + "'";
				} else if (patientFName != "" && patientMName != ""
						&& patientLName == "") {

					sql = sql + " and  p.PFirstName='" + patientFName
							+ "' and p.PMiddleName='" + patientMName + "'";
				} else if (patientFName != "" && patientMName == ""
						&& patientLName == "") {
					sql = sql + " and  p.PFirstName='" + patientFName + "'";
				} else if (patientFName == "" && patientMName == ""
						&& patientLName == "") {
					// sql="select max(v.Id) from jkt.hms.masters.business.Visit v join v.Hin as p ";
					sql = "select max(v.Id) from jkt.hms.masters.business.Visit v join v.Hin as p where v.VisitDate between '"
							+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
							+ "' and '"
							+ HMSUtil.getConvertDateYYYYMMDD(currentDate) + "'";

				} else if (patientFName == "" && patientMName != ""
						&& patientLName == "") {
					sql = sql + " and  p.PMiddleName='" + patientMName + "'";
				} else if (patientFName == "" && patientMName == ""
						&& patientLName != "") {
					sql = sql + " and  p.PLastName='" + patientLName + "'";
				} else if (patientFName == "" && patientMName != ""
						&& patientLName != "") {

					sql = sql + " and  p.PMiddleName='" + patientMName
							+ "' and  p.PLastName='" + patientLName + "'";
				} else if (patientFName != "" && patientMName == ""
						&& patientLName != "") {
					sql = sql + " and  p.PFirstName='" + patientFName
							+ "' and  p.PLastName='" + patientLName + "'";
				} else if (hinNo == "" && patientFName == ""
						&& patientMName == "" && patientLName != "") {

					sql = sql + " and  p.PLastName='" + patientLName + "'";
				}
			}
			maxVisitIdList = hbt.find(sql);
			/*
			 * if( maxVisitIdList!=null || maxVisitIdList.size()>0) { maxVisitId
			 * = maxVisitIdList.get(0); } visitIdList =
			 * session.createCriteria(Visit.class) .add(Restrictions.eq("Id",
			 * maxVisitId)).list(); Visit lastVisit = new Visit(); lastVisit =
			 * (Visit) visitIdList.get(0);
			 */

			/*
			 * List<Object> lastVisitList=new ArrayList<Object>(); lastVisitList
			 * = getHibernateTemplate().find(
			 * "select max(visit.Id),sl,hin.HinNo,hin.PFirstName,hin.PMiddleName,hin.PLastName from jkt.hms.masters.business.PatientPrescriptionHeader as sl join sl.Visit as visit join visit.Hin as hin where hin.HinNo = '"
			 * + hinNo+
			 * "' and hin.PatientStatus='Out Patient' group by hin.HinNo,sl.Id,sl.Status,sl.PrescriptionDate,sl.PrescriptionTime,sl.PrescriptionNo,sl.Hospital.Id,sl.Department.Id,sl.Visit.Id,sl.Hin.Id"
			 * );
			 */
			if (maxVisitIdList.size() > 0) {

				Criteria crit = session
						.createCriteria(PatientPrescriptionHeader.class)
						.createAlias("Visit", "vt")
						.add(Restrictions.in("vt.Id", maxVisitIdList))
						.add(Restrictions.eq("vt.Hospital.Id", hospitalId))
						.createAlias("vt.Hin", "hn")
						.add(Restrictions.eq("hn.Hospital.Id", hospitalId))
						.add(Restrictions.eq("hn.PatientStatus", "Out Patient"));
				// ("vt.VisitNo", lastVisit.getVisitNo())
				if (!hinNo.equals("")) {
					crit = crit.add(Restrictions.eq("hn.HinNo", hinNo));
				} else {
					if (!patientFName.equals("")) {
						crit = crit.add(Restrictions.like("hn.PFirstName",
								patientFName + "%"));
					}
					if (!patientMName.equals("")) {
						crit = crit.add(Restrictions.like("hn.PMiddleName",
								patientMName + "%"));
					}
					if (!patientLName.equals("")) {
						crit = crit.add(Restrictions.like("hn.PLastName",
								patientLName + "%"));
					}
				}
				patientList = crit.list();

				/*
				 * if(deptId==158) { Criteria crit =
				 * session.createCriteria(PatientPrescriptionHeader.class).
				 * createAlias("Visit", "vt").add(Restrictions.in("vt.Id",
				 * maxVisitIdList)) .createAlias("vt.Hin",
				 * "hn").add(Restrictions.eq("hn.PatientStatus", "Out Patient"))
				 * .add(Restrictions.eq("Department.Id", 20)) ; //("vt.VisitNo",
				 * lastVisit.getVisitNo()) if (!hinNo.equals("")) { crit =
				 * crit.add(Restrictions.eq("hn.HinNo", hinNo)); }else{ if
				 * (!patientFName.equals("")) { crit =
				 * crit.add(Restrictions.like("hn.PFirstName", patientFName +
				 * "%")); } if (!patientMName.equals("")) { crit =
				 * crit.add(Restrictions.like("hn.PMiddleName", patientMName +
				 * "%")); } if (!patientLName.equals("")) { crit =
				 * crit.add(Restrictions.like("hn.PLastName", patientLName +
				 * "%")); } } patientList = crit.list(); } else { Criteria crit
				 * = session.createCriteria(PatientPrescriptionHeader.class).
				 * createAlias("Visit", "vt").add(Restrictions.in("vt.Id",
				 * maxVisitIdList)) .createAlias("vt.Hin",
				 * "hn").add(Restrictions.eq("hn.PatientStatus", "Out Patient"))
				 * .add(Restrictions.ne("Department.Id", 20)) ; //("vt.VisitNo",
				 * lastVisit.getVisitNo()) if (!hinNo.equals("")) { crit =
				 * crit.add(Restrictions.eq("hn.HinNo", hinNo)); }else{ if
				 * (!patientFName.equals("")) { crit =
				 * crit.add(Restrictions.like("hn.PFirstName", patientFName +
				 * "%")); } if (!patientMName.equals("")) { crit =
				 * crit.add(Restrictions.like("hn.PMiddleName", patientMName +
				 * "%")); } if (!patientLName.equals("")) { crit =
				 * crit.add(Restrictions.like("hn.PLastName", patientLName +
				 * "%")); } } patientList = crit.list();
				 * 
				 * }
				 */

			}
		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		map.put("patientList", patientList);
		return map;
	}

	@Override
	public Map<String, Object> showPatientForDrugIssue(
			Map<String, Object> mapForDs) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Visit> patientList = new ArrayList<Visit>();
		List<PatientPrescriptionDetails> prescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		List<StoreIssueT> drugIssueDetailsList = new ArrayList<StoreIssueT>();
		List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
		Session session = (Session) getSession();
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}

		String deptType = "";
		if (mapForDs.get("deptType") != null) {
			deptType = (String) mapForDs.get("deptType");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			prescriptionDetailsList = session
					.createCriteria(PatientPrescriptionDetails.class)
					.createAlias("Prescription", "presc")
					.add(Restrictions.eq("presc.Id", hinId)).list();

			if (prescriptionDetailsList != null
					|| prescriptionDetailsList.size() > 0) {
				detailsMap.put("prescriptionDetailsList",
						prescriptionDetailsList);
			}

			int visit_id = 0;
			int hin_id = 0;
			for (PatientPrescriptionDetails prsdeDetails : prescriptionDetailsList) {
				visit_id = prsdeDetails.getPrescription().getVisit().getId();
				hin_id = prsdeDetails.getPrescription().getHin().getId();
			}
			patientList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visit_id)).list();
			if (patientList != null || patientList.size() > 0) {
				detailsMap.put("patientList", patientList);
			}

			/*
			 * Criteria c
			 * =session.createCriteria(StoreIssueT.class).add(Restrictions
			 * .eq("Issued","y")) .createAlias("Visit",
			 * "vit").add(Restrictions.eq("vit.Hin.Id", hin_id));
			 * c.setMaxResults(5);
			 * //c.setProjection(Projections.groupProperty("IssueM.Id"));
			 * alreadyissuedDrugList=c.list();
			 */
			List<Object[]> visitList = new ArrayList<Object[]>();
			String query = "select  a.id,v.visit_date from store_issue_m a, store_issue_t b,visit v where a.id=b.issue_m_id "
					+ "and b.visit_id=v.visit_id and b.issued='y' and v.hin_id="
					+ hin_id
					+ " and a.hospital_id= "
					+ hospitalId
					+ "group by a.id,v.visit_date order by a.id desc LIMIT 2";
			visitList = session.createSQLQuery(query).list();
			detailsMap.put("visitList", visitList);
			if (alreadyissuedDrugList != null
					|| alreadyissuedDrugList.size() > 0) {
				detailsMap.put("alreadyissuedDrugList", alreadyissuedDrugList);
			}
			List<String> issueNoList = new ArrayList<String>();
			/*
			 * issueNoList =
			 * session.createCriteria(StoreIssueM.class).setProjection
			 * (Projections.property("IssueNo")).list();
			 */
			String query1 = "select issue_no from store_issue_m order by id desc limit 1 ";
			issueNoList = session.createSQLQuery(query1).list();
			String no = "";
			//
			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {
					no = ((String) issueNoList.get(i));
				}
			}
			//
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			String patientIssueNo = "";

			patientIssueNo = getMaxNoByDeptCode(maxMap);
			detailsMap.put("patientIssueNo", patientIssueNo);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	@Override
	public Map<String, Object> showPendingDispensingJsp(
			Map<String, Object> mapForDs) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Visit> patientList = new ArrayList<Visit>();
		List<PatientPrescriptionDetails> prescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		List<StoreIssueT> drugIssueDetailsList = new ArrayList<StoreIssueT>();
		List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();
		Session session = (Session) getSession();
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}

		String deptType = "";
		if (mapForDs.get("deptType") != null) {
			deptType = (String) mapForDs.get("deptType");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			prescriptionDetailsList = session
					.createCriteria(PatientPrescriptionDetails.class)
					.createAlias("Prescription", "presc")
					.add(Restrictions.eq("presc.Id", hinId)).list();

			if (prescriptionDetailsList != null
					|| prescriptionDetailsList.size() > 0) {
				detailsMap.put("prescriptionDetailsList",
						prescriptionDetailsList);
			}

			int visit_id = 0;
			int hin_id = 0;
			for (PatientPrescriptionDetails prsdeDetails : prescriptionDetailsList) {
				visit_id = prsdeDetails.getPrescription().getVisit().getId();
				hin_id = prsdeDetails.getPrescription().getHin().getId();
			}
			patientList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visit_id)).list();
			if (patientList != null || patientList.size() > 0) {
				detailsMap.put("patientList", patientList);
			}

			/*
			 * Criteria c
			 * =session.createCriteria(StoreIssueT.class).add(Restrictions
			 * .eq("Issued","y")) .createAlias("Visit",
			 * "vit").add(Restrictions.eq("vit.Hin.Id", hin_id));
			 * c.setMaxResults(5);
			 * //c.setProjection(Projections.groupProperty("IssueM.Id"));
			 * alreadyissuedDrugList=c.list();
			 */
			List<Object[]> visitList = new ArrayList<Object[]>();
			String query = "select  a.id,v.visit_date from store_issue_m a, store_issue_t b,visit v where a.id=b.issue_m_id "
					+ "and b.visit_id=v.visit_id and b.issued='y' and v.hin_id="
					+ hin_id
					+ " and a.hospital_id= "
					+ hospitalId
					+ "group by a.id,v.visit_date order by a.id desc LIMIT 2";
			visitList = session.createSQLQuery(query).list();
			detailsMap.put("visitList", visitList);
			if (alreadyissuedDrugList != null
					|| alreadyissuedDrugList.size() > 0) {
				detailsMap.put("alreadyissuedDrugList", alreadyissuedDrugList);
			}
			List<String> issueNoList = new ArrayList<String>();
			/*
			 * issueNoList =
			 * session.createCriteria(StoreIssueM.class).setProjection
			 * (Projections.property("IssueNo")).list();
			 */
			String query1 = "select issue_no from store_issue_m order by id desc limit 1 ";
			issueNoList = session.createSQLQuery(query1).list();
			String no = "";
			//
			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {
					no = ((String) issueNoList.get(i));
				}
			}
			//
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			String patientIssueNo = "";

			patientIssueNo = getMaxNoByDeptCode(maxMap);
			detailsMap.put("patientIssueNo", patientIssueNo);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	@Override
	public Map<String, Object> viewIssuedDrug(Map<String, Object> parameterMap) {

		Session session = (Session) getSession();
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<StoreIssueT> drugIssueDetailsList = new ArrayList<StoreIssueT>();
		Date visitDate = new Date();
		int issuedMId = 0;
		if (parameterMap.get("issuedMId") != null) {
			issuedMId = (Integer) parameterMap.get("issuedMId");
		}
		/*
		 * drugIssueDetailsList=session.createCriteria(StoreIssueT.class).add(
		 * Restrictions.eq("Issued","y")) .createAlias("Visit",
		 * "vit").add(Restrictions.eq("vit.VisitDate",visitDate))
		 * .add(Restrictions.eq("vit.Id", visitIdView)).list();
		 */

		drugIssueDetailsList = session.createCriteria(StoreIssueT.class)
				.add(Restrictions.eq("Issued", "y"))
				.createAlias("IssueM", "issueM")
				.add(Restrictions.eq("issueM.Id", issuedMId)).list();
		if (drugIssueDetailsList.size() > 0) {
			detailsMap.put("drugIssueDetailsList", drugIssueDetailsList);
		}
		return detailsMap;
	}

	public Map<String, Object> addPatientDrugIssue(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		Date issueDate = new Date();
		StoreIssueM issueM = new StoreIssueM();
		Session session = getSession();
		final Map<String,Object> dataForMedicenDispencing=new HashMap<String,Object>();
		Transaction tx = null;
		Vector	presId=box.getVector("presId");;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreIssueT storeIssueTObj = new StoreIssueT();
			List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
			int visitId = box.getInt("visitId");
			
			storeIssueTList = hbt
					.find("select sit from jkt.hms.masters.business.StoreIssueT as sit  where sit.Visit.Id="
							+ visitId);
			PatientPrescriptionHeader patientPrescriptionHeader=(PatientPrescriptionHeader) session.createCriteria(PatientPrescriptionHeader.class)
							.add(Restrictions.eq("Visit.Id", visitId)).uniqueResult();
			int issueId = 0;
			if (storeIssueTList.size() > 0) {
				for (StoreIssueT storeIssueT : storeIssueTList) {
					// Object[] object = (Object[]) iterator.next();
					// StoreIssueT storeIssueT=new StoreIssueT();
					// storeIssueT=(StoreIssueT)object[0];
					if (storeIssueT.getIssueM() != null) {
						issueId = storeIssueT.getIssueM().getId();
						issueM =  (StoreIssueM)session.get(StoreIssueM.class, issueId);// added by amit das on 26-08-2017
						dataForMedicenDispencing.put("issueM", issueM); // added by amit das on 26-08-2017
						
					}
				}
			} else {
				// if(box.getInt("issueId") == 0){
				issueM.setIssueType("i");

				issueM.setIssueNo(box.getString(ISSUE_NO));
				if (box.get(RequestConstants.ISSUE_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(box.get(RequestConstants.ISSUE_DATE)));
					issueDate = java.sql.Date.valueOf(date4MySQL);
				}
				issueM.setIssueDate(issueDate);
				String deptType = "";
				deptType = (String) box.getString("deptType");

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				String patientIssueNo = generateDrugIssueNumber(deptType);

				issueM.setIssueNo(box.getString(ISSUE_NO));

				issueM.setStatus("o");

				MasHospital hospital = new MasHospital();
				hospital.setId(box.getInt("hospitalId"));
				issueM.setHospital(hospital);

				Users users = new Users();
				users.setId(box.getInt("userId"));
				issueM.setLastChgBy(users);
				issueM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				issueM.setLastChgTime(box.getString(CHANGED_TIME));
				issueM.setHin(patientPrescriptionHeader.getHin());
				hbt.save(issueM);
				dataForMedicenDispencing.put("issueM", issueM);
			}

			
			int srNo = box.getInt(SR_NO);
			int itemId = box.getInt(ITEM_ID);
			BigDecimal qtyReq = new BigDecimal(box.getString(QTY_IN_REQUEST));
			int itemIssued = box.getInt(ISSUED_ITEM);
			Vector batchNos = box.getVector(BATCH_NO);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			float a = Float.valueOf((String) qtyIssued.get(0));
			Vector remarks = box.getVector(REMARKS);
			Vector expDates = box.getVector(EXPIRY_DATE);
			Vector costPrice = box.getVector(COST_PRICE);

			//int presId=0;
			
			List<Integer> stocks = new ArrayList<Integer>();
			List<BigDecimal> quantity = new ArrayList<BigDecimal>();

			List<StoreIssueT> storeIssueTForServerList=new ArrayList<StoreIssueT>();
			List<StoreItemBatchStock> storeItemBatchStockList=new ArrayList<StoreItemBatchStock>();
		//	List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>(); // commented by amit das on 11-08-2016
			BigDecimal issueQtyForPatientPrecscription = new BigDecimal(0);
			for (int i = 0; i < batchNos.size(); i++) {
				if (!qtyIssued.get(i).toString().equals("")
						&& Integer.parseInt(qtyIssued.get(i).toString()) != 0) {
					/**
					 * Code for Check Drug Issued Or Not
					 */


					StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) session
							.load(StoreItemBatchStock.class,
									box.getInt("storeItemId" + (i + 1)));
					
					// condition added by amit das on 20-09-2016
					if(itemBatchStock!=null && itemBatchStock.getClosingStock()!=null && itemBatchStock
							.getClosingStock().subtract(
									new BigDecimal(qtyIssued.get(i)
											.toString())).intValue()>=0) {
					
					StoreIssueT storeIssueT = new StoreIssueT();

					storeIssueT.setBatchNo(batchNos.get(i).toString());

					if (visitId != 0) {
						Visit visit = new Visit();
						visit.setId(visitId);
						storeIssueT.setVisit(visit);
					}
					MasStoreItem storeItem = new MasStoreItem();
					storeItem.setId(itemId);
					storeIssueT.setItem(storeItem);
					/*StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
					storeItemBatchStock.setId(box.getInt("storeItemId"
							+ (i + 1)));*/ // commented by amit das on 20-09-2016
					
					
					storeIssueT.setStock(itemBatchStock);
					MasStoreItem storeItem1 = new MasStoreItem();
					storeItem1.setId(itemIssued);
					// storeIssueT.setItemIssued(storeItem1);

					storeIssueT.setQtyRequest(qtyReq);
					storeIssueT.setQtyIssued(new BigDecimal(qtyIssued.get(i)
							.toString()));
					storeIssueT.setRemarks(remarks.get(i).toString());
					storeIssueT.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(expDates.get(i)
									.toString()));
					if(costPrice.get(i)!=null && !costPrice.get(i).equals("") && !costPrice.get(i).equals("null") && !costPrice.get(i).equals("0")){
					storeIssueT.setCostPrice(new BigDecimal(costPrice.get(i)
							.toString()));
					}
					storeIssueT.setSrNo(srNo);
					storeIssueT.setIssued("y");
					if (issueId == 0) {
						storeIssueT.setIssueM(issueM);
					} else {
						StoreIssueM stIssueM = new StoreIssueM();
						stIssueM.setId(issueId);
						storeIssueT.setIssueM(stIssueM);

					}
					storeIssueT.setItemReplacedToPharmacy("n");
					PatientPrescriptionDetails prescription=new PatientPrescriptionDetails();
					/*if(presId.get(0)!=null && !presId.get(0).equals("")){
					prescription.setId(Integer.parseInt(""+presId.get(0)));
					storeIssueT.setPrescription(prescription);
					}else{*/
						List<PatientPrescriptionDetails>ppdList=new ArrayList<PatientPrescriptionDetails>();
						ppdList=session.createCriteria(PatientPrescriptionDetails.class)
								.createAlias("Prescription","Prescription")
								.add(Restrictions.eq("Prescription.Visit.Id",visitId))
								.add(Restrictions.eq("Item.Id",itemId))
								.list();
						int presId2=0;
						for(PatientPrescriptionDetails ppd:ppdList)	{
							presId2=ppd.getId();
						}

						prescription.setId(presId2);
						storeIssueT.setPrescription(prescription);
					
					hbt.save(storeIssueT);
					storeIssueTForServerList.add(storeIssueT);
					// --------------Update
					// StoreItemBatchStock-----------------------------
					// List<StoreItemBatchStock> batchStockList = new
					// ArrayList<StoreItemBatchStock>();
					/*
					 * batchStockList =
					 * 
					 * .createCriteria(StoreItemBatchStock.class)
					 * .add(Restrictions.eq("BatchNo", batchNos.get(i)))
					 * .createAlias("Item", "item")
					 * .add(Restrictions.eq("item.Id", itemId))
					 * .createAlias("Department", "d")
					 * .add(Restrictions.eq("d.Id", box.getInt("deptId")))
					 * .list();
					 */
				/*
					StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) session
							.load(StoreItemBatchStock.class,
									box.getInt("storeItemId" + (i + 1)));*/
					// commented by amit das on 20-09-2016
					
					
					stocks.add(itemBatchStock.getId());
					quantity.add(new BigDecimal(qtyIssued.get(i)
							.toString()));

					StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class,
									itemBatchStock.getId());
					if (batchStockObj.getClosingStock() != null) {
						batchStockObj.setClosingStock(batchStockObj
								.getClosingStock().subtract(
										new BigDecimal(qtyIssued.get(i)
												.toString())));
					}
					if (batchStockObj.getIssueQty() != null) {
						batchStockObj
								.setIssueQty(batchStockObj.getIssueQty().add(
										new BigDecimal(qtyIssued.get(i)
												.toString())));
					} else {
						batchStockObj.setIssueQty(new BigDecimal(qtyIssued.get(
								i).toString()));
					}
					issueQtyForPatientPrecscription = issueQtyForPatientPrecscription
							.add(new BigDecimal(qtyIssued.get(i).toString()));
					hbt.update(batchStockObj);
					storeItemBatchStockList.add(batchStockObj);
					// --------------Update StoreFyDocumentNo
					// Table-------------------------
					int presDetailId = 0;
					int preHeaderId = 0;
					List<PatientPrescriptionDetails> presDetailList = new ArrayList<PatientPrescriptionDetails>();
					presDetailList = session
							.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "sch")
							.add(Restrictions.eq("sch.Visit.Id", visitId))
							.add(Restrictions.eq("Item.Id", itemId)).list();

					for (PatientPrescriptionDetails preDetailsObj : presDetailList) {
						presDetailId = preDetailsObj.getId();
					}

					PatientPrescriptionDetails patPrescriptionDetails = (PatientPrescriptionDetails) hbt
							.load(PatientPrescriptionDetails.class,
									presDetailId);
					preHeaderId = patPrescriptionDetails.getPrescription()
							.getId();

					float totatStoreIssue = 0.00f;
					if (patPrescriptionDetails.getTotalStoreIssuedQty() != null) {
						totatStoreIssue = patPrescriptionDetails
								.getTotalStoreIssuedQty();
					}
					patPrescriptionDetails
							.setTotalStoreIssuedQty(new Float(qtyIssued.get(i)
									.toString()));
					patPrescriptionDetails.setCurStoreIssuedQty(new Float(qtyIssued.get(i)
							.toString()));
					if (issueQtyForPatientPrecscription.floatValue() == presDetailList
							.get(0).getTotal()) {
						patPrescriptionDetails.setIssuedStatus("y");
					}
					if (issueQtyForPatientPrecscription.floatValue() < presDetailList
							.get(0).getTotal()) {
						patPrescriptionDetails.setIssuedStatus("n");
					}

					hbt.update(patPrescriptionDetails);
					// patientPrescriptionDetailsList.add(patPrescriptionDetails); // commented by amit das on 11-08-2016
					preHeaderId = presDetailList.get(0).getPrescription()
							.getId();
					List<PatientPrescriptionDetails> presDetailList1 = new ArrayList<PatientPrescriptionDetails>();
					presDetailList1 = session
							.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "sch")
							.add(Restrictions.eq("sch.Id", preHeaderId)).list();
					boolean isTrue = true;

					for (PatientPrescriptionDetails preDetailsObj1 : presDetailList1) {
						// presDetailId = preDetailsObj1.getPrescription();
						if ((!"y".equalsIgnoreCase(preDetailsObj1
								.getIssuedStatus()))) {
							isTrue = false;
							break;
						}
					}

					/*
					 * List<PatientPrescriptionHeader> presHeaderList = new
					 * ArrayList<PatientPrescriptionHeader>(); presHeaderList =
					 * session .createCriteria(PatientPrescriptionHeader.class)
					 * .add(Restrictions.eq("Id", preHeaderId)) .list();
					 */
					PatientPrescriptionHeader patPrescriptionHeader = (PatientPrescriptionHeader) hbt
							.load(PatientPrescriptionHeader.class, preHeaderId);

					if (isTrue) {
						patPrescriptionHeader.setIssuedStatus("y");
					} else {
						patPrescriptionHeader.setIssuedStatus("n");
					}

					hbt.update(patPrescriptionHeader);
					dataForMedicenDispencing.put("patPrescriptionHeader", patPrescriptionHeader);
					dataForMedicenDispencing.put("patPrescriptionDetails", patPrescriptionDetails); // added by amit das on 11-08-2016
					
					}
					
				}
				
			} 
			dataForMedicenDispencing.put("storeIssueTForServerList", storeIssueTForServerList);
			dataForMedicenDispencing.put("storeItemBatchStockList", storeItemBatchStockList);
		//	dataForMedicenDispencing.put("patientPrescriptionDetailsList", patientPrescriptionDetailsList); // commented by amit das on 11-08-2016
			Map<String, Object> detailsMap =new HashMap<String, Object>();
			detailsMap.put(HOSPITAL_ID,box.getInt("hospitalId"));
			detailsMap.put(USERID,box.getInt("userId"));
			Visit visit=(Visit) hbt.get(Visit.class, box.getInt("visitId"));
			detailsMap.put(HIN_ID,visit.getHin().getId());			
			detailsMap.put(VISIT_ID,box.getInt("visitId"));			
			detailsMap.put("stock",stocks);
			detailsMap.put("quantity",quantity);
			
			map=billingMasterDataService.internalBillingForDispensing(detailsMap);
			dataForMedicenDispencing.put("dispensingHeader", map.get("dispensingHeader"));
			dataForMedicenDispencing.put("blDispensingDetailsList", map.get("blDispensingDetailsList"));

			flag = true;
			tx.commit();
			final MasHospital  masHospital=(MasHospital)session.get(MasHospital.class, box.getInt("hospitalId")); 
			dataForMedicenDispencing.put("hospital", masHospital);
			
			//#13- Tech Debt: Comment out the code those are related to Lean server
			/*new Thread(){
				public void run(){
					if(masHospital!=null && masHospital.getServerIp()!=null && !masHospital.getServerIp().trim().equals("") && !masHospital.getServerIp().trim().equals("null") && masHospital.getServerPort()!=null && !masHospital.getServerPort().trim().equals("") && !masHospital.getServerPort().trim().equals("null")){

						
						String patientRegMessage=medicineDispencingToToCentralServer(dataForMedicenDispencing);
						// commented by amit das on 02-08-2016
						// added by amit das on 28-07-2016
						if(!"success".equalsIgnoreCase(patientRegMessage)){
							dataForMedicenDispencing.put("status","N");
							medicineDispencingToLeanServer(dataForMedicenDispencing);
						}else{
							dataForMedicenDispencing.put("status","Y");
							medicineDispencingToLeanServer(dataForMedicenDispencing);
						}   
					} 
					if(masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){
 	
							String patientRegMessage=medicineDispencingToLeanServer(dataForMedicenDispencing,masHospital);
							if(!"success".equalsIgnoreCase(patientRegMessage)){
								dataForMedicenDispencing.put("status","N");
								medicineDispencingToLeanServer(dataForMedicenDispencing);
							}else{
								dataForMedicenDispencing.put("status","Y");
								medicineDispencingToLeanServer(dataForMedicenDispencing);
							}   
					}
				}
				
			}.start();*/
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<Integer> lastIssueNoList = new ArrayList<Integer>();
		List<StoreIssueM> lastIssueMList = new ArrayList<StoreIssueM>();
		lastIssueNoList = session.createCriteria(StoreIssueM.class)
				.setProjection(Projections.max("Id")).list();
		lastIssueMList = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", lastIssueNoList.get(0))).list();
		map.put("issueId", lastIssueNoList.get(0));
		map.put("presId",presId.get(0));
		map.put("flag", flag);

		return map;
	}

	public String generateDrugIssueNumber(String deptType) {

		Map<String, Object> map = new HashMap<String, Object>();
		Integer ptSeqNo = 0;
		String patientIssueNo = "";
		String lastSeqNo = "";
		String lastSeqYear = "";

		List<MasDepartmentType> departmentList = new ArrayList<MasDepartmentType>();
		List<TransactionSequence> seqList = new ArrayList<TransactionSequence>();

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String currentYear = date.substring(date.lastIndexOf("/") + 1);

		String currentDate = "";
		currentDate = (String) utilMap.get("currentDate");
		String financialYear = "";
		financialYear = HMSUtil.getFinancialYearYY_YY(currentDate);
		/*
		 * String financialYear="";
		 * financialYear=HMSUtil.getfinancialYear(currentDate);
		 */

		Session session = (Session) getSession();
		/*
		 * List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
		 * issueNoList = session.createCriteria(StoreIssueM.class).list(); if
		 * (issueNoList.size() > 0) { for (StoreIssueM issueM : issueNoList) {
		 * lastSeqNo = issueM.getIssueNo(); } StringTokenizer str = new
		 * StringTokenizer(lastSeqNo, "/");
		 * 
		 * } else if (lastSeqYear.equals("")) { lastSeqYear = currentYear; }
		 */
		lastSeqYear = currentYear;
		seqList = session.createCriteria(TransactionSequence.class)
				.add(Restrictions.eq("TransactionPrefix", "PDIN")).list();

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);

		/*
		 * issueNoList = session.createCriteria(StoreIssueM.class).list();
		 * String lastDiagNo = ""; if (issueNoList.size() > 0) { for
		 * (StoreIssueM issueM : issueNoList) { lastDiagNo =
		 * issueM.getIssueNo(); } }
		 */

		if (seqList.size() > 0) {
			for (TransactionSequence transactionSequence : seqList) {
				TransactionSequence obj = (TransactionSequence) seqList.get(0);
				int id = obj.getId();
				Integer seqNo = 0;

				if (currentYear.equals(lastSeqYear)) {
					seqNo = obj.getTransactionSequenceNumber();
				} else {
					seqNo = 0;
				}
				TransactionSequence transactionSequenceObj = (TransactionSequence) hbt
						.load(TransactionSequence.class, id);
				transactionSequenceObj.setTransactionSequenceNumber(seqNo + 1);
				++seqNo;
				hbt.update(transactionSequenceObj);
				hbt.refresh(transactionSequenceObj);
				patientIssueNo = deptType.concat("/")
						.concat(seqNo.toString().concat("/"))
						.concat(String.valueOf(financialYear));
			}
		} else if (seqList.size() == 0) {
			TransactionSequence tsObj = new TransactionSequence();
			tsObj.setStatus("y");
			tsObj.setTablename("StoreIssueM");
			tsObj.setTransactionPrefix("PDIN");
			tsObj.setTransactionSequenceName("Issue No");
			tsObj.setTransactionSequenceNumber(0);
			tsObj.setFinanicalYear(financialYear);
			tsObj.setCreatedby("admin");
			tsObj.setStatus("y");
			hbt.save(tsObj);
			patientIssueNo = deptType.concat("/")
					.concat(patientIssueNo.concat("/"))
					.concat(String.valueOf(financialYear));
		}

		return patientIssueNo;

	}

	// --PO tacking By Dipali
	@Override
	public Map<String, Object> searchPOList(Map<String, Object> map) {
		List<StorePoHeader> opHeaderList = new ArrayList<StorePoHeader>();
		Date fromDate = null;
		Date toDate = null;
		Session session = (Session) getSession();
		int hospitalId = 0;

		if (map.get("fromDate") != null) {
			fromDate = (Date) map.get("fromDate");
		}
		if (map.get("toDate") != null) {
			toDate = (Date) map.get("toDate");
		}
		if (map.get("hospitalId") != null) {
			hospitalId = (Integer) map.get("hospitalId");
		}
		try {
			Criteria crit = session.createCriteria(StorePoHeader.class)
					.add(Restrictions.between("PoDate", fromDate, toDate))
					.add(Restrictions.eq("Hospital.Id", hospitalId));
			opHeaderList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("opHeaderList", opHeaderList);
		return map;
	}

	@Override
	public Map<String, Object> showPoTrackingDetails(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		List<StorePoHeader> poDetailsList = new ArrayList<StorePoHeader>();
		int Id = 0;
		if (dataMap.get("id") != null) {
			Id = (Integer) dataMap.get("id");
		}
		try {
			poDetailsList = session.createCriteria(StorePoHeader.class)
					.add(Restrictions.eq("Id", Id)).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("poDetailsList", poDetailsList);
		return map;
	}

	@Override
	public Map<String, Object> searchButtonPOTrackingList(
			Map<String, Object> map) {
		List<StorePoHeader> opHeaderList = new ArrayList<StorePoHeader>();
		Session session = (Session) getSession();

		try {
			Criteria crit = session.createCriteria(StorePoHeader.class);
			opHeaderList = crit.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("opHeaderList", opHeaderList);
		return map;
	}

	// ----End By Dipali---
	// ----By Ram Dular---
	public Map<String, Object> getItemListForBINCardByAutocomplete(Map mapforBin) {
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			String str = "%" + mapforBin.get("autoHint") + "%";
			String query = "select mst from MasStoreItem as mst where UPPER(mst.Nomenclature) like UPPER('"+ str + "') and UPPER(mst.Status)=UPPER('Y')";
			
			
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	}

	@Override
	public Map<String, Object> showAdjustmentForSearchJsp(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
			departmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "y")).list();
			map.put("departmentList", departmentList);
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		return map;

	}

	// --By Mukesh--

	/*
	 * Code for Deparetment Issue
	 */
	/*
	 * public Map<String, Object> searchIndentDetails(Box box) { Map<String,
	 * Object> map = new HashMap<String, Object>(); int requestNo =
	 * box.getInt("requestNo"); List<Object[]> indentTList = new
	 * ArrayList<Object[]>(); List<MasDepartment> departmentList = new
	 * ArrayList<MasDepartment>(); List<MasEmployee> employeeList = new
	 * ArrayList<MasEmployee>(); try { Session session = getSession(); String
	 * query =
	 * "select b.item_id, i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id, b.id, max(b.qty_request) as qty_request, sum(isnull(b.qty_issued,0)) as qty_issued from store_internal_indent_m a, store_internal_indent_t b,mas_store_item i, mas_store_item_conversion c, mas_store_unit d where i.item_conversion_id = c.item_conversion_id and c.purchase_unit_id = d.unit_id  and b.item_id=i.item_id and a.id = b.internal_id and a.id  = "
	 * + requestNo +
	 * " group by b.item_id ,i.pvms_no, i.nomenclature, d.unit_name,a.department_id, a.id, b.id order by b.id"
	 * ;
	 * 
	 * indentTList = session.createSQLQuery(query).list(); indentTList =
	 * session.
	 * createCriteria(StoreInternalIndentT.class).createAlias("Internal",
	 * "sim").add(Restrictions.eq("sim.Id", requestNo)).list(); int i=0;
	 * List<BigDecimal> stockAvailableList = new ArrayList<BigDecimal>(); List
	 * stockList = new ArrayList(); for(Object[] obj : indentTList){ BigDecimal
	 * stock = new BigDecimal(0); int departmentId =
	 * Integer.parseInt(obj[4].toString()); String str3 =
	 * "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i  where a.item_id=i.item_id and a.item_id = '"
	 * + obj[0] + "' and a.department_id='" + departmentId +
	 * "' group by a.item_id,i.pvms_no order by i.pvms_no"; stockAvailableList =
	 * session.createSQLQuery(str3).list();
	 * 
	 * if (stockAvailableList.size() > 0 && stockAvailableList.get(0) != null) {
	 * stock = (BigDecimal) stockAvailableList.get(0); } else { stock = new
	 * BigDecimal("0"); } i++; stockList.add(stock); }
	 * 
	 * employeeList = session.createCriteria(MasEmployee.class).list();
	 * departmentList = session.createCriteria(MasDepartment.class).list();
	 * 
	 * map.put("employeeList",employeeList); map.put("departmentList",
	 * departmentList); map.put("stockList",stockList); map.put("indentTList",
	 * indentTList); } catch (DataAccessResourceFailureException e) {
	 * e.printStackTrace(); } return map; }
	 * 
	 * public Map<String, Object> addBrandIssueDetails(Box box) { Map<String,
	 * Object> map = new HashMap<String, Object>(); boolean flag = false;
	 * StoreIssueM issueM = new StoreIssueM(); List<StoreFyDocumentNo>
	 * storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
	 * HibernateTemplate hbt = getHibernateTemplate();
	 * hbt.setFlushModeName("FLUSH_EAGER"); hbt.setCheckWriteOperations(false);
	 * Session session = getSession(); Transaction tx = null; try { tx =
	 * session.beginTransaction(); if(box.getInt("issueId") == 0){
	 * issueM.setIssueType("i"); issueM.setIssueNo(box.getString(ISSUE_NO));
	 * issueM
	 * .setIssueDate(HMSUtil.convertStringTypeDateToDateType(box.getString(
	 * ISSUE_DATE)));
	 * 
	 * MasDepartment department = new MasDepartment();
	 * department.setId(box.getInt("deptId")); issueM.setDepartment(department);
	 * 
	 * MasDepartment department2 = new MasDepartment();
	 * department2.setId(box.getInt(DEPARTMENT_ID_TEMP));
	 * issueM.setToStore(department2);
	 * 
	 * //
	 * issueM.setRequestDate(HMSUtil.convertStringTypeDateToDateType(box.getString
	 * (REQUEST_DATE)));
	 * 
	 * MasEmployee employee = new MasEmployee();
	 * employee.setId(box.getInt(REQUEST_BY)); issueM.setRequestBy(employee);
	 * 
	 * MasEmployee employee2 = new MasEmployee();
	 * employee2.setId(box.getInt(APPROVED_BY));
	 * issueM.setApprovedBy(employee2);
	 * 
	 * MasEmployee employee3 = new MasEmployee();
	 * employee3.setId(box.getInt(ISSUED_BY)); issueM.setIssuedBy(employee3);
	 * issueM.setStatus("o");
	 * 
	 * MasHospital hospital = new MasHospital();
	 * hospital.setId(box.getInt("hospitalId")); issueM.setHospital(hospital);
	 * 
	 * issueM.setDocNo(box.getString(REQUEST_NO));
	 * issueM.setLastChgBy(box.getString(CHANGED_BY));
	 * issueM.setLastChgDate(HMSUtil
	 * .convertStringTypeDateToDateType(box.getString(ISSUE_DATE)));
	 * issueM.setLastChgTime(box.getString(CHANGED_TIME));
	 * 
	 * hbt.save(issueM); }
	 * 
	 * int srNo = box.getInt(SR_NO); int itemId = box.getInt(ITEM_ID);
	 * BigDecimal qtyReq = new BigDecimal(box.getString(QTY_IN_REQUEST)); int
	 * itemIssued = box.getInt(ISSUED_ITEM); Vector batchNos =
	 * box.getVector(BATCH_NO); Vector qtyIssued = box.getVector(QTY_ISSUED);
	 * Vector remarks = box.getVector(REMARKS); Vector expDates =
	 * box.getVector(EXPIRY_DATE); Vector costPrice = box.getVector(COST_PRICE);
	 * 
	 * 
	 * for (int i = 0; i < batchNos.size(); i++) {
	 * if(!qtyIssued.get(i).toString().equals("") &&
	 * Integer.parseInt(qtyIssued.get(i).toString()) != 0){ StoreIssueT
	 * storeIssueT = new StoreIssueT();
	 * 
	 * storeIssueT.setBatchNo(batchNos.get(i).toString());
	 * 
	 * MasStoreItem storeItem = new MasStoreItem(); storeItem.setId(itemId);
	 * storeIssueT.setItem(storeItem);
	 * 
	 * MasStoreItem storeItem1 = new MasStoreItem();
	 * storeItem1.setId(itemIssued); storeIssueT.setItemIssued(storeItem1);
	 * 
	 * storeIssueT.setQtyRequest(qtyReq); storeIssueT.setQtyIssued(new
	 * BigDecimal(qtyIssued.get(i).toString()));
	 * storeIssueT.setRemarks(remarks.get(i).toString());
	 * storeIssueT.setExpiryDate(
	 * HMSUtil.convertStringTypeDateToDateType(expDates.get(i).toString()));
	 * storeIssueT.setCostPrice(new BigDecimal(costPrice.get(i).toString()));
	 * storeIssueT.setSrNo(srNo); storeIssueT.setIssued("y");
	 * if(box.getInt("issueId") == 0){ storeIssueT.setIssueM(issueM); }else{
	 * StoreIssueM stIssueM = new StoreIssueM();
	 * stIssueM.setId(box.getInt("issueId")); storeIssueT.setIssueM(stIssueM);
	 * 
	 * } hbt.save(storeIssueT);
	 * 
	 * 
	 * // --------------Update StoreItemBatchStock-----------------------------
	 * 
	 * List<StoreItemBatchStock> batchStockList = new
	 * ArrayList<StoreItemBatchStock>(); batchStockList =
	 * session.createCriteria(StoreItemBatchStock.class)
	 * .add(Restrictions.eq("BatchNo", batchNos.get(i))) .createAlias("Item",
	 * "item").add(Restrictions.eq("item.Id", itemId))
	 * .createAlias("Department", "d").add(Restrictions.eq("d.Id",
	 * box.getInt("deptId"))) .list();
	 * 
	 * StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
	 * itemBatchStock = batchStockList.get(0);
	 * 
	 * StoreItemBatchStock batchStockObj = (StoreItemBatchStock)hbt.load(
	 * StoreItemBatchStock.class, itemBatchStock.getId());
	 * if(batchStockObj.getClosingStock() != null){
	 * batchStockObj.setClosingStock(batchStockObj.getClosingStock()
	 * .subtract(new BigDecimal(qtyIssued.get(i).toString()))); } BigDecimal
	 * issueQty = new BigDecimal(0.00);
	 * 
	 * if(batchStockObj.getIssueQty() != null){ issueQty =
	 * batchStockObj.getIssueQty(); }
	 * 
	 * batchStockObj.setIssueQty(issueQty.add(new
	 * BigDecimal(qtyIssued.get(i).toString()))); hbt.update(batchStockObj); } }
	 * 
	 * // --------------Update StoreFyDocumentNo Table-------------------------
	 * 
	 * int storeFyId = 0; Criteria c =
	 * session.createCriteria(StoreFyDocumentNo.class).add(
	 * Restrictions.eq("Department.Id", box.getInt("deptId")));
	 * storeFyDocumentNoList = c.list(); for (StoreFyDocumentNo documentNo :
	 * storeFyDocumentNoList) { storeFyId = documentNo.getId(); }
	 * 
	 * StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo)
	 * getHibernateTemplate() .load(StoreFyDocumentNo.class, storeFyId);
	 * storeFyDocumentNo.setIssueDeptNo(box.getString(ISSUE_NO));
	 * hbt.update(storeFyDocumentNo);
	 * 
	 * flag = true; tx.commit(); } catch (Exception e) { if (tx != null) {
	 * tx.rollback(); } e.printStackTrace(); } List<Integer> lastIssueNoList =
	 * new ArrayList<Integer>(); List<StoreIssueM> lastIssueMList = new
	 * ArrayList<StoreIssueM>(); lastIssueNoList =
	 * session.createCriteria(StoreIssueM
	 * .class).setProjection(Projections.max("Id")).list(); lastIssueMList =
	 * session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Id",
	 * lastIssueNoList.get(0))).list(); map.put("issueId",
	 * lastIssueNoList.get(0)); map.put("flag", flag); return map; }
	 */
	public Map<String, Object> searchIndentDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int requestNo = box.getInt("requestNo");
		List<Object[]> indentTList = new ArrayList<Object[]>();
		List<MasInstituteDepartment> departmentList = new ArrayList<MasInstituteDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();

		try {
			Session session = getSession();
			indentTList = getHibernateTemplate()
					.find("select item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,"
							+ "siim_a.Id,siit_b.Id,max(siit_b.QtyRequest),sum(siit_b.QtyIssued),siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id"
							+ " from jkt.hms.masters.business.StoreInternalIndentT as siit_b join siit_b.Internal as siim_a "
							+ " join siit_b.Item as item_i join item_i.ItemConversion as ic_c join ic_c.PurchaseUnit as pu_d where siim_a.Id="
							+ requestNo
							+ ""
							+ " and siit_b.QtyRequest>coalesce(siit_b.QtyIssued,'0')   and siim_a.Hospital.Id = "
							+ box.getInt("hospitalId")
							+ "  group by item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,siim_a.Id,siit_b.Id,siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id order by item_i.Nomenclature");

			int i = 0;
			List<BigDecimal> stockAvailableList = new ArrayList<BigDecimal>();
			List stockList = new ArrayList();
			List<BigDecimal> loginDepartmentAvailableStockList = new ArrayList<BigDecimal>();
			List loginDepartmentStockList = new ArrayList();
			int requestByEmpId = 0;
			String demandIndentDate = "";
			int departmentId = 0;
			int itemId = 0;
			for (Object[] obj : indentTList) {
				BigDecimal stock = new BigDecimal(0);
				BigDecimal loginDepartmentStock = new BigDecimal(0);
				itemId = Integer.parseInt(obj[0].toString());
				departmentId = Integer.parseInt(obj[4].toString());
				if (obj[11] != null) {
					requestByEmpId = Integer.parseInt(obj[11].toString());
				}
				demandIndentDate = HMSUtil
						.convertDateToStringTypeDateOnly((Date) obj[10]);
				String str3 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i  where a.item_id=i.item_id and a.item_id = "
						+ obj[0]
						+ " and a.department_id="
						+ departmentId
						+ " and a.hospital_id = "
						+ box.getInt("hospitalId")
						+ " and a.closing_stock>0 and  (block_status not in('Temporary Block','Parmanent Block') or block_status is null)   group by a.item_id,i.pvms_no order by i.pvms_no";
				stockAvailableList = session.createSQLQuery(str3).list();

				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
				i++;
				stockList.add(stock);

				String str4 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i  where a.item_id=i.item_id and a.item_id = "
						+ itemId
						+ " and a.department_id="
						+ box.getInt("deptId")
						+ " and a.hospital_id = "
						+ box.getInt("hospitalId")
						+ " and a.closing_stock >0 and (block_status not in('Temporary Block','Parmanent Block') or block_status is null)  group by a.item_id,i.pvms_no order by i.pvms_no";
				loginDepartmentAvailableStockList = session
						.createSQLQuery(str4).list();

				if (loginDepartmentAvailableStockList.size() > 0
						&& loginDepartmentAvailableStockList.get(0) != null) {
					loginDepartmentStock = (BigDecimal) loginDepartmentAvailableStockList
							.get(0);
				} else {
					loginDepartmentStock = new BigDecimal("0");
				}
				i++;
				loginDepartmentStockList.add(loginDepartmentStock);

			}
			// employeeList = session.createCriteria(MasEmployee.class).list();
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee where Status='Y' and Hospital.Id = '"
							+ box.getInt("hospitalId")
							+ "' order by FirstName asc");
			//departmentList = session.createCriteria(MasDepartment.class).list();
			departmentList = session.createCriteria(MasInstituteDepartment.class).createAlias("Department", "dept").add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId"))).addOrder(Order.asc("dept.DepartmentName")).list();

			List<Object[]> employees = new ArrayList<Object[]>();
			Query q = session
					.createQuery("select e.Id, e.FirstName,e.LastName from MasEmployee e where e.Id="
							+ box.getInt(REQUEST_BY));
			employees = (List<Object[]>) q.list();
			map.put("employeeList", employeeList);
			map.put("departmentList", departmentList);
			map.put("stockList", stockList);
			map.put("loginDepartmentStockList", loginDepartmentStockList);
			map.put("indentTList", indentTList);
			//
			map.put("requestByEmpId", requestByEmpId);
			map.put("requestNoForAcc", requestNo);
			map.put("demandIndentDate", demandIndentDate);
			map.put("employees", employees);
		} catch (DataAccessResourceFailureException e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> addBrandIssueDetails(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		StoreIssueM issueM = new StoreIssueM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		Transaction tx = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		int indentDtId = 0;
		indentDtId = box.getInt("indentDtId");
		try {
			tx = session.beginTransaction();
			if (box.getInt("issueId") == 0) {
				issueM.setIssueType("i");
				issueM.setIssueNo(box.getString(ISSUE_NO));
				issueM.setIssueDate(HMSUtil.convertStringTypeDateToDateType(box
						.getString(ISSUE_DATE)));

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				MasDepartment department2 = new MasDepartment();
				department2.setId(box.getInt(DEPARTMENT_ID_TEMP));
				issueM.setToStore(department2);

				StoreInternalIndentM internalIndentM = new StoreInternalIndentM();
				internalIndentM.setId(box.getInt(REQUEST_NO));
				issueM.setRequestNo(internalIndentM);

				issueM.setRequestDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(REQUEST_DATE)));

				MasEmployee employee = new MasEmployee();
				employee.setId(box.getInt(REQUEST_BY));
				issueM.setRequestBy(employee);

				MasEmployee employee2 = new MasEmployee();
				employee2.setId(box.getInt(APPROVED_BY));
				issueM.setApprovedBy(employee2);

				MasEmployee employee3 = new MasEmployee();
				employee3.setId(box.getInt(ISSUED_BY));
				issueM.setIssuedBy(employee3);
				issueM.setStatus("o");

				MasHospital hospital = new MasHospital();
				hospital.setId(box.getInt("hospitalId"));
				issueM.setHospital(hospital);

				issueM.setDocNo(box.getString(REQUEST_NO));
				Users users = new Users();
				users.setId(box.getInt("userId"));
				issueM.setLastChgBy(users);
				issueM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				issueM.setLastChgTime(time);

				session.save(issueM);
			}

			int srNo = box.getInt("srNo");
			int itemId = box.getInt(ITEM_ID);
			BigDecimal qtyReq = new BigDecimal(box.getString(QTY_IN_REQUEST));
			int itemIssued = box.getInt(ISSUED_ITEM);
			Vector batchNos = box.getVector(BATCH_NO);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			Vector remarks = box.getVector(REMARKS);
			Vector expDates = box.getVector(EXPIRY_DATE);
			Vector costPrice = box.getVector(COST_PRICE);
			int totalQtyIssued = 0;
			if (batchNos.size() > 0) {
				for (int i = 0; i < batchNos.size(); i++) {
					if (!qtyIssued.get(i).toString().equals("")
							&& Integer.parseInt(qtyIssued.get(i).toString()) != 0) {
						StoreIssueT storeIssueT = new StoreIssueT();
						storeIssueT.setBatchNo(batchNos.get(i).toString());

						MasStoreItem storeItem = new MasStoreItem();
						storeItem.setId(itemId);
						storeIssueT.setItem(storeItem);

						MasStoreItem storeItem1 = new MasStoreItem();
						storeItem1.setId(itemIssued);
						// storeIssueT.setItemIssued(storeItem1);

						storeIssueT.setQtyRequest(qtyReq);
						storeIssueT.setQtyIssued(new BigDecimal(qtyIssued
								.get(i).toString()));
						storeIssueT.setRemarks(remarks.get(i).toString());
						storeIssueT.setExpiryDate(HMSUtil
								.convertStringTypeDateToDateType(expDates
										.get(i).toString()));
						storeIssueT.setCostPrice(new BigDecimal(costPrice
								.get(i).toString()));
						storeIssueT.setSrNo(srNo);
						storeIssueT.setIssued("y");
						if (box.getInt("issueId") == 0) {
							storeIssueT.setIssueM(issueM);
						} else {
							StoreIssueM stIssueM = new StoreIssueM();
							stIssueM.setId(box.getInt("issueId"));
							storeIssueT.setIssueM(stIssueM);

						}
						session.save(storeIssueT);
						try {
							totalQtyIssued = totalQtyIssued
									+ Integer.parseInt(qtyIssued.get(i)
											.toString());
						} catch (Exception e) {
							e.printStackTrace();
							tx.rollback();
						}
						// --------------Update
						// StoreItemBatchStock-----------------------------
						try {

							List<StoreItemBatchStock> batchStockList = new ArrayList<StoreItemBatchStock>();
							batchStockList = session
									.createCriteria(StoreItemBatchStock.class)
									.add(Restrictions.eq("BatchNo",
											batchNos.get(i)))
									.createAlias("Item", "item")
									.add(Restrictions.eq("item.Id", itemId))
									.createAlias("Department", "d")
									.add(Restrictions.eq("d.Id",
											box.getInt("deptId"))).list();

							StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
							itemBatchStock = batchStockList.get(0);

							StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
									.load(StoreItemBatchStock.class,
											itemBatchStock.getId());
							if (batchStockObj.getClosingStock() != null) {
								batchStockObj.setClosingStock(batchStockObj
										.getClosingStock().subtract(
												new BigDecimal(qtyIssued.get(i)
														.toString())));
							}
							BigDecimal issueQty = new BigDecimal(0.00);

							if (batchStockObj.getIssueQty() != null) {
								issueQty = batchStockObj.getIssueQty();
							}

							batchStockObj.setIssueQty(issueQty
									.add(new BigDecimal(qtyIssued.get(i)
											.toString())));
							session.update(batchStockObj);
						} catch (Exception e) {
							e.printStackTrace();
							tx.rollback();
						}
					}
				}

				/**
				 * Code Added By Ritu
				 */
				try {
					HibernateTemplate hbt1 = getHibernateTemplate();
					hbt1.setFlushModeName("FLUSH_EAGER");
					hbt1.setCheckWriteOperations(false);
					StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					internalIndentT = (StoreInternalIndentT) hbt1.load(
							StoreInternalIndentT.class, indentDtId);
					int issue = 0;
					if (internalIndentT.getQtyIssued() != null) {
						issue = internalIndentT.getQtyIssued();
					}
					internalIndentT.setQtyIssued(totalQtyIssued + issue);
					session.update(internalIndentT);
				} catch (Exception e) {
					e.printStackTrace();
					tx.rollback();
				}
			}
			// --------------Update StoreFyDocumentNo
			// Table-------------------------

			int storeFyId = 0;
			Criteria c = session.createCriteria(StoreFyDocumentNo.class).add(
					Restrictions.eq("Department.Id", box.getInt("deptId")));
			storeFyDocumentNoList = c.list();
			for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
				storeFyId = documentNo.getId();
			}

			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
					.load(StoreFyDocumentNo.class, storeFyId);
			storeFyDocumentNo.setIssueDeptNo(box.getString(ISSUE_NO));
			session.update(storeFyDocumentNo);

			flag = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<Integer> lastIssueNoList = new ArrayList<Integer>();
		List<StoreIssueM> lastIssueMList = new ArrayList<StoreIssueM>();
		lastIssueNoList = session.createCriteria(StoreIssueM.class)
				.setProjection(Projections.max("Id")).list();
		lastIssueMList = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", lastIssueNoList.get(0))).list();
		map.put("issueId", lastIssueNoList.get(0));
		map.put("flag", flag);
		return map;
	}

	public Map<String, Object> getUserName(int empId) {

		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			List<Users> userList = new ArrayList<Users>();
			userList = session.createCriteria(Users.class)
					.add(Restrictions.eq("Employee.Id", empId)).list();
			map.put("userList", userList);
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		return map;

	}

	public Map<String, Object> correctDepartmentIssueToAcknowledgement(
			Map<String, Object> detailsMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		int requestNoForAcc = 0;
		int deptId = 0;
		if (detailsMap.get("requestNoForAcc") != null) {
			requestNoForAcc = (Integer) detailsMap.get("requestNoForAcc");
		}
		if (detailsMap.get("deptId") != null) {
			deptId = (Integer) detailsMap.get("deptId");
		}
		int indentId = 0;
		if (detailsMap.get("indentId") != null) {
			indentId = (Integer) detailsMap.get("indentId");
		}
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		try {
			if (indentId != 0) {
				List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
				HibernateTemplate hbt1 = getHibernateTemplate();
				hbt1.setFlushModeName("FLUSH_AUTO");
				hbt1.setCheckWriteOperations(false);
				storeInternalIndentTList = hbt1
						.find("select siit from jkt.hms.masters.business.StoreInternalIndentT as siit join siit.Internal as siim where siim.Id='"
								+ indentId + "'");
				if (storeInternalIndentTList.size() > 0) {
					for (StoreInternalIndentT storeInternalIndentT : storeInternalIndentTList) {
						String issuedBatchIdAndQty = "";
						if (storeInternalIndentT.getIssuedBatchidAndQty() != null) {
							issuedBatchIdAndQty = storeInternalIndentT
									.getIssuedBatchidAndQty();
							String[] batchDetails = issuedBatchIdAndQty
									.split("#");
							int requestedQty = 0;
							requestedQty = storeInternalIndentT.getQtyRequest();
							int issueId = 0;

							List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();

							storeIssueMList = hbt1
									.find("select sim from jkt.hms.masters.business.StoreIssueM as sim join sim.RequestNo as siim where siim.Id='"
											+ indentId + "'");

							if (storeIssueMList.size() > 0) {
								for (StoreIssueM storeIssueM : storeIssueMList) {
									issueId = storeIssueM.getId();
								}
							}
							if (batchDetails.length > 1) {
								for (int i = 1; i < batchDetails.length; i++) {
									String batch = "";
									batch = batchDetails[i];

									String[] itemDetails = batch.split("/");
									/**
									 * Code for check null Item batch id and qty
									 * then check in batch master and save in
									 * inser_issue_t Code By Mukesh Narayan
									 * Singh Date 19 Jan 2011
									 */
									int batchId = 0;
									int qty = 0;
									int counter = 0;
									try {
										batchId = Integer
												.parseInt(itemDetails[0]);
									} catch (Exception e) {
										e.printStackTrace();
										++counter;
									}
									try {
										qty = Integer.parseInt(itemDetails[1]);
									} catch (Exception e) {
										e.printStackTrace();
										++counter;
									}
									if (counter == 0) {

										List<StoreItemBatchStock> batchStockList = new ArrayList<StoreItemBatchStock>();
										batchStockList = session
												.createCriteria(
														StoreItemBatchStock.class)
												.add(Restrictions.eq("Id",
														batchId)).list();
										if (batchStockList.size() > 0) {
											StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
											itemBatchStock = batchStockList
													.get(0);
											String stockBatch = "";
											stockBatch = itemBatchStock
													.getBatchNo();

											/*
											 * Code for save in issue table
											 */

											List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();

											storeIssueTList = hbt1
													.find("select sit from jkt.hms.masters.business.StoreIssueT as sit join sit.IssueM as sim where sim.Id='"
															+ issueId
															+ "' and sit.BatchNo='"
															+ stockBatch + "'");
											if (storeIssueTList.size() > 0) {
												for (StoreIssueT storeIssueT : storeIssueTList) {
													String batchNo = "";
													batchNo = storeIssueT
															.getBatchNo();
												}
											} else {
												StoreIssueT storeIssueT = new StoreIssueT();
												storeIssueT
														.setBatchNo(itemBatchStock
																.getBatchNo());

												/*
												 * MasStoreItem storeItem = new
												 * MasStoreItem();
												 * storeItem.setId(itemId);
												 */
												storeIssueT
														.setItem(itemBatchStock
																.getItem());

												/*
												 * MasStoreItem storeItem1 = new
												 * MasStoreItem();
												 * storeItem1.setId(itemIssued);
												 */
												/*
												 * storeIssueT
												 * .setItemIssued(itemBatchStock
												 * .getItem());
												 */

												storeIssueT
														.setQtyRequest(new BigDecimal(
																requestedQty));
												// storeIssueT.setQtyIssued(new
												// BigDecimal(qtyIssued.get(i).toString()));
												storeIssueT
														.setQtyIssued(new BigDecimal(
																qty));

												storeIssueT.setRemarks("");
												storeIssueT
														.setExpiryDate(itemBatchStock
																.getExpiryDate());
												storeIssueT
														.setCostPrice(itemBatchStock
																.getCostPrice());
												storeIssueT
														.setSrNo(storeInternalIndentT
																.getSrNo());
												storeIssueT.setIssued("y");
												if (issueId == 0) {
													// storeIssueT.setIssueM(issueM);
												} else {
													StoreIssueM stIssueM = new StoreIssueM();
													stIssueM.setId(issueId);
													storeIssueT
															.setIssueM(stIssueM);
													HibernateTemplate hbt2 = getHibernateTemplate();
													hbt2.setFlushModeName("FLUSH_AUTO");
													hbt2.setCheckWriteOperations(false);
													if (issueId != 0) {
														hbt2.save(storeIssueT);
														hbt2.refresh(storeIssueT);
													}

												}
											}

										}
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> addBrandItemIssueDetails(
			Map<String, Object> detailsMap) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		StoreIssueM issueM = new StoreIssueM();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		/*
		 * HibernateTemplate hbt = getHibernateTemplate();
		 * hbt.setFlushModeName("FLUSH_EAGER");
		 * hbt.setCheckWriteOperations(false);
		 */
		Session session = getSession();
		Transaction tx = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		int indentDtId = 0;
		int issueId = 0;
		int itemId = 0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo = "";
		String issuedBatchIdAndQty = "";
		try {
			tx = session.beginTransaction();
			if (detailsMap.get("indentDtId") != null) {
				indentDtId = (Integer) detailsMap.get("indentDtId");
			}
			if (detailsMap.get("itemId") != null) {
				itemId = (Integer) detailsMap.get("itemId");
			}
			if (detailsMap.get("issueId") != null) {
				issueId = (Integer) detailsMap.get("issueId");
			}
			if (detailsMap.get("deptId") != null) {
				deptId = (Integer) detailsMap.get("deptId");
			}
			if (detailsMap.get("hospitalId") != null) {
				hospitalId = (Integer) detailsMap.get("hospitalId");
			}
			int totalQtyIssued = 0;
			if (detailsMap.get("totalQtyIssued") != null) {
				totalQtyIssued = (Integer) detailsMap.get("totalQtyIssued");
			}
			if (detailsMap.get("issuedBatchIdAndQty") != null) {
				issuedBatchIdAndQty = (String) detailsMap
						.get("issuedBatchIdAndQty");
			}
			if (detailsMap.get("issueNo") != null) {
				issueNo = (String) detailsMap.get("issueNo");
			}
			if (detailsMap.get("issueM") != null) {
				issueM = (StoreIssueM) detailsMap.get("issueM");
			}
			HibernateTemplate hbt1 = getHibernateTemplate();
			hbt1.setFlushModeName("FLUSH_AUTO");
			hbt1.setCheckWriteOperations(false);
			if (issueId == 0) {
				hbt1.save(issueM);
				hbt1.refresh(issueM);
			}
			/*
			 * Code for save IssueDetail data
			 */
			List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
			if (detailsMap.get("storeIssueTList") != null) {
				storeIssueTList = (List<StoreIssueT>) detailsMap
						.get("storeIssueTList");
			}
			String testFlag = "1";
			if (storeIssueTList.size() > 0) {
				for (StoreIssueT storeIssueT : storeIssueTList) {
					/*
					 * Code for reduse stock
					 */
					try {
						HibernateTemplate hbt2 = getHibernateTemplate();
						hbt2.setFlushModeName("FLUSH_AUTO");
						hbt2.setCheckWriteOperations(false);

						List<StoreItemBatchStock> batchStockList = new ArrayList<StoreItemBatchStock>();
						batchStockList = session
								.createCriteria(StoreItemBatchStock.class)
								.add(Restrictions.eq("BatchNo",
										storeIssueT.getBatchNo()))
								.createAlias("Item", "item")
								.add(Restrictions.eq("item.Id", itemId))
								.createAlias("Department", "d")
								.add(Restrictions.eq("d.Id", deptId)).list();
						if (batchStockList.size() > 0) {
							StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
							itemBatchStock = batchStockList.get(0);

							StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt2
									.load(StoreItemBatchStock.class,
											itemBatchStock.getId());
							if (batchStockObj.getClosingStock() != null) {
								batchStockObj
										.setClosingStock(batchStockObj
												.getClosingStock()
												.subtract(
														new BigDecimal(
																""
																		+ storeIssueT
																				.getQtyIssued())));
							}
							BigDecimal issueQty = new BigDecimal(0.00);

							if (batchStockObj.getIssueQty() != null) {
								issueQty = batchStockObj.getIssueQty();
							}

							batchStockObj.setIssueQty(issueQty
									.add(new BigDecimal(""
											+ storeIssueT.getQtyIssued())));
							hbt2.save(storeIssueT);
							hbt2.refresh(storeIssueT);
							HibernateTemplate hbt3 = getHibernateTemplate();
							hbt3.setFlushModeName("FLUSH_EAGER");
							hbt3.setCheckWriteOperations(false);
							hbt3.update(batchStockObj);
							hbt3.refresh(batchStockObj);
							testFlag = "2";
						}
					} catch (Exception e) {
						e.printStackTrace();
						tx.rollback();
						testFlag = "3";

					}
				}
				if (testFlag == "2") {
					HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
					StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					internalIndentT = (StoreInternalIndentT) hbt.load(
							StoreInternalIndentT.class, indentDtId);
					int issue = 0;
					if (internalIndentT.getQtyIssued() != null) {
						issue = internalIndentT.getQtyIssued();
					}
					internalIndentT.setQtyIssued(totalQtyIssued + issue);
					/*
					 * Code for Issue details Save batch id and issue qty
					 * against indent code Jan by Mukesh Narayan Singh Date
					 * 19-01-2011
					 */
					String tempIssuedBatchIdAndQty = "";
					if (internalIndentT.getIssuedBatchidAndQty() != null) {
						tempIssuedBatchIdAndQty = internalIndentT
								.getIssuedBatchidAndQty();
						if (tempIssuedBatchIdAndQty != "") {
							issuedBatchIdAndQty = issuedBatchIdAndQty + "#"
									+ tempIssuedBatchIdAndQty;
						}
					}
					internalIndentT.setIssuedBatchidAndQty(issuedBatchIdAndQty);
					// issuedBatchIdAndQty

					hbt.update(internalIndentT);
					hbt.refresh(internalIndentT);
				}

				int storeFyId = 0;
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				HibernateTemplate hbt4 = getHibernateTemplate();
				hbt4.setFlushModeName("FLUSH_EAGER");
				hbt4.setCheckWriteOperations(false);
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4
						.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIssueDeptNo(issueNo);
				hbt4.update(storeFyDocumentNo);
				hbt4.refresh(storeFyDocumentNo);
			}
			/*
			 * End of code for
			 */
			/*
			 * int srNo = box.getInt("srNo"); int itemId = box.getInt(ITEM_ID);
			 * BigDecimal qtyReq = new
			 * BigDecimal(box.getString(QTY_IN_REQUEST)); int itemIssued =
			 * box.getInt(ISSUED_ITEM); Vector batchNos =
			 * box.getVector(BATCH_NO); Vector qtyIssued =
			 * box.getVector(QTY_ISSUED); Vector remarks =
			 * box.getVector(REMARKS); Vector expDates =
			 * box.getVector(EXPIRY_DATE); Vector costPrice =
			 * box.getVector(COST_PRICE); int totalQtyIssued = 0;
			 * if(batchNos.size()>0){ for (int i = 0; i < batchNos.size(); i++)
			 * { if(!qtyIssued.get(i).toString().equals("") &&
			 * Integer.parseInt(qtyIssued.get(i).toString()) != 0){ StoreIssueT
			 * storeIssueT = new StoreIssueT();
			 * storeIssueT.setBatchNo(batchNos.get(i).toString());
			 * 
			 * MasStoreItem storeItem = new MasStoreItem();
			 * storeItem.setId(itemId); storeIssueT.setItem(storeItem);
			 * 
			 * MasStoreItem storeItem1 = new MasStoreItem();
			 * storeItem1.setId(itemIssued);
			 * storeIssueT.setItemIssued(storeItem1);
			 * 
			 * storeIssueT.setQtyRequest(qtyReq); storeIssueT.setQtyIssued(new
			 * BigDecimal(qtyIssued.get(i).toString()));
			 * storeIssueT.setRemarks(remarks.get(i).toString());
			 * storeIssueT.setExpiryDate(
			 * HMSUtil.convertStringTypeDateToDateType
			 * (expDates.get(i).toString())); storeIssueT.setCostPrice(new
			 * BigDecimal(costPrice.get(i).toString()));
			 * storeIssueT.setSrNo(srNo); storeIssueT.setIssued("y");
			 * if(box.getInt("issueId") == 0){ storeIssueT.setIssueM(issueM);
			 * }else{ StoreIssueM stIssueM = new StoreIssueM();
			 * stIssueM.setId(box.getInt("issueId"));
			 * storeIssueT.setIssueM(stIssueM);
			 * 
			 * } session.save(storeIssueT); try{ totalQtyIssued =
			 * totalQtyIssued+Integer.parseInt(qtyIssued.get(i).toString());
			 * }catch (Exception e) { e.printStackTrace(); tx.rollback(); } //
			 * --------------Update
			 * StoreItemBatchStock----------------------------- try{
			 * 
			 * 
			 * List<StoreItemBatchStock> batchStockList = new
			 * ArrayList<StoreItemBatchStock>(); batchStockList =
			 * session.createCriteria(StoreItemBatchStock.class)
			 * .add(Restrictions.eq("BatchNo", batchNos.get(i)))
			 * .createAlias("Item", "item").add(Restrictions.eq("item.Id",
			 * itemId)) .createAlias("Department",
			 * "d").add(Restrictions.eq("d.Id", box.getInt("deptId"))) .list();
			 * 
			 * StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
			 * itemBatchStock = batchStockList.get(0);
			 * 
			 * StoreItemBatchStock batchStockObj =
			 * (StoreItemBatchStock)hbt.load( StoreItemBatchStock.class,
			 * itemBatchStock.getId()); if(batchStockObj.getClosingStock() !=
			 * null){
			 * batchStockObj.setClosingStock(batchStockObj.getClosingStock()
			 * .subtract(new BigDecimal(qtyIssued.get(i).toString()))); }
			 * BigDecimal issueQty = new BigDecimal(0.00);
			 * 
			 * if(batchStockObj.getIssueQty() != null){ issueQty =
			 * batchStockObj.getIssueQty(); }
			 * 
			 * batchStockObj.setIssueQty(issueQty.add(new
			 * BigDecimal(qtyIssued.get(i).toString())));
			 * session.update(batchStockObj); }catch (Exception e) {
			 * e.printStackTrace(); tx.rollback(); } } }
			 *//**
			 * Code Added By Ritu
			 */
			/*
			 * try { HibernateTemplate hbt1 = getHibernateTemplate();
			 * hbt1.setFlushModeName("FLUSH_EAGER");
			 * hbt1.setCheckWriteOperations(false); StoreInternalIndentT
			 * internalIndentT = new StoreInternalIndentT(); internalIndentT =
			 * (StoreInternalIndentT)hbt1.load(StoreInternalIndentT.class,
			 * indentDtId); int issue = 0; if(internalIndentT.getQtyIssued() !=
			 * null){ issue = internalIndentT.getQtyIssued(); }
			 * internalIndentT.setQtyIssued(totalQtyIssued+issue);
			 * session.update(internalIndentT); } catch (Exception e) {
			 * e.printStackTrace(); tx.rollback(); } } // --------------Update
			 * StoreFyDocumentNo Table-------------------------
			 * 
			 * int storeFyId = 0; Criteria c =
			 * session.createCriteria(StoreFyDocumentNo.class).add(
			 * Restrictions.eq("Department.Id", box.getInt("deptId")));
			 * storeFyDocumentNoList = c.list(); for (StoreFyDocumentNo
			 * documentNo : storeFyDocumentNoList) { storeFyId =
			 * documentNo.getId(); }
			 * 
			 * StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo)
			 * getHibernateTemplate() .load(StoreFyDocumentNo.class, storeFyId);
			 * storeFyDocumentNo.setIssueDeptNo(box.getString(ISSUE_NO));
			 * session.update(storeFyDocumentNo);
			 */

			flag = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<Integer> lastIssueNoList = new ArrayList<Integer>();
		List<StoreIssueM> lastIssueMList = new ArrayList<StoreIssueM>();
		lastIssueNoList = session.createCriteria(StoreIssueM.class)
				.setProjection(Projections.max("Id")).list();
		lastIssueMList = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", lastIssueNoList.get(0))).list();
		map.put("issueId", lastIssueNoList.get(0));
		map.put("flag", flag);
		return map;

	}

	public Map<String, Object> checkPreviousImport(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		List<StoreStockTakingM> stockTakingList = new ArrayList<StoreStockTakingM>();
		List<StoreStockTakingM> stockTakingList1 = new ArrayList<StoreStockTakingM>();
		int deptId = box.getInt("deptId");
		int hospitalId = box.getInt("hospitalId");
		stockTakingList = session.createCriteria(StoreStockTakingM.class)
				.createAlias("Department", "dept")
				.add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Status", "o")).list();
		//Added by Arbind on 28-03-2017
		stockTakingList1 = session.createCriteria(StoreStockTakingM.class)
				.createAlias("Department", "dept")
				.add(Restrictions.eq("dept.Id", deptId)).add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Status", "p"))
				.add(Restrictions.eq("PhysicalDate", new Date())).list();
		if (stockTakingList.size() > 0) {
			map.put("message", "Please adjust previous date stock.");
		}
		if (stockTakingList1.size() > 0) {
			map.put("message", "Today stock already updated.");
		}
		return map;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map<String, Object> showInternalIssueReportJsp(
			Map<String, Object> mapDetail) throws ParseException {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();
		Session session = getSession();
		try {
			Criteria c = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("DepartmentName"));
			masDepartmentList = c.list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masDepartmentList", masDepartmentList);

		return map;
	}

	public Map<String, Object> insertIssueForIndent(
			Map<String, Object> utilMap, Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		int indentDtId = 0;
		int issueId = 0;
		int itemId = 0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo = "";
		String issuedBatchIdAndQty = "";

		try {
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));

			if (utilMap.get("deptId") != null) {
				deptId = (Integer) utilMap.get("deptId");
			}
			if (utilMap.get("hospitalId") != null) {
				hospitalId = (Integer) utilMap.get("hospitalId");
			}
			int totalQtyIssued = 0;
			if (utilMap.get("totalQtyIssued") != null) {
				totalQtyIssued = (Integer) utilMap.get("totalQtyIssued");
			}
			if (utilMap.get("issuedBatchIdAndQty") != null) {
				issuedBatchIdAndQty = (String) utilMap
						.get("issuedBatchIdAndQty");
			}
			if (utilMap.get("issueNo") != null) {
				issueNo = (String) utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if (utilMap.get("issueM") != null) {
				issueM = (StoreIssueM) utilMap.get("issueM");
			}

			// Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(issueM);
			hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			int issuemId = issueM.getRequestNo().getId();

			List indentList = getHibernateTemplate().findByCriteria(
					DetachedCriteria.forClass(StoreInternalIndentM.class).add(
							Restrictions
									.eq("Id", issueM.getRequestNo().getId())));
			StoreInternalIndentM indentM1 = new StoreInternalIndentM();
			indentM1 = (StoreInternalIndentM) indentList.get(0);
			indentM1.setStatus("issue");
			hbt.saveOrUpdate(indentM1);

			// Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("IssueM.Id", issueId)).list();
			// List lstData1 = new ArrayList(header.getIssueId());
			int j = 0;
			int k = 1;
			for (int i = 0; i < lstData1.size(); i++) {
				MasStoreItem item = ((StoreIssueT) lstData1.get(i)).getItem();

				List lstdata = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item="
								+ ((StoreIssueT) lstData1.get(i)).getItem()
										.getId()
								+ " and ss.BatchNo='"
								+ ((StoreIssueT) lstData1.get(i)).getBatchNo()
										.trim() + "'"
								+ " and ss.Department.Id="
								+ issueM.getDepartment().getId()
								+ " and ss.Hospital.Id = " + hospitalId);

				StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
				itemBatchStock = (StoreItemBatchStock) lstdata.get(0);
				StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, itemBatchStock.getId());
				if (batchStockObj.getClosingStock() != null) {
					batchStockObj.setClosingStock(batchStockObj
							.getClosingStock().subtract(
									((StoreIssueT) lstData1.get(i))
											.getQtyIssued()));
				}
				BigDecimal issueQty = new BigDecimal(0.00);

				if (batchStockObj.getIssueQty() != null) {
					issueQty = batchStockObj.getIssueQty();
				}
				batchStockObj.setIssueQty(issueQty.add(((StoreIssueT) lstData1
						.get(i)).getQtyIssued()));
				hbt.update(batchStockObj);

				int storeFyId = 0;
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id", hospitalId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				HibernateTemplate hbt4 = getHibernateTemplate();
				hbt4.setFlushModeName("FLUSH_EAGER");
				hbt4.setCheckWriteOperations(false);
				if (storeFyId > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4
							.load(StoreFyDocumentNo.class, storeFyId);
					storeFyDocumentNo.setIssueDeptNo(issueNo);
					hbt4.update(storeFyDocumentNo);
					hbt4.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setIssueDeptNo(issueNo);
					hbt4.save(storeFyDocumentNo);
					hbt4.refresh(storeFyDocumentNo);
				}

				j = j + 1;
				k = k + 1;
			}
			int p = 0;
			int q = 1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);
			for (int ii = 0; ii < itemList.size(); ii++) {
				Criteria crit = session
						.createCriteria(StoreInternalIndentT.class)
						.createAlias("Internal", "I")
						.createAlias("Item", "item")
						.add(Restrictions.eq("I.Id", issuemId))
						.add(Restrictions.eq("item.Id",
								Integer.parseInt(itemList.get(ii).toString())));
				storeInternalTList = crit.list();

				int internalIndentTId = 0;

				for (StoreInternalIndentT storeInternalIndentT : storeInternalTList) {
					internalIndentTId = storeInternalIndentT.getId();

					HibernateTemplate hbt5 = getHibernateTemplate();
					hbt5.setFlushModeName("FLUSH_EAGER");
					hbt5.setCheckWriteOperations(false);
					StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					internalIndentT = (StoreInternalIndentT) hbt5.load(
							StoreInternalIndentT.class, internalIndentTId);
					int quantityRcvd = 0;
					int actualQuantity = 0;
					if (internalIndentT.getQtyIssued() != null) {
						quantityRcvd = internalIndentT.getQtyIssued();
					}
					int quantityReceivedFinal = quantityRcvd
							+ box.getInt(RequestConstants.QTY_ISSUED + q);
					// actual request quantity replaced by issued quantity and
					// saved to column actualRequestQuantity as requested by Dr
					// Das on 2/5/2012
					/*
					 * if(internalIndentT.getQtyRequest()!=null){
					 * actualQuantity=internalIndentT.getQtyRequest(); }
					 * internalIndentT.setActualRequestedQty(actualQuantity);
					 * internalIndentT.setQtyRequest(quantityReceivedFinal);
					 */
					// end of change
					internalIndentT.setQtyIssued(quantityReceivedFinal);
					String tempIssuedBatchIdAndQty = "";
					int batchId = box.getInt(RequestConstants.BATCH_ID + p);
					issuedBatchIdAndQty = issuedBatchIdAndQty + "#" + batchId
							+ "/" + box.getInt(RequestConstants.QTY_ISSUED + q);
					internalIndentT.setIssuedBatchidAndQty(issuedBatchIdAndQty);
					hbt5.update(internalIndentT);
					hbt5.refresh(internalIndentT);
				}
				p = p + 1;
				q = q + 1;
			}
			b = true;
			tx.commit();
		} catch (Exception exception) {
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("b", b);
		return map;
	}

	public Map<String, Object> getIssueNoListForAutoComplete(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();

		Session session = (Session) getSession();

		try {

			Map<String, Object> utilMap = new HashMap<String, Object>();

			List objectList = new ArrayList();
			int deptId = 0;
			int hospitalId = 0;
			deptId = box.getInt("deptId");
			String str = box.get("autoHint") + "%";

			Criteria c = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.like("IssueNo", str))
					.add(Restrictions.eq("Hospital.Id", hospitalId));
			if (deptId > 0) {
				c.add(Restrictions.eq("Department.Id", deptId));
			}
			c.setFirstResult(0);
			c.setMaxResults(10);
			storeIssueMList = c.list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeIssueMList", storeIssueMList);

		return map;

	}

	public Map<String, Object> showStockRegisterReportJsp(
			Map<String, Object> mapDetail) {
		Map<String, Object> map = new HashMap<String, Object>();
		int departmentId = 0;
		if (mapDetail.get("departmentId") != null) {
			departmentId = (Integer) mapDetail.get("departmentId");
		}
		Session session = getSession();
		try {
			List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
			List<MasStoreGroup> itemGroupList = new ArrayList<MasStoreGroup>();
			List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
			/*
			 * masStoreItemList = session.createCriteria(MasStoreItem.class)
			 * .add(Restrictions.eq("Status", "y"))
			 * .addOrder(Order.asc("Nomenclature")) .list();
			 */

			itemGroupList = session.createCriteria(MasStoreGroup.class)
					.add(Restrictions.eq("Status", "y").ignoreCase())
					.addOrder(Order.asc("GroupName")).list();
			/*
			 * if(departmentId>0){
			 * 
			 * storeItemBatchStockList=
			 * session.createCriteria(StoreItemBatchStock.class)
			 * .createAlias("Department", "d") .add(Restrictions.eq("d.Id",
			 * departmentId)) .addOrder(Order.asc("BatchNo")) .list(); }
			 *//*
				 * else{ itemGroupList =
				 * session.createCriteria(MasStoreGroup.class)
				 * .createAlias("Department", "d")
				 * .add(Restrictions.eq("Status",
				 * "y")).addOrder(Order.asc("GroupName")).list(); }
				 */

			// itemGroupList =
			// session.createCriteria(MasStoreGroup.class).add(Restrictions.eq("Status",
			// "y")).addOrder(Order.asc("GroupName")).list();
			map.put("itemGroupList", itemGroupList);
			map.put("masStoreItemList", masStoreItemList);
			map.put("storeItemBatchStockList", storeItemBatchStockList);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return map;
	}

	public Map<String, Object> getItemId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = "";
		int itemId = 0;
		String batchNo = "";
		java.sql.Date fromDate = null;
		java.sql.Date toDate = null;
		pvmsNo = box.getString("pvmsNo");
		// batchNo= box.getString("batchNo");
		if (!pvmsNo.equals("") && pvmsNo.length() > 0) {
			masStoreItemList = (List<MasStoreItem>) session
					.createCriteria(MasStoreItem.class)
					.add((Restrictions.eq("PvmsNo", pvmsNo))).list();

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
						.get(0);
				itemId = masStoreItem.getId();
			}
		} else {
			String itemIdTemp = "" + box.getInt("item_id");
			masStoreItemList = (List<MasStoreItem>) session
					.createCriteria(MasStoreItem.class)
					.add((Restrictions.eq("PvmsNo", itemIdTemp))).list();

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList
						.get(0);
				itemId = masStoreItem.getId();
			}
		}
		if (itemId == 0)
			itemId = box.getInt("item_id");

		java.sql.Connection con = session.connection();
		String sql = "{call ledger('" + box.get("fromDate") + "','"
				+ box.get("toDate") + "'," + box.getInt("deptId") + ","
				+ itemId + ")}";

		try {
			CallableStatement cals = con.prepareCall(sql);
			cals.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		try {
			List<Object> openingStockRegList = new ArrayList<Object>();
			String sqlStr = "";
			sqlStr = "select date,department_id,item_id,batch_no,sum(isnull(f.opening_qty,0)) as opening_qty,"
					+ "sum(isnull(f.return_qty,0)) as return_qty,sum(isnull(f.received_qty,0)) as received_qty,"
					+ "sum(isnull(f.issued_qty,0)) as issued_qty,sum(isnull(f.department_return,0)) as department_return,"
					+ "(sum(isnull(f.opening_qty,0))+sum(isnull(f.received_qty,0))+sum(isnull(f.department_return,0))-sum(isnull(f.issued_qty,0))-sum(isnull(f.return_qty,0))) as final_closing from stock_register_final as f"
					+ " where f.department_id="
					+ box.getInt("deptId")
					+ " and f.item_id="
					+ itemId
					+ " and f.batch_no='"
					+ batchNo
					+ "'"
					+ " group by date,department_id,item_id,batch_no order by date";
			openingStockRegList = session.createSQLQuery(sqlStr).list();

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemId", itemId);
		return map;
	}

	@Override
	public Map<String, Object> stockRegisterReportDateWiseDetails(
			Map<String, Object> mapDetail) {
		Session session = getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			int deptId = (Integer) mapDetail.get("deptId");
			int groupId = 0;
			if (mapDetail.get("groupId") != null) {
				groupId = (Integer) mapDetail.get("groupId");
			}
			String fromDate = (String) mapDetail.get("fromDate");
			String toDate = (String) mapDetail.get("toDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);

			List<Object> masStoreItemList = new ArrayList<Object>();
			List<PojoForMasStoreItem> pojoParentList = new ArrayList<PojoForMasStoreItem>();
			if (groupId > 0) {
				masStoreItemList = session
						.createSQLQuery(
								"select msi.item_id,msi.pvms_no,msi.nomenclature from mas_store_item as msi where msi.status='y' and msi.group_id="
										+ groupId).list();
			} else {
				masStoreItemList = session
						.createSQLQuery(
								"select msi.item_id,msi.pvms_no,msi.nomenclature from mas_store_item as msi where msi.status='y'")
						.list();
			}
			for (Iterator iterator = masStoreItemList.iterator(); iterator
					.hasNext();) {
				PojoForMasStoreItem pojoForMasStoreItem = new PojoForMasStoreItem();
				List<ChildPojoForMasstoreItem> childPojoList = new ArrayList<ChildPojoForMasstoreItem>();
				Object[] object = (Object[]) iterator.next();

				/*
				 * itemId = (Integer) object[0];
				 * pojoForMasStoreItem.setId(itemId);
				 * 
				 * itemCode = (String) object[1];
				 * pojoForMasStoreItem.setItemCode(itemCode); itemName =
				 * (String) object[2];
				 */
			}

		} catch (Exception e) {
			// TODO: handle exception
		}

		return map;
	}

	@Override
	public Map<String, Object> submitDepartmentIssueWithoutIndent(
			Map<String, Object> utilMap, Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		// List<StoreInternalIndentT> storeInternalTList = new
		// ArrayList<StoreInternalIndentT>();
		int indentDtId = 0;
		int issueId = 0;
		int itemId = 0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo = "";
		String issuedBatchIdAndQty = "";

		try {
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));

			if (utilMap.get("deptId") != null) {
				deptId = (Integer) utilMap.get("deptId");
			}
			int totalQtyIssued = 0;
			if (utilMap.get("totalQtyIssued") != null) {
				totalQtyIssued = (Integer) utilMap.get("totalQtyIssued");
			}
			if (utilMap.get("issuedBatchIdAndQty") != null) {
				issuedBatchIdAndQty = (String) utilMap
						.get("issuedBatchIdAndQty");
			}
			if (utilMap.get("issueNo") != null) {
				issueNo = (String) utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if (utilMap.get("issueM") != null) {
				issueM = (StoreIssueM) utilMap.get("issueM");
			}

			// Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(issueM);
			hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			// int issuemId=issueM.getRequestNo().getId();

			/*
			 * List indentList =
			 * getHibernateTemplate().findByCriteria(DetachedCriteria
			 * .forClass(StoreInternalIndentM.class) .add(Restrictions.eq("Id",
			 * issueM.getRequestNo().getId()))); StoreInternalIndentM indentM1 =
			 * new StoreInternalIndentM(); indentM1 =
			 * (StoreInternalIndentM)indentList.get(0); indentM1.setStatus("y");
			 * hbt.saveOrUpdate(indentM1);
			 */
			// Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("IssueM.Id", issueId)).list();
			// List lstData1 = new ArrayList(header.getIssueId());
			int j = 0;
			int k = 1;
			List<StoreItemBatchStock> stockDataList=new ArrayList<StoreItemBatchStock>();
			for (int i = 0; i < lstData1.size(); i++) {
				MasStoreItem item = ((StoreIssueT) lstData1.get(i)).getItem();

				List lstdata = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item='"
								+ ((StoreIssueT) lstData1.get(i)).getItem()
										.getId()
								+ "' and ss.BatchNo='"
								+ ((StoreIssueT) lstData1.get(i)).getBatchNo()
										.trim() + "'"
								+ " and ss.Department.Id='"
								+ issueM.getDepartment().getId() + "'");
				StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
				itemBatchStock = (StoreItemBatchStock) lstdata.get(0);
				StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, itemBatchStock.getId());
				if (batchStockObj.getClosingStock() != null) {
					batchStockObj.setClosingStock(batchStockObj
							.getClosingStock().subtract(
									((StoreIssueT) lstData1.get(i))
											.getQtyIssued()));
				}
				BigDecimal issueQty = new BigDecimal(0.00);

				if (batchStockObj.getIssueQty() != null) {
					issueQty = batchStockObj.getIssueQty();
				}
				batchStockObj.setIssueQty(issueQty.add(((StoreIssueT) lstData1
						.get(i)).getQtyIssued()));
				hbt.update(batchStockObj);
				stockDataList.add(batchStockObj);
				int storeFyId = 0;
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				HibernateTemplate hbt4 = getHibernateTemplate();
				hbt4.setFlushModeName("FLUSH_EAGER");
				hbt4.setCheckWriteOperations(false);
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4
						.load(StoreFyDocumentNo.class, storeFyId);
				storeFyDocumentNo.setIssueDeptNo(issueNo);
				hbt4.update(storeFyDocumentNo);
				hbt4.refresh(storeFyDocumentNo);
				
				j = j + 1;
				k = k + 1;
			}
			int p = 0;
			int q = 1;

			/*
			 * Vector itemList = box.getVector(RequestConstants.ITEM_ID);
			 * for(int ii=0;ii<itemList.size();ii++){ Criteria crit =
			 * session.createCriteria(StoreInternalIndentT.class)
			 * .createAlias("Internal", "I") .createAlias("Item", "item")
			 * .add(Restrictions.eq("I.Id",issuemId ))
			 * .add(Restrictions.eq("item.Id"
			 * ,Integer.parseInt(itemList.get(ii).toString())));
			 * storeInternalTList = crit.list(); int internalIndentTId =0;
			 * 
			 * for(StoreInternalIndentT storeInternalIndentT :
			 * storeInternalTList) { internalIndentTId =
			 * storeInternalIndentT.getId(); HibernateTemplate hbt5 =
			 * getHibernateTemplate(); hbt5.setFlushModeName("FLUSH_EAGER");
			 * hbt5.setCheckWriteOperations(false); StoreInternalIndentT
			 * internalIndentT = new StoreInternalIndentT(); internalIndentT =
			 * (StoreInternalIndentT)hbt5.load(StoreInternalIndentT.class,
			 * internalIndentTId); int quantityRcvd=0;
			 * if(internalIndentT.getQtyIssued()!=null){
			 * quantityRcvd=internalIndentT.getQtyIssued(); } int
			 * quantityReceivedFinal=quantityRcvd
			 * +box.getInt(RequestConstants.QTY_ISSUED+q);
			 * internalIndentT.setQtyIssued(quantityReceivedFinal); String
			 * tempIssuedBatchIdAndQty=""; int batchId=
			 * box.getInt(RequestConstants.BATCH_ID+p);
			 * issuedBatchIdAndQty=issuedBatchIdAndQty
			 * +"#"+batchId+"/"+box.getInt(RequestConstants.QTY_ISSUED+q);
			 * internalIndentT.setIssuedBatchIdAndQty(issuedBatchIdAndQty);
			 * hbt5.update(internalIndentT); hbt5.refresh(internalIndentT); } p
			 * =p+1; q=q+1; }
			 */
			b = true;
			tx.commit();
			
			
			
			
		} catch (Exception exception) {
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("b", b);
		return map;
	}

	
	
	@Override
	public Map<String, Object> submitDepartmentIssueWithoutIndent(Box box) {
		boolean b = false;
		Session session = getSession(); 
		Map<String,Object> dataMap=new HashMap<String,Object>();
		String data=box.get("message");
		data = data.replace("null", " ");
		String array[] = data.split("\\|"); 
		Transaction tx = null;
		MasDepartment masDepartment = null;
		Map<String, Object> map = new HashMap<String, Object>(); 
		StoreItemBatchStock storeItemBatchStock=new StoreItemBatchStock();
		int index = 0;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setBatchNo(array[index].trim());
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setExpiryDate(HMSUtil
					.convertStringyyyyMMddTypeToDateType(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setOpeningBalanceDate(HMSUtil
					.getDateForm_yyyy_mm_dd(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setOpeningBalanceQty(new BigDecimal(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setReceivedQty(new BigDecimal(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setIssueQty(new BigDecimal(array[index]));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setClosingStock(new BigDecimal(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setCostPrice(new BigDecimal(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setDispencingPrice(new BigDecimal(array[index]));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			storeItemBatchStock.setLastChgDate(HMSUtil
					.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) { 
			storeItemBatchStock.setManufactureDate(HMSUtil
					.convertStringyyyyMMddTypeToDateType(array[index].trim()));
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) { 
			storeItemBatchStock.setMrp(new BigDecimal(array[index].trim()));
		}
		index++; 
		if (array[index] != null && !"".equals(array[index].trim())) {
			 masDepartment = new MasDepartment(
					Integer.parseInt(array[index].trim()));
			storeItemBatchStock.setDepartment(masDepartment);
		}
		index++; 
		if (array[index] != null && !"".equals(array[index].trim())) {
			MasManufacturer manufacturer=new MasManufacturer(Integer.parseInt(array[index].trim()));
			storeItemBatchStock.setManufacturer(manufacturer);
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			MasStoreItem item=new MasStoreItem(Integer.parseInt(array[index].trim()));
			storeItemBatchStock.setItem(item);
		}
		index++;
		if (array[index] != null && !"".equals(array[index].trim())) {
			MasHospital hospital=new MasHospital(Integer.parseInt(array[index].trim()));
			storeItemBatchStock.setHospital(hospital);
		}
		index++;

		if (array[index] != null && !"".equals(array[index].trim())) {
			Users users = new Users(
					Integer.parseInt(array[index].trim()));
			storeItemBatchStock.setLastChgBy(users);
		}
		 

		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false); 
			StoreItemBatchStock storeItemBatchStockForSaving = new StoreItemBatchStock(); 
			String batch_no = storeItemBatchStock.getBatchNo();
			
			int item_id = storeItemBatchStock.getItem().getId();
			List<StoreItemBatchStock> storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.Department.Id= "
							+ storeItemBatchStock.getDepartment().getId()
							+ " and inp.Hospital.Id = "
							+ storeItemBatchStock.getHospital().getId()
							+ " and inp.BatchNo ='"
							+ batch_no + "' "); 
			
			if (storeItemBatchStockList != null && storeItemBatchStockList.size() > 0) {
				int id = storeItemBatchStockList.get(0).getId(); 
				StoreItemBatchStock storeItemBatchStockExisting = (StoreItemBatchStock) getHibernateTemplate()
						.load(StoreItemBatchStock.class, id); 
				storeItemBatchStockExisting.setExpiryDate(storeItemBatchStock.getExpiryDate()); 
				storeItemBatchStockExisting.setClosingStock(storeItemBatchStock.getClosingStock()); 	 
				storeItemBatchStockExisting.setOpeningBalanceQty(storeItemBatchStock.getOpeningBalanceQty());  
				storeItemBatchStockExisting.setDispencingPrice(storeItemBatchStock.getDispencingPrice()); 
				storeItemBatchStockExisting.setMrp(storeItemBatchStock.getMrp()); 
				storeItemBatchStockExisting.setOpeningBalanceDate(storeItemBatchStock.getOpeningBalanceDate()); 
				storeItemBatchStockExisting.setCostPrice(storeItemBatchStock.getCostPrice());
				//storeItemBatchStockExisting.setDepartment(storeItemBatchStock.getDepartment()); // added by amit das on 13-02-2017 
				hbt.update(storeItemBatchStockExisting); 
			} else { 
				hbt.save(storeItemBatchStock);
			}
			b = true;
			tx.commit();
		} catch (Exception exception) {
			b = false;
			tx.rollback();
			exception.printStackTrace();
		} finally{
			session.close();
		}
		map.put("success", b);
		return map;
	}
	
	@Override
	public Map<String, Object> setStoreStockRegisterCronJob(
			Map<String, Object> mapDetail) {
		Map<String, Object> map = new HashMap<String, Object>();

		List<MasDepartment> masDepartmentList = new ArrayList<MasDepartment>();
		Session session = getSession();
		try {
			Criteria c = session.createCriteria(MasDepartment.class)
					.add(Restrictions.idEq(24))
					.add(Restrictions.eq("Status", "y"));
			masDepartmentList = c.list();
			if (masDepartmentList.size() > 0) {
				for (MasDepartment masDepartment : masDepartmentList) {
					int deptId = 0;
					deptId = masDepartment.getId();
					List<Object> grnList = new ArrayList<Object>();
					grnList = getHibernateTemplate()
							.find("select sum(isnull(sgt.ReceivedQty,0)) ,item.Id,sgt.BatchNo,dept.Id,sum(isnull(sgt.FreeQty,0)) from jkt.hms.masters.business.StoreGrnT as sgt join sgt.GrnMaster as sgm join sgm.Department as dept join sgt.Item as item where dept.Id="
									+ deptId
									+ " group by item.Id,sgt.BatchNo,dept.Id");
					/*
					 * Code for Central Store Department direct purchage from
					 * vender Code By Mukesh
					 */
					if (grnList.size() > 0) {
						for (Iterator iterator2 = grnList.iterator(); iterator2
								.hasNext();) {
							Long totalItemGrnQtyLong = new Long(0);
							Object[] objectGrn = (Object[]) iterator2.next();
							BigDecimal totalItemGrnQty = new BigDecimal(0);
							String batchNoGrn = "";
							int grnItemId = 0;
							if (objectGrn[2] != null) {
								batchNoGrn = (String) objectGrn[2];
							}
							if (objectGrn[1] != null) {
								grnItemId = (Integer) objectGrn[1];
							}
							if (objectGrn[0] != null) {
								totalItemGrnQty = (BigDecimal) objectGrn[0];
							}

							if (objectGrn[4] != null) {
								Long totalItemFreeQtyl = new Long(0);
								totalItemFreeQtyl = (Long) objectGrn[4];
								totalItemGrnQtyLong = totalItemGrnQtyLong
										+ totalItemFreeQtyl
										+ totalItemGrnQty.longValue();
							}
							List<Object> stockBatchItemList = new ArrayList<Object>();
							stockBatchItemList = getHibernateTemplate()
									.find("select sum(isnull(sibs.ReceivedQty,0)),item.Id,sibs.BatchNo,dept.Id,sibs.Id from jkt.hms.masters.business.StoreItemBatchStock as sibs join sibs.Department as dept join sibs.Item as item where dept.Id="
											+ deptId
											+ " and item.Id="
											+ grnItemId
											+ " and sibs.BatchNo='"
											+ batchNoGrn
											+ "' group by item.Id,sibs.BatchNo,dept.Id,sibs.Id");
							if (stockBatchItemList.size() > 0) {
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);

								BigDecimal totalQty = new BigDecimal(0);
								for (Iterator iterator = stockBatchItemList
										.iterator(); iterator.hasNext();) {
									Object[] objectStock = (Object[]) iterator
											.next();
									int stockBatchId = 0;
									if (objectStock[4] != null) {
										stockBatchId = Integer.parseInt(""
												+ objectStock[4]);
									}
									StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
											.load(StoreItemBatchStock.class,
													stockBatchId);
									storeItemBatchStock
											.setReceivedQty(new BigDecimal(
													totalItemGrnQtyLong));
									// hbt.update(storeItemBatchStock);
									/*
									 * String batchNoStock="";
									 * if(objectStock[2]!=null){
									 * batchNoStock=(String)objectStock[2]; }
									 */

								}
							}
						}
					}
					/*
					 * End of Code for Central Store Department direct purchage
					 * from vender Code By Mukesh
					 */
					/*
					 * Code for Recive Item From Departmental
					 * Store/Central/Indore Code By Mukesh
					 */
					List<Object> storeIssueList = new ArrayList<Object>();
					storeIssueList = getHibernateTemplate()
							.find("select sum(isnull(sit.QtyIssued,0)) ,item.Id,sgt.BatchNo,dept.Id from jkt.hms.masters.business.StoreIssueT as sit join sgt.IssueM as sim join sim.ToStore as dept join sit.Item as item where dept.Id="
									+ deptId
									+ " group by item.Id,sgt.BatchNo,dept.Id");
					if (storeIssueList.size() > 0) {
						for (Iterator iterator2 = storeIssueList.iterator(); iterator2
								.hasNext();) {
							Object[] objectDepartmentIssue = (Object[]) iterator2
									.next();
							BigDecimal totalItemIssueQty = new BigDecimal(0);
							String batchNoIssue = "";
							int issueItemId = 0;
							if (objectDepartmentIssue[2] != null) {
								batchNoIssue = (String) objectDepartmentIssue[2];
							}
							if (objectDepartmentIssue[1] != null) {
								issueItemId = (Integer) objectDepartmentIssue[1];
							}
							if (objectDepartmentIssue[0] != null) {
								totalItemIssueQty = (BigDecimal) objectDepartmentIssue[0];
							}

							List<Object> stockBatchItemList = new ArrayList<Object>();
							stockBatchItemList = getHibernateTemplate()
									.find("select sum(isnull(sibs.ReceivedQty,0)),item.Id,sibs.BatchNo,dept.Id,sibs.Id from jkt.hms.masters.business.StoreItemBatchStock as sibs join sibs.Department as dept join sibs.Item as item where dept.Id="
											+ deptId
											+ " and item.Id="
											+ issueItemId
											+ " and sibs.BatchNo='"
											+ batchNoIssue
											+ "' group by item.Id,sibs.BatchNo,dept.Id,sibs.Id");
							if (stockBatchItemList.size() > 0) {
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);

								BigDecimal totalQty = new BigDecimal(0);
								for (Iterator iterator = stockBatchItemList
										.iterator(); iterator.hasNext();) {
									Object[] objectStock = (Object[]) iterator
											.next();
									int stockBatchId = 0;
									if (objectStock[4] != null) {
										stockBatchId = Integer.parseInt(""
												+ objectStock[4]);
									}
									StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
											.load(StoreItemBatchStock.class,
													stockBatchId);
									storeItemBatchStock
											.setReceivedQty(totalItemIssueQty);
									// hbt.update(storeItemBatchStock);
									/*
									 * String batchNoStock="";
									 * if(objectStock[2]!=null){
									 * batchNoStock=(String)objectStock[2]; }
									 */

								}
							}
						}
					}
					/*
					 * End of Code for Recive Item From Departmental
					 * Store/Central/Indore Code By Mukesh
					 */

					/*
					 * Code for Central Store/Indore Store Department issue and
					 * Other recive Code By Mukesh
					 */
					List<Object> storeIssueByList = new ArrayList<Object>();
					storeIssueByList = getHibernateTemplate()
							.find("select sum(isnull(sit.QtyIssued,0)) ,item.Id,sgt.BatchNo,dept.Id from jkt.hms.masters.business.StoreIssueT as sit join sgt.IssueM as sim join sim.Department as dept join sit.Item as item where dept.Id="
									+ deptId
									+ " group by item.Id,sgt.BatchNo,dept.Id");
					if (storeIssueByList.size() > 0) {
						for (Iterator iterator2 = storeIssueByList.iterator(); iterator2
								.hasNext();) {
							Object[] objectDepartmentIssue = (Object[]) iterator2
									.next();
							BigDecimal totalItemIssueQty = new BigDecimal(0);
							String batchNoIssue = "";
							int issueItemId = 0;
							if (objectDepartmentIssue[2] != null) {
								batchNoIssue = (String) objectDepartmentIssue[2];
							}
							if (objectDepartmentIssue[1] != null) {
								issueItemId = (Integer) objectDepartmentIssue[1];
							}
							if (objectDepartmentIssue[0] != null) {
								totalItemIssueQty = (BigDecimal) objectDepartmentIssue[0];
							}

							List<Object> stockBatchItemList = new ArrayList<Object>();
							stockBatchItemList = getHibernateTemplate()
									.find("select sum(isnull(sibs.ReceivedQty,0)),item.Id,sibs.BatchNo,dept.Id,sibs.Id from jkt.hms.masters.business.StoreItemBatchStock as sibs join sibs.Department as dept join sibs.Item as item where dept.Id="
											+ deptId
											+ " and item.Id="
											+ issueItemId
											+ " and sibs.BatchNo='"
											+ batchNoIssue
											+ "' group by item.Id,sibs.BatchNo,dept.Id,sibs.Id");
							if (stockBatchItemList.size() > 0) {
								HibernateTemplate hbt = getHibernateTemplate();
								hbt.setFlushModeName("FLUSH_EAGER");
								hbt.setCheckWriteOperations(false);

								BigDecimal totalQty = new BigDecimal(0);
								for (Iterator iterator = stockBatchItemList
										.iterator(); iterator.hasNext();) {
									Object[] objectStock = (Object[]) iterator
											.next();
									int stockBatchId = 0;
									if (objectStock[4] != null) {
										stockBatchId = Integer.parseInt(""
												+ objectStock[4]);
									}
									StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) hbt
											.load(StoreItemBatchStock.class,
													stockBatchId);
									storeItemBatchStock
											.setIssueQty(totalItemIssueQty);
									// hbt.update(storeItemBatchStock);
									/*
									 * String batchNoStock="";
									 * if(objectStock[2]!=null){
									 * batchNoStock=(String)objectStock[2]; }
									 */

								}
							}
						}
					}
					/*
					 * End of Code for Central Store/Indore Store issue to All
					 * Department and Other recive Code By Mukesh
					 */
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> printStockRegisterCentralStoreReport(
			Map<String, Object> requestParameters) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();

		int itemId = 0;
		String batchNo = "";
		int deptId = 0;
		if (requestParameters.get("itemId") != null) {
			itemId = (Integer) requestParameters.get("itemId");
		}
		if (requestParameters.get("deptId") != null) {
			deptId = (Integer) requestParameters.get("deptId");
		}
		if (requestParameters.get("batchNo") != null) {
			batchNo = (String) requestParameters.get("batchNo");
		}
		try {
			String fromDate = (String) requestParameters.get("fromDate");
			String toDate = (String) requestParameters.get("toDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL1 = formatterOut.format(formatterIn
					.parse(fromDate));
			String date4MySQL2 = formatterOut.format(formatterIn.parse(toDate));
			java.sql.Date startDate = java.sql.Date.valueOf(date4MySQL1);
			java.sql.Date endDate = java.sql.Date.valueOf(date4MySQL2);
			java.sql.Connection con = session.connection();
			map.put("con", con);

			String sql = "";
			if (batchNo != "" && !batchNo.equals("0")) {
				//
				sql = "{call get_open_quantity('" + startDate + "','" + endDate
						+ "'," + deptId + "," + itemId + ",'" + batchNo + "')}";
				//
			} else if (itemId != 0) {
				//
				sql = "{call get_open_quantity('" + startDate + "','" + endDate
						+ "'," + deptId + "," + itemId + "," + "''" + ")}";
				//
			} else {/*
					 * sql = "{call get_open_quantity('" + startDate + "','" +
					 * endDate + "'," + deptId+ ","+itemId+","+ "''" + ")}";
					 */
			}
			map.put("startDate", startDate);
			map.put("endDate", endDate);
			map.put("batchNo", batchNo);
			//
			try {
				if (sql != "") {
					CallableStatement cals = con.prepareCall(sql);
					cals.execute();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (RuntimeException e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		map.put("itemId", itemId);
		return map;
	}

	// ----Added By Manjul-------//
	@Override
	public Map<String, Object> showPatientDrugIssueReportDateWise() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> masDepartList = new ArrayList<MasDepartment>();
		Session session = (Session) getSession();
		try {
			String query = ("select md from MasDepartment as md where DepartmentType =10 ");
			masDepartList = session.createQuery(query).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("masDepartList", masDepartList);

		return map;
	}

	/*
	 * @Override public Map<String, Object> checkIssueNo(Map<String, Object>
	 * dataMap) { Map<String, Object> map = new HashMap<String, Object>();
	 * List<StoreIssueM> issueMList = new ArrayList<StoreIssueM>();
	 * List<StoreInternalIndentM> internalIndentList = new
	 * ArrayList<StoreInternalIndentM>(); Session session = (Session)
	 * getSession(); try{ String issueNo=""; String requestNo=""; int
	 * departmentIdTemp=0; int demandId=0;
	 * 
	 * if(dataMap.get("issueNo")!=null && dataMap.get("issueNo")!=""){
	 * issueNo=(String)dataMap.get("issueNo"); }
	 * if(dataMap.get("requestNo")!=null && dataMap.get("requestNo")!=""){
	 * requestNo=(String)dataMap.get("requestNo"); }
	 * if(dataMap.get("departmentIdTemp")!=null &&
	 * dataMap.get("departmentIdTemp")!=""){
	 * departmentIdTemp=(Integer)dataMap.get("departmentIdTemp"); } String
	 * query1
	 * =("from jkt.hms.masters.business.StoreInternalIndentM where Id='"+requestNo
	 * +"'"); internalIndentList=session.createQuery(query1).list();
	 * for(StoreInternalIndentM storeInternal : internalIndentList){
	 * demandId=storeInternal.getId(); } String query =(
	 * " select count(*) from jkt.hms.masters.business.StoreIssueM where IssueNo= '"
	 * +issueNo+"'  and RequestNo='"+requestNo+"' " +
	 * " and ToStore='"+departmentIdTemp+"'"); issueMList =
	 * session.createQuery(query).list(); map.put("issueMList", issueMList); }
	 * catch(Exception e) { e.printStackTrace(); } return map; }
	 */
	@Override
	public Map<String, Object> getResponceForGroup(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();

		int groupId = 0;
		if (dataMap.get("groupId") != null) {
			groupId = (Integer) dataMap.get("groupId");
		}
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		try {
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Group.Id", groupId)).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;
	}

	@Override
	public Map<String, Object> getBatchForItem(int itemId, int deptId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> groupList = new ArrayList<StoreItemBatchStock>();
		Session session = getSession();
		if (itemId != 0) {
			groupList = session.createCriteria(StoreItemBatchStock.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.createAlias("Item", "i")
					.add(Restrictions.eq("i.Id", itemId))
					// .addOrder(Order.asc("Nomenclature"))
					.list();
		}
		map.put("groupList", groupList);
		return map;
	}

	@Override
	public Map<String, Object> getInvoice(int supplierId, int deptId) {

		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreGrnM> searchGrnList = new ArrayList<StoreGrnM>();
		Session session = getSession();
		if (supplierId != 0) {
			searchGrnList = session.createCriteria(StoreGrnM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Supplier.Id", supplierId))
					.setProjection(Projections.property("InvoiceNo")).list();
		}
		map.put("searchGrnList", searchGrnList);
		return map;

	}

	/*
	 * By Ujjwal For Date wise issue report gon date17-11-2012
	 */
	@Override
	public Map<String, Object> getitemGroup() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> searchGroupList = new ArrayList<MasStoreGroup>();
		Session session = getSession();

		searchGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y")).list();
		map.put("searchGroupList", searchGroupList);
		return map;

	}

	@Override
	public boolean submitReorderLevelPharmacy(Box box, int deptId) {
		boolean dataAdded = false;
		String machine_code = "";
		Session session = (Session) getSession();
		Vector item_name = box.getVector(RequestConstants.ITEM_NAME);
		Vector max_stock = box.getVector("max_stock");
		Vector min_stock = box.getVector("min_stock");
		Vector rol = box.getVector("rol");

		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		String pvmsNo = "";
		int itemId = 0;
		List<StoreDeptReorderLevel> storeDeptReorderLevelList = new ArrayList<StoreDeptReorderLevel>();
		storeDeptReorderLevelList = session
				.createCriteria(StoreDeptReorderLevel.class)
				.add(Restrictions.eq("Department.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		StoreDeptReorderLevel reorderLevel = new StoreDeptReorderLevel();
		for (int i = 0; i < max_stock.size(); i++) {

			StoreDeptReorderLevel storeDeptReorderLevel = new StoreDeptReorderLevel();
			if (max_stock.get(i).toString() != null
					&& !max_stock.get(i).toString().equals("")) {
				// for(StoreDeptReorderLevel
				// storeDeptReorderLevelloop:storeDeptReorderLevelList){}

				itemId = getItemId1(item_name.get(i).toString());

				// if(storeDeptReorderLevelloop.getItem().getId()==itemId){}else{

				MasStoreItem masitem = new MasStoreItem();
				masitem.setId(itemId);
				storeDeptReorderLevel.setItem(masitem);
				if (max_stock.get(i).toString() != null
						&& !max_stock.get(i).toString().equals("")) {
					storeDeptReorderLevel.setMaxStock(new BigDecimal(max_stock
							.get(i).toString()));
				}
				if (min_stock.get(i).toString() != null
						&& !min_stock.get(i).toString().equals("")) {
					storeDeptReorderLevel.setMinStock(new BigDecimal(min_stock
							.get(i).toString()));
				}
				if (rol.get(i).toString() != null
						&& !rol.get(i).toString().equals("")) {
					storeDeptReorderLevel.setRol(new BigDecimal(rol.get(i)
							.toString()));
				}
				MasDepartment masdept = new MasDepartment();
				masdept.setId(deptId);
				storeDeptReorderLevel.setDepartment(masdept);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				storeDeptReorderLevel.setHospital(masHospital);

				hbt.save(storeDeptReorderLevel);

				// }

				dataAdded = true;
			}
		}
		return dataAdded;

	}

	public int getItemId1(String itemName) {
		int itemId = 0;
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String item1[] = itemName.split("\\[");
		String item11[] = item1[1].split("]");
		String item111 = item11[0];
		itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", item111)).list();

		for (MasStoreItem masStoreItem : itemList) {
			itemId = masStoreItem.getId();
		}

		return itemId;
	}

	@Override
	public Map<String, Object> showDepartmentWiseReorderLevelJsp(int deptId,
			int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> batchStockList = new ArrayList<Object[]>();
		String query = "";
		query = "select  i.nomenclature,i.pvms_no,r.max_stock,r.min_stock,r.rol from store_item_batch_stock s "
				+ " left outer join store_dept_reorder_level r on r.item_id=s.item_id  "
				+ " left outer join mas_store_item  i on i.item_id=s.item_id  "
				+ " where s.department_id="
				+ deptId
				+ " "
				+ " and s.hospital_id = "
				+ hospitalId
				+ " group by s.item_id,i.nomenclature,i.pvms_no,r.max_stock,r.min_stock,r.rol "
				+ " order by i.nomenclature";

		//
		Session session = getSession();
		batchStockList = session.createSQLQuery(query).list();
		List<StoreDeptReorderLevel> roLevelList = new ArrayList<StoreDeptReorderLevel>();
		roLevelList = session.createCriteria(StoreDeptReorderLevel.class)
				.list();
		map.put("batchStockList", batchStockList);
		map.put("roLevelList", roLevelList);
		return map;

	}

	@Override
	public Map<String, Object> searchReorderLevelPharmacy(
			Map<String, Object> searchFieldMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		String fromDate = "";
		boolean flag = false;
		String toDate = "";
		List<StoreDeptReorderLevel> storeDeptReorderLevelList = new ArrayList<StoreDeptReorderLevel>();
		Criteria criteria = null;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String currentDate = "";
		currentDate = (String) utilMap.get("currentDate");
		String financialYear = "";
		financialYear = HMSUtil.getfinancialYear(currentDate);
		Session session = (Session) getSession();

		int deptId = 0;
		int hospitalId = 0;
		if (searchFieldMap.get("deptId") != null
				&& !searchFieldMap.get("deptId").equals("0")) {
			deptId = (Integer) searchFieldMap.get("deptId");
		} else {
			// deptId=24;
		}
		if (searchFieldMap.get("hospitalId") != null
				&& !searchFieldMap.get("hospitalId").equals("0")) {
			hospitalId = (Integer) searchFieldMap.get("hospitalId");
		}
		try {
			storeDeptReorderLevelList = session
					.createCriteria(StoreDeptReorderLevel.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("storeDeptReorderLevelList", storeDeptReorderLevelList);
		return map;
	}

	@Override
	public boolean updateROl(int reId, BigDecimal max, BigDecimal min,
			BigDecimal rol) {
		boolean successfullyAdded = false;

		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");

		hbt.setCheckWriteOperations(false);

		try {
			StoreDeptReorderLevel sdrLevel = new StoreDeptReorderLevel();
			sdrLevel = (StoreDeptReorderLevel) hbt.load(
					StoreDeptReorderLevel.class, reId);
			sdrLevel.setMaxStock(max);
			sdrLevel.setMinStock(min);
			sdrLevel.setRol(rol);
			hbt.update(sdrLevel);
			successfullyAdded = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return successfullyAdded;
	}

	@Override
	public Map<String, Object> showPrescriptionWisePharmacyConsumptionJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> deptList = new ArrayList<MasDepartment>();
		String query = "";
		query = "select department_id ,department_name from mas_department where department_type_id=1 order by department_name ";

		Session session = getSession();
		deptList = session.createSQLQuery(query).list();
		map.put("deptList", deptList);

		return map;

	}

	@Override
	public Map<String, Object> getItemListForVendorByAutocomplete(
			Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> itemList = new ArrayList<Object>();

		// List<StoreInternalIndentT> storeInternalIndentTList = new
		// ArrayList<StoreInternalIndentT>();
		Session session = (Session) getSession();
		String pvmsNo = null;

		int deptId = 0;
		if (dataMap.get("deptId") != null) {
			deptId = (Integer) dataMap.get("deptId");
		}
		int hospitalId = 0;
		if (dataMap.get("hospitalId") != null) {
			hospitalId = (Integer) dataMap.get("hospitalId");
		}
		// int toWard=0;
		// toWard=box.getInt("toWard");

		// List<Integer> objectList = new ArrayList<Integer>();
		// int internalIndentId = 0;
		// int storeDepartmentId = 0;
		/*
		 * if (box.get("storeDepartmentId") != null &&
		 * !box.get("storeDepartmentId").equals("")) { storeDepartmentId =
		 * box.getInt("storeDepartmentId"); }
		 */

		try {
			String str = dataMap.get("autoHint") + "%";
			// String qry =
			// "select t.item_id from store_internal_indent_m m,store_internal_indent_t t where  m.id=t.internal_id and m.id="
			// + internalIndentId;
			// objectList = session.createSQLQuery(qry).list();

			// add(Restrictions.like("Nomenclature",str))
			/*
			 * Criteria c =
			 * session.createCriteria(MasStoreItem.class).add(Restrictions
			 * .eq("Status", "y")).add( Restrictions.like("Nomenclature", str));
			 */
			// c.add(Restrictions.eq("Department.Id", storeDepartmentId));
			String sql = "";
			String query = "";
			/*
			 * if (objectList != null && objectList.size() > 0) {
			 * 
			 * //c.add(Restrictions.not(Restrictions.in("Id", objectList))); int
			 * counter=0; for (Integer object : objectList) { if(counter==0){
			 * sql=""+object.intValue(); }else{ sql=sql+","+object.intValue(); }
			 * ++counter; } }
			 */
			/*
			 * c.setFirstResult(0); c.setMaxResults(10); itemList = c.list();
			 */
			/*
			 * String query = ""; if(toWard>0){
			 * 
			 * This Case Deaprtment Indent Code By Mukesh Narayan SIngh Date
			 * 22/01/2011
			 * 
			 * toWard=toWard; }else{
			 * 
			 * This Case Deaprtment Issue Without Indent Code By Mukesh Narayan
			 * SIngh Date 22/01/2011
			 * 
			 * toWard=deptId; }
			 */
			// if(sql==""){
			query = "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id in ("
					+ deptId
					+ ") and mst.Status='Y' and stock.ClosingStock>0 and  mst.Nomenclature like '"
					+ str
					+ "' and stock.Hospital.Id = '"
					+ hospitalId
					+ "'  group by mst.Id,mst.PvmsNo,mst.Nomenclature";
			/*
			 * }else{ query =
			 * "select mst.Id,mst.PvmsNo,mst.Nomenclature from MasStoreItem as mst,StoreItemBatchStock stock where mst.Id= stock.Item and stock.Department.Id in ("
			 * +deptId+") and mst.Id not in("+sql+
			 * ") and mst.Status='y' and stock.ClosingStock>0 and  mst.Nomenclature like '"
			 * + str + "' group by mst.Id,mst.PvmsNo,mst.Nomenclature"; }
			 */
			Query q = session.createQuery(query);
			q.setFirstResult(0);
			q.setMaxResults(10);
			itemList = q.list();
			//
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		// map.put("objectList", objectList);
		return map;
	}

	@Override
	public Map<String, Object> createPvmsItemExcelList(Box box) {

		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		List<Object[]> masStoreItemList = new ArrayList<Object[]>();

		masStoreItemList = session
				.createCriteria(MasStoreItem.class)
				// .add(Restrictions.eq("ItemType.Id", 11))
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.createAlias("ItemConversion", "ic")
				.setProjection(
						Projections.projectionList()
								.add(Projections.property("Id"))
								.add(Projections.property("PvmsNo"))
								.add(Projections.property("Nomenclature"))
								.add(Projections.property("ic.ItemUnitName")))
				.list();

		map.put("masStoreItemList", masStoreItemList);
		return map;

	}

	@Override
	public Map<String, Object> importPvmsMaster(Map<String, Object> utilMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List fileUploadedList = null;
		List<Integer> itemIdList = new ArrayList<Integer>();
		List<String> pvmsNoList = new ArrayList<String>();
		List<String> nomenclatureList = new ArrayList<String>();
		// List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<Integer> auList = new ArrayList<Integer>();
		List<String> batch1 = new ArrayList<String>();
		List<String> batch2 = new ArrayList<String>();
		List<String> batch3 = new ArrayList<String>();
		List<String> batch4 = new ArrayList<String>();
		List<String> batch5 = new ArrayList<String>();
		List<String> batch6 = new ArrayList<String>();
		List<String> batch7 = new ArrayList<String>();
		List<String> batch8 = new ArrayList<String>();
		List<String> batch9 = new ArrayList<String>();
		List<String> batch10 = new ArrayList<String>();
		List<String> manufactureDate1 = new ArrayList<String>();
		List<String> manufactureDate2 = new ArrayList<String>();
		List<String> manufactureDate3 = new ArrayList<String>();
		List<String> manufactureDate4 = new ArrayList<String>();
		List<String> manufactureDate5 = new ArrayList<String>();
		List<String> manufactureDate6 = new ArrayList<String>();
		List<String> manufactureDate7 = new ArrayList<String>();
		List<String> manufactureDate8 = new ArrayList<String>();
		List<String> manufactureDate9 = new ArrayList<String>();
		List<String> manufactureDate10 = new ArrayList<String>();
		List<String> expiryDate1 = new ArrayList<String>();
		List<String> expiryDate2 = new ArrayList<String>();
		List<String> expiryDate3 = new ArrayList<String>();
		List<String> expiryDate4 = new ArrayList<String>();
		List<String> expiryDate5 = new ArrayList<String>();
		List<String> expiryDate6 = new ArrayList<String>();
		List<String> expiryDate7 = new ArrayList<String>();
		List<String> expiryDate8 = new ArrayList<String>();
		List<String> expiryDate9 = new ArrayList<String>();
		List<String> expiryDate10 = new ArrayList<String>();
		List<BigDecimal> qty1 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty2 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty3 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty4 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty5 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty6 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty7 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty8 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty9 = new ArrayList<BigDecimal>();
		List<BigDecimal> qty10 = new ArrayList<BigDecimal>();
		itemIdList = (List) utilMap.get("itemIdList");
		pvmsNoList = (List) utilMap.get("pvmsNoList");
		nomenclatureList = (List) utilMap.get("nomenclatureList");
		auList = (List) utilMap.get("auList");
		batch1 = (List) utilMap.get("batch1");
		batch2 = (List) utilMap.get("batch2");
		batch3 = (List) utilMap.get("batch3");
		batch4 = (List) utilMap.get("batch4");
		batch5 = (List) utilMap.get("batch5");
		batch6 = (List) utilMap.get("batch6");
		batch7 = (List) utilMap.get("batch7");
		batch8 = (List) utilMap.get("batch8");
		batch9 = (List) utilMap.get("batch9");
		batch10 = (List) utilMap.get("batch10");
		manufactureDate1 = (List) utilMap.get("manufactureDate1");
		manufactureDate2 = (List) utilMap.get("manufactureDate2");
		manufactureDate3 = (List) utilMap.get("manufactureDate3");
		manufactureDate4 = (List) utilMap.get("manufactureDate4");
		manufactureDate5 = (List) utilMap.get("manufactureDate5");
		manufactureDate6 = (List) utilMap.get("manufactureDate6");
		manufactureDate7 = (List) utilMap.get("manufactureDate7");
		manufactureDate8 = (List) utilMap.get("manufactureDate8");
		manufactureDate9 = (List) utilMap.get("manufactureDate9");
		manufactureDate10 = (List) utilMap.get("manufactureDate10");
		expiryDate1 = (List) utilMap.get("expiryDate1");
		expiryDate2 = (List) utilMap.get("expiryDate2");
		expiryDate3 = (List) utilMap.get("expiryDate3");
		expiryDate4 = (List) utilMap.get("expiryDate4");
		expiryDate5 = (List) utilMap.get("expiryDate5");
		expiryDate6 = (List) utilMap.get("expiryDate6");
		expiryDate7 = (List) utilMap.get("expiryDate7");
		expiryDate8 = (List) utilMap.get("expiryDate8");
		expiryDate9 = (List) utilMap.get("expiryDate9");
		expiryDate10 = (List) utilMap.get("expiryDate10");
		qty1 = (List) utilMap.get("qty1");
		qty2 = (List) utilMap.get("qty2");
		qty3 = (List) utilMap.get("qty3");
		qty4 = (List) utilMap.get("qty4");
		qty5 = (List) utilMap.get("qty5");
		qty6 = (List) utilMap.get("qty6");
		qty7 = (List) utilMap.get("qty7");
		qty8 = (List) utilMap.get("qty8");
		qty9 = (List) utilMap.get("qty9");
		qty10 = (List) utilMap.get("qty10");
		int deptId = (Integer) utilMap.get("deptId");
		int hospitalId = (Integer) utilMap.get("hospitalId");
		int userId = (Integer) utilMap.get("userId");
		List<MasStoreItem> storeItemList = new ArrayList<MasStoreItem>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasInstituteDepartment> departmentForIndentNoList = new ArrayList<MasInstituteDepartment>();
		String message = "No Items Found (or) MMF not available";
		String userName = (String) utilMap.get("utilMap");
		String pvms = null;
		String nomenclature = null;
		int auId = 0;
		PagedArray pagedArray = null;
		HashMap<String, Object> hData = null;
		Vector tenderTItems = new Vector();
		Vector<HashMap> vResult = new Vector<HashMap>();
		HashMap[] testPageData = null;
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String time = (String) dateMap.get("currentTime");
		org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
		hbt1.setFlushModeName("FLUSH_EAGER");
		hbt1.setCheckWriteOperations(false);
		Transaction tx = null;
		String msg = "";
		boolean succesfullyAdded = false;
		try {
			tx = session.beginTransaction();

			String pvmsNo = "";
			int itemId = 0;
			String no = "";
			int StoreFyDocumentNoId = 0;
			MasHospital masHospital = new MasHospital();
			int i = 0;
			List<StoreBalanceT> storeBalTBatch1List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch2List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch3List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch4List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch5List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch6List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch7List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch8List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch9List = new ArrayList<StoreBalanceT>();
			List<StoreBalanceT> storeBalTBatch10List = new ArrayList<StoreBalanceT>();
			// storeBalanceTList =
			// session.createCriteria(StoreBalanceT.class).add(Restrictions.in("Item.Id",itemIdList)).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("Item.Id")).add(Projections.property("BatchNo")))).list();

			if (itemIdList.size() > 0) {
				for (Integer iId : itemIdList) {
					List<StoreBalanceT> storeBalTList = new ArrayList<StoreBalanceT>();
					storeBalTList = session
							.createCriteria(StoreBalanceT.class)
							.createAlias("StoreBalanceM", "sbm")
							.add(Restrictions.eq("sbm.Hospital.Id", hospitalId))
							.add(Restrictions.eq("Item.Id", iId))
							.setProjection(
									Projections.distinct(Projections
											.projectionList()
											.add(Projections
													.property("Item.Id"))
											.add(Projections
													.property("BatchNo"))))
							.list();
					if (storeBalTList.size() > 0) {
						storeBalanceTList.addAll(storeBalTList);
					}

				}

			}

			if (nomenclatureList.size() > 0) {
				departmentForIndentNoList = session
						.createCriteria(MasInstituteDepartment.class, "mi")
						.add(Restrictions.eq("mi.Status", "Y").ignoreCase())
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Institute.Id", hospitalId))
						.list();
				
				String deptCode = "";
				String hospitalTypeCode = "";
				String hospitalCode = "";
				String balanceNo = "";
				if (departmentForIndentNoList.size() > 0) {
					for (MasInstituteDepartment masInstituteDepartment: departmentForIndentNoList) {
						deptCode =masInstituteDepartment.getDepartment().getDepartmentCode();
						hospitalTypeCode = masInstituteDepartment.getInstitute().getHospitalType().getHospitalTypeCode();
						hospitalCode = masInstituteDepartment.getInstitute().getHospitalCode();
					}
				}
				Map<String, Object> maxMap = new HashMap<String, Object>();
				maxMap.put("deptCode", deptCode);
				maxMap.put("hospitalTypeCode", hospitalTypeCode);
				maxMap.put("hospitalCode", hospitalCode);

				
				storeFyDocumentNoList = (List) getHibernateTemplate()
						.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id = "
								+ hospitalId
								+ " and sfdn.Department.Id = "
								+ deptId);
								
				if (storeFyDocumentNoList != null && storeFyDocumentNoList.size() > 0) {
					for (StoreFyDocumentNo obj : storeFyDocumentNoList) {
						if (obj.getBalanceNo() != null && !obj.getBalanceNo().equals("")) {
							balanceNo = ("" + obj.getBalanceNo());
							StoreFyDocumentNoId = obj.getId();
							
							maxMap.put("no", balanceNo);
							balanceNo = getMaxNoForOpening(maxMap);
							map.put("max", balanceNo);

						} else {
							//
							maxMap.put("no", balanceNo);
							balanceNo = getMaxNoForOpening(maxMap);
							map.put("max", balanceNo);
							
							StoreFyDocumentNo storeFyDocumentNoObj = new StoreFyDocumentNo();
							storeFyDocumentNoObj.setAdjustmentNo("0");
							storeFyDocumentNoObj.setAdjustmentStartNo("0");
							storeFyDocumentNoObj.setBalanceNo(balanceNo);
							storeFyDocumentNoObj.setBalanceStartNo("0");
							storeFyDocumentNoObj.setDefectEntryNo("0");
							storeFyDocumentNoObj.setDefectEntryStartNo("0");
							storeFyDocumentNoObj.setDemandNo("0");
							storeFyDocumentNoObj.setDemandStartNo("0");
							storeFyDocumentNoObj.setInIndentNo("0");
							storeFyDocumentNoObj.setDepartment(new MasDepartment(deptId));
							storeFyDocumentNoObj.setGrnNo("0");
							storeFyDocumentNoObj.setGrnStartNo("0");
							storeFyDocumentNoObj.setIssueDeptNo("0");
							storeFyDocumentNoObj.setIssueDeptReturnNo("0");
							storeFyDocumentNoObj.setIssueDeptReturnStartNo("0");
							storeFyDocumentNoObj.setIssueDeptStartNo("0");
							storeFyDocumentNoObj.setVendorReturnNo("0");
							storeFyDocumentNoObj.setVendorReturnStartNo("0");
							String issueDeptNo = "";
							issueDeptNo = getMaxNo("0");
							String issueDeptStartNo = issueDeptNo;
							storeFyDocumentNoObj.setIssueDeptNo("0");
							storeFyDocumentNoObj.setIssueDeptStartNo("0");
							MasHospital hospital = new MasHospital();
							hospital.setId(hospitalId);
							storeFyDocumentNoObj.setHospital(hospital);
							hbt1.save(storeFyDocumentNoObj);
							hbt1.refresh(storeFyDocumentNoObj);

							StoreFyDocumentNoId = storeFyDocumentNoObj.getId();
							

						}
					}
				} else {
					maxMap.put("no", balanceNo);
					balanceNo = getMaxNoForOpening(maxMap);
					map.put("max", balanceNo);
					
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo(balanceNo);
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setDepartment(new MasDepartment(deptId));
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeFyDocumentNo.setHospital(hospital);
					hbt1.save(storeFyDocumentNo);
					hbt1.refresh(storeFyDocumentNo);

					StoreFyDocumentNoId = storeFyDocumentNo.getId();
				}
				
				/*storeFyDocumentNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
				if (storeFyDocumentNoList.size() > 0) {
					for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {

						no = ("" + storeFyDocumentNo.getBalanceNo());
						no = getMaxNo(no);
						StoreFyDocumentNoId = storeFyDocumentNo.getId();
					}
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					MasHospital hospital = new MasHospital();
					hospital.setId(hospitalId);
					storeFyDocumentNo.setHospital(hospital);
					MasDepartment department = new MasDepartment();
					department.setId(deptId);
					storeFyDocumentNo.setDepartment(department);
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBooNo("0");
					storeFyDocumentNo.setBooStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepotIndentNo("0");
					storeFyDocumentNo.setDepotIndentStartNo("0");
					// storeFyDocumentNo.setDeptConsumNo("0");
					storeFyDocumentNo.setDisposalEntryNo("0");
					storeFyDocumentNo.setDisposalEntryStartNo("0");
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIndentToDepotNo("0");
					storeFyDocumentNo.setIndentToDepotStartNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					// storeFyDocumentNo.setIssueInPatientNo(new BigDecimal(0));
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientReturnNo("0");
					// storeFyDocumentNo.setIssueInPatientReturnStartNo("0");
					storeFyDocumentNo.setIssueInPatientStartNo("0");
					storeFyDocumentNo.setIssueLoanoutNo("0");
					storeFyDocumentNo.setIssueOtafuNo("0");
					storeFyDocumentNo.setIssueOtafuStartNo("0");
					storeFyDocumentNo.setIssueOtherUnitsNo("0");
					storeFyDocumentNo.setIssueOtherUnitsStartNo("0");
					// storeFyDocumentNo.setIssueWardNo(new BigDecimal(0));
					storeFyDocumentNo.setIsuueLoanoutStartNo("0");
					storeFyDocumentNo.setIndentToSocNo("0");
					storeFyDocumentNo.setInIndentNo("0");
					storeFyDocumentNo.setLoaninNo("0");
					storeFyDocumentNo.setLoaninStartNo("0");
					// storeFyDocumentNo.setMedicineReturnNo("0");
					storeFyDocumentNo.setMmfIndentNo("0");
					storeFyDocumentNo.setMmfIndentStartNo("0");
					storeFyDocumentNo.setMmfNo("0");
					storeFyDocumentNo.setMmfStartNo("0");
					storeFyDocumentNo.setOpdIssueNo("0");
					storeFyDocumentNo.setOpdReturnNo("0");
					storeFyDocumentNo.setPatientReturnNo("0");
					storeFyDocumentNo.setPoIndentNo("0");
					storeFyDocumentNo.setPoIndentStartNo("0");
					storeFyDocumentNo.setPoNo("0");
					storeFyDocumentNo.setPoStartNo("0");
					storeFyDocumentNo.setQuotationRecNo("0");
					storeFyDocumentNo.setQuotationRecStartNo("0");
					storeFyDocumentNo.setQuotationReqNo("0");
					storeFyDocumentNo.setQuotationReqStartNo("0");
					storeFyDocumentNo.setSocIndentNo("0");
					storeFyDocumentNo.setSocIndentStartNo("0");
					storeFyDocumentNo.setTenderNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					storeFyDocumentNo.setWardReturnNo("0");
					storeFyDocumentNo.setWorkOrderNo("0");
					storeFyDocumentNo.setWorkOrderStartNo("0");

					hbt1.save(storeFyDocumentNo);

					no = getMaxNo(no);
					StoreFyDocumentNoId = storeFyDocumentNo.getId();

				}*/
				StoreBalanceM storeBalanceM = new StoreBalanceM();
				MasDepartment masDepartment = new MasDepartment();
				int cnt = 0;
				for (int j = 0; j < nomenclatureList.size(); j++) {
					if (!batch1.get(j).toString().equals("")) {
						storeBalTBatch1List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch1.get(j)
										.toString())).list();
					}
					if (!batch2.get(j).toString().equals("")) {
						storeBalTBatch2List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch2.get(j)
										.toString())).list();
					}
					if (!batch3.get(j).toString().equals("")) {
						storeBalTBatch3List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch3.get(j)
										.toString())).list();
					}
					if (!batch4.get(j).toString().equals("")) {
						storeBalTBatch4List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch4.get(j)
										.toString())).list();
					}
					if (!batch5.get(j).toString().equals("")) {
						storeBalTBatch5List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch5.get(j)
										.toString())).list();
					}
					if (!batch6.get(j).toString().equals("")) {
						storeBalTBatch6List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch6.get(j)
										.toString())).list();
					}
					if (!batch7.get(j).toString().equals("")) {
						storeBalTBatch7List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch7.get(j)
										.toString())).list();
					}
					if (!batch8.get(j).toString().equals("")) {
						storeBalTBatch8List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch8.get(j)
										.toString())).list();
					}
					if (!batch9.get(j).toString().equals("")) {
						storeBalTBatch9List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch9.get(j)
										.toString())).list();
					}
					if (!batch10.get(j).toString().equals("")) {
						storeBalTBatch10List = session
								.createCriteria(StoreBalanceT.class)
								.createAlias("StoreBalanceM", "sbm")
								.add(Restrictions.eq("sbm.Hospital.Id",
										hospitalId))
								.add(Restrictions.eq("Item.Id",
										itemIdList.get(j)))
								.add(Restrictions.eq("BatchNo", batch10.get(j)
										.toString())).list();
					}

					if (storeBalTBatch1List.size() == 0
							&& !batch1.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch2List.size() == 0
							&& !batch2.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch3List.size() == 0
							&& !batch3.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch4List.size() == 0
							&& !batch4.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch5List.size() == 0
							&& !batch5.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch6List.size() == 0
							&& !batch6.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch7List.size() == 0
							&& !batch7.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch8List.size() == 0
							&& !batch8.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch9List.size() == 0
							&& !batch9.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
					if (storeBalTBatch10List.size() == 0
							&& !batch10.get(j).toString().equals("")) {
						cnt = cnt + 1;
					}
				}
				// if(storeBalanceTList.size() < (itemIdList.size()*cnt)){
				if (cnt > 0) {
					// storeBalanceM.setApprovedBy(approvedBy)
					storeBalanceM.setBalanceDate(HMSUtil
							.convertStringTypeDateToDateType(date));
					masDepartment.setId(deptId);
					storeBalanceM.setDepartment(masDepartment);
					masHospital.setId(hospitalId);
					storeBalanceM.setHospital(masHospital);
					storeBalanceM.setStatus("P");
					Users users = new Users();
					users.setId(userId);
					storeBalanceM.setLastChgBy(users);
					storeBalanceM.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(date));
					storeBalanceM.setLastChgTime(time);
					// ============changes by anamika========
					// storeBalanceM.setStatus("o");
					storeBalanceM.setBalanceNo(balanceNo);
					hbt1.save(storeBalanceM);
				}
				StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) getHibernateTemplate()
						.load(StoreFyDocumentNo.class, StoreFyDocumentNoId);
				storeFyDocumentNo.setBalanceNo(balanceNo);
				hbt1.update(storeFyDocumentNo);

				for (i = 0; i < nomenclatureList.size(); i++) {
					pvmsNo = pvmsNoList.get(i);
					itemId = (Integer) itemIdList.get(i);
					/*
					 * if(storeBalanceTList.size()>0){ msg =
					 * "Record already Exist"; }else{
					 */
					if (itemId != 0
							&& (!batch1.get(i).toString().equals("")
									|| !batch2.get(i).toString().equals("")
									|| !batch3.get(i).toString().equals("")
									|| !batch4.get(i).toString().equals("")
									|| !batch5.get(i).toString().equals("")
									|| !batch6.get(i).toString().equals("")
									|| !batch7.get(i).toString().equals("")
									|| !batch8.get(i).toString().equals("")
									|| !batch9.get(i).toString().equals("") || !batch10
									.get(i).toString().equals(""))) {
						List<StoreBalanceT> storeBalTBat1List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat2List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat3List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat4List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat5List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat6List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat7List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat8List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat9List = new ArrayList<StoreBalanceT>();
						List<StoreBalanceT> storeBalTBat10List = new ArrayList<StoreBalanceT>();
						if (!batch1.get(i).toString().equals("")) {
							storeBalTBat1List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch1.get(i).toString())).list();
						}
						if (!batch2.get(i).toString().equals("")) {
							storeBalTBat2List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch2.get(i).toString())).list();
						}
						if (!batch3.get(i).toString().equals("")) {
							storeBalTBat3List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch3.get(i).toString())).list();
						}
						if (!batch4.get(i).toString().equals("")) {
							storeBalTBat4List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch4.get(i).toString())).list();
						}
						if (!batch5.get(i).toString().equals("")) {
							storeBalTBat5List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch5.get(i).toString())).list();
						}
						if (!batch6.get(i).toString().equals("")) {
							storeBalTBat6List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch6.get(i).toString())).list();
						}
						if (!batch7.get(i).toString().equals("")) {
							storeBalTBat7List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch7.get(i).toString())).list();
						}
						if (!batch8.get(i).toString().equals("")) {
							storeBalTBat8List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch8.get(i).toString())).list();
						}
						if (!batch9.get(i).toString().equals("")) {
							storeBalTBat9List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo",
											batch9.get(i).toString())).list();
						}
						if (!batch10.get(i).toString().equals("")) {
							storeBalTBat10List = session
									.createCriteria(StoreBalanceT.class)
									.createAlias("StoreBalanceM", "sbm")
									.add(Restrictions.eq("sbm.Hospital.Id",
											hospitalId))
									.add(Restrictions.eq("Item.Id",
											itemIdList.get(i)))
									.add(Restrictions.eq("BatchNo", batch10
											.get(i).toString())).list();
						}

						MasStoreItem storeItem = new MasStoreItem();
						storeItem.setId(itemId);
						SimpleDateFormat formatter = new SimpleDateFormat(
								"dd/mm/yyyy");
						if (storeBalTBat1List.size() == 0
								&& !batch1.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();

							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch1.get(i).toString());
							storeItemBatchStock.setBatchNo(batch1.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty1.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty1.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty1.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty1
												.get(i).toString()));
								storeItemBatchStock.setBatchNo(batch1.get(i)
										.toString());
							}
							if (!manufactureDate1.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate1.get(i)
										.toString().split(" ");
								
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate1.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = expiryDate1.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}

							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat2List.size() == 0
								&& !batch2.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch2.get(i).toString());
							storeItemBatchStock.setBatchNo(batch2.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty2.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty2.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty2.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty2
												.get(i).toString()));
							}
							if (!manufactureDate2.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate2.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate2.get(i).toString().equals("")) {
								String[] str = expiryDate2.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat3List.size() == 0
								&& !batch3.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch3.get(i).toString());
							storeItemBatchStock.setBatchNo(batch3.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty3.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty3.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty3.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty3
												.get(i).toString()));
							}
							if (!manufactureDate3.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate3.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate3.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate3.get(i).toString());
								String[] str = expiryDate3.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat4List.size() == 0
								&& !batch4.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch4.get(i).toString());
							storeItemBatchStock.setBatchNo(batch4.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty4.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty4.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty4.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty4
												.get(i).toString()));
							}
							if (!manufactureDate4.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate4.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate4.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate4.get(i).toString());
								String[] str = expiryDate4.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat5List.size() == 0
								&& !batch5.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch5.get(i).toString());
							storeItemBatchStock.setBatchNo(batch5.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty5.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty5.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty5.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty5
												.get(i).toString()));
							}
							if (!manufactureDate5.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate5.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate5.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate5.get(i).toString());
								String[] str = expiryDate5.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat6List.size() == 0
								&& !batch6.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch6.get(i).toString());
							storeItemBatchStock.setBatchNo(batch6.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty6.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty6.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty6.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty6
												.get(i).toString()));
							}
							if (!manufactureDate6.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate6.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate6.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate6.get(i).toString());
								String[] str = expiryDate6.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat7List.size() == 0
								&& !batch7.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch7.get(i).toString());
							storeItemBatchStock.setBatchNo(batch7.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty7.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty7.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty7.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty7
												.get(i).toString()));
							}
							if (!manufactureDate7.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate7.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate7.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate7.get(i).toString());
								String[] str = expiryDate7.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat8List.size() == 0
								&& !batch8.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch8.get(i).toString());
							storeItemBatchStock.setBatchNo(batch8.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty8.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty8.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty8.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty8
												.get(i).toString()));
							}
							if (!manufactureDate8.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate8.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate8.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate8.get(i).toString());
								String[] str = expiryDate8.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat9List.size() == 0
								&& !batch9.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch9.get(i).toString());
							storeItemBatchStock.setBatchNo(batch9.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty9.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty9.get(i)
										.toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty9.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty9
												.get(i).toString()));
							}
							if (!manufactureDate9.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate9.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate9.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate9.get(i).toString());
								String[] str = expiryDate9.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}

						if (storeBalTBat10List.size() == 0
								&& !batch10.get(i).toString().equals("")) {
							StoreBalanceT storeBalanceT = new StoreBalanceT();
							StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setBatchNo(batch10.get(i).toString());
							storeItemBatchStock.setBatchNo(batch10.get(i)
									.toString());
							// storeBalanceT.setSrNo(i);
							if (!qty10.get(i).toString().equals("")) {
								storeBalanceT.setQty(new BigDecimal(qty10
										.get(i).toString()));
								storeItemBatchStock
										.setOpeningBalanceQty(new BigDecimal(
												qty10.get(i).toString()));
								storeItemBatchStock
										.setClosingStock(new BigDecimal(qty10
												.get(i).toString()));
							}
							if (!manufactureDate10.get(i).toString().equals("")) {

								// String formattedDate =
								// formatter.format(expiryDate1.get(i));
								String[] str = manufactureDate10.get(i)
										.toString().split(" ");
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[2].toString();
									}
								}
								if (manufactureDate != "") {
									storeBalanceT
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
									// storeItemBatchStock.setExpiryDate(HMSUtil.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeBalanceT.setManufactureDate(null);
									// storeItemBatchStock.setExpiryDate(null);
								}
							}
							if (!expiryDate10.get(i).toString().equals("")) {
								// String formattedDate =
								// formatter.format(expiryDate9.get(i).toString());
								String[] str = expiryDate10.get(i).toString()
										.split(" ");
								String expDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										expDate = str[0].toString();
									}
									if (str[1] != null) {
										expDate = expDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										expDate = expDate + "/"
												+ str[2].toString();
									}
								}
								if (expDate != "") {
									storeBalanceT
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
									storeItemBatchStock
											.setExpiryDate(HMSUtil
													.convertStringTypeDateToDateType(expDate));
								} else {
									storeBalanceT.setExpiryDate(null);
									storeItemBatchStock.setExpiryDate(null);
								}
							}
							// storeBalanceT.setPvmsNo(pvmsNoList.get(i).toString());
							// storeBalanceT.setNomenclature(nomenclatureList.get(i).toString());
							storeBalanceT.setItem(storeItem);
							storeBalanceT.setStoreBalanceM(storeBalanceM);
							hbt1.save(storeBalanceT);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							storeItemBatchStock.setDepartment(masDepartment);
							// storeItemBatchStock.setPvmsNo(pvmsNoList.get(i).toString());
							// storeItemBatchStock.setNomenclature(nomenclatureList.get(i).toString());
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							hbt1.save(storeItemBatchStock);
						}
						succesfullyAdded = true;
						/******************** Saving the Record into Table mas_store_item *********************/
						// }
					}
				}
			}
			/*
			 * if(storeBalTBatch1List.size()>0 && storeBalTBatch2List.size()>0
			 * && storeBalTBatch3List.size()>0 && storeBalTBatch4List.size()>0
			 * && storeBalTBatch5List.size()>0 && storeBalTBatch6List.size()>0
			 * && storeBalTBatch7List.size()>0 && storeBalTBatch8List.size()>0
			 * && storeBalTBatch9List.size()>0 && storeBalTBatch10List.size()>0
			 * ){ msg = " Some Record Already Exist.."; }else{
			 */
			msg = "Record Added Sucessfully..";
			// }

			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		// departmentList =
		// session.createCriteria(MasDepartment.class).add(Restrictions.eq("Status",
		// "y")).addOrder(Order.asc("DepartmentName")).list();

		map.put("succesfullyAdded", succesfullyAdded);
		map.put("time", time);
		// map.put("departmentList", departmentList);
		map.put("msg", msg);
		return map;
	}

	@Override
	public Map<String, Object> showIndentCreationbyDepartmentsJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasInstituteDepartment> departmentForIndentNoList = new ArrayList<MasInstituteDepartment>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		Session session = (Session) getSession();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";

		hospitalTypeList = session.createCriteria(MasHospitalType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		
		departmentList = session.createCriteria(MasDepartment.class,"dept")
						//.createAlias("dept.DepartmentType", "dt")
						//.add(Restrictions.eq("dt.DepartmentTypeCode", "CSTR"))
						.add(Restrictions.eq("DepartmentName", "Store").ignoreCase())
							.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();

		departmentForIndentNoList = session
				.createCriteria(MasInstituteDepartment.class, "mi")
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase())
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId")))
				.list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();
		
		List<Object[]> hospTypeList = new ArrayList<Object[]>();
		hospTypeList = session
				.createCriteria(MasHospital.class, "mi").createAlias("HospitalType", "ht")
				.add(Restrictions.eq("mi.Id", box.getInt("hospitalId"))).setProjection(Projections.projectionList().add(Projections.property("ht.HospitalTypeCode")).add(Projections.property("ht.HospitalTypeName"))).list();
		
		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());

				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String deptType = "";
		if (departmentForIndentNoList.size() > 0) {
			for (MasInstituteDepartment masInstituteDepartment: departmentForIndentNoList) {
				
				if(masInstituteDepartment.getDepartment()!=null && masInstituteDepartment.getDepartment().getDepartmentType()!=null) // added by amit das on 20-06-2016
				deptType = "DEPT_IND_"
						+ masInstituteDepartment.getDepartment().getDepartmentType()
								.getDepartmentTypeCode();
			}
		}

		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptType", deptType);

		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
					.get(0);
			demandNo = ("" + storeFyDocumentNo.getDemandNo());
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			maxMap.put("no", demandNo);
			demandNo = getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("demandNoList", demandNoList);
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
			map.put("finalDemandNo", finalDemandNo);
		} else {
			// /*
			maxMap.put("no", demandNo);
			// demandNo =getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("finalDemandNo", finalDemandNo);
		}
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("hospitalTypeList", hospitalTypeList);
		map.put("storeGroupList", storeGroupList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("departmentList", departmentList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		map.put("hospTypeList", hospTypeList);
		return map;

	}

	@Override
	public Map<String, Object> submitAnnualDepartmentIndentData(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector year1IndentQty = box.getVector("year1IndentQty");
		Vector year2IndentQty = box.getVector("year2IndentQty");
		Vector requiredQty = box.getVector("requiredQty");
		Vector previousYearConsumption = box
				.getVector("previousYearConsumption");
		Vector additionalQty = box.getVector("additionalQty");
		Vector incrementalPercentage = box.getVector("incrementalPercentage");
		Vector incrementalQty = box.getVector("incrementalQty");
		Vector remarks = box.getVector("remarks");

		// Vector stock = box.getVector("stock");

		int deptId = box.getInt(FROM_WARD);
		// int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);
		int newinternalIndentId = 0;

		int hospitalid = 0;
		hospitalid = box.getInt(RequestConstants.HOSPITAL_ID);

		StoreInternalIndentM storeInternalIndentM = null;
		// StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		boolean flag = false;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Code for Duplicate Indent No Date 21 Jan 2011
			 */
			List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
			storeInternalIndentMForDemandNoList = session
					.createCriteria(StoreInternalIndentM.class, "siim")
					.add(Restrictions.eq("siim.Department.Id", deptId))
					.add(Restrictions.eq("siim.Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("siim.DemandNo", demandNo)).list();

			StoreInternalIndentM newMObj = new StoreInternalIndentM();
			if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee1 = new MasEmployee();
				masEmployee1.setId(box
						.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setApprovedBy(masEmployee1);
			}

			if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box
						.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setRequestedBy(masEmployee2);
			}
			int storeDepartmentId = 0;
			if (box.get("storeDepartmentId") != null
					&& !box.get("storeDepartmentId").equals("")) {
				storeDepartmentId = box.getInt("storeDepartmentId");

			}
			if (storeDepartmentId != 0) {
				MasDepartment masdepartment1 = new MasDepartment();
				masdepartment1.setId(storeDepartmentId);
				newMObj.setStoreDepartment(masdepartment1);
			}

			newMObj.setDemandNo(demandNo);
			newMObj.setIndentType(box.getString(TYPE_OF_INDENT));
			Users users = new Users();
			users.setId(box.getInt(USER_ID));

			newMObj.setLastChgBy(users);

			newMObj.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			newMObj.setStatus("o");
			/*
			 * IndentFlag=ALL means All Item Except Laundry Item IndentFlag=LDN
			 * means Indent Only Laundry Item
			 */
			newMObj.setIndentFlag("ALL");
			MasDepartment fromDept = new MasDepartment();
			fromDept.setId(box.getInt(FROM_WARD));
			newMObj.setDepartment(fromDept);

			MasDepartment toDept = new MasDepartment();
			toDept.setId(box.getInt(TO_WARD));
			newMObj.setToStore(toDept);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			newMObj.setHospital(masHospital);

			newMObj.setDemandDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DEMAND_DATE)));
			hbt.save(newMObj);
			hbt.refresh(newMObj);

			/*
			 * session.save(newMObj); session.refresh(newMObj);
			 */
			newinternalIndentId = newMObj.getId();

			// Auto-Increment No for demand No of Department Indent
			/*
			 * Synchronization code by ujjwal to generate the correct demandNo
			 * on 04082014 at silvassa
			 */
			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId"))).list();
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					storeFyDocumentNo.setDemandNo(demandNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.saveOrUpdate(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo(demandNo);
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepartment(new MasDepartment(box
							.getInt(FROM_WARD)));
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.save(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);

				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//
			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("") && previousYearConsumption.get(i)!=null && !previousYearConsumption.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					// int stockQnt = 0;
					// stockQnt = new
					// BigDecimal(stock.get(i).toString()).intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get(FROM_WARD)
							+ " and hospital_id = "
							+ hospitalid + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}
					MasDepartment department = new MasDepartment();
					department.setId(box.getInt(FROM_WARD));
					storeInternalIndentT.setDepartment(department);

					if (year1IndentQty.get(i) != null
							&& !year1IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT.setPrevYearIndQty(new BigDecimal(
								year1IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevYearIndQty(new BigDecimal(0));
					}
					if (year2IndentQty.get(i) != null
							&& !year2IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(
										year2IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(0));
					}
					if (previousYearConsumption.get(i) != null
							&& !previousYearConsumption.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(
										previousYearConsumption.get(i)
												.toString()));
					} else {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(0));
					}
					if (incrementalPercentage.get(i) != null
							&& !incrementalPercentage.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(
										incrementalPercentage.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(0));
					}
					if (incrementalQty.get(i) != null
							&& !incrementalQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(
										incrementalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(0));
					}
					if (requiredQty.get(i) != null
							&& !requiredQty.get(i).toString().equals("")) {
						storeInternalIndentT.setRequiredQty(new BigDecimal(
								requiredQty.get(i).toString()));
					} else {
						storeInternalIndentT.setRequiredQty(new BigDecimal(0));
					}
					if (additionalQty.get(i) != null
							&& !additionalQty.get(i).toString().equals("")) {
						storeInternalIndentT.setAdditionalQty(new BigDecimal(
								additionalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setAdditionalQty(new BigDecimal(0));
					}
					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeInternalIndentT.setRemarks("");
					}
					storeInternalIndentT.setItemStatus("o");

					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */

				}
			}

			box.put("internalIndentId", newinternalIndentId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				// map = getItemDetailsForDepartmentIndentForNextRecord(box);
			} else {
				// map = getItemDetailsForDepartmentIndent(box);
			}
			List<StoreInternalIndentM> storeInternalIndentMList2 = session
					.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Hospital.Id", hospitalid))
					.add(Restrictions.eq("Id", newinternalIndentId)).list();
			box.put(DEMAND_NO, storeInternalIndentMList2.get(0).getDemandNo());
			tx.commit();
			flag = true;
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		map.put("flag", flag);
		map.put("newinternalIndentId", newinternalIndentId);
		return map;
	}

	@Override
	public Map<String, Object> showInstituteWisePendingList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "a").ignoreCase()).list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> showInstitutionAnnualIndentCreationJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasHospital> instituteForIndentNoList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		List<Object[]> storeItemBatchStockList = new ArrayList<Object[]>();
		MasHospital hospital=new MasHospital();
		Session session = (Session) getSession();
		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";
		hospitalTypeList = session.createCriteria(MasHospitalType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		hospitalList = session.createCriteria(MasHospital.class)
				.createAlias("District", "district").add(Restrictions.eq("district.Id", box.getInt("districtId")))
							.createAlias("HospitalType", "hospitalType").add(Restrictions.eq("hospitalType.HospitalTypeName", "District Hospital"))
									.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.isNull("Department.Id"))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		hospital=(MasHospital)session.get(MasHospital.class, Integer.parseInt(box.get("hospitalId")));
		instituteForIndentNoList = session
				.createCriteria(MasHospital.class, "mh")
				.add(Restrictions.eq("mh.Status", "Y").ignoreCase())
				.add(Restrictions.eq("mh.Id", box.getInt("hospitalId"))).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("Item", "item")
					.createAlias("item.ItemConversion", "au")
					.createAlias("header.Hospital", "hospital")
					.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")))
					 .add(Restrictions.eq("ItemStatus", "a").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.sum("QtyRequest"))
									.add(Projections.groupProperty("item.Id"))
									.add(Projections
											.groupProperty("item.PvmsNo"))
									.add(Projections
											.groupProperty("item.Nomenclature"))
									.add(Projections
											.groupProperty("au.ItemUnitName"))
								//	.add(Projections.groupProperty("Id"))
									//.add(Projections.groupProperty("header.Id"))
									)
					.list();
			int itemId = 0;
			List<Integer> itemIdList = new ArrayList<Integer>();
			if (storeInternalIndentTList.size() > 0) {
				for (Object[] obj : storeInternalIndentTList) {
					itemId = (Integer) obj[1];
					itemIdList.add(itemId);
				}
			}
			if (itemIdList.size() > 0) {
				storeItemBatchStockList = session
						.createCriteria(StoreItemBatchStock.class)
						.createAlias("Item", "item")
						.add(Restrictions.in("item.Id", itemIdList))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId")))
						.setProjection(
								Projections
										.projectionList()
										.add(Projections.sum("ClosingStock"))
										.add(Projections
												.groupProperty("item.Id")))
						.list();
			}


		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String hospitalCode = "";
		if (instituteForIndentNoList.size() > 0) {
			for (MasHospital masHospital : instituteForIndentNoList) {
				hospitalCode = "INS_IND_" + masHospital.getHospitalCode();
			}
		}
		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptType", hospitalCode);

		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
					.get(0);
			demandNo = ("" + storeFyDocumentNo.getInstIndentNo());
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			maxMap.put("no", demandNo);
			demandNo = getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("demandNoList", demandNoList);
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
			map.put("finalDemandNo", finalDemandNo);
		} else {
			// /*
			maxMap.put("no", demandNo);
			// demandNo =getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("finalDemandNo", finalDemandNo);
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospital", hospital);
		map.put("hospitalList", hospitalList);
		map.put("hospitalTypeList", hospitalTypeList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		return map;
	}

	@Override
	public Map<String, Object> submitInstituteWiseIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();
		boolean flag = false;

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector year1IndentQty = box.getVector("year1IndentQty");
		Vector year2IndentQty = box.getVector("year2IndentQty");
		Vector requiredQty = box.getVector("requiredQty");
		Vector previousYearConsumption = box
				.getVector("previousYearConsumption");
		Vector additionalQty = box.getVector("additionalQty");
		Vector remarks = box.getVector("remarks");
		Vector leadTime = box.getVector("leadTime");
		Vector consumptionInLeadTime = box.getVector("consumptionInLeadTime");
		Vector incrementalPercentage = box.getVector("incrementalPercentage");
		Vector incrementalQty = box.getVector("incrementalQty");
		Vector pendingIndentQty = box.getVector("pendingIndentQty");
		Vector storeInternalTId = box.getVector("storeInternalTId");

		Vector stock = box.getVector("stock");

		int deptId = box.getInt(FROM_WARD);
		// int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);
		int newinternalIndentId = 0;

		int hospitalid = 0;
		hospitalid = box.getInt(RequestConstants.HOSPITAL_ID);

		StoreInternalIndentM storeInternalIndentM = null;
		// StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Code for Duplicate Indent No Date 21 Jan 2011
			 */
			List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
			storeInternalIndentMForDemandNoList = session
					.createCriteria(StoreInternalIndentM.class, "siim")
					.add(Restrictions.eq("siim.Department.Id", deptId))
					.add(Restrictions.eq("siim.Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("siim.DemandNo", demandNo)).list();

			StoreInternalIndentM newMObj = new StoreInternalIndentM();
			if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee1 = new MasEmployee();
				masEmployee1.setId(box
						.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setApprovedBy(masEmployee1);
			}

			if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box
						.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setRequestedBy(masEmployee2);
			}
			int storeDepartmentId = 0;
			if (box.get("storeDepartmentId") != null
					&& !box.get("storeDepartmentId").equals("")) {
				storeDepartmentId = box.getInt("storeDepartmentId");

			}
			if (storeDepartmentId != 0) {
				MasDepartment masdepartment1 = new MasDepartment();
				masdepartment1.setId(storeDepartmentId);
				newMObj.setStoreDepartment(masdepartment1);
			}

			newMObj.setDemandNo(demandNo);
			newMObj.setIndentType(box.getString(TYPE_OF_INDENT));
			Users users = new Users();
			users.setId(box.getInt(USER_ID));

			newMObj.setLastChgBy(users);

			newMObj.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			newMObj.setStatus("i");
			/*
			 * IndentFlag=ALL means All Item Except Laundry Item IndentFlag=LDN
			 * means Indent Only Laundry Item
			 */
			newMObj.setIndentFlag("ALL");
			// MasDepartment fromDept = new MasDepartment();
			// fromDept.setId(box.getInt(FROM_WARD));
			// newMObj.setDepartment(fromDept);

		/*	MasDepartment toDept = new MasDepartment();
			toDept.setId(box.getInt(TO_WARD));
			newMObj.setToStore(toDept);*/
			
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			newMObj.setHospital(masHospital);

			MasHospital inst = new MasHospital();
			inst.setId(box.getInt(TO_WARD));
			newMObj.setInstitute(inst);

			newMObj.setDemandDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DEMAND_DATE)));
			hbt.save(newMObj);
			hbt.refresh(newMObj);
		
			// ------------------------------------------------
			/*
			 * session.save(newMObj); session.refresh(newMObj);
			 */
			newinternalIndentId = newMObj.getId();

			// Auto-Increment No for demand No of Department Indent
			/*
			 * Synchronization code by ujjwal to generate the correct demandNo
			 * on 04082014 at silvassa
			 */
			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						 .add(Restrictions.isNull("Department.Id"))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId"))).list();
				System.out.println("sssssssss==="+box.getInt("hospitalId"));
				System.out.println("demandNoList=="+demandNoList.size());
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					storeFyDocumentNo.setInstIndentNo(demandNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.saveOrUpdate(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);
				} else {
					
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepartment(null);
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					storeFyDocumentNo.setInstIndentNo(demandNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.save(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);

				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//
			int indentMId = 0;
			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get(FROM_WARD)
							+ " and hospital_id = "
							+ hospitalid + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}
					// MasDepartment department = new MasDepartment();
					// department.setId(box.getInt(FROM_WARD));
					// storeInternalIndentT.setDepartment(department);

					if (year1IndentQty.get(i) != null
							&& !year1IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT.setPrevYearIndQty(new BigDecimal(
								year1IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevYearIndQty(new BigDecimal(0));
					}
					if (year2IndentQty.get(i) != null
							&& !year2IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(
										year2IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(0));
					}
					if (previousYearConsumption.get(i) != null
							&& !previousYearConsumption.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(
										previousYearConsumption.get(i)
												.toString()));
					} else {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(0));
					}
					if (leadTime.get(i) != null
							&& !leadTime.get(i).toString().equals("")) {
						storeInternalIndentT.setLeadTime(Integer
								.parseInt(leadTime.get(i).toString()));
					} else {
						storeInternalIndentT.setLeadTime(0);
					}
					if (consumptionInLeadTime.get(i) != null
							&& !consumptionInLeadTime.get(i).toString()
									.equals("")) {
						storeInternalIndentT.setConsInLeadTime(new BigDecimal(
								consumptionInLeadTime.get(i).toString()));
					} else {
						storeInternalIndentT
								.setConsInLeadTime(new BigDecimal(0));
					}
					if (incrementalPercentage.get(i) != null
							&& !incrementalPercentage.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(
										incrementalPercentage.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(0));
					}
					if (incrementalQty.get(i) != null
							&& !incrementalQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(
										incrementalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(0));
					}
					if (pendingIndentQty.get(i) != null
							&& !pendingIndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(
										pendingIndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(0));
					}
					if (requiredQty.get(i) != null
							&& !requiredQty.get(i).toString().equals("")) {
						storeInternalIndentT.setRequiredQty(new BigDecimal(
								requiredQty.get(i).toString()));
					} else {
						storeInternalIndentT.setRequiredQty(new BigDecimal(0));
					}
					if (additionalQty.get(i) != null
							&& !additionalQty.get(i).toString().equals("")) {
						storeInternalIndentT.setAdditionalQty(new BigDecimal(
								additionalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setAdditionalQty(new BigDecimal(0));
					}
					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeInternalIndentT.setRemarks("");
					}
					storeInternalIndentT.setItemStatus("i");

					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);

				}
				List<Integer> indentTList = new ArrayList<Integer>();
				Criteria cr = session.createCriteria(StoreInternalIndentT.class).createAlias("Internal", "im")
									.createAlias("im.Hospital", "hospital").add(Restrictions.eq("hospital.Id", box.getInt("hospitalId"))).add(Restrictions.eq("Item.Id", Integer.parseInt((items1.get(i).toString()))))
									.add(Restrictions.eq("ItemStatus","a").ignoreCase())
									.setProjection(Projections.property("Id"));
				
				indentTList = cr.list();
				
				if(indentTList.size() > 0){
					for (Integer indentTId : indentTList) {
						StoreInternalIndentT indentT = (StoreInternalIndentT)hbt.load(StoreInternalIndentT.class, indentTId);
						indentT.setItemStatus("b");
						hbt.update(indentT);
						indentMId = indentT.getInternal().getId();
					}
				}
			}
			System.out.println("indentMId==="+indentMId);
			// ------------------------------------update institute reference No in department-Indent data-------------
			List<StoreInternalIndentM>departmentIndentList = new ArrayList<StoreInternalIndentM>();
			departmentIndentList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Status", "a"))
								.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))).add(Restrictions.idEq(indentMId)).list();
			
			if(departmentIndentList.size()>0){
				for(StoreInternalIndentM storeIndent : departmentIndentList){
					int storeIndentMId = storeIndent.getId();
					StoreInternalIndentM storeIndentM = (StoreInternalIndentM)hbt.load(StoreInternalIndentM.class,storeIndentMId);
					storeIndentM.setReferenceDemandNo(demandNo);
					hbt.update(storeIndentM);
				}
			}
			
			//---------------------------------------------------------------------------
			box.put("internalIndentId", newinternalIndentId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				// map = getItemDetailsForDepartmentIndentForNextRecord(box);
			} else {
				// map = getItemDetailsForDepartmentIndent(box);
			}
			List<StoreInternalIndentM> storeInternalIndentMList2 = session
					.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Hospital.Id", hospitalid))
					.add(Restrictions.eq("Id", newinternalIndentId)).list();
			box.put(DEMAND_NO, storeInternalIndentMList2.get(0).getDemandNo());
			tx.commit();
			flag = true;
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}

		map.put("newinternalIndentId", newinternalIndentId);
		return map;
	}

	@Override
	public Map<String, Object> showDepartmentPopupJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		Date fDate = new Date();
		Date tDate = new Date();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
			}

			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("header.Department", "dept")
					.createAlias("Item", "item")
					//.add(Restrictions.eq("header.Status", "a").ignoreCase())
					.add(Restrictions.eq("ItemStatus", "a").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.add(Restrictions.eq("item.Id", box.getInt("itemId")))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.groupProperty("dept.Id"))
									.add(Projections
											.groupProperty("dept.DepartmentName"))
									.add(Projections.groupProperty("PrevYearIndQty"))
									.add(Projections
											.groupProperty("PrevToPrevYearIndQty"))
									.add(Projections
											.groupProperty("PrevYearConsmQty"))
									.add(Projections.groupProperty("StockInHand"))
									.add(Projections.groupProperty("RequiredQty"))
									.add(Projections.groupProperty("AdditionalQty"))
									.add(Projections.sum("QtyRequest"))
									.add(Projections.groupProperty("Id"))
									.add(Projections
											.groupProperty("IncrementalPercentage"))
									.add(Projections
											.groupProperty("IncrementalQuantity")))
					.list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("itemId", box.getInt("itemId"));
		map.put("itemCode", box.getString("itemCode"));
		map.put("itemName", box.getString("itemName"));
		map.put("au", box.getString("au"));
		map.put("rowVal", box.getInt("rowVal"));
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> updateDepartmentDemandedQty(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector demandedQty = box.getVector("qtyRequest");
		for (int i = 0; i < storeInternalTId.size(); i++) {
			StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
			if (storeInternalTId.get(i) != null
					&& !storeInternalTId.get(i).equals("")) {
				int internalTId = Integer.parseInt(storeInternalTId.get(i)
						.toString());
				storeInternalIndentT = (StoreInternalIndentT) getHibernateTemplate()
						.load(StoreInternalIndentT.class, internalTId);
				if (demandedQty.get(i) != null
						&& !demandedQty.get(i).equals("")) {
					storeInternalIndentT.setQtyRequest(Integer
							.parseInt(demandedQty.get(i).toString()));
				}
				hbt.update(storeInternalIndentT);
			}
		}
		map.put("itemId", box.getInt("itemId"));
		map.put("itemCode", box.getString("itemCode"));
		map.put("itemName", box.getString("itemName"));
		map.put("au", box.getString("au"));
		map.put("rowVal", box.getInt("rowVal"));
		map = showDepartmentPopupJsp(box);
		return map;
	}

	@Override
	public Map<String, Object> updateInstituteDemandedQty(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector demandedQty = box.getVector("qtyRequest");
		for (int i = 0; i < storeInternalTId.size(); i++) {
			StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
			if (storeInternalTId.get(i) != null
					&& !storeInternalTId.get(i).equals("")) {
				int internalTId = Integer.parseInt(storeInternalTId.get(i)
						.toString());
				storeInternalIndentT = (StoreInternalIndentT) getHibernateTemplate()
						.load(StoreInternalIndentT.class, internalTId);
				if (demandedQty.get(i) != null
						&& !demandedQty.get(i).equals("")) {
					storeInternalIndentT.setQtyRequest(Integer
							.parseInt(demandedQty.get(i).toString()));
				}
				hbt.update(storeInternalIndentT);
			}
		}
		map.put("itemId", box.getInt("itemId"));
		map.put("itemCode", box.getString("itemCode"));
		map.put("itemName", box.getString("itemName"));
		map.put("au", box.getString("au"));
		map.put("rowVal", box.getInt("rowVal"));
		map = showInstituteIndentPopupJsp(box);
		return map;
	}

	@Override
	public Map<String, Object> showDistrictAnnualIndentCreationJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> instituteForIndentNoList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasHospital> instituteList = new ArrayList<MasHospital>();
		List<MasDistrict> districtList = new ArrayList<MasDistrict>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";
		instituteList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		districtList = session.createCriteria(MasDistrict.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.isNull("Department.Id"))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();

		instituteForIndentNoList = session
				.createCriteria(MasHospital.class, "mh")
				.add(Restrictions.eq("mh.Status", "Y").ignoreCase())
				.add(Restrictions.eq("mh.Id", box.getInt("hospitalId"))).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("Item", "item")
					.createAlias("item.ItemConversion", "au")
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
				//	.add(Restrictions.eq("header.Status", "m").ignoreCase())
					.add(Restrictions.eq("ItemStatus", "m").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.sum("QtyRequest"))
									.add(Projections.groupProperty("item.Id"))
									.add(Projections
											.groupProperty("item.PvmsNo"))
									.add(Projections
											.groupProperty("item.Nomenclature"))
									.add(Projections
											.groupProperty("au.ItemUnitName"))
									.add(Projections.sum("PrevYearIndQty"))
									.add(Projections
											.sum("PrevToPrevYearIndQty"))
									.add(Projections.sum("PrevYearConsmQty"))
									.add(Projections.sum("StockInHand"))
									.add(Projections.sum("PendingIndentQty"))
								//	.add(Projections.groupProperty("Id"))
								//	.add(Projections.groupProperty("header.Id"))
									)
					.list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String hospitalCode = "";
		if (instituteForIndentNoList.size() > 0) {
			for (MasHospital masHospital : instituteForIndentNoList) {
				hospitalCode = "Dis_IND_" + masHospital.getHospitalCode();
			}
		}
		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptType", hospitalCode);

		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList.get(0);
			if(storeFyDocumentNo.getDistIndentNo() != null && !storeFyDocumentNo.getDistIndentNo().equals("")){
				demandNo = ("" + storeFyDocumentNo.getDistIndentNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				maxMap.put("no", demandNo);
				demandNo = getMaxNoByDeptCode(maxMap);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				// finalDemandNo = getMaxNo(demandNo);
				map.put("demandNoList", demandNoList);
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalDemandNo", finalDemandNo);
			}else{
				maxMap.put("no", demandNo);
				// demandNo =getMaxNoByDeptCode(maxMap);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				// finalDemandNo = getMaxNo(demandNo);
				map.put("finalDemandNo", finalDemandNo);
			}
		} else {
			// /*
			maxMap.put("no", demandNo);
			// demandNo =getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("finalDemandNo", finalDemandNo);
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("instituteList", instituteList);
		map.put("districtList", districtList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> submitDistrictWiseIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector year1IndentQty = box.getVector("year1IndentQty");
		Vector year2IndentQty = box.getVector("year2IndentQty");
		Vector requiredQty = box.getVector("requiredQty");
		Vector previousYearConsumption = box
				.getVector("previousYearConsumption");
		Vector additionalQty = box.getVector("additionalQty");
		Vector remarks = box.getVector("remarks");
		Vector stock = box.getVector("stock");
		Vector leadTime = box.getVector("leadTime");
		Vector consumptionInLeadTime = box.getVector("consumptionInLeadTime");
		Vector incrementalPercentage = box.getVector("incrementalPercentage");
		Vector incrementalQty = box.getVector("incrementalQty");
		Vector pendingIndentQty = box.getVector("pendingIndentQty");
		Vector storeInternalTId = box.getVector("storeInternalTId");

		// int deptId = box.getInt(FROM_WARD);
		// int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);

		int hospitalid = 0;
		hospitalid = box.getInt("hospitalId");

		StoreInternalIndentM storeInternalIndentM = null;
		// StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Code for Duplicate Indent No Date 21 Jan 2011
			 */
			List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
			storeInternalIndentMForDemandNoList = session
					.createCriteria(StoreInternalIndentM.class, "siim")
					.add(Restrictions.eq("siim.Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("siim.DemandNo", demandNo)).list();

			StoreInternalIndentM newMObj = new StoreInternalIndentM();
			if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee1 = new MasEmployee();
				masEmployee1.setId(box
						.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setApprovedBy(masEmployee1);
			}

			if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box
						.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setRequestedBy(masEmployee2);
			}
			/*
			 * int storeDepartmentId = 0; if (box.get("storeDepartmentId") !=
			 * null && !box.get("storeDepartmentId").equals("")) {
			 * storeDepartmentId = box.getInt("storeDepartmentId");
			 * 
			 * } if (storeDepartmentId != 0) { MasDepartment masdepartment1 =
			 * new MasDepartment(); masdepartment1.setId(storeDepartmentId);
			 * newMObj.setStoreDepartment(masdepartment1); }
			 */
			newMObj.setDemandNo(demandNo);
			newMObj.setIndentType(box.getString(TYPE_OF_INDENT));
			Users users = new Users();
			users.setId(box.getInt(USER_ID));

			newMObj.setLastChgBy(users);

			newMObj.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			newMObj.setStatus("d");
			newMObj.setDmo_Remarks(box.getString("dmoRemarks"));
			/*
			 * IndentFlag=ALL means All Item Except Laundry Item IndentFlag=LDN
			 * means Indent Only Laundry Item
			 */
			newMObj.setIndentFlag("ALL");
			// MasDepartment fromDept = new MasDepartment();
			// fromDept.setId(box.getInt(FROM_WARD));
			// newMObj.setDepartment(fromDept);

			MasDepartment toDept = new MasDepartment();
			toDept.setId(box.getInt("fromWard"));
			newMObj.setToStore(toDept);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			newMObj.setHospital(masHospital);

			MasDistrict masDistrict = new MasDistrict();
			masDistrict.setId(box.getInt("districtId"));
			newMObj.setDistrict(masDistrict);

			newMObj.setDemandDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DEMAND_DATE)));
			hbt.save(newMObj);
			hbt.refresh(newMObj);
			

			// Auto-Increment No for demand No of Department Indent
			/*
			 * Synchronization code by ujjwal to generate the correct demandNo
			 * on 04082014 at silvassa
			 */
			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.isNull("Department.Id"))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId"))).list();
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					storeFyDocumentNo.setDistIndentNo(demandNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.saveOrUpdate(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepartment(null);
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					storeFyDocumentNo.setInstIndentNo("0");
					storeFyDocumentNo.setDistIndentNo(demandNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.save(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);

				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//
			int indentMId = 0;
			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get(FROM_WARD)
							+ " and hospital_id = "
							+ hospitalid + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}

					if (year1IndentQty.get(i) != null
							&& !year1IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT.setPrevYearIndQty(new BigDecimal(
								year1IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevYearIndQty(new BigDecimal(0));
					}
					if (year2IndentQty.get(i) != null
							&& !year2IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(
										year2IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(0));
					}
					if (previousYearConsumption.get(i) != null
							&& !previousYearConsumption.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(
										previousYearConsumption.get(i)
												.toString()));
					} else {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(0));
					}
					if (leadTime.get(i) != null
							&& !leadTime.get(i).toString().equals("")) {
						storeInternalIndentT.setLeadTime(Integer
								.parseInt(leadTime.get(i).toString()));
					} else {
						storeInternalIndentT.setLeadTime(0);
					}
					if (consumptionInLeadTime.get(i) != null
							&& !consumptionInLeadTime.get(i).toString()
									.equals("")) {
						storeInternalIndentT.setConsInLeadTime(new BigDecimal(
								consumptionInLeadTime.get(i).toString()));
					} else {
						storeInternalIndentT
								.setConsInLeadTime(new BigDecimal(0));
					}
					if (incrementalPercentage.get(i) != null
							&& !incrementalPercentage.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(
										incrementalPercentage.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(0));
					}
					if (incrementalQty.get(i) != null
							&& !incrementalQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(
										incrementalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(0));
					}
					if (pendingIndentQty.get(i) != null
							&& !pendingIndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(
										pendingIndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(0));
					}
					if (requiredQty.get(i) != null
							&& !requiredQty.get(i).toString().equals("")) {
						storeInternalIndentT.setRequiredQty(new BigDecimal(
								requiredQty.get(i).toString()));
					} else {
						storeInternalIndentT.setRequiredQty(new BigDecimal(0));
					}
					if (additionalQty.get(i) != null
							&& !additionalQty.get(i).toString().equals("")) {
						storeInternalIndentT.setAdditionalQty(new BigDecimal(
								additionalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setAdditionalQty(new BigDecimal(0));
					}
					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeInternalIndentT.setRemarks("");
					}
					storeInternalIndentT.setItemStatus("d");

					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */
					List<Integer> indentTList = new ArrayList<Integer>();
					Criteria cr = session.createCriteria(StoreInternalIndentT.class).createAlias("Internal", "im").add(Restrictions.eq("Item.Id", Integer.parseInt((items1.get(i).toString()))))
							.add(Restrictions.eq("ItemStatus","m").ignoreCase())
							.setProjection(Projections.property("Id"));
					
					indentTList = cr.list();
					if(indentTList.size() > 0){
						for (Integer indentTId : indentTList) {
							StoreInternalIndentT indentT = (StoreInternalIndentT)hbt.load(StoreInternalIndentT.class, indentTId);
							indentT.setItemStatus("g");
							hbt.update(indentT);
							indentMId = indentT.getInternal().getId();
						}
					}
				}
			}
			System.out.println("indentMId==="+indentMId);
			// ------------------------------------update district reference No in institute-Indent data-------------
						List<StoreInternalIndentM>departmentIndentList = new ArrayList<StoreInternalIndentM>();
						departmentIndentList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Status", "m"))
													.add(Restrictions.idEq(indentMId)).list();
						if(departmentIndentList.size()>0){
							for(StoreInternalIndentM storeIndent : departmentIndentList){
								int storeIndentMId = storeIndent.getId();
								StoreInternalIndentM storeIndentM = (StoreInternalIndentM)hbt.load(StoreInternalIndentM.class,storeIndentMId);
								storeIndentM.setReferenceDemandNo(demandNo);
								hbt.update(storeIndentM);
							}
						}
			// ------------------------------------
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}

		return map;
	}

	@Override
	public Map<String, Object> showPendingListForApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBalanceM> storeBalanceMList = new ArrayList<StoreBalanceM>();
		/*List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();*/
		Session session = (Session) getSession();
		storeBalanceMList = session.createCriteria(StoreBalanceM.class)
				.add(Restrictions.eq("Status", "P").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
	/*	approvedByEmployeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();*/
		map.put("storeBalanceMList", storeBalanceMList);
		/*map.put("approvedByEmployeeList", approvedByEmployeeList);*/
		return map;
	}

	@Override
	public Map<String, Object> showPendingIndentApproval(Box box) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptType = "";
		/*
		 * if (dataMap.get("deptId") != null) { deptId = Integer.parseInt("" +
		 * dataMap.get("deptId")); } if (dataMap.get("hospitalId") != null) {
		 * hospitalId = Integer.parseInt("" + dataMap.get("hospitalId")); } if
		 * (dataMap.get("userName") != null) { userName = ("" +
		 * dataMap.get("userName")); } if (dataMap.get("deptType") != null) {
		 * deptType = ("" + dataMap.get("deptType")); }
		 */

		Date fromDate = new Date();
		Date toDate = new Date();

		if (!box.getString(RequestConstants.FROM_DATE).equals(""))
			fromDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.FROM_DATE));
		if (!box.getString(RequestConstants.TO_DATE).equals(""))
			toDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.TO_DATE));

		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();
		// List<StoreFyDocumentNo> storeFyDocumentNoList = new
		// ArrayList<StoreFyDocumentNo>();
		List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();

		/*
		 * qry =
		 * "select * from store_internal_indent_m  as sim where sim.department_id  ="
		 * +department_id +"and sim.to_store =" +to_store +"and sim.status ="
		 * +status +"sim.hospital_id =" +hospital_id +"demand_date between " +
		 * "2015/04/07" + "and" + "2015/04/07" +
		 * "order by sim.demand_date desc";
		 */
		/*
		 * Date cd=new Date(); SimpleDateFormat sdf=new
		 * SimpleDateFormat("yyyy/MM/dd");
		 * System.out.println("=="+cd.getYear()+"/"
		 * +cd.getMonth()+"/"+cd.getDay()); Date cuDate=new Date(); try{
		 * cuDate=sdf.parse("2015/04/07"); }catch(Exception e){}
		 */
		storeInternalIndentPendingList = session
				.createCriteria(StoreInternalIndentM.class)
				.setProjection(
						Projections.projectionList()
								.add(Projections.property("Id"))
								.add(Projections.property("DemandNo"))
								.add(Projections.property("DemandDate"))
								.add(Projections.property("IndentType"))
								.add(Projections.property("Department")))
				.add(Restrictions.eq("Status", "Intra Indent Waiting")
						.ignoreCase())
				.add(Restrictions.between("DemandDate", fromDate, toDate))
				.list();
		List<Object[]> employees = new ArrayList<Object[]>();
		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";

		/*
		 * employeeList = getHibernateTemplate() .find(
		 * "from jkt.hms.masters.business.MasEmployee where Status='Y' and Hospital.Id = '"
		 * +hospitalId+"' order by FirstName asc");
		 */

		/*
		 * Query q = session .createQuery(
		 * "select e.Id, e.FirstName,e.LastName from MasEmployee e where Status='Y' and Hospital.Id = '"
		 * +hospitalId+"' order by FirstName asc");
		 */
		/*
		 * employees = (List<Object[]>) q.list();
		 * 
		 * employeeDeptByList = getHibernateTemplate().find(
		 * "from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
		 * + deptId + " and emp.Status='Y' and Hospital.Id = '"+hospitalId+
		 * "' order by emp.FirstName asc");
		 */

		String previousDate = HMSUtil.getPrevDate(Integer.parseInt(properties
				.getProperty("store.pending_from_last_days")));
		Map<String, Object> mapDate = new HashMap<String, Object>();
		mapDate = HMSUtil.getCurrentDateAndTime();
		String currentDate = "";
		if (mapDate.get("currentDate") != null) {
			currentDate = (String) mapDate.get("currentDate");
		}

		String qry = "";

		qry = "select distinct sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,"
				+ "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
				+ " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,"
				+ " mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by "
				+ " and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="
				+ deptId
				+ " and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
				+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
				+ "' and '"
				+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
				+ "' and sim.hospital_id = '"
				+ hospitalId
				+ "' order by sim.id desc";
		int to_store = 24;
		int department_id = 35;
		String status = "o";
		int hospital_id = 1;

		/*
		 * String qry =
		 * "SELECT sum(closing_stock) FROM store_item_batch_stock where item_id='"
		 * + itemId + "' and department_id='" + deptId + "';";
		 */
		//
		// storeInternalIndentPendingList = session.createSQLQuery(qry).list();
		map.put("storeInternalIndentPendingList",
				storeInternalIndentPendingList);

		map.put("deptName", deptName);
		map.put("storeInternalIndentTList", storeInternalIndentTList);

		map.put("employeeList", employeeList);
		map.put("employeeDeptByList", employeeDeptByList);
		map.put("max", max);

		map.put("storeSetup", storeSetup);
		map.put("employees", employees);
		return map;
	}

	@Override
	public Map<String, Object> getDetailsPendingIndentApproval(Box box) {
		Session session = (Session) getSession();

		int indentId = 0;
		indentId = (Integer.parseInt(box.getString("id")));

		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptType = "";

		Date fromDate = new Date();
		Date toDate = new Date();
		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();

		storeInternalPendingIndentList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Id", indentId)).list();
		storeInternalIndentTList = session
				.createCriteria(StoreInternalIndentT.class)
				.createAlias("Internal", "internal")
				.add(Restrictions.eq("internal.Id", indentId)).list();

		map.put("storeInternalPendingIndentList",
				storeInternalPendingIndentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		// map.put("deptName", deptName);
		// map.put("storeInternalIndentTList", storeInternalIndentTList);

		// map.put("employeeList", employeeList);
		// map.put("employeeDeptByList", employeeDeptByList);
		// map.put("max", max);

		// map.put("storeSetup", storeSetup);
		// map.put("employees", employees);
		return map;
	}

	@Override
	public Map<String, Object> displayOpeningBalanceData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBalanceT> storeBalanceTList = new ArrayList<StoreBalanceT>();
		List<MasEmployee> approvedByEmployeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		storeBalanceTList = session
				.createCriteria(StoreBalanceT.class)
				.createAlias("StoreBalanceM", "header")
				.add(Restrictions.eq("header.Id", box.getInt("storeBalanceMId")))
				.list();
		approvedByEmployeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		map.put("storeBalanceTList", storeBalanceTList);
		map.put("approvedByEmployeeList", approvedByEmployeeList);
		return map;
	}

	@Override
	public Map<String, Object> submitOpeningBalanceEntryApproval(Box box) {
		Session session=(Session)getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		final Map<String,Object> stockMapForLeanServer=new HashMap<String,Object>();
		List<StoreItemBatchStock> storeItemBatchStockList = new ArrayList<StoreItemBatchStock>();
		//Transaction	tx = session.beginTransaction();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeBalanceTId = box.getVector("storeBalanceTId");
		Vector qty = box.getVector("qty");
		Vector amount = box.getVector("amount");
		int hospitalId=box.getInt("hospitalId");
		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		StoreBalanceM storeBalanceM = (StoreBalanceM) getHibernateTemplate()
				.load(StoreBalanceM.class, box.getInt("storeBalanceMId"));
		if (box.getString("flag").equals("Approved")) {
			storeBalanceM.setStatus("a");
		} else if (box.getString("flag").equals("Reject")) {
			storeBalanceM.setStatus("r");
		}
		storeBalanceM.setApprovalRemarks(box.getString("approvalRemarks"));
		hbt.update(storeBalanceM);
		stockMapForLeanServer.put("storeBalanceM", storeBalanceM);
		List<StoreItemBatchStock> storeItemBatchStocksList=new ArrayList<StoreItemBatchStock>();
		List<StoreBalanceT> storeBalanceTList=new ArrayList<StoreBalanceT>();
	if(box.getString("flag").equals("Approved")){
		for (int i = 0; i < storeBalanceTId.size(); i++) {
			StoreBalanceT storeBalanceTObj = new StoreBalanceT();
			if (storeBalanceTId.get(i) != null
					&& !storeBalanceTId.get(i).equals("")) {
				int balanceTId = Integer.parseInt(storeBalanceTId.get(i)
						.toString());
				storeBalanceTObj = (StoreBalanceT) getHibernateTemplate().load(
						StoreBalanceT.class, balanceTId);
				if (qty.get(i) != null && !qty.get(i).equals("")) {
					storeBalanceTObj.setQty(new BigDecimal(qty.get(i).toString()));
				}
				if (amount.get(i) != null && !amount.get(i).equals("")) {
					storeBalanceTObj.setAmount(new BigDecimal(qty.get(i)
							.toString()));
				}
				hbt.update(storeBalanceTObj);
				storeBalanceTList.add(storeBalanceTObj);
			
			//------------------update item store_item_batch_stock-----------------------------
			StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
			BigDecimal cost_price = storeBalanceTObj.getUnitRate();
			String batch_no = storeBalanceTObj.getBatchNo();
			
			int item_id = storeBalanceTObj.getItem().getId();
			storeItemBatchStockList = hbt
					.find("from jkt.hms.masters.business.StoreItemBatchStock as inp where inp.Item.Id = "
							+ item_id
							+ " and inp.Department.Id= "
							+ box.getInt("deptId")
							+ " and inp.Hospital.Id = "
							+ box.getInt("hospitalId")
							+ " and inp.BatchNo ='"
							+ batch_no + "' ");
			
			List<MasStoreItem>itemList=new ArrayList<MasStoreItem>();
			itemList=session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Id", item_id)).list();
			int converstionId=0;
			
			for(MasStoreItem item:itemList){
				converstionId=item.getItemConversion().getId();
			}
			//--------------------------commented by anamika item conversion on 26th aug-------------------------
			/*List<MasStoreItemConversion>itemConversionList=new ArrayList<MasStoreItemConversion>();
			itemConversionList=session.createCriteria(MasStoreItemConversion.class).add(Restrictions.eq("Id", converstionId)).list();
			int conversionFactor=0;
			
			for(MasStoreItemConversion conv:itemConversionList){
				conversionFactor=conv.getConversionFactor2();
			}*/
			
			
			if (storeItemBatchStockList != null && storeItemBatchStockList.size() > 0) {
				int id = storeItemBatchStockList.get(0).getId();

				storeItemBatchStock = (StoreItemBatchStock) getHibernateTemplate()
						.load(StoreItemBatchStock.class, id);

				storeItemBatchStock.setExpiryDate(storeBalanceTObj.getExpiryDate());

				BigDecimal a = null;
				BigDecimal b = null;
				BigDecimal c = null;
	//--------------------------commented by anamika item conversion on 26th aug-------------------------
				//if(conversionFactor!=0){
								//a = storeBalanceTObj.getQty().multiply(new BigDecimal(""+conversionFactor));
				//}else{
					a = storeBalanceTObj.getQty();
				//}
				b = storeItemBatchStock.getClosingStock();

				c = a.add(b);

				storeItemBatchStock.setClosingStock(c);

				/*
				 * This is added BY Mukesh Narayan SIngh Date 24 Feb
				 * 2011 Stock Opening Balance Enty Update
				 */
				BigDecimal stockOpeningBalanceQty = new BigDecimal(0);
				BigDecimal stockOpeningBalanceEntryQty = new BigDecimal(
						0);
				BigDecimal stockOpeningBalanceQtyTotal = new BigDecimal(
						0);
				if (storeItemBatchStock.getOpeningBalanceQty() != null) {
					stockOpeningBalanceEntryQty = storeBalanceTObj.getQty();
					stockOpeningBalanceQty = storeItemBatchStock.getOpeningBalanceQty();
					
					//--------------------------commented by anamika item conversion on 26th aug-------------------------			
					/*if(conversionFactor!=0){
						stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
								.add(stockOpeningBalanceEntryQty.multiply(new BigDecimal(""+conversionFactor)));
						}else{*/
							/*stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
									.add(stockOpeningBalanceEntryQty);*/
						//}
					
					
					
					stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
							.add(stockOpeningBalanceEntryQty);
					storeItemBatchStock
							.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
				} else {
					if (storeBalanceTObj.getQty() != null) {
						stockOpeningBalanceEntryQty = storeBalanceTObj
								.getQty();
					} else {
						stockOpeningBalanceEntryQty = new BigDecimal(0);
					}
					
					//--------------------------commented by anamika item conversion on 26th aug-------------------------
					/*if(conversionFactor!=0){
					stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
							.add(stockOpeningBalanceEntryQty.multiply(new BigDecimal(""+conversionFactor)));
					}else{*/
						stockOpeningBalanceQtyTotal = stockOpeningBalanceQty
								.add(stockOpeningBalanceEntryQty);
					//}
					storeItemBatchStock
							.setOpeningBalanceQty(stockOpeningBalanceQtyTotal);
				}
				if (storeBalanceTObj.getDispencingPrice() != null) {
					storeItemBatchStock
							.setDispencingPrice(storeBalanceTObj
									.getDispencingPrice());
				} else {
					storeItemBatchStock
							.setDispencingPrice(new BigDecimal(0));
				}
				if (storeBalanceTObj.getMrp() != null) {
					storeItemBatchStock.setMrp(storeBalanceTObj
							.getMrp());
				} else {
					storeItemBatchStock
							.setDispencingPrice(new BigDecimal(0));
				}

				storeItemBatchStock
						.setOpeningBalanceDate(storeBalanceTObj
								.getStoreBalanceM().getBalanceDate());

				storeItemBatchStock.setCostPrice(storeBalanceTObj
						.getUnitRate());

				hbt.update(storeItemBatchStock);
				storeItemBatchStocksList.add(storeItemBatchStock);
			} else {
				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				storeItemBatchStock.setDepartment(department);
				MasHospital masHospital = new MasHospital();
				masHospital.setId(box.getInt("hospitalId"));
				storeItemBatchStock.setHospital(masHospital);
				// storeItemBatchStock.setDepartment(storeBalanceTObj
				// .getStoreBalanceM().getDepartment());
				storeItemBatchStock.setItem(storeBalanceTObj.getItem());
				storeItemBatchStock.setBatchNo(storeBalanceTObj
						.getBatchNo());
				// storeItemBatchStock.setBrand(storeBalanceTObj.getBrand());
				storeItemBatchStock.setCostPrice(storeBalanceTObj
						.getUnitRate());
				if (storeBalanceTObj.getDispencingPrice() != null) {
					storeItemBatchStock
							.setDispencingPrice(storeBalanceTObj
									.getDispencingPrice());
				}
				if (storeBalanceTObj.getMrp() != null) {
					storeItemBatchStock.setMrp(storeBalanceTObj
							.getMrp());
				}
				storeItemBatchStock.setExpiryDate(storeBalanceTObj
						.getExpiryDate());
				storeItemBatchStock.setManufactureDate(storeBalanceTObj.getManufactureDate());
				if(storeBalanceTObj.getManufacturer() != null){
					int manufactureId =storeBalanceTObj.getManufacturer().getId();
					MasManufacturer masManufacturer = new MasManufacturer();
					masManufacturer.setId(manufactureId);
					storeItemBatchStock.setManufacturer(masManufacturer);
				}
				//--------------------------commented by anamika item conversion on 26th aug-------------------------
				/*if(conversionFactor!=0){
				storeItemBatchStock.setClosingStock(storeBalanceTObj
						.getQty().multiply(new BigDecimal(""+conversionFactor)));
				}else{*/
					storeItemBatchStock.setClosingStock(storeBalanceTObj
							.getQty());
				//}
				storeItemBatchStock.setOpeningBalanceDate(HMSUtil.convertStringTypeDateToDateType(date));
				/*if(conversionFactor!=0){
				storeItemBatchStock.setOpeningBalanceQty(storeBalanceTObj.getQty().multiply(new BigDecimal(""+conversionFactor)));
				}else{*/
				storeItemBatchStock.setOpeningBalanceQty(storeBalanceTObj.getQty());	
				//}
				Users user = new Users();
				user.setId(box.getInt("userId"));
				storeItemBatchStock.setLastChgBy(user);
				storeItemBatchStock.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(date));
				hbt.save(storeItemBatchStock);
				storeItemBatchStocksList.add(storeItemBatchStock);
			}
		}
	}	
		stockMapForLeanServer.put("storeItemBatchStocksList", storeItemBatchStocksList);
		stockMapForLeanServer.put("storeBalanceTList", storeBalanceTList);
	//-------------------------------------------------------------------------------------------------------
		}
		flag = true;
		map.put("flag", flag);
		final MasHospital  masHospital=(MasHospital)session.get(MasHospital.class, hospitalId); 
		
		//#13- Tech Debt: Comment out the code those are related to Lean server
		/*new Thread(){
			public void run(){
				if(masHospital!=null && masHospital.getServerIp()!=null && masHospital.getServerPort()!=null){
					//patientMap.put("hospital", masHospital);
					//String patientRegMessage=savePatientDataForRegistrationToCentralServer(patientMap);
				} 
				if(masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){

					//patientMap.put("hospital", masHospital);
					List<StoreItemBatchStock> storeItemBatchStocks=(List<StoreItemBatchStock>)stockMapForLeanServer.get("storeItemBatchStocksList");
					 Map<String,Object> stockMapForLean=new HashMap<String,Object>();
					for(StoreItemBatchStock storeItemBatchStock:storeItemBatchStocks){
						stockMapForLean.put("stockDataList", storeItemBatchStock);
						//stockMapForLean.put("storeFyId", stockMapForLeanServer.get("storeFyId"));
						//stockMapForLean.put("issueNo", stockMapForLeanServer.get("issueNo"));
						stockMapForLean.put("hospital",masHospital);
						String patientRegMessage=saveStockToLeanServer(stockMapForLean,masHospital);
						if(!"success".equalsIgnoreCase(patientRegMessage)){
							stockMapForLean.put("status","N");
						 saveStockToLeanServer(stockMapForLean);
						}else{
							stockMapForLean.put("status","Y");
						 saveStockToLeanServer(stockMapForLean);
						}
					}
					
				}
			}
			
		}.start();*/
		
		//tx.rollback();
		return map;
	}

	@Override
	public Map<String, Object> getItemListForAnnualDepartmentIndent(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		return map;
	}

	@Override
	public Map<String, Object> addAnnualIndentAdminSetup(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean successfullyAdded = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		String message = "";
		try {
			List<StoreAnnualIndentSetup> storeAnnualIndentSetupList = new ArrayList<StoreAnnualIndentSetup>();
			storeAnnualIndentSetupList = session
					.createCriteria(StoreAnnualIndentSetup.class)
					.add(Restrictions.eq("FinancialYear.Id",
							box.getInt(FINANCIAL_ID))).list();

			if (storeAnnualIndentSetupList.size() == 0) {
				StoreAnnualIndentSetup annualIndentSetup = new StoreAnnualIndentSetup();

				MasStoreFinancial f = new MasStoreFinancial();
				f.setId(box.getInt(FINANCIAL_ID));
				annualIndentSetup.setFinancialYear(f);

				annualIndentSetup.setStatus("y");

				annualIndentSetup.setFromDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(FROM_DATE)));

				annualIndentSetup
						.setToDate(HMSUtil.convertStringTypeDateToDateType(box
								.getString(TO_DATE)));

				Users users = new Users();
				users.setId(box.getInt(USER_ID));
				annualIndentSetup.setLastChgBy(users);

				annualIndentSetup.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				annualIndentSetup.setLastChgTime(box.getString(CHANGED_TIME));
				hbt.save(annualIndentSetup);
				successfullyAdded = true;
			} else {
				message = "Financial Year already exist.";
			}

		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map = showAnnualIndentAdminSetupJsp(box.getInt(HOSPITAL_ID));
		map.put("successfullyAdded", successfullyAdded);
		map.put("message", message);
		return map;
	}

	@Override
	public boolean deleteAnnualIndentAdminSetup(Box box) {
		boolean dataDeleted = false;
		Date currentDate = new Date();
		String currentTime = "";
		currentTime = (String) HMSUtil.getCurrentDateAndTime().get(
				"currentTime");
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreAnnualIndentSetup annualIndentSetup = (StoreAnnualIndentSetup) hbt
				.load(StoreAnnualIndentSetup.class, box.getInt(COMMON_ID));

		if (!box.getString("flag").equals("")) {
			String flag = box.getString("flag");
			if (flag.equals("InActivate")) {
				annualIndentSetup.setStatus("n");
				dataDeleted = true;
			} else if (flag.equals("Activate")) {
				annualIndentSetup.setStatus("y");
				dataDeleted = true;
			}
		}
		Users users = new Users();
		users.setId(box.getInt(USER_ID));
		annualIndentSetup.setLastChgBy(users);

		annualIndentSetup.setLastChgDate(currentDate);
		annualIndentSetup.setLastChgTime(currentTime);
		hbt.update(annualIndentSetup);
		return dataDeleted;
	}

	@Override
	public Map<String, Object> searchAnnualIndentAdminSetup(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreAnnualIndentSetup> storeAnnualIndentSetupList = new ArrayList<StoreAnnualIndentSetup>();
		List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
		Session session = getSession();
		Criteria crit = null;
		crit = session.createCriteria(StoreAnnualIndentSetup.class);
		if (box.getInt(FINANCIAL_ID) != 0) {
			crit = crit.add(Restrictions.eq("FinancialYear.Id",
					box.getInt(FINANCIAL_ID)));
		}

		storeAnnualIndentSetupList = crit.list();
		masStoreFinancialList = session.createCriteria(MasStoreFinancial.class)
				.add(Restrictions.eq("Status", "y")).list();

		map.put("masStoreFinancialList", masStoreFinancialList);
		map.put("storeAnnualIndentSetupList", storeAnnualIndentSetupList);
		return map;
	}

	@Override
	public Map<String, Object> showAnnualIndentAdminSetupJsp(int hospitalId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasStoreFinancial> masStoreFinancialList = new ArrayList<MasStoreFinancial>();
		List<StoreAnnualIndentSetup> storeAnnualIndentSetupList = new ArrayList<StoreAnnualIndentSetup>();
		masStoreFinancialList = session.createCriteria(MasStoreFinancial.class).list();
		storeAnnualIndentSetupList = session.createCriteria(
				StoreAnnualIndentSetup.class).list();
		map.put("masStoreFinancialList", masStoreFinancialList);
		map.put("storeAnnualIndentSetupList", storeAnnualIndentSetupList);
		return map;
	}

	@Override
	public Map<String, Object> updateAnnualIndentAdminSetup(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean successfullyAdded = false;
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		String message = "";
		try {
			List<StoreAnnualIndentSetup> storeAnnualIndentSetupList = new ArrayList<StoreAnnualIndentSetup>();
			storeAnnualIndentSetupList = session
					.createCriteria(StoreAnnualIndentSetup.class)
					.add(Restrictions.ne("Id", box.getInt(COMMON_ID)))
					.add(Restrictions.eq("FinancialYear.Id",
							box.getInt(FINANCIAL_ID))).list();
			if (storeAnnualIndentSetupList.size() == 0) {
				StoreAnnualIndentSetup annualIndentSetup = (StoreAnnualIndentSetup) hbt
						.load(StoreAnnualIndentSetup.class,
								box.getInt(COMMON_ID));

				MasStoreFinancial f = new MasStoreFinancial();
				f.setId(box.getInt(FINANCIAL_ID));
				annualIndentSetup.setFinancialYear(f);

				annualIndentSetup.setStatus("y");

				annualIndentSetup.setFromDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(FROM_DATE)));

				annualIndentSetup
						.setToDate(HMSUtil.convertStringTypeDateToDateType(box
								.getString(TO_DATE)));

				Users users = new Users();
				users.setId(box.getInt(USER_ID));
				annualIndentSetup.setLastChgBy(users);

				annualIndentSetup.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				annualIndentSetup.setLastChgTime(box.getString(CHANGED_TIME));
				hbt.update(annualIndentSetup);
				successfullyAdded = true;
			} else {
				message = "Financial Year  already exists.";

			}
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map = showAnnualIndentAdminSetupJsp(box.getInt(HOSPITAL_ID));
		map.put("successfullyAdded", successfullyAdded);
		map.put("message", message);
		return map;
	}

	@Override
	public Map<String, Object> showStateAnnualIndentCreationJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> instituteForIndentNoList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		List<Object[]> storeItemBatchStockList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.isNull("Department.Id"))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();

		instituteForIndentNoList = session
				.createCriteria(MasHospital.class, "mh")
				.add(Restrictions.eq("mh.Status", "Y").ignoreCase())
				.add(Restrictions.eq("mh.Id", box.getInt("hospitalId"))).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("Item", "item")
					.createAlias("item.ItemConversion", "au")
				//	.add(Restrictions.eq("header.Status", "p").ignoreCase())
					 .add(Restrictions.eq("ItemStatus", "p").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.sum("QtyRequest"))
									.add(Projections.groupProperty("item.Id"))
									.add(Projections
											.groupProperty("item.PvmsNo"))
									.add(Projections
											.groupProperty("item.Nomenclature"))
									.add(Projections
											.groupProperty("au.ItemUnitName"))
									.add(Projections.sum("PrevYearIndQty"))
									.add(Projections
											.sum("PrevToPrevYearIndQty"))
									.add(Projections.sum("PrevYearConsmQty"))
									.add(Projections.sum("StockInHand"))
									.add(Projections.sum("PendingIndentQty"))
									/*.add(Projections.groupProperty("Id"))
									.add(Projections.groupProperty("header.Id"))*/
					).list();
			/*
			 * int itemId = 0; List<Integer>itemIdList = new
			 * ArrayList<Integer>(); if(storeInternalIndentTList.size()>0){
			 * for(Object[] obj :storeInternalIndentTList){ itemId
			 * =(Integer)obj[1]; itemIdList.add(itemId); } }
			 * storeItemBatchStockList =
			 * session.createCriteria(StoreItemBatchStock
			 * .class).createAlias("Item","item").add(Restrictions.in("item.Id",
			 * itemIdList)) .add(Restrictions.eq("Hospital.Id",
			 * box.getInt("hospitalId"
			 * ))).setProjection(Projections.projectionList()
			 * .add(Projections.sum
			 * ("ClosingStock")).add(Projections.groupProperty
			 * ("item.Id"))).list();
			 */

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String hospitalCode = "";
		if (instituteForIndentNoList.size() > 0) {
			for (MasHospital masHospital : instituteForIndentNoList) {
				hospitalCode = "STATE_IND_" + masHospital.getHospitalCode();
			}
		}
		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptType", hospitalCode);

		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList.get(0);
			if(storeFyDocumentNo.getStateIndentNo() != null && !storeFyDocumentNo.getStateIndentNo().equals("")){
				demandNo = ("" + storeFyDocumentNo.getStateIndentNo());
				storeFyDocumentNoId = storeFyDocumentNo.getId();
				maxMap.put("no", demandNo);
				demandNo = getMaxNoByDeptCode(maxMap);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				// finalDemandNo = getMaxNo(demandNo);
				map.put("demandNoList", demandNoList);
				map.put("storeFyDocumentNoId", storeFyDocumentNoId);
				map.put("finalDemandNo", finalDemandNo);
			}else{
				maxMap.put("no", demandNo);
				// demandNo =getMaxNoByDeptCode(maxMap);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				// finalDemandNo = getMaxNo(demandNo);
				map.put("finalDemandNo", finalDemandNo);
			}
		} else {
			// /*
			maxMap.put("no", demandNo);
			// demandNo =getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("finalDemandNo", finalDemandNo);
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("storeItemBatchStockList", storeItemBatchStockList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> submitStateWiseIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector year1IndentQty = box.getVector("year1IndentQty");
		Vector year2IndentQty = box.getVector("year2IndentQty");
		Vector requiredQty = box.getVector("requiredQty");
		Vector previousYearConsumption = box
				.getVector("previousYearConsumption");
		Vector additionalQty = box.getVector("additionalQty");
		Vector remarks = box.getVector("remarks");
		Vector stock = box.getVector("stock");
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector leadTime = box.getVector("leadTime");
		Vector consumptionInLeadTime = box.getVector("consumptionInLeadTime");
		Vector incrementalPercentage = box.getVector("incrementalPercentage");
		Vector incrementalQty = box.getVector("incrementalQty");
		Vector pendingIndentQty = box.getVector("pendingIndentQty");

		// int deptId = box.getInt(FROM_WARD);
		// int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);

		int hospitalid = 0;
		hospitalid = box.getInt("hospitalId");

		StoreInternalIndentM storeInternalIndentM = null;
		// StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Code for Duplicate Indent No Date 21 Jan 2011
			 */
			List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
			storeInternalIndentMForDemandNoList = session
					.createCriteria(StoreInternalIndentM.class, "siim")
					.add(Restrictions.eq("siim.Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("siim.DemandNo", demandNo)).list();

			StoreInternalIndentM newMObj = new StoreInternalIndentM();
			if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee1 = new MasEmployee();
				masEmployee1.setId(box
						.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setApprovedBy(masEmployee1);
			}

			if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box
						.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
				newMObj.setRequestedBy(masEmployee2);
			}
			/*
			 * int storeDepartmentId = 0; if (box.get("storeDepartmentId") !=
			 * null && !box.get("storeDepartmentId").equals("")) {
			 * storeDepartmentId = box.getInt("storeDepartmentId");
			 * 
			 * } if (storeDepartmentId != 0) { MasDepartment masdepartment1 =
			 * new MasDepartment(); masdepartment1.setId(storeDepartmentId);
			 * newMObj.setStoreDepartment(masdepartment1); }
			 */
			newMObj.setDemandNo(demandNo);
			newMObj.setIndentType(box.getString(TYPE_OF_INDENT));
			Users users = new Users();
			users.setId(box.getInt(USER_ID));

			newMObj.setLastChgBy(users);

			newMObj.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			newMObj.setStatus("s");
			// newMObj.setDmo_Remarks(box.getString("dmeRemarks"));
			/*
			 * IndentFlag=ALL means All Item Except Laundry Item IndentFlag=LDN
			 * means Indent Only Laundry Item
			 */
			newMObj.setIndentFlag("ALL");
			// MasDepartment fromDept = new MasDepartment();
			// fromDept.setId(box.getInt(FROM_WARD));
			// newMObj.setDepartment(fromDept);

			// MasDepartment toDept = new MasDepartment();
			// toDept.setId(box.getInt(TO_WARD));
			// newMObj.setToStore(toDept);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			newMObj.setHospital(masHospital);

			/*
			 * MasDistrict masDistrict = new MasDistrict();
			 * masDistrict.setId(box.getInt("districtId"));
			 * newMObj.setDistrict(masDistrict);
			 */

			newMObj.setDemandDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DEMAND_DATE)));
			hbt.save(newMObj);
			hbt.refresh(newMObj);
			
			

			// Auto-Increment No for demand No of Department Indent
			/*
			 * Synchronization code by ujjwal to generate the correct demandNo
			 * on 04082014 at silvassa
			 */
			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						 .add(Restrictions.isNull("Department.Id"))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId"))).list();
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					storeFyDocumentNo.setStateIndentNo(demandNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.saveOrUpdate(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepartment(null);
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					storeFyDocumentNo.setInstIndentNo("0");
					storeFyDocumentNo.setDistIndentNo("0");
					storeFyDocumentNo.setStateIndentNo(demandNo);
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.save(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);

				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//
			int indentMId = 0;
			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get(FROM_WARD)
							+ " and hospital_id = "
							+ hospitalid + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}

					if (year1IndentQty.get(i) != null
							&& !year1IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT.setPrevYearIndQty(new BigDecimal(
								year1IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevYearIndQty(new BigDecimal(0));
					}
					if (year2IndentQty.get(i) != null
							&& !year2IndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(
										year2IndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPrevToPrevYearIndQty(new BigDecimal(0));
					}
					if (previousYearConsumption.get(i) != null
							&& !previousYearConsumption.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(
										previousYearConsumption.get(i)
												.toString()));
					} else {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(0));
					}
					if (leadTime.get(i) != null
							&& !leadTime.get(i).toString().equals("")) {
						storeInternalIndentT.setLeadTime(Integer
								.parseInt(leadTime.get(i).toString()));
					} else {
						storeInternalIndentT.setLeadTime(0);
					}
					if (consumptionInLeadTime.get(i) != null
							&& !consumptionInLeadTime.get(i).toString()
									.equals("")) {
						storeInternalIndentT.setConsInLeadTime(new BigDecimal(
								consumptionInLeadTime.get(i).toString()));
					} else {
						storeInternalIndentT
								.setConsInLeadTime(new BigDecimal(0));
					}
					if (incrementalPercentage.get(i) != null
							&& !incrementalPercentage.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(
										incrementalPercentage.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(0));
					}
					if (incrementalQty.get(i) != null
							&& !incrementalQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(
										incrementalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(0));
					}
					if (pendingIndentQty.get(i) != null
							&& !pendingIndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(
										pendingIndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(0));
					}
					if (requiredQty.get(i) != null
							&& !requiredQty.get(i).toString().equals("")) {
						storeInternalIndentT.setRequiredQty(new BigDecimal(
								requiredQty.get(i).toString()));
					} else {
						storeInternalIndentT.setRequiredQty(new BigDecimal(0));
					}
					if (requiredQty.get(i) != null
							&& !requiredQty.get(i).toString().equals("")) {
						storeInternalIndentT.setRequiredQty(new BigDecimal(
								requiredQty.get(i).toString()));
					} else {
						storeInternalIndentT.setRequiredQty(new BigDecimal(0));
					}
					if (additionalQty.get(i) != null
							&& !additionalQty.get(i).toString().equals("")) {
						storeInternalIndentT.setAdditionalQty(new BigDecimal(
								additionalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setAdditionalQty(new BigDecimal(0));
					}
					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeInternalIndentT.setRemarks("");
					}
					storeInternalIndentT.setItemStatus("s");
					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */
					List<Integer> indentTList = new ArrayList<Integer>();
					Criteria cr = session.createCriteria(StoreInternalIndentT.class).createAlias("Internal", "im").add(Restrictions.eq("Item.Id", Integer.parseInt((items1.get(i).toString()))))
							.add(Restrictions.eq("ItemStatus","p").ignoreCase())
							.setProjection(Projections.property("Id"));
					
					indentTList = cr.list();
					if(indentTList.size() > 0){
						for (Integer indentTId : indentTList) {
							StoreInternalIndentT indentT = (StoreInternalIndentT)hbt.load(StoreInternalIndentT.class, indentTId);
							indentT.setItemStatus("h");
							hbt.update(indentT);
							indentMId = indentT.getInternal().getId();
						}
					}
				}
			}
			// ------------------------------------update state Wise  reference No in district-Indent data-------------
			List<StoreInternalIndentM>departmentIndentList = new ArrayList<StoreInternalIndentM>();
			departmentIndentList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("Status", "p")).add(Restrictions.idEq(indentMId)).list();
			if(departmentIndentList.size()>0){
				for(StoreInternalIndentM storeIndent : departmentIndentList){
					int storeIndentMId = storeIndent.getId();
					StoreInternalIndentM storeIndentM = (StoreInternalIndentM)hbt.load(StoreInternalIndentM.class,storeIndentMId);
					storeIndentM.setReferenceDemandNo(demandNo);
					hbt.update(storeIndentM);
				}
			}
		// ------------------------------------
			
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}

		return map;
	}

	@Override
	public Map<String, Object> showInstituteIndentPopupJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> departmentWiseStoreInternalIndentTList = new ArrayList<Object[]>();
		List<Object[]> instituteWiseStoreInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		Date fDate = new Date();
		Date tDate = new Date();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
			}

			departmentWiseStoreInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("header.Department", "dept")
					.createAlias("Item", "item")
				//	.add(Restrictions.eq("header.Status", "b").ignoreCase())
						.add(Restrictions.eq("ItemStatus", "b").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.add(Restrictions.eq("item.Id", box.getInt("itemId")))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.property("dept.Id"))
									.add(Projections
											.property("dept.DepartmentName"))
									.add(Projections.property("PrevYearIndQty"))
									.add(Projections
											.property("PrevToPrevYearIndQty"))
									.add(Projections
											.property("PrevYearConsmQty"))
									.add(Projections.property("RequiredQty"))
									.add(Projections.property("AdditionalQty"))
									.add(Projections.property("QtyRequest"))
									.add(Projections.property("Id"))
									.add(Projections
											.property("IncrementalPercentage"))
									.add(Projections
											.property("IncrementalQuantity"))
									.add(Projections.property("Remarks")))
					.list();
			instituteWiseStoreInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("header.Hospital", "institute")
					.createAlias("Item", "item")
					.add(Restrictions.eq("header.Status", "m").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.add(Restrictions.eq("item.Id", box.getInt("itemId")))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.property("institute.Id"))
									.add(Projections
											.property("institute.HospitalName"))
									.add(Projections.property("PrevYearIndQty"))
									.add(Projections
											.property("PrevToPrevYearIndQty"))
									.add(Projections
											.property("PrevYearConsmQty"))
									.add(Projections.property("StockInHand"))
									.add(Projections
											.property("IncrementalPercentage"))
									.add(Projections
											.property("IncrementalQuantity"))
									.add(Projections
											.property("PendingIndentQty"))
									.add(Projections.property("LeadTime"))
									.add(Projections.property("ConsInLeadTime"))
									.add(Projections.property("RequiredQty"))
									.add(Projections.property("AdditionalQty"))
									.add(Projections.property("QtyRequest"))
									.add(Projections.property("Id"))
									.add(Projections.property("Remarks")))
					.list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("itemId", box.getInt("itemId"));
		map.put("itemCode", box.getString("itemCode"));
		map.put("itemName", box.getString("itemName"));
		map.put("au", box.getString("au"));
		map.put("rowVal", box.getInt("rowVal"));
		map.put("departmentWiseStoreInternalIndentTList",
				departmentWiseStoreInternalIndentTList);
		map.put("instituteWiseStoreInternalIndentTList",
				instituteWiseStoreInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> showDistrictIndentPopupJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> districtWiseStoreInternalIndentTList = new ArrayList<Object[]>();
		List<Object[]> instituteWiseStoreInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		Date fDate = new Date();
		Date tDate = new Date();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
			}
			districtWiseStoreInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("header.District", "district")
					.createAlias("Item", "item")
					.add(Restrictions.eq("header.Status", "p").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.add(Restrictions.eq("item.Id", box.getInt("itemId")))
					.add(Restrictions.eq("ItemStatus", "p"))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.property("district.Id"))
									.add(Projections
											.property("district.DistrictName"))
									.add(Projections.property("PrevYearIndQty"))
									.add(Projections
											.property("PrevToPrevYearIndQty"))
									.add(Projections
											.property("PrevYearConsmQty"))
									.add(Projections.property("RequiredQty"))
									.add(Projections.property("AdditionalQty"))
									.add(Projections.property("QtyRequest"))
									.add(Projections.property("Id"))
									.add(Projections
											.property("IncrementalPercentage"))
									.add(Projections
											.property("IncrementalQuantity"))
									.add(Projections.property("ConsInLeadTime"))
									.add(Projections.property("LeadTime"))
									.add(Projections
											.property("PendingIndentQty")))
					.list();
			instituteWiseStoreInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.createAlias("header.Hospital", "institute")
					.createAlias("Item", "item")
					.add(Restrictions.eq("header.Status", "g").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate))
					.add(Restrictions.eq("item.Id", box.getInt("itemId")))
					.add(Restrictions.eq("ItemStatus", "g"))
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.property("institute.Id"))
									.add(Projections
											.property("institute.HospitalName"))
									.add(Projections.property("PrevYearIndQty"))
									.add(Projections
											.property("PrevToPrevYearIndQty"))
									.add(Projections
											.property("PrevYearConsmQty"))
									.add(Projections.property("StockInHand"))
									.add(Projections
											.property("IncrementalPercentage"))
									.add(Projections
											.property("IncrementalQuantity"))
									.add(Projections
											.property("PendingIndentQty"))
									.add(Projections.property("LeadTime"))
									.add(Projections.property("ConsInLeadTime"))
									.add(Projections.property("RequiredQty"))
									.add(Projections.property("AdditionalQty"))
									.add(Projections.property("QtyRequest"))
									.add(Projections.property("Id"))).list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("itemId", box.getInt("itemId"));
		map.put("itemCode", box.getString("itemCode"));
		map.put("itemName", box.getString("itemName"));
		map.put("au", box.getString("au"));
		map.put("rowVal", box.getInt("rowVal"));
		map.put("districtWiseStoreInternalIndentTList",
				districtWiseStoreInternalIndentTList);
		map.put("instituteWiseStoreInternalIndentTList",
				instituteWiseStoreInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> showAnnualDepartmentIndentCreationApproval(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasHospital> instituteForIndentNoList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		int storeFyDocumentNoId = 0;
		String demandNo = "";
		String finalDemandNo = "";
		hospitalTypeList = session.createCriteria(MasHospitalType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("DepartmentName", "STORE"))
							.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		classList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.isNull("Department.Id"))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();

		instituteForIndentNoList = session
				.createCriteria(MasHospital.class, "mh")
				.add(Restrictions.eq("mh.Status", "Y").ignoreCase())
				.add(Restrictions.eq("mh.Id", box.getInt("hospitalId"))).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.add(Restrictions.eq("header.Id",
							box.getInt("storeInternalMId")))
					.add(Restrictions.eq("header.Status", "o").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate)).list();

		} catch (Exception e) {

			e.printStackTrace();
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("hospitalTypeList", hospitalTypeList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("classList", classList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForDepartmentIndentAnnualApproval(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "o").ignoreCase())
				.add(Restrictions.between("DemandDate", fDate, tDate)).add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))).list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> submitAnnualDepartmentApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector srno = box.getVector("srno");
		Vector demandedQty = box.getVector("qtyRequest");
		boolean flag = false;

		try {
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class,
					box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setStatus("a");
			storeInternalIndentM.setRemarks(box.getString("approvalRemarks"));
			hbt.update(storeInternalIndentM);
			for (int i = 0; i < srno.size(); i++) {
				if (srno.get(i).equals("y")) {
					StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
					if (storeInternalTId.get(i) != null
							&& !storeInternalTId.get(i).equals("")) {
						int internalTId = Integer.parseInt(storeInternalTId
								.get(i).toString());
						
						storeInternalIndentT = (StoreInternalIndentT) hbt.load(
								StoreInternalIndentT.class, internalTId);
						if (demandedQty.get(i) != null
								&& !demandedQty.get(i).equals("")) {
							storeInternalIndentT.setQtyRequest(Integer
									.parseInt(demandedQty.get(i).toString()));
						}
						storeInternalIndentT.setItemStatus("a");
						hbt.update(storeInternalIndentT);
					}
				}
			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showUnservicedDispensingJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		boolean successfullyAdded = false;
		List<Object[]> visitList = new ArrayList<Object[]>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		String message = "";
		Date fromDate = new Date();
		Date toDate = new Date();
		String emp_code_doctor = null;
		if (!box.getString(RequestConstants.FROM_DATE).equals(""))
			fromDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.FROM_DATE));
		if (!box.getString(RequestConstants.TO_DATE).equals(""))
			toDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.TO_DATE));
		int tokenNo = 0;
		String hinNo = "";
		String patName = "";
		int mobileNo = 0;
		int doctorId = 0;
		int deptId = 0;
		int phramacyDept = 0;
		int hospitalId = 0;

		if (!box.getString(RequestConstants.DEPT_ID).equals("")) {
			phramacyDept = box.getInt(RequestConstants.DEPT_ID);
		}
		if (!box.getString(RequestConstants.HOSPITAL_ID).equals("")) {
			hospitalId = box.getInt(RequestConstants.HOSPITAL_ID);
		}
		if (!box.getString(RequestConstants.FROM_WARD).equals(""))
			deptId = box.getInt(RequestConstants.FROM_WARD);
		if (!box.getString(RequestConstants.TOKEN_NO).equals(""))
			tokenNo = box.getInt(RequestConstants.TOKEN_NO);
		if (!box.getString(RequestConstants.HIN_NO).equals(""))
			hinNo = box.getString(RequestConstants.HIN_NO);
		if (!box.getString(RequestConstants.P_FIRST_NAME).equals(""))
			patName = box.getString(RequestConstants.P_FIRST_NAME);
		if (!box.getString(RequestConstants.MOBILE_NO).equals(""))
			mobileNo = box.getInt(RequestConstants.MOBILE_NO);
		if (!box.getString(RequestConstants.DOCTOR_NAME).equals(""))
			doctorId = box.getInt(RequestConstants.DOCTOR_NAME);
		try {
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("table_constant.properties");
			
			Properties prop = new Properties();
			try {
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			emp_code_doctor = prop.getProperty("mas_emp_category_doctor");

			MasDepartment department = (MasDepartment) session.get(
					MasDepartment.class, phramacyDept);

			departmentList = session.createCriteria(MasDepartment.class, "mi")
					.add(Restrictions.eq("mi.Hospital.Id", hospitalId))
					.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();

			employeeList = session
					.createCriteria(MasEmployee.class)
					.add(Restrictions.eq("Status", "Y").ignoreCase())
					.createAlias("EmpCategory", "EC")
					.add(Restrictions.eq("EC.EmpCategoryCode", emp_code_doctor))
					.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
			Criteria criteria = session
					.createCriteria(PatientPrescriptionHeader.class, "pph")
					.createAlias("Visit", "v")
					.createAlias("v.Hin", "h")
					.add(Restrictions.eq("pph.Hospital.Id", hospitalId))
					//.add(Restrictions.between("v.VisitDate", fromDate,toDate))
					.add(Restrictions.between("pph.DispencingDate", fromDate,toDate))
					.add(Restrictions.eq("h.PatientStatus", "Out Patient"))
					.add(Restrictions.eq("v.UnservicesedPharVisitStatus", "y")
							.ignoreCase())
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.property("v.TokenNo"))
									.add(Projections.property("h.HinNo"))
									.add(Projections.property("h.Id"))
									.add(Projections.property("h.PFirstName"))
									.add(Projections.property("v.Department"))
									.add(Projections.property("v.Doctor"))
									.add(Projections.property("v.VisitDate"))
									.add(Projections.property("pph.Id"))
									.add(Projections
											.property("pph.DispencingDate"))

					);
			if (tokenNo != 0) {
				criteria = criteria.add(Restrictions.eq("v.TokenNo", tokenNo));
			}
			if (hinNo != null && !hinNo.equals("")) {
				criteria = criteria.add(Restrictions.eq("h.HinNo", hinNo));
			}
			if (patName != null && !patName.equals("")) {
				criteria = criteria.add(Restrictions.like("h.PFirstName",
						patName).ignoreCase());
			}

			if (mobileNo != 0) {
				criteria = criteria.add(Restrictions.eq("h.MobileNumber",
						mobileNo));
			}
			if (doctorId != 0) {
				criteria = criteria.add(Restrictions
						.eq("v.Doctor.Id", doctorId));
			}
			if (deptId != 0) {
				criteria = criteria.add(Restrictions.eq("v.Department.Id",
						deptId));
			}

			visitList = criteria.list();

		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		// map = showAnnualIndentAdminSetupJsp(box.getInt(HOSPITAL_ID));
		map.put("visitList", visitList);
		map.put("message", message);
		map.put("departmentList", departmentList);
		map.put("employeeList", employeeList);
		return map;
	}

	
	@Override
	public Map<String, Object> empanelled(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean successfullyAdded = false;
		List<Object[]> visitList = new ArrayList<Object[]>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();
		List<MasHospitalType> uniquehospitalTypeList = new ArrayList<MasHospitalType>();
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		String message = "";
		Date fromDate = new Date();
		Date toDate = new Date();
		String patName = "";
		int hospital_id = 0;
		int hospitalTypeId = 0;
		String hinNo = "";
		int mobileNo = 0;
		int empanelledId=0;
		if (box.getString(RequestConstants.P_FIRST_NAME) != null
				&& !"".equals(box.getString(RequestConstants.P_FIRST_NAME))) {
			patName = box.getString(RequestConstants.P_FIRST_NAME);
		}
		if (box.getString(RequestConstants.HOSPITAL) != null
				&& !"".equals(box.getString(RequestConstants.HOSPITAL))) {
			hospital_id = box.getInt(RequestConstants.HOSPITAL);
		}
		if (box.getString(RequestConstants.HOSPITAL_TYPE) != null
				&& !"".equals(box.getString(RequestConstants.HOSPITAL_TYPE))) {
			hospitalTypeId = box.getInt(RequestConstants.HOSPITAL_TYPE);
		}
		if (box.getString(RequestConstants.HIN_NO) != null
				&& !"".equals(box.getString(RequestConstants.HIN_NO))) {
			hinNo = box.getString(RequestConstants.HIN_NO);
		}
		if (box.getString(RequestConstants.MOBILE_NO) != null
				&& !"".equals(box.getString(RequestConstants.MOBILE_NO))) {
			mobileNo = box.getInt(RequestConstants.MOBILE_NO);
		}
		if (box.getString(RequestConstants.FROM_DATE) != null
				&& !"".equals(box.getString(RequestConstants.FROM_DATE))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.FROM_DATE));
		}
		if (box.getString(RequestConstants.TO_DATE) != null
				&& !"".equals(box.getString(RequestConstants.TO_DATE))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.TO_DATE));
		}
		if (box.getString("empanelledId") != null
				&& !"".equals(box.getString("empanelledId"))) {
			empanelledId = Integer.parseInt(box.getString("empanelledId"));
		}
		
		
		try {
			/*hospitalList = session
					.createCriteria(MasHospital.class, "masHospital")
					.add(Restrictions.eq("masHospital.Status",
							"y".toLowerCase()).ignoreCase()).list();*/
			List<Integer> hospitalIdList=new ArrayList<Integer>();			
			List<Integer> hospitalTypeListId = new ArrayList<Integer>();
			Set<MasEmpaneledHospital> empaneledHospitals= null;
			List<MasEmpaneledHospital> empaneledHospitalsList=null;
			
			MasEmpaneled masEmpaneled=(MasEmpaneled)session.get(MasEmpaneled.class, empanelledId);
			
			
			if(masEmpaneled!=null){
				empaneledHospitals=masEmpaneled.getMasEmpaneledHospitals();
				empaneledHospitalsList=new ArrayList<MasEmpaneledHospital>(empaneledHospitals);
			}
			
			if(empaneledHospitalsList!=null){
			for (MasEmpaneledHospital masEmpaneledHospital : empaneledHospitalsList) {
				if ("Y".equalsIgnoreCase(masEmpaneledHospital.getStatus())) {
					if (masEmpaneledHospital.getHospital() != null
							&& "Y".equalsIgnoreCase(masEmpaneledHospital
									.getHospital().getStatus())) {
						hospitalList.add(masEmpaneledHospital.getHospital());
						hospitalIdList.add(masEmpaneledHospital.getHospital().getId());
						hospitalTypeList.add(masEmpaneledHospital.getHospital().getHospitalType());
						 uniquehospitalTypeList = new ArrayList<MasHospitalType>(new HashSet(hospitalTypeList));
						hospitalTypeListId.add(masEmpaneledHospital.getHospital().getHospitalType().getId());

					}
				}
				
			}
		}
			/*hospitalTypeList = session
					.createCriteria(MasHospitalType.class, "masHospitalType")
					.add(Restrictions.eq("masHospitalType.Status",
							"y".toLowerCase()).ignoreCase()).list();*/

			Criteria criteria = session
					.createCriteria(PatientPrescriptionDetails.class, "ppd")
					.createAlias("Prescription", "pph")
					.createAlias("pph.Visit", "v").createAlias("v.Hin", "h")
					.createAlias("v.Hospital", "mh")
					.createAlias("mh.HospitalType", "mht")
					//.add(Restrictions.between("v.VisitDate", fromDate, toDate))
					.add(Restrictions.in("mh.Id", hospitalIdList))
					.add(Restrictions.eq("h.PatientStatus", "Out Patient"))
					.add(Restrictions.eq("v.EmpanelledVisitFlag", "y")
							.ignoreCase())
					.add(Restrictions.eq("ppd.ReferToEmpanelled", "y")
							.ignoreCase())
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.groupProperty("v.TokenNo"))
									.add(Projections.groupProperty("h.HinNo"))
									.add(Projections.groupProperty("h.Id"))
									.add(Projections
											.groupProperty("h.PFirstName"))
									.add(Projections
											.groupProperty("v.Department"))
									.add(Projections.groupProperty("v.Doctor"))
									.add(Projections
											.groupProperty("v.VisitDate"))
									.add(Projections.groupProperty("pph.Id"))
									.add(Projections
											.groupProperty("mh.HospitalName"))
									.add(Projections
											.groupProperty("mht.HospitalTypeName"))

					);

			if (patName != null && !patName.equals("")) {
				criteria = criteria.add(Restrictions.like("h.PFirstName",
						patName).ignoreCase());
			}
			if (hospital_id != 0) {
				criteria = criteria.add(Restrictions.eq("mh.Id", hospital_id));
			}
			else
			{
				if (hospitalIdList.size() > 0) {
					criteria = criteria.add(Restrictions.in("mh.Id", hospitalIdList));
				}
			}
			if (hospitalTypeId != 0) {
				criteria = criteria.add(Restrictions.eq("mht.Id",hospitalTypeId));
			}
			else
			{
				if (hospitalTypeListId.size()> 0) {
					criteria = criteria.add(Restrictions.in("mht.Id",hospitalTypeListId));
				}
			}
			if (hinNo != null && !hinNo.equals("")) {
				criteria = criteria.add(Restrictions.eq("h.HinNo", hinNo));
			}

			if (mobileNo != 0) {
				criteria = criteria.add(Restrictions.eq("h.MobileNumber",
						mobileNo));
			}

			visitList = criteria.list();

		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		// map = showAnnualIndentAdminSetupJsp(box.getInt(HOSPITAL_ID));
		map.put("visitList", visitList);
		map.put("hospitalList", hospitalList);
		map.put("hospitalTypeList", uniquehospitalTypeList);
		map.put("message", message);
		map.put("empanelledId", empanelledId);
		return map;
	}

	@Override
	public Map<String, Object> empanelledDetails(Map<String, Object> mapForDs) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Visit> patientList = new ArrayList<Visit>();
		List<PatientPrescriptionDetails> prescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		List<StoreIssueT> drugIssueDetailsList = new ArrayList<StoreIssueT>();
		List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();

		Session session = (Session) getSession();
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		int empanelledId =0;
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}
		
		if (mapForDs.get("empanelledId") != null) {
			empanelledId = (Integer) mapForDs.get("empanelledId");
		}

		String deptType = "";
		if (mapForDs.get("deptType") != null) {
			deptType = (String) mapForDs.get("deptType");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			prescriptionDetailsList = session
					.createCriteria(PatientPrescriptionDetails.class, "ppd")
					.createAlias("Prescription", "presc")
					.add(Restrictions.eq("presc.Id", hinId))
					// .add(Restrictions.eq("ppd.IssuedStatus","n"))
					.add(Restrictions.eq("ppd.ReferToEmpanelled", "y"))
					// .add(Restrictions.eq("presc.IssuedStatus", "n"))
					.list();

			if (prescriptionDetailsList != null
					|| prescriptionDetailsList.size() > 0) {
				detailsMap.put("prescriptionDetailsList",
						prescriptionDetailsList);
			}

			int visit_id = 0;
			int hin_id = 0;
			for (PatientPrescriptionDetails prsdeDetails : prescriptionDetailsList) {
				visit_id = prsdeDetails.getPrescription().getVisit().getId();
				hin_id = prsdeDetails.getPrescription().getHin().getId();
			}
			patientList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visit_id)).list();
			if (patientList != null || patientList.size() > 0) {
				detailsMap.put("patientList", patientList);
			}

			/*
			 * Criteria c
			 * =session.createCriteria(StoreIssueT.class).add(Restrictions
			 * .eq("Issued","y")) .createAlias("Visit",
			 * "vit").add(Restrictions.eq("vit.Hin.Id", hin_id));
			 * c.setMaxResults(5);
			 * //c.setProjection(Projections.groupProperty("IssueM.Id"));
			 * alreadyissuedDrugList=c.list();
			 */
			List<Object[]> visitList = new ArrayList<Object[]>();
			String query = "select  a.id,v.visit_date from store_issue_m a, store_issue_t b,visit v where a.id=b.issue_m_id "
					+ "and b.visit_id=v.visit_id and b.issued='y' and v.hin_id="
					+ hin_id
					+ " and a.hospital_id= "
					+ hospitalId
					+ "group by a.id,v.visit_date order by a.id desc LIMIT 2";
			visitList = session.createSQLQuery(query).list();
			detailsMap.put("visitList", visitList);
			if (alreadyissuedDrugList != null
					|| alreadyissuedDrugList.size() > 0) {
				detailsMap.put("alreadyissuedDrugList", alreadyissuedDrugList);
			}
			List<String> issueNoList = new ArrayList<String>();
			/*
			 * issueNoList =
			 * session.createCriteria(StoreIssueM.class).setProjection
			 * (Projections.property("IssueNo")).list();
			 */
			String query1 = "select issue_no from store_issue_m order by id desc limit 1 ";
			issueNoList = session.createSQLQuery(query1).list();
			String no = "";
			//
			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {
					no = ((String) issueNoList.get(i));
				}
			}
			//
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			String patientIssueNo = "";

			patientIssueNo = getMaxNoByDeptCode(maxMap);
			detailsMap.put("patientIssueNo", patientIssueNo);
			detailsMap.put("empanelledId", empanelledId);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	@Override
	public Map<String, Object> dirDispLastPresBased(Map<String, Object> mapForDs) {
		Map<String, Object> detailsMap = new HashMap<String, Object>();
		List<Visit> patientList = new ArrayList<Visit>();
		List<PatientPrescriptionDetails> prescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		List<StoreIssueT> drugIssueDetailsList = new ArrayList<StoreIssueT>();
		List<StoreIssueT> alreadyissuedDrugList = new ArrayList<StoreIssueT>();

		Session session = (Session) getSession();
		int hinId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		if (mapForDs.get("hinId") != null) {
			hinId = (Integer) mapForDs.get("hinId");
		}

		String deptType = "";
		if (mapForDs.get("deptType") != null) {
			deptType = (String) mapForDs.get("deptType");
		}

		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			prescriptionDetailsList = session
					.createCriteria(PatientPrescriptionDetails.class, "ppd")
					.createAlias("Prescription", "presc")
					.add(Restrictions.eq("presc.Id", hinId))
					.add(Restrictions.eq("ppd.IssuedStatus", "n"))
					.add(Restrictions.eq("ppd.ReferToEmpanelled", "y"))
					.add(Restrictions.eq("presc.IssuedStatus", "n")).list();

			if (prescriptionDetailsList != null
					|| prescriptionDetailsList.size() > 0) {
				detailsMap.put("prescriptionDetailsList",
						prescriptionDetailsList);
			}

			int visit_id = 0;
			int hin_id = 0;
			for (PatientPrescriptionDetails prsdeDetails : prescriptionDetailsList) {
				visit_id = prsdeDetails.getPrescription().getVisit().getId();
				hin_id = prsdeDetails.getPrescription().getHin().getId();
			}
			patientList = session.createCriteria(Visit.class)
					.add(Restrictions.eq("Id", visit_id)).list();
			if (patientList != null || patientList.size() > 0) {
				detailsMap.put("patientList", patientList);
			}

			/*
			 * Criteria c
			 * =session.createCriteria(StoreIssueT.class).add(Restrictions
			 * .eq("Issued","y")) .createAlias("Visit",
			 * "vit").add(Restrictions.eq("vit.Hin.Id", hin_id));
			 * c.setMaxResults(5);
			 * //c.setProjection(Projections.groupProperty("IssueM.Id"));
			 * alreadyissuedDrugList=c.list();
			 */
			List<Object[]> visitList = new ArrayList<Object[]>();
			String query = "select  a.id,v.visit_date from store_issue_m a, store_issue_t b,visit v where a.id=b.issue_m_id "
					+ "and b.visit_id=v.visit_id and b.issued='y' and v.hin_id="
					+ hin_id
					+ " and a.hospital_id= "
					+ hospitalId
					+ "group by a.id,v.visit_date order by a.id desc LIMIT 2";
			visitList = session.createSQLQuery(query).list();
			detailsMap.put("visitList", visitList);
			if (alreadyissuedDrugList != null
					|| alreadyissuedDrugList.size() > 0) {
				detailsMap.put("alreadyissuedDrugList", alreadyissuedDrugList);
			}
			List<String> issueNoList = new ArrayList<String>();
			/*
			 * issueNoList =
			 * session.createCriteria(StoreIssueM.class).setProjection
			 * (Projections.property("IssueNo")).list();
			 */
			String query1 = "select issue_no from store_issue_m order by id desc limit 1 ";
			issueNoList = session.createSQLQuery(query1).list();
			String no = "";
			//
			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {
					no = ((String) issueNoList.get(i));
				}
			}
			//
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			String patientIssueNo = "";

			patientIssueNo = getMaxNoByDeptCode(maxMap);
			detailsMap.put("patientIssueNo", patientIssueNo);
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return detailsMap;
	}

	@Override
	public Map<String, Object> showPendingListForInstituteAnnualIndentApprovalJsp(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "i").ignoreCase()).add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.between("DemandDate", fDate, tDate)).list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> showInstituteAnnualIndentApprovalJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();
		hospitalTypeList = session
				.createCriteria(MasHospitalType.class, "masHospitalType")
				.add(Restrictions.eq("masHospitalType.Status",
						"y".toLowerCase()).ignoreCase()).list();
		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.add(Restrictions.eq("header.Id",
							box.getInt("storeInternalMId")))
					.add(Restrictions.eq("header.Status", "i").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate)).list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("hospitalTypeList", hospitalTypeList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> submitAnnualInstituteApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector srno = box.getVector("srno");
		Vector demandedQty = box.getVector("qtyRequest");
		boolean flag = false;

		try {
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class,
					box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setStatus("m");
			storeInternalIndentM.setRemarks(box.getString("smoRemarks"));
			hbt.update(storeInternalIndentM);

			for (int i = 0; i < srno.size(); i++) {
				if (srno.get(i).equals("y")) {
					StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
					if (storeInternalTId.get(i) != null
							&& !storeInternalTId.get(i).equals("")) {
						int internalTId = Integer.parseInt(storeInternalTId
								.get(i).toString());

						storeInternalIndentT = (StoreInternalIndentT) hbt.load(
								StoreInternalIndentT.class, internalTId);
						if (demandedQty.get(i) != null
								&& !demandedQty.get(i).equals("")) {
							storeInternalIndentT.setQtyRequest(Integer
									.parseInt(demandedQty.get(i).toString()));
						}
						storeInternalIndentT.setItemStatus("m");
						hbt.update(storeInternalIndentT);
					}
				}
			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForDistrictWiseIndentApproval(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "d").ignoreCase())
				.add(Restrictions.between("DemandDate", fDate, tDate)).list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForStateWiseIndentApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "s").ignoreCase())
				.add(Restrictions.between("DemandDate", fDate, tDate)).list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> showDistrictAnnualIndentApprovalJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasDistrict> districtList = new ArrayList<MasDistrict>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		districtList = session.createCriteria(MasDistrict.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		classList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.add(Restrictions.eq("header.Id",
							box.getInt("storeInternalMId")))
					.add(Restrictions.eq("header.Status", "d").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate)).list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("districtList", districtList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("classList", classList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> showStateAnnualIndentApprovalJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.add(Restrictions.eq("header.Id",
							box.getInt("storeInternalMId")))
					.add(Restrictions.eq("header.Status", "s").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate)).list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> submitAnnualDistrictApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector srno = box.getVector("srno");
		Vector demandedQty = box.getVector("qtyRequest");
		boolean flag = false;

		try {
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class,
					box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setStatus("p");
			storeInternalIndentM.setRemarks(box.getString("dmoRemarks"));
			hbt.update(storeInternalIndentM);

			for (int i = 0; i < srno.size(); i++) {
				if (srno.get(i).equals("y")) {
					StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
					if (storeInternalTId.get(i) != null
							&& !storeInternalTId.get(i).equals("")) {
						int internalTId = Integer.parseInt(storeInternalTId
								.get(i).toString());

						storeInternalIndentT = (StoreInternalIndentT) hbt.load(
								StoreInternalIndentT.class, internalTId);
						if (demandedQty.get(i) != null
								&& !demandedQty.get(i).equals("")) {
							storeInternalIndentT.setQtyRequest(Integer
									.parseInt(demandedQty.get(i).toString()));
						}
						storeInternalIndentT.setItemStatus("p");
						hbt.update(storeInternalIndentT);
					}
				}
			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> submitAnnualStateApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector srno = box.getVector("srno");
		Vector demandedQty = box.getVector("qtyRequest");
		boolean flag = false;

		try {
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class,
					box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setStatus("f");
			storeInternalIndentM.setRemarks(box.getString("dhsRemarks"));
			hbt.update(storeInternalIndentM);

			for (int i = 0; i < srno.size(); i++) {
				if (srno.get(i).equals("y")) {
					StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
					if (storeInternalTId.get(i) != null
							&& !storeInternalTId.get(i).equals("")) {
						int internalTId = Integer.parseInt(storeInternalTId
								.get(i).toString());

						storeInternalIndentT = (StoreInternalIndentT) hbt.load(
								StoreInternalIndentT.class, internalTId);
						if (demandedQty.get(i) != null
								&& !demandedQty.get(i).equals("")) {
							storeInternalIndentT.setQtyRequest(Integer
									.parseInt(demandedQty.get(i).toString()));
						}
						storeInternalIndentT.setItemStatus("f");
						hbt.update(storeInternalIndentT);
					}
				}
			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showAnnualIndentTransferToKMSCLJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasDistrict> districtList = new ArrayList<MasDistrict>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		districtList = session.createCriteria(MasDistrict.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		classList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.add(Restrictions.eq("header.Id",
							box.getInt("storeInternalMId")))
					.add(Restrictions.eq("header.Status", "f").ignoreCase())
					// .add(Restrictions.eq("ItemStatus", "f").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate)).list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("districtList", districtList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("classList", classList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListAnnualIndentTransferToKMSCLJsp(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "f").ignoreCase())
				.add(Restrictions.between("DemandDate", fDate, tDate)).list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> transferAnnualIndentDataToKMSCL(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector srno = box.getVector("srno");
		Vector demandedQty = box.getVector("qtyRequest");
		boolean update = false;

		try {
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class,
					box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setStatus("t");
			storeInternalIndentM.setKmcl_Remarks(box.getString("kmsclRemarks"));
			hbt.update(storeInternalIndentM);

			for (int i = 0; i < srno.size(); i++) {
				if (srno.get(i).equals("y")) {
					StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
					if (storeInternalTId.get(i) != null
							&& !storeInternalTId.get(i).equals("")) {
						int internalTId = Integer.parseInt(storeInternalTId
								.get(i).toString());

						storeInternalIndentT = (StoreInternalIndentT) hbt.load(
								StoreInternalIndentT.class, internalTId);
						/*
						 * if (demandedQty.get(i) != null &&
						 * !demandedQty.get(i).equals("")) {
						 * storeInternalIndentT
						 * .setQtyRequest(Integer.parseInt(demandedQty
						 * .get(i).toString())); }
						 */
						storeInternalIndentT.setItemStatus("t");
						hbt.update(storeInternalIndentT);
					}
				}
			}
			update = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("update", update);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForAnnualIndentProcessingbyKMSCL(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.createAlias("Hospital", "hospital")
				.add(Restrictions.eq("Status", "t").ignoreCase())
				.add(Restrictions.between("DemandDate", fDate, tDate))
				.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")))
				.list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> showAnnualIndentProcessingbyKMSCL(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasDistrict> districtList = new ArrayList<MasDistrict>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		List<Object[]> storeInternalIndentTList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		districtList = session.createCriteria(MasDistrict.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		classList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y")).list();

		String fromMonth = "";
		String fromYear = "";
		String toMonth = "";
		String toYear = "";
		String fromDay = "";
		String toDay = "";
		Date fDate = new Date();
		Date tDate = new Date();
		try {
			if (annualIndentSetUpList.size() > 0) {
				StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
						.get(0);
				String fromDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getFromDate());
				String toDate = HMSUtil
						.convertDateToStringWithoutTime(annualIndentSetup
								.getToDate());
				fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
				tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
				StringTokenizer str = new StringTokenizer(fromDate, "/");
				while (str.hasMoreTokens()) {
					fromDay = str.nextToken();
					fromMonth = HMSUtil.convertMonth(Integer.parseInt(str
							.nextToken()));
					fromYear = str.nextToken();

				}
				StringTokenizer strData = new StringTokenizer(toDate, "/");
				while (strData.hasMoreTokens()) {
					toDay = strData.nextToken();
					toMonth = HMSUtil.convertMonth(Integer.parseInt(strData
							.nextToken()));
					toYear = strData.nextToken();

				}
			}
			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "header")
					.add(Restrictions.eq("header.Id",
							box.getInt("storeInternalMId")))
					.add(Restrictions.eq("header.Status", "t").ignoreCase())
					// .add(Restrictions.eq("ItemStatus", "t").ignoreCase())
					.add(Restrictions
							.between("header.DemandDate", fDate, tDate)).list();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("fromMonth", fromMonth);
		map.put("fromYear", fromYear);
		map.put("toMonth", toMonth);
		map.put("toYear", toYear);
		map.put("hospitalList", hospitalList);
		map.put("districtList", districtList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("classList", classList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		map.put("departmentList", departmentList);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;
	}

	@Override
	public Map<String, Object> submitAnnualIndentProcessingByKMSCL(Map<String, Object> generalMap,Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM>districtReferencedemandNoList = new ArrayList<StoreInternalIndentM>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		List storeInternalTIdList = new ArrayList();
		List fromDateList = new ArrayList();
		List toDateList = new ArrayList();
		List procurementStatusList = new ArrayList();
		List instituteIndentIdList = new ArrayList();
		List instituteReferenceNoList = new ArrayList();
		List itemIdList = new ArrayList();
		List<StoreInternalIndentM>districtWiseIndentList = new ArrayList<StoreInternalIndentM>();
		List<StoreInternalIndentM>instituteWiseIndentList = new ArrayList<StoreInternalIndentM>();
		/*Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector procurementStatus = box.getVector("procurementStatus");
		Vector fromDate = box.getVector(FROM_DATE);
		Vector toDate = box.getVector(TO_DATE);*/
		storeInternalTIdList =(List)generalMap.get("storeInternalTIdList");
		fromDateList =(List)generalMap.get("fromDateList");
		toDateList =(List)generalMap.get("toDateList");
		itemIdList =(List)generalMap.get("itemIdList");
		procurementStatusList =(List)generalMap.get("procurementStatusList");
		boolean flag = false;
		String fileName = null;
        String fileExtension = null;
        String uploadURL = box.getString("uploadURL");
        String fileSeparator = box.getString("fileSeparator");
        int uploadCount = box.getInt("uploadCount");
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		Session session = (Session)getSession();
		try {
			int j = 1;
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(StoreInternalIndentM.class,box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setKmsclProcessDate(HMSUtil.convertStringTypeDateToDateType(date));
			storeInternalIndentM.setStatus("K");
			// storeInternalIndentM.setRemarks(box.getString("dhsRemarks"));
			hbt.update(storeInternalIndentM);
		
            for (int i = 0; i < storeInternalTIdList.size(); i++) {
                    if (storeInternalTIdList.get(i) != null && !storeInternalTIdList.get(i).equals("")) {
                    	int internalTId = Integer.parseInt(storeInternalTIdList.get(i)
    							.toString());

    				StoreInternalIndentT	storeInternalIndentT = (StoreInternalIndentT) hbt.load(StoreInternalIndentT.class, internalTId);
    				if (procurementStatusList.get(i) != null
							&& !procurementStatusList.get(i).equals("")) {
						storeInternalIndentT
								.setProcurementStatus(procurementStatusList.get(i)
										.toString());
					}
					if (fromDateList.get(i) != null && !fromDateList.get(i).equals("")) {
						storeInternalIndentT.setFromDate(HMSUtil.convertStringTypeDateToDateType(fromDateList.get(i).toString()));
					}
					if (toDateList.get(i) != null && !toDateList.get(i).equals("")) {
						storeInternalIndentT.setToDate(HMSUtil.convertStringTypeDateToDateType(toDateList.get(i).toString()));
					}
					storeInternalIndentT.setItemStatus("k");
					hbt.update(storeInternalIndentT);
                    
           
//-------------------------------------update nac status of 
			
					if(box.getString("stateDemandNo") != null && !box.getString("stateDemandNo").equals("")){
						districtReferencedemandNoList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("ReferenceDemandNo", box.getString("stateDemandNo"))).list();

						if(districtReferencedemandNoList.size()>0){
							for(StoreInternalIndentM storeIndentM :districtReferencedemandNoList){
								String districtDemandNo = storeIndentM.getDemandNo();

								districtWiseIndentList = session.createCriteria(StoreInternalIndentM.class).add(Restrictions.eq("ReferenceDemandNo", districtDemandNo)).list();
								if(districtWiseIndentList.size()>0){
									for(StoreInternalIndentM districtIndent :districtWiseIndentList){
										int internalIndentMId = districtIndent.getId();
										System.out.println("internalIndentMId=="+internalIndentMId);
										instituteIndentIdList.add(internalIndentMId);
									}
								}
							}
						}
					}
                   
               List<StoreInternalIndentT>internalIndentTList = new ArrayList<StoreInternalIndentT>();
			internalIndentTList = session.createCriteria(StoreInternalIndentT.class).add(Restrictions.in("Internal.Id", instituteIndentIdList))
					.add(Restrictions.eq("Item.Id", Integer.parseInt(itemIdList.get(i).toString()))).list();
			System.out.println("internalIndentTList=="+internalIndentTList.size());
			  System.out.println("fileName=in ds===="+box.getString("filename"+j));
		 if(!box.getString("filename"+j).equals("") && !box.getString("filename"+j).equals("0"))
            {
			if(internalIndentTList.size()>0){
				for(StoreInternalIndentT internalIndentT: internalIndentTList){
					UploadDocuments uploadDocuments = new UploadDocuments();
					
			            File file=null;
			            file = new File(uploadURL+fileSeparator+"NAC" +fileSeparator+box.getString("filename"+j));
			            if(!file.equals("")){
			            File f = new File(uploadURL);
			            try {
			                    if (f.exists()) {
			                            f.delete();
			                            f.mkdir();
			                            FileInputStream is = new FileInputStream(file);
			                            long length = file.length();
			                            
			                            if (length > Integer.MAX_VALUE) {
			                                    // File is too large
			                            }
			                            // Create the byte array to hold the data
			                            byte[] bytes = new byte[(int)length];
			                            int offset = 0;
			                            int numRead = 0;
			                            while (offset < bytes.length
			                                            && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
			                                    offset += numRead;
			                            }

			                            if (offset < bytes.length) {
			                                    throw new IOException("Could not completely read file "+file.getName());
			                            }
			                    
			                            uploadDocuments.setPatientDocument(bytes);
			                            is.close();
			                    } else {
			                            f.mkdir();
			                            FileInputStream is = new FileInputStream(file);
			                            long length = file.length();
			                            //ByteBuffer byteBuff=null;
			                            //  int modLength=length/
			                            if (length > Integer.MAX_VALUE) {
			                                    // File is too large
			                            }
			                            // Create the byte array to hold the data
			                            byte[] bytes = new byte[(int)length];
			                            int offset = 0;
			                            int numRead = 0;
			                            while (offset < bytes.length
			                                            && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
			                                    offset += numRead;
			                            }

			                            if (offset < bytes.length) {
			                                    throw new IOException("Could not completely read file "+file.getName());
			                            }
			                            is.close();                                                        
			                            uploadDocuments.setPatientDocument(bytes);
			                    }                                                
			                    //fileExtension=strToken.nextToken();

			            } catch (Exception e) {
			                    e.printStackTrace();
			            }
					StoreInternalIndentT indentT = (StoreInternalIndentT)hbt.load(StoreInternalIndentT.class, internalIndentT.getId());
					indentT.setNacStatus("y");
					hbt.update(indentT);
			
			  StringTokenizer strToken = new StringTokenizer(box.getString("filename" + j), ".");
	            fileName = strToken.nextToken();
	            fileExtension = strToken.nextToken();
	            uploadDocuments.setFileExtension(fileExtension);
	            uploadDocuments.setFileName(fileName);
	            //uploadDocuments.setUploadDate(date);
	            //uploadDocuments.setLastChgDate(date);
	            //uploadDocuments.setLastChgTime(time);
	          // StoreInternalIndentT storeIndentT = new StoreInternalIndentT();
	           System.out.println("internalIndentT.getId()===="+indentT.getId());
	            //storeIndentT.setId(internalIndentT.getId());
	            uploadDocuments.setStoreInternalT(indentT);
	            Users users=new Users();
	            users.setId(box.getInt("userId"));
	            uploadDocuments.setLastChgBy(users);
	            MasHospital masHospital = new MasHospital();
	            masHospital.setId(box.getInt("hospitalId"));
	            uploadDocuments.setHospital(masHospital);
	            hbt.save(uploadDocuments);
				}
			}
		}	
			j++;
			
//===============================================
            //file.delete();
            }
		 
          //}
       }
	 }
	                                
	     

			flag = true;
	

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showEnquiryBroadCastJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<MasEmployee> requestByEmployeeList = new ArrayList<MasEmployee>();
		List<Integer> maxBroadCastNoList = new ArrayList<Integer>();
		List<String> broadCastNoList = new ArrayList<String>();
		Session session = (Session) getSession();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		requestByEmployeeList = session.createCriteria(MasEmployee.class, "mi")
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase()).list();
		maxBroadCastNoList = session
				.createCriteria(StoreBroadcastEnquiryM.class)
				.setProjection(Projections.max("Id")).list();

		int maxbroadCastId = 0;
		String broadCastNo = "";
		if (maxBroadCastNoList.size() > 0 && maxBroadCastNoList.get(0) != null) {
			maxbroadCastId = maxBroadCastNoList.get(0);

			broadCastNoList = session
					.createCriteria(StoreBroadcastEnquiryM.class)
					.add(Restrictions.idEq(maxbroadCastId))
					.setProjection(Projections.property("BroadcastNo")).list();
			if (broadCastNoList.size() > 0) {
				broadCastNo = ""
						+ (Integer.parseInt(broadCastNoList.get(0).toString()) + 1);
			}

		} else {

			broadCastNo = "" + 1;

		}
		map.put("broadCastNo", broadCastNo);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		map.put("requestByEmployeeList", requestByEmployeeList);
		return map;
	}

	@Override
	public Map<String, Object> getItemTypeList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemType> masItemTypeList = new ArrayList<MasItemType>();
		Session session = (Session) getSession();
		int group = 0;
		try {
			masItemTypeList = session.createCriteria(MasItemType.class)
					.createAlias("Group", "g")
					.add(Restrictions.eq("g.Id", box.getInt("group")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("masItemTypeList", masItemTypeList);
		return map;

	}

	public Map<String, Object> getSectionList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreSection> masStoreSectionList = new ArrayList<MasStoreSection>();
		Session session = (Session) getSession();
		try {
			masStoreSectionList = session.createCriteria(MasStoreSection.class)
					.createAlias("ItemType", "g")
					.add(Restrictions.eq("g.Id", box.getInt("itemType")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("masStoreSectionList", masStoreSectionList);
		return map;

	}

	@Override
	public Map<String, Object> getCategoryList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> classList = new ArrayList<MasItemClass>();
		Session session = (Session) getSession();
		try {
			categoryList = session.createCriteria(MasItemCategory.class)
					.createAlias("Section", "section")
					.add(Restrictions.eq("section.Id", box.getInt("section")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			classList = session.createCriteria(MasItemClass.class)
					.createAlias("Section", "section")
					.add(Restrictions.eq("section.Id", box.getInt("section")))
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("categoryList", categoryList);
		map.put("classList", classList);
		return map;

	}

	@Override
	public Map<String, Object> displayEnquiryBroadCastList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("groupId", box.getInt("groupId"));
		map.put("itemTypeId", box.getInt("itemTypeId"));
		map.put("sectionId", box.getInt("sectionId"));
		map.put("categoryId", box.getInt("categoryId"));
		map.put("classId", box.getInt("classId"));
		return map;
	}

	@Override
	public Map<String, Object> submitEnquiryBroadCast(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector remarks = box.getVector("remarks");
		Vector stock = box.getVector("stock");

		boolean flag = false;
		Transaction tx = null;
		try {
			tx = session.beginTransaction();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreBroadcastEnquiryM storeBroadcastEnquiryM = new StoreBroadcastEnquiryM();
			if (box.get("deptId") != null && !box.get("deptId").equals("")) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(box.getInt("deptId"));
				storeBroadcastEnquiryM.setDepartment(masDepartment);
			}

			storeBroadcastEnquiryM.setBroadcastNo(box.getString("broadCastNo"));
			storeBroadcastEnquiryM.setBroadcastType(box
					.getString("typeOfBroadCast"));
			Users users = new Users();
			users.setId(box.getInt(USER_ID));
			storeBroadcastEnquiryM.setRequestedBy(users);
			storeBroadcastEnquiryM.setBroadcastTime(time);
			storeBroadcastEnquiryM.setBroadcastDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			

			storeBroadcastEnquiryM.setStatus("y");

			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			storeBroadcastEnquiryM.setInstitute(masHospital);
			if(!box.getString("broadcastDate").equals("")){
				storeBroadcastEnquiryM.setBroadcastDate(HMSUtil.convertStringTypeDateToDateType(box.getString("broadcastDate")));
			}
			if(!box.getString("validUpToDate").equals("")){
				storeBroadcastEnquiryM.setValidUpTo(HMSUtil.convertStringTypeDateToDateType(box.getString("validUpToDate")));
			}
			hbt.save(storeBroadcastEnquiryM);
			hbt.refresh(storeBroadcastEnquiryM);

			for (int i = 0; i < items1.size(); i++) {

				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {
					StoreBroadcastEnquiryT storeBroadcastEnquiryT = new StoreBroadcastEnquiryT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeBroadcastEnquiryT.setItem(masStoreItem);

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeBroadcastEnquiryT
							.setDemandedQtyExcessQty(new BigDecimal(
									qauntityRecd));
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get("deptId")
							+ " and hospital_id = "
							+ box.getInt("hospitalId") + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeBroadcastEnquiryT
									.setStock((BigDecimal) (storeItemBatchstockList
											.get(0)));
						} else {
							storeBroadcastEnquiryT.setStock(new BigDecimal(0));
						}
					} else {
						storeBroadcastEnquiryT.setStock(new BigDecimal(0));
					}

					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeBroadcastEnquiryT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeBroadcastEnquiryT.setRemarks("");
					}
					storeBroadcastEnquiryT.setEnquiryM(storeBroadcastEnquiryM);
					storeBroadcastEnquiryT.setBroadcastStatus("b");

					hbt.save(storeBroadcastEnquiryT);
					hbt.refresh(storeBroadcastEnquiryT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */

				}
			}
			flag = true;
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showEnquiryBroadCastPendingList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBroadcastEnquiryM> broadCastEnquiryMList = new ArrayList<StoreBroadcastEnquiryM>();
		Session session = (Session) getSession();
		broadCastEnquiryMList = session.createCriteria(
				StoreBroadcastEnquiryM.class).list();
		map.put("broadCastEnquiryMList", broadCastEnquiryMList);
		return map;
	}

	@Override
	public Map<String, Object> showEmergentIndentAcknowledgementJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBroadcastEnquiryT> storeBroadcastEnquiryTList = new ArrayList<StoreBroadcastEnquiryT>();
		List<MasHospital> instituteList = new ArrayList<MasHospital>();
		Session session = (Session) getSession();
		storeBroadcastEnquiryTList = session
				.createCriteria(StoreBroadcastEnquiryT.class)
				.add(Restrictions.eq("EnquiryM.Id",
						box.getInt("storeBroadCastEnquiryMId"))).list();
		instituteList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y")).list();
		map.put("storeBroadcastEnquiryTList", storeBroadcastEnquiryTList);
		map.put("instituteList", instituteList);
		return map;
	}

	@Override
	public Map<String, Object> submitEnquiryBroadCastAcknowledgement(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		Vector stock = box.getVector("stock");
		Vector demandedQty = box.getVector("demandedQty");
		Vector stockForDispatch = box.getVector("availableStockForDispatch");
		Vector remarks = box.getVector("remarks");

		boolean flag = false;
		Transaction tx = null;
		try {
			tx = session.beginTransaction();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			StoreBroadcastAckM storeBroadcastAckM = new StoreBroadcastAckM();
			if (box.get("deptId") != null && !box.get("deptId").equals("")) {
				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setId(box.getInt("deptId"));
				storeBroadcastAckM.setRespondedDepartment(masDepartment);
			}
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			storeBroadcastAckM.setRespondedInstitute(masHospital);

			MasHospital masInstitute = new MasHospital();
			masInstitute.setId(box.getInt("instituteId"));
			storeBroadcastAckM.setRequestedInstitute(masInstitute);

			Users users = new Users();
			users.setId(box.getInt(USER_ID));
			storeBroadcastAckM.setRespondedBy(users);
			storeBroadcastAckM.setRespondedTime(time);
			storeBroadcastAckM.setRespondedDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			storeBroadcastAckM.setStatus("y");

			hbt.save(storeBroadcastAckM);
			hbt.refresh(storeBroadcastAckM);

			for (int i = 0; i < items1.size(); i++) {

				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {
					StoreBroadcastAckT storeBroadcastAckT = new StoreBroadcastAckT();

					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeBroadcastAckT.setItem(masStoreItem);

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get("deptId")
							+ " and hospital_id = "
							+ box.getInt("hospitalId") + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeBroadcastAckT
									.setAvailableStock((BigDecimal) (storeItemBatchstockList
											.get(0)));
						} else {
							storeBroadcastAckT
									.setAvailableStock(new BigDecimal(0));
						}
					} else {
						storeBroadcastAckT.setAvailableStock(new BigDecimal(0));
					}
					if (stockForDispatch.get(i) != null
							&& !stockForDispatch.get(i).toString().equals("")) {
						storeBroadcastAckT
								.setAvailableStockForDispatch((BigDecimal) (stockForDispatch
										.get(i)));
					} else {
						storeBroadcastAckT
								.setAvailableStockForDispatch(new BigDecimal(0));
					}

					if (demandedQty.get(i) != null
							&& !demandedQty.get(i).toString().equals("")) {
						storeBroadcastAckT
								.setDemandedQty((BigDecimal) (demandedQty
										.get(i)));
					} else {
						storeBroadcastAckT.setDemandedQty(new BigDecimal(0));
					}

					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeBroadcastAckT
								.setRemarks(remarks.get(i).toString());
					} else {
						storeBroadcastAckT.setRemarks("");
					}
					storeBroadcastAckT.setAckM(storeBroadcastAckM);

					hbt.save(storeBroadcastAckT);
					hbt.refresh(storeBroadcastAckT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */

				}
			}
			flag = true;
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showEmergentIndentJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasHospital> instituteForIndentNoList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasHospitalType> hospitalTypeList = new ArrayList<MasHospitalType>();
		List<MasHospital> hospitalListForPh = new ArrayList<MasHospital>();
		List<MasInstituteDepartment> instituteDepartmentList = new ArrayList<MasInstituteDepartment>();
		Session session = (Session) getSession();
		Object[] hospitalTypeCode = {"SC","BS"};
		hospitalTypeList = session.createCriteria(MasHospitalType.class).add(Restrictions.eq("Id", box.getInt("hospitalTypeId")))
								.add(Restrictions.in("HospitalTypeCode",hospitalTypeCode )).list();
		
		
		if(hospitalTypeList.size()>0){
			int pscHospitalId = 0;
			hospitalListForPh = session.createCriteria(MasHospital.class).add(Restrictions.eq("Status", "y").ignoreCase())
								.createAlias("HospitalType", "hospitalType").add(Restrictions.eq("Id", box.getInt("hospitalId"))).add(Restrictions.in("hospitalType.HospitalTypeCode",hospitalTypeCode ))
								.add(Restrictions.eq("HospitalType.Id", box.getInt("hospitalTypeId"))).list();
			if(hospitalListForPh.size()>0){
				MasHospital hospital = hospitalListForPh.get(0);
				if(hospital.getParentInstitute() != null){
					pscHospitalId = hospital.getParentInstitute().getId();
					hospitalList = session.createCriteria(MasHospital.class).add(Restrictions.eq("Status", "y").ignoreCase()).add(Restrictions.eq("Id", pscHospitalId)).list();
				}
				
			}
		}else{
			hospitalList = session.createCriteria(MasHospital.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		}
		instituteDepartmentList = session.createCriteria(MasInstituteDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId")))
				.list();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		instituteForIndentNoList = session
				.createCriteria(MasHospital.class, "mh")
				.add(Restrictions.eq("mh.Status", "Y").ignoreCase())
				.add(Restrictions.eq("mh.Id", box.getInt("hospitalId"))).list();
		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		String hospitalCode = "";
		String demandNo = "";
		String finalDemandNo = "";
		int storeFyDocumentNoId = 0;
		if (instituteForIndentNoList.size() > 0) {
			for (MasHospital masHospital : instituteForIndentNoList) {
				hospitalCode = "EM_IND_" + masHospital.getHospitalCode();
			}
		}
		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptType", hospitalCode);

		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
					.get(0);
			if(storeFyDocumentNo.getEmerIndentNo() != null && !storeFyDocumentNo.getEmerIndentNo().equals("")){
			demandNo = ("" + storeFyDocumentNo.getEmerIndentNo());
			
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			maxMap.put("no", demandNo);
			demandNo = getMaxNoByDeptCode(maxMap);
			
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			}else{
				maxMap.put("no", demandNo);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
			}
			
			map.put("demandNoList", demandNoList);
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
			map.put("finalDemandNo", finalDemandNo);
		} else {
			maxMap.put("no", demandNo);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			
			// finalDemandNo = getMaxNo(demandNo);
			map.put("finalDemandNo", finalDemandNo);
		}
		map.put("instituteDepartmentList", instituteDepartmentList);
		map.put("hospitalList", hospitalList);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		map.put("hospitalTypeList", hospitalTypeList);
		return map;
	}

	@Override
	public Map<String, Object> submitEmergencyIndent(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector year1IndentQty = box.getVector("year1IndentQty");
		Vector year2IndentQty = box.getVector("year2IndentQty");
		Vector requiredQty = box.getVector("requiredQty");
		Vector previousYearConsumption = box
				.getVector("previousYearConsumption");
		Vector stock = box.getVector("stock");
		Vector leadTime = box.getVector("leadTime");
		Vector consumptionInLeadTime = box.getVector("consumptionInLeadTime");
		Vector days = box.getVector("days");
		Vector incrementalQty = box.getVector("incrementalQty");
		Vector pendingIndentQty = box.getVector("pendingIndentQty");
		Vector additionalQty = box.getVector("additionalQty");
		Vector remarks = box.getVector("remarks");

		int deptId = box.getInt("deptId");
		// int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);
		int newinternalIndentId = 0;

		int hospitalid = 0;
		hospitalid = box.getInt(RequestConstants.HOSPITAL_ID);

		StoreInternalIndentM storeInternalIndentM = null;
		// StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		boolean flag = false;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
			List<MasDepartment> storeDeptList = new ArrayList<MasDepartment>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			String depCodeMainStore = "";
			URL resourcePath = Thread.currentThread().getContextClassLoader()
					.getResource("adt.properties");
			try {
				Properties prop = new Properties();
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
				depCodeMainStore = prop.getProperty("depCodeMainStore");
			} catch (IOException e) {
				e.printStackTrace();
			}
			storeDeptList = session.createCriteria(MasDepartment.class).add(Restrictions.eq("DepartmentCode", depCodeMainStore)).list();
			int storeDeptId = 0;
			if(storeDeptList.size()>0){
				MasDepartment masDepartment = storeDeptList.get(0);
				storeDeptId = masDepartment.getId();
			}
			StoreInternalIndentM newMObj = new StoreInternalIndentM();
			/*
			 * if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
			 * MasEmployee masEmployee1 = new MasEmployee();
			 * masEmployee1.setId(box
			 * .getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
			 * newMObj.setApprovedBy(masEmployee1); }
			 * 
			 * if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
			 * MasEmployee masEmployee2 = new MasEmployee();
			 * masEmployee2.setId(box
			 * .getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT));
			 * newMObj.setRequestedBy(masEmployee2); } int storeDepartmentId =
			 * 0; if (box.get("storeDepartmentId") != null &&
			 * !box.get("storeDepartmentId").equals("")) { storeDepartmentId =
			 * box.getInt("storeDepartmentId");
			 * 
			 * } if (storeDepartmentId != 0) { MasDepartment masdepartment1 =
			 * new MasDepartment(); masdepartment1.setId(storeDepartmentId);
			 * newMObj.setStoreDepartment(masdepartment1); }
			 */

			newMObj.setDemandNo(demandNo);
			newMObj.setIndentType(box.getString(TYPE_OF_INDENT));
			Users users = new Users();
			users.setId(box.getInt("userId"));

			newMObj.setLastChgBy(users);

			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("employeeId"));
			newMObj.setApprovedBy(masEmployee);
			newMObj.setRequestedBy(masEmployee);

			newMObj.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			newMObj.setStatus("emergent");
			/*
			 * IndentFlag=ALL means All Item Except Laundry Item IndentFlag=LDN
			 * means Indent Only Laundry Item
			 */
			newMObj.setIndentFlag("ALL");
			MasDepartment fromDept = new MasDepartment();
			fromDept.setId(box.getInt("deptId"));
			newMObj.setDepartment(fromDept);
			
			
			if(box.getInt("toDepartmentId") != 0){
				MasDepartment toDepartment = new MasDepartment();
				toDepartment.setId(box.getInt("toDepartmentId"));
				newMObj.setToStore(toDepartment);
			}else{
				MasDepartment storeDepartment = new MasDepartment();
				storeDepartment.setId(storeDeptId);
				newMObj.setToStore(storeDepartment);
			}

			MasHospital masInstitute = new MasHospital();
			masInstitute.setId(hospitalid);
			newMObj.setInstitute(masInstitute);

			
			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("fromHospitalId"));
			newMObj.setHospital(masHospital);

			newMObj.setDemandDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DEMAND_DATE)));
			hbt.save(newMObj);
			hbt.refresh(newMObj);

			/*
			 * session.save(newMObj); session.refresh(newMObj);
			 */
			newinternalIndentId = newMObj.getId();

			// Auto-Increment No for demand No of Department Indent
			/*
			 * Synchronization code by ujjwal to generate the correct demandNo
			 * on 04082014 at silvassa
			 */
			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("fromHospitalId"))).list();
				
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					
					storeFyDocumentNo.setEmerIndentNo(demandNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.saveOrUpdate(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepartment(new MasDepartment(box
							.getInt("deptId")));
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					storeFyDocumentNo.setEmerIndentNo(demandNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("fromHospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.save(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);

				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//
			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					int stockQnt = 0;
					stockQnt = new BigDecimal(stock.get(i).toString())
							.intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get(FROM_WARD)
							+ " and hospital_id = "
							+ box.getInt("fromHospitalId") + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}
					MasDepartment department = new MasDepartment();
					department.setId(box.getInt("deptId"));
					storeInternalIndentT.setDepartment(department);

					if (previousYearConsumption.get(i) != null
							&& !previousYearConsumption.get(i).toString()
									.equals("")) {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(
										previousYearConsumption.get(i)
												.toString()));
					} else {
						storeInternalIndentT
								.setPrevYearConsmQty(new BigDecimal(0));
					}

					if (leadTime.get(i) != null
							&& !leadTime.get(i).toString().equals("")) {
						storeInternalIndentT.setLeadTime(Integer
								.parseInt(leadTime.get(i).toString()));
					} else {
						storeInternalIndentT.setLeadTime(0);
					}
					if (consumptionInLeadTime.get(i) != null
							&& !consumptionInLeadTime.get(i).toString()
									.equals("")) {
						storeInternalIndentT.setConsInLeadTime(new BigDecimal(
								consumptionInLeadTime.get(i).toString()));
					} else {
						storeInternalIndentT
								.setConsInLeadTime(new BigDecimal(0));
					}
					if (days.get(i) != null
							&& !days.get(i).toString().equals("")) {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(days
										.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalPercentage(new BigDecimal(0));
					}
					if (incrementalQty.get(i) != null
							&& !incrementalQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(
										incrementalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setIncrementalQuantity(new BigDecimal(0));
					}
					if (pendingIndentQty.get(i) != null
							&& !pendingIndentQty.get(i).toString().equals("")) {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(
										pendingIndentQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setPendingIndentQty(new BigDecimal(0));
					}
					if (requiredQty.get(i) != null
							&& !requiredQty.get(i).toString().equals("")) {
						storeInternalIndentT.setRequiredQty(new BigDecimal(
								requiredQty.get(i).toString()));
					} else {
						storeInternalIndentT.setRequiredQty(new BigDecimal(0));
					}
					if (additionalQty.get(i) != null
							&& !additionalQty.get(i).toString().equals("")) {
						storeInternalIndentT.setAdditionalQty(new BigDecimal(
								additionalQty.get(i).toString()));
					} else {
						storeInternalIndentT
								.setAdditionalQty(new BigDecimal(0));
					}
					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeInternalIndentT.setRemarks("");
					}
					storeInternalIndentT.setItemStatus("emergent");

					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */

				}
			}
			flag = true;
			box.put("internalIndentId", newinternalIndentId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				// map = getItemDetailsForDepartmentIndentForNextRecord(box);
			} else {
				// map = getItemDetailsForDepartmentIndent(box);
			}
			/*
			 * List<StoreInternalIndentM> storeInternalIndentMList2 = session
			 * .createCriteria(StoreInternalIndentM.class)
			 * .add(Restrictions.eq("Hospital.Id", hospitalid))
			 * .add(Restrictions.eq("Id", newinternalIndentId)).list();
			 * box.put(DEMAND_NO,
			 * storeInternalIndentMList2.get(0).getDemandNo());
			 */
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		map.put("flag", flag);
		map.put("newinternalIndentId", newinternalIndentId);
		return map;
	}

	@Override
	public Map<String, Object> responseForIndentWithinInstitue(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> emergencyIndentList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		emergencyIndentList = session
				.createCriteria(StoreInternalIndentM.class)
				.add(Restrictions.eq("Status", "Emergent Indent Issue").ignoreCase()).add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.setProjection(
						Projections.projectionList()
								.add(Projections.property("DemandNo"))
								.add(Projections.property("Id"))).list();
		map.put("emergencyIndentList", emergencyIndentList);
		return map;
	}

	@Override
	public Map<String, Object> responseForIndentGrid(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> indentFromInstituteList = new ArrayList<StoreIssueT>();
		Session session = (Session) getSession();
		
		indentFromInstituteList = session.createCriteria(StoreIssueT.class)
				.createAlias("IssueM", "header")
				.createAlias("header.RequestNo", "indent")
				.add(Restrictions.eq("indent.Id", box.getInt("indentId")))
				.list();
		map.put("indentFromInstituteList", indentFromInstituteList);
		return map;
	}

	@Override
	public Map<String, Object> responseForLocalPurchase(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoHeader> vendorList = new ArrayList<StorePoHeader>();
		Session session = (Session) getSession();
		vendorList = session.createCriteria(StorePoHeader.class)
				.list();
		map.put("vendorList", vendorList);
		return map;
	}

	@Override
	public Map<String, Object> showIndentWithinInstitute(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<MasInstituteDepartment> departmentForIndentNoList = new ArrayList<MasInstituteDepartment>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasInstituteDepartment>instituteDepartmentList = new ArrayList<MasInstituteDepartment>();
		List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session) getSession();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		departmentList = session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		instituteDepartmentList = session.createCriteria(MasInstituteDepartment.class)
				.add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId")))
				.list();

		demandNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		

		departmentForIndentNoList = session
				.createCriteria(MasInstituteDepartment.class, "mi")
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase())
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId")))
				.list();
		String demandNo = "";
		String finalDemandNo = "";
		int storeFyDocumentNoId = 0;
		String deptType = "";
		if (departmentForIndentNoList.size() > 0) {
			for (MasInstituteDepartment masInstituteDepartment : departmentForIndentNoList) {
				if(masInstituteDepartment.getDepartment()!=null && masInstituteDepartment.getDepartment().getDepartmentType()!=null)
				deptType = "IND_"
						+ masInstituteDepartment.getDepartment().getDepartmentType()
								.getDepartmentTypeCode();
			}
		}

		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptType", deptType);

		if (demandNoList != null && demandNoList.size() > 0) {
			StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
					.get(0);
			if(storeFyDocumentNo.getInIndentNo() != null && !storeFyDocumentNo.getInIndentNo().equals(0) && !storeFyDocumentNo.getInIndentNo().equals("")){
			demandNo = ("" + storeFyDocumentNo.getInIndentNo());
			storeFyDocumentNoId = storeFyDocumentNo.getId();
			maxMap.put("no", demandNo);
			demandNo = getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("demandNoList", demandNoList);
			map.put("storeFyDocumentNoId", storeFyDocumentNoId);
			map.put("finalDemandNo", finalDemandNo);
			}else{
				maxMap.put("no", demandNo);
				finalDemandNo = getMaxNoByDeptCode(maxMap);
				map.put("finalDemandNo", finalDemandNo);
			}
		} else {
			// /*
			maxMap.put("no", demandNo);
			// demandNo =getMaxNoByDeptCode(maxMap);
			finalDemandNo = getMaxNoByDeptCode(maxMap);
			// finalDemandNo = getMaxNo(demandNo);
			map.put("finalDemandNo", finalDemandNo);
		}
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		map.put("departmentList", departmentList);
		map.put("instituteDepartmentList",instituteDepartmentList);
		return map;
	}

	@Override
	public Map<String, Object> submitIndentWithinInstitute(Box box) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		session = (Session) getSession();

		Vector items1 = box.getVector("itemId");
		Vector items = new Vector();
		try {
			for (int i = 0; i < items1.size(); i++) {
				if (!items1.get(i).toString().equals("")) {
					items.add(items1.get(i));
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		Vector qtyRequest = box.getVector("qtyRequest");
		Vector remarks = box.getVector("remarks");
		Vector stock = box.getVector("stock");

		int deptId = box.getInt("deptId");
		// int internalIndentId = box.getInt("internalIndentId");
		String demandNo = box.get(DEMAND_NO);
		int newinternalIndentId = 0;

		int hospitalid = 0;
		hospitalid = box.getInt(RequestConstants.HOSPITAL_ID);

		StoreInternalIndentM storeInternalIndentM = null;
		// StoreInternalIndentM newMObj = null;
		StoreInternalIndentT storeInternalIndentT = null;
		MasStoreItem masStoreItem = null;
		int sr_no = 0;
		// int currentYear = box.getInt(MMF_DEPARTMENT_DATE);
		Transaction tx = null;
		boolean flag = false;
		try {
			tx = session.beginTransaction();
			List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);

			/*
			 * Code for Duplicate Indent No Date 21 Jan 2011
			 */
			List<StoreInternalIndentM> storeInternalIndentMForDemandNoList = new ArrayList<StoreInternalIndentM>();
			storeInternalIndentMForDemandNoList = session
					.createCriteria(StoreInternalIndentM.class, "siim")
					.add(Restrictions.eq("siim.Department.Id", deptId))
					.add(Restrictions.eq("siim.Hospital.Id",
							box.getInt("hospitalId")))
					.add(Restrictions.eq("siim.DemandNo", demandNo)).list();

			StoreInternalIndentM newMObj = new StoreInternalIndentM();
			if (box.getInt(APPROVED_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee1 = new MasEmployee();
				masEmployee1.setId(box.getInt("employeeId"));
				newMObj.setApprovedBy(masEmployee1);
			}

			if (box.getInt(REQUEST_BY_EMPLOYEE_ID_DEPENDENT_INDENT) != 0) {
				MasEmployee masEmployee2 = new MasEmployee();
				masEmployee2.setId(box.getInt("employeeId"));
				newMObj.setRequestedBy(masEmployee2);
			}
			if(box.getString("remarks") != null){
				newMObj.setRemarks(box.getString("remarks"));
			}

			/*
			 * int storeDepartmentId = 0; if (box.get("storeDepartmentId") !=
			 * null && !box.get("storeDepartmentId").equals("")) {
			 * storeDepartmentId = box.getInt("storeDepartmentId");
			 * 
			 * } if (storeDepartmentId != 0) { MasDepartment masdepartment1 =
			 * new MasDepartment(); masdepartment1.setId(storeDepartmentId);
			 * newMObj.setStoreDepartment(masdepartment1); }
			 */

			newMObj.setDemandNo(demandNo);
			newMObj.setIndentType(box.getString(TYPE_OF_INDENT));
			Users users = new Users();
			users.setId(box.getInt(USER_ID));

			newMObj.setLastChgBy(users);
			MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("employeeId"));
			newMObj.setApprovedBy(masEmployee);
			newMObj.setRequestedBy(masEmployee);

			newMObj.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));

			newMObj.setStatus("Intra Indent Waiting");
			/*
			 * IndentFlag=ALL means All Item Except Laundry Item IndentFlag=LDN
			 * means Indent Only Laundry Item
			 */
			newMObj.setIndentFlag("ALL");
			MasDepartment fromDept = new MasDepartment();
			fromDept.setId(box.getInt("deptId"));
			newMObj.setDepartment(fromDept);

			MasDepartment toDept = new MasDepartment();
			toDept.setId(box.getInt(TO_WARD));
			newMObj.setToStore(toDept);

			MasHospital masHospital = new MasHospital();
			masHospital.setId(box.getInt("hospitalId"));
			newMObj.setHospital(masHospital);

			newMObj.setDemandDate(HMSUtil.convertStringTypeDateToDateType(box
					.getString(DEMAND_DATE)));
			hbt.save(newMObj);
			hbt.refresh(newMObj);

			/*
			 * session.save(newMObj); session.refresh(newMObj);
			 */
			newinternalIndentId = newMObj.getId();

			// Auto-Increment No for demand No of Department Indent
			/*
			 * Synchronization code by ujjwal to generate the correct demandNo
			 * on 04082014 at silvassa
			 */

			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();

				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId"))).list();
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					storeFyDocumentNo.setInIndentNo(demandNo);

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);

				} else {

					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setInIndentNo(demandNo);
					storeFyDocumentNo.setDepartment(new MasDepartment(box
							.getInt("deptId")));
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
				}
			}

			/*
			 * End By Ujjwal for synchronization
			 */
			//

			for (int i = 0; i < items1.size(); i++) {
				if (items1.get(i) != null
						&& !items1.get(i).toString().equals("")) {

					masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer
							.valueOf(items1.get(i).toString()));

					storeInternalIndentT = new StoreInternalIndentT();

					storeInternalIndentT.setItem(masStoreItem);
					if (box.getInt("internalIndentId") != 0) {
						// Master already exists
						storeInternalIndentT.setInternal(storeInternalIndentM);
					} else {
						// Create new department Master record
						storeInternalIndentT.setInternal(newMObj);
					}
					// storeInternalIndentT.setMmfQty(Integer.valueOf(qtymmf.get(i).toString()));

					// int stockQnt = 0;
					// stockQnt = new
					// BigDecimal(stock.get(i).toString()).intValue();
					int qauntityRecd = new BigDecimal(qtyRequest.get(i)
							.toString()).intValue();
					storeInternalIndentT.setSrNo(++sr_no);
					storeInternalIndentT.setQtyRequest(qauntityRecd);
					String qry = "select sum(closing_stock) from store_item_batch_stock where item_id="
							+ masStoreItem.getId()
							+ " and department_id="
							+ box.get("deptId")
							+ " and hospital_id = "
							+ hospitalid + " ";
					List<Object> storeItemBatchstockList = session
							.createSQLQuery(qry).list();
					if (storeItemBatchstockList != null
							&& storeItemBatchstockList.size() > 0) {
						if (storeItemBatchstockList.get(0) != null) {
							storeInternalIndentT
									.setStockInHand(((BigDecimal) storeItemBatchstockList
											.get(0)).intValue());
						} else {
							storeInternalIndentT.setStockInHand(0);
						}
					} else {
						storeInternalIndentT.setStockInHand(0);
					}
					MasDepartment department = new MasDepartment();
					department.setId(box.getInt("deptId"));
					storeInternalIndentT.setDepartment(department);

					if (remarks.get(i) != null
							&& !remarks.get(i).toString().equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					} else {
						storeInternalIndentT.setRemarks("");
					}
					storeInternalIndentT.setItemStatus("Intra Indent Waiting");

					hbt.save(storeInternalIndentT);
					hbt.refresh(storeInternalIndentT);
					/*
					 * session.save(storeInternalIndentT);
					 * session.refresh(storeInternalIndentT);
					 */

				}
			}

			box.put("internalIndentId", newinternalIndentId);
			if (!box.getString("itemIdForNextRecord").equals("null")) {
				// map = getItemDetailsForDepartmentIndentForNextRecord(box);
			} else {
				// map = getItemDetailsForDepartmentIndent(box);
			}
			List<StoreInternalIndentM> storeInternalIndentMList2 = session
					.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Hospital.Id", hospitalid))
					.add(Restrictions.eq("Id", newinternalIndentId)).list();
			box.put(DEMAND_NO, storeInternalIndentMList2.get(0).getDemandNo());
			tx.commit();
			flag = true;
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null) {
				tx.rollback();
			}
		}
		map.put("flag", flag);
		map.put("newinternalIndentId", newinternalIndentId);
		return map;
	}

	public Map<String, Object> searchIndentTrackingList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreInternalIndentM> searchIndentList = new ArrayList<StoreInternalIndentM>();
		//List<EmpScMapping> employeeList = new ArrayList<EmpScMapping>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		String indentNo = "";
		Date fromDate = new Date();
		Date toDate = new Date();
		String fromDateString = "";
		String toDateString = "";
		String pvmsNo = "";
		String nomenclature = "";
		int storeId = 0;
		Session session = (Session) getSession();
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");

		if (!((String) box.getString("fromDate")).equals("")) {
			try {
				fromDateString = formatterOut.format(formatterIn
						.parse((String) box.getString("fromDate")));
				fromDate = java.sql.Date.valueOf(fromDateString);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		if (!((String) box.getString("toDate")).equals("")) {
			try {
				toDateString = formatterOut.format(formatterIn
						.parse((String) box.getString("toDate")));
				toDate = java.sql.Date.valueOf(toDateString);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		// indentNo = (String) dataMap.get("indentNo");
		// pvmsNo = (String) dataMap.get("pvmsNo");
		// nomenclature = (String) dataMap.get("nomenclature");
		// storeId = (Integer) dataMap.get("storeId");
		Criteria criteria = null;
		if(box.getString("deptType").equalsIgnoreCase("CSTR")){
			criteria = session.createCriteria(StoreInternalIndentM.class)
				.createAlias("Hospital", "hospital")
				.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")));
		
		}else{
			
			criteria = session.createCriteria(StoreInternalIndentM.class)
					.createAlias("Hospital", "hospital")
					.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId"))).add(Restrictions.eq("Department.Id", box.getInt("deptId")));
		}
		// -----------------w status for indent Within institute
		// ---------------- s status for issue of indent-------
		String[] statusArray = { "Intra Indent Waiting", "issue",
				"intra indent reject", "Intra Indent Approved" };

		criteria.add(Restrictions.in("Status", statusArray));
		if (!box.getString("indentNo").equals("")) {
			criteria.add(Restrictions.eq("DemandNo", box.getString("indentNo")));
		} else if (!fromDateString.equals("")) {
			criteria.add(Restrictions.ge("DemandDate", fromDate));
		} else if (!toDateString.equals("")) {
			criteria.add(Restrictions.le("DemandDate", toDate));
		} else if (!pvmsNo.equals("") || !nomenclature.equals("")) {
			criteria.createAlias("StoreInternalIndentTs", "sit");
			criteria.createAlias("sit.Item", "msi");
			if (!pvmsNo.equals("")) {
				criteria.add(Restrictions.eq("msi.PvmsNo", pvmsNo));
			}
			if (!nomenclature.equals(""))
				criteria.add(Restrictions.eq("msi.Nomenclature", nomenclature));
		}

		searchIndentList = criteria.list();
		
		Criteria c = null;
		if(box.getString("deptType").equalsIgnoreCase("CSTR")){
			 c = session.createCriteria(StoreInternalIndentM.class);
			c.add(Restrictions.in("Status", statusArray));
			c.createAlias("Hospital", "hospital");
			c.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")));
			c.setProjection(Projections.property("DemandNo"));
			
		}else{
			 c = session.createCriteria(StoreInternalIndentM.class);
			c.add(Restrictions.in("Status", statusArray));
			c.createAlias("Hospital", "hospital");
			c.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")));
			c.setProjection(Projections.property("DemandNo"));
			c.add(Restrictions.eq("Department.Id", box.getInt("deptId")));
		}
			List<Object[]> iList = c.list();

		/*employeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();*/
		employeeList =  session.createCriteria(EmpScMapping.class).createAlias("Employee", "emp")
				.add(Restrictions.eq("Department.Id", box.getInt("deptId"))).createAlias("emp.Hospital", "hospital")
				.add(Restrictions.eq("emp.Status", "y").ignoreCase())
				.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")))
				.addOrder(Order.asc("emp.EmployeeName")).list();
		map.put("indentTrackingList", searchIndentList);
		map.put("iList", iList);
		map.put("employeeList", employeeList);
		return map;
	}

	@Override
	public Map<String, Object> updateDistrictDemandedQty(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector demandedQty = box.getVector("qtyRequest");
		for (int i = 0; i < storeInternalTId.size(); i++) {
			StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
			if (storeInternalTId.get(i) != null
					&& !storeInternalTId.get(i).equals("")) {
				int internalTId = Integer.parseInt(storeInternalTId.get(i)
						.toString());
				storeInternalIndentT = (StoreInternalIndentT) getHibernateTemplate()
						.load(StoreInternalIndentT.class, internalTId);
				if (demandedQty.get(i) != null
						&& !demandedQty.get(i).equals("")) {
					storeInternalIndentT.setQtyRequest(Integer
							.parseInt(demandedQty.get(i).toString()));
				}
				hbt.update(storeInternalIndentT);
			}
		}
		map.put("itemId", box.getInt("itemId"));
		map.put("itemCode", box.getString("itemCode"));
		map.put("itemName", box.getString("itemName"));
		map.put("au", box.getString("au"));
		map.put("rowVal", box.getInt("rowVal"));
		map = showDistrictIndentPopupJsp(box);
		return map;
	}

	@Override
	public Map<String, Object> getItemForAutoComplete(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		List<Object[]> itemList = new ArrayList<Object[]>();

		String pvmsNo = "";
		String nomenclature = "";
		int sectionId = 0;

		pvmsNo = box.getString("pvmsNo");
		nomenclature = box.getString("nomenclature");
		sectionId = box.getInt("sectionId");
		Criteria crit = null;
		crit = session.createCriteria(MasStoreItem.class).add(
				Restrictions.eq("Status", "y"));

		/*
		 * if(sectionId!=0){ crit = crit.add(Restrictions.eq("Section.Id",
		 * sectionId)); }
		 */

		if (!pvmsNo.equals("")) {
			crit = crit.add(Restrictions.ilike("PvmsNo", "%" + pvmsNo + "%"));
		} else if (!nomenclature.equals("")) {
			crit = crit.add(Restrictions.ilike("Nomenclature", "%"
					+ nomenclature + "%"));
		}
		itemList = crit.setProjection(
				Projections.projectionList().add(Projections.property("Id"))
						.add(Projections.property("PvmsNo"))
						.add(Projections.property("Nomenclature"))).list();
		map.put("itemList", itemList);
		return map;
	}

	public Map<String, Object> displayIndentTrackingList(
			Map<String, Object> dataMap) {
		int indentId = 0;
		 int hospitalId = 0; 
		indentId = (Integer) dataMap.get("indentId");
		hospitalId = (Integer) dataMap.get("hospitalId");
		List<StoreInternalIndentT> displayIndentList = new ArrayList<StoreInternalIndentT>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		Criteria c = session.createCriteria(StoreInternalIndentT.class);
		c.createAlias("Internal", "sim");
		c.createAlias("sim.Hospital", "hos");
		c.add(Restrictions.eq("sim.Id", indentId));

		List<Object[]> issueTList = session
				.createCriteria(StoreIssueT.class)
				.createAlias("IssueM", "im")
				.createAlias("im.RequestNo", "indm")
				.createAlias("Item", "item")
				.add(Restrictions.eq("indm.Id", indentId))
				.setProjection(
						Projections.projectionList()
								.add(Projections.sum("QtyIssued"))
								.add(Projections.groupProperty("item.Id")))
				.list();

		displayIndentList = c.list();
		//---------------------code for stock message-----------------------------//
		String depCodeMainStore = "";
		String stockMessage = "";
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			Properties prop = new Properties();
			prop.load(new FileInputStream(new File(resourcePath.getFile())));
			depCodeMainStore = prop.getProperty("depCodeMainStore");
		} catch (IOException e) {
			e.printStackTrace();
		}
		String blockStatus [] = {"Temporary Block","Parmanent Block"};
	List<StoreInternalIndentT>internalIndentTList = new ArrayList<StoreInternalIndentT>();
	List<Object[]>stockList = new ArrayList<Object[]>();
	List<Integer>itemIdList = new ArrayList<Integer>();
		if(indentId != 0){
				internalIndentTList= session.createCriteria(StoreInternalIndentT.class)	.add(Restrictions.eq("Internal.Id", indentId)).list();
				if(internalIndentTList.size()>0){
					for(StoreInternalIndentT storeInternalIndentT :internalIndentTList){
						int itemId = storeInternalIndentT.getItem().getId();
						itemIdList.add(itemId);
						stockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.in("Item.Id", itemIdList)).createAlias("Department", "dept")
								.add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("dept.DepartmentCode", depCodeMainStore))
								.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
								.setProjection(Projections.projectionList().add(Projections.groupProperty("Item.Id")).add(Projections.sum("ClosingStock"))).list();

					}
					
				}
				
			}
		
	/*	if (stockList != null && stockList.size() > 0) {
			for (Object[] obj : stockList) {
				
				if(obj[1] != null){
					stockMessage = "Stock Avialable in Main Store";
				}else{
					stockMessage = "Stock Avialable in Main Store";
				}
			}

		} else {
			stockMessage = "Stock Not Avialable in Main Store";
		}
		dataMap.put("stockMessage", stockMessage);*/
		
		
		
		// employeeList =
		// session.createCriteria(MasEmployee.class).add(Restrictions.eq("Hospital.Id",
		// hospitalId)).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		dataMap.put("stockList", stockList);
		dataMap.put("employeeList", employeeList);
		dataMap.put("displayIndentList", displayIndentList);
		dataMap.put("issueTList", issueTList);
		// dataMap.put("employeeList", employeeList);
		return dataMap;
	}

	@Override
	public Map<String, Object> showIssueToOtherInstituteJsp(
			Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String deptType = "";
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		if (dataMap.get("userName") != null) {
			userName = ("" + dataMap.get("userName"));
		}
		if (dataMap.get("deptType") != null) {
			deptType = ("" + dataMap.get("deptType"));
		}
		Map map = new HashMap();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<StoreInternalIndentM> storeInternalPendingIndentList = new ArrayList<StoreInternalIndentM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		List<MasHospital> toInstituteList = new ArrayList<MasHospital>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<MasStoreBrand> masStoreBrandList = new ArrayList<MasStoreBrand>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
		List<StoreSetup> storeSetupList = new ArrayList<StoreSetup>();
		List<Object[]> employees = new ArrayList<Object[]>();
		StoreSetup storeSetup = new StoreSetup();
		String max = "";
		String startNo = "";
		String no = "";
		String deptName = "";
		try {
			storeSetupList = session.createCriteria(StoreSetup.class).list();
			if (storeSetupList != null && storeSetupList.size() > 0) {
				storeSetup = (StoreSetup) storeSetupList.get(0);
			}
			/*
			 * storeInternalPendingIndentList = session
			 * .createCriteria(StoreInternalIndentM.class)
			 * .add(Restrictions.eq("Status", "o")) .createAlias("ToStore", "d")
			 * .add(Restrictions.eq("d.Id", deptId))
			 * .addOrder(Order.desc("Id")).list();
			 */
			// patientList=getHibernateTemplate().find("from
			// jkt.hms.masters.business.Patient as pt where pt.Status='y'");
			departmentList = session.createCriteria(MasInstituteDepartment.class).createAlias("Department", "dept").add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Institute.Id", hospitalId)).addOrder(Order.asc("dept.DepartmentName")).list();


			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			toInstituteList = session.createCriteria(MasHospital.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee where Status='Y' and Hospital.Id = '"
							+ hospitalId + "' order by FirstName asc");

			Query q = session
					.createQuery("select e.Id, e.FirstName,e.LastName from MasEmployee e where Status='Y' and Hospital.Id = '"
							+ hospitalId + "' order by FirstName asc");
			employees = (List<Object[]>) q.list();

			employeeDeptByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
							+ deptId
							+ " and emp.Status='Y' and Hospital.Id = '"
							+ hospitalId + "' order by emp.FirstName asc");
			/*
			 * storeFyDocumentNoList = getHibernateTemplate().find("from
			 * jkt.hms.masters.business.StoreFyDocumentNo as sfdn where
			 * sfdn.Department.Id='"+deptId+"' "); for (StoreFyDocumentNo
			 * storeFyDocumentNo :storeFyDocumentNoList ) {
			 * if(storeFyDocumentNo.getIssueDeptNo() !=null){
			 * no=(""+storeFyDocumentNo.getIssueDeptNo());
			 * 
			 * }
			 */

			List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
			List<Integer> maxIdList = new ArrayList<Integer>();
			/*
			 * Commented By Ujjwal For Performance
			 */
			/*
			 * issueNoList = session.createCriteria(StoreIssueM.class)
			 * .setProjection(Projections.property("IssueNo")).list();
			 */
			// String queryForNo =
			// "select top 1 issue_no from store_issue_m order by id desc";
			// ---------changes by anamika-----------------
			//String queryForNo = "select  issue_no from store_issue_m order by id desc LIMIT 1";
			int maxId = 0;
			
			maxIdList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id", deptId))
					 .setProjection(Projections.max("Id")).list();
			//issueNoList = session.createSQLQuery(queryForNo).list();
			
			if(maxIdList.size()>0 && maxIdList.get(0)!= null){
				issueNoList = session.createCriteria(StoreIssueM.class).add(Restrictions.eq("Id", maxIdList.get(0))).list();
				if(issueNoList.size()>0){
					no = issueNoList.get(0).getIssueNo();
				}
			}
			/*
			 * searchListForPopup = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
			 * + deptId +
			 * "' and sim.Status='o' and sim.IssueType='i'  order by IssueNo desc"
			 * );
			 */
			searchListForPopup = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Status", "o"))
					.add(Restrictions.eq("IssueType", "i"))
					.addOrder(Order.desc("Id")).list();
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();

			String previousDate = HMSUtil.getPrevDate(Integer
					.parseInt(properties
							.getProperty("store.pending_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate = HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			if (mapDate.get("currentDate") != null) {
				currentDate = (String) mapDate.get("currentDate");
			}
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qry = "";
			/*
			 * qry =
			 * "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
			 * + " sim.id = sit.internal_id where sim.department_id="+deptId+
			 * " and (sit.qty_request - isnull(sit.qty_issued,0)) > 0 group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc"
			 * ;
			 */
			
			qry = "select distinct sim.id,sim.demand_no,sim.demand_date,dept_req.department_name,fromHospital.hospital_name as fromHosp,tohospital.hospital_name as to_hosp,"
					+ "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
					+ " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,"
					+ "  mas_hospital fromHospital,mas_hospital tohospital,mas_employee as emp,mas_department dept_req where emp.employee_id=sim.requested_by "
					+ " and dept_req.department_id=sim.department_id  and fromHospital.hospital_id=sim.hospital_id and tohospital.hospital_id=sim.institute_id "
					 + " and sim.to_store= "+ deptId
					+ " and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
					+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
					+ "' and '"
					+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
					// + "' and sim.hospital_id = '"+hospitalId+"' "
					+ "' and institute_id = "
					+ hospitalId
					+ "  and sim.status= 'emergent'  order by sim.id desc";

			//
			storeInternalIndentPendingList = session.createSQLQuery(qry).list();
			map.put("storeInternalIndentPendingList",
					storeInternalIndentPendingList);

		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			// max = getMaxNo(no);
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", deptType);
			max = getMaxNoByDeptCode(maxMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("deptName", deptName);
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		/*
		 * map.put("storeInternalPendingIndentList",
		 * storeInternalPendingIndentList);
		 */map.put("departmentList", departmentList);
		map.put("toInstituteList", toInstituteList);
		map.put("employeeList", employeeList);
		map.put("employeeDeptByList", employeeDeptByList);
		map.put("max", max);
		map.put("masStoreBrandList", masStoreBrandList);
		map.put("searchListForPopup", searchListForPopup);
		map.put("patientList", patientList);
		map.put("storeSetup", storeSetup);
		map.put("employees", employees);
		return map;
	}

	@Override
	public Map getIndentListForIssueToOtherInstitute(Map<String, Object> dataMap) {
		int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		/*
		 * List<StoreInternalIndentM> storeInternalIndentMList = new
		 * ArrayList<StoreInternalIndentM>();
		 */
		List<Object[]> storeInternalIndentMList = new ArrayList<Object[]>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int toInstituteId = 0;
		String deptName = "";
		Session session = getSession();
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("userName") != null) {
				userName = ("" + dataMap.get("userName"));
			}
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""
						+ dataMap.get("dispenceryId"));
			}
			if (dataMap.get("toInstituteId") != null) {
				toInstituteId = Integer.parseInt(""
						+ dataMap.get("toInstituteId"));
			}
			/*
			 * Code for Department Issue Code By Mukesh Narayan SIngh Date 02
			 * Dec 2010
			 */
			List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
			searchListForPopup = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
							+ deptId
							+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = '"
							+ hospitalId + "'  order by Id desc");

			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			map.put("searchListForPopup", searchListForPopup);
			/**
			 * End of Code for Department Issue Code By Mukesh Narayan SIngh
			 * Date 02 Dec 2010
			 */
			/**
			 * Commented By Ritu
			 * 
			 */
			/*
			 * storeInternalIndentMList = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Department.Id='"
			 * + dispenceryId + "' and siim.Status='o' and siim.ToStore='" +
			 * deptId + "'");
			 */
			/**
			 * Added By Ritu for multiple issue of a indent
			 */
			String previousDate = HMSUtil.getPrevDate(Integer
					.parseInt(properties
							.getProperty("store.pending_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate = HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			if (mapDate.get("currentDate") != null) {
				currentDate = (String) mapDate.get("currentDate");
			}
			String qry = "";
			/**
			 * deptId==151 means Laundry departmentIdForLaundry=151
			 */

			int laundry_department_id = 0;
			laundry_department_id = Integer.parseInt(properties
					.getProperty("departmentIdForLaundry"));

			if (deptId == laundry_department_id) {
				qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
						+ " sim.id = sit.internal_id where sim.department_id="
						+ dispenceryId
						+ " and sim.to_store="
						+ deptId
						+ " and sim.status='o' and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
						+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
						+ "' and '"
						+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
						+ "' and sim.hospital_id = '"
						+ hospitalId
						+ "' group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";

			} else {
				qry = "select sim.id,sim.demand_no,sim.demand_date,dept.department_name from store_internal_indent_m sim left join store_internal_indent_t sit on "
						+ " sim.id = sit.internal_id left join mas_department dept on sim.department_id = dept.department_id where sim.hospital_id = "
						+ toInstituteId
						+ " and indent_flag='ALL' and sim.status= 'emergent' and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
						+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
						+ "' and '"
						+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
						+ "' and sim.institute_id = "
						+ hospitalId
						+ " group by sim.demand_no,sim.id,sim.demand_date,dept.department_name order by sim.demand_date desc";

			}
			//
			storeInternalIndentMList = session.createSQLQuery(qry).list();
		
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qryPending = "";
			qryPending = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,"
					+ "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
					+ " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="
					+ deptId
					+ " and (sit.qty_request -coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
					+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
					+ "' and '"
					+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
					+ "' and sim.hospital_id = "
					+ hospitalId
					+ " and sim.status= 'emergent'	group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name ,emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";

			storeInternalIndentPendingList = session.createSQLQuery(qryPending)
					.list();
			map.put("storeInternalIndentPendingList",
					storeInternalIndentPendingList);
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
			employeeDeptByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
							+ deptId
							+ " and emp.Status='Y' and emp.Hospital.Id = '"
							+ hospitalId + "' order by emp.FirstName asc");
			map.put("employeeDeptByList", employeeDeptByList);
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			map.put("deptName", deptName);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public Map<String, Object> searchIndentDetailsForOtherInstitute(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int requestNo = box.getInt("requestNo");
		List<Object[]> indentTList = new ArrayList<Object[]>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasHospital> toInstituteList = new ArrayList<MasHospital>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		int toInstituteId = 0;
		toInstituteId = box.getInt("toInstituteId");

		try {
			Session session = getSession();
			indentTList = getHibernateTemplate()
					.find("select item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,"
							+ "siim_a.Id,siit_b.Id,max(siit_b.QtyRequest),sum(siit_b.QtyIssued),siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id"
							+ " from jkt.hms.masters.business.StoreInternalIndentT as siit_b join siit_b.Internal as siim_a "
							+ " join siit_b.Item as item_i join item_i.ItemConversion as ic_c join ic_c.PurchaseUnit as pu_d where siim_a.Id="
							+ requestNo
							+ ""
							+ " and siit_b.QtyRequest>coalesce(siit_b.QtyIssued,'0') and siim_a.Institute.Id = '"
							+ box.getInt("hospitalId")
							+ "'  group by item_i.Id,item_i.PvmsNo,item_i.Nomenclature,pu_d.UnitName,siim_a.Department.Id,siim_a.Id,siit_b.Id,siit_b.SrNo,siim_a.DemandDate,siim_a.RequestedBy.Id order by item_i.Nomenclature");

			int i = 0;
			List<BigDecimal> stockAvailableList = new ArrayList<BigDecimal>();
			List stockList = new ArrayList();
			List<BigDecimal> loginDepartmentAvailableStockList = new ArrayList<BigDecimal>();
			List loginDepartmentStockList = new ArrayList();
			int requestByEmpId = 0;
			String demandIndentDate = "";
			int departmentId = 0;
			int itemId = 0;
			for (Object[] obj : indentTList) {
				BigDecimal stock = new BigDecimal(0);
				BigDecimal loginDepartmentStock = new BigDecimal(0);
				departmentId = Integer.parseInt(obj[4].toString());
				itemId = Integer.parseInt(obj[0].toString());
				requestByEmpId = Integer.parseInt(obj[11].toString());
				demandIndentDate = HMSUtil
						.convertDateToStringTypeDateOnly((Date) obj[10]);
				String str3 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i  where a.item_id=i.item_id and a.item_id = '"
						+ obj[0]
						+ "' and a.department_id='"
						+ departmentId
						+ "' and a.hospital_id = '"
						+ box.getInt("toInstituteId")
						+ "' and a.closing_stock >0 and  (block_status not in('Temporary Block','Parmanent Block') or block_status is null) group by a.item_id,i.pvms_no order by i.pvms_no";
				stockAvailableList = session.createSQLQuery(str3).list();

				if (stockAvailableList.size() > 0
						&& stockAvailableList.get(0) != null) {
					stock = (BigDecimal) stockAvailableList.get(0);
				} else {
					stock = new BigDecimal("0");
				}
				i++;
				stockList.add(stock);
				
				String str4 = "select sum(a.closing_stock) from store_item_batch_stock a,mas_store_item i  where a.item_id=i.item_id and a.item_id = "
						+ itemId
						+ " and a.department_id="
						+ box.getInt("deptId")
						+ " and a.hospital_id = "
						+ box.getInt("hospitalId")
						+ " and a.closing_stock >0 and  (block_status not in('Temporary Block','Parmanent Block') or block_status is null) group by a.item_id,i.pvms_no order by i.pvms_no";
				loginDepartmentAvailableStockList = session
						.createSQLQuery(str4).list();

				if (loginDepartmentAvailableStockList.size() > 0
						&& loginDepartmentAvailableStockList.get(0) != null) {
					loginDepartmentStock = (BigDecimal) loginDepartmentAvailableStockList
							.get(0);
				} else {
					loginDepartmentStock = new BigDecimal("0");
				}
				i++;
				loginDepartmentStockList.add(loginDepartmentStock);

			}
			// employeeList = session.createCriteria(MasEmployee.class).list();
			toInstituteList = session.createCriteria(MasHospital.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			employeeList = getHibernateTemplate()
					.find("from jkt.hms.masters.business.MasEmployee where Status='Y' and Hospital.Id = '"
							+ box.getInt("hospitalId")
							+ "' order by FirstName asc");
			departmentList = session.createCriteria(MasInstituteDepartment.class).createAlias("Department", "dept").add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId"))).addOrder(Order.asc("dept.DepartmentName")).list();

			List<Object[]> employees = new ArrayList<Object[]>();
			Query q = session
					.createQuery("select e.Id, e.FirstName,e.LastName from MasEmployee e where e.Id="
							+ box.getInt(REQUEST_BY));
			employees = (List<Object[]>) q.list();
			map.put("employeeList", employeeList);
			map.put("departmentList", departmentList);
			map.put("stockList", stockList);
			map.put("loginDepartmentStockList", loginDepartmentStockList);
			map.put("indentTList", indentTList);
			//
			map.put("requestByEmpId", requestByEmpId);
			map.put("toInstituteId", toInstituteId);
			map.put("toInstituteList", toInstituteList);
			map.put("requestNoForAcc", requestNo);
			map.put("demandIndentDate", demandIndentDate);
			map.put("employees", employees);
		} catch (DataAccessResourceFailureException e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getDemandListForOtherInstitute(
			Map<String, Object> dataMap) {
		int dispenceryId = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		/*
		 * List<StoreInternalIndentM> storeInternalIndentMList = new
		 * ArrayList<StoreInternalIndentM>();
		 */
		List<Object[]> storeInternalIndentMList = new ArrayList<Object[]>();
		List<MasDepartment> departmentNameSendToJsp = new ArrayList<MasDepartment>();
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		int toInstituteId = 0;
		String deptName = "";
		Session session = getSession();
		try {
			if (dataMap.get("deptId") != null) {
				deptId = Integer.parseInt("" + dataMap.get("deptId"));
			}
			if (dataMap.get("hospitalId") != null) {
				hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
			}
			if (dataMap.get("userName") != null) {
				userName = ("" + dataMap.get("userName"));
			}
			if (dataMap.get("dispenceryId") != null) {
				dispenceryId = Integer.parseInt(""
						+ dataMap.get("dispenceryId"));
			}
			if (dataMap.get("toInstituteId") != null) {
				toInstituteId = Integer.parseInt(""
						+ dataMap.get("toInstituteId"));
			}
			/*
			 * Code for Department Issue Code By Mukesh Narayan SIngh Date 02
			 * Dec 2010
			 */
			List<StoreIssueM> searchListForPopup = new ArrayList<StoreIssueM>();
			searchListForPopup = getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreIssueM sim where sim.Department.Id='"
							+ deptId
							+ "' and sim.Status='o' and sim.IssueType='i' and sim.Hospital.Id = '"
							+ hospitalId + "'  order by Id desc");

			departmentNameSendToJsp = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasDepartment as md where md.Id='"
							+ deptId + "'");
			map.put("searchListForPopup", searchListForPopup);
			/**
			 * End of Code for Department Issue Code By Mukesh Narayan SIngh
			 * Date 02 Dec 2010
			 */
			/**
			 * Commented By Ritu
			 * 
			 */
			/*
			 * storeInternalIndentMList = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreInternalIndentM as siim  where siim.Department.Id='"
			 * + dispenceryId + "' and siim.Status='o' and siim.ToStore='" +
			 * deptId + "'");
			 */
			/**
			 * Added By Ritu for multiple issue of a indent
			 */
			String previousDate = HMSUtil.getPrevDate(Integer
					.parseInt(properties
							.getProperty("store.pending_from_last_days")));
			Map<String, Object> mapDate = new HashMap<String, Object>();
			mapDate = HMSUtil.getCurrentDateAndTime();
			String currentDate = "";
			if (mapDate.get("currentDate") != null) {
				currentDate = (String) mapDate.get("currentDate");
			}
			String qry = "";
			/**
			 * deptId==151 means Laundry departmentIdForLaundry=151
			 */

			int laundry_department_id = 0;
			laundry_department_id = Integer.parseInt(properties
					.getProperty("departmentIdForLaundry"));

			if (deptId == laundry_department_id) {
				qry = "select sim.id,sim.demand_no,sim.demand_date from store_internal_indent_m sim left join store_internal_indent_t sit on "
						+ " sim.id = sit.internal_id where sim.department_id="
						+ dispenceryId
						+ " and sim.to_store="
						+ deptId
						+ " and sim.status='o' and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
						+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
						+ "' and '"
						+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
						+ "' and sim.hospital_id = "
						+ hospitalId
						+ " group by sim.demand_no,sim.id,sim.demand_date order by sim.demand_date desc";

			} else {
				qry = "select sim.id,sim.demand_no,sim.demand_date,dept.department_name from store_internal_indent_m sim left join store_internal_indent_t sit on "
						+ " sim.id = sit.internal_id left join mas_department dept on sim.department_id = dept.department_id where sim.hospital_id = "
						+ toInstituteId
						+ " "
						+ "and indent_flag='ALL' and sim.status= 'emergent' and (sit.qty_request - coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
						+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
						+ "' and '"
						+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
						+ "' and sim.institute_id = "
						+ hospitalId
						+ " group by sim.demand_no,sim.id,sim.demand_date,dept.department_name order by sim.demand_date desc";
			}
			//
			storeInternalIndentMList = session.createSQLQuery(qry).list();
			
			List<Object[]> storeInternalIndentPendingList = new ArrayList<Object[]>();
			String qryPending = "";
			/*
			 * qryPending =
			 * "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,"
			 * +
			 * "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
			 * +
			 * " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="
			 * + deptId +
			 * " and (sit.qty_request -coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
			 * + HMSUtil.getConvertDateYYYYMMDD(previousDate) + "' and '" +
			 * HMSUtil.getConvertDateYYYYMMDD(currentDate) +
			 * "' and sim.hospital_id = '"+hospitalId+
			 * "'	group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name ,emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc"
			 * ;
			 */
			qryPending = "select sim.id,sim.demand_no,sim.demand_date,dept_req.department_name as req_department,dept_reqBy.department_name as reqBy_department,"
					+ "(emp.first_name|| ' ' ||coalesce(emp.middle_name,'')|| ' ' ||coalesce(emp.last_name,'')) as requested_by"
					+ " from store_internal_indent_m sim left join store_internal_indent_t sit on sim.id = sit.internal_id,mas_department dept_req,mas_department dept_reqBy,mas_employee as emp where emp.employee_id=sim.requested_by and dept_reqBy.department_id=sim.to_store and dept_req.department_id=sim.department_id and sim.to_store="
					+ deptId
					+ " and (sit.qty_request -coalesce(sit.qty_issued,0)) > 0 and sim.demand_date between '"
					+ HMSUtil.getConvertDateYYYYMMDD(previousDate)
					+ "' and '"
					+ HMSUtil.getConvertDateYYYYMMDD(currentDate)
					+ "' and sim.hospital_id = "
					+ hospitalId
					+ " and sim.status= 'emergent'	group by sim.demand_no,sim.id,sim.demand_date,dept_req.department_name,dept_reqBy.department_name ,emp.first_name,emp.middle_name,emp.last_name order by sim.demand_date desc";

			storeInternalIndentPendingList = session.createSQLQuery(qryPending)
					.list();
			map.put("storeInternalIndentPendingList",
					storeInternalIndentPendingList);
			List<MasEmployee> employeeDeptByList = new ArrayList<MasEmployee>();
			employeeDeptByList = getHibernateTemplate().find(
					"from jkt.hms.masters.business.MasEmployee as emp where  emp.Department.Id="
							+ deptId
							+ " and emp.Status='Y' and emp.Hospital.Id = '"
							+ hospitalId + "' order by emp.FirstName asc");
			map.put("employeeDeptByList", employeeDeptByList);
			MasDepartment masDepartment = departmentNameSendToJsp.get(0);
			deptName = masDepartment.getDepartmentName();
			map.put("storeInternalIndentMList", storeInternalIndentMList);
			map.put("deptName", deptName);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> setNotAvailable(Map<String, Object> mapForDs) {
		List<PatientPrescriptionDetails> prescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		int presId = 0;
		int visitId = 0;
		int hospitalId = 0;
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		if (mapForDs.get("presId") != null) {
			presId = (Integer) mapForDs.get("presId");
		}
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			PatientPrescriptionDetails patientPrescriptionDetails = (PatientPrescriptionDetails) hbt
					.get(PatientPrescriptionDetails.class, presId);
			
			patientPrescriptionDetails.setNotAvailable("y");
			hbt.save(patientPrescriptionDetails);

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> setForEmpanelled(Map<String, Object> mapForDs) {

		List<PatientPrescriptionDetails> prescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		Map<String, Object> map = new HashMap<String, Object>();
		int presId = 0;
		int visitId = 0;
		visitId = (Integer) mapForDs.get("visitId");
		int hospitalId = 0;
		int emapanelledReqQty = 0;
		if (mapForDs.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDs.get("hospitalId");
		}
		if (mapForDs.get("presId") != null) {
			presId = (Integer) mapForDs.get("presId");
		}
		if (mapForDs.get("emapelledReqQty") != null) {
			emapanelledReqQty = (Integer) mapForDs.get("emapelledReqQty");
		}
		
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			PatientPrescriptionDetails patientPrescriptionDetails = (PatientPrescriptionDetails) hbt
					.get(PatientPrescriptionDetails.class, presId);
			
			patientPrescriptionDetails.setReferToEmpanelled("y");
			patientPrescriptionDetails
					.setEmpRequestQty((float) emapanelledReqQty);
			hbt.save(patientPrescriptionDetails);

			Visit visit = (Visit) hbt.load(Visit.class, visitId);
			visit.setEmpanelledVisitFlag("y");

			hbt.update(visit);
			hbt.flush();
			hbt.clear();

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> createTransferToKMSCLIndentExcelList(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = getSession();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

		storeInternalIndentTList = session
				.createCriteria(StoreInternalIndentT.class)
				.createAlias("Internal", "header")
				.add(Restrictions.eq("header.Status", "t").ignoreCase())
				.add(Restrictions.eq("ItemStatus", "t").ignoreCase()).list();

		map.put("storeInternalIndentTList", storeInternalIndentTList);
		return map;

	}

	@Override
	public Map<String, Object> showPendingListForAdjustmentApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreAdjustmentM> storeAdjustmentMList = new ArrayList<StoreAdjustmentM>();
		Session session = (Session) getSession();
		storeAdjustmentMList = session.createCriteria(StoreAdjustmentM.class)
				.add(Restrictions.eq("Status", "o")).list();
		map.put("storeAdjustmentMList", storeAdjustmentMList);
		return map;
	}

	@Override
	public Map<String, Object> showAdjustmentApprovalJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreAdjustmentT> storeAdjustmentTList = new ArrayList<StoreAdjustmentT>();
		List<StoreStockTakingT> storeStockTakingTList = new ArrayList<StoreStockTakingT>();
		Session session = (Session) getSession();
		
		storeAdjustmentTList = session.createCriteria(StoreAdjustmentT.class)
				.createAlias("Adjust", "adjust").createAlias("adjust.Hospital", "hospital")
				.createAlias("adjust.Department", "department")
				.add(Restrictions.eq("adjust.Id", box.getInt("storeAdjustmentMId")))
				.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.eq("department.Id", box.getInt("departmentId")))
				.list();
		//Added by Arbind on 03-03-2017
		storeStockTakingTList = session.createCriteria(StoreStockTakingT.class)
				.createAlias("StockTakingM", "stockTakingM")
				.add(Restrictions.eq("stockTakingM.Id", box.getInt("stockMId")))
				.list();
		map.put("storeAdjustmentTList", storeAdjustmentTList);
		map.put("storeStockTakingTList", storeStockTakingTList);
		return map;
	}

	@Override
	public Map<String, Object> showBlockingOfBatchAndBrandJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		Session session = (Session) getSession();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		return map;
	}
	@Override
	public Map<String, Object> showUnBlockItem(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		Session session = (Session) getSession();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		return map;
	}

	@Override
	public Map<String, Object> updateBatch(Box box,Map<String, Object> generalMap) {
		Map<String, Object> map = new HashMap<String, Object>();
        HibernateTemplate hbt = getHibernateTemplate();
        hbt.setFlushModeName("FLUSH_EAGER");
        hbt.setCheckWriteOperations(false);
        List batchIdList = new ArrayList();
        List blockDateList = new ArrayList();
        List blockStatusList = new ArrayList();
        List blockReasonList = new ArrayList();
        List orderNoList = new ArrayList();
        List orderDateList = new ArrayList();
        List batchNameList = new ArrayList();
        
        List unBlockBatchIdList = new ArrayList();
        List unBlockDateList = new ArrayList();
        List unBlockStatusList = new ArrayList();
        List unBlockReasonList = new ArrayList();
        List unBlockBatchNameList = new ArrayList();
        
        batchIdList =(List)generalMap.get("batchIdList");
        blockDateList =(List)generalMap.get("blockDateList");
        blockStatusList =(List)generalMap.get("blockStatusList");
        blockReasonList =(List)generalMap.get("blockReasonList");
        if(generalMap.get("orderNoList") != null){
                orderNoList =(List)generalMap.get("orderNoList");
        }
        if(generalMap.get("orderDateList") != null){
                orderDateList =(List)generalMap.get("orderDateList");
        }
        batchNameList =(List)generalMap.get("batchNameList");
        
        unBlockBatchIdList =(List)generalMap.get("unBlockBatchIdList");
        unBlockDateList =(List)generalMap.get("unBlockDateList");
        unBlockStatusList =(List)generalMap.get("unBlockStatusList");
        unBlockReasonList =(List)generalMap.get("unBlockReasonList");
        unBlockBatchNameList = (List)generalMap.get("unBlockBatchNameList");
        
/*        Vector blockBatchId = box.getVector("batchId");
        Vector blockDate = box.getVector("efectiveFromDate");
        Vector blockStatus = box.getVector("status");
        Vector blockReason = box.getVector("reason");
        Vector orderNo = box.getVector("orderNo");
        Vector orderDate = box.getVector("orderDate");
        Vector unBlockBatchId = box.getVector("batchNo");
        Vector unBlockDate = box.getVector("unBlockDate");
        Vector unBlockStatus = box.getVector("unBlockStatus");
        Vector unBlockReason = box.getVector("unBlockReason");*/
        String fileName = null;
        String fileExtension = null;
        String uploadURL = box.getString("uploadURL");
        String fileSeparator = box.getString("fileSeparator");
        int uploadCount = box.getInt("uploadCount");
        List<StoreItemBatchStock> batchStockList = new ArrayList<StoreItemBatchStock>();
        boolean flag = false;
        Session session = (Session)getSession();
        try {
                int j=1;
                
        if(box.getInt("userType") == 1){
                if (box.getString("flag").equalsIgnoreCase("block")) {
                        for (int i = 0; i < batchNameList.size(); i++) {
                                if (batchNameList.get(i) != null && !batchNameList.get(i).equals("")) {
                                        String batchNo = (String)batchNameList.get(i).toString();
        batchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchNo)).list();
        if(batchStockList.size()>0){
                for(StoreItemBatchStock batchStock :batchStockList){
                                int batchId = batchStock.getId();
                                StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
                                        storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);
                                        if (blockDateList.get(i) != null
                                                        && !blockDateList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockDate(HMSUtil
                                                                .convertStringTypeDateToDateType(blockDateList
                                                                                .get(i).toString()));
                                        }
                                        if (blockStatusList.get(i) != null
                                                        && !blockStatusList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockStatus(blockStatusList.get(
                                                                i).toString());
                                        }
                                        if (orderNoList.get(i) != null
                                                        && !orderNoList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockOrderNo(orderNoList.get(i)
                                                                .toString());
                                        }
                                        if (orderDateList.get(i) != null
                                                        && !orderDateList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockOrderDate(HMSUtil
                                                                .convertStringTypeDateToDateType(orderDateList
                                                                                .get(i).toString()));
                                        }
                                        if (blockReasonList.get(i) != null
                                                        && !blockReasonList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockReason(blockReasonList.get(
                                                                i).toString());
                                        }
                                        hbt.update(storeItemBatchStock);
                                
                        if(!box.getString("filename"+j).equals("") && !box.getString("filename"+j).equals("0"))
                        {
                        UploadDocuments uploadDocuments = new UploadDocuments();
                        File file=null;
                        file = new File(uploadURL+fileSeparator+"blockBatch" +fileSeparator+box.getString("filename"+j));
                if(!file.equals("")){
                        File f = new File(uploadURL);
                        try {
                                if (f.exists()) {
                                        f.delete();
                                        f.mkdir();
                                        FileInputStream is = new FileInputStream(file);
                                        long length = file.length();
                                        
                                        if (length > Integer.MAX_VALUE) {
                                                // File is too large
                                        }
                                        // Create the byte array to hold the data
                                        byte[] bytes = new byte[(int)length];
                                        int offset = 0;
                                        int numRead = 0;
                                        while (offset < bytes.length
                                                        && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
                                                offset += numRead;
                                        }

                                        if (offset < bytes.length) {
                                                throw new IOException("Could not completely read file "+file.getName());
                                        }
                                
                                        uploadDocuments.setPatientDocument(bytes);
                                        is.close();
                                } else {
                                        f.mkdir();
                                        FileInputStream is = new FileInputStream(file);
                                        long length = file.length();
                                        //ByteBuffer byteBuff=null;
                                        //  int modLength=length/
                                        if (length > Integer.MAX_VALUE) {
                                                // File is too large
                                        }
                                        // Create the byte array to hold the data
                                        byte[] bytes = new byte[(int)length];
                                        int offset = 0;
                                        int numRead = 0;
                                        while (offset < bytes.length
                                                        && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
                                                offset += numRead;
                                        }

                                        if (offset < bytes.length) {
                                                throw new IOException("Could not completely read file "+file.getName());
                                        }
                                        is.close();                                                        
                                        uploadDocuments.setPatientDocument(bytes);
                                }                                                
                                //fileExtension=strToken.nextToken();

                        } catch (Exception e) {
                                e.printStackTrace();
                        }
                        
                        StringTokenizer strToken = new StringTokenizer(box
                                        .getString("filename" + j), ".");
                        fileName = strToken.nextToken();
                        fileExtension = strToken.nextToken();
                        uploadDocuments.setFileExtension(fileExtension);
                        uploadDocuments.setFileName(fileName);
                        //uploadDocuments.setUploadDate(date);
                        //uploadDocuments.setLastChgDate(date);
                        //uploadDocuments.setLastChgTime(time);
                        StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
                        itemBatchStock.setId(batchId);
                        uploadDocuments.setStock(itemBatchStock);
                        Users users=new Users();
                        users.setId(box.getInt("userId"));
                        uploadDocuments.setLastChgBy(users);
                        MasHospital masHospital = new MasHospital();
                        masHospital.setId(box.getInt("hospitalId"));
                        uploadDocuments.setHospital(masHospital);
                        hbt.save(uploadDocuments);

                        //file.delete();
                        }
                 }
         }
   }
}                                j++;
  }        
        } else {
                for (int i = 0; i < batchNameList.size(); i++) {
                        if (batchNameList.get(i) != null && !batchNameList.get(i).equals("")) {
                                String batchNo = (String)batchNameList.get(i).toString();
batchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchNo)).list();
if(batchStockList.size()>0){
        for(StoreItemBatchStock batchStock :batchStockList){
                        int batchId = batchStock.getId();
                                StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
                                storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);
                                        if (unBlockDateList.get(i) != null
                                                        && !unBlockDateList.get(i).equals("")) {
                                                storeItemBatchStock
                                                                .setBlockDate(HMSUtil
                                                                                .convertStringTypeDateToDateType(unBlockDateList
                                                                                                .get(i).toString()));
                                        }else{
                                        	storeItemBatchStock.setBlockDate(null);
                                        }
                                        if (unBlockStatusList.get(i) != null
                                                        && !unBlockStatusList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockStatus(unBlockStatusList
                                                                .get(i).toString());
                                        }
                                        if (orderNoList.get(i) != null
                                                        && !orderNoList.get(i).equals("")) {
                                                storeItemBatchStock.setUnblockOrderNo(orderNoList
                                                                .get(i).toString());
                                        }
                                        if (orderDateList.get(i) != null
                                                        && !orderDateList.get(i).equals("")) {
                                                storeItemBatchStock.setUnblockOrderDate(HMSUtil
                                                                .convertStringTypeDateToDateType(orderDateList
                                                                                .get(i).toString()));
                                        }
                                        if (unBlockReasonList.get(i) != null
                                                        && !unBlockReasonList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockReason(unBlockReasonList
                                                                .get(i).toString());
                                        }
                                        hbt.update(storeItemBatchStock);
                                }
                        }
                        }
                }
                }
        }else{
                if (box.getString("flag").equalsIgnoreCase("block")) {
                	for (int i = 0; i < batchNameList.size(); i++) {
    					if (batchNameList.get(i) != null && !batchNameList.get(i).equals("")) {
    						String batchNo = (String)batchNameList.get(i).toString();
    						
    		batchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchNo)).list();
    		
    		
    		if(batchStockList.size()>0){
    			for(StoreItemBatchStock batchStock :batchStockList){
    					int batchId = batchStock.getId();
    					StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
    						storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);
                                        if (blockDateList.get(i) != null
                                                        && !blockDateList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockDate(HMSUtil
                                                                .convertStringTypeDateToDateType(blockDateList
                                                                                .get(i).toString()));
                                        }
                                        if (blockStatusList.get(i) != null
                                                        && !blockStatusList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockStatus(blockStatusList.get(
                                                                i).toString());
                                        }
                                        if (orderNoList.get(i) != null
                                                        && !orderNoList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockOrderNo(orderNoList.get(i)
                                                                .toString());
                                        }
                                        if (orderDateList.get(i) != null
                                                        && !orderDateList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockOrderDate(HMSUtil
                                                                .convertStringTypeDateToDateType(orderDateList
                                                                                .get(i).toString()));
                                        }
                                        if (blockReasonList.get(i) != null
                                                        && !blockReasonList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockReason(blockReasonList.get(
                                                                i).toString());
                                        }
                                        hbt.update(storeItemBatchStock);
                                
                        if(!box.getString("filename"+j).equals("") && !box.getString("filename"+j).equals("0"))
                        {
                        UploadDocuments uploadDocuments = new UploadDocuments();
                        File file=null;
                        file = new File(uploadURL+fileSeparator+"blockBatch" +fileSeparator+box.getString("filename"+j));
                if(!file.equals("")){
                        File f = new File(uploadURL);
                        try {
                                if (f.exists()) {
                                        f.delete();
                                        f.mkdir();
                                        FileInputStream is = new FileInputStream(file);
                                        long length = file.length();
                                        
                                        if (length > Integer.MAX_VALUE) {
                                                // File is too large
                                        }
                                        // Create the byte array to hold the data
                                        byte[] bytes = new byte[(int)length];
                                        int offset = 0;
                                        int numRead = 0;
                                        while (offset < bytes.length
                                                        && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
                                                offset += numRead;
                                        }

                                        if (offset < bytes.length) {
                                                throw new IOException("Could not completely read file "+file.getName());
                                        }
                                
                                        uploadDocuments.setPatientDocument(bytes);
                                        is.close();
                                } else {
                                        f.mkdir();
                                        FileInputStream is = new FileInputStream(file);
                                        long length = file.length();
                                        //ByteBuffer byteBuff=null;
                                        //  int modLength=length/
                                        if (length > Integer.MAX_VALUE) {
                                                // File is too large
                                        }
                                        // Create the byte array to hold the data
                                        byte[] bytes = new byte[(int)length];
                                        int offset = 0;
                                        int numRead = 0;
                                        while (offset < bytes.length
                                                        && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
                                                offset += numRead;
                                        }

                                        if (offset < bytes.length) {
                                                throw new IOException("Could not completely read file "+file.getName());
                                        }
                                        is.close();                                                        
                                        uploadDocuments.setPatientDocument(bytes);
                                }                                                
                                //fileExtension=strToken.nextToken();

                        } catch (Exception e) {
                                e.printStackTrace();
                        }
                        
                        StringTokenizer strToken = new StringTokenizer(box
                                        .getString("filename" + j), ".");
                        fileName = strToken.nextToken();
                        fileExtension = strToken.nextToken();
                        uploadDocuments.setFileExtension(fileExtension);
                        uploadDocuments.setFileName(fileName);
                        //uploadDocuments.setUploadDate(date);
                        //uploadDocuments.setLastChgDate(date);
                        //uploadDocuments.setLastChgTime(time);
                        StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
                        itemBatchStock.setId(batchId);
                        uploadDocuments.setStock(itemBatchStock);
                        Users users=new Users();
                        users.setId(box.getInt("userId"));
                        uploadDocuments.setLastChgBy(users);
                        MasHospital masHospital = new MasHospital();
                        masHospital.setId(box.getInt("hospitalId"));
                        uploadDocuments.setHospital(masHospital);
                        hbt.save(uploadDocuments);

                        //file.delete();
                        }
                 }
         }
                                j++;
         }}}        
                } else {
                	for (int i = 0; i < batchNameList.size(); i++) {
                        if (batchNameList.get(i) != null && !batchNameList.get(i).equals("")) {
                                String batchNo = (String)batchNameList.get(i).toString();
	batchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchNo)).list();
	if(batchStockList.size()>0){
	        for(StoreItemBatchStock batchStock :batchStockList){
	                        int batchId = batchStock.getId();
	                                StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
	                                storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);   
                	
                                        storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);
                                        if (unBlockDateList.get(i) != null
                                                        && !unBlockDateList.get(i).equals("")) {
                                                storeItemBatchStock
                                                                .setBlockDate(HMSUtil
                                                                                .convertStringTypeDateToDateType(unBlockDateList
                                                                                                .get(i).toString()));
                                        }
                                        if (unBlockStatusList.get(i) != null
                                                        && !unBlockStatusList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockStatus(unBlockStatusList
                                                                .get(i).toString());
                                        }
                                        if (orderNoList.get(i) != null
                                                        && !orderNoList.get(i).equals("")) {
                                                storeItemBatchStock.setUnblockOrderNo(orderNoList
                                                                .get(i).toString());
                                        }
                                        if (orderDateList.get(i) != null
                                                        && !orderDateList.get(i).equals("")) {
                                                storeItemBatchStock.setUnblockOrderDate(HMSUtil
                                                                .convertStringTypeDateToDateType(orderDateList
                                                                                .get(i).toString()));
                                        }
                                        if (unBlockReasonList.get(i) != null
                                                        && !unBlockReasonList.get(i).equals("")) {
                                                storeItemBatchStock.setBlockReason(unBlockReasonList
                                                                .get(i).toString());
                                        }
                                        hbt.update(storeItemBatchStock);
                                }
	        				}
                         }
                      }
                }
        }
                hbt.flush();
                hbt.clear();
                flag = true;

        } catch (DataAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        } catch (NumberFormatException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
        }
        map.put("flag", flag);
        return map;
	}

	@Override
	public Map<String, Object> submitAdjustmentApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector srno = box.getVector("srno");
		Vector demandedQty = box.getVector("qtyRequest");
		boolean flag = false;

		try {
			StoreAdjustmentM storeAdjustmentM = new StoreAdjustmentM();
			storeAdjustmentM = (StoreAdjustmentM) hbt.load(
					StoreAdjustmentM.class, box.getInt("adjustmentId"));
			if (box.getString("flag").equals("Approve")) {
				storeAdjustmentM.setStatus("a");
			} else {
				storeAdjustmentM.setStatus("r");
			}
			storeAdjustmentM.setRemarks(box.getString("remarks"));
			hbt.update(storeAdjustmentM);
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> changePendingVisitStatus(Box box) {

		// List<Visit> visit= new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = box.getInt(VISIT_ID);
		boolean flag =false;
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			Visit visit = (Visit) hbt.get(Visit.class, visitId);
			visit.setUnservicesedPharVisitStatus("n");
			hbt.save(visit);
			flag=true;

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> intraIndentApproval(Box box) {

		// List<Visit> visit= new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = box.getInt(VISIT_ID);

		int indentNo = box.getInt(INDENT_NO);
		// List<StoreInternalIndentM>storeInternalIndentM=new
		// ArrayList<StoreInternalIndentM>();

		int counter = box.getInt("counter");
		int i = 1;
		try {
			Session session = (Session) getSession();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			// StoreInternalIndentT
			// storeInternalIndentT=(StoreInternalIndentT)hbt.get(StoreInternalIndentT.class,indentNo);
			List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();

			storeInternalIndentTList = session
					.createCriteria(StoreInternalIndentT.class)
					.createAlias("Internal", "i")
					.add(Restrictions.eq("i.Id", indentNo)).list();
			
			for (i = 1; i < counter; i++) {
				
				storeInternalIndentTList.get(i - 1).setRemarks(
						box.getString(RequestConstants.REMARKS + i));
				storeInternalIndentTList.get(i - 1).setItemStatus(
						box.getString(RequestConstants.REQUEST_STATUS + i));
				storeInternalIndentTList
						.get(i - 1)
						.setActualRequestedQty(
								box.getInt(RequestConstants.QTY_IN_REQUEST_DEPARTMENT_INDENT
										+ i));
				// ((BaseStoreInternalIndentT)
				// storeInternalIndentTList).setActualRequestedQty(box.getInt("QTY_IN_REQUEST_DEPARTMENT_INDENT"+i));
				hbt.update(storeInternalIndentTList.get(i - 1));
			}
			StoreInternalIndentM storeInternalIndentM = (StoreInternalIndentM) hbt
					.get(StoreInternalIndentM.class, indentNo);
			storeInternalIndentM.setStatus("Intra Indent Approved");
			hbt.save(storeInternalIndentM);

			// hbt.update(storeInternalIndentTList);

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> intraIndentReject(Box box) {

		// List<Visit> visit= new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();
		int indentNo = box.getInt(INDENT_NO);
		try {
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreInternalIndentM storeInternalIndentM = (StoreInternalIndentM) hbt
					.get(StoreInternalIndentM.class, indentNo);
			storeInternalIndentM.setStatus("intra indent reject");
			storeInternalIndentM.setRemarks(box
					.getString(RequestConstants.OTHERS_REMARKS));
			hbt.save(storeInternalIndentM);

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> changeCurVisitStatus(Box box) {
		
		// List<Visit> visit= new ArrayList<Visit>();
		Session session=getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> visitList=box.getArrayList(VISIT_ID);
		//int visitId = box.getInt(VISIT_ID);
		int patientvisitId=0;
		Transaction transaction=null;
		int visitNo =0;
		String hinNo="";
		
		final int hospitalId = box.getInt("hospitalId"); // added by amit das on 16-08-2016
		final String visitUpdatedToServer="U";  // added by amit das on 16-08-2016
		final List<Visit> visits = new ArrayList<Visit>(); // added by amit das on 16-08-2016
		
		
		try {
			transaction=session.beginTransaction();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			
			List<Visit> visitsList = new ArrayList<Visit>();
			//added by govind 16-12-2016
			int hinId=0;
			if(box.getInt("hinId")!=0){
				hinId=box.getInt("hinId");
			}
			visitsList=session.createCriteria(Visit.class)
					.add(Restrictions.eq("Hin.Id", hinId))
					.add(Restrictions.eq("VisitDate", new Date()))
					.add(Restrictions.eq("CurPharVisitStatus", "y").ignoreCase())
					.list();
			System.out.println("visitsList "+visitsList.size());
            if(visitsList.size()>0){            	
				for(Visit v:visitsList){
					hinNo=v.getHin().getHinNo();   //Added by Arbind 29-12-2016
					visits.add(v);
					v.setCurPharVisitStatus("n");
					hbt.update(v);
				}
			}
            
          
			//added by govind 16-12-2016 end 
			/*for(String visitId:visitList){
				System.out.println("visitId "+visitId);
				Visit visit = (Visit) hbt.get(Visit.class,Integer.parseInt(visitId.trim()));
				visit.setCurPharVisitStatus("n");
				//hbt.save(visit);
				visitNo=visit.getVisitNo();
				hinNo=visit.getHin().getHinNo();
				patientvisitId=visit.getId();
				visits.add(visit);
			}*/
			
			transaction.commit(); 
			
			// added by amit das on 16-08-2016
			//#13- Tech Debt: Comment out the code those are related to Lean server
			/*new Thread(){
			  public void run(){
				  System.out.println("new visits "+visits.size());
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
					
			MasHospital masHospital = hbt.get(MasHospital.class, hospitalId); // added by amit das on 16-08-2016
				  
			for(Visit visit : visits){
				 System.out.println("visit "+visit.getId());
				String hinNoNew = visit.getHin().getHinNo();
			Map<String,Object> data=generateHL7MessageToUpdateVisit(visit,hinNoNew);
			if(data!=null) {	
				String message=(String)data.get("message");
				Parser p1 = new PipeParser(); 
		  	  	String encodedVisitDataMessage;
				try {
					encodedVisitDataMessage = p1.encode((ADT_A01)data.get("ADTMessage"));
					if("success".equalsIgnoreCase(message) && masHospital!=null && masHospital.getServerIp()!=null && !masHospital.getServerIp().trim().equals("") && !masHospital.getServerIp().trim().equals("null") && masHospital.getServerPort()!=null && !masHospital.getServerPort().trim().equals("") && !masHospital.getServerPort().trim().equals("null")){
				  	  	CentralServerVisitData centralServerVisitData=new CentralServerVisitData();
						centralServerVisitData.setCentralVisitId(Long.parseLong(visit.getId()+""));
						centralServerVisitData.setVisitData(encodedVisitDataMessage);
						centralServerVisitData.setHospitalId(Long.parseLong(masHospital.getId()+""));  
						centralServerVisitData.setStatus(visitUpdatedToServer);   
						hbt.save(centralServerVisitData);
				  	} else if("success".equalsIgnoreCase(message) && masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){
				  		LeanServerVisitData leanServerVisitData=new LeanServerVisitData();
				  		leanServerVisitData.setCentralVisitId(Long.parseLong(visit.getId()+""));
				  		leanServerVisitData.setVisitData(encodedVisitDataMessage);
				  		leanServerVisitData.setHospitalId(Long.parseLong(masHospital.getId()+""));  
						leanServerVisitData.setStatus(visitUpdatedToServer);   
						hbt.save(leanServerVisitData);
				  	}
				} catch (HL7Exception e) {
					e.printStackTrace();
				} 
			   }
			   }
			  }
			}.start();*/
			  // added by amit das on 16-08-2016	
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
			if(transaction!=null){
				transaction.rollback();
			}
		}
		
		map.put("visitNo", visitNo);
		map.put("visitId", patientvisitId);
		map.put("hinNo", hinNo);
		return map;
	}
	
	// added by amit das on 16-08-2016
	private String now(String dateFormat) {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
		return sdf.format(cal.getTime());
	}
	
	// added by amit das on 16-08-2016
	private String convertDatetoString(Date DOB) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		return sdf.format(DOB);
	}
	
	// added by amit das on 16-08-2016
	private Map<String,Object> generateHL7MessageToUpdateVisit(Visit visit, String hinNo) {
		Map<String,Object> returnMap=new HashMap<String,Object>();
		Patient patient = null;
		String returnMessage="failure";
		Parser parser = PipeParser.getInstanceWithNoValidation();
		if(visit!=null){
		patient = visit.getHin(); 
		try { 
			ca.uhn.hl7v2.app.Connection connection = null;
			try {   
				Date DOB = null;
				Date DOA = null;
				String TOA = null;
				String adtym = "";
				String doa_val = null; 
				 
				if (true)
				{
						ADT_A01 adt1 = new ADT_A01(); 
						ORU_R01 message1 = new ORU_R01(); 
						ORU_R01_ORDER_OBSERVATION orderObservation = message1.getPATIENT_RESULT().getORDER_OBSERVATION();

						// Populate the MSH Segment
						MSH mshSegment = adt1.getMSH();
						mshSegment.getMsh1_FieldSeparator().setValue("|");
						mshSegment.getMsh2_EncodingCharacters().setValue("^~\\&"); 
						mshSegment.getMsh3_SendingApplication().setValue("VISIT");
						mshSegment.getMsh4_SendingFacility().setValue("RIH");
						mshSegment.getMsh5_ReceivingApplication().setValue("HMS"); 
						mshSegment.getMsh6_ReceivingFacility().setValue("EKG"); 
						mshSegment.getMsh7_DateTimeOfMessage().getTimeOfAnEvent().setValue(now("yyyyMMdd")+now("HHmmss"));
						mshSegment.getMsh9_MessageType().getCm_msg1_MessageType().setValue("ADT");
						mshSegment.getMsh9_MessageType().getCm_msg2_TriggerEvent().setValue("A01"); 
						//mshSegment.getMsh10_MessageControlID().setValue(""+visitId);
						mshSegment.getMsh10_MessageControlID().setValue(""+123);
						mshSegment.getMsh11_ProcessingID().setValue("P");
						mshSegment.getMsh12_VersionID().setValue("2.2");
					

						// Populate the PID Segment
						PID pid = adt1.getPID();  
						// pid.getPid4_AlternatePatientID().setValue(patient.getHinNo());
						
						pid.getPid4_AlternatePatientID().setValue(hinNo);
						  
							  
							  
							PV1 pv1 = adt1.getPV1(); 
							if(visit.getHospital()!=null){
								pv1.getPv110_HospitalService().setValue(visit.getHospital().getId()+"");
							}
							if(visit.getHin()!=null){
								pv1.getPv118_PatientType().setValue(visit.getHin().getId()+"");
							} 
							
							pv1.getPv119_VisitNumber().getCm_pat_id1_IDNumber().setValue(visit.getVisitNo()+""); 
							
							pv1.getPv122_CourtesyCode().setValue(visit.getCurPharVisitStatus()+"");
							
							if(visit.getAddEditDate()!=null){
								pv1.getPv125_ContractEffectiveDate(0).setValue(visit.getAddEditDate()+"");
							}
							
							if(visit.getAddEditTime()!=null){
								pv1.getPv127_ContractPeriod(0).setValue(visit.getAddEditTime()+"");
							}
							
							if(visit.getDepartment()!=null){
								pv1.getPv140_BedStatus().setValue(visit.getDepartment().getId()+"");
							}  
							if(visit.getVisitDate()!=null){
								pv1.getPv144_AdmitDateTime().getTimeOfAnEvent().setValue(convertDatetoString(visit.getVisitDate())+"");
							}if(visit.getVisitTime()!=null){
								pv1.getPv144_AdmitDateTime().getTs2_DegreeOfPrecision().setValue(visit.getVisitTime()+"");  
							} 
							
							
							pid.getMaritalStatus().setValue("Update"); // added by amit das on 24-12-2016

							pv1.getPv119_VisitNumber().getCm_pat_id1_IDNumber().setValue(visit.getVisitNo()+""); 
							// Populate the ORC
							ORC orc = orderObservation.getORC();
							orc.getOrc1_OrderControl().setValue("NW"); // New  
							orc.getDateTimeOfTransaction()
									.getTs1_TimeOfAnEvent()
									.setValue(now("yyyyMMdd") + now("Hmmss")); 
							OBR obr = orderObservation.getOBR(); 
							obr.getObr36_ScheduledDateTime().getTs1_TimeOfAnEvent().setValue(now("yyyyMMdd") + now("HHmmss"));
							 
							returnMap.put("ADTMessage", adt1);
							returnMessage="success";
							returnMap.put("message", returnMessage);
							return returnMap;
							  
						}  
					 
				 
			} catch (Exception s) {
				s.printStackTrace();
			}  
		} catch (Exception e) {
			e.printStackTrace();
		}
	
	   }
		
		returnMessage="fail";
		returnMap.put("message", returnMessage);
		return returnMap;
	}

	@Override
	public Map<String, Object> getPatientVisitInfo(Map<String, Object> details) {
System.out.println(" getPatientVisitInfo impl 123");

		Map<String, Object> map = new HashMap<String, Object>();
		String hinNo = "";
		String message = "";
		int hospitalId = 0;
		int deptId = 0;
		String patientName = "";
		Session session = (Session) getSession();
		List<Object[]> patientPrescriptionDetailList = new ArrayList<Object[]>();
		List<Visit> visitList = new ArrayList<Visit>();
		List<MasFrequency> frequencyList = new ArrayList<MasFrequency>();
		List<OpdInstructionTreatment> masInstructionMasterList = new ArrayList<OpdInstructionTreatment>();
		List<RouteOfAdministration> routeOfAdministrationList = new ArrayList<RouteOfAdministration>();
		List<Visit> visits = new ArrayList<Visit>();
		boolean lastPrescripitionBasedDispensing = false;
		PatientPrescriptionHeader patientPrescriptionHeader=null;
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();//added by govind 6-10-2016
		if(details.get("lastPrescripitionBasedDispensing") != null){
			lastPrescripitionBasedDispensing=(Boolean)details.get("lastPrescripitionBasedDispensing");	
		}
		Criteria cr = null;
		if (details.get(RequestConstants.DEPT_ID) != null) {
			deptId = Integer.parseInt(details.get(RequestConstants.DEPT_ID)
					.toString());
		}
		if (details.get("hinNo") != null) {
			hinNo = (String) details.get("hinNo");
		}
		
		if (details.get("patientName") != null) {
			patientName = (String) details.get("patientName");
		}
		if (details.get("hospitalId") != null) {
			hospitalId = (Integer) details.get("hospitalId");
		}
		String searchHinNo = "";
		if (details.get("searchHinNo") != null) {
			searchHinNo = (String) details.get("searchHinNo");
		}
		String preDeptId="";
		if(details.get("preDeptId") != null){
			
			preDeptId=(String) details.get("preDeptId");
		}
		if(lastPrescripitionBasedDispensing){
			System.out.println("lastPrescripitionBasedDispensing");
			if(patientName != null && !patientName.equals("")){
				System.out.println("patientName");
				visits =  session
						.createCriteria(Visit.class)
						.createAlias("Hospital", "hospital")
						.createAlias("Department", "dept")
						.createAlias("Hin", "hin")/*
						.add(Restrictions.ne("VisitStatus", "c").ignoreCase())
							.add(Restrictions.ne("VisitStatus", "a").ignoreCase())*/  // commented by Amit Das on 15-03-2016
						.add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("VisitStatus", "w").ignoreCase())
						.add(Restrictions.eq("dept.DepartmentCode", "PHAR").ignoreCase())
						.add(Restrictions.like("hin.PFirstName", patientName+"%").ignoreCase())
						.list();
			}else if(searchHinNo != null && !searchHinNo.equals("")){
				System.out.println("else if searchHinNo");
				visits =  session
						.createCriteria(Visit.class)
						.createAlias("Hospital", "hospital")
						.createAlias("Department", "dept")
						.createAlias("Hin", "hin")/*
						.add(Restrictions.ne("VisitStatus", "c").ignoreCase())
							.add(Restrictions.ne("VisitStatus", "a").ignoreCase())*/  // commented by Amit Das on 15-03-2016
						.add(Restrictions.eq("hospital.Id", hospitalId))
						.add(Restrictions.eq("VisitStatus", "w").ignoreCase()) // added by Amit Das on 15-03-2016
						.add(Restrictions.eq("dept.DepartmentCode", "PHAR").ignoreCase())
						.add(Restrictions.eq("hin.HinNo", searchHinNo)).list();
			
			}else{
				System.out.println("else if searchHinNo else");
			cr= session.createCriteria(Visit.class)
					.createAlias("Hin", "hin").add(Restrictions.or(
							Restrictions.eq("CurPharVisitStatus", "y")
									.ignoreCase(),
							Restrictions.eq("CurPharVisitStatus", "n")
									.ignoreCase())) 
					.add(Restrictions.eq("Hospital.Id", hospitalId)) 
					.add(Restrictions.eq("hin.HinNo", hinNo))
					.addOrder(Order.desc("Id"));
			visitList = cr.list();  
			}
			
		}else{ 
			
			if(preDeptId.equalsIgnoreCase("1")){
				cr= session.createCriteria(Visit.class)
						.createAlias("Hin", "hin").add(Restrictions.eq("CurPharVisitStatus", "y").ignoreCase()) 
						.add(Restrictions.eq("Hospital.Id", hospitalId)) 
						//.add(Restrictions.eq("VisitDate",HMSUtil.getCurrentDateAndTimeObject()))
						;
				
				if(!searchHinNo.equals("") || !hinNo.equals("")){
				cr =cr.add(Restrictions.or(Restrictions.eq("hin.HinNo", hinNo), Restrictions.eq("hin.HinNo", searchHinNo)) );
				}else if(details.get("hinId")!=null){
					cr= cr.add(Restrictions.eq("hin.Id", (Integer)details.get("hinId"))) ;
				}
				cr =cr.addOrder(Order.desc("Id"));
				visitList = cr.list();
			}else{
				System.out.println("lastPrescripitionBasedDispensing else");
				cr= session.createCriteria(Visit.class)
						.createAlias("Hin", "hin").add(Restrictions.eq("CurPharVisitStatus", "y").ignoreCase()) 
						.add(Restrictions.eq("Hospital.Id", hospitalId)) 
						.add(Restrictions.eq("VisitDate",HMSUtil.getCurrentDateAndTimeObject()));

				
				if(!searchHinNo.equals("") || !hinNo.equals("")){
				cr =cr.add(Restrictions.or(Restrictions.eq("hin.HinNo", hinNo), Restrictions.eq("hin.HinNo", searchHinNo)) );
				}else if(details.get("hinId")!=null){
					cr= cr.add(Restrictions.eq("hin.Id", (Integer)details.get("hinId"))) ;
				}
				cr =cr.addOrder(Order.desc("Id"));
				visitList = cr.list();
			}
		}
		
		/*List<StoreItemBatchStock>itemBatchStockList = new ArrayList<StoreItemBatchStock>();
		patientPrescriptionDetailList=session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "header").createAlias("header.Hin", "hin")
										.createAlias("Item", "item").add(Restrictions.eq("hin.HinNo", hinNo)).createAlias("Item.ItemConversion", "au")
										.createAlias("Frequency", "frq").createAlias("Insrtuction", "ins").createAlias("Route", "route").createAlias("header.Hospital", "hospital")
										.add(Restrictions.eq("item.OtcType", "y").ignoreCase()).add(Restrictions.eq("hospital.Id", hospitalId))
											.setProjection(Projections.projectionList().add(Projections.groupProperty("item.Id"))
													.add(Projections.groupProperty("Id")).add(Projections.groupProperty("item.Nomenclature"))
													.add(Projections.property("Dosage")).add(Projections.groupProperty("au.ItemUnitName"))
													.add(Projections.groupProperty("frq.FrequencyName")).add(Projections.property("NoOfDays"))
													.add(Projections.groupProperty("ins.OpdInstructionTreatmentName")).add(Projections.groupProperty("route.RouteName"))
													.add(Projections.property("TotalStoreIssuedQty")).add(Projections.property("item.PvmsNo"))
													//.add(Projections.property("item.StoreItemBatchStocks"))
													).list();
		itemBatchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.eq("Department.Id", deptId)).list();
			*/	 
		frequencyList = session.createCriteria(MasFrequency.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		masInstructionMasterList = session.createCriteria(OpdInstructionTreatment.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		routeOfAdministrationList = session.createCriteria(RouteOfAdministration.class).add(Restrictions.eq("Status", "y".toLowerCase()).ignoreCase()).addOrder(Order.asc("OrderNo")).list();
		//added by govind 6-10-2016 end 
		batchList = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
				//.add(Restrictions.eq("item.Id", itemId))
  				.createAlias("Department", "dept")
  				.add(Restrictions.or( Restrictions.eq("dept.Id", deptId), Restrictions.eq("Hospital.Id", hospitalId)))
  				//.add(Restrictions.or(Restrictions.not(Restrictions.in("BlockStatus", blockStatus)), Restrictions.isNull("BlockStatus")))
  				.list();
        map.put("batchList", batchList);
        //added by govind 6-10-2016 end 
		if (visitList.size() > 0)
			message = "success";

		//Added by Arbind on 21-04-2017
		String deptType = "";
		if (details.get("deptType") != null) {
			deptType = (String) details.get("deptType");
		}
		List<String> issueNoList = new ArrayList<String>();
		String query1 = "select issue_no from store_issue_m order by id desc limit 1 ";
		issueNoList = session.createSQLQuery(query1).list();
		String no = "";
		if (issueNoList.size() > 0) {
			for (int i = 0; i < issueNoList.size(); i++) {
				no = ((String) issueNoList.get(i));
			}
		}
		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("no", no);
		maxMap.put("deptType", deptType);
		String patientIssueNo = "";

		patientIssueNo = getMaxNoByDeptCode(maxMap);
		map.put("patientIssueNo", patientIssueNo);

		map.put("visitList", visitList);
		map.put("visits", visits);
		map.put("message", message);
		map.put("patientPrescriptionDetailList", patientPrescriptionDetailList);
		map.put("masInstructionMasterList", masInstructionMasterList);
		map.put("frequencyList", frequencyList);
		map.put("routeOfAdministrationList", routeOfAdministrationList);
		map.put("lastPrescripitionBasedDispensing", lastPrescripitionBasedDispensing);
		//map.put("itemBatchStockList", itemBatchStockList);
		return map;
	}

	@Override
	public Map<String, Object> responseForPoNo(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoHeader> poHeaderList = new ArrayList<StorePoHeader>();
		List<MmMasRequestStatus> statusList = new ArrayList<MmMasRequestStatus>();
		List poStatusList = new ArrayList();
		Session session = (Session) getSession();
		try {
			Object[] statusArray ={"WOC","AP"};
			statusList = session.createCriteria(MmMasRequestStatus.class).add(Restrictions.in("StatusCode", statusArray)).list();
			if(statusList.size()>0){
				for(MmMasRequestStatus mmMasRequestStatus:statusList){
					poStatusList.add(mmMasRequestStatus.getId());
				}
			}
			
			if(statusList.size()>0){
			poHeaderList = session.createCriteria(StorePoHeader.class)
					.createAlias("Supplier", "supplier")
					.add(Restrictions.eq("supplier.Id", box.getInt("vendorId")))
					.createAlias("Status", "status").add(Restrictions.in("status.Id", poStatusList))
					.list();
			
			map.put("poHeaderList", poHeaderList);
			}
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> responseForPoGrid(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StorePoDetail> poDetailList = new ArrayList<StorePoDetail>();
		List<StorePoHeader> poHeaderList = new ArrayList<StorePoHeader>();
		List<MasManufacturer> manufactureList = new ArrayList<MasManufacturer>();
		Session session = (Session) getSession();
		poDetailList = session.createCriteria(StorePoDetail.class)
				.createAlias("Po", "header")
				.add(Restrictions.eq("header.Id", box.getInt("poId"))).list();
		poHeaderList = session.createCriteria(StorePoHeader.class)
				.add(Restrictions.idEq(box.getInt("poId"))).list();
		manufactureList = session.createCriteria(MasManufacturer.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("poDetailList", poDetailList);
		map.put("poHeaderList", poHeaderList);
		map.put("manufactureList", manufactureList);
		return map;
	}

	@Override
	public Map<String, Object> showStockReservationJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreGroup> storeGroupList = new ArrayList<MasStoreGroup>();
		List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();
		List<StoreFyDocumentNo> reservationNoList = new ArrayList<StoreFyDocumentNo>();
		Map<String, Object> maxMap = new HashMap<String, Object>();
		Session session = (Session) getSession();
		storeGroupList = session.createCriteria(MasStoreGroup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemTypeList = session.createCriteria(MasItemType.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		sectionList = session.createCriteria(MasStoreSection.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		categoryList = session.createCriteria(MasItemCategory.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		itemClassList = session.createCriteria(MasItemClass.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		reservationNoList = session.createCriteria(StoreFyDocumentNo.class)
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
				.list();
		String no = "";
		String finalreservationNo = "";
		int storeFyDocumentNoId = 0;
		for (StoreFyDocumentNo storeFyDocumentNo : reservationNoList) {
			if (storeFyDocumentNo.getReservationNo() != null) {
				no = ("" + storeFyDocumentNo.getReservationNo());
				no = getMaxNo(no);
			} else {
				no = getMaxNo("");
			}
		}
		map.put("max", no);
		map.put("storeGroupList", storeGroupList);
		map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);
		return map;
	}

	@Override
	public Map<String, Object> submitResrvedStock(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemBatchStockList = new ArrayList<StoreItemBatchStock>();
		List<StoreItemBatchStock> batchStockList = new ArrayList<StoreItemBatchStock>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector itemId = box.getVector("itemId");
		Vector batchName = box.getVector("batchName");
		Vector actualStock = box.getVector("stock");
		Vector reservedStock = box.getVector("reservedStock");
		Vector tillDate = box.getVector("tillDate");
		Vector extension = box.getVector("extension");
		Vector extensionDate = box.getVector("extensionDate");
		Session session = (Session) getSession();
		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			StoreReservationM storeReservationM = new StoreReservationM();
			storeReservationM.setReservationNo(box.getString("reservationNo"));
			storeReservationM.setRemarks(box.getString("remarks"));
			storeReservationM.setStatus("reserved");
			storeReservationM.setLastChgDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeReservationM.setLastChgTime(time);
			Users users = new Users();
			users.setId(box.getInt("userId"));
			storeReservationM.setLastChgBy(users);
			hbt.save(storeReservationM);

			for (int i = 0; i < batchName.size(); i++) {
				StoreReservationT storeReservationT = new StoreReservationT();
				  if (batchName.get(i) != null && !batchName.get(i).equals("")) {
                      String batchNo = (String)batchName.get(i).toString();
			batchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", batchNo)).list();
			if(batchStockList.size()>0){
			for(StoreItemBatchStock batchStock :batchStockList){
              int batchId = batchStock.getId();
              StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
                      storeItemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);
				if (itemId.get(i) != null && !itemId.get(i).equals("")) {
					// int itemId = Integer.parseInt(itemIds.get(i).toString());
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId(Integer.parseInt(itemId.get(i)
							.toString()));
					storeReservationT.setItem(masStoreItem);
				}

					//if (stockId.get(i) != null && !stockId.get(i).equals("")) {
						StoreItemBatchStock stock = new StoreItemBatchStock();
						storeItemBatchStock.setId(batchId);
						storeReservationT.setStock(storeItemBatchStock);
					//}

					if (tillDate.get(i) != null && !tillDate.get(i).equals("")) {
						storeReservationT.setReservationTillDate(HMSUtil
								.convertStringTypeDateToDateType(tillDate
										.get(i).toString()));
					}
					if (actualStock.get(i) != null
							&& !actualStock.get(i).equals("")) {
						storeReservationT.setActualStock(new BigDecimal(
								actualStock.get(i).toString()));
					}
					if (reservedStock.get(i) != null
							&& !reservedStock.get(i).equals("")) {
						storeReservationT.setReservedStock(new BigDecimal(
								reservedStock.get(i).toString()));
					}

					if (extension.get(i) != null
							&& !extension.get(i).equals("")) {
						storeReservationT.setExtension(extension.get(i)
								.toString());
					} else {
						storeReservationT.setExtension("n");
					}
					if (extensionDate.get(i) != null
							&& !extensionDate.get(i).equals("")) {
						storeReservationT.setExtensionDate(HMSUtil
								.convertStringTypeDateToDateType(extensionDate
										.get(i).toString()));
					}
					storeReservationT.setReservationM(storeReservationM);
					storeReservationT.setItemStatus("reserved");
					hbt.save(storeReservationT);
				//}

				
					StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) hbt.load(StoreItemBatchStock.class, batchId);

					itemBatchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.idEq(batchId)).add(Restrictions.ge("ClosingStock",new BigDecimal(0))).list();
					if (itemBatchStockList != null
							&& itemBatchStockList.size() > 0) {
						if (itemBatchStockList.get(0) != null) {
							BigDecimal closingStock = itemBatchStockList.get(0)
									.getClosingStock();
							
							if (reservedStock.get(i) != null
									&& !reservedStock.get(i).equals("")) {
								BigDecimal reserveStock = new BigDecimal(
										reservedStock.get(i).toString());
								
								itemBatchStock.setClosingStock(closingStock
										.subtract(reserveStock));
								itemBatchStock.setReservedQty(reserveStock);
							}
							hbt.update(itemBatchStock);

						}
					}
				}
			}
		}
	}

			/*
			 * Synchronization code by to generate the correct reservationNo on
			 * 04082014 at silvassa
			 */
			synchronized (this) {

				List<StoreFyDocumentNo> demandNoList = new ArrayList<StoreFyDocumentNo>();
				demandNoList = session
						.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id",
								box.getInt("deptId")))
						.add(Restrictions.eq("Hospital.Id",
								box.getInt("hospitalId"))).list();
				if (demandNoList.size() > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) demandNoList
							.get(0);
					storeFyDocumentNo.setReservationNo(box
							.getString("reservationNo"));

					hbt.update(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.saveOrUpdate(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setAdjustmentNo("0");
					storeFyDocumentNo.setAdjustmentStartNo("0");
					storeFyDocumentNo.setBalanceNo("0");
					storeFyDocumentNo.setBalanceStartNo("0");
					storeFyDocumentNo.setDefectEntryNo("0");
					storeFyDocumentNo.setDefectEntryStartNo("0");
					storeFyDocumentNo.setDemandNo("0");
					storeFyDocumentNo.setDemandStartNo("0");
					storeFyDocumentNo.setDepartment(new MasDepartment(box
							.getInt("deptId")));
					storeFyDocumentNo.setGrnNo("0");
					storeFyDocumentNo.setGrnStartNo("0");
					storeFyDocumentNo.setIssueDeptNo("0");
					storeFyDocumentNo.setIssueDeptReturnNo("0");
					storeFyDocumentNo.setIssueDeptReturnStartNo("0");
					storeFyDocumentNo.setIssueDeptStartNo("0");
					storeFyDocumentNo.setVendorReturnNo("0");
					storeFyDocumentNo.setVendorReturnStartNo("0");
					storeFyDocumentNo.setReservationNo(box
							.getString("reservationNo"));
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
					storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNo.setHospital(hospital);
					hbt.save(storeFyDocumentNo);
					hbt.refresh(storeFyDocumentNo);
					// session.save(storeFyDocumentNo);
					// session.refresh(storeFyDocumentNo);

				}
			}

			/*
			 * End By for synchronization
			 */
			//

			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showUnReservedItems(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreReservationM> storeReservationMList = new ArrayList<StoreReservationM>();
		storeReservationMList = session.createCriteria(StoreReservationM.class)
				.add(Restrictions.eq("Status", "reserved").ignoreCase()).list();
		map.put("storeReservationMList", storeReservationMList);
		return map;
	}

	@Override
	public Map<String, Object> responseForUnReservedItems(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreReservationM> reservationNoList = new ArrayList<StoreReservationM>();
		List<StoreReservationM> storeReservationMList = new ArrayList<StoreReservationM>();
		List<StoreReservationT> storeReservationTList = new ArrayList<StoreReservationT>();
		reservationNoList = session.createCriteria(StoreReservationM.class)
				.add(Restrictions.idEq(box.getInt("reservationId")))
				.add(Restrictions.eq("Status", "resrved").ignoreCase()).list();
		storeReservationMList = session.createCriteria(StoreReservationM.class)
				.add(Restrictions.eq("Status", "reserved").ignoreCase()).list();
		storeReservationTList = session.createCriteria(StoreReservationT.class)
				.createAlias("ReservationM", "header")
				.add(Restrictions.eq("header.Status", "reserved").ignoreCase())
				.list();
		map.put("reservationNoList", reservationNoList);
		map.put("storeReservationMList", storeReservationMList);
		map.put("storeReservationTList", storeReservationTList);
		return map;
	}

	@Override
	public Map<String, Object> submitUnResrvedStock(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreItemBatchStock> itemBatchStockList = new ArrayList<StoreItemBatchStock>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector itemId = box.getVector("itemId");
		Vector stockId = box.getVector("batchId");
		Vector actualStock = box.getVector("stock");
		Vector unreservedStock = box.getVector("unreservedStock");
		Vector tillDate = box.getVector("tillDate");
		Vector srno = box.getVector("srNo");
		Vector reservationTId = box.getVector("reservationTId");
		Session session = (Session) getSession();
		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		Transaction tx = null;

		try {
			tx = session.beginTransaction();
			
			StoreReservationM storeReservationM = (StoreReservationM) hbt.load(
					StoreReservationM.class, box.getInt("reservationId"));
			storeReservationM.setRemarks(box.getString("remarks"));
			storeReservationM.setStatus("unreserved");
			hbt.update(storeReservationM);

			for (int i = 0; i < itemId.size(); i++) {
				//if (srno.get(i).equals("y")) {
					int storeReservationTId = Integer.parseInt(reservationTId
							.get(i).toString());
					StoreReservationT storeReservationT = (StoreReservationT) hbt
							.load(StoreReservationT.class, storeReservationTId);

					if (unreservedStock.get(i) != null
							&& !unreservedStock.get(i).equals("")) {
						storeReservationT.setUnreservedStock(new BigDecimal(
								unreservedStock.get(i).toString()));
					}

					storeReservationT.setItemStatus("unreserved");
					hbt.update(storeReservationT);

					if (stockId.get(i) != null && !stockId.get(i).equals("")) {
						int batchId = Integer.parseInt(stockId.get(i)
								.toString());
						StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) hbt
								.load(StoreItemBatchStock.class, batchId);

						itemBatchStockList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.idEq(batchId)).add(Restrictions.ge("ClosingStock",new BigDecimal(0))).list();
						if (itemBatchStockList != null && itemBatchStockList.size() > 0) {
							if (itemBatchStockList.get(0) != null) {
								BigDecimal closingStock = itemBatchStockList
										.get(0).getClosingStock();
								BigDecimal reservedQty = itemBatchStockList
										.get(0).getReservedQty();
								
								if (unreservedStock.get(i) != null
										&& !unreservedStock.get(i).equals("")) {
									BigDecimal unreservedQty = new BigDecimal(
											unreservedStock.get(i).toString());
									
									itemBatchStock.setClosingStock(closingStock
											.add(unreservedQty));
									itemBatchStock.setReservedQty(reservedQty
											.subtract(unreservedQty));
								}
								hbt.update(itemBatchStock);

							}
						}
					}
				}
			//}

			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showDefectiveItemApprovalJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreDefectiveDrugT> storeDefectiveTList = new ArrayList<StoreDefectiveDrugT>();
		Session session = (Session) getSession();
		storeDefectiveTList = session.createCriteria(StoreDefectiveDrugT.class)
				.createAlias("DefectM", "header")
				.add(Restrictions.eq("header.Id", box.getInt("defectiveMId")))
				.list();
		map.put("storeDefectiveTList", storeDefectiveTList);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForDefectiveApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreDefectiveDrugM> storeDefectiveMList = new ArrayList<StoreDefectiveDrugM>();
		Session session = (Session) getSession();
		storeDefectiveMList = session.createCriteria(StoreDefectiveDrugM.class)
				.add(Restrictions.eq("Status", "y")).list();
		map.put("storeDefectiveMList", storeDefectiveMList);
		return map;
	}

	@Override
	public Map<String, Object> submitDefectiveItemApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector defectiveDrugTId = box.getVector("defectiveDrugTId");
		Vector qty = box.getVector("defectQty");
		boolean flag = false;
		StoreDefectiveDrugM defectiveDrugM = (StoreDefectiveDrugM) getHibernateTemplate()
				.load(StoreDefectiveDrugM.class, box.getInt("defectiveMId"));
		if (box.getString("flag").equals("Approve")) {
			defectiveDrugM.setStatus("a");
		} else if (box.getString("flag").equals("Reject")) {
			defectiveDrugM.setStatus("r");
		}
		hbt.update(defectiveDrugM);
		flag = true;
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showBroadCastDashBoardForDMO(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasHospital> districtHospitalList = new ArrayList<MasHospital>();
		List<StoreBroadcastEnquiryM> broadCastMList = new ArrayList<StoreBroadcastEnquiryM>();
		List instituteList = new ArrayList();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.idEq(box.getInt("hospitalId"))).list();
		int districtId = 0;
		if (hospitalList.size() > 0) {
			MasHospital masHospital = hospitalList.get(0);
			districtId = masHospital.getDistrict().getId();
		}
		districtHospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("District.Id", districtId)).list();
		
		if (districtHospitalList.size() > 0) {
			for (MasHospital districtHospital : districtHospitalList) {
				instituteList.add(districtHospital.getId());
			}
		}
		broadCastMList = session.createCriteria(StoreBroadcastEnquiryM.class).add(Restrictions.eq("Status", "y").ignoreCase())
				.add(Restrictions.or(Restrictions.isNull("ValidUpTo"), Restrictions.ge("ValidUpTo", new Date())))
				.add(Restrictions.in("Institute.Id", instituteList)).list();
		map.put("hospitalList", hospitalList);
		map.put("broadCastMList", broadCastMList);
		return map;
	}
	
	@Override
	public Map<String, Object> deleteBroadCast(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		StoreBroadcastEnquiryM broadcastEnquiryM = (StoreBroadcastEnquiryM)hbt.load(StoreBroadcastEnquiryM.class, box.getInt("enquiryMId"));
		broadcastEnquiryM.setStatus("n");
		hbt.update(broadcastEnquiryM);
		map = showBroadCastDashBoardForDMO(box);
		return map;
	}

	@Override
	public Map<String, Object> showBroadCastItemDetail(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBroadcastEnquiryT> broadCastEnquiryTList = new ArrayList<StoreBroadcastEnquiryT>();
		Session session = (Session) getSession();
		broadCastEnquiryTList = session
				.createCriteria(StoreBroadcastEnquiryT.class)
				.createAlias("EnquiryM", "header")
				.add(Restrictions.eq("header.Id",
						box.getInt("broadCastEnquiryMId"))).list();
		map.put("broadCastEnquiryTList", broadCastEnquiryTList);
		return map;
	}

	@Override
	public Map<String, Object> showDmoBroadStatus(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> itemBatchStockList = new ArrayList<Object[]>();
		List<StoreBroadcastEnquiryM> enquiryMList = new ArrayList<StoreBroadcastEnquiryM>();
		List<StoreBroadcastEnquiryT> enquiryTList = new ArrayList<StoreBroadcastEnquiryT>();
		Session session = (Session) getSession();
		int broadCastEnquiryTId = 0;
		int broadCastEnquiryMId = 0;
		if (box.getInt("broadCastEnquiryTId") != 0) {
			broadCastEnquiryTId = (Integer) box.getInt("broadCastEnquiryTId");
		}
		if (box.getInt("broadCastEnquiryMId") != 0) {
			broadCastEnquiryMId = (Integer) box.getInt("broadCastEnquiryMId");
		}
		enquiryMList = session.createCriteria(StoreBroadcastEnquiryM.class).add(Restrictions.idEq(broadCastEnquiryMId)).list();
		enquiryTList = session.createCriteria(StoreBroadcastEnquiryT.class).add(Restrictions.idEq(broadCastEnquiryTId)).list();
		int hospitalId = 0;
		if(enquiryMList.size()>0){
			StoreBroadcastEnquiryM storeBroadcastEnquiryM = (StoreBroadcastEnquiryM)enquiryMList.get(0);
			hospitalId = storeBroadcastEnquiryM.getInstitute().getId();
		}
		String broadCastStatus = "";
		if(enquiryTList.size()>0){
			StoreBroadcastEnquiryT storeBroadcastEnquiryT = (StoreBroadcastEnquiryT)enquiryTList.get(0);
			broadCastStatus = storeBroadcastEnquiryT.getBroadcastStatus();
		}
		//if(broadCastStatus.equals("b")){
		itemBatchStockList = session
				.createCriteria(StoreItemBatchStock.class)
				.createAlias("Item", "item")
				.createAlias("item.ItemConversion", "au")
				.createAlias("Hospital", "hospital")
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
				.add(Restrictions.eq("item.Id", box.getInt("itemId")))
				.setProjection(
						Projections
								.projectionList()
								.add(Projections.sum("ClosingStock"))
								.add(Projections.groupProperty("item.PvmsNo"))
								.add(Projections
										.groupProperty("item.Nomenclature"))
								.add(Projections
										.groupProperty("au.ItemUnitName"))
								.add(Projections
										.groupProperty("hospital.HospitalName"))
								.add(Projections.groupProperty("hospital.Id")))
				.list();
		//}

		map.put("itemBatchStockList", itemBatchStockList);
		map.put("broadCastEnquiryTId", broadCastEnquiryTId);
		map.put("broadCastEnquiryMId", broadCastEnquiryMId);
		map.put("hospitalId", hospitalId);
		map.put("broadCastStatus", broadCastStatus);
		return map;
	}

	@Override
	public Map<String, Object> submitDmoDashboardBroadData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector instituteId = box.getVector("instituteId");
		Vector srNo = box.getVector("srNo");
		Vector availableStock = box.getVector("availableStock");
		Vector dmostatus = box.getVector("dmostatus");
		
		Vector spareQty = box.getVector("spareQty");
		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		/*List<StoreBroadcastStatus>broadCastStatusList = new ArrayList<StoreBroadcastStatus>();
		broadCastStatusList = session.createCriteria(StoreBroadcastStatus.class).createAlias("EnquiryT", "enquiryT")
						.add(Restrictions.eq("enquiryT.Id", box.getInt("broadCastEnquiryTId"))).list();
		
		for (int i = 0; i < broadCastStatusList.size(); i++) {
			StoreBroadcastStatus storeBroadcastStatus = new StoreBroadcastStatus();
			StoreBroadcastStatus storeBroadcastStatus = (StoreBroadcastStatus)hbt.load(StoreBroadcastStatus.class, box.getInt("broadCastEnquiryTId"));
			
			if (srNo.get(i).equals("y")) {
				if (instituteId.get(i) != null && !instituteId.get(i).equals("")) {
					
					MasHospital masHospital = new MasHospital();
					masHospital.setId(Integer.parseInt(instituteId.get(i)
							.toString()));
					storeBroadcastStatus.setInstitute(masHospital);
				}
					storeBroadcastStatus.setAvailableStock(new BigDecimal(
							availableStock.get(i).toString()));
					storeBroadcastStatus.setDmoStatus(dmostatus.get(i)
							.toString());
					if(!spareQty.get(i) .equals(new BigDecimal(0))){
						storeBroadcastStatus.setSpareQty(new BigDecimal(spareQty.get(i).toString()));
					}else{
						storeBroadcastStatus.setSpareQty(new BigDecimal(0));
					}
					StoreBroadcastEnquiryT storeBroadcastEnquiryT = new StoreBroadcastEnquiryT();
					storeBroadcastEnquiryT.setId(box
							.getInt("broadCastEnquiryTId"));
					storeBroadcastStatus.setEnquiryT(storeBroadcastEnquiryT);
					Users users = new Users();
					users.setId(box.getInt("userId"));
					storeBroadcastStatus.setLastChgBy(users);
					storeBroadcastStatus.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(date));
					storeBroadcastStatus.setLastChgTime(time);
					hbt.save(storeBroadcastStatus);
					
			}
		}*/
		
		StoreBroadcastEnquiryT broadcastEnquiryT = (StoreBroadcastEnquiryT)hbt.load(StoreBroadcastEnquiryT.class, box.getInt("broadCastEnquiryTId"));
		broadcastEnquiryT.setBroadcastStatus("block");
		hbt.update(broadcastEnquiryT);

		flag = true;
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> empanellBilling(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		hospitalList = session
				.createCriteria(MasHospital.class, "masHospital")
				.add(Restrictions.eq("masHospital.Status", "y".toLowerCase())
						.ignoreCase()).list();

		map.put("hospitalList", hospitalList);
		return map;
	}

	@Override
	public Map<String, Object> showBroadCastDashBoardForInstitute(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasHospital> districtHospitalList = new ArrayList<MasHospital>();
		List<StoreBroadcastEnquiryM> broadCastMList = new ArrayList<StoreBroadcastEnquiryM>();
		List instituteList = new ArrayList();
		Session session = (Session) getSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.idEq(box.getInt("hospitalId"))).list();
		int districtId = 0;
		if (hospitalList.size() > 0) {
			MasHospital masHospital = hospitalList.get(0);
			districtId = masHospital.getDistrict().getId();
		}
		districtHospitalList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("District.Id", districtId)).list();
		
		if (districtHospitalList.size() > 0) {
			for (MasHospital districtHospital : districtHospitalList) {
				instituteList.add(districtHospital.getId());
			}
		}
		broadCastMList = session.createCriteria(StoreBroadcastEnquiryM.class)
				.add(Restrictions.in("Institute.Id", instituteList))
				//.createAlias("EnquiryT", "enquiryT")
				//.createAlias("enquiryT.EnquiryM", "enquiryM")
				.add(Restrictions.eq("Status", "y").ignoreCase())
				//.add(Restrictions.eq("BroadcastType", "Enquiry"))
				.list();
		map.put("hospitalList", hospitalList);
		map.put("broadCastMList", broadCastMList);
		return map;
	}

	@Override
	public Map<String, Object> showBroadCastItemDetailInstitute(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreBroadcastEnquiryT> broadCastEnquiryTList = new ArrayList<StoreBroadcastEnquiryT>();
		
		broadCastEnquiryTList = session
				.createCriteria(StoreBroadcastEnquiryT.class)
				.createAlias("EnquiryM", "header")
				.add(Restrictions.eq("header.Id",
						box.getInt("broadCastEnquiryMId"))).add(Restrictions.ne("BroadcastStatus", "block").ignoreCase()).list();
		
		/*List<StoreBroadcastStatus> broadCastStatusList = new ArrayList<StoreBroadcastStatus>();
		broadCastStatusList = session
				.createCriteria(StoreBroadcastStatus.class)
				.add(Restrictions.eq("Id",
						box.getInt("broadCastEnquiryStatusId"))).list();
		map.put("broadCastStatusList", broadCastStatusList);*/
		map.put("broadCastEnquiryTList", broadCastEnquiryTList);
		return map;
	}

	@Override
	public Map<String, Object> showInstituteBroadStatus(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBroadcastStatus> storeBroadcastStatusList = new ArrayList<StoreBroadcastStatus>();
		List<StoreBroadcastEnquiryT> enquiryTList = new ArrayList<StoreBroadcastEnquiryT>();
		List<Object[]> itemBatchStockList = new ArrayList<Object[]>();
		Session session = (Session) getSession();
		int broadCastEnquiryTId = 0;
		if (box.getInt("broadCastEnquiryTId") != 0) {
			broadCastEnquiryTId = (Integer) box.getInt("broadCastEnquiryTId");
		}
		enquiryTList = session.createCriteria(StoreBroadcastEnquiryT.class).add(Restrictions.idEq(broadCastEnquiryTId)).list();
		String broadCastStatus = "";
		if(enquiryTList.size()>0){
			StoreBroadcastEnquiryT storeBroadcastEnquiryT = (StoreBroadcastEnquiryT)enquiryTList.get(0);
			broadCastStatus = storeBroadcastEnquiryT.getBroadcastStatus();
		}
		
		//if(broadCastStatus.equals("b")){
		itemBatchStockList = session
				.createCriteria(StoreItemBatchStock.class)
				.createAlias("Item", "item")
				.createAlias("item.ItemConversion", "au")
				.createAlias("Hospital", "hospital")
				.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
				.add(Restrictions.eq("item.Id", box.getInt("itemId")))
				.setProjection(
						Projections
								.projectionList()
								.add(Projections.sum("ClosingStock"))
								.add(Projections.groupProperty("item.PvmsNo"))
								.add(Projections
										.groupProperty("item.Nomenclature"))
								.add(Projections
										.groupProperty("au.ItemUnitName"))
								.add(Projections
										.groupProperty("hospital.HospitalName"))
								.add(Projections.groupProperty("hospital.Id")))
				.list();
		
		/*storeBroadcastStatusList = session
				.createCriteria(StoreBroadcastStatus.class)
				.createAlias("EnquiryT", "enquiryT")
				.createAlias("Institute", "institute")
				.add(Restrictions.eq("enquiryT.Id", broadCastEnquiryTId))
				//.add(Restrictions.eq("DmoStatus", "Forward"))
				.add(Restrictions.eq("institute.Id", box.getInt("hospitalId")))
				.list();
		map.put("storeBroadcastStatusList", storeBroadcastStatusList);*/
		map.put("broadCastEnquiryTId", broadCastEnquiryTId);
		map.put("broadCastStatus", broadCastStatus);
		map.put("itemBatchStockList", itemBatchStockList);
		map.put("enquiryTList", enquiryTList);
		return map;
	}

	@Override
	public Map<String, Object> submitInstituteDashboardBroadData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector hospitalId = box.getVector("hospitalId");
		Vector srNo = box.getVector("srNo");
		Vector availableStock = box.getVector("availableStock");
		Vector instituteStatus = box.getVector("instituteStatus");
		Vector spareQty = box.getVector("spareQty");
		/*Vector storeBroadCastStatusId = box.getVector("storeBroadCastStatusId");*/
		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		for (int i = 0; i < hospitalId.size(); i++) {
			StoreBroadcastStatus storeBroadcastStatus = new StoreBroadcastStatus();
			if (srNo.get(i).equals("y")) {
				if (hospitalId.get(i) != null && !hospitalId.get(i).equals("")) {
				/*int storeCastStatusId =Integer.parseInt(storeBroadCastStatusId.get(i).toString());
				storeBroadcastStatus = (StoreBroadcastStatus) getHibernateTemplate().load(StoreBroadcastStatus.class, storeCastStatusId);*/
				storeBroadcastStatus.setInstituteStatus(instituteStatus
						.get(i).toString());
				storeBroadcastStatus.setSpareQty(new BigDecimal(spareQty
						.get(i).toString()));
				
				
					MasHospital masHospital = new MasHospital();
					masHospital.setId(Integer.parseInt(hospitalId.get(i)
							.toString()));
					storeBroadcastStatus.setInstitute(masHospital);
					storeBroadcastStatus.setAvailableStock(new BigDecimal(
							availableStock.get(i).toString()));
					
					StoreBroadcastEnquiryT storeBroadcastEnquiryT = new StoreBroadcastEnquiryT();
					storeBroadcastEnquiryT.setId(box
							.getInt("broadCastEnquiryTId"));
					storeBroadcastStatus.setEnquiryT(storeBroadcastEnquiryT);
					Users users = new Users();
					users.setId(box.getInt("userId"));
					storeBroadcastStatus.setLastChgBy(users);
					storeBroadcastStatus.setLastChgDate(HMSUtil
							.convertStringTypeDateToDateType(date));
					storeBroadcastStatus.setLastChgTime(time);
					hbt.save(storeBroadcastStatus);
				}
			}
		}
		StoreBroadcastEnquiryT broadcastEnquiryT = (StoreBroadcastEnquiryT)hbt.load(StoreBroadcastEnquiryT.class, box.getInt("broadCastEnquiryTId"));
		broadcastEnquiryT.setBroadcastStatus("a");
		hbt.update(broadcastEnquiryT);


		flag = true;
		map.put("flag", flag);
		return map;
	}
	
	@Override
	public Map<String, Object> viewBroadCastStatusData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreBroadcastStatus>storeBroadCastList = new ArrayList<StoreBroadcastStatus>();
		Session session = (Session)getSession();
		storeBroadCastList = session.createCriteria(StoreBroadcastStatus.class).createAlias("EnquiryT", "enquiryT").createAlias("enquiryT.EnquiryM", "enquiryM")
		.createAlias("enquiryM.Institute", "institute").add(Restrictions.eq("enquiryT.BroadcastStatus", "a")).add(Restrictions.eq("institute.Id", box.getInt("hospitalId"))).list();
		map.put("storeBroadCastList", storeBroadCastList);
		return map;
	}

	@Override
	public Map<String, Object> showEmergencyIndentProcessingByKMSCL(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentT> storeInternalIndentTList = new ArrayList<StoreInternalIndentT>();
		List<MasHospital> instituteList = new ArrayList<MasHospital>();
		storeInternalIndentTList = getSession()
				.createCriteria(StoreInternalIndentT.class)
				.createAlias("Internal", "header")
				.add(Restrictions.eq("header.Id",
						box.getInt("storeInternalMId")))
				// .add(Restrictions.eq("header.IndentType", "Emergent"))
				.list();
		instituteList = session.createCriteria(MasHospital.class)
				.add(Restrictions.eq("Status", "y")).list();
		map.put("storeInternalIndentTList", storeInternalIndentTList);
		map.put("instituteList", instituteList);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForEmergencyIndentProcessingByKMSCL(
			Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		List<StoreInternalIndentM> storeInternalIndentMList = new ArrayList<StoreInternalIndentM>();
		List<StoreAnnualIndentSetup> annualIndentSetUpList = new ArrayList<StoreAnnualIndentSetup>();
		annualIndentSetUpList = session
				.createCriteria(StoreAnnualIndentSetup.class)
				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		Date fDate = new Date();
		Date tDate = new Date();
		if (annualIndentSetUpList.size() > 0) {
			StoreAnnualIndentSetup annualIndentSetup = annualIndentSetUpList
					.get(0);
			String fromDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getFromDate());
			String toDate = HMSUtil
					.convertDateToStringWithoutTime(annualIndentSetup
							.getToDate());
			fDate = HMSUtil.convertStringTypeDateToDateType(fromDate);
			tDate = HMSUtil.convertStringTypeDateToDateType(toDate);
		}
		storeInternalIndentMList = session
				.createCriteria(StoreInternalIndentM.class)
				.createAlias("Hospital", "hospital")
				.add(Restrictions.eq("Status", "emergent").ignoreCase())
				.add(Restrictions.between("DemandDate", fDate, tDate))
				.add(Restrictions.eq("hospital.Id", box.getInt("hospitalId")))
				.list();
		map.put("storeInternalIndentMList", storeInternalIndentMList);
		return map;
	}

	@Override
	public Map<String, Object> submitEmergencyIndentProcessingByKMSCL(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalTId = box.getVector("storeInternalTId");
		Vector status = box.getVector("status");
		Vector minNo = box.getVector("minNo");
		Vector remarks = box.getVector("remarks");

		boolean flag = false;
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");

		try {
			StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
			storeInternalIndentM = (StoreInternalIndentM) hbt.load(
					StoreInternalIndentM.class,
					box.getInt("storeInternalIndentM"));
			storeInternalIndentM.setKmsclProcessDate(HMSUtil
					.convertStringTypeDateToDateType(date));
			storeInternalIndentM.setStatus("Emergent Indent Processing KMSCL");
			// storeInternalIndentM.setRemarks(box.getString("dhsRemarks"));
			hbt.update(storeInternalIndentM);

			for (int i = 0; i < storeInternalTId.size(); i++) {
				StoreInternalIndentT storeInternalIndentT = new StoreInternalIndentT();
				if (storeInternalTId.get(i) != null
						&& !storeInternalTId.get(i).equals("")) {
					int internalTId = Integer.parseInt(storeInternalTId.get(i)
							.toString());

					storeInternalIndentT = (StoreInternalIndentT) hbt.load(
							StoreInternalIndentT.class, internalTId);
					if (status.get(i) != null && !status.get(i).equals("")) {
						storeInternalIndentT.setItemStatus(status.get(i)
								.toString());
					}
					if (minNo.get(i) != null && !minNo.get(i).equals("")) {
						storeInternalIndentT.setMinNo(minNo.get(i).toString());
					}
					if (remarks.get(i) != null && !remarks.get(i).equals("")) {
						storeInternalIndentT.setRemarks(remarks.get(i)
								.toString());
					}

					hbt.update(storeInternalIndentT);
				}

			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> empanelledSave(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		int visitId = box.getInt(VISIT_ID);

		int indentNo = box.getInt(INDENT_NO);

		// List<StoreInternalIndentM>storeInternalIndentM=new
		// ArrayList<StoreInternalIndentM>();

		int counter = box.getInt("counter");
		int empanelledId =  box.getInt("empanelledId");
		
		int i = 1;
		try {

			Session session = (Session) getSession();
			org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			// StoreInternalIndentT
			// storeInternalIndentT=(StoreInternalIndentT)hbt.get(StoreInternalIndentT.class,indentNo);
			StoreEmpanelledBillingM storeEmpanelledBillingM = new StoreEmpanelledBillingM();
			int totalValue = box.getInt("totalValue");
			int discount = box.getInt("discount");
			int discountAmt = box.getInt("discountAmt");
			int amt = box.getInt("amt");
			int receivedAmt = box.getInt("receivedAmt");
			int hinId = box.getInt("hinId");
			int presId = box.getInt("ppresId");
			int hospitalId = box.getInt(RequestConstants.HOSPITAL_ID);
			int deptId = box.getInt(RequestConstants.DEPT_ID);
			int userId = box.getInt(RequestConstants.USER_ID);
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			patientPrescriptionHeader.setId(presId);
			storeEmpanelledBillingM.setPrescription(patientPrescriptionHeader);

			Patient patient = new Patient();
			patient.setId(hinId);
			storeEmpanelledBillingM.setHin(patient);
			Users users = new Users();
			users.setId(userId);
			/*MasHospital hospital = new MasHospital();
			hospital.setId(hospitalId);
			storeEmpanelledBillingM.setHospital(hospital);*/
			
			MasEmpaneled masEmpanel = new MasEmpaneled();
			masEmpanel.setId(empanelledId);
			Integer val= new Integer(empanelledId);
			long x = val.longValue();
			storeEmpanelledBillingM.setEmpanelledId(x);
			//storeEmpanelledBillingM.setLastChgBy(users);
			// storeEmpanelledBillingM.setEmpanelledId(userId);
			storeEmpanelledBillingM.setBillAmt(new BigDecimal(totalValue));
			storeEmpanelledBillingM
					.setDiscountPercent(new BigDecimal(discount));
			storeEmpanelledBillingM.setDiscountAmt(new BigDecimal(discountAmt));
			storeEmpanelledBillingM.setReceivedAmt(new BigDecimal(receivedAmt));
			hbt.save(storeEmpanelledBillingM);

			StoreEmpanelledBillingT storeEmpanelledBillingT = new StoreEmpanelledBillingT();
			for (i = 1; i < counter; i++) {

				int qtyReq = box.getInt("QTY_IN_REQUEST");
				int qtyIssue = box.getInt("ISSUE_QUANTITY");
				int unitRate = box.getInt("UNIT_RATE");
				int netAmt = box.getInt("netAmt");

				storeEmpanelledBillingT.setEmBillingM(storeEmpanelledBillingM);

				MasStoreItem masStoreItem = new MasStoreItem();
				masStoreItem.setId(box.getInt(RequestConstants.ITEMS_ID + i));
				storeEmpanelledBillingT.setItem(masStoreItem);
				storeEmpanelledBillingT.setReqQty(new BigDecimal(box
						.getInt(RequestConstants.QTY_IN_REQUEST + i)));
				storeEmpanelledBillingT.setIssueQty(new BigDecimal(box
						.getInt(RequestConstants.ISSUE_QUANTITY + i)));
				storeEmpanelledBillingT.setUnitRate(new BigDecimal(box
						.getInt(RequestConstants.UNIT_RATE + i)));
				storeEmpanelledBillingT.setStatus("y");
				hbt.save(storeEmpanelledBillingT);

			}

			// Visit visit=new Visit();
			Visit visit = (Visit) hbt.load(Visit.class, visitId);
			visit.setEmpanelledVisitFlag("n");

			hbt.update(visit);
			hbt.flush();
			hbt.clear();

			// hbt.update(storeInternalIndentTList);

		} catch (HibernateException e) {
			e.printStackTrace();
		}

		return map;
	}

	@Override
	public Map<String, Object> submitIndentTracking(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalIndentMId = box.getVector("storeInternalIndentMId");
		Vector pen = box.getVector("pen");
		Vector employeeId = box.getVector("employeeId");
		boolean flag = false;

		try {
			for (int i = 0; i < storeInternalIndentMId.size(); i++) {
				StoreInternalIndentM storeInternalIndentM = new StoreInternalIndentM();
				if (storeInternalIndentMId.get(i) != null
						&& !storeInternalIndentMId.get(i).equals("")) {
					int internalMId = Integer.parseInt(storeInternalIndentMId
							.get(i).toString());

					storeInternalIndentM = (StoreInternalIndentM) hbt.load(
							StoreInternalIndentM.class, internalMId);
					if (pen.get(i) != null && !pen.get(i).equals("")) {
						storeInternalIndentM.setPeNo(pen.get(i).toString());

						if (employeeId.get(i) != null
								&& !employeeId.get(i).equals("")) {
							MasEmployee masEmployee = new MasEmployee();
							masEmployee.setId(Integer.parseInt(employeeId
									.get(i).toString()));
							storeInternalIndentM
									.setResponsiblePerson(masEmployee);
						}

						hbt.update(storeInternalIndentM);
					}
				}

			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> getEmployeeName(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		Session session = (Session) getSession();
		/*employeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("PEN", box.getString("peNo"))).list();*/
		employeeList = session.createCriteria(MasEmployee.class)
				.add(Restrictions.eq("Id", box.getInt("empId"))).
				//.createAlias("Department", "dep")
				//.add(Restrictions.eq("dep.Id", box.getInt("departmentId"))).
				list();
		/*int employeeId = 0;
		String employeeName = "";*/
		String pen="";
		if (employeeList.size() > 0) {
			MasEmployee masEmployee = employeeList.get(0);
			pen = masEmployee.getPEN();
			map.put("pen", pen);
			/*
			employeeId = masEmployee.getId();
			employeeName = masEmployee.getFirstName() + " "
					+ masEmployee.getLastName();
			map.put("employeeId", employeeId);
			map.put("employeeName", employeeName);*/
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getItemUnitDetail(Box box) {
		List<StoreItemBatchStock> masStoreBrandList = new ArrayList<StoreItemBatchStock>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";
		int itemId = 0;
		int deptId = 0;
		int hospitalId = 0;
		if (box.getString("pvmsNo") != null
				&& !"".equalsIgnoreCase(box.getString("pvmsNo"))) {
			pvmsNo = box.getString("pvmsNo");
		}
		if (box.getString(RequestConstants.DEPT_ID) != null
				&& !"".equalsIgnoreCase(box.getString(RequestConstants.DEPT_ID))) {
			deptId = box.getInt(RequestConstants.DEPT_ID);
		}
		if (box.getString(RequestConstants.HOSPITAL_ID) != null
				&& !"".equalsIgnoreCase(box
						.getString(RequestConstants.HOSPITAL_ID))) {
			hospitalId = box.getInt(RequestConstants.HOSPITAL_ID);
		}
		if (box.getString("itemId") != null
				&& !"".equalsIgnoreCase(box.getString("itemId"))) {
			itemId = box.getInt("itemId");
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = "";
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (java.text.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Date issueDate = java.sql.Date.valueOf(date4MySQL);

		Session session = (Session) getSession();
		itemList = session.createCriteria(MasStoreItem.class)
				.add(Restrictions.eq("PvmsNo", pvmsNo)).list();
		
		masStoreBrandList = session
				.createCriteria(StoreItemBatchStock.class)
				.createAlias("Item", "item")
				.createAlias("Department", "dept")
				.add(Restrictions.eq("dept.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("item.Id", itemId))
				// .add(Restrictions.gt("CostPrice", costPrice))
				.add(Restrictions.gt("ExpiryDate",
						HMSUtil.getCurrentDateAndTimeObject()))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
				.addOrder(Order.asc("ExpiryDate")).list();
		/*
		 * for (StoreItemBatchStock storeItemBatchStock : masStoreBrandList) {
		 * clos = clos.add(storeItemBatchStock.getClosingStock()); }
		 */
		map.put("masItemBatchStockValue", masStoreBrandList);
		map.put("itemList", itemList);
		return map;

	}

	@Override
	public Map<String, Object> submitDirectDispensing(Box box) {
		Date issueDate = new Date();
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = (Map<String, Object>) HMSUtil
				.getCurrentDateAndTime();
		String time = (String) utilMap.get("currentTime");
		int hospitalId = 0;
		int departmentId = 0;
		int hinId = 0;
		int visitId = 0;
		int totalNumberOfPres = 0;
		int userId = 0;
		if (box.getString(RequestConstants.HOSPITAL_ID) != null
				&& !"".equals(box.getString(RequestConstants.HOSPITAL_ID))) {
			hospitalId = box.getInt(RequestConstants.HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
		}
		if (box.getString(RequestConstants.DEPT_ID) != null
				&& !"".equals(box.getString(RequestConstants.DEPT_ID))) {
			departmentId = box.getInt(RequestConstants.DEPT_ID);
			map.put("deptId", departmentId);
		}
		if (box.getString("hdb") != null
				&& !"".equals(box.getString("hdb"))) {
			totalNumberOfPres = box.getInt("hdb");
		}
		if (box.getString("visitId") != null
				&& !"".equals(box.getString("visitId"))) {
			visitId = box.getInt("visitId");
		}
		if (box.getString("hinId") != null
				&& !"".equals(box.getString("hinId"))) {
			hinId = box.getInt("hinId");
		}

		if (box.get(RequestConstants.USER_ID) != null) {
			userId = box.getInt(USER_ID);
		}
		
		int presHdId = 0;
		if(box.getInt("presHdId")!=0){
			presHdId = box.getInt("presHdId");
		}
		
		
		Users user = new Users();
		user.setId(userId);
		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);
		MasDepartment masDepartment = new MasDepartment();
		masDepartment.setId(departmentId);
		boolean flag = false;
		Transaction tx = null;
		
		StoreIssueT dailyPresc=null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<String> issueNoList = new ArrayList<String>();
			String query1 = "select issue_no from store_issue_m where store_issue_m.hospital_id="
					+ hospitalId + " order by id desc limit 1 ";
			issueNoList = session.createSQLQuery(query1).list();
			String no = "";
			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {
					no = ((String) issueNoList.get(i));
				}
			}
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", "PHR");
			String patientIssueNo = "";
			patientIssueNo = getMaxNoByDeptCode(maxMap);
			List<Object> objectList = new ArrayList<Object>();
			String prescriptionNo = "1";
			String qry = "";
			objectList = (List<Object>) session
					.createSQLQuery(
							"select max(prescription_id)+1  from patient_prescription_header h,patient p where p.hin_id=h.hin_id and p.hin_id="
									+ hinId
									+ "and h.hospital_id="
									+ hospitalId
									+ "").list();
			for (Object object : objectList) {
				if (object != null) {
					prescriptionNo = Integer.toString((((Integer) object)
							.intValue()));

				}

			}
			/*
			 * StoreIssueT storeIssueTObj = new StoreIssueT(); List<StoreIssueT>
			 * storeIssueTList = new ArrayList<StoreIssueT>(); storeIssueTList =
			 * hbt .find(
			 * "select sit from jkt.hms.masters.business.StoreIssueT as sit  where sit.Visit.Id="
			 * + visitId); int issueId = 0; if (storeIssueTList.size() > 0) {
			 * for (StoreIssueT storeIssueT : storeIssueTList) { if
			 * (storeIssueT.getIssueM() != null) { issueId =
			 * storeIssueT.getIssueM().getId(); } } }
			 */
			Visit visit = (Visit) session.get(Visit.class, visitId);
			MasEmployee employee=new MasEmployee();
			Integer promoterId=0;
			if (box.getInt("promoter") !=0) {
				promoterId = box.getInt("promoter");
				employee.setId(promoterId);
			}
			System.out.println("totalRow "+totalNumberOfPres);
			if (totalNumberOfPres > 0) {
				StoreIssueM issueM = new StoreIssueM();
				issueM.setIssueType("i");
				issueM.setIssueNo(patientIssueNo);
				issueM.setIssueDate(HMSUtil.getCurrentDateAndTimeObject());
				String deptType = "";
				deptType = (String) box.getString("deptType");

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				patientIssueNo = generateDrugIssueNumber(deptType);

				issueM.setStatus("o");
				issueM.setHospital(masHospital);
				issueM.setLastChgBy(user);
				issueM.setLastChgDate(HMSUtil.getCurrentDateAndTimeObject());
				issueM.setLastChgTime(time);
				issueM.setHin(visit.getHin());

				hbt.save(issueM);
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				if(box.getInt("presHdId")==0){


					Patient patient = new Patient();
					patient.setId(hinId);
					patientPrescriptionHeader.setHin(patient);
					patientPrescriptionHeader.setDepartment(masDepartment);
					patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
					patientPrescriptionHeader.setVisit(visit);
					patientPrescriptionHeader.setHospital(masHospital);
					patientPrescriptionHeader.setStatus("p");
					patientPrescriptionHeader.setPrescriptionDate(HMSUtil
							.getCurrentDateAndTimeObject());
					patientPrescriptionHeader.setPrescriptionTime(time);
					patientPrescriptionHeader.setDispencingDate(HMSUtil
							.getCurrentDateAndTimeObject());
					patientPrescriptionHeader.setIssuedStatus("y");
					visit.setCurPharVisitStatus("n");
					hbt.update(visit);
					hbt.save(patientPrescriptionHeader);
				}else{
					visit.setCurPharVisitStatus("n");
					patientPrescriptionHeader.setIssuedStatus("y");
					patientPrescriptionHeader.setId(presHdId);
					
				}
				
				//copper-t procedure item
				ProcedureHeader procedureHeader= new ProcedureHeader();
				
				Integer promoterHospital=0;
				if(box.get("prcHospitalText")!=null && !box.get("prcHospitalText").equals("")){
					procedureHeader.setProcedureHospitalName(box.get("prcHospitalText"));
				}else if (box.getInt("prcHospital") !=0) {
					promoterHospital = box.getInt("prcHospital");
					procedureHeader.setHospital(new MasHospital(promoterHospital));
				}
				System.out.println("promoterIdpromoterId "+promoterId);
				if(promoterId!=0){
					procedureHeader.setMedicalOfficer(employee);
				}	
				procedureHeader.setHin(new Patient(hinId));
				procedureHeader.setLastChgBy(user);
				procedureHeader.setLastChgDate(new Date());
				procedureHeader.setLastChgTime(HMSUtil.currentTime());
				procedureHeader.setRequisitionDate(new Date());
				
				procedureHeader.setVisit(visit);
				procedureHeader.setStatus("n");
				hbt.save(procedureHeader);
				//persisting procedureheader: end
				
				MasFrequency masFrequency = null;
				MasStoreItem masStoreItem=null;
				RouteOfAdministration routeOfAdministration = null;
				OpdInstructionTreatment opdInstructionTreatment = null;
				
				//added by govind 26-09-2017 for Tapered Medicine
				List<TaperedMedicineUtil> taperUtilList=new ArrayList<TaperedMedicineUtil>();
				int taperHdb=0;
				if (null !=box.getString("taperedMedicineHdb") && Integer.parseInt(box.getString("taperedMedicineHdb")) >= 0) {
					taperHdb = Integer.parseInt(box.getString("taperedMedicineHdb"));
				}
				for (int i = 1; i <= totalNumberOfPres; i++) {
					Integer itemId=0;
					if (box.get("drugItemId" + i) != null) {
						itemId=box.getInt("drugItemId" + i);
					}
					for(int t=1;t<=taperHdb;t++){//System.out.println("taperHdb "+taperHdb+" t "+t);
						if(box.get("taperedItemId"+i+"_"+t)!=null){
							Integer itemId2=box.getInt("taperedItemId"+i+"_"+t);//System.out.println("itemId2 "+itemId2);
						if(itemId.equals(itemId2)){
							TaperedMedicineUtil tap=new TaperedMedicineUtil();
							tap.setItemId(box.getInt("taperedItemId"+i+"_"+t));
						if(box.get("taperedFrequency"+i+"_"+t)!=null){
							tap.setFrequency(box.getInt("taperedFrequency"+i+"_"+t));
						}
						if(box.get("taperedDosage"+i+"_"+t)!=null){
							tap.setDosage(box.getString("taperedDosage"+i+"_"+t));
						}
						if(box.get("taperedDosageCount"+i+"_"+t)!=null){
							tap.setDosageCount(new BigDecimal(box.getString("taperedDosageCount"+i+"_"+t)));
						}
						if(box.get("taperedDuration"+i+"_"+t)!=null){
							tap.setDuration(box.getInt("taperedDuration"+i+"_"+t));
						}
						if(box.get("total"+i+"_"+t)!=null){
							tap.setTotal(new BigDecimal(box.getString("total"+i+"_"+t)));
						}
						taperUtilList.add(tap);
					  }
					}
				}
				}
				//added by govind 26-09-2017 for Tapered Medicine end
				for (int i = 1; i <= totalNumberOfPres; i++) {
					if (box.get("nomenclature" + i) != null && !box.getString("nomenclature" + i).equals("")){
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT.setVisit(visit);
					if (box.getString("drugItemId" + i) != null
							&& !"".equals(box.getString("drugItemId" + i))) {
						masStoreItem = (MasStoreItem) session.get(
								MasStoreItem.class,
								box.getInt("drugItemId" + i));
						map.put("itemId", box.getInt("drugItemId" + i));
						patientPrescriptionDetails.setItem(masStoreItem);
						storeIssueT.setItem(masStoreItem);
					}
					//map = getBrandMap(map); by govind
					if (box.getString("frequency" + i) != null && !"0".equals(box.getString("frequency" + i))) {
						if(box.getInt("frequency"+ i)>0){
						masFrequency = new MasFrequency(box.getInt("frequency"+ i));
						patientPrescriptionDetails.setFrequency(masFrequency);
						}
					}
					if (box.getString("route" + i) != null
							&& !"0".equals(box.getString("route" + i))) {
						if(box.getInt("route"+ i)>0){
						routeOfAdministration = new RouteOfAdministration(
								box.getInt("route" + i));
						patientPrescriptionDetails
								.setRoute(routeOfAdministration);
						}
					}
					if (box.getString("instruction" + i) != null
							&& !"0".equals(box.getString("instruction" + i))) {
						if(box.getInt("instruction"+ i)>0){
						opdInstructionTreatment = new OpdInstructionTreatment(
								box.getInt("instruction" + i));
						patientPrescriptionDetails
								.setInsrtuction(opdInstructionTreatment);
						}
					}
					if (box.getString("noOfDays" + i) != null
							&& !"".equals(box.getString("noOfDays" + i))) {
						patientPrescriptionDetails.setNoOfDays(box
								.getInt("noOfDays" + i));
					}
					if (box.getString("dosage" + i) != null
							&& !"".equals(box.getString("dosage" + i))) {
						patientPrescriptionDetails.setDosage(box
								.getFloat("dosage" + i));
					}
					if (box.getString("total" + i) != null
							&& !"".equals(box.getString("total" + i))) {
						patientPrescriptionDetails.setTotal(box
								.getFloat("total" + i));
						storeIssueT.setQtyRequest(new BigDecimal(box
								.get("total" + i)));
						storeIssueT.setQtyIssued(new BigDecimal(box.get("total"
								+ i)));
						patientPrescriptionDetails.setTotalStoreIssuedQty(box
								.getFloat("total" + i));
						patientPrescriptionDetails.setCurStoreIssuedQty(box
								.getFloat("total" + i));
					}
					//added by govind 27-09-2017 for Tapered Medicine
					String instruction="";
					if (box.getString("splInstrunction" + i) != null
							&& !"".equals(box.getString("splInstrunction" + i))) {
							String spl[]=box.getString("splInstrunction" + i).split(";");
							int length=spl.length;
							if(length>0){
					    		for(int s=0;s<length;s++){
					    			if(s==0){
					    				instruction=instruction+spl[s];
					    			}else{
					    				instruction=instruction+"\n"+spl[s];
					    			}
					    		}
					    	patientPrescriptionDetails.setSplInstruction(instruction);
					    	}
					}
					//added by govind 27-09-2017 end
					patientPrescriptionDetails.setType("OP");
					patientPrescriptionDetails
							.setPrescription(patientPrescriptionHeader);
					patientPrescriptionDetails.setIssuedStatus("y");
					if(box.getInt("stockItemBatchStockId" + i)>0){
					patientPrescriptionDetails.setNotAvailable("n");
					}else{
						patientPrescriptionDetails.setNotAvailable("y");
					}
					hbt.save(patientPrescriptionDetails);	
					//added by govind 26-09-2017 for Tapered Medicine
					for(TaperedMedicineUtil tapUtil:taperUtilList){
						if(tapUtil.getItemId().equals(masStoreItem.getId())){
						TaperedMedicineOp tapered=new TaperedMedicineOp();
						tapered.setPrescription(patientPrescriptionDetails);
						if(tapUtil.getFrequency()>0){
							MasFrequency frequency=new MasFrequency();
							frequency.setId(tapUtil.getFrequency());
							tapered.setFrequency(frequency);
						}
						MasStoreItem item=new MasStoreItem();
						item.setId(tapUtil.getItemId());						
						tapered.setItem(item);
						tapered.setDosageDetail(tapUtil.getDosage());
						tapered.setDosage(tapUtil.getDosageCount());
						tapered.setNoOfDays(tapUtil.getDuration());
						tapered.setTotal(tapUtil.getTotal());
						hbt.save(tapered);
						}
					}
					//added by govind 26-09-2017 for Tapered Medicine end
					if(box.getInt("stockItemBatchStockId" + i)>0){
					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) session
							.get(StoreItemBatchStock.class,
									box.getInt("stockItemBatchStockId" + i));
					storeIssueT.setBatchNo(storeItemBatchStock.getBatchNo());
					storeIssueT.setStock(storeItemBatchStock);
					
					storeIssueT.setRemarks(box.get("remark" + i));
					storeIssueT.setExpiryDate(storeItemBatchStock
							.getExpiryDate());
					storeIssueT
							.setCostPrice(storeItemBatchStock.getCostPrice());
					// storeIssueT.setSrNo(srNo);
					storeIssueT.setIssued("y");

					storeIssueT.setIssueM(issueM);
					storeIssueT.setPrescription(patientPrescriptionDetails);
					dailyPresc=storeIssueT;//added by govind
					hbt.save(storeIssueT);
					if (storeItemBatchStock.getClosingStock() != null) {
						storeItemBatchStock.setClosingStock(storeItemBatchStock
								.getClosingStock().subtract(
										new BigDecimal(box.get("total" + i))));
					}
					if (storeItemBatchStock.getIssueQty() != null) {
						storeItemBatchStock.setIssueQty(storeItemBatchStock
								.getIssueQty().add(
										new BigDecimal(box.get("total" + i))));
					} else {
						storeItemBatchStock.setIssueQty(new BigDecimal(box
								.get("total" + i)));
					}
					hbt.update(storeItemBatchStock);
					} 					
					/*persisting copper-t procedure: start : by rajendra kumar*/
					ProcedureDetails procedureDetails=null;
					if (masStoreItem!=null && procedureHeader!=null) {
						procedureDetails=new ProcedureDetails();
						//by govind
					//	MasProcedureItemMapping mapped=(MasProcedureItemMapping)session.createCriteria(MasProcedureItemMapping.class).add(Restrictions.eq("Item", masStoreItem)).list().get(0);
						MasProcedureItemMapping mapped=null;
						
						Criteria crt=session.createCriteria(MasProcedureItemMapping.class).add(Restrictions.eq("Item", masStoreItem));
						if(crt.list().size()>0){
							mapped=(MasProcedureItemMapping)crt.list().get(0);//by govind end
							procedureDetails.setProcedure(mapped!=null?mapped.getProcedure():null);
							procedureDetails.setStatus("n");
							procedureDetails.setProcedureHeader(procedureHeader);
							if (masFrequency!=null) {
								procedureDetails.setFrequency(masFrequency);
							}
						
							if (box.getString("noOfDays" + i) != null && !"".equals(box.getString("noOfDays" + i))) {
								procedureDetails.setNoOfDays(box.getInt("noOfDays" + i));
							}
							procedureDetails.setFinalProcedureStatus("n");
							procedureDetails.setNursingRemarks(box.get("remark" + i));
							procedureDetails.setAppointmentDate(new Date());
							hbt.save(procedureDetails);
						}
						
					}
					/*End*/
				}
				}
				
			}

			flag = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}
		
	
		if(dailyPresc!=null){
			System.out.println("issueM id "+dailyPresc.getIssueM().getId());
			map.put("issueTId",dailyPresc.getIssueM().getId());
		}
		String hinNo="";
		Patient pat=(Patient)session.load(Patient.class, hinId);
		if(pat!=null){
			hinNo=pat.getHinNo();
		}
		PatientPrescriptionHeader pph=null;
		Criteria cret=session.createCriteria(PatientPrescriptionHeader.class)
				.createAlias("Hin", "hin")
				.add(Restrictions.eq("hin.Id", hinId))
				.add(Restrictions.eq("PrescriptionDate", new Date()));
		if(cret.list().size()>0){
			pph=(PatientPrescriptionHeader)cret.list().get(0);
			if(pph.getDepartment()!=null){
			map.put("departmentId", pph.getDepartment().getId());
			}
		}
		map.put("flag", flag);
		map.put("visitId", visitId);	
		map.put("hinId", hinId);
		map.put("hinNo", hinNo);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListAgainstIssuedItems(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueM> storeIssueMList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> issueNoList = new ArrayList<StoreIssueM>();
		List<StoreIssueM> indentNoList = new ArrayList<StoreIssueM>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<StoreIssueM> list = new ArrayList<StoreIssueM>();
		Session session = (Session) getSession();
		
		try {
			if (box.getInt("indentNo") != 0) {
				storeIssueMList = getHibernateTemplate()
						.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
								+ null
								+ " and mi.AckDate = "
								+ null
								+ " and mi.IssueM.Hospital = "
								+ box.getInt("hospitalId")
								+ " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')"
								+ " and  (mi.Issued = 'y' or mi.Issued = 'Y') and mi.IssueM.ToStore.Id = "
								+ box.getInt("deptId")
								+ " and mi.IssueM.RequestNo="
								+ box.getInt("indentNo")
								+ " order by mi.IssueM.IssueDate desc");

			} else if (box.getInt("Issue_no") != 0) {
				storeIssueMList = getHibernateTemplate()
						.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
								+ null
								+ " and mi.AckDate = "
								+ null
								+ " and mi.IssueM.Hospital = "
								+ box.getInt("hospitalId")
								+ " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')"
								+ " and  (mi.Issued = 'y' or mi.Issued = 'Y') and mi.IssueM.ToStore.Id = "
								+ box.getInt("deptId")
								+ " and mi.IssueM="
								+ box.getInt("Issue_no")
								+ " order by mi.IssueM.IssueDate desc");

			} else if (!box.getString("fromDate").equals("")
					|| !box.getString("toDate").equals("")) {

				storeIssueMList = getHibernateTemplate()
						.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
								+ null
								+ " and mi.AckDate = "
								+ null
								+ " and mi.IssueM.Hospital = "
								+ box.getInt("hospitalId")
								+ " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')"
								+ " and  (mi.Issued = 'y' or mi.Issued = 'Y') and mi.IssueM.ToStore.Id = "
								+ box.getInt("deptId")
								+ " and mi.IssueM.IssueDate between '"
								+ HMSUtil.getConvertDateYYYYMMDD(box
										.getString("fromDate"))
								+ "' and '"
								+ HMSUtil.getConvertDateYYYYMMDD(box
										.getString("toDate"))
								+ "' order by mi.IssueM.IssueDate desc");

			} else {
				storeIssueMList = getHibernateTemplate()
						.find("select distinct mi.IssueM from jkt.hms.masters.business.StoreIssueT as mi where mi.ReceivedBy = "
								+ null
								+ " and mi.AckDate = "
								+ null
								+ " and mi.IssueM.Hospital = "
								+ box.getInt("hospitalId")
								+ " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')"
								+ " and  (mi.Issued = 'y' or mi.Issued = 'Y') and mi.IssueM.ToStore.Id = "
								+ box.getInt("deptId")
								+ " order by mi.IssueM.IssueDate desc");
			}

			issueNoList = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("Status", "O").ignoreCase()).list();
			indentNoList = session.createCriteria(StoreInternalIndentM.class)
					.add(Restrictions.eq("Status", "issue").ignoreCase())
					.list();

			

			/*
			 * departmentList = getHibernateTemplate() .find(
			 * "select distinct mi.Department from jkt.hms.masters.business.StoreIssueM as mi where mi.ToStore.Id='"
			 * + deptId + "' and mi.Hospital= '" + hospitalId + "' ");
			 */

			/*
			 * for (StoreIssueM storeIssueM : storeIssueMList) { if
			 * (storeIssueM.getIssueType().equalsIgnoreCase("i")) { int
			 * storeIssueMId = storeIssueM.getId();
			 * 
			 * storeIssueTList = getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
			 * + storeIssueMId + " and mi.ReceivedBy = " + null +
			 * " and mi.AckDate = " + null +
			 * " and  mi.Issued = 'y' and mi.ItemOrder!='2'");
			 * 
			 * 
			 * // Ramdular 5/12/2010 ---------------- storeIssueTList =
			 * getHibernateTemplate() .find(
			 * "from jkt.hms.masters.business.StoreIssueT as mi where mi.IssueM.Id = "
			 * + storeIssueMId + " and mi.ReceivedBy = " + null +
			 * " and mi.IssueM.Hospital='" + hospitalId + "' and mi.AckDate = "
			 * + null + " and( mi.IssueM.Status='o' or mi.IssueM.Status='O')" +
			 * " and  mi.Issued = 'y' or mi.Issued = 'Y'");
			 * 
			 * if (storeIssueTList != null && storeIssueTList.size() > 0) {
			 * storeIssueMList1.add(storeIssueM); }
			 * 
			 * } else { storeIssueMList1.add(storeIssueM); } }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}// finally{
		/**
		 * session.close() is done By Ramdular Prajapati Date 12 May 2010
		 */
		/*
		 * if(session!=null){ session.close(); } }
		 */
		/*
		 * approvedByEmployeeList = getHibernateTemplate().find(
		 * "from jkt.hms.masters.business.MasEmployee as me  where Department.Id ="
		 * + deptId + "and me.Hospital =" + hospitalId);
		 */
		// departmentList = getHibernateTemplate().find("from
		// jkt.hms.masters.business.MasDepartment as mi where mi.Id='"+deptId+"'
		// ");
		// map.put("approvedByEmployeeList", approvedByEmployeeList);
		map.put("storeIssueMList", storeIssueMList);
		map.put("issueNoList", issueNoList);
		map.put("indentNoList", indentNoList);
		// map.put("departmentList", departmentList);

		// map.put("searchStoreIssueMList", searchStoreIssueMList);
		return map;
	}

	@Override
	public Map<String, Object> getItemListForGrp(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		/*List<MasItemType> itemTypeList = new ArrayList<MasItemType>();
		List<MasStoreSection> sectionList = new ArrayList<MasStoreSection>();
		List<MasItemCategory> categoryList = new ArrayList<MasItemCategory>();
		List<MasItemClass> itemClassList = new ArrayList<MasItemClass>();*/
		Session session = (Session) getSession();
		String pvmsNo = null;

		int deptId = 0;
		int hospitalId = 0;
		deptId = (Integer)dataMap.get("deptId");
		int toWard = 0;
		toWard = (Integer)dataMap.get("toWard");

		List<Integer> objectList = new ArrayList<Integer>();
		int internalIndentId = 0;
		int storeDepartmentId = 0;
		
		if (dataMap.get("hospitalId") != null && !dataMap.get("hospitalId").equals("")) {

			hospitalId = (Integer)dataMap.get("hospitalId");
		}
			
		/*Criteria	criteria = session
						.createCriteria(MasStoreItem.class)
						.createAlias("StoreItemBatchStocks", "sibs")
						.add(Restrictions.eq("Status", "y").ignoreCase())
						.add(Restrictions.gt("sibs.ClosingStock",
								new BigDecimal(0.0)))
						.add(Restrictions.eq("sibs.Hospital.Id", hospitalId))
						.add(Restrictions.eq("sibs.Department.Id", toWard))
						.add(Restrictions.or(Restrictions.ne("sibs.BlockStatus", "Temporary Block"), Restrictions.isNull("sibs.BlockStatus")));
					
				if (dataMap.get("group") != null && (Integer)dataMap.get("group")!=0) {
					criteria = criteria.createAlias("Group", "group").add(
							Restrictions.eq("group.Id",(Integer)dataMap.get("group")));
				}
				if (dataMap.get("hospTypeCode") != null) {
					criteria = criteria
							.add(Restrictions.like("StandardAvailability","%"+((String)dataMap.get("hospTypeCode")).trim()+"%" ));
				}*/
		 Criteria criteria = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status", "y").ignoreCase());
		  			
				 if (dataMap.get("group") != null && (Integer)dataMap.get("group")!=0) {
					 
						criteria = criteria.createAlias("Group", "group").add(
								Restrictions.eq("group.Id",(Integer)dataMap.get("group")));
					}
				if (dataMap.get("hospTypeCode") != null) {
					
					criteria = criteria
							.add(Restrictions.like("StandardAvailability","%"+((String)dataMap.get("hospTypeCode")).trim()+"%" ));
				}
				 if (dataMap.get("itemTypeId") != null && (Integer)dataMap.get("itemTypeId")!=0) {
					
					 criteria =criteria.add(Restrictions.eq("ItemType.Id",(Integer)dataMap.get("itemTypeId")));
				}
				 if (dataMap.get("sectionId") != null && (Integer)dataMap.get("sectionId")!=0) {
					
					 criteria = criteria.add(Restrictions.eq("Section.Id",(Integer)dataMap.get("sectionId")));
				}
				 if (dataMap.get("categoryId") != null && (Integer)dataMap.get("categoryId")!=0) {
					 
					 criteria = criteria.add(Restrictions.eq("ItemCategory.Id",(Integer)dataMap.get("categoryId")));
				}
				 if (dataMap.get("classId") != null && (Integer)dataMap.get("classId")!=0) {
					
					 criteria = criteria.add(Restrictions.eq("ItemClass.Id",(Integer)dataMap.get("classId")));
				}
				itemList = criteria.list();
				
			/*	itemTypeList = session.createCriteria(MasItemType.class)
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();
				sectionList = session.createCriteria(MasStoreSection.class)
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();
				categoryList = session.createCriteria(MasItemCategory.class)
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();
				itemClassList = session.createCriteria(MasItemClass.class)
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();*/
		 
		map.put("itemList", itemList);
		/*map.put("itemTypeList", itemTypeList);
		map.put("sectionList", sectionList);
		map.put("categoryList", categoryList);
		map.put("itemClassList", itemClassList);*/
		return map;
	}

	@Override
	public Map<String, Object> getItemListBelowROL(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]>reorderLevelItemList = new ArrayList<Object[]>();
		Session session = (Session)getSession();
		String query = "select  ma.item_id,ma.pvms_no,ma.nomenclature,ma.item_unit_name,closing_stock from (select msi.item_id,msi.pvms_no, msi.nomenclature,ic.item_unit_name,sum(sibs.closing_stock) as closing_stock"
				+ " from mas_store_item msi left join store_item_batch_stock sibs on msi.item_id=sibs.item_id "
				+ " left join mas_store_item_conversion ic on msi.item_conversion_id = ic.item_conversion_id "
				+ " where sibs.hospital_id=1 and sibs.department_id=24 and lower(msi.status)='y'  "
				+ " group by msi.item_id,msi.nomenclature,ic.item_unit_name"
				+ " having sum(sibs.closing_stock) <= cast((select rol from mas_store_item_details where item_id=msi.item_id) as numeric)) as ma";
		reorderLevelItemList =(List<Object[]>) session.createSQLQuery(query).list();
		map.put("reorderLevelItemList", reorderLevelItemList);
		return map;
	}

	@Override
	public Map<String, Object> showPendingListForDepartmentReturnAcknowledgement(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		List<StoreInternalReturnM>returnMList = new ArrayList<StoreInternalReturnM>();
		returnMList = session.createCriteria(StoreInternalReturnM.class).add(Restrictions.eq("ToDepartment.Id", box.getInt("deptId")))
					.add(Restrictions.eq("Status", "y")).list();
		map.put("returnMList", returnMList);
		return map;
	}

	@Override
	public Map<String, Object> getIssueNo(Box box,String name,String mobNo) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		String hin_no="";
		int hospitalId=0;
		if(box.get(RequestConstants.HIN_NO)!=null 
				&& !"".equals(box.get(RequestConstants.HIN_NO))){
			hin_no=box.get(RequestConstants.HIN_NO);
		}if(box.get(RequestConstants.HOSPITAL_ID)!=null 
				&& !"".equals(box.get(RequestConstants.HOSPITAL_ID))){
			hospitalId=box.getInt(RequestConstants.HOSPITAL_ID);
		}
		Criteria criteria=null;
		if(hin_no!=null && !hin_no.equals("")){
		Patient patient=(Patient) session.createCriteria(Patient.class)
				.add(Restrictions.eq("HinNo", hin_no)).uniqueResult();
		
		if(patient!=null){
			 criteria=session.createCriteria(StoreIssueM.class)
					.add(Restrictions.eq("Hin.Id", patient.getId()))
					.add(Restrictions.eq("Hospital.Id", hospitalId));
		}}else if(name!=null && !name.equals("")){
			criteria=session.createCriteria(StoreIssueM.class).createAlias("Hin","hin")
					.add(Restrictions.ilike("hin.PFirstName", "%"+name+"%"))
					.add(Restrictions.eq("Hospital.Id", hospitalId));
		}else if(mobNo!=null && !mobNo.equals("")){
			criteria=session.createCriteria(StoreIssueM.class).createAlias("Hin","hin")
					.add(Restrictions.eq("hin.MobileNumber", mobNo))
					.add(Restrictions.eq("Hospital.Id", hospitalId));
			
			
			
		}
			
			// only Condition added by Amit Das on 18-02-2016
			if(criteria!=null){
				List<StoreIssueM> storeIssueMs=criteria.list();  
				map.put("storeIssueMs", storeIssueMs);
			}
		
		return map;
	}

	@Override
	public Map<String, Object> getPatientDrugDetail(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		int issueMId=0;
		int hinId=0;
		if(box.get(RequestConstants.ISSUE_NO)!=null&&
				!"".equals(box.get(RequestConstants.ISSUE_NO))){
			issueMId=box.getInt(RequestConstants.ISSUE_NO);
		}
		String hinNo="";
		
		if(box.get(RequestConstants.HIN_ID)!=null&&
				!"".equals(box.get(RequestConstants.HIN_ID))){
			hinNo=box.getString(RequestConstants.HIN_ID);
		}
		
		String name="";
		if(box.get("name")!=null){
			name=box.getString("name");
		}
		String mobileNo="";
		
		if(box.get("mobileId")!=null){
			mobileNo=box.getString("mobileId");
		}
		
		List<Patient>patientList=new ArrayList<Patient>();
		patientList=session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", hinNo.trim())).list();
		for(Patient patient:patientList){
			hinId=patient.getId();
		}
		if(name!=null && !name.equals("")){
		Criteria critName=session.createCriteria(StoreIssueT.class)
				.createAlias("IssueM","IssueM")
				.createAlias("IssueM.Hin","Hin")
				.add(Restrictions.ilike("Hin.PFirstName","%"+name+"%"))
				.add(Restrictions.eq("IssueM.Id", issueMId));
		
		List<StoreIssueT> issueTs1=critName.list();
		
		for(StoreIssueT StoreIssueT:issueTs1){
			hinId=StoreIssueT.getIssueM().getHin().getId();
		}
		}else if(mobileNo!=null && !mobileNo.equals("")){
			Criteria critName=session.createCriteria(StoreIssueT.class)
					.createAlias("IssueM","IssueM")
					.createAlias("IssueM.Hin","Hin")
					.add(Restrictions.eq("Hin.MobileNumber",mobileNo))
					.add(Restrictions.eq("IssueM.Id", issueMId));
			
			List<StoreIssueT> issueTs1=critName.list();
			
			for(StoreIssueT StoreIssueT:issueTs1){
				hinId=StoreIssueT.getIssueM().getHin().getId();
			}
			}
		/*Criteria criteria=session.createCriteria(StoreIssueT.class)
				.add(Restrictions.eq("IssueM.Id", issueMId));*/
		
		// commented by amit das on 08-06-2016
		// added by amit das on 08-06-2016
		Criteria criteria=session.createCriteria(StoreIssueT.class)
				.add(Restrictions.eq("IssueM.Id", issueMId));//.add(Restrictions.sqlRestriction("(qty_issued-COALESCE(qty_returned,0)) > 0"));//added by govind 1-10-2016
		List<StoreIssueT> issueTs=criteria.list();
		//added by govind 30-9-2016
		if(issueTs.size()>0){
			StoreIssueT st=issueTs.get(0);
			hinId=st.getIssueM().getHin().getId();
		}
		//added by govind 30-9-2016 end
		Patient patient=(Patient) session.get(Patient.class, hinId);
		//List<StoreIssueT> issueTs=criteria.list();//modified by by govind 30-9-2016
		System.out.println("issueTs "+issueTs.size());
		System.out.println("patient "+(patient!=null));
		map.put("issueTs", issueTs);
		map.put("patient", patient); 
		return map;
	}

	@Override
	public Map<String, Object> retrunDrug(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		int hospitalId=box.getInt(HOSPITAL_ID);
		int departmentId=box.getInt(RequestConstants.DEPT_ID);
		int userId=box.getInt(USER_ID);
		int totalRow=box.getInt("totalRow");
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		String time = (String) utilMap.get("currentTime");
		MasHospital hospital=new MasHospital();
		hospital.setId(hospitalId);
		MasDepartment department=new MasDepartment();
		department.setId(departmentId);
		Users users=new Users();
		users.setId(userId);
		Transaction tx = null;
		Boolean flag=false;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<StoreFyDocumentNo>	storeFyDocumentNoList = (List) getHibernateTemplate()
					.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
							+ departmentId
							+ "' and  sfdn.Hospital.Id = '"
							+ hospitalId + "'");
			String no = "";
			for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
				if (storeFyDocumentNo.getDefectEntryNo() != null) {
					no = ("" + storeFyDocumentNo.getDefectEntryNo());
					no = getMaxNo(no);
				} else {
					no = getMaxNo("");
				}
				int defNo=Integer.parseInt(storeFyDocumentNo.getDefectEntryNo())+1;
				storeFyDocumentNo.setDefectEntryNo(defNo+"");
				hbt.update(storeFyDocumentNo);
			}
			StoreDefectiveDrugM defectiveDrugM=new StoreDefectiveDrugM();
			defectiveDrugM.setEntryDate(new Date());
			defectiveDrugM.setHospital(hospital);
			defectiveDrugM.setDepartment(department);
			defectiveDrugM.setStatus("y");
			defectiveDrugM.setLastChgDate(new Date());
			defectiveDrugM.setLastChgTime(time); 
			defectiveDrugM.setLastChgBy(users);
			defectiveDrugM.setEntryNo(no);
			defectiveDrugM.setDesc1(box.get("issueNo").trim());
			hbt.save(defectiveDrugM); 
			
			for(int i=0;i<totalRow;i++){
				if("yes".equalsIgnoreCase(box.get("selectedRow"+i))){
					StoreIssueT issueT=(StoreIssueT) session.get(StoreIssueT.class, box.getInt("issueTId"+i));
					// added by amit das on 09-06-2016
					if(issueT!=null){
					BigDecimal returnQty = new BigDecimal(0);	
					System.out.println("0000==="+issueT.getQtyReturned());
					if(issueT.getQtyReturned() != null){
						System.out.println("111==="+returnQty);
						returnQty=issueT.getQtyReturned();	
					issueT.setQtyReturned(issueT.getQtyReturned().add(new BigDecimal(box.getInt("returnDrugNo"+i))));
					}else{
						System.out.println("22==="+returnQty);
						issueT.setQtyReturned(new BigDecimal(box.getInt("returnDrugNo"+i)));
					}
					hbt.update(issueT);//added govind 30-9-2016
					// ended by amit das 
				}
					StoreDefectiveDrugT defectiveDrugT=new StoreDefectiveDrugT();
					defectiveDrugT.setItem(issueT.getItem());
					defectiveDrugT.setBatchNo(issueT.getBatchNo());
					defectiveDrugT.setExpiryDate(issueT.getExpiryDate());
					defectiveDrugT.setDefectQty(new BigDecimal(box.getInt("returnDrugNo"+i)));
					defectiveDrugT.setRemarks(box.get("remark"+i)); 
					defectiveDrugT.setDefectM(defectiveDrugM);
					hbt.save(defectiveDrugT);
				}
				
			} 
			tx.commit();
			flag = true;
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			} 
			e.printStackTrace();
			flag = false;
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> showDepartemntReturnAcknowledgementJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session)getSession();
		List<StoreInternalReturnT>storeInternalReturnTList = new ArrayList<StoreInternalReturnT>();
		storeInternalReturnTList =session.createCriteria(StoreInternalReturnT.class)
						.add(Restrictions.eq("ReturnMain.Id", box.getInt("storeInternalReturnMId"))).list();
		map.put("storeInternalReturnTList", storeInternalReturnTList);
		return map;
	}

	@Override
	public Map<String, Object> submitDepartmentReturnApproval(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Vector storeInternalReturnTId = box.getVector("storeInternalReturnTId");
		Vector srno = box.getVector("srno");
		Vector receivedQty = box.getVector("receivedQty");
		boolean flag = false;

		try {
			StoreInternalReturnM storeInternalReturnM = new StoreInternalReturnM();
			storeInternalReturnM = (StoreInternalReturnM) hbt.load(StoreInternalReturnM.class,box.getInt("storeInternalIndentMId"));
			storeInternalReturnM.setStatus("a");
			hbt.update(storeInternalReturnM);
			for (int i = 0; i < srno.size(); i++) {
				if (srno.get(i).equals("y")) {
					StoreInternalReturnT storeInternalReturnT = new StoreInternalReturnT();
					if (storeInternalReturnTId.get(i) != null&& !storeInternalReturnTId.get(i).equals("")) {
						int returnTId = Integer.parseInt(storeInternalReturnTId.get(i).toString());
						
						storeInternalReturnT = (StoreInternalReturnT) hbt.load(StoreInternalReturnT.class, returnTId);
						if (receivedQty.get(i) != null&& !receivedQty.get(i).equals("")) {
							storeInternalReturnT.setReceivedQuantity(new BigDecimal(receivedQty.get(i).toString()));
						}
						
						hbt.update(storeInternalReturnT);
					}
				}
			}
			flag = true;

		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}

	@Override
	public Map<String, Object> empanelledBilling(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean successfullyAdded = false;
		List<StoreEmpanelledBillingM> storeEmpanelledBillingMList = new ArrayList<StoreEmpanelledBillingM>();
		Set<MasEmpaneled> masEmpanelledList = new HashSet<MasEmpaneled>(); 
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = getSession();
		String message = "";
		Date fromDate = new Date();
		Date toDate = new Date();
		String patName = "";
		int hospital_id = 0;
		int hospitalTypeId = 0;
		String hinNo = "";
		int mobileNo = 0;
		int empanelledId=0;
		if (box.getString(RequestConstants.P_FIRST_NAME) != null
				&& !"".equals(box.getString(RequestConstants.P_FIRST_NAME))) {
			patName = box.getString(RequestConstants.P_FIRST_NAME);
		} 
		if (box.getString(RequestConstants.HIN_NO) != null
				&& !"".equals(box.getString(RequestConstants.HIN_NO))) {
			hinNo = box.getString(RequestConstants.HIN_NO);
		}
		if (box.getString(RequestConstants.MOBILE_NO) != null
				&& !"".equals(box.getString(RequestConstants.MOBILE_NO))) {
			mobileNo = box.getInt(RequestConstants.MOBILE_NO);
		}
		if (box.getString(RequestConstants.FROM_DATE) != null
				&& !"".equals(box.getString(RequestConstants.FROM_DATE))) {
			fromDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.FROM_DATE));
		}
		if (box.getString(RequestConstants.TO_DATE) != null
				&& !"".equals(box.getString(RequestConstants.TO_DATE))) {
			toDate = HMSUtil.convertStringTypeDateToDateType(box
					.getString(RequestConstants.TO_DATE));
		}
		if (box.getString("empanelledId") != null
				&& !"".equals(box.getString("empanelledId"))) {
			empanelledId = Integer.parseInt(box.getString("empanelledId"));
		}
		if (box.getString(HOSPITAL_ID) != null
				&& !"".equals(box.getString(HOSPITAL_ID))) {
			hospital_id = Integer.parseInt(box.getString(HOSPITAL_ID));
		}
		try { 
			List<Integer> hospitalIdList=new ArrayList<Integer>();
			List<MasEmpaneledHospital> masEmpaneledHospitalList=(List<MasEmpaneledHospital>)session.createCriteria(MasEmpaneledHospital.class)
					.add(Restrictions.eq("Hospital.Id", hospital_id)).list();  
			
			for (MasEmpaneledHospital masEmpaneledHospital : masEmpaneledHospitalList) {
				if ("Y".equalsIgnoreCase(masEmpaneledHospital.getStatus())) {
					if (masEmpaneledHospital.getHospital() != null
							&& "Y".equalsIgnoreCase(masEmpaneledHospital
									.getHospital().getStatus())) {
						masEmpanelledList.add(masEmpaneledHospital.getEmpaneled()); 

					}
				}
				
			} 
			/*Criteria criteria = session
					.createCriteria(StoreEmpanelledBillingM.class, "sebm") 
					.createAlias("pph.Visit", "v").createAlias("v.Hin", "h")
					.createAlias("v.Hospital", "mh")
					.createAlias("mh.HospitalType", "mht")
					.add(Restrictions.between("v.VisitDate", fromDate, toDate))
					.add(Restrictions.in("mh.Id", hospitalIdList))
					.add(Restrictions.eq("h.PatientStatus", "Out Patient"))
					.add(Restrictions.eq("v.EmpanelledVisitFlag", "y")
							.ignoreCase())
					.add(Restrictions.eq("ppd.ReferToEmpanelled", "y")
							.ignoreCase())
					.setProjection(
							Projections
									.projectionList()
									.add(Projections.groupProperty("v.TokenNo"))
									.add(Projections.groupProperty("h.HinNo"))
									.add(Projections.groupProperty("h.Id"))
									.add(Projections
											.groupProperty("h.PFirstName"))
									.add(Projections
											.groupProperty("v.Department"))
									.add(Projections.groupProperty("v.Doctor"))
									.add(Projections
											.groupProperty("v.VisitDate"))
									.add(Projections.groupProperty("pph.Id"))
									.add(Projections
											.groupProperty("mh.HospitalName"))
									.add(Projections
											.groupProperty("mht.HospitalTypeName"))

					);

			if (patName != null && !patName.equals("")) {
				criteria = criteria.add(Restrictions.like("h.PFirstName",
						patName).ignoreCase());
			}
			if (hospital_id != 0) {
				criteria = criteria.add(Restrictions.eq("mh.Id", hospital_id));
			}
			if (hospitalTypeId != 0) {
				criteria = criteria.add(Restrictions.eq("mht.Id",
						hospitalTypeId));
			}
			if (hinNo != null && !hinNo.equals("")) {
				criteria = criteria.add(Restrictions.eq("h.HinNo", hinNo));
			}

			if (mobileNo != 0) {
				criteria = criteria.add(Restrictions.eq("h.MobileNumber",
						mobileNo));
			}

			visitList = criteria.list();*/

		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		// map = showAnnualIndentAdminSetupJsp(box.getInt(HOSPITAL_ID));
		map.put("storeEmpanelledBillingMList", storeEmpanelledBillingMList);
		map.put("masEmpanelledList", masEmpanelledList); 
		map.put("message", message);
		return map;
	}

	@Override
	public Map<String, Object> getAllPrescription(Box box) { 
		Map<String, Object> map = new HashMap<String, Object>();
		Integer visitId = 0;
		String message = "failed";
		int hospitalId = 0;
		int deptId = 0;
		
		Session session = (Session) getSession();
		List<Visit> visitList = new ArrayList<Visit>(); 
		PatientPrescriptionHeader patientPrescriptionHeader=null;
		if(box.get("visitIdNo")!=null&&!"".equals(box.get("visitIdNo"))){
			visitId=box.getInt("visitIdNo");
		}
		Criteria cr = null;  
		List<PatientPrescriptionHeader>	patientPrescriptionHeaderList=session.createCriteria(PatientPrescriptionHeader.class)
											.add(Restrictions.eq("Visit.Id", visitId))
											.addOrder(Order.desc("Id")).list(); 
		if(patientPrescriptionHeaderList!=null && patientPrescriptionHeaderList.size()>0){
			map.put("patientPrescriptionHeaderList", patientPrescriptionHeaderList); 
			message="success";
		} 
		map.put("message", message);
		return map;
	}

	@Override
	public Map<String, Object> submitOTCDirectDispensing(Box box) {
		Date issueDate = new Date();
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> utilMap = (Map<String, Object>) HMSUtil
				.getCurrentDateAndTime();
		String time = (String) utilMap.get("currentTime");
		int hospitalId = 0;
		int departmentId = 0;
		int hinId = 0;
		int visitId = 0;
		int totalNumberOfPres = 0;
		int userId = 0;
		int issueTId = 0;
		if (box.getString(RequestConstants.HOSPITAL_ID) != null
				&& !"".equals(box.getString(RequestConstants.HOSPITAL_ID))) {
			hospitalId = box.getInt(RequestConstants.HOSPITAL_ID);
			map.put("hospitalId", hospitalId);
		}
		if (box.getString(RequestConstants.DEPT_ID) != null
				&& !"".equals(box.getString(RequestConstants.DEPT_ID))) {
			departmentId = box.getInt(RequestConstants.DEPT_ID);
			map.put("deptId", departmentId);
		}
		if (box.getString("totalNumberOfPrescription") != null
				&& !"".equals(box.getString("totalNumberOfPrescription"))) {
			totalNumberOfPres = box.getInt("totalNumberOfPrescription");
		}
		if (box.getString("visitId") != null
				&& !"".equals(box.getString("visitId"))) {
			visitId = box.getInt("visitId");
		}
		if (box.getString("hinId") != null
				&& !"".equals(box.getString("hinId"))) {
			hinId = box.getInt("hinId");
		}

		if (box.get(RequestConstants.USER_ID) != null) {
			userId = box.getInt(USER_ID);
		}
		Users user = new Users();
		user.setId(userId);
		MasHospital masHospital = new MasHospital();
		masHospital.setId(hospitalId);
		MasDepartment masDepartment = new MasDepartment();
		masDepartment.setId(departmentId);
		boolean flag = false;
		Transaction tx = null;
		StoreIssueM issueM = new StoreIssueM();
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			List<String> issueNoList = new ArrayList<String>();
			String query1 = "select issue_no from store_issue_m where store_issue_m.hospital_id="
					+ hospitalId + " order by id desc limit 1 ";
			issueNoList = session.createSQLQuery(query1).list();
			String no = "";
			if (issueNoList.size() > 0) {
				for (int i = 0; i < issueNoList.size(); i++) {
					no = ((String) issueNoList.get(i));
				}
			}
			Map<String, Object> maxMap = new HashMap<String, Object>();
			maxMap.put("no", no);
			maxMap.put("deptType", "PHR");
			String patientIssueNo = "";
			patientIssueNo = getMaxNoByDeptCode(maxMap);
			List<Object> objectList = new ArrayList<Object>();
			String prescriptionNo = "1";
			String qry = "";
			objectList = (List<Object>) session
					.createSQLQuery(
							"select max(prescription_id)+1  from patient_prescription_header h,patient p where p.hin_id=h.hin_id and p.hin_id="
									+ hinId
									+ "and h.hospital_id="
									+ hospitalId
									+ "").list();
			for (Object object : objectList) {
				if (object != null) {
					prescriptionNo = Integer.toString((((Integer) object)
							.intValue()));

				}

			} 
			Visit visit = (Visit) session.get(Visit.class, visitId);
			if (totalNumberOfPres > 0) {
				
				issueM.setIssueType("i");
				issueM.setIssueNo(patientIssueNo);
				issueM.setIssueDate(HMSUtil.getCurrentDateAndTimeObject());
				String deptType = "";
				deptType = (String) box.getString("deptType");

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				patientIssueNo = generateDrugIssueNumber(deptType);

				issueM.setStatus("o");
				issueM.setHospital(masHospital);
				issueM.setLastChgBy(user);
				issueM.setLastChgDate(HMSUtil.getCurrentDateAndTimeObject());
				issueM.setLastChgTime(time);
				issueM.setHin(visit.getHin());

				hbt.save(issueM);
				PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
				Patient patient = new Patient();
				patient.setId(hinId);
				patientPrescriptionHeader.setHin(patient);
				patientPrescriptionHeader.setDepartment(masDepartment);
				patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
				patientPrescriptionHeader.setVisit(visit);
				patientPrescriptionHeader.setHospital(masHospital);
				patientPrescriptionHeader.setStatus("p");
				patientPrescriptionHeader.setPrescriptionDate(HMSUtil
						.getCurrentDateAndTimeObject());
				patientPrescriptionHeader.setPrescriptionTime(time);
				patientPrescriptionHeader.setDispencingDate(HMSUtil
						.getCurrentDateAndTimeObject());
				patientPrescriptionHeader.setIssuedStatus("y");
				visit.setCurPharVisitStatus("n");
				visit.setVisitStatus("C");
				hbt.update(visit);
				hbt.save(patientPrescriptionHeader);
				MasFrequency masFrequency = null;
				MasStoreItem masStoreItem = null;
				RouteOfAdministration routeOfAdministration = null;
				OpdInstructionTreatment opdInstructionTreatment = null;
				for (int i = 1; i <= totalNumberOfPres; i++) {
					PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
					StoreIssueT storeIssueT = new StoreIssueT();
					storeIssueT.setVisit(visit);
					if (box.getString("drugItemId" + i) != null
							&& !"".equals(box.getString("drugItemId" + i))) {
						masStoreItem = (MasStoreItem) session.get(
								MasStoreItem.class,
								box.getInt("drugItemId" + i));
						map.put("itemId", box.getInt("drugItemId" + i));
						patientPrescriptionDetails.setItem(masStoreItem);
						storeIssueT.setItem(masStoreItem);
					}
					map = getBrandMap(map);
					if (box.getString("frequency" + i) != null
							&& !"0".equals(box.getString("frequency" + i))) {
						masFrequency = new MasFrequency(box.getInt("frequency"
								+ i));
						patientPrescriptionDetails.setFrequency(masFrequency);
					}
					if (box.getString("route" + i) != null
							&& !"0".equals(box.getString("route" + i))) {
						routeOfAdministration = new RouteOfAdministration(
								box.getInt("route" + i));
						patientPrescriptionDetails
								.setRoute(routeOfAdministration);
					}
					if (box.getString("instruction" + i) != null
							&& !"0".equals(box.getString("instruction" + i))) {
						opdInstructionTreatment = new OpdInstructionTreatment(
								box.getInt("instruction" + i));
						patientPrescriptionDetails
								.setInsrtuction(opdInstructionTreatment);
					}
					if (box.getString("noOfDays" + i) != null
							&& !"".equals(box.getString("noOfDays" + i))) {
						patientPrescriptionDetails.setNoOfDays(box
								.getInt("noOfDays" + i));
					}
					if (box.getString("dosage" + i) != null
							&& !"".equals(box.getString("dosage" + i))) {
						patientPrescriptionDetails.setDosage(box
								.getFloat("dosage" + i));
					}
					if (box.getString("total" + i) != null
							&& !"".equals(box.getString("total" + i))) {
						patientPrescriptionDetails.setTotal(box
								.getFloat("total" + i));
						storeIssueT.setQtyRequest(new BigDecimal(box
								.get("total" + i)));
						storeIssueT.setQtyIssued(new BigDecimal(box.get("total"
								+ i)));
						patientPrescriptionDetails.setTotalStoreIssuedQty(box
								.getFloat("total" + i));
						patientPrescriptionDetails.setCurStoreIssuedQty(box
								.getFloat("total" + i));
					}
					patientPrescriptionDetails.setType("OP");
					patientPrescriptionDetails
							.setPrescription(patientPrescriptionHeader);
					if(box.getInt("itemBatchNo" + i)>0){
						patientPrescriptionDetails.setNotAvailable("n");
						}else{
							patientPrescriptionDetails.setNotAvailable("y");
						}
					patientPrescriptionDetails.setIssuedStatus("y");
					hbt.save(patientPrescriptionDetails);
					StoreItemBatchStock storeItemBatchStock = (StoreItemBatchStock) session
							.get(StoreItemBatchStock.class,
									box.getInt("itemBatchNo" + i));
					storeIssueT.setBatchNo(storeItemBatchStock.getBatchNo());
					storeIssueT.setStock(storeItemBatchStock);
					storeIssueT.setRemarks(box.get("remark" + i));
					storeIssueT.setExpiryDate(storeItemBatchStock
							.getExpiryDate());
					storeIssueT
							.setCostPrice(storeItemBatchStock.getCostPrice());
					storeIssueT.setPrescription(patientPrescriptionDetails);
					// storeIssueT.setSrNo(srNo);
					storeIssueT.setIssued("y");

					storeIssueT.setIssueM(issueM);

					hbt.save(storeIssueT);
					if (storeItemBatchStock.getClosingStock() != null) {
						storeItemBatchStock.setClosingStock(storeItemBatchStock
								.getClosingStock().subtract(
										new BigDecimal(box.get("total" + i))));
					}
					if (storeItemBatchStock.getIssueQty() != null) {
						storeItemBatchStock.setIssueQty(storeItemBatchStock
								.getIssueQty().add(
										new BigDecimal(box.get("total" + i))));
					} else {
						storeItemBatchStock.setIssueQty(new BigDecimal(box
								.get("total" + i)));
					}
					hbt.update(storeItemBatchStock);
					
				}

			}
			issueTId = issueM.getId();
			flag = true;
			tx.commit();
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();

		}
		//added by govind 29-03-2017
		String hinNo="";
		Patient pat=(Patient)session.load(Patient.class, hinId);
		if(pat!=null){
			hinNo=pat.getHinNo();
		}
		PatientPrescriptionHeader pph=null;
		Criteria cret=session.createCriteria(PatientPrescriptionHeader.class)
				.createAlias("Hin", "hin")
				.add(Restrictions.eq("hin.Id", hinId))
				.add(Restrictions.eq("PrescriptionDate", new Date()));
		if(cret.list().size()>0){
			pph=(PatientPrescriptionHeader)cret.list().get(0);
			if(pph.getDepartment()!=null){
			map.put("departmentId", pph.getDepartment().getId());
			}
		}
		
		map.put("hinNo", hinNo);
		//added by govind 29-03-2017 end
		map.put("flag", flag);
		map.put("issueTId", issueTId);
		map.put("visitId", visitId);
		map.put("hinId", hinId);
		return map;
	}

	@Override
	public Map<String, Object> getInstituteList() {
		
			Map<String, Object> map = new HashMap<String, Object>();
			List<MasHospital> masHos= new ArrayList<MasHospital>();
			Session session = (Session)getSession();
			masHos = session.createCriteria(MasHospital.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
			map.put("masHos", masHos);
		
		return map;
	}

	


	@Override
	public Map<String, Object> viewNacItemJsp(Map<String, Object> dataMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> indentTs = new ArrayList<Object[]>();
		List<StoreInternalIndentM>  indentMs= new ArrayList<StoreInternalIndentM>();
	    int hopspital=0;
	    Date fDate=new Date();
	    Date tDate=new Date();
	    
		  if(dataMap.get("hospitalId")!=null){
		  hopspital=Integer.parseInt(dataMap.get("hospitalId").toString());
		  }
		  
		  if(dataMap.get("fromDate")!=null){
		  fDate=HMSUtil.convertStringTypeDateToDateType(dataMap.get("fromDate").toString());
		  }
		  if(dataMap.get("toDate")!=null){
		  tDate=HMSUtil.convertStringTypeDateToDateType(dataMap.get("toDate").toString());
		  }
		  
		Session session = (Session) getSession();
		try {
			/*indentTs = session.createCriteria(StoreInternalIndentT.class)
					.add(Restrictions.eq("ProcurementStatus","INAC"))
					.createAlias("Internal","header" ).createAlias("header.District", "district").createAlias("header.Hospital", "hospital")
					.add(Restrictions.isNull("district.Id"))
					.add(Restrictions.eq("hospital.id", hopspital))
			        .add(Restrictions.eq("header.Status", "m"))
			        .add(Restrictions.between("header.DemandDate", fDate, tDate))
					.list();*/
			String qry = "Select item.pvms_no,item.nomenclature,t.qty_request from store_internal_indent_t as t left join store_internal_indent_m as m  on t.internal_id = m.id left join mas_store_item as item on t.item_id = item.item_id "
					+ " where demand_date between  '"+fDate+"' and '"+tDate+"' and m.hospital_id ="+hopspital+"  "
					+ "and m.status= 'm' and district_id is null";
			indentTs = session.createSQLQuery(qry).list();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		map.put("indentTs", indentTs);
		
		return map;
	}

	@Override
	public Map<String, Object> showSubstandardFreezedItemJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList= new ArrayList<MasStoreItem>();
		Session session = (Session)getSession();
		masStoreItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("masStoreItemList", masStoreItemList);
		return map;
	
	}

	@Override
	public Map<String, Object> getDepartmentList() {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> deptList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y").ignoreCase()).addOrder(Order.asc("DepartmentName")).list();
		map.put("deptList",deptList);
		return map;
	}

	@Override
	public Map<String, Object> getDailyIssueItem(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		//int deptId = 0;
		int hosId=0;
		String fromDate="";
		String fromTime="";
		String toTime="";
		String qry="";
		String uhid="";
		String reportType="";
		String pname="";
		int toDeptId = 0;
		Map<String, Object> utilMap = new HashMap<String, Object>();

		List objectList = new ArrayList();
		if(requestParameters.get("uhid") !=null){
			uhid = (String)requestParameters.get("uhid");

		}
		if(requestParameters.get("reportType") !=null){
			reportType = (String)requestParameters.get("reportType");

		}
		if(requestParameters.get("hospitalId") !=null){
			hosId = Integer.parseInt("" + requestParameters.get("hospitalId"));

		}
		if(requestParameters.get("fromTime") !=null){
			fromTime = (String)requestParameters.get("fromTime");

		}
		if(requestParameters.get("toTime") !=null){
			toTime = (String)requestParameters.get("toTime");

		}
		if(requestParameters.get("pname") !=null){
			pname = (String)requestParameters.get("pname");

		}
		if(requestParameters.get("depart") !=null){
			toDeptId = (Integer)requestParameters.get("depart");

		}
		int mobileNo = 0;
		if(requestParameters.get("mobileNo") !=null){
			mobileNo = (Integer)requestParameters.get("mobileNo");

		}
		try {
			fromDate=(String)requestParameters.get("fromDate");
		
	/*		Date date=(Date) session.createSQLQuery("select last_day(to_date('"
					+toDate+"'"
					+", 'dd/mm/yyyy')) from dual").uniqueResult();

			String final_to_date=HMSUtil.changeDateToddMMyyyy(date);*/
			//deptId = Integer.parseInt("" + requestParameters.get("deptId"));
			 
			// comment according to new SRS

			/*if(reportType.equalsIgnoreCase("summary")){
						 if(pvms.equals("")){
					 qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
					 	+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID"
					 	+" from STORE_OP_PATIENT_ISSUE_t"
					 	+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
					 	+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
					 	+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
					 	+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
					 	+ deptId+"'"

					 	+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
					 	+ fromDate+"'"
					 	+" ,'dd/mm/yyyy') and to_date('"
					 	+ toDate+"'"
					 	+" ,'dd/mm/yyyy')"
					 	+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,mas_store_item.pvms_no,"
					 	+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID";
						 }
						 else{
							 qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
								 	+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID"
								 	+" from STORE_OP_PATIENT_ISSUE_t"
								 	+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
								 	+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
								 	+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
								 	+" where  STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"
								 	+ deptId+"'"
								 	+" and mas_store_item.pvms_no='"
								 	+ pvms+"'"
								 	+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
								 	+ fromDate+"'"
								 	+" ,'dd/mm/yyyy') and to_date('"
								 	+ toDate+"'"
								 	+" ,'dd/mm/yyyy')"
								 	+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,mas_store_item.pvms_no,"
								 	+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID";
						 }
					 }*/
			// else if(reportType.equalsIgnoreCase("detail")){
			
		/*	if(toDeptId == 0){
				if(pvms.equals("") && nomen.equals("")){
					qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
						+",pph.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id "
						+", mm.MANUFACTURER_NAME"
						+" from STORE_OP_PATIENT_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+"left outer join patient_prescription_header pph on pph.prescription_id=STORE_OP_PATIENT_ISSUE_m.prescription_id"
						+" where  "
						//+ "STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"	+ deptId+"'"+" and "
						+ "STORE_OP_PATIENT_ISSUE_m.HOSPITAL_ID='"
						+ hosId +"'"
						+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no,"
						+" mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,pph.prescription_no ,store_op_patient_issue_m.prescription_id "
						+" ,mm.MANUFACTURER_NAME";
				}
				else if((!nomen.equals("")) && pvms.equals("")){
					qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
						+",pph.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id "
						+", mm.MANUFACTURER_NAME"
						+" from STORE_OP_PATIENT_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+"left outer join patient_prescription_header pph on pph.prescription_id=STORE_OP_PATIENT_ISSUE_m.prescription_id"
						+" where "
						//+ " STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"	+ deptId+"'" +" and "
								+ "STORE_OP_PATIENT_ISSUE_m.HOSPITAL_ID='"
						+ hosId +"'"
						+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.NOMENCLATURE='"
						+ nomen+"'"
						+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME"
						+" ,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,pph.prescription_no ,store_op_patient_issue_m.prescription_id, mm.MANUFACTURER_NAME ";

				}
				else if((!pvms.equals("")) && nomen.equals("")){
						qry="select sum(qty_issued),item_id_issue,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+"STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE "
						+",pph.prescription_no as prescription_no,store_op_patient_issue_m.prescription_id as prescription_id "
						+", mm.MANUFACTURER_NAME"
						+" from STORE_OP_PATIENT_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_OP_PATIENT_ISSUE_t.ITEM_ID_ISSUE=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_OP_PATIENT_ISSUE_m STORE_OP_PATIENT_ISSUE_m on STORE_OP_PATIENT_ISSUE_t.OP_ISSUE_ID=STORE_OP_PATIENT_ISSUE_m.OP_ISSUE_ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+"left outer join patient_prescription_header pph on pph.prescription_id=STORE_OP_PATIENT_ISSUE_m.prescription_id"
						+" where  "
						//+ "STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID='"+ deptId+"'"+" and "
								+ "STORE_OP_PATIENT_ISSUE_m.HOSPITAL_ID='"
						+ hosId +"'"
						+" and STORE_OP_PATIENT_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.PVMS_NO='"
						+ pvms+"'"
						+" group by STORE_OP_PATIENT_ISSUE_t.item_id_issue,STORE_OP_PATIENT_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME"
						+" ,STORE_OP_PATIENT_ISSUE_m.DEPARTMENT_ID,STORE_OP_PATIENT_ISSUE_t.BATCH_NO,STORE_OP_PATIENT_ISSUE_t.EXPIRY_DATE,pph.prescription_no ,store_op_patient_issue_m.prescription_id, mm.MANUFACTURER_NAME ";

				}
			}
			else{
				if(pvms.equals("") && nomen.equals("")){
					qry=" select sum(qty_issued),STORE_ISSUE_t.item_id,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+" STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE"
						+" ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE, mm.MANUFACTURER_NAME from STORE_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_ISSUE_t.ITEM_ID=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_ISSUE_m STORE_ISSUE_m on STORE_ISSUE_t.ISSUE_M_ID=STORE_ISSUE_m.ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where  "
						//+ "STORE_ISSUE_m.DEPARTMENT_ID='"+deptId+"'"+" and  "
								+ "STORE_ISSUE_m.TO_STORE='"+toDeptId+"'"
						+"  and STORE_ISSUE_m.HOSPITAL_ID= '"+hosId+"'"
						+" and STORE_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" group by STORE_ISSUE_t.item_id,STORE_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME "
						+" ,STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE, mm.MANUFACTURER_NAME ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE ";
				}
				else if((!nomen.equals("")) && pvms.equals("")){
					qry=" select sum(qty_issued),STORE_ISSUE_t.item_id,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+" STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE"
						+" ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE, mm.MANUFACTURER_NAME from STORE_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_ISSUE_t.ITEM_ID=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_ISSUE_m STORE_ISSUE_m on STORE_ISSUE_t.ISSUE_M_ID=STORE_ISSUE_m.ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						//+" where  STORE_ISSUE_m.DEPARTMENT_ID='"+deptId+"'"	+" and "
								+ " STORE_ISSUE_m.TO_STORE='"+toDeptId+"'"
						+"  and STORE_ISSUE_m.HOSPITAL_ID= '"+hosId+"'"
						+" and STORE_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.NOMENCLATURE='"
						+ nomen+"'"
						+" group by STORE_ISSUE_t.item_id,STORE_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME "
						+" ,STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE, mm.MANUFACTURER_NAME ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE ";

				}
				else if((!pvms.equals("")) && nomen.equals("")){
					qry=" select sum(qty_issued),STORE_ISSUE_t.item_id,mas_store_item.pvms_no, mas_store_item.nomenclature,msic.ITEM_UNIT_NAME,"
						+" STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE"
						+" ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE, mm.MANUFACTURER_NAME from STORE_ISSUE_t"
						+" left outer join  mas_store_item mas_store_item on STORE_ISSUE_t.ITEM_ID=mas_store_item.ITEM_ID"
						+" left outer join MAS_STORE_ITEM_CONVERSION  msic on mas_store_item.ITEM_CONVERSION_ID= msic.ITEM_CONVERSION_ID"
						+" left outer join STORE_ISSUE_m STORE_ISSUE_m on STORE_ISSUE_t.ISSUE_M_ID=STORE_ISSUE_m.ID"
						+"   left outer join mas_store_brand msb on  mas_store_item.ITEM_ID = msb.ITEM_ID "
						+" left outer join mas_manufacturer mm on  msb.MANUFACTURER_ID  = mm.MANUFACTURER_ID "
						+" where "
						//+ " STORE_ISSUE_m.DEPARTMENT_ID='"+deptId+"'"	+" and "
								+ " STORE_ISSUE_m.TO_STORE='"+toDeptId+"'"
						+"  and STORE_ISSUE_m.HOSPITAL_ID= '"+hosId+"'"
						+" and STORE_ISSUE_m.issue_date between to_date('"
						+ fromDate+"'"
						+" ,'dd/mm/yyyy') and to_date('"
						+ toDate+"'"
						+" ,'dd/mm/yyyy')"
						+" and  mas_store_item.PVMS_NO='"
						+ pvms+"'"
						+" group by STORE_ISSUE_t.item_id,STORE_ISSUE_t.qty_issued,mas_store_item.pvms_no, mas_store_item.nomenclature, msic.ITEM_UNIT_NAME "
						+" ,STORE_ISSUE_m.DEPARTMENT_ID,STORE_ISSUE_t.BATCH_NO,STORE_ISSUE_t.EXPIRY_DATE, mm.MANUFACTURER_NAME ,store_issue_m.ISSUE_NO ,store_issue_m.TO_STORE ";

				}

			}

			// }
			objectList = (List) session.createSQLQuery(qry).list();*/
			
			List<StoreIssueT> issueTList=new ArrayList<StoreIssueT>();
			List<StoreIssueM> issueMList=new ArrayList<StoreIssueM>();
			
			Criteria criteria = session.createCriteria(StoreIssueM.class)
					.add(Restrictions.isNotNull("Hin"))
					.createAlias("Hin","hin")
					.add(Restrictions.eq("Hospital.Id",hosId))
					.add(Restrictions.eq("IssueDate",HMSUtil.convertStringTypeDateToDateType(fromDate)))
					.add(Restrictions.between("LastChgTime",fromTime,toTime));
			
			
		if(uhid!=null && !uhid.equals("")){
			 criteria=criteria.add(Restrictions.eq("hin.HinNo", uhid));
		}
		if(pname!=null && !pname.equals("")){
			criteria=criteria.add(Restrictions.ilike("hin.PFirstName", "%"+pname+"%"));
			
		}
		if(mobileNo!=0){
			criteria=criteria
					.add(Restrictions.eq("hin.MobileNumber", mobileNo));
		}
		if(criteria!=null){
			issueMList = criteria.list();
		}
		
		if(issueMList.size()==0){
				String msg="No Record Found !";
				map.put("msg", msg);
		}
		map.put("issueMList",issueMList);
		map.put("mobileNo", mobileNo);	
		map.put("uhid", uhid);	
		map.put("pname", pname);
		map.put("fromDate", fromDate);
		map.put("fromTime", fromTime);
		map.put("toTime", toTime);
			
			
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		for (Iterator iterator = objectList.iterator(); iterator.hasNext();) {
			Object[] object = (Object[]) iterator.next();
			/*for(int i=0; i<object.length;i++)
					{
					}*/
		}
		// javed khan
		List<MasDepartment> deptList = session.createCriteria(MasDepartment.class).add(
				Restrictions.eq("Status", "y").ignoreCase()).list();
		map.put("deptList",deptList);
		map.put("objectList", objectList);
		return map;

	}

	@Override
	public List<StoreIssueT> getIssueList(int issueTId) {
		List<StoreIssueT>issueTList=new ArrayList<StoreIssueT>();
		Session session=(Session)getSession();
		issueTList=session.createCriteria(StoreIssueT.class).add(Restrictions.eq("Id", issueTId)).add(Restrictions.or(
				Restrictions.eq("ItemReplacedToPharmacy","n").ignoreCase(),Restrictions.isNull("ItemReplacedToPharmacy"))).list();
		Map<String,Object>map=new HashMap<String,Object>();
		
		map.put("issueTList", issueTList);
		return issueTList;
	}

	@Override
	public Map<String, Object> getPopupValueForItemReplacement(int itemId,int deptId) {
		Map<String,Object>map=new HashMap<String,Object>();
		List<StoreItemBatchStock>stockList=new ArrayList<StoreItemBatchStock>();
		Session session=(Session)getSession();
		stockList=session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("Item.Id", itemId))
				.add(Restrictions.eq("Department.Id", deptId)).add(Restrictions.gt("ClosingStock", new BigDecimal(0))).list();
		return map;
	}

	@Override
	public Map<String, Object> addPatientDrugIssueReplace(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		Date issueDate = new Date();
		StoreIssueM issueM = new StoreIssueM();
		Session session = getSession();
		Transaction tx = null;
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreIssueT storeIssueTObj = new StoreIssueT();
			List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
			int visitId = box.getInt("visitId");
			int issueTId=0;
			int qtyIssuedTemp=0;
			if(box.getInt("issueTId")!=0){
				issueTId=box.getInt("issueTId");
			}
			
			storeIssueTList = hbt
					.find("select sit from jkt.hms.masters.business.StoreIssueT as sit  where Id="
							+ issueTId);
			PatientPrescriptionHeader patientPrescriptionHeader=(PatientPrescriptionHeader) session.createCriteria(PatientPrescriptionHeader.class)
							.add(Restrictions.eq("Visit.Id", visitId)).uniqueResult();
			int issueId = 0;
			if (storeIssueTList.size() > 0) {
				for (StoreIssueT storeIssueT : storeIssueTList) {
					storeIssueT.setItemReplacedToPharmacy("y");
					//added by govind 30-9-2016
//					if(box.getInt("qtyIssuedTemp")!=0){
//						qtyIssuedTemp=box.getInt("qtyIssuedTemp");
//						storeIssueT.setQtyReturned(new BigDecimal(qtyIssuedTemp));
//					}//added by govind 30-9-2016 end
					hbt.update(storeIssueT);
				}
			} else {/*
				// if(box.getInt("issueId") == 0){
				issueM.setIssueType("i");

				issueM.setIssueNo(box.getString(ISSUE_NO));
				if (box.get(RequestConstants.ISSUE_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(box.get(RequestConstants.ISSUE_DATE)));
					issueDate = java.sql.Date.valueOf(date4MySQL);
				}
				issueM.setIssueDate(issueDate);
				String deptType = "";
				deptType = (String) box.getString("deptType");

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				String patientIssueNo = generateDrugIssueNumber(deptType);
				issueM.setIssueNo(box.getString(ISSUE_NO));

				issueM.setStatus("o");

				MasHospital hospital = new MasHospital();
				hospital.setId(box.getInt("hospitalId"));
				issueM.setHospital(hospital);

				Users users = new Users();
				users.setId(box.getInt("userId"));
				issueM.setLastChgBy(users);
				issueM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				issueM.setLastChgTime(box.getString(CHANGED_TIME));
				issueM.setHin(patientPrescriptionHeader.getHin());
				hbt.save(issueM);
			*/}

			int srNo = box.getInt(SR_NO);
			int itemId = box.getInt(ITEM_ID);
/*			BigDecimal qtyReq = new BigDecimal(box.getString(QTY_IN_REQUEST));*/
			int itemIssued = box.getInt(ISSUED_ITEM);
			Vector batchNos = box.getVector(BATCH_NO);
			Vector qtyIssued = box.getVector(QTY_ISSUED);
			float a = Float.valueOf((String) qtyIssued.get(0));
			Vector remarks = box.getVector(REMARKS);
			Vector expDates = box.getVector(EXPIRY_DATE);
			Vector costPrice = box.getVector(COST_PRICE);

			
			List<Integer> stocks = new ArrayList<Integer>();
			List<BigDecimal> quantity = new ArrayList<BigDecimal>();

			
			BigDecimal issueQtyForPatientPrecscription = new BigDecimal(0);
			for (int i = 0; i < batchNos.size(); i++) {
				if (!qtyIssued.get(i).toString().equals("")
						&& Integer.parseInt(qtyIssued.get(i).toString()) != 0) {
					// --------------Update
					// StoreItemBatchStock-----------------------------
					// List<StoreItemBatchStock> batchStockList = new
					// ArrayList<StoreItemBatchStock>();
					/*
					 * batchStockList =
					 * 
					 * .createCriteria(StoreItemBatchStock.class)
					 * .add(Restrictions.eq("BatchNo", batchNos.get(i)))
					 * .createAlias("Item", "item")
					 * .add(Restrictions.eq("item.Id", itemId))
					 * .createAlias("Department", "d")
					 * .add(Restrictions.eq("d.Id", box.getInt("deptId")))
					 * .list();
					 */

					StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) session
							.load(StoreItemBatchStock.class,
									box.getInt("storeItemId" + (i + 1)));
					stocks.add(itemBatchStock.getId());
					quantity.add(new BigDecimal(qtyIssued.get(i)
							.toString()));

					StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class,
									itemBatchStock.getId());
					if (batchStockObj.getClosingStock() != null) {
						batchStockObj.setClosingStock(batchStockObj
								.getClosingStock().subtract(
										new BigDecimal(qtyIssued.get(i)
												.toString())));
					}
					 
					if(batchStockObj.getIssueReturn() != null && !batchStockObj.getIssueReturn().equals("") )
					{
					batchStockObj.setIssueReturn(batchStockObj.getIssueReturn().add(new BigDecimal(qtyIssued.get(i).toString())));
					}
					else
					batchStockObj.setIssueReturn(new BigDecimal(qtyIssued.get(i).toString()));
					
					
					hbt.update(batchStockObj);
					
					// Kaushal Mishra
					Map<String, Object> utilMap = new HashMap<String, Object>();
					utilMap = (Map<String, Object>) HMSUtil.getCurrentDateAndTime();
					String date = (String) utilMap.get("currentDate");
					String time = (String) utilMap.get("currentTime");
					int hospitalId=box.getInt("hospitalId");
					int deptId=box.getInt("deptId");
					int userId=box.getInt("userId");
					int totalRowCount=box.getInt("totalRowCount");
					int issuetId=0;
					if(box.getInt("issueTId")!=0){
						issuetId=box.getInt("issueTId");
					}
					
					try{
					List<StoreFyDocumentNo>	storeFyDocumentNoList = (List) getHibernateTemplate()
							.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Department.Id='"
									+ deptId
									+ "' and  sfdn.Hospital.Id = '"
									+ hospitalId + "'");
					String no = "";
					for (StoreFyDocumentNo storeFyDocumentNo : storeFyDocumentNoList) {
						if (storeFyDocumentNo.getDefectEntryNo() != null) {
							no = ("" + storeFyDocumentNo.getDefectEntryNo());
							no = getMaxNo(no);
						} else {
							no = getMaxNo("");
						}
						int defNo=Integer.parseInt(storeFyDocumentNo.getDefectEntryNo())+1;
						storeFyDocumentNo.setDefectEntryNo(defNo+"");
						hbt.update(storeFyDocumentNo);
					}
					
					
					 StoreDefectiveDrugM defectiveDrugM=new StoreDefectiveDrugM();
					defectiveDrugM.setEntryDate(new Date());
					MasHospital hospital=new MasHospital();
					hospital.setId(hospitalId);
					defectiveDrugM.setHospital(hospital);
					MasDepartment department=new MasDepartment();
					department.setId(deptId);
					defectiveDrugM.setDepartment(department);
					defectiveDrugM.setStatus("y");
					defectiveDrugM.setLastChgDate(new Date());
					defectiveDrugM.setLastChgTime(time); 
					Users users=new Users();
					users.setId(userId);
					defectiveDrugM.setLastChgBy(users); 
					defectiveDrugM.setEntryNo(no);
					defectiveDrugM.setDesc1(box.get("issueNo"));
					hbt.save(defectiveDrugM); 
					        
							StoreIssueT issueT=(StoreIssueT) session.get(StoreIssueT.class, issuetId);
							StoreDefectiveDrugT defectiveDrugT=new StoreDefectiveDrugT();
							defectiveDrugT.setItem(issueT.getItem());
							defectiveDrugT.setBatchNo(issueT.getBatchNo());
							defectiveDrugT.setExpiryDate(issueT.getExpiryDate());
							defectiveDrugT.setDefectQty(new BigDecimal(qtyIssued.get(i).toString()));
							defectiveDrugT.setDefectQtyReplace(new BigDecimal(qtyIssued.get(i).toString()));
							defectiveDrugT.setRemarks(box.get("remark"+i)); 
							defectiveDrugT.setDefectM(defectiveDrugM);
							hbt.save(defectiveDrugT);	
				
						tx.commit();
					
					}catch (Exception e)
						{
						e.printStackTrace();
						}
					}
				//Ended
				}
			/*Map<String, Object> detailsMap =new HashMap<String, Object>();
			detailsMap.put(HOSPITAL_ID,box.getInt("hospitalId"));
			detailsMap.put(USERID,box.getInt("userId"));
			Visit visit=(Visit) hbt.get(Visit.class, box.getInt("visitId"));
			detailsMap.put(HIN_ID,visit.getHin().getId());			
			detailsMap.put(VISIT_ID,box.getInt("visitId"));			
			detailsMap.put("stock",stocks);
			detailsMap.put("quantity",quantity);
			
			billingMasterDataService.internalBillingForDispensing(detailsMap);
			
*/
			flag = true;
			tx.commit();
		} catch (Exception e) 
		{
			
			e.printStackTrace();
		}
		List<Integer> lastIssueNoList = new ArrayList<Integer>();
		List<StoreIssueM> lastIssueMList = new ArrayList<StoreIssueM>();
		lastIssueNoList = session.createCriteria(StoreIssueM.class)
				.setProjection(Projections.max("Id")).list();
		lastIssueMList = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", lastIssueNoList.get(0))).list();
		map.put("issueId", lastIssueNoList.get(0));
		map.put("flag", flag);

		return map;
	}


	
	
	@SuppressWarnings("unchecked")
	public List<Object> getPrescriptionList(Map<String, Object> detailsMap) {
		@SuppressWarnings("unchecked")
		Session session = (Session) getSession();
		
		int visitNo = 0;
		String hinNo="";
		if (detailsMap.get("hinNo") != null) {
			hinNo = (String) detailsMap.get("hinNo");
		}
		if (detailsMap.get("visitNo") != null) {
			visitNo = (Integer) detailsMap.get("visitNo");
		}
		List<Object> prescriptionList = new ArrayList<Object>();

		try {
	
			if (visitNo!=0) {
				Criteria crit = session.createCriteria(PatientPrescriptionHeader.class)
						.createAlias("Hin", "p")
						.createAlias("Visit", "v")
						.add(Restrictions.eq("p.HinNo", hinNo))
					.add(Restrictions.eq("v.VisitNo", visitNo));
				prescriptionList = crit.list();
		
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return prescriptionList;

	}	

	

	@SuppressWarnings("unchecked")
	public List<Object> getVisitNoList(Map<String, Object> detailsMap) {
		@SuppressWarnings("unchecked")
		Session session = (Session) getSession();
		
		String hinNo = "";
		
		if (detailsMap.get("hinNo") != null) {
			hinNo = (String) detailsMap.get("hinNo");
		}
		List<Object> vistList = new ArrayList<Object>();

		try {
	
			if (!hinNo.equals("")) {
				Criteria crit = session.createCriteria(Visit.class)
						.createAlias("Hin", "p")
						.add(Restrictions.eq("p.HinNo", hinNo));
				vistList = crit.list();
		
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return vistList;

	}

	@Override
	public Map<String, Object> getDetailsForMedicineIssue(int issueTId) {

		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
		storeIssueTList=session.createCriteria(StoreIssueT.class).add(Restrictions.eq("IssueM.Id", issueTId)).list();
		map.put("storeIssueTList",storeIssueTList);
		return map;
	}
	
	
	@Override
	public Map<String, Object>  uploadAndViewDocuments(Box box,Map<String, Object> details) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		
		List<UploadDocuments> uploadDocuments = new ArrayList<UploadDocuments>();
		Session session = (Session)getSession();
		int hospitalId=0;
		int userId=0;
		int userType=0;
		String message="";
		
		if (box.get("hospitalId") != null) {
			hospitalId = Integer.parseInt(box.get("hospitalId")); 
		}	
		
		if (box.get("userType") != null) {
			userType = Integer.parseInt(box.get("userType")); 
		}
if(userType==1)
		{
String sql = "SELECT t2.nomenclature,t2.batch_no,t1.file_name,t1.file_extension,t1.patient_document as Block_Document,t2.block_date,t2.block_reason,t1.user_type,t1.id from"
		+ "(SELECT ud.id,ud.stock_id,ud.file_name,ud.file_extension,ud.patient_document,ud.last_chg_by as user_id,u.user_type,ud.hospital_id from upload_documents ud,users u where u.user_id=ud.last_chg_by and ud.stock_id IS NOT NULL )t1 left outer join"
		+ "(SELECT sibs.stock_id,mst.nomenclature,sibs.block_date,sibs.block_reason,sibs.batch_no from store_item_batch_stock sibs,mas_store_item mst where sibs.item_id=mst.item_id)"
		+ "t2 on t1.stock_id=t2.stock_id group by t2.batch_no,t2.nomenclature,t1.file_name,t1.file_extension,Block_Document,t2.block_date,t2.block_reason,t1.user_type,t1.id order by t2.block_date desc";

uploadDocuments =session.createSQLQuery(sql).list();

		}
		else{
			
			String sql = "SELECT t2.nomenclature,t2.batch_no,t1.file_name,t1.file_extension,t1.patient_document as Block_Document,t2.block_date,t2.block_reason,t1.user_type,t1.id from"
					+ "(SELECT ud.id,ud.stock_id,ud.file_name,ud.file_extension,ud.patient_document,ud.last_chg_by as user_id,u.user_type,ud.hospital_id from upload_documents ud,users u where u.user_id=ud.last_chg_by and ud.stock_id IS NOT NULL )t1 left outer join"
					+ "(SELECT sibs.stock_id,mst.nomenclature,sibs.block_date,sibs.block_reason,sibs.batch_no from store_item_batch_stock sibs,mas_store_item mst where sibs.item_id=mst.item_id)"
					+ "t2 on t1.stock_id=t2.stock_id where t1.hospital_id='"+hospitalId+"' or t1.user_type=1 group by t2.batch_no,t2.nomenclature,t1.file_name,t1.file_extension,Block_Document,t2.block_date,t2.block_reason,t1.user_type,t1.id  order by t2.block_date desc";

			uploadDocuments =session.createSQLQuery(sql).list();
			
		}
	map.put("uploadDocuments", uploadDocuments);
	map.put("message", message);
	
		return map;
	}

	@Override
	public Map<String, Object> submitIssueForOtherInstituteIndent(
			Map<String, Object> utilMap, Box box) {
		boolean b = false;
		Session session = getSession();
		Transaction tx = null;
		Map<String, Object> map = new HashMap<String, Object>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		List<StoreInternalIndentT> storeInternalTList = new ArrayList<StoreInternalIndentT>();
		int indentDtId = 0;
		int issueId = 0;
		int itemId = 0;
		String userName = "";
		int deptId = 0;
		int hospitalId = 0;
		String issueNo = "";
		String issuedBatchIdAndQty = "";

		try {
			tx = session.beginTransaction();
			Date dateStringFormat = null;
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			dateStringFormat = java.sql.Date.valueOf((sdf.format(new Date())));

			if (utilMap.get("deptId") != null) {
				deptId = (Integer) utilMap.get("deptId");
			}
			if (utilMap.get("hospitalId") != null) {
				hospitalId = (Integer) utilMap.get("hospitalId");
			}
			int totalQtyIssued = 0;
			if (utilMap.get("totalQtyIssued") != null) {
				totalQtyIssued = (Integer) utilMap.get("totalQtyIssued");
			}
			if (utilMap.get("issuedBatchIdAndQty") != null) {
				issuedBatchIdAndQty = (String) utilMap
						.get("issuedBatchIdAndQty");
			}
			if (utilMap.get("issueNo") != null) {
				issueNo = (String) utilMap.get("issueNo");
			}

			StoreIssueM issueM = new StoreIssueM();
			if (utilMap.get("issueM") != null) {
				issueM = (StoreIssueM) utilMap.get("issueM");
			}

			// Vector receivedQty = box.getVector(RequestConstants.QTY_ISSUED);
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			hbt.save(issueM);
			hbt.refresh(issueM);
			issueId = issueM.getId();
			map.put("issueId", issueId);
			int issuemId = issueM.getRequestNo().getId();

			List indentList = getHibernateTemplate().findByCriteria(
					DetachedCriteria.forClass(StoreInternalIndentM.class).add(
							Restrictions
									.eq("Id", issueM.getRequestNo().getId())));
			StoreInternalIndentM indentM1 = new StoreInternalIndentM();
			indentM1 = (StoreInternalIndentM) indentList.get(0);
			indentM1.setStatus("Emergent Indent Issue");
			hbt.saveOrUpdate(indentM1);

			// Update Item Stock
			List lstData1 = session.createCriteria(StoreIssueT.class)
					.add(Restrictions.eq("IssueM.Id", issueId)).list();
			// List lstData1 = new ArrayList(header.getIssueId());
			int j = 0;
			int k = 1;
			for (int i = 0; i < lstData1.size(); i++) {
				MasStoreItem item = ((StoreIssueT) lstData1.get(i)).getItem();

				List lstdata = getHibernateTemplate().find(
						"from jkt.hms.masters.business.StoreItemBatchStock ss where ss.Item="
								+ ((StoreIssueT) lstData1.get(i)).getItem()
										.getId()
								+ " and ss.BatchNo='"
								+ ((StoreIssueT) lstData1.get(i)).getBatchNo()
										.trim() + "'"
								+ " and ss.Department.Id="
								+ issueM.getDepartment().getId()
								+ " and ss.Hospital.Id = " + hospitalId);

				StoreItemBatchStock itemBatchStock = new StoreItemBatchStock();
				itemBatchStock = (StoreItemBatchStock) lstdata.get(0);
				StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
						.load(StoreItemBatchStock.class, itemBatchStock.getId());
				if (batchStockObj.getClosingStock() != null) {
					batchStockObj.setClosingStock(batchStockObj
							.getClosingStock().subtract(
									((StoreIssueT) lstData1.get(i))
											.getQtyIssued()));
				}
				BigDecimal issueQty = new BigDecimal(0.00);

				if (batchStockObj.getIssueQty() != null) {
					issueQty = batchStockObj.getIssueQty();
				}
				batchStockObj.setIssueQty(issueQty.add(((StoreIssueT) lstData1
						.get(i)).getQtyIssued()));
				hbt.update(batchStockObj);

				int storeFyId = 0;
				Criteria c = session.createCriteria(StoreFyDocumentNo.class)
						.add(Restrictions.eq("Department.Id", deptId))
						.add(Restrictions.eq("Hospital.Id", hospitalId));
				storeFyDocumentNoList = c.list();
				for (StoreFyDocumentNo documentNo : storeFyDocumentNoList) {
					storeFyId = documentNo.getId();
				}
				HibernateTemplate hbt4 = getHibernateTemplate();
				hbt4.setFlushModeName("FLUSH_EAGER");
				hbt4.setCheckWriteOperations(false);
				if (storeFyId > 0) {
					StoreFyDocumentNo storeFyDocumentNo = (StoreFyDocumentNo) hbt4
							.load(StoreFyDocumentNo.class, storeFyId);
					storeFyDocumentNo.setIssueDeptNo(issueNo);
					hbt4.update(storeFyDocumentNo);
					hbt4.refresh(storeFyDocumentNo);
				} else {
					StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
					storeFyDocumentNo.setIssueDeptNo(issueNo);
					hbt4.save(storeFyDocumentNo);
					hbt4.refresh(storeFyDocumentNo);
				}

				j = j + 1;
				k = k + 1;
			}
			int p = 0;
			int q = 1;

			Vector itemList = box.getVector(RequestConstants.ITEM_ID);
			for (int ii = 0; ii < itemList.size(); ii++) {
				Criteria crit = session
						.createCriteria(StoreInternalIndentT.class)
						.createAlias("Internal", "I")
						.createAlias("Item", "item")
						.add(Restrictions.eq("I.Id", issuemId))
						.add(Restrictions.eq("item.Id",
								Integer.parseInt(itemList.get(ii).toString())));
				storeInternalTList = crit.list();

				int internalIndentTId = 0;

				for (StoreInternalIndentT storeInternalIndentT : storeInternalTList) {
					internalIndentTId = storeInternalIndentT.getId();

					HibernateTemplate hbt5 = getHibernateTemplate();
					hbt5.setFlushModeName("FLUSH_EAGER");
					hbt5.setCheckWriteOperations(false);
					StoreInternalIndentT internalIndentT = new StoreInternalIndentT();
					internalIndentT = (StoreInternalIndentT) hbt5.load(
							StoreInternalIndentT.class, internalIndentTId);
					int quantityRcvd = 0;
					int actualQuantity = 0;
					if (internalIndentT.getQtyIssued() != null) {
						quantityRcvd = internalIndentT.getQtyIssued();
					}
					int quantityReceivedFinal = quantityRcvd
							+ box.getInt(RequestConstants.QTY_ISSUED + q);
					// actual request quantity replaced by issued quantity and
					// saved to column actualRequestQuantity as requested by Dr
					// Das on 2/5/2012
					/*
					 * if(internalIndentT.getQtyRequest()!=null){
					 * actualQuantity=internalIndentT.getQtyRequest(); }
					 * internalIndentT.setActualRequestedQty(actualQuantity);
					 * internalIndentT.setQtyRequest(quantityReceivedFinal);
					 */
					// end of change
					internalIndentT.setQtyIssued(quantityReceivedFinal);
					String tempIssuedBatchIdAndQty = "";
					int batchId = box.getInt(RequestConstants.BATCH_ID + p);
					issuedBatchIdAndQty = issuedBatchIdAndQty + "#" + batchId
							+ "/" + box.getInt(RequestConstants.QTY_ISSUED + q);
					internalIndentT.setIssuedBatchidAndQty(issuedBatchIdAndQty);
					hbt5.update(internalIndentT);
					hbt5.refresh(internalIndentT);
				}
				p = p + 1;
				q = q + 1;
			}
			b = true;
			tx.commit();
		} catch (Exception exception) {
			b = false;
			tx.rollback();
			exception.printStackTrace();
		}
		map.put("b", b);
		return map;
	}
	
	public Map<String, Object> getAutoCompleteForItemList(Map<String, Object> detailsMap) {
		
		

		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		Session session = (Session) getSession();
		try {
			String str = detailsMap.get("autoHint") + "%";
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.like("Nomenclature", str))
					//	.add(Restrictions .eq("Status", "y"))
					;
			c.setFirstResult(0);
			c.setMaxResults(10);
			itemList = c.list();
			map.put("itemList", itemList);
			
		

		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		return map;

	
	
	}

	@Override
	public Map<String, Object> getItemListForOtc(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object> itemList = new ArrayList<Object>();

		Session session = (Session) getSession();

		

		List<Integer> objectList = new ArrayList<Integer>();
		
		
		try {
			String str = box.get("autoHint") + "%";
			itemList = session
						.createCriteria(StoreItemBatchStock.class)
						.createAlias("Item", "item")
						.add(Restrictions.eq("item.Status", "y").ignoreCase())
						.add(Restrictions.eq("item.OtcType", "y").ignoreCase())
						.add(Restrictions.gt("ClosingStock",
								new BigDecimal(0.0)))
						.add(Restrictions.like("item.Nomenclature", str).ignoreCase())
						.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId")))
						.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
						.setProjection(
								Projections
										.projectionList()
										.add(Projections
												.groupProperty("item.Id"))
										.add(Projections
												.property("item.PvmsNo"))
										.add(Projections
												.property("item.Nomenclature"))).list();
			
			
			

		} catch (Exception e) {
			e.printStackTrace();
		}

		map.put("itemList", itemList);
		return map;
	}

	@Override
	public Map<String, Object> fillItemsForOtcDrugs(Map<String, Object> dataMap) {
		Session session = (Session) getSession();
		// String pvms = null;
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreBrand> brandList = new ArrayList<MasStoreBrand>();
		List<StoreItemBatchStock> batchList = new ArrayList<StoreItemBatchStock>();
		int deptId = 0;
		int hospitalId = 0;
		
		if (dataMap.get("deptId") != null) {
			deptId = Integer.parseInt("" + dataMap.get("deptId"));
		}
		if (dataMap.get("hospitalId") != null) {
			hospitalId = Integer.parseInt("" + dataMap.get("hospitalId"));
		}
		
		int userType = 0;
		if (dataMap.get("userType") != null) {
			userType = Integer.parseInt("" + dataMap.get("userType"));
		}
		Date currentDate = new Date();
		try {
			Map<String, Object> utilMap = new HashMap<String, Object>();
			utilMap = (Map) HMSUtil.getCurrentDateAndTime();
			String date = (String) utilMap.get("currentDate");
			SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
			SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
			String date4MySQL = formatterOut.format(formatterIn.parse(date));
			 currentDate = java.sql.Date.valueOf(date4MySQL);
		} catch (java.text.ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		 
		 
		try {
			
			String str = "" + dataMap.get("pvmsNo");
			
			Criteria c = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("PvmsNo", str));
			itemList = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		try {
			int itemId = 0;
			String unit = "";
			for (MasStoreItem masStoreItem : itemList) {
				itemId = masStoreItem.getId();
				unit = masStoreItem.getItemConversion().getItemUnitName();
			}
			if (itemId != 0) {
			Criteria c3 = session.createCriteria(StoreItemBatchStock.class).createAlias("Item", "item")
					.add(Restrictions.eq("item.Id", itemId))
					.add(Restrictions.eq("Hospital.Id", hospitalId))
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("item.Status", "y").ignoreCase())
						.add(Restrictions.eq("item.OtcType", "y").ignoreCase())
					.add(Restrictions.gt("ClosingStock", new BigDecimal (0)));
			batchList = c3.list();
			
		 
		}
			map.put("batchList", batchList);
			map.put("unit", unit);
			map.put("itemId", itemId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getclosingStock(Map<String, Object> dataMap) {
			int batchId = 0;
			
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session) getSession();
			int mId = 1;
			String batchName = "";
			int deptId = 0;
			int hospitalId= (Integer)dataMap.get("hospitalId");
			List<StoreItemBatchStock> batchIdList = new ArrayList<StoreItemBatchStock>();
			try {
				
				  if (dataMap.get("deptId") != null) { 
					  deptId = Integer.parseInt(""+ dataMap.get("deptId")); }
				 
				if (dataMap.get("batchId") != null) {
					batchId = (Integer)(dataMap.get("batchId"));
					
				} 

					if(batchId != 0){
						batchIdList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.idEq(batchId)).add(Restrictions.eq("Department.Id", deptId))
								.add(Restrictions.eq("Hospital.Id", hospitalId)).list();
					}
				
				

			} catch (Exception e) {
				e.printStackTrace();
			}
			
			map.put("batchIdList", batchIdList);
			return map;
	}
	
	public Map<String, Object> printStockStatusJsp() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		try {
			itemList = session.createCriteria(MasStoreItem.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
			departmentList = session.createCriteria(MasDepartment.class)
					.add(Restrictions.eq("Status", "y").ignoreCase()).list();
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("itemList", itemList);
		map.put("departmentList", departmentList);

		return map;
	}
	
	// added by amit das on 14-06-2016
	public Map<String, Object> showDetailedStockRegisterReportJsp(Map<String, Object> dataMap){

		Map<String, Object> map = new HashMap<String, Object>();
		Session session =null;
		List<StoreItemBatchStock> masItemList = null; // added by amit das on 28-06-2016
		int hospitalId = 0;
		int departmentId = 0;
		/*List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();*/ //commented by amit das on 28-06-2016
		
		try {
			if(dataMap!=null){
				if(dataMap.get("hospitalId")!=null)
					hospitalId =  (Integer)dataMap.get("hospitalId");
				
				if(dataMap.get("departmentId")!=null)
					departmentId =  (Integer)dataMap.get("departmentId");
			}
			
			session = (Session)getSession();
				
			masItemList = session.createCriteria(StoreItemBatchStock.class)
					.createAlias("Hospital", "h")
					.createAlias("Department", "d")
					.add(Restrictions.eq("h.Id", hospitalId))
					.add(Restrictions.eq("d.Id", departmentId))
					// .add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
					.add(Restrictions.isNotNull("Item"))
					.list();
			//masStoreItemList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("Status", "y").ignoreCase()).addOrder(Order.asc("Nomenclature")).list();
			map.put("masItemList", masItemList);

		} catch (Exception e) {
			e.printStackTrace();

		}
		return map;
	}

	@Override
	// added by amit das on 14-06-2016
	public Map<String, Object> printDetailedStockRegisterCentralStoreReport(
			Map<String, Object> requestParameters) {
		Map<String, Object> map = new HashMap<String, Object>();
		MasHospital masHospital = null;
		MasStoreItem item = null;
		MasDepartment department = null;
		Session session = (Session) getSession();
		int itemId=0;
		int deptId=0;
		int hospitalId=0;
		Date fromDate = null;
		Date toDate = null;
		
		
		SQLQuery query = null;
		if(requestParameters.get("deptId")!=null){
			deptId=(Integer)requestParameters.get("deptId");
		}
		if(requestParameters.get("hospitalId")!=null){
			hospitalId=Integer.parseInt(""+requestParameters.get("hospitalId"));
		}
		if(requestParameters.get("itemId")!=null){
			itemId=(Integer)requestParameters.get("itemId");
		}
		if(requestParameters.get("fromDate")!=null){
			fromDate = (Date)requestParameters.get("fromDate");
		}
		if(requestParameters.get("toDate")!=null){
			toDate = (Date)requestParameters.get("toDate");
		}
		
		
		try{
			masHospital = getHibernateTemplate().get(MasHospital.class, hospitalId);
			item = getHibernateTemplate().get(MasStoreItem.class, itemId);
			department = getHibernateTemplate().get(MasDepartment.class, deptId);
			
			if(masHospital!=null)
				map.put("hospitalName", masHospital.getHospitalName());
			

			if(item!=null)
				map.put("itemName", item.getNomenclature());
			

			if(department!=null)
				map.put("deptName", department.getDepartmentName());
			
			if(toDate!=null)
				map.put("toDate", toDate);

			if(fromDate!=null)
				map.put("fromDate", fromDate);
			
			if(fromDate!=null && toDate!=null){
		    query = (SQLQuery) session.createSQLQuery("SELECT * FROM  ledger_new(:fromDate,:toDate,:deptId,:itemId,:hospitalId)")
                      .setParameter("fromDate", fromDate)
                      .setParameter("toDate", toDate)
                      .setParameter("deptId", deptId)
                      .setParameter("itemId", itemId)
		    		  .setParameter("hospitalId", hospitalId);
            query.list();
			}

		}catch (Exception e) {
		  e.printStackTrace();
			// TODO: handle exception
		}

		return map;

	}


	@Override
	public Map<String, Object> getOpeningData(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasManufacturer> manufacturerList =new ArrayList<MasManufacturer>();
		List<MasInstituteDepartment> departmentForIndentNoList = new ArrayList<MasInstituteDepartment>();
		List<StoreFyDocumentNo> storeFyDocumentNoList = new ArrayList<StoreFyDocumentNo>();
		Session session = (Session)getSession();
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		manufacturerList = session.createCriteria(MasManufacturer.class).add(Restrictions.eq("Status", "y").ignoreCase()).list();
		
		departmentForIndentNoList = session
				.createCriteria(MasInstituteDepartment.class, "mi")
				.add(Restrictions.eq("mi.Status", "Y").ignoreCase())
				.add(Restrictions.eq("Department.Id", box.getInt("deptId")))
				.add(Restrictions.eq("Institute.Id", box.getInt("hospitalId")))
				.list();
		
		String deptCode = "";
		String hospitalTypeCode = "";
		String hospitalCode = "";
		String balanceNo = "";
		int storeFyDocumentNoId = 0;
		if (departmentForIndentNoList.size() > 0) {
			for (MasInstituteDepartment masInstituteDepartment: departmentForIndentNoList) {
				deptCode =masInstituteDepartment.getDepartment().getDepartmentCode();
				hospitalTypeCode = masInstituteDepartment.getInstitute().getHospitalType().getHospitalTypeCode();
				hospitalCode = masInstituteDepartment.getInstitute().getHospitalCode();
			}
		}
		Map<String, Object> maxMap = new HashMap<String, Object>();
		maxMap.put("deptCode", deptCode);
		maxMap.put("hospitalTypeCode", hospitalTypeCode);
		maxMap.put("hospitalCode", hospitalCode);

		
		storeFyDocumentNoList = (List) getHibernateTemplate()
				.find("from jkt.hms.masters.business.StoreFyDocumentNo as sfdn where sfdn.Hospital.Id = "
						+ box.getInt("hospitalId")
						+ " and sfdn.Department.Id = "
						+ box.getInt("deptId"));
						
		if (storeFyDocumentNoList != null && storeFyDocumentNoList.size() > 0) {
			for (StoreFyDocumentNo obj : storeFyDocumentNoList) {
				if (obj.getBalanceNo() != null && !obj.getBalanceNo().equals("")) {
					balanceNo = ("" + obj.getBalanceNo());
					storeFyDocumentNoId = obj.getId();
					maxMap.put("no", balanceNo);
					balanceNo = getMaxNoForOpening(maxMap);
					map.put("max", balanceNo);

				} else {
					//
					maxMap.put("no", balanceNo);
					balanceNo = getMaxNoForOpening(maxMap);
					map.put("max", balanceNo);
					
					StoreFyDocumentNo storeFyDocumentNoObj = new StoreFyDocumentNo();
					storeFyDocumentNoObj.setAdjustmentNo("0");
					storeFyDocumentNoObj.setAdjustmentStartNo("0");
					storeFyDocumentNoObj.setBalanceNo(balanceNo);
					storeFyDocumentNoObj.setBalanceStartNo("0");
					storeFyDocumentNoObj.setDefectEntryNo("0");
					storeFyDocumentNoObj.setDefectEntryStartNo("0");
					storeFyDocumentNoObj.setDemandNo("0");
					storeFyDocumentNoObj.setDemandStartNo("0");
					storeFyDocumentNoObj.setInIndentNo("0");
					storeFyDocumentNoObj.setDepartment(new MasDepartment(box.getInt("deptId")));
					storeFyDocumentNoObj.setGrnNo("0");
					storeFyDocumentNoObj.setGrnStartNo("0");
					storeFyDocumentNoObj.setIssueDeptNo("0");
					storeFyDocumentNoObj.setIssueDeptReturnNo("0");
					storeFyDocumentNoObj.setIssueDeptReturnStartNo("0");
					storeFyDocumentNoObj.setIssueDeptStartNo("0");
					storeFyDocumentNoObj.setVendorReturnNo("0");
					storeFyDocumentNoObj.setVendorReturnStartNo("0");
					String issueDeptNo = "";
					issueDeptNo = getMaxNo("0");
					String issueDeptStartNo = issueDeptNo;
					storeFyDocumentNoObj.setIssueDeptNo("0");
					storeFyDocumentNoObj.setIssueDeptStartNo("0");
					MasHospital hospital = new MasHospital();
					hospital.setId(box.getInt("hospitalId"));
					storeFyDocumentNoObj.setHospital(hospital);
					hbt.save(storeFyDocumentNoObj);
					hbt.refresh(storeFyDocumentNoObj);

					storeFyDocumentNoId = storeFyDocumentNoObj.getId();
					

				}
			}
		} else {
			maxMap.put("no", balanceNo);
			balanceNo = getMaxNoForOpening(maxMap);
			map.put("max", balanceNo);
			
			StoreFyDocumentNo storeFyDocumentNo = new StoreFyDocumentNo();
			storeFyDocumentNo.setAdjustmentNo("0");
			storeFyDocumentNo.setAdjustmentStartNo("0");
			storeFyDocumentNo.setBalanceNo(balanceNo);
			storeFyDocumentNo.setBalanceStartNo("0");
			storeFyDocumentNo.setDefectEntryNo("0");
			storeFyDocumentNo.setDefectEntryStartNo("0");
			storeFyDocumentNo.setDemandNo("0");
			storeFyDocumentNo.setDemandStartNo("0");
			storeFyDocumentNo.setInIndentNo("0");
			storeFyDocumentNo.setDepartment(new MasDepartment(box.getInt("deptId")));
			storeFyDocumentNo.setGrnNo("0");
			storeFyDocumentNo.setGrnStartNo("0");
			storeFyDocumentNo.setIssueDeptNo("0");
			storeFyDocumentNo.setIssueDeptReturnNo("0");
			storeFyDocumentNo.setIssueDeptReturnStartNo("0");
			storeFyDocumentNo.setIssueDeptStartNo("0");
			storeFyDocumentNo.setVendorReturnNo("0");
			storeFyDocumentNo.setVendorReturnStartNo("0");
			String issueDeptNo = "";
			issueDeptNo = getMaxNo("0");
			String issueDeptStartNo = issueDeptNo;
			storeFyDocumentNo.setIssueDeptNo(issueDeptNo);
			storeFyDocumentNo.setIssueDeptStartNo(issueDeptStartNo);
			MasHospital hospital = new MasHospital();
			hospital.setId(box.getInt("hospitalId"));
			storeFyDocumentNo.setHospital(hospital);
			hbt.save(storeFyDocumentNo);
			hbt.refresh(storeFyDocumentNo);

			storeFyDocumentNoId = storeFyDocumentNo.getId();
		}
		map.put("manufacturerList", manufacturerList);
		return map;
	}

	
	
	public String saveStockToLeanServer(Map<String,Object> map){
		String message="failure";
		StoreItemBatchStock storeItemBatchStock=(StoreItemBatchStock)map.get("stockDataList");
		//int storeFyId=(Integer)map.get("storeFyId");
		//String issueNo=(String)map.get("issueNo");
		MasHospital hospital=(MasHospital)map.get("hospital");
		String status=(String)map.get("status"); 
		StringBuilder insertStockField = new StringBuilder(); 
		insertStockField.append(storeItemBatchStock.getBatchNo()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getExpiryDate()).append(" |");
		insertStockField.append(storeItemBatchStock.getOpeningBalanceDate()).append(" |");
		insertStockField.append(storeItemBatchStock.getOpeningBalanceQty()).append(" |");
		insertStockField.append(storeItemBatchStock.getReceivedQty()).append(" |");
		insertStockField.append(storeItemBatchStock.getIssueQty()).append(" |");
		insertStockField.append(storeItemBatchStock.getClosingStock()).append(" |");
		insertStockField.append(storeItemBatchStock.getCostPrice()).append(" |");   
		insertStockField.append(storeItemBatchStock.getDispencingPrice()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getLastChgDate()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getManufactureDate()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getMrp()).append(" |");
		if(storeItemBatchStock.getDepartment()!=null){
			insertStockField.append(storeItemBatchStock.getDepartment().getId()); 
		}
		insertStockField.append(" |");
		if(storeItemBatchStock.getManufacturer()!=null){
			insertStockField.append(storeItemBatchStock.getManufacturer().getId());
		}
		insertStockField.append(" |");
		if(storeItemBatchStock.getItem()!=null){
			insertStockField.append(storeItemBatchStock.getItem().getId());
		}
		insertStockField.append(" |");
		 
		if(storeItemBatchStock.getHospital()!=null){
			insertStockField.append(storeItemBatchStock.getHospital().getId());
		}
		insertStockField.append(" |");
		if(storeItemBatchStock.getLastChgBy()!=null){
			insertStockField.append(storeItemBatchStock.getLastChgBy().getId());
		}
		insertStockField.append(" |");
		//insertStockField.append(storeFyId).append(" |");
		//insertStockField.append(issueNo).append(" |");
		String dataOfStock=insertStockField.toString();
		
		LeanServerStockData leanServerStockData=new LeanServerStockData();
		leanServerStockData.setStockData(dataOfStock);
		leanServerStockData.setCentralStockId(Long.parseLong(storeItemBatchStock.getId().toString()));
		//String patientNotUploadToServer="N";
		leanServerStockData.setStatus(status);
		leanServerStockData.setHospitalId(Long.parseLong(hospital.getId().toString())); 
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		hbt.save(leanServerStockData);
		hbt.flush();
		hbt.clear();
		System.out.println("Stock data save successfuly at lean server stock data table");
		message="success";
		return message;
	}
	
	public String saveStockToLeanServer(Map<String,Object> map,MasHospital masHospital){
		String message="failure";
		StringBuilder sb = new StringBuilder();
		URLConnection connection = null;
		InputStreamReader in = null; 
		StoreItemBatchStock storeItemBatchStock=(StoreItemBatchStock)map.get("stockDataList");
		//int storeFyId=(Integer)map.get("storeFyId");
		//String issueNo=(String)map.get("issueNo");
		MasHospital hospital=(MasHospital)map.get("hospital");
		StringBuilder insertStockField = new StringBuilder(); 
		insertStockField.append(storeItemBatchStock.getBatchNo()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getExpiryDate()).append(" |");
		insertStockField.append(storeItemBatchStock.getOpeningBalanceDate()).append(" |");
		insertStockField.append(storeItemBatchStock.getOpeningBalanceQty()).append(" |");
		insertStockField.append(storeItemBatchStock.getReceivedQty()).append(" |");
		insertStockField.append(storeItemBatchStock.getIssueQty()).append(" |");
		insertStockField.append(storeItemBatchStock.getClosingStock()).append(" |");
		insertStockField.append(storeItemBatchStock.getCostPrice()).append(" |");   
		insertStockField.append(storeItemBatchStock.getDispencingPrice()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getLastChgDate()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getManufactureDate()).append(" |"); 
		insertStockField.append(storeItemBatchStock.getMrp()).append(" |");
		if(storeItemBatchStock.getDepartment()!=null){
			insertStockField.append(storeItemBatchStock.getDepartment().getId()); 
		}
		insertStockField.append(" |");
		if(storeItemBatchStock.getManufacturer()!=null){
			insertStockField.append(storeItemBatchStock.getManufacturer().getId());
		}
		insertStockField.append(" |");
		if(storeItemBatchStock.getItem()!=null){
			insertStockField.append(storeItemBatchStock.getItem().getId());
		}
		insertStockField.append(" |");
		 
		if(storeItemBatchStock.getHospital()!=null){
			insertStockField.append(storeItemBatchStock.getHospital().getId());
		}
		insertStockField.append(" |");
		if(storeItemBatchStock.getLastChgBy()!=null){
			insertStockField.append(storeItemBatchStock.getLastChgBy().getId());
		}
		insertStockField.append(" |");
		//insertStockField.append(storeFyId).append(" |");
		//insertStockField.append(issueNo).append(" |");
		String msg=insertStockField.toString();
		try{
			msg=msg.replace("&", "$");
			msg=msg.replaceAll("[\r\n]", "*");
			String encode=URLEncoder.encode(msg,"UTF-8");
			String header="http://"+hospital.getClientIp()+":"+hospital.getClientPort(); 
			 
			String uri=header+"/hms/hms/stores?method=savestocktoserverside&message="
						+encode+"&hospitalId="+hospital.getId();
			 URL url=new URL(uri);
			 connection=url.openConnection();
			 if (connection != null && connection.getInputStream() != null) {
					in = new InputStreamReader(connection.getInputStream(),
							Charset.defaultCharset());
					BufferedReader bufferedReader = new BufferedReader(in);
					if (bufferedReader != null) {
						int cp;
						while ((cp = bufferedReader.read()) != -1) {
							sb.append((char) cp);
						}
						bufferedReader.close();
					}
					in.close();
				}
				String responseMsg = sb.toString();
				if (responseMsg
						.contains("success")) {
					message = "1";
				}else if(responseMsg
						.contains("fail")){
					message = "2";
				}else if(responseMsg
						.contains("500")){
					message = "3";
				}
			}catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		 if("1".equals(message)){
			 System.out.println("stock data save successfuly at lean server stock table");
			 message="success";
		 }else{
			 System.out.println("Some Error occur at");
			 message="failure";
		 }
		
		return message;
	}
	public Map<String,Object>  getDataForStockTransferForLeanServer(){
		Map<String,Object> dataMap=new HashMap<String,Object>();
		Session session=(Session)getSession();
		try{
		Criteria criteria=session.createCriteria(LeanServerStockData.class)
				.add(Restrictions.eq("Status", "N").ignoreCase())
				.addOrder(Order.asc("Id"))
				.setMaxResults(10);
		List<LeanServerStockData> leanServerStockDatas=criteria.list();
		
		MasHospital masHospital=null;
		if(leanServerStockDatas!=null && leanServerStockDatas.size()>0){
			masHospital=(MasHospital)session.get(MasHospital.class,
					Integer.parseInt(leanServerStockDatas.get(0).getHospitalId().toString())); 
			dataMap.put("leanServerStockDatas", leanServerStockDatas);
		}
		if(masHospital!=null){
			dataMap.put("masHospital", masHospital);
		}
		} catch(Exception e){
			e.printStackTrace();
		} finally{
		if(session!=null){
			session.close();
		}
		}
		return dataMap;
	}
	
	public Map<String,Object>  getDataForMedicinePresForLeanServer(){
		Map<String,Object> dataMap=new HashMap<String,Object>();
		Session session=(Session)getSession();
		try{
		Criteria criteria=session.createCriteria(LeanServerMedicineDispenseData.class)
				.add(Restrictions.eq("Status", "N").ignoreCase())
				.addOrder(Order.asc("Id"))
				.setMaxResults(10);
		List<LeanServerMedicineDispenseData> leanServerMedicineDispenseDatas=criteria.list();
		
		MasHospital masHospital=null;
		if(leanServerMedicineDispenseDatas!=null && leanServerMedicineDispenseDatas.size()>0){
			masHospital=(MasHospital)session.get(MasHospital.class,
					Integer.parseInt(leanServerMedicineDispenseDatas.get(0).getHospitalId().toString())); 
			dataMap.put("leanServerMedicineDispenseDatas", leanServerMedicineDispenseDatas);
		}
		if(masHospital!=null){
			dataMap.put("masHospital", masHospital);
		}
		} catch (Exception e){
			e.printStackTrace();
		}
		finally{
		if(session!=null){
			session.close();
		}
		}
		return dataMap;
	}
	
	public Map<String,Object>  getDataForMedicinePresForCentralServer(){
		Map<String,Object> dataMap=new HashMap<String,Object>();
		Session session=(Session)getSession();
		try{
		Criteria criteria=session.createCriteria(CentralServerMedicineDispenseData.class)
				.add(Restrictions.eq("Status", "N").ignoreCase())
				.addOrder(Order.asc("Id"))
				.setMaxResults(10);
		List<CentralServerMedicineDispenseData> centralServerMedicineDispenseData=criteria.list();
		
		MasHospital masHospital=null;
		if(centralServerMedicineDispenseData!=null && centralServerMedicineDispenseData.size()>0){
			masHospital=(MasHospital)session.get(MasHospital.class,
					Integer.parseInt(centralServerMedicineDispenseData.get(0).getHospitalId().toString())); 
			dataMap.put("centralServerMedicineDispenseData", centralServerMedicineDispenseData);
		}
		if(masHospital!=null){
			dataMap.put("masHospital", masHospital);
		}
		} catch (Exception e){
			e.printStackTrace();
		}
		finally{
		if(session!=null){
			session.close();
		}
		}
		return dataMap;
	}
	
	
	
	public String updateLeanServerStockData(LeanServerStockData leanServerStockData){
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false); 
  	  	String savedSaveToServer="Y";
  	  	leanServerStockData.setStatus(savedSaveToServer);
  	  	hbt.update(leanServerStockData);
  	  	hbt.flush();
  	  	hbt.clear();
		return "success";
	}
	public String updateLeanServerMedicinePresData(LeanServerMedicineDispenseData leanServerMedicineDispenseData){
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false); 
  	  	String savedSaveToServer="Y";
  	  	leanServerMedicineDispenseData.setStatus(savedSaveToServer);
  	  	hbt.update(leanServerMedicineDispenseData);
  	  	hbt.flush();
  	  	hbt.clear();
		return "success";
	}
	public String updateCentralServerMedicinePresData(CentralServerMedicineDispenseData centralServerMedicineDispenseData){
		HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false); 
  	  	String savedSaveToServer="Y";
  	  	centralServerMedicineDispenseData.setStatus(savedSaveToServer);
  	  	hbt.update(centralServerMedicineDispenseData);
  	  	hbt.flush();
  	  	hbt.clear();
		return "success";
	}
	
	public String medicineDispencingToLeanServer(Map<String,Object> dataForMedicenDispencing){
		try{
					MasHospital hospital=(MasHospital)dataForMedicenDispencing.get("hospital");
					String status=(String)dataForMedicenDispencing.get("status");
					StoreIssueM issueM=(StoreIssueM)dataForMedicenDispencing.get("issueM");
					String medicineDispencingData = generateStringForMedicenDispence(dataForMedicenDispencing);
			  	  	HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
			  	  	LeanServerMedicineDispenseData leanServerMedicineDispenseData=new LeanServerMedicineDispenseData();
			  	  	leanServerMedicineDispenseData.setMedicineDispenseData(medicineDispencingData); 
			  	  	leanServerMedicineDispenseData.setLeanMedicineDispenseId(Long.parseLong(issueM.getId().toString())); 
			  	  	leanServerMedicineDispenseData.setStatus(status);
			  	  	leanServerMedicineDispenseData.setHospitalId(Long.parseLong(hospital.getId()+""));
			  	  	hbt.save(leanServerMedicineDispenseData);
			  	  	hbt.flush();
			  	  	hbt.clear(); 
				 return "success";
        	}catch(Exception e){
                e.printStackTrace();
                return "failure";
        	}
        
} 
	
	public String  medicineDispencingToLeanServer(Map<String,Object> dataForMedicenDispencing,MasHospital hospital){
		StringBuilder sb = new StringBuilder();
		URLConnection connection = null;
		InputStreamReader in = null; 
		String message = "failure"; 
		Map<String,Object> returnMap=new HashMap<String,Object>();
		try{ 
					String msg = generateStringForMedicenDispence(dataForMedicenDispencing);
                    returnMap.put("Medicine Dispencing Message", msg);
			  	  try{
			  		msg=msg.replace("&", "$");
			  		msg=msg.replaceAll("[\r\n]", "*");
			  		String encode=URLEncoder.encode(msg,"UTF-8");
			  		String header="http://"+hospital.getClientIp()+":"+hospital.getClientPort();   
			  		String uri=header+"/hms/hms/stores?method=medicineDispencingToLeanServer&message="
			  					+encode+"&hospitalId="+hospital.getId();
			  		 URL url=new URL(uri);
			  		 connection=url.openConnection();
			  		 if (connection != null && connection.getInputStream() != null) {
			  				in = new InputStreamReader(connection.getInputStream(),
			  						Charset.defaultCharset());
			  				BufferedReader bufferedReader = new BufferedReader(in);
			  				if (bufferedReader != null) {
			  					int cp;
			  					while ((cp = bufferedReader.read()) != -1) {
			  						sb.append((char) cp);
			  					}
			  					bufferedReader.close();
			  				}
			  				in.close();
			  			}
			  			String responseMsg = sb.toString();
			  			if (responseMsg
			  					.contains("success")) {
			  				message = "1";
			  			}else if(responseMsg
			  					.contains("fail")){
			  				message = "2";
			  			}else if(responseMsg
			  					.contains("500")){
			  				message = "3";
			  			}
			  		}catch (MalformedURLException e) {
			  			// TODO Auto-generated catch block
			  			e.printStackTrace();
			  			System.out.println("Some Error occur in lean server when Medicine Dispencing Data saved ");
			  		} catch (IOException e) {
			  			// TODO Auto-generated catch block
			  			e.printStackTrace();
			  			System.out.println("Some Error occur in lean server when Medicine Dispencing Data saved ");
			  		}
			  	  if("1".equals(message)){
			  		  System.out.println("Medicine Dispencing Data successfuly save to lean server");
			  		message="success";
			  	  }else{
			  		System.out.println("Some Error occur in lean server when Medicine Dispencing Data saved ");
			  		message="failure";
			  	  } 
			  	  returnMap.put("message", message);
				 return message;
        	}catch(Exception e){
                e.printStackTrace();
                System.out.println("Some Error occur in lean server when Medicine Dispencing Data saved ");
                returnMap.put("message", "failure");
                message="failure";
				return message;
        	} 
        
}
	
	public String medicineDispencingToToCentralServer(Map<String,Object> dataForMedicenDispencing){
		try{ 
					MasHospital hospital=(MasHospital)dataForMedicenDispencing.get("hospital");
					StoreIssueM issueM=(StoreIssueM)dataForMedicenDispencing.get("issueM");
					String medicineDispencingData = generateStringForMedicenDispence(dataForMedicenDispencing);
			  	  	System.out.println("Medicine Dispencing Data For Lean Server "+medicineDispencingData); 
			  	  	System.out.println("Start String");  
			  	  	HibernateTemplate hbt = getHibernateTemplate();
					hbt.setFlushModeName("FLUSH_EAGER");
					hbt.setCheckWriteOperations(false);
			  	  	CentralServerMedicineDispenseData centralServerMedicineDispenseData=new CentralServerMedicineDispenseData();
			  	  	centralServerMedicineDispenseData.setMedicineDispenseData(medicineDispencingData); 
			  	  	centralServerMedicineDispenseData.setCentralMedicineDispenseId(Long.parseLong(issueM.getId().toString())); 
			  	  	//String dataNotSaveToCentralServer="Y"; // commented by amit das on 09-08-2016
			  	    String dataNotSaveToCentralServer="N"; // added by amit das on 09-08-2016
			  	  	centralServerMedicineDispenseData.setStatus(dataNotSaveToCentralServer);
			  	  	centralServerMedicineDispenseData.setHospitalId(Long.parseLong(hospital.getId()+""));
			  	  	hbt.save(centralServerMedicineDispenseData);
			  	  	hbt.flush();
			  	  	hbt.clear(); 
			  	  	System.out.println("Done"); 
				 return "success";
        	}catch(Exception e){
                e.printStackTrace();
                return "failure";
        	}
        
}

	private String generateStringForMedicenDispence(
			Map<String, Object> dataForMedicenDispencing) {
		StoreIssueM issueM=(StoreIssueM)dataForMedicenDispencing.get("issueM");
		//PatientPrescriptionHeader patPrescriptionHeader=(PatientPrescriptionHeader)dataForMedicenDispencing.get("patPrescriptionHeader");
		BlDispensingHeader dispensingHeader=(BlDispensingHeader)dataForMedicenDispencing.get("dispensingHeader");
		// PatientPrescriptionDetails patPrescriptionDetails =(PatientPrescriptionDetails)dataForMedicenDispencing.get("patPrescriptionDetails"); // commented by amit das on 06-12-2016
		// List<PatientPrescriptionHeader> patPrescriptionHeader = (List<PatientPrescriptionHeader>)dataForMedicenDispencing.get("patPrescriptionHeader"); // commented by amit das on 23-12-2016
		Map<Integer, PatientPrescriptionHeader> patientPrescriptionHeaderMap =   (Map<Integer, PatientPrescriptionHeader>)dataForMedicenDispencing.get("patPrescriptionHeader"); // added by amit das on 23-12-2016
		
		List<PatientPrescriptionDetails> patPrescriptionDetails =(List<PatientPrescriptionDetails>)dataForMedicenDispencing.get("patPrescriptionDetails"); // added by amit das on 06-12-2016
		List<StoreIssueT> storeIssueTForServerList=(List<StoreIssueT>)dataForMedicenDispencing.get("storeIssueTForServerList");
		List<StoreItemBatchStock> storeItemBatchStockList=(List<StoreItemBatchStock>)dataForMedicenDispencing.get("storeItemBatchStockList");
		List<BlDispensingDetails> blDispensingDetailsList=(List<BlDispensingDetails>)dataForMedicenDispencing.get("blDispensingDetailsList");
		// List<PatientPrescriptionDetails> patientPrescriptionDetailsList=(List<PatientPrescriptionDetails>)dataForMedicenDispencing.get("patientPrescriptionDetailsList"); // commented by amit das on 11-08-2016
		
		
		int itemId = 0; // added by amit das on 11-08-2016
		
		
    	DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy"); // added by amit das on 27-06-2016
		
		 
				StringBuilder builder=new StringBuilder(); 
				if(issueM!=null){ 
					builder.append(issueM.getIssueType()).append(" |"); 
					builder.append(issueM.getIssueNo()).append(" |");  
				//	builder.append(issueM.getIssueDate()).append(" |"); //commented by amit das on 27-07-2016
					builder.append(formatter.format(issueM.getIssueDate())).append(" |"); //commented by amit das on 27-07-2016
					if(issueM.getDepartment()!=null){
						builder.append(issueM.getDepartment().getId()).append(" |");
					}else{
						builder.append(" |");
					}  
					builder.append(issueM.getStatus()).append(" |");
					if(issueM.getHospital()!=null){
						builder.append(issueM.getHospital().getId()).append(" |");
					}else{
						builder.append(" |");
					}
					if(issueM.getLastChgBy()!=null){
						builder.append(issueM.getLastChgBy().getId()).append(" |");
					}else{
						builder.append(" |");
					} 
				//	builder.append(issueM.getLastChgDate()+" |"); // commented by amit das on 27-07-2016
					builder.append(formatter.format(issueM.getLastChgDate())).append(" |"); //commented by amit das on 27-07-2016
					builder.append(issueM.getLastChgTime()+" |"); 
					if(issueM.getHin()!=null){
						// builder.append(issueM.getHin().getId()).append(" |"); // commented by amit das on 11-08-2016
						builder.append(issueM.getHin().getHinNo()).append(" |"); // added by amit das on 11-08-2016
					}else{
						builder.append(" |");
					} 
				}
				builder.append(" #");
				System.out.println("issueM Data =========\n "+builder.toString());
		        
				// if(patPrescriptionHeader!=null && patPrescriptionHeader.size()>0){ // commented by amit das on 23-12-2016
				if(patientPrescriptionHeaderMap!=null && patientPrescriptionHeaderMap.size()>0){
					int i =1;
		        	//for(Entry<Integer, PatientPrescriptionHeader> patientPrescriptionHeaderEntry : patientPrescriptionHeaderMap.entrySet()){
					
					Iterator<Integer> itr = patientPrescriptionHeaderMap.keySet().iterator();
			        while (itr.hasNext()) {
		        		System.out.println(" patientPrescriptionHeaderEntry = "+i++);
		        	// PatientPrescriptionHeader patientPrescriptionHeader = patientPrescriptionHeaderEntry.getValue(); // added by amit das on 23-12-2016
		        		
		        		PatientPrescriptionHeader patientPrescriptionHeader = patientPrescriptionHeaderMap.get(itr.next());
		        	
		        	builder.append(patientPrescriptionHeader.getIssuedStatus()).append(" |");  
		        //	builder.append(patPrescriptionHeader.getPrescriptionDate()).append(" |"); // commented by amit das on 27-07-2016
		        	builder.append(formatter.format(patientPrescriptionHeader.getPrescriptionDate())).append(" |"); // added by amit das on 27-07-2016
		        	
		        	if(patientPrescriptionHeader.getDepartment()!=null){
		        		builder.append(patientPrescriptionHeader.getDepartment().getId()).append(" |");
					}else{
						builder.append(" |");
					}
		        	System.out.println("patientPrescriptionHeader.getHin().getHinNo() = "+patientPrescriptionHeader.getHin().getHinNo());
		        	System.out.println("patientPrescriptionHeader.getVisit().getVisitNo() = "+patientPrescriptionHeader.getVisit().getVisitNo());
		        	builder.append(patientPrescriptionHeader.getHin().getHinNo()).append(" |"); // added by amit das on 08-12-2016
		        	builder.append(patientPrescriptionHeader.getVisit().getVisitNo()).append(" |");  // added by amit das on 08-12-2016
		        	builder.append(patientPrescriptionHeader.getHospital().getId()).append(" |");  // added by amit das on 06-01-2017
		        	builder.append(formatter.format(patientPrescriptionHeader.getDispencingDate())).append(" |"); // added by amit das on 13-01-2017
		        	builder.append("$"); 
		        	}
		        }
		        builder.append(" #");
		        System.out.println("patPrescriptionHeader Data =========\n "+builder.toString());
		        if(dispensingHeader!=null){ 
		        	builder.append(dispensingHeader.getBillNo()).append(" |");
		        	if(dispensingHeader.getHospital()!=null){
						builder.append(dispensingHeader.getHospital().getId()).append(" |");
					}else{
						builder.append(" |");
					} 
		        	/*if(dispensingHeader.getHin()!=null){
						builder.append(dispensingHeader.getHin().getId()).append(" |");
					}else{
						builder.append(" |");
					} */
		        	// commented by amit das on 11-08-2016
		        	
		        	builder.append(dispensingHeader.getPatientStatus()).append(" |"); 
		        	builder.append(dispensingHeader.getHinNo()).append(" |");
		        	builder.append(dispensingHeader.getPatientName()).append(" |");
		        	builder.append(dispensingHeader.getAge()).append(" |");
		        	if(dispensingHeader.getSex()!=null){
						builder.append(dispensingHeader.getSex().getId()).append(" |");
					}else{
						builder.append(" |");
					} 
		        	builder.append(dispensingHeader.getConsultantName()).append(" |");
		        	builder.append(dispensingHeader.getRoundOff()).append(" |");
		        	builder.append(dispensingHeader.getNetAmt()).append(" |");
		        	builder.append(dispensingHeader.getAdvAdjustment()).append(" |");
		        	builder.append(dispensingHeader.getOutstanding()).append(" |");
		        	builder.append(dispensingHeader.getDiscountOnBill()).append(" |"); 
		        	builder.append(dispensingHeader.getPayableAmt()).append(" |"); 
		        	builder.append(dispensingHeader.getActualCollectedAmt()).append(" |"); 
		        	builder.append(dispensingHeader.getDiscount()).append(" |"); 
		        	builder.append(dispensingHeader.getCharity()).append(" |"); 
		        	// builder.append(dispensingHeader.getBillDate()).append(" |");  // commented  by amit das on 28-07-2016
		        	builder.append(formatter.format(dispensingHeader.getBillDate())).append(" |"); // added by amit das on 28-07-2016
		        	
		        	builder.append(dispensingHeader.getBillTime()).append(" |"); 
		        	if(dispensingHeader.getChangedBy()!=null){
						builder.append(dispensingHeader.getChangedBy().getId()).append(" |");
					}else{
						builder.append(" |");
					}
		        	builder.append(dispensingHeader.getStatus()).append(" |"); 
		        	builder.append(dispensingHeader.getBillAmt()).append(" |"); 
		        	builder.append(dispensingHeader.getDiscountAmt()).append(" |"); 
		        }
		        builder.append(" #");	 
		        System.out.println("dispensingHeader Data =========\n "+builder.toString());

		        if(storeIssueTForServerList!=null && storeIssueTForServerList.size()>0){
		        	for(StoreIssueT storeIssueT:storeIssueTForServerList){  
		        		builder.append(storeIssueT.getBatchNo()).append(" |");  
		        		if(storeIssueT.getItem()!=null){
		        			itemId = storeIssueT.getItem().getId();
							builder.append(storeIssueT.getItem().getId()).append(" |");
						}else{
							builder.append(" |");
						}
		        		/*if(storeIssueT.getStock()!=null){
							builder.append(storeIssueT.getStock().getId()).append(" |");
						}else{
							builder.append(" |");
						}*/ // commented by amit  das on 12-08-2016
		        		builder.append(storeIssueT.getQtyRequest()).append(" |");  
		        		builder.append(storeIssueT.getQtyIssued()).append(" |"); 
		        		builder.append(storeIssueT.getRemarks()+" |");
		        		//builder.append(storeIssueT.getExpiryDate()+" |");  // commented by amit das on 27-07-2016
		        		builder.append(formatter.format(storeIssueT.getExpiryDate())+" |");   // added by amit das on 27-07-2016
		        		builder.append(storeIssueT.getCostPrice()+" |");
		        		builder.append(storeIssueT.getSrNo()+" |");
		        		builder.append(storeIssueT.getIssued()+" |"); 
		        		builder.append(storeIssueT.getItemReplacedToPharmacy()+" |"); 
		        		builder.append("$");
		        	} 
		        }
		        builder.append(" #");
		        System.out.println("storeIssueTForServerList Data =========\n "+builder.toString());
		        if(storeItemBatchStockList!=null && storeItemBatchStockList.size()>0){
		        	for(StoreItemBatchStock batchStockObj:storeItemBatchStockList){  
		        		builder.append(batchStockObj.getBatchNo()).append(" |"); // added by amit das on 11-08-2016
		        		builder.append(batchStockObj.getDepartment().getId()).append(" |"); // added by amit das on 11-08-2016
		        		builder.append(batchStockObj.getHospital().getId()).append(" |"); // added by amit das on 11-08-2016
		        		builder.append(batchStockObj.getClosingStock()).append(" |");
		        		builder.append(batchStockObj.getIssueQty()).append(" |"); 
		        		builder.append(formatter.format(batchStockObj.getExpiryDate())).append(" |");  // added by amit das on 12-08-2016
		        		builder.append(batchStockObj.getItem().getPvmsNo()).append(" |"); // added by amit das on 13-01-2017
		        		builder.append("$");
		        	}
		        }
		        builder.append(" #");
		        System.out.println("storeItemBatchStockList Data =========\n "+builder.toString());
		        // if(patientPrescriptionDetailsList!=null && patientPrescriptionDetailsList.size()>0){
		         //	for(PatientPrescriptionDetails patPrescriptionDetails:patientPrescriptionDetailsList){   // commented by amit das on 11-08-2016
		       /* if(patPrescriptionDetails!=null){
		        		builder.append(patPrescriptionDetails.getDispensingPrice()).append(" |");  // added by amit das on 11-08-2016
		        		builder.append(patPrescriptionDetails.getTotalStoreIssuedQty()).append(" |"); 
		        		builder.append(patPrescriptionDetails.getCurStoreIssuedQty()).append(" |"); 
		        		builder.append(patPrescriptionDetails.getIssuedStatus()).append(" |"); 
		        		builder.append(formatter.format(patPrescriptionDetails.getPrescription().getPrescriptionDate())).append(" |");  // added by amit das on 12-08-2016
		        		builder.append(itemId).append(" |");   // added by amit das on 11-08-2016
		        		// builder.append("$"); // commented by amit das on 11-08-2016
		        	} */
		        // above is commented by amit das on 07-12-2016
		        // below is added by amit das on 07-12-2016
		        if(patPrescriptionDetails!=null && patPrescriptionDetails.size()>0){
		        	for(PatientPrescriptionDetails patientPrescriptionDetails:patPrescriptionDetails){  
		        		builder.append(patientPrescriptionDetails.getDispensingPrice()).append(" |");  
		        		builder.append(patientPrescriptionDetails.getTotalStoreIssuedQty()).append(" |"); 
		        		builder.append(patientPrescriptionDetails.getCurStoreIssuedQty()).append(" |"); 
		        		builder.append(patientPrescriptionDetails.getIssuedStatus()).append(" |"); 
		        		builder.append(formatter.format(patientPrescriptionDetails.getPrescription().getPrescriptionDate())).append(" |");  
		        		itemId = patientPrescriptionDetails.getItem().getId();
		        		builder.append(itemId).append(" |");   
		        		builder.append("$"); 
		        	}
		        }
		        // }
		        builder.append(" #");
		        System.out.println("patPrescriptionDetails Data =========\n "+builder.toString());

		        if(blDispensingDetailsList!=null && blDispensingDetailsList.size()>0){
		        	for(BlDispensingDetails dispensingDetails:blDispensingDetailsList){  
		        		 // added by amit das on 12-08-2016
		        		if(dispensingDetails.getBatch()!=null){
							builder.append(dispensingDetails.getBatch().getBatchNo()).append(" |");
						}else{
							builder.append(" |");
						} 
		        		if(dispensingDetails.getItem()!=null){
							builder.append(dispensingDetails.getItem().getId()).append(" |");
						}else{
							builder.append(" |");
						}
		        		builder.append(dispensingDetails.getQty()).append(" |"); 
		        		builder.append(dispensingDetails.getAmount()).append(" |"); 
		        		builder.append(dispensingDetails.getDiscountPercent()).append(" |"); 
		        		builder.append(dispensingDetails.getDiscountAmt()).append(" |"); 
		        		builder.append(dispensingDetails.getProportionalDisAmt()).append(" |"); 
		        		builder.append(dispensingDetails.getSalesTaxAmt()).append(" |"); 
		        		builder.append(dispensingDetails.getNetAmt()).append(" |"); 
		        		builder.append(dispensingDetails.getRefundableStatus()).append(" |"); 
		        		builder.append(dispensingDetails.getIssued()).append(" |");  
		        		builder.append("$");
		        	} 
		        }
		        builder.append(" #");   
		        System.out.println("blDispensingDetailsList Data =========\n "+builder.toString());
		        String medicineDispencingData=builder.toString();
		return medicineDispencingData;
	}

	@Override
	public Map<String, Object> medicineDispencingToServer(Box box) {
		Map<String,Object> map=new HashMap<String,Object>();
		//String message="A | | |#955 |1 |0 |0 |0 |null |0.0 |17:30 |Sun Feb 28 00:00:00 IST 2016 |Sun Feb 28 00:00:00 IST 2016 |17:30 |0.0 | |null | | |All System NAD | | |#6 |1 |17:31 |432 |y |Sun Feb 28 00:00:00 IST 2016 | | | | | |IP |#703014 |Sun Feb 28 00:00:00 IST 2016 |17:31 |y |p |1 |#6 |1 |p |Sun Feb 28 00:00:00 IST 2016 |17:30 |955 |Sun Feb 28 00:00:00 IST 2016 |17:30 |5 |#6 |1 |p |Sun Feb 28 00:00:00 IST 2016 |17:30 |955 |#Sun Feb 28 00:00:00 IST 2016 |17:30 |1 |6 |955 |IP |Regular |164/2016 |P |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |#46 |1 |Sun Feb 28 00:00:00 IST 2016 |17:30 |P |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |#12 |1 | |$738 |1 | |$#342 |2 |1.0 | |1 |IP | | |2.0 |n |p |$340 |1 |1.0 | |1 |IP | | |1.0 |n |p |$#12 |1 |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |P |17 |35 |n |n |n |$738 |1 |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |P |23 |119 |n |n |n |$#738 |955 |y |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |P |Sun Feb 28 17:31:40 IST 2016 |23 |119 |738 |Sun Feb 28 17:31:40 IST 2016 |$#1 |432 |17:31 |Sun Feb 28 00:00:00 IST 2016 |2 |1 | |n |$#Sun Feb 28 00:00:00 IST 2016 |17:31 |null |null |$#Temperature |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |2 |1 | |n |$Pulse |432 |Sun Feb 28 00:00:00 IST 2016 |17:31 |2 |1 | |n |$#Sun Feb 28 00:00:00 IST 2016 |17:31 |null |null |$Sun Feb 28 00:00:00 IST 2016 |17:31 |null |null |$#";
		//String message="A | |T0009119011600013 |6 | | #955 |1 |0 |0 |0 |null |0.0 |00:03 |Mon Feb 29 00:00:00 IST 2016 |Mon Feb 29 00:00:00 IST 2016 |00:03 |0.0 | |null | | |All System NAD | | | #6 |1 |00:04 |432 |y |Mon Feb 29 00:00:00 IST 2016 | | | | | |IP | #703014 |Mon Feb 29 00:00:00 IST 2016 |00:04 |y |p |1 | # # # # # # # # # # # # #";
		String message=box.get("message");
		int hospitalId=box.getInt("hospitalId");
		message=message.replace("null", " ");
		int itemId = 0;
		boolean isIssueMSaved = false;
		boolean isPatientPrescriptionDetailsSaved = false;
		boolean isPatientPrescriptionHeaderSaved = false;
		boolean isStoreItemBatchStockSaved = false;
		boolean isIssueTSaved = false;
		boolean isBlDispensingHeaderSaved = false;
		boolean isBlDispensingDetailSaved = false;
		
		Session session=(Session)getSession();
		Transaction tx = null;
		boolean cancelled=false;
		try{
			tx=session.beginTransaction();
		
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_AUTO");
		hbt.setCheckWriteOperations(false);
		String array[]=message.split("#");
		for(int i=0;i<array.length;i++){ 
			System.out.println(array[i]);
		}
		int index=0;
		String issueMData=array[index++];//0
		String patPrescriptionHeaderData=array[index++];//1
		String dispensingHeaderData=array[index++];//2
		String storeIssueTForServerListData=array[index++];//3
		String storeItemBatchStockListData=array[index++];//4
		String patientPrescriptionDetailsListData=array[index++];//5
		String blDispensingDetailsListData=array[index++];//6 
		
		String issueMDataArray[]=issueMData.trim().split("\\|"); 
	// 	String patPrescriptionHeaderDataArray[]=patPrescriptionHeaderData.trim().split("\\|");  // commented by amit das on 07-12-2016
		String patPrescriptionHeaderDataArray[] = patPrescriptionHeaderData.trim().split("\\$"); // added by amit das on 07-12-2016
	//	String patientPrescriptionDetailsListDataArray[] = patientPrescriptionDetailsListData.trim().split("\\|"); // added by amit das on 11-08-2016
		// commented by amit das on 07-12-2016
		String patientPrescriptionDetailsListDataArray[] = patientPrescriptionDetailsListData.trim().split("\\$"); // added by amit das on 07-12-2016
		String dispensingHeaderDataArray[]=dispensingHeaderData.trim().split("\\|");
		String storeIssueTForServerListDataArray[] = storeIssueTForServerListData.trim().split("\\$");
		String storeItemBatchStockListDataArray[]=storeItemBatchStockListData.split("\\$");
		String blDispensingDetailsListDataArray[]=blDispensingDetailsListData.split("\\$"); 
		
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList = null; //added by amit das on 18-10-2016
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = null; //added by amit das on 18-10-2016
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList1 = null; //added by amit das on 18-10-2016
		List<StoreIssueT> storeIssueTList = null; //added by amit das on 18-10-2016
		
		System.out.println("issueMData = "+issueMData);
		StoreIssueM storeIssueM = saveStoreIssueM(issueMDataArray);
		
		
		if(storeIssueM.getHin()!=null) {
		//*************************PatientPrescriptionDetails obj list*********************
		System.out.println("patientPrescriptionDetailsData = "+patientPrescriptionDetailsListData);
		//String patientPrescriptionDetailsListDataArray[]=patientPrescriptionDetailsListData.split("\\$"); // commented by amit das on 11-08-2016
		patientPrescriptionDetailsList = savePatientPrescriptionDetailsList(patientPrescriptionDetailsListDataArray, storeIssueM.getHin());
		if(patientPrescriptionDetailsList!=null && patientPrescriptionDetailsList.size()==patientPrescriptionDetailsListDataArray.length){
			// hbt.update(patientPrescriptionDetails); // added by amit das on 11-08-2016
			for(PatientPrescriptionDetails details : patientPrescriptionDetailsList)
				hbt.update(details);
				
			isPatientPrescriptionDetailsSaved = true;	
		}
			

		//***********************PatientPrescriptionHeader patient****************************
		System.out.println("patPrescriptionHeaderData = "+patPrescriptionHeaderData);
		//patientPrescriptionDetailsList1 =	session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "pph").add(Restrictions.eq("IssuedStatus", "y").ignoreCase()).list();
				
		if(patientPrescriptionDetailsList!=null && patientPrescriptionDetailsList.size()>0){
			//patientPrescriptionHeader  = (PatientPrescriptionHeader)session.get(PatientPrescriptionHeader.class, patientPrescriptionDetailsList.get(0).getPrescription().getId());
			patientPrescriptionHeaderList = savePatientPrescriptionHeader(patPrescriptionHeaderDataArray);
			if(patientPrescriptionHeaderList!=null && patientPrescriptionHeaderList.size()>0){
				for(PatientPrescriptionHeader prescriptionHeader : patientPrescriptionHeaderList){
					hbt.update(prescriptionHeader); // added by amit das on 11-08-2016
				}
				isPatientPrescriptionHeaderSaved = true;
			}
		}
		
		
		//***********************StoreIssueM data****************************
		if(patientPrescriptionHeaderList!=null){
		patientPrescriptionDetailsList1 =	session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.in("Prescription", patientPrescriptionHeaderList))
			.add(Restrictions.eq("IssuedStatus", "y").ignoreCase()).list();
		if(storeIssueM!=null && patientPrescriptionDetailsList1.size()==0){
			hbt.save(storeIssueM); // added by amit das on 11-08-2016
			isIssueMSaved = true;
		} else if(patientPrescriptionDetailsList1.size()>0) {  // added by amit das on 11-08-2016
			storeIssueTList =	session.createCriteria(StoreIssueT.class).createAlias("Prescription", "ppd").add(Restrictions.eq("ppd.Id", patientPrescriptionDetailsList1.get(0).getId())).list();
					
			storeIssueM = storeIssueTList.get(0).getIssueM(); 
			isIssueMSaved = true;
		}
		}		
		
		
		//******************************StoreItemBatchStock******************************************************
		System.out.println("StoreItemBatchStockData = "+storeItemBatchStockListData);
		List<StoreItemBatchStock> storeItemBatchStock=saveStoreItemBatchStockList(storeItemBatchStockListDataArray);
		if(storeItemBatchStock!=null && storeItemBatchStock.size()>0){
			for(StoreItemBatchStock itemBatchStock : storeItemBatchStock){
				hbt.update(itemBatchStock);
			}
			isStoreItemBatchStockSaved = true;	
		}
				

		//*************************StoreIssueT obj list*********************
		System.out.println("storeIssueTsData = "+storeIssueTForServerListData);
		if( patientPrescriptionHeaderList!=null ){
		//for(PatientPrescriptionHeader patientPrescriptionHeader : patientPrescriptionHeaderList){	
		List<StoreIssueT> storeIssueTs=saveStoreIssueTList(storeIssueM, storeItemBatchStock, 
				patientPrescriptionDetailsList, storeIssueTForServerListDataArray);
		
		if(storeIssueTs!=null && storeIssueTs.size()>0){
			for(StoreIssueT storeIssueT : storeIssueTs){
				hbt.save(storeIssueT);
			}
			isIssueTSaved = true;	
		  }
		// }
		}
		// commented by amit das on 11-08-2016
		/*Criteria criteria=session.createCriteria(PatientPrescriptionHeader.class)
						.add(Restrictions.eq("Hin.Id", patientPrescriptionHeader.getHin().getId()))
						.add(Restrictions.eq("Department.Id", patientPrescriptionHeader.getDepartment().getId()))
						.add(Restrictions.eq("Hospital.Id", patientPrescriptionHeader.getHospital().getId()))
						.add(Restrictions.eq("PrescriptionDate", patientPrescriptionHeader.getPrescriptionDate()));
		
		List<PatientPrescriptionHeader> patientPrescriptionHeadersList=criteria.list();
		PatientPrescriptionHeader patientPrescriptionHeaderFromServer=null;
		if(patientPrescriptionHeadersList!=null && patientPrescriptionHeadersList.size()>0){
			 patientPrescriptionHeaderFromServer=patientPrescriptionHeadersList.get(0);
		}*/
		
		
		
		//************************BlDispensingHeader*************************
		System.out.println("BlDispensingHeaderData = "+dispensingHeaderData);
		BlDispensingHeader blDispensingHeader=saveBlDispensingHeader(dispensingHeaderDataArray); 
		if(blDispensingHeader!=null){
			hbt.save(blDispensingHeader);
			isBlDispensingHeaderSaved = true;
		}
		
		
		//*************************BlDispensingDetails list*********************
		System.out.println("BlDispensingDetailsData = "+blDispensingDetailsListData);
		if(blDispensingHeader!=null){
		List<BlDispensingDetails> blDispensingDetails = saveBlDispensingDetailsList(blDispensingHeader,storeItemBatchStock, blDispensingDetailsListDataArray);
		if(blDispensingDetails!=null && blDispensingDetails.size()>0){
			for(BlDispensingDetails blDetails : blDispensingDetails){
				hbt.save(blDetails);
			}
			isBlDispensingDetailSaved = true;	
		  }
		}
		
		/*if(inpatientPrescriptionDetailsListObjectDataArray.length>0){
		List<InpatientPrescriptionDetails> inpatientPrescriptionDetailsList= saveInpatientPrescriptionDetailsList(
						inpatientPrescriptionHeader,
						inpatientPrescriptionDetailsListObjectDataArray);
				
				 for(InpatientPrescriptionDetails details:inpatientPrescriptionDetailsList){
					 hbt.save(details);
		}}*/    
		hbt.flush();
		hbt.clear(); 
		tx.commit();
		}
		
		if(isIssueMSaved && isIssueTSaved && isPatientPrescriptionHeaderSaved && isPatientPrescriptionDetailsSaved && isStoreItemBatchStockSaved && isBlDispensingHeaderSaved && isBlDispensingDetailSaved)
			map.put("success", "success");
		else
			map.put("failure", "failure");
		
		} 
		catch(Exception e){
			e.printStackTrace();
			if(tx!=null){
				tx.rollback();
				map.put("failure", "failure");
			}
		}
		return map;
	}
	
	
	
	private StoreIssueM saveStoreIssueM(String[] issueMDataArray) {
		int index;
		Session session = null; // added by amit das on 11-08-2016
		StoreIssueM storeIssueM=new StoreIssueM();
		index=0;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			storeIssueM.setIssueType(issueMDataArray[index].trim());
		}
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){ 
			storeIssueM.setIssueNo(issueMDataArray[index]);
		}
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			storeIssueM.setIssueDate(HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(issueMDataArray[index].trim()));
		}
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			MasDepartment department=new MasDepartment(Integer.parseInt(issueMDataArray[index].trim()));
			storeIssueM.setDepartment(department);
		}
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			storeIssueM.setStatus(issueMDataArray[index].trim());
		} 
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			MasHospital hospital=new MasHospital(Integer.parseInt(issueMDataArray[index].trim()));
			storeIssueM.setHospital(hospital);
		} 
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			Users users=new Users(Integer.parseInt(issueMDataArray[index].trim()));
			storeIssueM.setLastChgBy(users); 
		} 
		index++;
		/*if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			storeIssueM.setStatus(issueMDataArray[index].trim());
		} 
		index++;*/
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			storeIssueM.setLastChgDate(HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(issueMDataArray[index].trim()));
		} 
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			storeIssueM.setLastChgTime(issueMDataArray[index].trim());
		} 
		index++;
		if(issueMDataArray[index]!=null && !"".equals(issueMDataArray[index].trim())){
			// added by amit das on 11-08-2016
			session = getSession();
			List<Patient> patientList	=  session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", issueMDataArray[index].trim())).list();
			if(patientList!=null && patientList.size()>0){
			storeIssueM.setHin(patientList.get(0));
			}
			// ended by amit das on 11-08-2016
		} 
		return storeIssueM;
	}
	
	private List<PatientPrescriptionHeader> savePatientPrescriptionHeader(String[] patPrescriptionHeaderDataArray) {
		int index= 0;
		String issuedStatus = null;
		Date prescriptionDate = null;
		Date dispencingDate = null;
		MasDepartment department = null;
		int departmentId = 0; // added by amit das on 10-01-2016
		String hinNo = null;
		int visitNo = 0;
		int hospitalId = 0; // added by amit das on 07-01-2016
		PatientPrescriptionHeader patientPrescriptionHeader =null;
		List<PatientPrescriptionHeader> headers = null;
		List<PatientPrescriptionHeader> patientPrescriptionHeaderList = new ArrayList<PatientPrescriptionHeader>();
		Session session = getSession();
		
		for(int i=0; i<patPrescriptionHeaderDataArray.length ; i++) { // added by amit das on 08-12-2016
			String patientPrescriptionHeaderArray[]=patPrescriptionHeaderDataArray[i].split("\\|");
		index= 0;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){
			issuedStatus = patientPrescriptionHeaderArray[index].trim();
		}
		index++;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){ 
			prescriptionDate = HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(patientPrescriptionHeaderArray[index].trim());
		}
		index++;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){
			departmentId = Integer.parseInt(patientPrescriptionHeaderArray[index].trim()); // added by amit das on 10-01-2016
			department=new MasDepartment(departmentId);
		} 
		// added by amit das on 08-12-2016
		index++;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){ 
			hinNo = patientPrescriptionHeaderArray[index].trim();
		} 
		// added by amit das on 08-12-2016
		index++;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){ 
			visitNo = Integer.parseInt(patientPrescriptionHeaderArray[index].trim());
		} 
		
		// added by amit das on 07-01-2016
		index++;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){ 
			hospitalId = Integer.parseInt(patientPrescriptionHeaderArray[index].trim());
		}
		
		// added by amit das on 13-01-2016
		index++;
		if(patientPrescriptionHeaderArray[index]!=null && !"".equals(patientPrescriptionHeaderArray[index].trim())){ 
			dispencingDate = HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(patientPrescriptionHeaderArray[index].trim());
		} 
		
		if(hinNo!=null && visitNo!=0){
			/*headers = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "v").createAlias("Hin", "h").add(Restrictions.eq("v.VisitNo", visitNo))
										.add(Restrictions.eq("h.HinNo", hinNo)).list();*/

			headers = session.createCriteria(PatientPrescriptionHeader.class).createAlias("Visit", "v").createAlias("Hin", "h")
					.createAlias("Hospital", "hosp")
					.createAlias("Department", "d") // added by amit das on 10-01-2016
					.add(Restrictions.eq("v.VisitNo", visitNo))
					.add(Restrictions.eq("h.HinNo", hinNo))
					.add(Restrictions.eq("hosp.Id", hospitalId))
					.add(Restrictions.eq("d.Id", departmentId)) // added by amit das on 10-01-2016
					.list();
			if(headers!=null && headers.size()>0){
				patientPrescriptionHeader = headers.get(0);
				patientPrescriptionHeader.setIssuedStatus(issuedStatus);
				//patientPrescriptionHeader.setPrescriptionDate(prescriptionDate); //commented by amit das on 07-01-2016
				//patientPrescriptionHeader.setDepartment(department); //commented by amit das on 07-01-2016
				patientPrescriptionHeader.setDispencingDate(dispencingDate); //added by amit das on 07-01-2016
				patientPrescriptionHeaderList.add(patientPrescriptionHeader);
			}
		}
		
		
		}
		
		return patientPrescriptionHeaderList;
	}
	
	private BlDispensingHeader saveBlDispensingHeader(String[] blDispensingHeaderDataArray) {
		int index;
		Session session = null;
		BlDispensingHeader blDispensingHeader=new BlDispensingHeader();
		index=0;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){
			blDispensingHeader.setBillNo(blDispensingHeaderDataArray[index].trim());
		}
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			MasHospital  hospital=new MasHospital(Integer.parseInt(blDispensingHeaderDataArray[index].trim()));
			blDispensingHeader.setHospital(hospital);
		}
		index++;
		/*if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){
			Patient patient=new Patient(Integer.parseInt(blDispensingHeaderDataArray[index].trim()));
			blDispensingHeader.setHin(patient);
		} 
		index++;
		*/ // commented by amit das on 11-08-2016
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setPatientStatus(blDispensingHeaderDataArray[index].trim());
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setHinNo(blDispensingHeaderDataArray[index].trim());
			session = getSession();
			List<Patient> patientlist =  session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", blDispensingHeader.getHinNo())).list();
			if(patientlist!=null && patientlist.size()>0){
				blDispensingHeader.setHin(patientlist.get(0));
			}
			
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setPatientName(blDispensingHeaderDataArray[index].trim());
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setAge(blDispensingHeaderDataArray[index].trim());
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){
			MasAdministrativeSex masAdministrativeSex=new MasAdministrativeSex(Integer.parseInt(blDispensingHeaderDataArray[index].trim()));
			blDispensingHeader.setSex(masAdministrativeSex);
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setConsultantName(blDispensingHeaderDataArray[index].trim());
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setRoundOff(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setNetAmt(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){
			MasDepartment department=new MasDepartment(Integer.parseInt(blDispensingHeaderDataArray[index].trim()));
			blDispensingHeader.setAdvAdjustment(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setOutstanding(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setDiscountOnBill(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setPayableAmt(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setActualCollectedAmt(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setDiscount(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setCharity(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setBillDate(HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setBillTime(blDispensingHeaderDataArray[index].trim());
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){
			Users users=new Users(Integer.parseInt(blDispensingHeaderDataArray[index].trim()));
			blDispensingHeader.setChangedBy(users);
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setStatus(blDispensingHeaderDataArray[index].trim());
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setBillAmt(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		index++;
		if(blDispensingHeaderDataArray[index]!=null && !"".equals(blDispensingHeaderDataArray[index].trim())){ 
			blDispensingHeader.setDiscountAmt(new BigDecimal(blDispensingHeaderDataArray[index].trim()));
		} 
		 
		return blDispensingHeader;
	}
	
	private List<StoreIssueT> saveStoreIssueTList(
			StoreIssueM storeIssueM,List<StoreItemBatchStock> storeItemBatchStockList,List<PatientPrescriptionDetails> prescriptionDetails,
			String[] storeIssueTForServerListDataArray) {
		int index;
		List<StoreIssueT> storeIssueTList=new ArrayList<StoreIssueT>();
		for(int i=0;i<storeIssueTForServerListDataArray.length;i++){
			String storeIssueTArray[]=storeIssueTForServerListDataArray[i].split("\\|");
			if(storeIssueTArray.length>1){ 
				StoreIssueT storeIssueT=new StoreIssueT();  
				storeIssueT.setIssueM(storeIssueM); 
				storeIssueT.setVisit(prescriptionDetails.get(i).getPrescription().getVisit());
				// storeIssueT.setPrescription(prescriptionDetails); // commented by amit das on 07-12-2016
				storeIssueT.setPrescription(prescriptionDetails.get(i)); // added by amit das on 07-12-2016
			index=0;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){ 
				for(StoreItemBatchStock storeItemBatchStock : storeItemBatchStockList){
					if(storeItemBatchStock.getBatchNo().equals(storeIssueTArray[index].trim())){
						storeIssueT.setBatchNo(storeIssueTArray[index].trim());
						storeIssueT.setStock(storeItemBatchStock);
						break;
					}
				}
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){
				MasStoreItem masStoreItem=new MasStoreItem(Integer.parseInt(storeIssueTArray[index].trim()));
				storeIssueT.setItem(masStoreItem);
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){
				storeIssueT.setQtyRequest(new BigDecimal(storeIssueTArray[index].trim()));
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){ 
				storeIssueT.setQtyIssued(new BigDecimal(storeIssueTArray[index].trim()));
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){
				storeIssueT.setRemarks(storeIssueTArray[index].trim());
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){
				storeIssueT.setExpiryDate(HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(storeIssueTArray[index].trim()));
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){
				storeIssueT.setCostPrice(new BigDecimal(storeIssueTArray[index].trim()));
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){ 
				storeIssueT.setSrNo(Integer.parseInt(storeIssueTArray[index].trim()));
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){ 
				storeIssueT.setIssued(storeIssueTArray[index].trim());
			}
			index++;
			if(storeIssueTArray[index]!=null && !"".equals(storeIssueTArray[index].trim())){
				storeIssueT.setItemReplacedToPharmacy(storeIssueTArray[index].trim());
			} 
			storeIssueTList.add(storeIssueT);
		}
		}
		return storeIssueTList;
	}
	
	private List<StoreItemBatchStock> saveStoreItemBatchStockList( 
			String[] storeItemBatchStockListDataArray) {
		int index;
		Session session = null;
		String batchNo = null;
		int departmentId = 0;
		int hospitalId = 0;
		BigDecimal closingStock = null;
		BigDecimal issueQty = null;
		String pvmsNo = null;
		Date expiryDate = null;
		StoreItemBatchStock storeItemBatchStock = null; //added by amit das on 26-10-2016
		List<StoreItemBatchStock> itemBatchStocks = null;
		List<StoreItemBatchStock> storeItemBatchStockList=new ArrayList<StoreItemBatchStock>();	
		session = getSession();
		
		for(int i=0;i<storeItemBatchStockListDataArray.length;i++){
			String storeItemBatchStockArray[]=storeItemBatchStockListDataArray[i].split("\\|");
			if(storeItemBatchStockArray.length>1){  
			index=0;
			// condition added by amit das on 11-08-2016
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){ 
				batchNo = storeItemBatchStockArray[index].trim();
			}
			index++;
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){
				departmentId = Integer.parseInt(storeItemBatchStockArray[index].trim());
			}
			index++;
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){
				hospitalId = Integer.parseInt(storeItemBatchStockArray[index].trim());
			}
			index++;
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){ 
				closingStock = new BigDecimal(storeItemBatchStockArray[index].trim());
			}
			index++;
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){ 
				issueQty = new BigDecimal(storeItemBatchStockArray[index].trim());
			}
			// added by amit das on 12-08-2016
			index++;
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){ 
				expiryDate = HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(storeItemBatchStockArray[index].trim());
			}
			
			// added by amit das on 12-08-2016
			index++;
			if(storeItemBatchStockArray[index]!=null && !"".equals(storeItemBatchStockArray[index].trim())){ 
				pvmsNo = storeItemBatchStockArray[index].trim();
			}
			
			// added by amit das on 12-08-2016
			itemBatchStocks = session.createCriteria(StoreItemBatchStock.class).createAlias("Hospital", "h")
					.createAlias("Department", "d").createAlias("Item", "i") 
					.add(Restrictions.eq("i.PvmsNo", pvmsNo))
					.add(Restrictions.eq("BatchNo", batchNo)).add(Restrictions.eq("d.Id", departmentId))
					.add(Restrictions.eq("h.Id", hospitalId)).add(Restrictions.eq("ExpiryDate", expiryDate)).list();
			
			// itemBatchStocks = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("BatchNo", storeItemBatchStock.getBatchNo())).add(Restrictions.eq("BatchNo", storeItemBatchStock.getBatchNo())).add(Restrictions.eq("Department", storeItemBatchStock.getDepartment())).add(Restrictions.eq("Hospital", storeItemBatchStock.getHospital())).list();
			if(itemBatchStocks!=null && itemBatchStocks.size()>0){
				// added by amit das on 26-10-2016
				storeItemBatchStock = itemBatchStocks.get(0);
				storeItemBatchStock.setClosingStock(closingStock);
				storeItemBatchStock.setIssueQty(issueQty);
				storeItemBatchStockList.add(storeItemBatchStock);
			}
			
			}
		}
		return storeItemBatchStockList;
	}
	
	private List<PatientPrescriptionDetails> savePatientPrescriptionDetailsList( 
			String[] patientPrescriptionDetailsListDataArray, Patient patient) {
		int index;
		int itemId=0;
		float dispensingPrice=0.0f;
		float totalStoreIssuedQty=0.0f;
		float curStoreIssuedQty=0.0f;
		String issuedStatus=null;
		Date prescriptionDate = null;
		//PatientPrescriptionDetails prescriptionDetails = null;
		Session session = null; // added by amit das on 11-08-2016
		List<PatientPrescriptionDetails> patientPrescriptionDetails=new ArrayList<PatientPrescriptionDetails>();  // added by amit das on 11-08-2016
		// List<PatientPrescriptionDetails> patientPrescriptionDetailsList=new ArrayList<PatientPrescriptionDetails>(); // commented by amit das on 11-08-2016
		// for(int i=0;i<patientPrescriptionDetailsListDataArray.length;i++){ // commented by amit das on 11-08-2016
		//	String patientPrescriptionDetailsArray[]=patientPrescriptionDetailsListDataArray[i].split("\\|"); // commented by amit das on 11-08-2016
		
		// if(patientPrescriptionDetailsListDataArray.length>0 && patient!=null){ 
			// added by amit das on 11-08-2016
		if(patient!=null){
			session = getSession();
			
				
				for(int i=0; i<patientPrescriptionDetailsListDataArray.length ; i++) {
					String patientPrescriptionDetailsArray[]=patientPrescriptionDetailsListDataArray[i].split("\\|");
					index=0;
				
				if(patientPrescriptionDetailsArray!=null && patientPrescriptionDetailsArray.length>1){
					
				if(patientPrescriptionDetailsArray[index]!=null && !"".equals(patientPrescriptionDetailsArray[index].trim())){ 
					dispensingPrice = Float.parseFloat(patientPrescriptionDetailsArray[index].trim()); 
				}
				index++;
				
				if(patientPrescriptionDetailsArray[index]!=null && !"".equals(patientPrescriptionDetailsArray[index].trim())){ 
					totalStoreIssuedQty = Float.parseFloat(patientPrescriptionDetailsArray[index].trim());
				}
				index++;
				if(patientPrescriptionDetailsArray[index]!=null && !"".equals(patientPrescriptionDetailsArray[index].trim())){ 
					curStoreIssuedQty = Float.parseFloat(patientPrescriptionDetailsArray[index].trim());
				} 
				index++;
				if(patientPrescriptionDetailsArray[index]!=null && !"".equals(patientPrescriptionDetailsArray[index].trim())){ 
					issuedStatus = patientPrescriptionDetailsArray[index].trim();
				} 
				index++;
				if(patientPrescriptionDetailsArray[index]!=null && !"".equals(patientPrescriptionDetailsArray[index].trim())){ 
					prescriptionDate = HMSUtil.getDateForm_E_MMM_dd_HH_mm_ss_Z_yyyy(patientPrescriptionDetailsArray[index].trim());
				} 
				index++;
				if(patientPrescriptionDetailsArray[index]!=null && !"".equals(patientPrescriptionDetailsArray[index].trim())){ 
					itemId = Integer.parseInt((patientPrescriptionDetailsArray[index].trim()));
				} 
				
				List<PatientPrescriptionDetails> patientPrescriptionDetailsList = session.createCriteria(PatientPrescriptionDetails.class).createAlias("Prescription", "p")
						  						.createAlias("Item", "i").add(Restrictions.eq("p.Hin", patient)).add(Restrictions.eq("i.Id", itemId)).add(Restrictions.eq("p.PrescriptionDate", prescriptionDate)).list();
								  
				if(patientPrescriptionDetailsList!=null && patientPrescriptionDetailsList.size()>0){
					PatientPrescriptionDetails	prescriptionDetails = new PatientPrescriptionDetails();
					prescriptionDetails = patientPrescriptionDetailsList.get(0);
					prescriptionDetails.setDispensingPrice(dispensingPrice);
					prescriptionDetails.setTotalStoreIssuedQty(totalStoreIssuedQty);
					prescriptionDetails.setCurStoreIssuedQty(curStoreIssuedQty);
					prescriptionDetails.setIssuedStatus(issuedStatus);
					// session.update(prescriptionDetails); // added by amit das on 07-12-2016
					patientPrescriptionDetails.add(prescriptionDetails); // added by amit das on 07-12-2016
					}
				 }
			}
			  	// ended by amit das on 11-08-2016
		}
			
		// }
		return patientPrescriptionDetails;
	}
	
	private List<BlDispensingDetails> saveBlDispensingDetailsList(BlDispensingHeader blDispensingHeader, List<StoreItemBatchStock> storeItemBatchStock, 
			String[] blDispensingDetailsListDataArray) {
		int index;
		List<BlDispensingDetails> blDispensingDetailsList=new ArrayList<BlDispensingDetails>();
		for(int i=0;i<blDispensingDetailsListDataArray.length;i++){
			String blDispensingDetailsArray[]=blDispensingDetailsListDataArray[i].split("\\|");
			if(blDispensingDetailsArray.length>1){ 
				index=0;
				BlDispensingDetails blDispensingDetails=new BlDispensingDetails(); 
			
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 

				for(StoreItemBatchStock stItemBatchStock : storeItemBatchStock){
					if(stItemBatchStock.getBatchNo().equalsIgnoreCase(blDispensingDetailsArray[index].trim())){
						blDispensingDetails.setBatch(stItemBatchStock);
						break;
					}
						
				}
				
			} 
			index++;	
				
				
			blDispensingDetails.setDispensingHeader(blDispensingHeader); // added by amit das on 12-08-2016
				
			
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				MasStoreItem item=new MasStoreItem(Integer.parseInt(blDispensingDetailsArray[index].trim()));
				blDispensingDetails.setItem(item);
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setQty(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setAmount(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setDiscountPercent(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setDiscountAmt(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setProportionalDisAmt(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setSalesTaxAmt(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setNetAmt(new BigDecimal(blDispensingDetailsArray[index].trim()));
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setRefundableStatus(blDispensingDetailsArray[index].trim());
			} 
			index++;
			if(blDispensingDetailsArray[index]!=null && !"".equals(blDispensingDetailsArray[index].trim())){ 
				blDispensingDetails.setIssued(blDispensingDetailsArray[index].trim());
			} 
			blDispensingDetailsList.add(blDispensingDetails);
			}
		}
		return blDispensingDetailsList;
	}
	

	@Override
	public void schedulerForSlowMovingDrugs(Map<String, Object> dataMap) {
		StoreSlowMovingDrugs storeSlowMovingDrugs = new StoreSlowMovingDrugs();
		List<Object[]> slowMovingList = new ArrayList<Object[]>();
		List<StoreSlowMovingDrugs> existingSlowMovingList = new ArrayList<StoreSlowMovingDrugs>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session)getSession();
		try {
			String qry =  "Select sit.item_id,item.pvms_no,item.nomenclature,itemDt.hospital_id,sim.department_id,sum(qty_issued) as issuedQty,"
					+ " (sum(qty_issued)/30) as avg,itemDt.slow_moving_days,itemDt.fast_moving_days,(case  when ((sum(qty_issued)/30) < itemDt.fast_moving_days) "
					+ "and ((sum(qty_issued)/30) >=itemDt.slow_moving_days) then 's' else 'n' end) as status from store_issue_t as sit left join store_issue_m as sim "
					+ " on sit.issue_m_id = sim.id left join mas_store_item as item  on sit.item_id = item.item_id right join mas_store_item_details as itemDt"
					+ " on item.item_id = itemDt.item_id left join mas_department as dept on sim.department_id = dept.department_id left join mas_hospital as hosp "
					+ " on itemDt.hospital_id = hosp.hospital_id where sim.issue_date between  current_date - interval '30 day' and current_date group by sit.item_id,"
					+ "item.nomenclature,itemDt.slow_moving_days,itemDt.fast_moving_days,item.pvms_no,itemDt.hospital_id,sim.department_id";
			slowMovingList = session.createSQLQuery(qry).list();
		existingSlowMovingList = session.createCriteria(StoreSlowMovingDrugs.class).list();
			
			
			
			if(existingSlowMovingList.size()>0){
			for(StoreSlowMovingDrugs slowMovingDrugs :existingSlowMovingList){
				hbt.delete(slowMovingDrugs);
			}
			}else{
			if(slowMovingList.size()>0){
				for(Object[] obj : slowMovingList){
					
					if(obj[0] != null){
						MasStoreItem masStoreItem = new MasStoreItem();
						masStoreItem.setId((Integer)obj[0]);
						storeSlowMovingDrugs.setItem(masStoreItem);
					}
					if(obj[1] != null){
						storeSlowMovingDrugs.setItemCode((String)obj[1]);
					}
					if(obj[2] != null){
						storeSlowMovingDrugs.setItemName((String)obj[2]);
					}
					if(obj[3] != null){
						MasHospital masHospital = new MasHospital();
						masHospital.setId((Integer)obj[3]);
						storeSlowMovingDrugs.setHospital(masHospital);
					}
					if(obj[4] != null){
						MasDepartment masDepartment = new MasDepartment();
						masDepartment.setId((Integer)obj[4]);
						storeSlowMovingDrugs.setDepartment(masDepartment);
					}
					hbt.save(storeSlowMovingDrugs);
				}
			 }
			}
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		finally{
			if(session!=null)
				session.close();
		}
	}

	@Override
	public Map<String, Object> displaySlowMovingDrugsJsp(Box box) {
		Map<String,Object> map = new HashMap<String,Object>();
		List<StoreSlowMovingDrugs> storeSlowMovingDrugList = new ArrayList<StoreSlowMovingDrugs>();
		Session session = (Session)getSession();
		storeSlowMovingDrugList = session.createCriteria(StoreSlowMovingDrugs.class).add(Restrictions.eq("Department.Id", box.getInt("departmentId")))
				.add(Restrictions.eq("Hospital.Id", box.getInt("hospitalId"))).list();
			
		map.put("storeSlowMovingDrugList", storeSlowMovingDrugList);	
		return map;
	}
	
	@Override
	public Map<String, Object> addPHColums(Map<String, Object> map) {
		Session session = (Session)getSession();
		int empId=(Integer)map.get("empId");
		String pvsmno=(String)map.get("pvsmno");
		
		List<MasHospital>hospitals=new ArrayList<MasHospital>();
		hospitals=session.createCriteria(MasHospital.class).list();
		map.put("hospitals", hospitals);
		List<MasEmployee>employees=new ArrayList<MasEmployee>();
		employees=session.createCriteria(MasEmployee.class).add(Restrictions.eq("LineManager.Id", empId)).list();
		map.put("promoters", employees);
		
		if(pvsmno!=null){
			List<MasProcedureItemMapping>mappings=session.createCriteria(MasProcedureItemMapping.class).createAlias("Item", "item").add(Restrictions.eq("item.PvmsNo", pvsmno).ignoreCase()).list();
			if(mappings.size()>0){
				map.put("mapflag", true);
			}
		}
		return map;
	}
	
	@Override
	public Map<String, Object> getHospitalList(Map<String, Object> map) {
		Session session = (Session)getSession();
		List<MasHospital>hospitals=new ArrayList<MasHospital>();
		hospitals=session.createCriteria(MasHospital.class).list();
		map.put("hospitals", hospitals);
		return map;
	}

	//added by govind 30-09-2016
	@Override
	public Map<String, Object> getsearchPatientReturnDrug(Box box) {
		Map<String,Object> map = new HashMap<String,Object>();
		Session session = (Session)getSession();
		Criteria criteria=null;
		List<StoreIssueM> storeIssueMs=new ArrayList<StoreIssueM>();
		List<Patient> searchDataList = new ArrayList<Patient>();
		List<Patient> patientDataList = new ArrayList<Patient>();
		int issueMId=0,hospitalId=0;
		int hinId=0;
		int patientAddressId=0;
		int patientHinId=0;
		List<PatientAddress> addressList=new ArrayList<PatientAddress>();
		Map<Integer,Object> addressMap=new HashMap<Integer,Object>();
		String aadharAddress="";
		String aadharDistrict="";
		String houseNo="";
		String streetName="";
		String taluk="";
		String ward="";
		int nulCheck=1;
		int noOfPages = 0;
		int noOfRecords = 0;
		int recordsPerPage = 5;
		int page = box.getInt("page");
		
		if(box.get(RequestConstants.ISSUE_NO)!=null&&
				!"".equals(box.get(RequestConstants.ISSUE_NO))){
			issueMId=box.getInt(RequestConstants.ISSUE_NO);
		}
		String hinNo="";
		
		if(box.get("hospitalId")!=null&&
				!"".equals(box.get("hospitalId"))){
			hospitalId=box.getInt("hospitalId");
		}
		System.out.println(" hospitalId "+hospitalId);
		
		criteria=session.createCriteria(StoreIssueM.class).createAlias("Hin","hin")
				.add(Restrictions.eq("Hospital.Id", hospitalId));
	
		if(box.get(RequestConstants.HIN_NO)!=null&&
				!"".equals(box.get(RequestConstants.HIN_NO))){
			nulCheck=nulCheck+1;
			hinNo=box.getString(RequestConstants.HIN_NO);
			criteria.add(Restrictions.eq("hin.HinNo", hinNo.trim()));
		}
		
		String name="";
		if(box.get("patientName")!=null && !"".equals(box.get("patientName"))){
			nulCheck=nulCheck+1;
			name=box.getString("patientName");
			System.out.println("Search name "+name);
			criteria.add(Restrictions.ilike("hin.PFirstName","%"+name+"%"));
		}
		String mobileNo="";
		
		if(box.get("mobileNumber")!=null&& !"".equals(box.get("mobileNumber"))){
			nulCheck=nulCheck+1;
			mobileNo=box.getString("mobileNumber");
			criteria.add(Restrictions.eq("hin.MobileNumber", mobileNo));
		}
		//added by govind 4-10-2016
		String  fromDate="",toDate="";
		if(box.get("fromDate")!=null&& !"".equals(box.get("fromDate")) 
				&& box.get("toDate")!=null&& !"".equals(box.get("toDate"))){
			nulCheck=nulCheck+1;
			System.out.println(" datet not null");
            fromDate = (String) box.getString("fromDate");
            toDate = (String) box.getString("toDate");
			Date fDate=HMSUtil.convertStringTypeDateToDateType(fromDate);
			Date tDate=HMSUtil.convertStringTypeDateToDateType(toDate);
			
			//criteria.add(Restrictions.ge("IssueDate", fDate)); 
			//criteria.add(Restrictions.lt("IssueDate", tDate));
			criteria.add(Restrictions.between("IssueDate", fDate, tDate));
		}//added by govind 4-10-2016 end
		//System.out.println("nulcheck "+nulCheck);
		if(nulCheck==1){
			criteria.add(Restrictions.eq("IssueDate",new Date()));
		}
		criteria.addOrder(Order.desc("Id"));
		noOfRecords = criteria.list().size();
		
		criteria.setFirstResult((page - 1)*recordsPerPage);
		criteria.setMaxResults(recordsPerPage);
		storeIssueMs=criteria.list();
		
		//noOfRecords = (Integer) criteria.uniqueResult();
		noOfPages = (int) Math.ceil(noOfRecords * 1.0 / recordsPerPage);
		
		System.out.println("storeIssueMs size "+storeIssueMs.size());
		//getting patient data
		if(storeIssueMs.size()>0){
		for(StoreIssueM sto:storeIssueMs){
			int hid=sto.getHin().getId();
		Patient patient=new Patient();
		
		criteria=session.createCriteria(Patient.class)
				//.add(Restrictions.eq("Hospital.Id", hospitalId))
		        .add(Restrictions.eq("Id", hid));
		
		patientDataList=criteria.list();	
		
		if(patientDataList.size()>0){
			patient=patientDataList.get(0);
			searchDataList.add(patient);
		}
		
		}
		}
		System.out.println("patientList size "+searchDataList.size());
		if(null !=searchDataList && searchDataList.size()>0){
			for(Patient P:searchDataList){
				patientHinId=P.getId();
			
			criteria=session.createCriteria(PatientAddress.class).createAlias("Hin", "Hin").createAlias("AddressType", "AddressType")
					.add(Restrictions.eq("Hin.Id", patientHinId)).add(Restrictions.eq("AddressType.Id", 2));
			addressList=criteria.list();
			if(null !=addressList && addressList.size()>0){
			for(PatientAddress address:addressList){
				if(null !=address.getAddressType() && address.getAddressType().getId()==2){
					if(null !=address.getDistrict()){
						aadharDistrict=address.getDistrict().getDistrictName();
					}
					if(null !=address.getHouseNo())
						houseNo=address.getHouseNo();
					
					if(null !=address.getStreetRoad())
						streetName=address.getStreetRoad();
					
					aadharAddress="" + houseNo +" "+streetName+" "+aadharDistrict;
				//	System.out.println("update Address "+aadharAddress);
					//System.out.println("update patientHinId "+patientHinId);
					addressMap.put(patientHinId, aadharAddress);
					
					 
				}
				
				else if(null !=address.getAddressType() && address.getAddressType().getId()==1){
					if(null !=address.getDistrict()){
						aadharDistrict=address.getDistrict().getDistrictName();
					}
					if(null !=address.getTaluk())
						taluk=address.getTaluk().getTalukName();
					
					if(null !=address.getWardNo())
						ward=address.getWardNo().getWardName();
					
					aadharAddress="" + taluk +" "+ward+" "+aadharDistrict;
					addressMap.put(patientHinId, aadharAddress);
					
					 
				}
				
			}
		}
		}
		}
		System.out.println("addressMap "+addressMap.size());
		System.out.println("noOfPages "+noOfPages+" currentPage "+page);
		map.put("addressMap", addressMap);
		map.put("searchDataList", searchDataList);
		map.put("noOfPages", noOfPages);
		map.put("currentPage", page);
		map.put("fromDate", fromDate);
		map.put("toDate", toDate);
		map.put("hinNo", hinNo);
		map.put("name", name);
		return map;
	}
	
	
	// added by Amit Das on 14-10-2016
	@Override
	public Map<String, Object> getItemListForAutoCompleteForStockRegister(
				Map mapForDS) {
			Map<String, Object> map = new HashMap<String, Object>();
			Session session = (Session) getSession();
			String str = null;
			Criteria crit;
			List<Object[]> objectList = null;
			List<MasStoreItem> masItemList = new ArrayList<MasStoreItem>();

			try {
				str = "%" + mapForDS.get("autoHint") + "%";

				
				objectList = session.createCriteria(StoreItemBatchStock.class)
						.createAlias("Hospital", "h")
						.createAlias("Department", "d")
						.createAlias("Item", "i")
						.add(Restrictions.eq("h.Id", (Integer)mapForDS.get("hospitalId")))
						.add(Restrictions.eq("d.Id", (Integer)mapForDS.get("departmentId")))
						.add(Restrictions.like("i.Nomenclature", str).ignoreCase())
						// .add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
						.add(Restrictions.isNotNull("Item"))
						.setProjection(
								Projections.projectionList()
										.add(Projections.property("i.Id"))
										.add(Projections.property("i.Nomenclature")))
						.list();
				
				/*objectList = session
						.createCriteria(MasIcd.class)
						.add(Restrictions.like("IcdName", str).ignoreCase())
						.setProjection(
								Projections.projectionList()
										.add(Projections.property("Id"))
										.add(Projections.property("IcdName"))
										.add(Projections.property("IcdCode")))
						.add(Restrictions.eq("Status", "y").ignoreCase()).list();*/

				for (Object[] objects : objectList) {
					MasStoreItem masStoreItem = new MasStoreItem();
					masStoreItem.setId((Integer) objects[0]);
					masStoreItem.setNomenclature((String) objects[1]);
					masItemList.add(masStoreItem);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			map.put("masItemList", masItemList);
			return map;
		}
	// added by Amit Das on 17-10-2016
	@Override
	public Map<String, Object> searchDirectDispensing(Box box) {
		List<Visit> patientList = new ArrayList<Visit>();
		Map<String, Object> map = new HashMap<String, Object>();	
			String hinNo = "";
		String message = "";
		int hospitalId = 0;
		int deptId = 0;
		String patientName = "";
		int noOfPages = 0;
		int noOfRecords = 0;
		int recordsPerPage = 5;
		int page = 1;
		
		Session session = (Session) getSession();
		Criteria criteria=null;
		if (box.get("patientName") != null) {
			patientName = (String) box.get("patientName");
		}
		if (box.get("hospitalId") != null) {
			hospitalId =  box.getInt("hospitalId");
		}
		
		if (box.get("deptId") != null) {
			deptId =  box.getInt("deptId");
		}
		 if(box.get("page") != null){
			 if(box.getInt("page")!=0){
	            page = box.getInt("page");
			 }	         
		 }
		String searchHinNo = "";
		if (box.get("searchHinNo") != null) {
			searchHinNo = (String) box.get("searchHinNo");
		}
		System.out.println("hospitalId "+hospitalId+"name "+patientName+" deptid "+deptId);
		criteria= session.createCriteria(Visit.class).add(Restrictions.eq("VisitDate", new Date()))
				.createAlias("Hin", "hin")
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("CurPharVisitStatus", "y").ignoreCase())
				.addOrder(Order.desc("Id"));
				//.add(Restrictions.eq("Department.Id", deptId));	
				
				if(patientName!=null  && !patientName.equals("")){
					criteria.add(Restrictions.or
									(Restrictions.or(Restrictions.like("hin.PFirstName", "%"+patientName+"%").ignoreCase(), Restrictions.like("hin.PMiddleName", "%"+patientName+"%").ignoreCase())
													,Restrictions.like("hin.PLastName", "%"+patientName+"%").ignoreCase()
									)
								);
				}
				if(searchHinNo!=null && !searchHinNo.equals(""))
				{
					criteria.add(Restrictions.like("hin.HinNo", "%"+searchHinNo+"%"));
				}
				noOfRecords = criteria.list().size();
				criteria.setFirstResult((page - 1)*recordsPerPage);
				criteria.setMaxResults(recordsPerPage);
				noOfPages = (int) Math.ceil(noOfRecords * 1.0 / recordsPerPage);
				
				patientList=criteria.list();
				
				System.out.println("noOfPages "+noOfPages+" currentPage "+page);	
				
			System.out.println("patientList "+patientList.size());
			map.put("patientList", patientList);
			map.put("noOfPages", noOfPages);
			map.put("currentPage", page);
			map.put("hinNo", searchHinNo);
			map.put("name", patientName);
			return map;
	}

	//added by govind 19-10-2016
	@Override
	public Map<String, Object> getItemStockValue(Box box) {
		List<StoreItemBatchStock> masStoreBrandList = new ArrayList<StoreItemBatchStock>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		String pvmsNo = "";
		int stockId = 0;
		int deptId = 0;
		int hospitalId = 0;
	
		if (box.getString(RequestConstants.DEPT_ID) != null
				&& !"".equalsIgnoreCase(box.getString(RequestConstants.DEPT_ID))) {
			deptId = box.getInt(RequestConstants.DEPT_ID);
		}
		if (box.getString(RequestConstants.HOSPITAL_ID) != null
				&& !"".equalsIgnoreCase(box
						.getString(RequestConstants.HOSPITAL_ID))) {
			hospitalId = box.getInt(RequestConstants.HOSPITAL_ID);
		}
		if (box.get("stockId") != null) {
			stockId = box.getInt("stockId");
		}

		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) utilMap.get("currentDate");
		SimpleDateFormat formatterIn = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat formatterOut = new SimpleDateFormat("yyyy-MM-dd");
		String date4MySQL = "";
		try {
			date4MySQL = formatterOut.format(formatterIn.parse(date));
		} catch (java.text.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Date issueDate = java.sql.Date.valueOf(date4MySQL);
System.out.println(" deptid "+deptId+" hospitalId "+hospitalId+" stockId "+stockId);
		Session session = (Session) getSession();
	
		
		masStoreBrandList = session
				.createCriteria(StoreItemBatchStock.class)
				.createAlias("Item", "item")
				.createAlias("Department", "dept")
				.add(Restrictions.eq("dept.Id", deptId))
				.add(Restrictions.eq("Hospital.Id", hospitalId))
				.add(Restrictions.eq("Id", stockId))
				//.add(Restrictions.eq("item.Id", itemId))
				// .add(Restrictions.gt("CostPrice", costPrice))
				.add(Restrictions.gt("ExpiryDate",
						HMSUtil.getCurrentDateAndTimeObject()))
				.add(Restrictions.gt("ClosingStock", new BigDecimal(0)))
				.addOrder(Order.asc("ExpiryDate")).list();
	
		System.out.println("masStoreBrandList "+masStoreBrandList.size());
		map.put("masItemBatchStockValue", masStoreBrandList);
		return map;
	}
	
@Override
	public Map<String, Object> pharmacyIssuePatientDrug(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = false;
		Date issueDate = new Date();
		StoreIssueM issueM = new StoreIssueM();
		Session session = getSession();
		final Map<String,Object> dataForMedicenDispencing=new HashMap<String,Object>();
		Transaction tx = null;
	//	Vector	presId=box.getVector("presId");
		try {
			tx = session.beginTransaction();
			HibernateTemplate hbt = getHibernateTemplate();
			hbt.setFlushModeName("FLUSH_EAGER");
			hbt.setCheckWriteOperations(false);
			StoreIssueT storeIssueTObj = new StoreIssueT();
			List<StoreIssueT> storeIssueTList = new ArrayList<StoreIssueT>();
			List<Integer> visitIds = new ArrayList<Integer>();
			int hospitalId= box.getInt("hospitalId");
			int medicineCounter = box.getInt("medicineCounter");
			
			// Added by dhananjay 02-dec-16
			/*storeIssueTList = hbt
					.find("select sit from jkt.hms.masters.business.StoreIssueT as sit  where sit.Visit.Id="+ visitId);
			*/
			
			// added by amit das on 08-12-2016
			for(int i=0; i< medicineCounter; i++){
				if(box.get("visitId"+i)!=null && box.getInt("visitId"+i)!=0){
					visitIds.add(box.getInt("visitId"+i));
				}
			}
			
			if(null !=visitIds && visitIds.size()>0){
			storeIssueTList=session.createCriteria(StoreIssueT.class).createAlias("IssueM", "issueM").
					createAlias("issueM.Hospital", "hosp")
					.createAlias("Visit", "visit")
					// .add(Restrictions.eq("visit.Id", visitId)) //commented by amit das on 08-12-2016
					.add(Restrictions.in("visit.Id", visitIds)) // added by amit das on 08-12-2016
					.add(Restrictions.eq("hosp.Id", hospitalId)).list();
			}
				//  ENd	
			List<PatientPrescriptionHeader> patientPrescriptionHeader=null;
			if(null !=visitIds && visitIds.size()>0){
			 patientPrescriptionHeader=
					session.createCriteria(PatientPrescriptionHeader.class).createAlias("Hospital", "hosp")
					.add(Restrictions.eq("hosp.Id", hospitalId))
							.add(Restrictions.in("Visit.Id", visitIds)).list();
			}
			Map<Integer, PatientPrescriptionHeader> patientPrescriptionHeaderMap = null;
					
			int issueId = 0;
			if (storeIssueTList.size() > 0) {
				for (StoreIssueT storeIssueT : storeIssueTList) {
					
					if (storeIssueT.getIssueM() != null) {
						issueId = storeIssueT.getIssueM().getId();
						issueM =  (StoreIssueM)session.get(StoreIssueM.class, issueId);// added by amit das on 26-08-2016
						dataForMedicenDispencing.put("issueM", issueM); // added by amit das on 26-08-2016
						
					}
				}
			} else {
				
				issueM.setIssueType("i");
				issueM.setIssueNo(box.getString(ISSUE_NO));
				if (box.get(RequestConstants.ISSUE_DATE) != null) {

					SimpleDateFormat formatterIn = new SimpleDateFormat(
							"dd/MM/yyyy");
					SimpleDateFormat formatterOut = new SimpleDateFormat(
							"yyyy-MM-dd");
					String date4MySQL = formatterOut.format(formatterIn
							.parse(box.get(RequestConstants.ISSUE_DATE)));
					issueDate = java.sql.Date.valueOf(date4MySQL);
				}
				issueM.setIssueDate(issueDate);
				String deptType = "";
				deptType = (String) box.getString("deptType");

				MasDepartment department = new MasDepartment();
				department.setId(box.getInt("deptId"));
				issueM.setDepartment(department);

				// Commented by Dhananjay 02-Dec-2016
				//String patientIssueNo = generateDrugIssueNumber(deptType);

				issueM.setIssueNo(box.getString(ISSUE_NO));

				issueM.setStatus("o");

				MasHospital hospital = new MasHospital();
				hospital.setId(box.getInt("hospitalId"));
				issueM.setHospital(hospital);

				Users users = new Users();
				users.setId(box.getInt("userId"));
				issueM.setLastChgBy(users);
				issueM.setLastChgDate(HMSUtil
						.convertStringTypeDateToDateType(box
								.getString(CHANGED_DATE)));
				issueM.setLastChgTime(box.getString(CHANGED_TIME));
				if(null !=patientPrescriptionHeader && patientPrescriptionHeader.size()>0)
				issueM.setHin(patientPrescriptionHeader.get(0).getHin());
				hbt.save(issueM);
				dataForMedicenDispencing.put("issueM", issueM);
			}
         
			//Start  Added by dhananjay on 05-jan
			
			
			PharmacyLabQueue pharmacyLabQueue=null;
			if(patientPrescriptionHeader.size()>0){
			pharmacyLabQueue=patientPrescriptionHeader.get(0).getPharmacyLabQueue();
			if(pharmacyLabQueue != null){
			pharmacyLabQueue.setStatus("C");
			hbt.update(pharmacyLabQueue);
			}
			}
			//End 
			
		
			
			List<Integer> stocks = new ArrayList<Integer>();
			List<BigDecimal> quantity = new ArrayList<BigDecimal>();

			List<StoreIssueT> storeIssueTForServerList=new ArrayList<StoreIssueT>();
			List<PatientPrescriptionDetails> patientPrescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();  // commented by amit das on 07-12-2016
			List<StoreItemBatchStock> storeItemBatchStockList=new ArrayList<StoreItemBatchStock>();
			BigDecimal issueQtyForPatientPrecscription = new BigDecimal(0);
			// for (int i = 0; i < batchNos.size(); i++) {
			// patientPrescriptionHeader = new ArrayList<PatientPrescriptionHeader>(); // added by amit das on 08-12-2016
			// commented by amit das on 23-12-2016
			patientPrescriptionHeaderMap = new HashMap<Integer, PatientPrescriptionHeader>(); // added by amit das on 23-12-2016
			int presId=0;
			for (int i = 0; i < medicineCounter; i++) {
				if (!box.get("qtyIssued"+i).toString().equals("")
						&& Float.parseFloat(box.get("qtyIssued"+i).toString()) != 0 && null !=box.get("batchNo"+i) ) {
					/**
					 * Code for Check Drug Issued Or Not
					 */
					 
					presId = box.getInt("presId"+i);

					
				
					StoreItemBatchStock itemBatchStock =null;
					Criteria crt=null;
					if(null !=box.get("batchNo"+i)){
					 crt= session.createCriteria(StoreItemBatchStock.class)
							.createAlias("Hospital", "hospital")
							.createAlias("Item", "item")
							.createAlias("Department","dep")
							.add(Restrictions.eq("dep.Id", box.getInt("deptId")))
							.add(Restrictions.eq("BatchNo", (String)box.get("batchNo"+i)))
							.add(Restrictions.eq("hospital.Id",hospitalId))
							.add(Restrictions.eq("item.Id", Integer.parseInt((String)box.get("itemId"+i))));
					if(null !=crt && null !=crt.list() && crt.list().size()>0)
						//System.out.println("itemBatchStock Size "+crt.list().size());
							 itemBatchStock =(StoreItemBatchStock) crt.list().get(0);
					
					
					}
					
					//govind 06-01-2017
					BigDecimal medAvail=null;
					if(((String)box.get("mixable"+i)).equalsIgnoreCase("Y")){
						BigDecimal closQt=null,mixtureQt=null,adisQt=null,temp=null,issueQt=null;
						closQt=itemBatchStock.getClosingStock();
						issueQt=new BigDecimal(box.get("qtyIssued"+i).toString());
						mixtureQt=new BigDecimal(box.get("mixtureQuantity"+i).toString());
						/*adisQt=new BigDecimal(box.get("aDispQty"+i).toString());
						temp=closQt.multiply(adisQt).add(mixtureQt);
						temp=temp.subtract(issueQt);*/
						
						// medAvail=issueQt.divide(new BigDecimal(1000)); // commented by amit das on 01-09-2017
						medAvail=issueQt.divide(mixtureQt);	// 	added by amit das on 01-09-2017
					}else{
						medAvail=new BigDecimal(box.get("qtyIssued"+i).toString());
					}
					//govind 06-01-2017 end
					
					// condition added by amit das on 20-09-2016
					/*if(itemBatchStock!=null && itemBatchStock.getClosingStock()!=null && itemBatchStock
							.getClosingStock().subtract(
									new BigDecimal(box.get("qtyIssued"+i)
											.toString())).intValue()>=0) {*/
					if(itemBatchStock!=null && itemBatchStock.getClosingStock()!=null && medAvail.intValue()>=0) {
						
						System.out.println("itemBatchStock  "+itemBatchStock.getBatchNo());
						System.out.println("itemId  "+itemBatchStock.getItem().getId());
						System.out.println("itemDEPStock  "+itemBatchStock.getDepartment().getId());
						System.out.println("itemBatchStock  "+itemBatchStock.getHospital().getId());
					
					StoreIssueT storeIssueT = new StoreIssueT();

					storeIssueT.setBatchNo(box.get("batchNo"+i).toString());

					if (box.getInt("visitId"+i)!= 0) { // changed by amit das on 08-12-2016
						Visit visit = new Visit();
						visit.setId(box.getInt("visitId"+i)); 
						storeIssueT.setVisit(visit);
					}
					MasStoreItem storeItem = new MasStoreItem();
					storeItem.setId((Integer.parseInt((String)box.get("itemId"+i))));
					storeIssueT.setItem(storeItem);
					/*StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();
					storeItemBatchStock.setId(box.getInt("storeItemId"
							+ (i + 1)));*/ // commented by amit das on 20-09-2016
					
					
					storeIssueT.setStock(itemBatchStock);
					MasStoreItem storeItem1 = new MasStoreItem();
					storeItem1.setId(Integer.parseInt(box.get("itemId"+i).toString()));
					// storeIssueT.setItemIssued(storeItem1);
					//BigDecimal qtyReq = new BigDecimal((Integer)qtyRequested.get(i));
					if(box.get("qtyRequest"+i)!=null && !box.get("qtyRequest"+i).equals("") && !box.get("qtyRequest"+i).equals("null") && !box.get("qtyRequest"+i).equals("0")){
						/*storeIssueT.setQtyRequest(new BigDecimal((Integer.parseInt((String)box.get("qtyRequest"+i)))));*/
						storeIssueT.setQtyRequest(new BigDecimal((box.get("qtyRequest"+i).toString())));

						}
					BigDecimal temp =	null;
					if(((String)box.get("mixable"+i)).equalsIgnoreCase("Y")){
						/*temp = new BigDecimal(box.get("qtyIssued"+i).toString()).multiply(new BigDecimal(box.get("actualQtyNeeded"+i).toString()));
						temp = temp.divide(new BigDecimal(box.get("qtyRequest"+i).toString()));*/ //govind 04-01-2017
						temp=new BigDecimal(box.get("qtyIssued"+i).toString());
						storeIssueT.setQtyIssued(temp);	
					}else {
						storeIssueT.setQtyIssued(new BigDecimal(box.get("qtyIssued"+i)
							.toString()));
					}
					
					/*if(null !=remarks && remarks.get(i)!=null && !remarks.get(i).equals("") && !remarks.get(i).equals("null") && !remarks.get(i).equals("0")){
					storeIssueT.setRemarks(remarks.get(i).toString());
					}*/
					storeIssueT.setExpiryDate(HMSUtil
							.convertStringTypeDateToDateType(box.get("expiry"+i)
									.toString()));
					//if(costPrice.get(i)!=null && !costPrice.get(i).equals("") && !costPrice.get(i).equals("null") && !costPrice.get(i).equals("0")){
					storeIssueT.setCostPrice(itemBatchStock.getCostPrice());
					//}
					storeIssueT.setSrNo(Integer.parseInt((String)box.get("srNo"+i)));
					storeIssueT.setIssued("y");
					if (issueId == 0) {
						storeIssueT.setIssueM(issueM);
					} else {
						StoreIssueM stIssueM = new StoreIssueM();
						stIssueM.setId(issueId);
						storeIssueT.setIssueM(stIssueM);

					}
					storeIssueT.setItemReplacedToPharmacy("n");
					PatientPrescriptionDetails prescription=new PatientPrescriptionDetails();
					/*if(presId.get(0)!=null && !presId.get(0).equals("")){
					prescription.setId(Integer.parseInt(""+presId.get(0)));
					storeIssueT.setPrescription(prescription);
					}else{*/
					/*	List<PatientPrescriptionDetails> ppdList=new ArrayList<PatientPrescriptionDetails>();
						ppdList=session.createCriteria(PatientPrescriptionDetails.class)
								.createAlias("Prescription","Prescription")
								.add(Restrictions.eq("Prescription.Visit.Id",box.getInt("visitId"+i)))
								.add(Restrictions.eq("Item.Id",(Integer.parseInt((String)box.get("itemId"+i)))))
								.list();
						int presId2=0;
						for(PatientPrescriptionDetails ppd:ppdList)	{
							presId2=ppd.getId();
						}

						prescription.setId(presId2);*/
					prescription.setId(presId);
						storeIssueT.setPrescription(prescription);
					
					hbt.save(storeIssueT);
					storeIssueTForServerList.add(storeIssueT);
					// --------------Update
					// StoreItemBatchStock-----------------------------
					// List<StoreItemBatchStock> batchStockList = new
					// ArrayList<StoreItemBatchStock>();
					/*
					 * batchStockList =
					 * 
					 * .createCriteria(StoreItemBatchStock.class)
					 * .add(Restrictions.eq("BatchNo", batchNos.get(i)))
					 * .createAlias("Item", "item")
					 * .add(Restrictions.eq("item.Id", itemId))
					 * .createAlias("Department", "d")
					 * .add(Restrictions.eq("d.Id", box.getInt("deptId")))
					 * .list();
					 */
				/*
					StoreItemBatchStock itemBatchStock = (StoreItemBatchStock) session
							.load(StoreItemBatchStock.class,
									box.getInt("storeItemId" + (i + 1)));*/
					// commented by amit das on 20-09-2016
					
					
					stocks.add(itemBatchStock.getId());
					quantity.add(new BigDecimal(box.get("qtyIssued"+i)
							.toString()));
							System.out.println(" itemBatchStock.getId()  "+itemBatchStock.getId());
								System.out.println(" temp  "+temp);
					StoreItemBatchStock batchStockObj = (StoreItemBatchStock) hbt
							.load(StoreItemBatchStock.class,
									itemBatchStock.getId());
					if (batchStockObj.getClosingStock() != null) {
						
						// condition added by amit das on 21-11-2016
						if(((String)box.get("mixable"+i)).equalsIgnoreCase("Y")){							
						//batchStockObj.setClosingStock(batchStockObj.getClosingStock().subtract(temp));
							  //govind 06-01-2017
							BigDecimal closQt=null,mixtureQt=null,adisQt=null,issueQt=null,openQt=null;
							closQt=itemBatchStock.getClosingStock();
							openQt=itemBatchStock.getOpeningBalanceQty();
							System.out.println("Before clsoQt "+closQt+" openQt ");
							issueQt=new BigDecimal(box.get("qtyIssued"+i).toString());
							mixtureQt=new BigDecimal(box.get("mixtureQuantity"+i).toString());
							adisQt=new BigDecimal(box.get("aDispQty"+i).toString());
							System.out.println("issueQt "+issueQt+" mixtureQt "+mixtureQt+" adisQt "+adisQt);
							
							//closing-(1/UOM Qty+MixtureQuantity)*issue_qty
						  
							//commented by amit das on 01-09-2017
							/* Double adQt=Double.parseDouble(box.get("aDispQty"+i).toString());
						    Double mixQt=Double.parseDouble(box.get("mixtureQuantity"+i).toString());
						    Double c=(1/(adQt+mixQt));//(1/(UOM Qty+MixtureQuantity))
						    temp=new BigDecimal(c.toString());
						    System.out.println("1ml calculation "+temp);
						    temp=temp.multiply(issueQt);//(1/UOM Qty+MixtureQuantity)*issue_qty
						    System.out.println("issuedQt calculation "+temp);
						    temp=closQt.subtract(temp);
						    System.out.println("final calculation "+temp);*/
							
							// added by amit das on 01-09-2017
							Double adQt=Double.parseDouble(box.get("aDispQty"+i).toString());
						    Double mixQt=Double.parseDouble(box.get("mixtureQuantity"+i).toString());
						    issueQt = issueQt.divide(mixtureQt);
						    temp=closQt.subtract(issueQt);
						    System.out.println("final calculation "+temp);
						
						    
						 /*	temp=closQt.multiply(adisQt).add(mixtureQt);
							System.out.println("add calculation "+temp);							
							temp=temp.subtract(issueQt);
							System.out.println("substract calculation "+temp);
							temp=temp.divide(adisQt);
							System.out.println("final clsoQt "+temp);	*/						
							batchStockObj.setClosingStock(temp);							
							  //govind 06-01-2017 end
						}else {
						batchStockObj.setClosingStock(batchStockObj
								.getClosingStock().subtract(
										new BigDecimal(box.get("qtyIssued"+i)
												.toString())));
						}
					}
					if (batchStockObj.getIssueQty() != null) {
						batchStockObj
								.setIssueQty(batchStockObj.getIssueQty().add(
										new BigDecimal(box.get("qtyIssued"+i)
												.toString())));
					} else {
						batchStockObj.setIssueQty(new BigDecimal(box.get("qtyIssued"+i).toString()));
					}
					issueQtyForPatientPrecscription = issueQtyForPatientPrecscription
							.add(new BigDecimal(box.get("qtyIssued"+i).toString()));
					hbt.update(batchStockObj);
					storeItemBatchStockList.add(batchStockObj);
					// --------------Update StoreFyDocumentNo
					// Table-------------------------
					int presDetailId = 0;
					int preHeaderId = 0;
					/*List<PatientPrescriptionDetails> presDetailList = new ArrayList<PatientPrescriptionDetails>();
					presDetailList = session
							.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "sch")
							.add(Restrictions.eq("sch.Visit.Id", box.getInt("visitId"+i)))
							.add(Restrictions.eq("Item.Id", (Integer.parseInt((String)box.get("itemId"+i))))).list();

					for (PatientPrescriptionDetails preDetailsObj : presDetailList) {
						presDetailId = preDetailsObj.getId();
					}*/

					/*PatientPrescriptionDetails patPrescriptionDetails = (PatientPrescriptionDetails) hbt
							.load(PatientPrescriptionDetails.class,
									presDetailId);*/
					PatientPrescriptionDetails patPrescriptionDetails = (PatientPrescriptionDetails) hbt
							.load(PatientPrescriptionDetails.class,
									presId);
					preHeaderId = patPrescriptionDetails.getPrescription()
							.getId();

					float totatStoreIssue = 0.00f;
					if (patPrescriptionDetails.getTotalStoreIssuedQty() != null) {
						totatStoreIssue = patPrescriptionDetails
								.getTotalStoreIssuedQty();
					}
					patPrescriptionDetails
							.setTotalStoreIssuedQty(new Float(box.get("qtyIssued"+i)
									.toString()));
					patPrescriptionDetails.setCurStoreIssuedQty(new Float(box.get("qtyIssued"+i)
							.toString()));
				//	if (issueQtyForPatientPrecscription.floatValue() == presDetailList.get(0).getTotal()) {
					if (issueQtyForPatientPrecscription.floatValue() == patPrescriptionDetails.getTotal()) {	
						patPrescriptionDetails.setIssuedStatus("y");
					}
				//	if (issueQtyForPatientPrecscription.floatValue() < presDetailList.get(0).getTotal()) {
					if (issueQtyForPatientPrecscription.floatValue() < patPrescriptionDetails.getTotal()) {
						patPrescriptionDetails.setIssuedStatus("n");
					}

					hbt.update(patPrescriptionDetails);
					patientPrescriptionDetailsList.add(patPrescriptionDetails); // added  by amit das on 07-12-2016
					System.out.println("patientPrescriptionDetailsList = "+i);
					// patientPrescriptionDetailsList.add(patPrescriptionDetails); // commented by amit das on 11-08-2016
					/*preHeaderId = presDetailList.get(0).getPrescription()
							.getId();*/
					List<PatientPrescriptionDetails> presDetailList1 = new ArrayList<PatientPrescriptionDetails>();
					presDetailList1 = session
							.createCriteria(PatientPrescriptionDetails.class)
							.createAlias("Prescription", "sch")
							.add(Restrictions.eq("sch.Id", preHeaderId)).list();
					boolean isTrue = true;

					for (PatientPrescriptionDetails preDetailsObj1 : presDetailList1) {
						// presDetailId = preDetailsObj1.getPrescription();
						if ((!"y".equalsIgnoreCase(preDetailsObj1
								.getIssuedStatus()))) {
							isTrue = false;
							break;
						}
					}

					/*
					 * List<PatientPrescriptionHeader> presHeaderList = new
					 * ArrayList<PatientPrescriptionHeader>(); presHeaderList =
					 * session .createCriteria(PatientPrescriptionHeader.class)
					 * .add(Restrictions.eq("Id", preHeaderId)) .list();
					 */
					PatientPrescriptionHeader patPrescriptionHeader = (PatientPrescriptionHeader) hbt
							.load(PatientPrescriptionHeader.class, preHeaderId);
					
					if (isTrue) {
						 patPrescriptionHeader.setIssuedStatus("y"); // commented by amit das on 06-12-2016
					} else {
						 patPrescriptionHeader.setIssuedStatus("n"); // commented by amit das on 06-12-2016
						
					} 

					//	hbt.update(patPrescriptionHeader);
					hbt.update(patPrescriptionHeader); // added by amit das on 06-12-2016
					
					 // patientPrescriptionHeader.add(patPrescriptionHeader); // added by amit das on 06-12-2016
					// commented by amit das on 22-12-2016
					patientPrescriptionHeaderMap.put(patPrescriptionHeader.getId(), patPrescriptionHeader); // added by amit das on 22-12-2016
					
					// dataForMedicenDispencing.put("patPrescriptionHeader", patPrescriptionHeader); // commented by amit das on 06-12-2016
				   // dataForMedicenDispencing.put("patPrescriptionHeader", patientPrescriptionHeader); // added by amit das on 06-12-2016
					// dataForMedicenDispencing.put("patPrescriptionDetails", patPrescriptionDetails); // commented by amit das on  06-12-2016
					//dataForMedicenDispencing.put("storeIssueTForServerList", storeIssueTForServerList); // added by amit das on 06-12-2016
					//dataForMedicenDispencing.put("storeItemBatchStockList", storeItemBatchStockList); // added by amit das on 06-12-2016
					
					}
					
				}
				
			}
			// dataForMedicenDispencing.put("patPrescriptionHeader", patientPrescriptionHeader); // added by amit das on 06-12-2016
			 // commented by amit das on 23-12-2016
			 dataForMedicenDispencing.put("patPrescriptionHeader", patientPrescriptionHeaderMap); // added by amit das on 23-12-2016
			 
			 dataForMedicenDispencing.put("patPrescriptionDetails", patientPrescriptionDetailsList); // added by amit das on 06-12-2016
			 dataForMedicenDispencing.put("storeIssueTForServerList", storeIssueTForServerList);
			 dataForMedicenDispencing.put("storeItemBatchStockList", storeItemBatchStockList);
			// dataForMedicenDispencing.put("patientPrescriptionDetailsList", patientPrescriptionDetailsList); // commented by amit das on 11-08-2016
			Map<String, Object> detailsMap =new HashMap<String, Object>();
			detailsMap.put(HOSPITAL_ID,box.getInt("hospitalId"));
			detailsMap.put(USERID,box.getInt("userId"));
			Visit visit=(Visit) hbt.get(Visit.class, box.getInt("visitId"));
			if(null !=visit)
			detailsMap.put(HIN_ID,visit.getHin().getId());			
			detailsMap.put(VISIT_ID,box.getInt("visitId"));			
			detailsMap.put("stock",stocks);
			detailsMap.put("quantity",quantity);
			
			System.out.println("pahleeee ");
			Iterator<Integer> itr = patientPrescriptionHeaderMap.keySet().iterator();
	        while (itr.hasNext()) {
        		PatientPrescriptionHeader patientPrescriptionHeader1 = patientPrescriptionHeaderMap.get(itr.next());
        		System.out.println("visit no = "+patientPrescriptionHeader1.getVisit().getVisitNo());
	        }
			
			map=billingMasterDataService.internalBillingForDispensing(detailsMap);
			dataForMedicenDispencing.put("dispensingHeader", map.get("dispensingHeader"));
			dataForMedicenDispencing.put("blDispensingDetailsList", map.get("blDispensingDetailsList"));

			flag = true;
			tx.commit();
			final MasHospital  masHospital=(MasHospital)session.get(MasHospital.class, box.getInt("hospitalId")); 
			dataForMedicenDispencing.put("hospital", masHospital);
			
			
			System.out.println("badddd  ");
			itr = patientPrescriptionHeaderMap.keySet().iterator();
	        while (itr.hasNext()) {
        		PatientPrescriptionHeader patientPrescriptionHeader1 = patientPrescriptionHeaderMap.get(itr.next());
        		System.out.println("visit no = "+patientPrescriptionHeader1.getVisit().getVisitNo());
	        }
	        
	      //#13- Tech Debt: Comment out the code those are related to Lean server
			/*new Thread(){
				public void run(){
					if(masHospital!=null && masHospital.getServerIp()!=null && !masHospital.getServerIp().trim().equals("") && !masHospital.getServerIp().trim().equals("null") && masHospital.getServerPort()!=null && !masHospital.getServerPort().trim().equals("") && !masHospital.getServerPort().trim().equals("null")){
						
						String patientRegMessage=medicineDispencingToToCentralServer(dataForMedicenDispencing);
						// commented by amit das on 02-08-2016
						// added by amit das on 28-07-2016
						if(!"success".equalsIgnoreCase(patientRegMessage)){
							dataForMedicenDispencing.put("status","N");
							medicineDispencingToLeanServer(dataForMedicenDispencing);
						}else{
							dataForMedicenDispencing.put("status","Y");
							medicineDispencingToLeanServer(dataForMedicenDispencing);
						}   
					} 
					if(masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){
 	
							String patientRegMessage=medicineDispencingToLeanServer(dataForMedicenDispencing,masHospital);
							if(!"success".equalsIgnoreCase(patientRegMessage)){
								dataForMedicenDispencing.put("status","N");
								medicineDispencingToLeanServer(dataForMedicenDispencing);
							}else{
								dataForMedicenDispencing.put("status","Y");
								medicineDispencingToLeanServer(dataForMedicenDispencing);
							}   
					}
				}
				
			}.start();*/
		} catch (Exception e) {
			if (tx != null) {
				tx.rollback();
			}
			e.printStackTrace();
		}
		List<Integer> lastIssueNoList = new ArrayList<Integer>();
		List<StoreIssueM> lastIssueMList = new ArrayList<StoreIssueM>();
		lastIssueNoList = session.createCriteria(StoreIssueM.class)
				.setProjection(Projections.max("Id")).list();
		lastIssueMList = session.createCriteria(StoreIssueM.class)
				.add(Restrictions.eq("Id", lastIssueNoList.get(0))).list();
		map.put("issueId", lastIssueNoList.get(0));
	/*	if(null !=presId && presId.size()>0)
		map.put("presId",presId.get(0));*/
		map.put("flag", flag);
		
		return map;
	}

	
	public Map<String, Object> getdrugStock(Map<String, Object> requestParameters) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();
		session = (Session) getSession();
		int itemId= 0;
		int hospitalId=0;

		String qry="";
		String pvms="";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		Map itemValue = new HashMap();

		List objectList = new ArrayList();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasStoreItem> itemList = new ArrayList<MasStoreItem>();
		List<StoreItemBatchStock> batchStockList= new ArrayList<StoreItemBatchStock>();
		if(requestParameters.get("pvms") !=null){
			pvms = (String)requestParameters.get("pvms");

		}

		try {

			itemId = (Integer) requestParameters.get("itemId");
			hospitalId = (Integer) requestParameters.get("hospitalId");
			departmentList = session.createCriteria(MasDepartment.class).add(
					Restrictions.eq("Status", "y"))
					.addOrder(Order.asc("Id")).list();
			itemList = session.createCriteria(MasStoreItem.class).add(
					Restrictions.eq("Status", "y"))
					.addOrder(Order.desc("Id")).list();

			if(itemId==0){
				
				for(int i=0; i<itemList.size();i++)
				{String deptQuant="";
				if(departmentList.size()>0){
					for(int j=0; j<departmentList.size(); j++){

						String jav="select case  when sum(coalesce(closing_stock,0))  > 0  THEN sum(coalesce(closing_stock,0)) else 0 end as closing_blance"
							+" from store_item_batch_stock  where item_id='"
							+ itemList.get(i).getId()+"'"
							+" and department_id="
							+departmentList.get(j).getId()+" and hospital_id = "+hospitalId;
						int quantity=((BigDecimal)session.createSQLQuery(jav).uniqueResult()).intValue();
						deptQuant+=departmentList.get(j).getId()+"@"+quantity+"#";


					}
					itemValue.put(itemList.get(i).getId(),deptQuant);
				}
				}



			}
			else {
				qry="SELECT sum(store_item_batch_stock.closing_stock) AS closing_stock,mas_department.department_name AS department_name,"
					+" mas_store_item.pvms_no AS pvms_no,mas_store_item.nomenclature AS nomenclature,mas_store_item_conversion.item_unit_name AS unit_name"
					+" FROM  mas_department mas_department "
					+" RIGHT OUTER JOIN store_item_batch_stock store_item_batch_stock ON mas_department.department_id = store_item_batch_stock.department_id"
					+" LEFT OUTER JOIN mas_store_item mas_store_item ON store_item_batch_stock.item_id = mas_store_item.item_id"
					+" LEFT OUTER JOIN mas_store_item_conversion mas_store_item_conversion ON mas_store_item.item_conversion_id = mas_store_item_conversion.item_conversion_id"
					+" where store_item_batch_stock.item_id ='"
					+ itemId+"'"
					+" and store_item_batch_stock.hospital_id ='"
					+ hospitalId+"'"
					+" group by mas_department.department_id,mas_department.department_name,mas_store_item.nomenclature , mas_store_item_conversion.item_unit_name,mas_store_item.pvms_no, store_item_batch_stock.item_id"
					+" order by mas_department.department_id , store_item_batch_stock.item_id";
				objectList = (List) session.createSQLQuery(qry).list();
				System.out.println("objectList---"+objectList);
				if(objectList.size()==0)
				{
					String msg="NO Record Found !";
					map.put("msg",msg);
				}
			}


		} catch (HibernateException e) {
			e.printStackTrace();
		}
	

		map.put("objectList", objectList);
		map.put("departmentList", departmentList);
		map.put("itemList", itemList);
		map.put("itemValue", itemValue);
		return map;

	}
	public Map<String, Object> getMasItemId(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasStoreItem> masStoreItemList = new ArrayList<MasStoreItem>();
		Session session = (Session) getSession();
		String pvmsNo = "";
		int itemId = 0;
		String nomenclature = "";
		pvmsNo = box.getString("pvmsNo");

		if (!pvmsNo.equals("") && pvmsNo.length() > 0) {
			masStoreItemList = (List<MasStoreItem>) session.createCriteria(
					MasStoreItem.class)
					.add((Restrictions.eq("PvmsNo", pvmsNo))).list();

			if (masStoreItemList != null && masStoreItemList.size() > 0) {
				MasStoreItem masStoreItem = (MasStoreItem) masStoreItemList.get(0);
				itemId = masStoreItem.getId();
				nomenclature = masStoreItem.getNomenclature();
			}
		}
		if (itemId == 0)
			itemId = box.getInt("item_id");
		map.put("itemId", itemId);
		map.put("nomenclature", nomenclature);
		return map;
	}

	@Override
	public Map<String, Object> getInstituteWiseStock(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Object[]> insWiseStockList = new ArrayList<Object[]>();
		String nomenclature = "";
		
		Map<String, Object> datamap = new HashMap<String, Object>();
		datamap = getMasItemId(box);
		int itemId = (Integer) datamap.get("itemId");
		nomenclature = (String) datamap.get("nomenclature");
		
		Session session = (Session) getSession();
		insWiseStockList = session.createSQLQuery("select hospital_name,sum(closing_stock)"
				+ " from store_item_batch_stock sibs left join mas_store_item msi on sibs.item_id=msi.item_id "
				+ " left join mas_hospital mh on sibs.hospital_id=mh.hospital_id"
				+ " where sibs.item_id="+itemId
				+ " group by hospital_name"
				+ " order by hospital_name").list();
		map.put("insWiseStockList", insWiseStockList);
		map.put("nomenclature", nomenclature);
		return map;
	}
	
	// added by amit das on 20-12-2016
	public Map<String, Object> getHospitalData(Map<String, Object> objectMap) {
		Map<String, Object> map = new HashMap<String, Object>();
		MasHospital hospital  = null;
		long hospitalId = 0;
		Session session = (Session)getSession();
		if(objectMap.get("hospitalId")!=null){
			hospitalId = (Long)objectMap.get("hospitalId");
			if(hospitalId!=0){
				hospital = (MasHospital)session.get(MasHospital.class, (int)hospitalId);
			}
		}

		map.put("hospital", hospital);
		if(session!=null){
			session.close();
		}
		return map;
	}

	@Override
	public Map<String, Object> importKMSCLStock(Map<String, Object> utilMap) {
		Session session = (Session) getSession();
		Map<String, Object> map = new HashMap<String, Object>();

		List<String> itemCodeList = new ArrayList<String>();
		List<String> supplierList = new ArrayList<String>();
		List<String> batch1 = new ArrayList<String>();
		List<String> rateList = new ArrayList<String>();
		List<String> manufactureDate1 = new ArrayList<String>();
		List<String> expiryDate1 = new ArrayList<String>();
		List<String> qty1 = new ArrayList<String>();
		
		itemCodeList = (List) utilMap.get("itemCodeList");
		supplierList = (List) utilMap.get("supplierList");
		rateList = (List) utilMap.get("rateList");
		batch1 = (List) utilMap.get("batch1");
		manufactureDate1 = (List) utilMap.get("manufactureDate1");
		expiryDate1 = (List) utilMap.get("expiryDate1");
		qty1 = (List) utilMap.get("qty1");
	
		int deptId = (Integer) utilMap.get("deptId");
		int hospitalId = (Integer) utilMap.get("hospitalId");
		int userId = (Integer) utilMap.get("userId");
		List<MasStoreItem> storeItemList = new ArrayList<MasStoreItem>();
		List<MasInstituteDepartment> departmentForIndentNoList = new ArrayList<MasInstituteDepartment>();
		
		String userName = (String) utilMap.get("utilMap");
		String pvms = null;
		String nomenclature = null;
		int auId = 0;
		
		Map dateMap = (Map) HMSUtil.getCurrentDateAndTime();
		String date = (String) dateMap.get("currentDate");
		String time = (String) dateMap.get("currentTime");
		org.springframework.orm.hibernate3.HibernateTemplate hbt1 = getHibernateTemplate();
		hbt1.setFlushModeName("FLUSH_EAGER");
		hbt1.setCheckWriteOperations(false);
		Transaction tx = null;
		String msg = "";
		boolean succesfullyAdded = false;
		Set<String> itemsNotAvailable = new HashSet<String>();
		//String itemsNotAvailable="";
		try {
			tx = session.beginTransaction();

			String itemCode = "";
			
			String no = "";
			int StoreFyDocumentNoId = 0;
			MasHospital masHospital = new MasHospital();
			int i = 0;
			List<StoreBalanceT> storeBalTBatch1List = new ArrayList<StoreBalanceT>();
			
			if (itemCodeList.size() > 0) {
					

				for (i = 0; i < itemCodeList.size(); i++) {
					int itemId = 0;
					int manufacturerId = 0;
					BigDecimal stockQty = new BigDecimal(0.00);
					itemCode = itemCodeList.get(i);
					if(!itemCode.equals("")){
						List<Integer> itemIdList = session.createCriteria(MasStoreItem.class).add(Restrictions.eq("KmsclItemCode", itemCode)).add(Restrictions.eq("Status", "y").ignoreCase()).setProjection(Projections.property("Id")).list();
					if(itemIdList.size()>0)
						itemId = (Integer) itemIdList.get(0);
					}
				
					/*	List<Integer> manufacturerList = session.createCriteria(MasManufacturer.class).add(Restrictions.eq("ManufacturerName", supplierList.get(i))).setProjection(Projections.property("Id")).list();
						if(manufacturerList.size()>0)
							manufacturerId = (Integer) manufacturerList.get(0);*/
					manufacturerId = 432; // For KMSCL
					
					if (itemId != 0
							&& (!batch1.get(i).toString().equals(""))) {
						String expDate = "";
						if (!expiryDate1.get(i).toString().equals("")) {
							String[] str = null;
							String eDate = manufactureDate1.get(i).toString();
							if(eDate.contains("-"))
								str = eDate.split("-");
							if(eDate.contains("/"))
								str = eDate.split("/");
							if(eDate.contains(" "))
								str = eDate.split(" ");
							
							if (str.length > 2) {
								if (str[0] != null) {
									expDate = str[0].toString();
								}
								if (str[1] != null) {
									expDate = expDate + "/"+ str[1].toString();
								}
								if (str[2] != null) {
									if(str[2].toString().length()<4 && str[2].toString().length()==2){
										expDate = expDate + "/20"+ str[2].toString();
									}else{
									expDate = expDate + "/"+ str[2].toString();
									}
								}
							}
						}
						String qty = "";
						
						if (!qty1.get(i).toString().equals("")) {
							 qty = qty1.get(i).toString();
							if(qty.contains(","))
								qty = qty.replaceAll(",", "");
					
						}
						
						List<Integer> itemBatchList = new ArrayList<Integer>();
						itemBatchList = session.createCriteria(StoreItemBatchStock.class).add(Restrictions.eq("Department.Id", deptId))
								.add(Restrictions.eq("Hospital.Id", hospitalId))
								.add(Restrictions.eq("Item.Id", itemId))
								.add(Restrictions.eq("BatchNo", batch1.get(i))).add(Restrictions.eq("ExpiryDate", HMSUtil.convertStringTypeDateToDateType(expDate)))
								.setProjection(Projections.property("Id")).list();
						
						StoreItemBatchStock storeItemBatchStock = new StoreItemBatchStock();

						if(itemBatchList.size()>0){
							storeItemBatchStock = hbt1.load(StoreItemBatchStock.class,itemBatchList.get(0));
							if(storeItemBatchStock.getClosingStock()!=null){
								stockQty = (storeItemBatchStock.getClosingStock()).add(new BigDecimal(qty));
							}else{
								stockQty = new BigDecimal(qty);
							}
						}else{
							
							stockQty = new BigDecimal(qty);
						}
						MasStoreItem storeItem = new MasStoreItem();
						storeItem.setId(itemId);
						
						if (!batch1.get(i).toString().equals("")) {
							
							
							storeItemBatchStock.setBatchNo(batch1.get(i)
									.toString());
							if (!rateList.get(i).toString().equals("")) {
								String rate = rateList.get(i);
								if(rate.contains(","))
									rate = rate.replaceAll(",", "");
								
								storeItemBatchStock.setCostPrice(new BigDecimal(rate));
							}
						
								storeItemBatchStock.setOpeningBalanceQty(stockQty);
								storeItemBatchStock.setClosingStock(stockQty);
							
							
							if(manufacturerId!=0){
								MasManufacturer manufacturer = new MasManufacturer();
								manufacturer.setId(manufacturerId);
								storeItemBatchStock.setManufacturer(manufacturer);
							}
							if (!manufactureDate1.get(i).toString().equals("")) {
															
								String[] str = null;
								
								String mDate = manufactureDate1.get(i).toString();
								if(mDate.contains("-"))
									str = mDate.split("-");
								if(mDate.contains("/"))
									str = mDate.split("/");
								if(mDate.contains(" "))
									str = mDate.split(" ");
								
								
								
								String manufactureDate = "";
								if (str.length > 2) {
									if (str[0] != null) {
										manufactureDate = str[0].toString();
									}
									if (str[1] != null) {
										manufactureDate = manufactureDate + "/"
												+ str[1].toString();
									}
									if (str[2] != null) {
										if(str[2].toString().length()<4 && str[2].toString().length()==2){
											manufactureDate = manufactureDate + "/20"
													+ str[2].toString();
										}else{
											manufactureDate = manufactureDate + "/"
												+ str[2].toString();
										}
									}
									
								}
								if (!manufactureDate.equals("")) {
									
									storeItemBatchStock
											.setManufactureDate(HMSUtil
													.convertStringTypeDateToDateType(manufactureDate));
								} else {
									storeItemBatchStock.setManufactureDate(null);
								}
							}
							if (!expDate.equals("") ){
								
								storeItemBatchStock
										.setExpiryDate(HMSUtil
												.convertStringTypeDateToDateType(expDate));
							} else {
								
								storeItemBatchStock.setExpiryDate(null);
							}
							if (!supplierList.get(i).toString().equals("")) {
								storeItemBatchStock.setSupplierName(supplierList.get(i));
								
							}
							masHospital.setId(hospitalId);
							storeItemBatchStock.setHospital(masHospital);
							storeItemBatchStock.setItem(storeItem);
							MasDepartment masDepartment = new MasDepartment();
							masDepartment.setId(deptId);
							storeItemBatchStock.setDepartment(masDepartment);
							storeItemBatchStock.setOpeningBalanceDate(HMSUtil
									.convertStringTypeDateToDateType(date));
							Users user = new Users();
							user.setId(userId);
							storeItemBatchStock.setLastChgBy(user);
							storeItemBatchStock.setLastChgDate(new Date());
							hbt1.save(storeItemBatchStock);
						}
						succesfullyAdded = true;
						// }
					}else{
						itemsNotAvailable.add(itemCode);
						//itemsNotAvailable += itemCode+",\n";
						
					}
						
				}
			}
		
			msg = "Record Added Sucessfully..";
	
			tx.commit();
		} catch (Exception e) {
			msg = "Try Again..";
			tx.rollback();
			e.printStackTrace();
		}
		

		map.put("succesfullyAdded", succesfullyAdded);
		map.put("msg", msg);
		map.put("itemsNotAvailable", itemsNotAvailable);
		return map;
	}


	@Override
	public Map<String, Object> showCtJsp(Box box) {
		Map<String, Object> map = new HashMap<String, Object>();
		return map;
	}

	@Override
	public Map<String, Object> getPatientDetailsForCT(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<Object[]> patientPresriptionDetailList = new ArrayList<Object[]>();
		Properties properties = new Properties();
		URL resourcePath = Thread.currentThread().getContextClassLoader()
				.getResource("adt.properties");
		try {
			properties.load(resourcePath.openStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String empCategoryCodeForDoctor = properties.getProperty("empCategoryCodeForDoctor");
		
	System.out.println("hin No=================="+box.getString("uhidNo"));
		Session session = (Session)getSession();
		patientList = session.createCriteria(Patient.class).add(Restrictions.eq("HinNo", box.getString("uhidNo"))).list();
		
		patientPresriptionDetailList = session.createCriteria(PatientPrescriptionDetails.class).add(Restrictions.eq("Ct", "y").ignoreCase())
										.createAlias("Prescription", "prs").createAlias("prs.Hin", "hin").add(Restrictions.eq("hin.HinNo", box.getString("uhidNo")))
										.createAlias("prs.Visit", "visit")//.createAlias("visit.Doctor", "doctor").createAlias("doctor.Rank", "dRank")
										//.createAlias("hin.Rank", "rank")
										.createAlias("Item", "item")
										.createAlias("Frequency", "frq")
										.setProjection(Projections.distinct(Projections.projectionList()
												.add(Projections.property("hin.Id"))
												.add(Projections.property("item.Nomenclature"))
												//.add(Projections.property("doctor.FirstName"))
												//.add(Projections.property("doctor.MiddleName"))
												//.add(Projections.property("doctor.LastName"))
												.add(Projections.property("Dosage"))
												.add(Projections.property("NoOfDays"))
												.add(Projections.property("frq.FrequencyName"))
												//.add(Projections.property("doctor.Id"))
												.add(Projections.property("item.Id"))
												//.add(Projections.property("rank.RankName"))
												//.add(Projections.property("dRank.RankName"))
												//.add(Projections.property("prs.Remarks"))
												.add(Projections.property("frq.Id"))
										)).list();
		map.put("patientList", patientList);
		map.put("patientPresriptionDetailList", patientPresriptionDetailList);
		return map;
	}

	@Override
	public Map<String, Object> saveCtDetails(Box box) {
		Map<String, Object>map = new HashMap<String, Object>();
		Transaction tx = null;
		boolean flag = false;
		List<Patient> patientList = new ArrayList<Patient>();
		org.springframework.orm.hibernate3.HibernateTemplate hbt = getHibernateTemplate();
		Map<String, Object> requestMap = new HashMap<String,Object>();
		List<Visit> visitList = new ArrayList<Visit>();
		hbt.setFlushModeName("FLUSH_EAGER");
		hbt.setCheckWriteOperations(false);
		Session session = (Session)getSession();
		map.put("userName", box.getString("userName"));
		map.put("userId", box.getInt("userId"));
		map.put("hospitalId", box.getInt("hospitalId"));
		Map<String,Object> utilMap = new HashMap<String,Object>();
		utilMap = (Map)HMSUtil.getCurrentDateAndTime();
		String currentDate = (String)utilMap.get("currentDate");
		String time = (String)utilMap.get("currentTime");
		int hinId=  box.getInt("hinId");
		int hospitalId = box.getInt("hospitalId");
		int pharmacyDepartmentId=0;
		boolean successfullyAdded = false;
		boolean duplicateVisitSatatus=false;
		Map<String, Object> reservedTokenMap =null;
		Integer totalHospitalVisitNo=0;
		reservedTokenMap= new HashMap<String, Object>();
		
		int visitNo=0;
		int opsessionId = 0;
		String patientAge="";
		int tokenNo=0;
		int departmentId = 0;
		 URL resourcePath = Thread.currentThread().getContextClassLoader().getResource("adt.properties");
	        Properties prop = new Properties();
		 try {
				prop.load(new FileInputStream(new File(resourcePath.getFile())));
			} catch (Exception e1) {
				
				e1.printStackTrace();
			} 
	        if(prop.getProperty("pharmacyDepartmentId")!=null){
	        	pharmacyDepartmentId =Integer.parseInt(prop.getProperty("pharmacyDepartmentId"));
	        }
	        visitList=session.createCriteria(Visit.class)
					.createAlias("Hin", "hin")
		    		.add(Restrictions.eq("hin.Id",hinId))
		    		.addOrder(Order.desc("Id"))
		    		.list();
			if(visitList.size()>0)
				visitNo=visitList.get(0).getVisitNo()+1;
			else
				visitNo=1;

			Patient pat=hbt.load(Patient.class, hinId);
			if(pat!=null){
				patientAge=pat.getAge();
			}
		try {
			MasHospital masHospital = new MasHospital();
			PharmacyLabQueue phlabRadioQueue = new PharmacyLabQueue();
			Visit visit = new Visit();
			tx = session.beginTransaction();
				// Method which will check for duplicate visit creation for same department in same hospital for current date
				duplicateVisitSatatus=checkDuplicateVisit(hospitalId,pharmacyDepartmentId,hinId);
				if(!duplicateVisitSatatus){
				MasDepartment department=new MasDepartment();
				visit=new Visit();
			QueueManagment	queue=new QueueManagment();
				department.setId(pharmacyDepartmentId);
				visit.setDepartment(department);
				queue.setDepartment(department);
				
				
				visit.setPriorityNumber(3);
				queue.setPriorityNumber(3);
				
				/*if(dutyDoctorId>0){
					employee=new MasEmployee();
					employee.setId(dutyDoctorId);
					visit.setDoctor(employee);
					visit.setDoctorName(doctorName);
					queue.setDocotor(employee);
					queue.setInitialDr(employee);
					specialCategory = "D";
				}*/
				/*if(unitId>0){
				 hospUnitM=new HospitalDoctorUnitM();
				 hospUnitM.setId(unitId);
				visit.setUnit(hospUnitM);
				}*/
				Patient patient=new Patient();
				patient.setId(hinId);
				visit.setHin(patient);
				queue.setHin(patient);
				//visit.setCashReceivedStatus(cashReceived);
				//visit.setCashNotReceivedReason(cashNotReceivedReason);
				
				 boolean ispreviouesToken=false;
					
					// Method for getting Today's Resevered Queue number of online Appointment of patient based on Hospital and Department
					/*if(!referalStatus.equalsIgnoreCase("y")){
						map=getTotalVistByHospital(hospitalId, departmentId, currentDate, hinId,opsessionId,hospitalCode);
					}else if(refferalType!="" && refferalType.equalsIgnoreCase("External")){
						map=getTotalVistByHospital(hospitalId, departmentId, currentDate, hinId,opsessionId,hospitalCode);
					}
					else{*/
				 
				 	map=getTotalVistByHospital(hospitalId, departmentId, HMSUtil.convertStringTypeDateToDateType(currentDate), hinId,opsessionId,box.getString("hospitalCode"));
					//}
					if(null !=map.get("ispreviouesToken")){
						ispreviouesToken=(Boolean)map.get("ispreviouesToken");
					}
					if(null !=map.get("TotaltokenNo")){
						totalHospitalVisitNo=(Integer)map.get("TotaltokenNo");
					}
					if(!ispreviouesToken){
					totalHospitalVisitNo=totalHospitalVisitNo;
					}
					/*else{
						totalHospitalVisitNo=totalHospitalVisitNo;
					}*/
					
					visit.setTotalHospitalVisit( (int)totalHospitalVisitNo);
					queue.setTotalHospitalVisit((int)totalHospitalVisitNo);
					
					//reservedTokenMap=getReseveredTokenNo(pharmacyDepartmentId,hospitalId);
					int maxTokenNo = 0;
					String departmentType="";
					boolean status=false;
					
					//requestMap.put("reservedTokenMap", reservedTokenMap);
					masHospital.setId(hospitalId);
					requestMap.put("hospital", masHospital);
					requestMap.put("visitSessionId", opsessionId);
					requestMap.put("deptId", pharmacyDepartmentId);
					requestMap.put("vDate", HMSUtil.convertStringTypeDateToDateType(currentDate));
					//requestMap.put("requestedIP", requestedIP);
					
					//if(onlineRegStatus.equals("")){
							
					departmentId=pharmacyDepartmentId;
					departmentType="P";
					status=true;
						
							
							//maxTokenNo =getqueueNoForDepartment(departmentId, hospitalId,opsessionId);
							maxTokenNo =(int)getTokenNoForDepartment(requestMap);

							
						
						/*else{
					maxTokenNo =(int)getTokenNoForDepartment(requestMap);
						}
						*/
					tokenNo = maxTokenNo;

				/*while(reservedTokenMap.containsKey(String.valueOf(tokenNo))){
					maxTokenNo =(int)getTokenNoForDepartment(requestMap);
					logger.debug("if else of maxTokenNo "+maxTokenNo);
					tokenNo = maxTokenNo ; 
				}*/
					visit.setAppointmentType("D");
				/*	}
					else{*/
							/*if(null !=reservedTokenMap.get("patientWithTokenMap")){
								patientWithTokenMap=(Map<Integer,Object>)reservedTokenMap.get("patientWithTokenMap");
								if(null !=patientWithTokenMap.get(hinId))
									tokenNo=(Integer)patientWithTokenMap.get(hinId);
								visit.setAppointmentType("A");
								}*/
					//}
					visit.setAppointmentType("D");
					masHospital=new MasHospital();
					masHospital.setId(hospitalId);
					visit.setHospital(masHospital);
					queue.setHospital(masHospital);
			/*if(diagnosisId>0){
				masDiagnosisConclusion = new MasDiagnosisConclusion();
				masDiagnosisConclusion.setId(diagnosisId);
				visit.setDiagnosis(masDiagnosisConclusion);
			}
			if(consultingDoctorId>0){
				masEmployee = new MasEmployee();
				masEmployee.setId(consultingDoctorId);
				visit.setDoctor(masEmployee);
				queue.setDocotor(masEmployee);
				queue.setInitialDr(employee);
			}
			if(complaintId>0){
				 masComplaint = new MasComplaint();
					masComplaint.setId(complaintId);
					visit.setComplaint(masComplaint);
			}
			if(caseTypeId>0){
				 masCaseType = new MasCaseType();
					masCaseType.setId(caseTypeId);
					visit.setCaseType(masCaseType);
			}*/
			 opsessionId =getSessionForDepartment(pharmacyDepartmentId, hospitalId);
			 System.out.println("opsessionId====22222======="+opsessionId);
			if(opsessionId>0){
				MasSession masSession=new MasSession();
				masSession.setId(opsessionId);
				visit.setVisitSession(masSession);
			}
					
				visit.setTokenNo(tokenNo);
				queue.setTokenNo(tokenNo);
				Users users = new Users();
				users.setId(box.getInt("userId"));
				visit.setAddEditBy(users);
				visit.setAge(patientAge);
				SimpleDateFormat sdTime = new SimpleDateFormat("HH:mm");
	    	    Date current = new Date();
	    	    String times = sdTime.format(current);
				visit.setVisitTime(times);

				
				SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");

	    	    Date now = new Date();

	    	    String currentTime = sdfTime.format(now);


				visit.setOpVisitTime(currentTime);
				visit.setVisitDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				queue.setLsCngDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				visit.setVisitNo(visitNo);
				visit.setStatus("y");
				queue.setTokenStatus("w");
				queue.setOpVisitTime(time);
				visit.setEdStatus("n");
				visit.setVisitStatus("w");
				visit.setAddEditDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				visit.setAddEditTime(time);
				visit.setCurPharVisitStatus("Y");
				//visit.setReferralStatus(referalStatus);
				queue.setVisit(visit);
			
				/*String onlineAppointmentStauts="";
				
				if (mapForDs.get("onlineAppointmentStauts") != null) {
					onlineAppointmentStauts = (String) mapForDs.get("onlineAppointmentStauts");
					
				}
				String onlineAppId="";
				
				if (mapForDs.get("onlineAppId") != null) {
					onlineAppId = (String) mapForDs.get("onlineAppId");
					
				}*/
				
				
			/*	instituteDepartmentList =	session.createCriteria(MasInstituteDepartment.class).add(Restrictions.eq("Institute.Id", hospitalId)).add(Restrictions.eq("Department.Id", departmentId)).list();
				opdStartTime =	instituteDepartmentList.get(0).getOpeningTime();
				
					if (instituteDepartmentList.get(0)
							.getAvgNoOfPatients() != null && opdStartTime!=null) {
						avgNoOfPatients = instituteDepartmentList
								.get(0).getAvgNoOfPatients();
						Date date = timeFormat.parse(opdStartTime);
						Calendar cal = new GregorianCalendar();
						cal.setTime(date);

						cal.add(Calendar.HOUR_OF_DAY,
								visit.getTokenNo()
										/ avgNoOfPatients);
						reportingTime = timeFormat.format(cal
								.getTime());
						visit.setReportingTime(reportingTime);
					}*/
				
				visit.setDisplayAfterNo(visit.getTokenNo()-1); // added by amit das on 21-07-2017
				visit.setLastDisplayAfterNo(visit.getTokenNo()-1);
				
				masHospital =(MasHospital)session.get(MasHospital.class, hospitalId);
				if(masHospital!=null && masHospital.getClientIp()!=null && !masHospital.getClientIp().trim().equals("") && !masHospital.getClientIp().trim().equals("null") && masHospital.getClientPort()!=null && !masHospital.getClientPort().trim().equals("") && !masHospital.getClientPort().trim().equals("null")){
					visit.setCreationSource("C");
				}else if(masHospital!=null && masHospital.getServerIp()!=null && !masHospital.getServerIp().trim().equals("") && !masHospital.getServerIp().trim().equals("null") && masHospital.getServerPort()!=null && !masHospital.getServerPort().trim().equals("") && !masHospital.getServerPort().trim().equals("null")){
					visit.setCreationSource("L");
				}
				
				hbt.save(visit);
				hbt.refresh(visit);
				
				if(status){
					 phlabRadioQueue=saveQueueNoForPharmacy(pharmacyDepartmentId,hospitalId, visit,departmentType,tokenNo);
					hbt.save(phlabRadioQueue);
				}
				//visitId=visit.getId();
				//department_name=getDepartmentname(departmentId);
				//currentVisitNo++;
				/*if(null !=onlineAppointmentStauts && !onlineAppointmentStauts.equals("")){
					if(null !=onlineAppId && !onlineAppId.equals("")){
						AppPatientAppointments appPatientApp=(AppPatientAppointments) session.createCriteria(AppPatientAppointments.class)
								.createAlias("Hospital", "hospital")
								.add(Restrictions.eq("hospital.Id",hospitalId))
								.add(Restrictions.eq("Id",Integer.parseInt(onlineAppId))).list().get(0);
						appPatientApp.setAppointmentStatus("C");
						session.update(appPatientApp);
					}
				}
				*/

				queue.setLastChgDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
				queue.setLastChgTime(time);
				hbt.save(queue);
				hbt.refresh(queue);
				
				//visitlist.add(visit);
				//managements.add(queue);
				
				successfullyAdded = true;
				map.put("successfullyAdded", successfullyAdded);
				map.put("duplicateVisitSatatus", duplicateVisitSatatus);
			}/*else{
					map.put("successfullyAdded", successfullyAdded);
					map.put("duplicateVisitSatatus", duplicateVisitSatatus);
					//break;
					
				}*/
			int ctCount = box.getInt("ctCount");
			PatientPrescriptionHeader patientPrescriptionHeader = new PatientPrescriptionHeader();
			Patient patient = new Patient();
			patient.setId(box.getInt("hinId"));
			patientPrescriptionHeader.setHin(patient);
			patientPrescriptionHeader.setVisit(visit);
			MasDepartment masDepartment= new MasDepartment();
			masDepartment.setId(box.getInt("departmentId"));
			patientPrescriptionHeader.setDepartment(masDepartment);
			masHospital.setId(box.getInt("hospitalId"));
			patientPrescriptionHeader.setHospital(masHospital);
			patientPrescriptionHeader.setStatus("p");
			patientPrescriptionHeader.setPrescriptionDate(HMSUtil.convertStringTypeDateToDateType(currentDate));
			patientPrescriptionHeader.setPrescriptionTime(time);
			String prescriptionNo=generatePrecriptionNo(hinId);
			patientPrescriptionHeader.setPrescriptionNo(prescriptionNo);
			patientPrescriptionHeader.setPharmacyLabQueue(phlabRadioQueue);
			
			/*MasEmployee masEmployee = new MasEmployee();
			masEmployee.setId(box.getInt("doctorId"));
			patientPrescriptionHeader.setEmp(masEmployee);*/
			patientPrescriptionHeader.setRemarksForCt(box.getString("remarks"));
			hbt.save(patientPrescriptionHeader);
			for (int j = 1; j <= ctCount; j++) {
				PatientPrescriptionDetails patientPrescriptionDetails = new PatientPrescriptionDetails();
				 if(!box.getString("ctCheck"+j).equals("")){
					 if(box.getInt("itemId"+j) != 0){
						 MasStoreItem masItem = new MasStoreItem();
						 masItem.setId(box.getInt("itemId"+j));
						 patientPrescriptionDetails.setItem(masItem);
					 }
					 if(!box.getString("dosage"+j).equals("")){
						 patientPrescriptionDetails.setDosage(box.getFloat("dosage"+j));
					 }
					 int frequencyId = 0;
					 if(box.getInt("frequencyId"+j) != 0){
						MasFrequency masFrequency = new MasFrequency();
						 frequencyId = box.getInt("frequencyId"+j);
						 masFrequency.setId(box.getInt("frequencyId"+j));
						 patientPrescriptionDetails.setFrequency(masFrequency);
					 }
					 if(box.getInt("noofDays"+j) != 0){
						 int noOfDays = box.getInt("noofDays"+j);
					    patientPrescriptionDetails.setNoOfDays(box.getInt("noofDays"+j));
					    //int total = noOfDays * frequencyId;
						//patientPrescriptionDetails.setTotal(Float.parseFloat(""+total));
					 }
					
					 if(box.getInt("quantity"+j) != 0){
						 patientPrescriptionDetails.setTotal(Float.parseFloat(""+box.getInt("quantity"+j)));
					 }
					 //patientPrescriptionDetails.setCt("y");
					 patientPrescriptionDetails.setPrescription(patientPrescriptionHeader);
					 hbt.save(patientPrescriptionDetails);
				 }
				
			}
			
			flag = true;
			tx.commit();
		} catch (DataAccessException e) {
			e.printStackTrace();
		}
		map.put("flag", flag);
		return map;
	}
	
	@Override
	public synchronized boolean checkDuplicateVisit(int hospitalId, int departmentId,int uhid) {
		logger.debug("Inside Method: checkDuplicateVisit");
		Session session =(Session) getSession();

		Date date=new Date();

		Criteria crt=null;
		boolean status=false;
		logger.debug("uhid "+uhid);

		if(uhid>0){
			 crt=session.createCriteria(Visit.class).createAlias("Department", "deptId")
						.createAlias("Hospital", "hospId")
						.createAlias("Hin", "hind")
						.add(Restrictions.eq("deptId.Id", departmentId))
						.add(Restrictions.eq("hospId.Id", hospitalId))
						.add(Restrictions.eq("hind.Id", uhid))
						.add(Restrictions.eq("VisitDate", date)).add(Restrictions.eq("VisitStatus", "w"));
			 if(crt.list().size()>0){
				 status=true;
			 }
		 }


		return status;
	}

	public String generatePrecriptionNo(int hinId) {
		org.hibernate.Session session = getSession();
		List<PatientPrescriptionDetails> patientPrescriptionDetailsList = new ArrayList<PatientPrescriptionDetails>();
		List<Object> objectList = new ArrayList<Object>();
		String prescriptionNo = "1";
		String qry = "";
		try {
			objectList = (List<Object>) session
					.createSQLQuery(
							"select max(prescription_id)+1  from patient_prescription_header h,patient p where p.hin_id=h.hin_id and p.hin_id="
									+ hinId + " ").list();
					
			if(objectList.size()>0)
			{
				for (Object object : objectList) {
			
				if (object != null) {

					/*
					 * prescriptionNo = Integer.toString((((Double) object)
					 * .intValue()));
					 */
					prescriptionNo = Integer.toString((((Integer) object)
							.intValue()));

				}

			}
		}

			// "+prescriptionNo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("prescriptionNo "+prescriptionNo);
		return prescriptionNo;
	}
	
	
	public Integer getSessionForDepartment(int deptId,int hospitalId) {
		Session session=(Session) getSession();
	 	List<MasSession> sessionList= new ArrayList<>();
	 	List<String> masSessionList= new ArrayList<>();
	 	int opsessionId = 0;
	 	sessionList=session.createCriteria(MasSession.class).createAlias("Hospital", "hospId")
	 			.createAlias("Department", "dept",CriteriaSpecification.LEFT_JOIN)
	 	.add(Restrictions.eq("hospId.Id", hospitalId)).add(Restrictions.eq("Status", "y").ignoreCase())
	 	.add(Restrictions.eq("dept.Id", deptId))
	 	.list();
	 	
	 	if(sessionList.size() ==0){ // If department wise session is not available then hospital wise session will be used
	 		sessionList = session.createCriteria(MasSession.class).add(Restrictions.eq("Hospital.Id", hospitalId)).add(Restrictions.isNull("Department"))
	 				.add(Restrictions.eq("Status", "y").ignoreCase()).list();
	 	}
	 	
	 	Date currentSessionTime=new Date();
	 	SimpleDateFormat parser = new SimpleDateFormat("hh:mm a");
	 	String ct=parser.format(currentSessionTime);
	 	try{
	 		Date cur = parser.parse(ct);
	 		
	 		if(null !=sessionList && sessionList.size()>0) {
	 			for(MasSession masSession:sessionList){ 
	 					Date fromTime = parser.parse(masSession.getFromTime());
	 					Date toTime = parser.parse(masSession.getToTime());
	 					if(cur.after(fromTime) && cur.before(toTime)){
	 						//masSessionList.add(masSession.getId()+":"+masSession.getSessionName());
	 						opsessionId = masSession.getId();
	 					}
	 					
	 			}
	 		}
	 		
	 	}catch(Exception e){
	 		e.printStackTrace();
	 	}
		return opsessionId;
	}
	@SuppressWarnings("unchecked")
	public synchronized long getTokenNoForDepartment(Map<String, Object> dataMap) {
		logger.debug("Inside Method: getTokenNoForDepartment");

		MasHospital hospital = null;
		String hospitalCode = null;
		int deptId= 0;
		int visitSessionId=0;
		int hospitalId = 0;
		long tokenNo = 0L;
		Date vDate = null;
		Map<String, Object> reservedTokenMap = null;
		
		if(dataMap.get("hospital")!=null){
			hospital 	=  (MasHospital)dataMap.get("hospital");
			hospitalCode =	hospital.getHospitalCode();
			hospitalId = hospital.getId();
			
		  if(dataMap.get("deptId")!=null)
			deptId = (Integer)dataMap.get("deptId");
		
		  if(dataMap.get("visitSessionId")!=null)
			  visitSessionId = (Integer)dataMap.get("visitSessionId");
		  
		  if(dataMap.get("vDate")!=null)
			  vDate = (Date)dataMap.get("vDate");
		  
		  if(dataMap.get("reservedTokenMap")!=null)
			  reservedTokenMap = (Map<String, Object>)dataMap.get("reservedTokenMap");
		
		String tokenSequenceName = "token_" + deptId + "_" + hospitalCode + "_" + visitSessionId + "_seq";
		logger.debug("hospitalCode---" + hospitalCode);
		logger.debug("tokenSequenceName " + tokenSequenceName);
		List<Integer> tokenSequenceValue = new ArrayList<Integer>();
		String schName = "public";
		Session session = (Session) getSession();
		boolean sequenceExist = false;

		String query = "SELECT COUNT(*) FROM information_schema.sequences WHERE sequence_schema='" + schName + "' AND sequence_name='" + tokenSequenceName + "'";
				
				Query q = session.createSQLQuery(query);

		        BigInteger i = (BigInteger) q.list().get(0);
		        
		        if(i.intValue()==1){
		        	sequenceExist = true;
		        }else if(hospital.getServerIp()==null) {
		        	HMSUtil.generateSequence(tokenSequenceName);
		        	sequenceExist = true;
		        } 
		       
		        if(sequenceExist){
		        	query = "SELECT nextval('"+tokenSequenceName+"')";
		        	q = session.createSQLQuery(query);
		        	logger.debug("qury "+query);
		        	Iterator<BigInteger> iter;
					iter = Collections.<BigInteger>emptyList().iterator();
					iter = (Iterator<BigInteger>) q.list().iterator();
					tokenNo = iter.next().longValue();
					logger.debug("tokenSequenceName tokenNo "+tokenNo);
				}else {
		    		query = "select max(v.TokenNo) from Visit v where v.Hospital.Id=:hospitalId and v.Department.Id=:departmentId and v.VisitDate=:date and v.AppointmentType!='A'";
		    		q = session.createQuery(query);
		    		q.setParameter("hospitalId", hospitalId);
		    		q.setParameter("departmentId", deptId);
		    		q.setParameter("date", vDate);
		    		tokenSequenceValue = q.list();
		    		if (null !=tokenSequenceValue && tokenSequenceValue.size()>0 && null !=tokenSequenceValue.get(0)) {
		    			tokenNo = tokenSequenceValue.get(0);
		    		}
		    		tokenNo = tokenNo+1;
		    		
		    		while (reservedTokenMap.containsKey(String.valueOf(tokenNo))) {
						tokenNo = tokenNo+1;
					}
		    	}	
		        }
				return tokenNo;
	}
	
	@Override
	public synchronized Map<String,Object> getTotalVistByHospital(int hospitalId, int departmentId, Date vdate,
			int pHinId,int opsessionId,String hospitalCode) {

		logger.debug("Inside Method: getTotalVistByHospital");
		String opSerialNo="hospital_code_"+hospitalCode+"_seq";
		logger.debug("opSerialNo"+ opSerialNo);
		Map<String,Object> map= new HashMap<>();
		
		boolean ispreviouesToken=false;
		long TotaltokenNo = 0L;
		List<Integer> token = null;
		String schName = "public"; // added by amit das on 08-05-2017
		Session session = (Session) getSession();
		
		
		String query = "select v.TotalHospitalVisit from Visit  v where  v.Hospital.Id=:hospitalId and v.VisitDate=:date and v.Hin.Id=:hin  ";

		Query qur = session.createQuery(query);
		qur.setParameter("hin", pHinId);
		qur.setParameter("hospitalId", hospitalId);
		qur.setParameter("date", vdate);
		//qur.setParameter("opsessionId", opsessionId);
		token = qur.list();
		if (null !=token && token.size()>0 && null !=token.get(0)) {
			TotaltokenNo = token.get(0);
			ispreviouesToken=true;
		}
		else{
		
		
		query = "SELECT COUNT(*) FROM information_schema.sequences WHERE sequence_schema='" + schName + "' AND sequence_name='" + opSerialNo + "'";
		
		Query q = session.createSQLQuery(query);

        BigInteger i = (BigInteger) q.list().get(0);
        
        if(i.intValue() == 1){
			 Iterator<BigInteger> iter;
			iter = Collections.<BigInteger>emptyList().iterator();
			String qury = "SELECT nextval('"+opSerialNo+"')" ;

		q = session.createSQLQuery(qury);

		iter = (Iterator<BigInteger>) q.list().iterator();
		TotaltokenNo = iter.next().longValue();
		
		logger.debug("opserialNo TotaltokenNo TotaltokenNo "+ TotaltokenNo);
		} else {
		query = "select max(v.TotalHospitalVisit) from Visit v where  v.Hospital.Id = :hospitalId and v.VisitDate = :date  ";
		//String query = "select v.TotalHospitalVisit from Visit  v where  v.Hospital.Id=:hId and v.VisitDate=:date and v.Hin.Id=:hin and v.VisitSession.Id=:opsessionId";
		//String query = "select max(v.TotalHospitalVisit) from Visit  v where  v.Hospital.Id=:hId and v.VisitDate=:date ";
		q = session.createQuery(query);
		q.setParameter("hospitalId", hospitalId);
		q.setParameter("date", vdate);
		token = q.list();
		if (null !=token && token.size()>0 && null !=token.get(0))
			TotaltokenNo = token.get(0);
		
		
			 TotaltokenNo = TotaltokenNo+1;
		 }
          ispreviouesToken=false;
		}
		
		map.put("TotaltokenNo", (int)TotaltokenNo);
		map.put("ispreviouesToken", ispreviouesToken);
		return map;
	}
	private PharmacyLabQueue saveQueueNoForPharmacy(int departmentId,int hospitalId,Visit visit,String pharmacyLabStatus,int maxQueueNoDepartWise){
		
		PharmacyLabQueue pharmacyLabQueue=new PharmacyLabQueue();
		pharmacyLabQueue.setTokenNo(maxQueueNoDepartWise);
		
		MasDepartment masDepartment=new MasDepartment();
		masDepartment.setId(departmentId);
		pharmacyLabQueue.setDepartment(masDepartment);
		
		MasHospital masHospital=new MasHospital();
		masHospital.setId(hospitalId);
		pharmacyLabQueue.setHospital(masHospital);
		
		
		pharmacyLabQueue.setTotalHospitalVisit(visit.getTotalHospitalVisit());
		
		pharmacyLabQueue.setVisit(visit);
		
		pharmacyLabQueue.setStatus("D");
		logger.debug("pharmacyLabStatus   "+pharmacyLabStatus);
		pharmacyLabQueue.setPharmacyLabStatus(pharmacyLabStatus);
		
		SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm:ss");


	    Date now = new Date();

	    String opdTime = sdfTime.format(now);
	    
		pharmacyLabQueue.setOpdDate(now);
		pharmacyLabQueue.setOpdTime(opdTime);
		
		return pharmacyLabQueue;
		
	}

}
